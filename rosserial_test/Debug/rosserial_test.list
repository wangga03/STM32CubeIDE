
rosserial_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048cc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  080049d8  080049d8  000059d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c24  08004c24  0000606c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c24  08004c24  00005c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c2c  08004c2c  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004c2c  08004c2c  00005c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c34  08004c34  00005c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004c38  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000be0  2000006c  08004ca4  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c4c  08004ca4  00006c4c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d92d  00000000  00000000  00006095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023e5  00000000  00000000  000139c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  00015da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006fc  00000000  00000000  000166d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c94  00000000  00000000  00016dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd24  00000000  00000000  0002ea68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087896  00000000  00000000  0003a78c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2022  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002724  00000000  00000000  000c2068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000c478c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	080049c0 	.word	0x080049c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	080049c0 	.word	0x080049c0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000166:	683b      	ldr	r3, [r7, #0]
 8000168:	681b      	ldr	r3, [r3, #0]
 800016a:	0a5a      	lsrs	r2, r3, #9
 800016c:	490f      	ldr	r1, [pc, #60]	@ (80001ac <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800016e:	fba1 1202 	umull	r1, r2, r1, r2
 8000172:	09d2      	lsrs	r2, r2, #7
 8000174:	490e      	ldr	r1, [pc, #56]	@ (80001b0 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000176:	fb01 f202 	mul.w	r2, r1, r2
 800017a:	1a9b      	subs	r3, r3, r2
 800017c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800017e:	683b      	ldr	r3, [r7, #0]
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	0a5b      	lsrs	r3, r3, #9
 8000184:	4a09      	ldr	r2, [pc, #36]	@ (80001ac <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000186:	fba2 2303 	umull	r2, r3, r2, r3
 800018a:	09db      	lsrs	r3, r3, #7
 800018c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	681a      	ldr	r2, [r3, #0]
 8000192:	68bb      	ldr	r3, [r7, #8]
 8000194:	441a      	add	r2, r3
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800019a:	683b      	ldr	r3, [r7, #0]
 800019c:	68fa      	ldr	r2, [r7, #12]
 800019e:	601a      	str	r2, [r3, #0]
}
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	00044b83 	.word	0x00044b83
 80001b0:	3b9aca00 	.word	0x3b9aca00

080001b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80001ba:	4b10      	ldr	r3, [pc, #64]	@ (80001fc <MX_DMA_Init+0x48>)
 80001bc:	695b      	ldr	r3, [r3, #20]
 80001be:	4a0f      	ldr	r2, [pc, #60]	@ (80001fc <MX_DMA_Init+0x48>)
 80001c0:	f043 0301 	orr.w	r3, r3, #1
 80001c4:	6153      	str	r3, [r2, #20]
 80001c6:	4b0d      	ldr	r3, [pc, #52]	@ (80001fc <MX_DMA_Init+0x48>)
 80001c8:	695b      	ldr	r3, [r3, #20]
 80001ca:	f003 0301 	and.w	r3, r3, #1
 80001ce:	607b      	str	r3, [r7, #4]
 80001d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80001d2:	2200      	movs	r2, #0
 80001d4:	2100      	movs	r1, #0
 80001d6:	2010      	movs	r0, #16
 80001d8:	f002 fa0b 	bl	80025f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80001dc:	2010      	movs	r0, #16
 80001de:	f002 fa24 	bl	800262a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80001e2:	2200      	movs	r2, #0
 80001e4:	2100      	movs	r1, #0
 80001e6:	2011      	movs	r0, #17
 80001e8:	f002 fa03 	bl	80025f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80001ec:	2011      	movs	r0, #17
 80001ee:	f002 fa1c 	bl	800262a <HAL_NVIC_EnableIRQ>

}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40021000 	.word	0x40021000

08000200 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000200:	b480      	push	{r7}
 8000202:	b085      	sub	sp, #20
 8000204:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000206:	4b14      	ldr	r3, [pc, #80]	@ (8000258 <MX_GPIO_Init+0x58>)
 8000208:	699b      	ldr	r3, [r3, #24]
 800020a:	4a13      	ldr	r2, [pc, #76]	@ (8000258 <MX_GPIO_Init+0x58>)
 800020c:	f043 0320 	orr.w	r3, r3, #32
 8000210:	6193      	str	r3, [r2, #24]
 8000212:	4b11      	ldr	r3, [pc, #68]	@ (8000258 <MX_GPIO_Init+0x58>)
 8000214:	699b      	ldr	r3, [r3, #24]
 8000216:	f003 0320 	and.w	r3, r3, #32
 800021a:	60fb      	str	r3, [r7, #12]
 800021c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800021e:	4b0e      	ldr	r3, [pc, #56]	@ (8000258 <MX_GPIO_Init+0x58>)
 8000220:	699b      	ldr	r3, [r3, #24]
 8000222:	4a0d      	ldr	r2, [pc, #52]	@ (8000258 <MX_GPIO_Init+0x58>)
 8000224:	f043 0304 	orr.w	r3, r3, #4
 8000228:	6193      	str	r3, [r2, #24]
 800022a:	4b0b      	ldr	r3, [pc, #44]	@ (8000258 <MX_GPIO_Init+0x58>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	f003 0304 	and.w	r3, r3, #4
 8000232:	60bb      	str	r3, [r7, #8]
 8000234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000236:	4b08      	ldr	r3, [pc, #32]	@ (8000258 <MX_GPIO_Init+0x58>)
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	4a07      	ldr	r2, [pc, #28]	@ (8000258 <MX_GPIO_Init+0x58>)
 800023c:	f043 0308 	orr.w	r3, r3, #8
 8000240:	6193      	str	r3, [r2, #24]
 8000242:	4b05      	ldr	r3, [pc, #20]	@ (8000258 <MX_GPIO_Init+0x58>)
 8000244:	699b      	ldr	r3, [r3, #24]
 8000246:	f003 0308 	and.w	r3, r3, #8
 800024a:	607b      	str	r3, [r7, #4]
 800024c:	687b      	ldr	r3, [r7, #4]

}
 800024e:	bf00      	nop
 8000250:	3714      	adds	r7, #20
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	40021000 	.word	0x40021000

0800025c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000260:	f002 f86a 	bl	8002338 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000264:	f000 f80e 	bl	8000284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000268:	f7ff ffca 	bl	8000200 <MX_GPIO_Init>
  MX_DMA_Init();
 800026c:	f7ff ffa2 	bl	80001b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000270:	f001 fefc 	bl	800206c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000274:	f001 ff24 	bl	80020c0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  setup();
 8000278:	f001 f922 	bl	80014c0 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 800027c:	f001 f930 	bl	80014e0 <loop>
  {
 8000280:	bf00      	nop
 8000282:	e7fb      	b.n	800027c <main+0x20>

08000284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b090      	sub	sp, #64	@ 0x40
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	f107 0318 	add.w	r3, r7, #24
 800028e:	2228      	movs	r2, #40	@ 0x28
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f004 fa44 	bl	8004720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
 80002a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002a6:	2301      	movs	r3, #1
 80002a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b4:	2301      	movs	r3, #1
 80002b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b8:	2302      	movs	r3, #2
 80002ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002c2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c8:	f107 0318 	add.w	r3, r7, #24
 80002cc:	4618      	mov	r0, r3
 80002ce:	f002 fded 	bl	8002eac <HAL_RCC_OscConfig>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002d8:	f000 f819 	bl	800030e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002dc:	230f      	movs	r3, #15
 80002de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e0:	2302      	movs	r3, #2
 80002e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	2102      	movs	r1, #2
 80002f6:	4618      	mov	r0, r3
 80002f8:	f003 f85a 	bl	80033b0 <HAL_RCC_ClockConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000302:	f000 f804 	bl	800030e <Error_Handler>
  }
}
 8000306:	bf00      	nop
 8000308:	3740      	adds	r7, #64	@ 0x40
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}

0800030e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800030e:	b480      	push	{r7}
 8000310:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000312:	b672      	cpsid	i
}
 8000314:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000316:	bf00      	nop
 8000318:	e7fd      	b.n	8000316 <Error_Handler+0x8>

0800031a <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800031a:	b480      	push	{r7}
 800031c:	b083      	sub	sp, #12
 800031e:	af00      	add	r7, sp, #0
 8000320:	6078      	str	r0, [r7, #4]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2200      	movs	r2, #0
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2200      	movs	r2, #0
 800032c:	605a      	str	r2, [r3, #4]
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4618      	mov	r0, r3
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
	...

0800033c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	4a04      	ldr	r2, [pc, #16]	@ (8000358 <_ZN3ros3MsgC1Ev+0x1c>)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4618      	mov	r0, r3
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	bc80      	pop	{r7}
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	08004be8 	.word	0x08004be8

0800035c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
      data()
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4618      	mov	r0, r3
 8000368:	f7ff ffe8 	bl	800033c <_ZN3ros3MsgC1Ev>
 800036c:	4a06      	ldr	r2, [pc, #24]	@ (8000388 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	3304      	adds	r3, #4
 8000376:	4618      	mov	r0, r3
 8000378:	f7ff ffcf 	bl	800031a <_ZN3ros4TimeC1Ev>
    {
    }
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4618      	mov	r0, r3
 8000380:	3708      	adds	r7, #8
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	08004bd0 	.word	0x08004bd0

0800038c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800038c:	b480      	push	{r7}
 800038e:	b085      	sub	sp, #20
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000396:	2300      	movs	r3, #0
 8000398:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	6859      	ldr	r1, [r3, #4]
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	683a      	ldr	r2, [r7, #0]
 80003a2:	4413      	add	r3, r2
 80003a4:	b2ca      	uxtb	r2, r1
 80003a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	685b      	ldr	r3, [r3, #4]
 80003ac:	0a19      	lsrs	r1, r3, #8
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	3301      	adds	r3, #1
 80003b2:	683a      	ldr	r2, [r7, #0]
 80003b4:	4413      	add	r3, r2
 80003b6:	b2ca      	uxtb	r2, r1
 80003b8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	685b      	ldr	r3, [r3, #4]
 80003be:	0c19      	lsrs	r1, r3, #16
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	3302      	adds	r3, #2
 80003c4:	683a      	ldr	r2, [r7, #0]
 80003c6:	4413      	add	r3, r2
 80003c8:	b2ca      	uxtb	r2, r1
 80003ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	685b      	ldr	r3, [r3, #4]
 80003d0:	0e19      	lsrs	r1, r3, #24
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	3303      	adds	r3, #3
 80003d6:	683a      	ldr	r2, [r7, #0]
 80003d8:	4413      	add	r3, r2
 80003da:	b2ca      	uxtb	r2, r1
 80003dc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	3304      	adds	r3, #4
 80003e2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	6899      	ldr	r1, [r3, #8]
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	683a      	ldr	r2, [r7, #0]
 80003ec:	4413      	add	r3, r2
 80003ee:	b2ca      	uxtb	r2, r1
 80003f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	689b      	ldr	r3, [r3, #8]
 80003f6:	0a19      	lsrs	r1, r3, #8
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	3301      	adds	r3, #1
 80003fc:	683a      	ldr	r2, [r7, #0]
 80003fe:	4413      	add	r3, r2
 8000400:	b2ca      	uxtb	r2, r1
 8000402:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	689b      	ldr	r3, [r3, #8]
 8000408:	0c19      	lsrs	r1, r3, #16
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	3302      	adds	r3, #2
 800040e:	683a      	ldr	r2, [r7, #0]
 8000410:	4413      	add	r3, r2
 8000412:	b2ca      	uxtb	r2, r1
 8000414:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	689b      	ldr	r3, [r3, #8]
 800041a:	0e19      	lsrs	r1, r3, #24
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	3303      	adds	r3, #3
 8000420:	683a      	ldr	r2, [r7, #0]
 8000422:	4413      	add	r3, r2
 8000424:	b2ca      	uxtb	r2, r1
 8000426:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	3304      	adds	r3, #4
 800042c:	60fb      	str	r3, [r7, #12]
      return offset;
 800042e:	68fb      	ldr	r3, [r7, #12]
    }
 8000430:	4618      	mov	r0, r3
 8000432:	3714      	adds	r7, #20
 8000434:	46bd      	mov	sp, r7
 8000436:	bc80      	pop	{r7}
 8000438:	4770      	bx	lr

0800043a <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800043a:	b480      	push	{r7}
 800043c:	b085      	sub	sp, #20
 800043e:	af00      	add	r7, sp, #0
 8000440:	6078      	str	r0, [r7, #4]
 8000442:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000444:	2300      	movs	r3, #0
 8000446:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	683a      	ldr	r2, [r7, #0]
 800044c:	4413      	add	r3, r2
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	461a      	mov	r2, r3
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	685a      	ldr	r2, [r3, #4]
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	3301      	adds	r3, #1
 800045e:	6839      	ldr	r1, [r7, #0]
 8000460:	440b      	add	r3, r1
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	021b      	lsls	r3, r3, #8
 8000466:	431a      	orrs	r2, r3
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	685a      	ldr	r2, [r3, #4]
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	3302      	adds	r3, #2
 8000474:	6839      	ldr	r1, [r7, #0]
 8000476:	440b      	add	r3, r1
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	041b      	lsls	r3, r3, #16
 800047c:	431a      	orrs	r2, r3
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	685a      	ldr	r2, [r3, #4]
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	3303      	adds	r3, #3
 800048a:	6839      	ldr	r1, [r7, #0]
 800048c:	440b      	add	r3, r1
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	061b      	lsls	r3, r3, #24
 8000492:	431a      	orrs	r2, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	3304      	adds	r3, #4
 800049c:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	683a      	ldr	r2, [r7, #0]
 80004a2:	4413      	add	r3, r2
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	461a      	mov	r2, r3
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	689a      	ldr	r2, [r3, #8]
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	3301      	adds	r3, #1
 80004b4:	6839      	ldr	r1, [r7, #0]
 80004b6:	440b      	add	r3, r1
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	021b      	lsls	r3, r3, #8
 80004bc:	431a      	orrs	r2, r3
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	689a      	ldr	r2, [r3, #8]
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	3302      	adds	r3, #2
 80004ca:	6839      	ldr	r1, [r7, #0]
 80004cc:	440b      	add	r3, r1
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	041b      	lsls	r3, r3, #16
 80004d2:	431a      	orrs	r2, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	689a      	ldr	r2, [r3, #8]
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	3303      	adds	r3, #3
 80004e0:	6839      	ldr	r1, [r7, #0]
 80004e2:	440b      	add	r3, r1
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	061b      	lsls	r3, r3, #24
 80004e8:	431a      	orrs	r2, r3
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	3304      	adds	r3, #4
 80004f2:	60fb      	str	r3, [r7, #12]
     return offset;
 80004f4:	68fb      	ldr	r3, [r7, #12]
    }
 80004f6:	4618      	mov	r0, r3
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr

08000500 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	4b02      	ldr	r3, [pc, #8]	@ (8000514 <_ZN8std_msgs4Time7getTypeEv+0x14>)
 800050a:	4618      	mov	r0, r3
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr
 8000514:	080049d8 	.word	0x080049d8

08000518 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	4b02      	ldr	r3, [pc, #8]	@ (800052c <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 8000522:	4618      	mov	r0, r3
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr
 800052c:	080049e8 	.word	0x080049e8

08000530 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4618      	mov	r0, r3
 800053c:	f7ff fefe 	bl	800033c <_ZN3ros3MsgC1Ev>
 8000540:	4a0b      	ldr	r2, [pc, #44]	@ (8000570 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2200      	movs	r2, #0
 800054a:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	4a09      	ldr	r2, [pc, #36]	@ (8000574 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000550:	609a      	str	r2, [r3, #8]
      message_type(""),
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4a07      	ldr	r2, [pc, #28]	@ (8000574 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000556:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4a06      	ldr	r2, [pc, #24]	@ (8000574 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800055c:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2200      	movs	r2, #0
 8000562:	615a      	str	r2, [r3, #20]
    {
    }
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4618      	mov	r0, r3
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	08004bb8 	.word	0x08004bb8
 8000574:	08004a0c 	.word	0x08004a0c

08000578 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	8899      	ldrh	r1, [r3, #4]
 800058a:	69fb      	ldr	r3, [r7, #28]
 800058c:	683a      	ldr	r2, [r7, #0]
 800058e:	4413      	add	r3, r2
 8000590:	b2ca      	uxtb	r2, r1
 8000592:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	889b      	ldrh	r3, [r3, #4]
 8000598:	0a1b      	lsrs	r3, r3, #8
 800059a:	b299      	uxth	r1, r3
 800059c:	69fb      	ldr	r3, [r7, #28]
 800059e:	3301      	adds	r3, #1
 80005a0:	683a      	ldr	r2, [r7, #0]
 80005a2:	4413      	add	r3, r2
 80005a4:	b2ca      	uxtb	r2, r1
 80005a6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80005a8:	69fb      	ldr	r3, [r7, #28]
 80005aa:	3302      	adds	r3, #2
 80005ac:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff fdca 	bl	800014c <strlen>
 80005b8:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80005ba:	69fb      	ldr	r3, [r7, #28]
 80005bc:	683a      	ldr	r2, [r7, #0]
 80005be:	4413      	add	r3, r2
 80005c0:	69b9      	ldr	r1, [r7, #24]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 ffa6 	bl	8001514 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80005c8:	69fb      	ldr	r3, [r7, #28]
 80005ca:	3304      	adds	r3, #4
 80005cc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80005ce:	69fb      	ldr	r3, [r7, #28]
 80005d0:	683a      	ldr	r2, [r7, #0]
 80005d2:	18d0      	adds	r0, r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	69ba      	ldr	r2, [r7, #24]
 80005da:	4619      	mov	r1, r3
 80005dc:	f004 f8d4 	bl	8004788 <memcpy>
      offset += length_topic_name;
 80005e0:	69fa      	ldr	r2, [r7, #28]
 80005e2:	69bb      	ldr	r3, [r7, #24]
 80005e4:	4413      	add	r3, r2
 80005e6:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff fdad 	bl	800014c <strlen>
 80005f2:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80005f4:	69fb      	ldr	r3, [r7, #28]
 80005f6:	683a      	ldr	r2, [r7, #0]
 80005f8:	4413      	add	r3, r2
 80005fa:	6979      	ldr	r1, [r7, #20]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 ff89 	bl	8001514 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	3304      	adds	r3, #4
 8000606:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000608:	69fb      	ldr	r3, [r7, #28]
 800060a:	683a      	ldr	r2, [r7, #0]
 800060c:	18d0      	adds	r0, r2, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	68db      	ldr	r3, [r3, #12]
 8000612:	697a      	ldr	r2, [r7, #20]
 8000614:	4619      	mov	r1, r3
 8000616:	f004 f8b7 	bl	8004788 <memcpy>
      offset += length_message_type;
 800061a:	69fa      	ldr	r2, [r7, #28]
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	4413      	add	r3, r2
 8000620:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	691b      	ldr	r3, [r3, #16]
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff fd90 	bl	800014c <strlen>
 800062c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800062e:	69fb      	ldr	r3, [r7, #28]
 8000630:	683a      	ldr	r2, [r7, #0]
 8000632:	4413      	add	r3, r2
 8000634:	6939      	ldr	r1, [r7, #16]
 8000636:	4618      	mov	r0, r3
 8000638:	f000 ff6c 	bl	8001514 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800063c:	69fb      	ldr	r3, [r7, #28]
 800063e:	3304      	adds	r3, #4
 8000640:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	683a      	ldr	r2, [r7, #0]
 8000646:	18d0      	adds	r0, r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	691b      	ldr	r3, [r3, #16]
 800064c:	693a      	ldr	r2, [r7, #16]
 800064e:	4619      	mov	r1, r3
 8000650:	f004 f89a 	bl	8004788 <memcpy>
      offset += length_md5sum;
 8000654:	69fa      	ldr	r2, [r7, #28]
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	4413      	add	r3, r2
 800065a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	695b      	ldr	r3, [r3, #20]
 8000660:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000662:	68f9      	ldr	r1, [r7, #12]
 8000664:	69fb      	ldr	r3, [r7, #28]
 8000666:	683a      	ldr	r2, [r7, #0]
 8000668:	4413      	add	r3, r2
 800066a:	b2ca      	uxtb	r2, r1
 800066c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	0a19      	lsrs	r1, r3, #8
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	3301      	adds	r3, #1
 8000676:	683a      	ldr	r2, [r7, #0]
 8000678:	4413      	add	r3, r2
 800067a:	b2ca      	uxtb	r2, r1
 800067c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	0c19      	lsrs	r1, r3, #16
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	3302      	adds	r3, #2
 8000686:	683a      	ldr	r2, [r7, #0]
 8000688:	4413      	add	r3, r2
 800068a:	b2ca      	uxtb	r2, r1
 800068c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	0e19      	lsrs	r1, r3, #24
 8000692:	69fb      	ldr	r3, [r7, #28]
 8000694:	3303      	adds	r3, #3
 8000696:	683a      	ldr	r2, [r7, #0]
 8000698:	4413      	add	r3, r2
 800069a:	b2ca      	uxtb	r2, r1
 800069c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800069e:	69fb      	ldr	r3, [r7, #28]
 80006a0:	3304      	adds	r3, #4
 80006a2:	61fb      	str	r3, [r7, #28]
      return offset;
 80006a4:	69fb      	ldr	r3, [r7, #28]
    }
 80006a6:	4618      	mov	r0, r3
 80006a8:	3720      	adds	r7, #32
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b08a      	sub	sp, #40	@ 0x28
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
 80006b6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80006bc:	69bb      	ldr	r3, [r7, #24]
 80006be:	683a      	ldr	r2, [r7, #0]
 80006c0:	4413      	add	r3, r2
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	889b      	ldrh	r3, [r3, #4]
 80006ce:	b21a      	sxth	r2, r3
 80006d0:	69bb      	ldr	r3, [r7, #24]
 80006d2:	3301      	adds	r3, #1
 80006d4:	6839      	ldr	r1, [r7, #0]
 80006d6:	440b      	add	r3, r1
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	021b      	lsls	r3, r3, #8
 80006dc:	b21b      	sxth	r3, r3
 80006de:	4313      	orrs	r3, r2
 80006e0:	b21b      	sxth	r3, r3
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80006e8:	69bb      	ldr	r3, [r7, #24]
 80006ea:	3302      	adds	r3, #2
 80006ec:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80006ee:	69bb      	ldr	r3, [r7, #24]
 80006f0:	683a      	ldr	r2, [r7, #0]
 80006f2:	441a      	add	r2, r3
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	4611      	mov	r1, r2
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 ff28 	bl	8001550 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000700:	69bb      	ldr	r3, [r7, #24]
 8000702:	3304      	adds	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000706:	69bb      	ldr	r3, [r7, #24]
 8000708:	627b      	str	r3, [r7, #36]	@ 0x24
 800070a:	e00b      	b.n	8000724 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 800070c:	683a      	ldr	r2, [r7, #0]
 800070e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000710:	441a      	add	r2, r3
 8000712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000714:	3b01      	subs	r3, #1
 8000716:	6839      	ldr	r1, [r7, #0]
 8000718:	440b      	add	r3, r1
 800071a:	7812      	ldrb	r2, [r2, #0]
 800071c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800071e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000720:	3301      	adds	r3, #1
 8000722:	627b      	str	r3, [r7, #36]	@ 0x24
 8000724:	69ba      	ldr	r2, [r7, #24]
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	4413      	add	r3, r2
 800072a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800072c:	429a      	cmp	r2, r3
 800072e:	d3ed      	bcc.n	800070c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000730:	69ba      	ldr	r2, [r7, #24]
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	4413      	add	r3, r2
 8000736:	3b01      	subs	r3, #1
 8000738:	683a      	ldr	r2, [r7, #0]
 800073a:	4413      	add	r3, r2
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	3b01      	subs	r3, #1
 8000744:	683a      	ldr	r2, [r7, #0]
 8000746:	441a      	add	r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800074c:	69ba      	ldr	r2, [r7, #24]
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	4413      	add	r3, r2
 8000752:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000754:	69bb      	ldr	r3, [r7, #24]
 8000756:	683a      	ldr	r2, [r7, #0]
 8000758:	441a      	add	r2, r3
 800075a:	f107 0310 	add.w	r3, r7, #16
 800075e:	4611      	mov	r1, r2
 8000760:	4618      	mov	r0, r3
 8000762:	f000 fef5 	bl	8001550 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000766:	69bb      	ldr	r3, [r7, #24]
 8000768:	3304      	adds	r3, #4
 800076a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800076c:	69bb      	ldr	r3, [r7, #24]
 800076e:	623b      	str	r3, [r7, #32]
 8000770:	e00b      	b.n	800078a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8000772:	683a      	ldr	r2, [r7, #0]
 8000774:	6a3b      	ldr	r3, [r7, #32]
 8000776:	441a      	add	r2, r3
 8000778:	6a3b      	ldr	r3, [r7, #32]
 800077a:	3b01      	subs	r3, #1
 800077c:	6839      	ldr	r1, [r7, #0]
 800077e:	440b      	add	r3, r1
 8000780:	7812      	ldrb	r2, [r2, #0]
 8000782:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000784:	6a3b      	ldr	r3, [r7, #32]
 8000786:	3301      	adds	r3, #1
 8000788:	623b      	str	r3, [r7, #32]
 800078a:	69ba      	ldr	r2, [r7, #24]
 800078c:	693b      	ldr	r3, [r7, #16]
 800078e:	4413      	add	r3, r2
 8000790:	6a3a      	ldr	r2, [r7, #32]
 8000792:	429a      	cmp	r2, r3
 8000794:	d3ed      	bcc.n	8000772 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000796:	69ba      	ldr	r2, [r7, #24]
 8000798:	693b      	ldr	r3, [r7, #16]
 800079a:	4413      	add	r3, r2
 800079c:	3b01      	subs	r3, #1
 800079e:	683a      	ldr	r2, [r7, #0]
 80007a0:	4413      	add	r3, r2
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80007a6:	69bb      	ldr	r3, [r7, #24]
 80007a8:	3b01      	subs	r3, #1
 80007aa:	683a      	ldr	r2, [r7, #0]
 80007ac:	441a      	add	r2, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80007b2:	69ba      	ldr	r2, [r7, #24]
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	4413      	add	r3, r2
 80007b8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80007ba:	69bb      	ldr	r3, [r7, #24]
 80007bc:	683a      	ldr	r2, [r7, #0]
 80007be:	441a      	add	r2, r3
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	4611      	mov	r1, r2
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 fec2 	bl	8001550 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	3304      	adds	r3, #4
 80007d0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80007d2:	69bb      	ldr	r3, [r7, #24]
 80007d4:	61fb      	str	r3, [r7, #28]
 80007d6:	e00b      	b.n	80007f0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 80007d8:	683a      	ldr	r2, [r7, #0]
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	441a      	add	r2, r3
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3b01      	subs	r3, #1
 80007e2:	6839      	ldr	r1, [r7, #0]
 80007e4:	440b      	add	r3, r1
 80007e6:	7812      	ldrb	r2, [r2, #0]
 80007e8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	3301      	adds	r3, #1
 80007ee:	61fb      	str	r3, [r7, #28]
 80007f0:	69ba      	ldr	r2, [r7, #24]
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	4413      	add	r3, r2
 80007f6:	69fa      	ldr	r2, [r7, #28]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d3ed      	bcc.n	80007d8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80007fc:	69ba      	ldr	r2, [r7, #24]
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	4413      	add	r3, r2
 8000802:	3b01      	subs	r3, #1
 8000804:	683a      	ldr	r2, [r7, #0]
 8000806:	4413      	add	r3, r2
 8000808:	2200      	movs	r2, #0
 800080a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	3b01      	subs	r3, #1
 8000810:	683a      	ldr	r2, [r7, #0]
 8000812:	441a      	add	r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000818:	69ba      	ldr	r2, [r7, #24]
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	4413      	add	r3, r2
 800081e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	69ba      	ldr	r2, [r7, #24]
 8000828:	6839      	ldr	r1, [r7, #0]
 800082a:	440a      	add	r2, r1
 800082c:	7812      	ldrb	r2, [r2, #0]
 800082e:	4313      	orrs	r3, r2
 8000830:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000832:	68ba      	ldr	r2, [r7, #8]
 8000834:	69bb      	ldr	r3, [r7, #24]
 8000836:	3301      	adds	r3, #1
 8000838:	6839      	ldr	r1, [r7, #0]
 800083a:	440b      	add	r3, r1
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	021b      	lsls	r3, r3, #8
 8000840:	4313      	orrs	r3, r2
 8000842:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000844:	68ba      	ldr	r2, [r7, #8]
 8000846:	69bb      	ldr	r3, [r7, #24]
 8000848:	3302      	adds	r3, #2
 800084a:	6839      	ldr	r1, [r7, #0]
 800084c:	440b      	add	r3, r1
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	041b      	lsls	r3, r3, #16
 8000852:	4313      	orrs	r3, r2
 8000854:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000856:	68ba      	ldr	r2, [r7, #8]
 8000858:	69bb      	ldr	r3, [r7, #24]
 800085a:	3303      	adds	r3, #3
 800085c:	6839      	ldr	r1, [r7, #0]
 800085e:	440b      	add	r3, r1
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	061b      	lsls	r3, r3, #24
 8000864:	4313      	orrs	r3, r2
 8000866:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000868:	68ba      	ldr	r2, [r7, #8]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800086e:	69bb      	ldr	r3, [r7, #24]
 8000870:	3304      	adds	r3, #4
 8000872:	61bb      	str	r3, [r7, #24]
     return offset;
 8000874:	69bb      	ldr	r3, [r7, #24]
    }
 8000876:	4618      	mov	r0, r3
 8000878:	3728      	adds	r7, #40	@ 0x28
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	4b02      	ldr	r3, [pc, #8]	@ (8000894 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 800088a:	4618      	mov	r0, r3
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	08004a10 	.word	0x08004a10

08000898 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	4b02      	ldr	r3, [pc, #8]	@ (80008ac <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 80008a2:	4618      	mov	r0, r3
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr
 80008ac:	08004a2c 	.word	0x08004a2c

080008b0 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff fd3e 	bl	800033c <_ZN3ros3MsgC1Ev>
 80008c0:	4a06      	ldr	r2, [pc, #24]	@ (80008dc <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	601a      	str	r2, [r3, #0]
      level(0),
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2200      	movs	r2, #0
 80008ca:	711a      	strb	r2, [r3, #4]
      msg("")
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4a04      	ldr	r2, [pc, #16]	@ (80008e0 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80008d0:	609a      	str	r2, [r3, #8]
    {
    }
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4618      	mov	r0, r3
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	08004ba0 	.word	0x08004ba0
 80008e0:	08004a0c 	.word	0x08004a0c

080008e4 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	683a      	ldr	r2, [r7, #0]
 80008f6:	4413      	add	r3, r2
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	7912      	ldrb	r2, [r2, #4]
 80008fc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	3301      	adds	r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff fc1f 	bl	800014c <strlen>
 800090e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	683a      	ldr	r2, [r7, #0]
 8000914:	4413      	add	r3, r2
 8000916:	68b9      	ldr	r1, [r7, #8]
 8000918:	4618      	mov	r0, r3
 800091a:	f000 fdfb 	bl	8001514 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	3304      	adds	r3, #4
 8000922:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	683a      	ldr	r2, [r7, #0]
 8000928:	18d0      	adds	r0, r2, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	4619      	mov	r1, r3
 8000932:	f003 ff29 	bl	8004788 <memcpy>
      offset += length_msg;
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	4413      	add	r3, r2
 800093c:	60fb      	str	r3, [r7, #12]
      return offset;
 800093e:	68fb      	ldr	r3, [r7, #12]
    }
 8000940:	4618      	mov	r0, r3
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000956:	693b      	ldr	r3, [r7, #16]
 8000958:	683a      	ldr	r2, [r7, #0]
 800095a:	4413      	add	r3, r2
 800095c:	781a      	ldrb	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000962:	693b      	ldr	r3, [r7, #16]
 8000964:	3301      	adds	r3, #1
 8000966:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	683a      	ldr	r2, [r7, #0]
 800096c:	441a      	add	r2, r3
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	4611      	mov	r1, r2
 8000974:	4618      	mov	r0, r3
 8000976:	f000 fdeb 	bl	8001550 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	3304      	adds	r3, #4
 800097e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	e00b      	b.n	800099e <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8000986:	683a      	ldr	r2, [r7, #0]
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	441a      	add	r2, r3
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	3b01      	subs	r3, #1
 8000990:	6839      	ldr	r1, [r7, #0]
 8000992:	440b      	add	r3, r1
 8000994:	7812      	ldrb	r2, [r2, #0]
 8000996:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	3301      	adds	r3, #1
 800099c:	617b      	str	r3, [r7, #20]
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	4413      	add	r3, r2
 80009a4:	697a      	ldr	r2, [r7, #20]
 80009a6:	429a      	cmp	r2, r3
 80009a8:	d3ed      	bcc.n	8000986 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	4413      	add	r3, r2
 80009b0:	3b01      	subs	r3, #1
 80009b2:	683a      	ldr	r2, [r7, #0]
 80009b4:	4413      	add	r3, r2
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	3b01      	subs	r3, #1
 80009be:	683a      	ldr	r2, [r7, #0]
 80009c0:	441a      	add	r2, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	4413      	add	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
     return offset;
 80009ce:	693b      	ldr	r3, [r7, #16]
    }
 80009d0:	4618      	mov	r0, r3
 80009d2:	3718      	adds	r7, #24
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	4b02      	ldr	r3, [pc, #8]	@ (80009ec <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 80009e2:	4618      	mov	r0, r3
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr
 80009ec:	08004a50 	.word	0x08004a50

080009f0 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	4b02      	ldr	r3, [pc, #8]	@ (8000a04 <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 80009fa:	4618      	mov	r0, r3
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr
 8000a04:	08004a64 	.word	0x08004a64

08000a08 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff fc92 	bl	800033c <_ZN3ros3MsgC1Ev>
 8000a18:	4a11      	ldr	r2, [pc, #68]	@ (8000a60 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2200      	movs	r2, #0
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	f04f 0200 	mov.w	r2, #0
 8000a3c:	615a      	str	r2, [r3, #20]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	621a      	str	r2, [r3, #32]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	08004b88 	.word	0x08004b88

08000a64 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	@ 0x28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6859      	ldr	r1, [r3, #4]
 8000a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a78:	683a      	ldr	r2, [r7, #0]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	b2ca      	uxtb	r2, r1
 8000a7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	0a19      	lsrs	r1, r3, #8
 8000a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a88:	3301      	adds	r3, #1
 8000a8a:	683a      	ldr	r2, [r7, #0]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	b2ca      	uxtb	r2, r1
 8000a90:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	0c19      	lsrs	r1, r3, #16
 8000a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a9a:	3302      	adds	r3, #2
 8000a9c:	683a      	ldr	r2, [r7, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	b2ca      	uxtb	r2, r1
 8000aa2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	0e19      	lsrs	r1, r3, #24
 8000aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aac:	3303      	adds	r3, #3
 8000aae:	683a      	ldr	r2, [r7, #0]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	b2ca      	uxtb	r2, r1
 8000ab4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab8:	3304      	adds	r3, #4
 8000aba:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000abc:	2300      	movs	r3, #0
 8000abe:	623b      	str	r3, [r7, #32]
 8000ac0:	e02a      	b.n	8000b18 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	68da      	ldr	r2, [r3, #12]
 8000ac6:	6a3b      	ldr	r3, [r7, #32]
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	4413      	add	r3, r2
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000ad0:	6939      	ldr	r1, [r7, #16]
 8000ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	b2ca      	uxtb	r2, r1
 8000ada:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	0a19      	lsrs	r1, r3, #8
 8000ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	683a      	ldr	r2, [r7, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	b2ca      	uxtb	r2, r1
 8000aea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	0c19      	lsrs	r1, r3, #16
 8000af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af2:	3302      	adds	r3, #2
 8000af4:	683a      	ldr	r2, [r7, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	b2ca      	uxtb	r2, r1
 8000afa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	0e19      	lsrs	r1, r3, #24
 8000b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b02:	3303      	adds	r3, #3
 8000b04:	683a      	ldr	r2, [r7, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	b2ca      	uxtb	r2, r1
 8000b0a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b0e:	3304      	adds	r3, #4
 8000b10:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000b12:	6a3b      	ldr	r3, [r7, #32]
 8000b14:	3301      	adds	r3, #1
 8000b16:	623b      	str	r3, [r7, #32]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	6a3a      	ldr	r2, [r7, #32]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d3cf      	bcc.n	8000ac2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6919      	ldr	r1, [r3, #16]
 8000b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b28:	683a      	ldr	r2, [r7, #0]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	b2ca      	uxtb	r2, r1
 8000b2e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	691b      	ldr	r3, [r3, #16]
 8000b34:	0a19      	lsrs	r1, r3, #8
 8000b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b38:	3301      	adds	r3, #1
 8000b3a:	683a      	ldr	r2, [r7, #0]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	b2ca      	uxtb	r2, r1
 8000b40:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	691b      	ldr	r3, [r3, #16]
 8000b46:	0c19      	lsrs	r1, r3, #16
 8000b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b4a:	3302      	adds	r3, #2
 8000b4c:	683a      	ldr	r2, [r7, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	b2ca      	uxtb	r2, r1
 8000b52:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	691b      	ldr	r3, [r3, #16]
 8000b58:	0e19      	lsrs	r1, r3, #24
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b5c:	3303      	adds	r3, #3
 8000b5e:	683a      	ldr	r2, [r7, #0]
 8000b60:	4413      	add	r3, r2
 8000b62:	b2ca      	uxtb	r2, r1
 8000b64:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b68:	3304      	adds	r3, #4
 8000b6a:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
 8000b70:	e02a      	b.n	8000bc8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	699a      	ldr	r2, [r3, #24]
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	4413      	add	r3, r2
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000b80:	68f9      	ldr	r1, [r7, #12]
 8000b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b84:	683a      	ldr	r2, [r7, #0]
 8000b86:	4413      	add	r3, r2
 8000b88:	b2ca      	uxtb	r2, r1
 8000b8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	0a19      	lsrs	r1, r3, #8
 8000b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b92:	3301      	adds	r3, #1
 8000b94:	683a      	ldr	r2, [r7, #0]
 8000b96:	4413      	add	r3, r2
 8000b98:	b2ca      	uxtb	r2, r1
 8000b9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	0c19      	lsrs	r1, r3, #16
 8000ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ba2:	3302      	adds	r3, #2
 8000ba4:	683a      	ldr	r2, [r7, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	b2ca      	uxtb	r2, r1
 8000baa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	0e19      	lsrs	r1, r3, #24
 8000bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb2:	3303      	adds	r3, #3
 8000bb4:	683a      	ldr	r2, [r7, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	b2ca      	uxtb	r2, r1
 8000bba:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bbe:	3304      	adds	r3, #4
 8000bc0:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	61fb      	str	r3, [r7, #28]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	691b      	ldr	r3, [r3, #16]
 8000bcc:	69fa      	ldr	r2, [r7, #28]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d3cf      	bcc.n	8000b72 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	69d9      	ldr	r1, [r3, #28]
 8000bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	4413      	add	r3, r2
 8000bdc:	b2ca      	uxtb	r2, r1
 8000bde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	69db      	ldr	r3, [r3, #28]
 8000be4:	0a19      	lsrs	r1, r3, #8
 8000be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be8:	3301      	adds	r3, #1
 8000bea:	683a      	ldr	r2, [r7, #0]
 8000bec:	4413      	add	r3, r2
 8000bee:	b2ca      	uxtb	r2, r1
 8000bf0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	69db      	ldr	r3, [r3, #28]
 8000bf6:	0c19      	lsrs	r1, r3, #16
 8000bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bfa:	3302      	adds	r3, #2
 8000bfc:	683a      	ldr	r2, [r7, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	b2ca      	uxtb	r2, r1
 8000c02:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69db      	ldr	r3, [r3, #28]
 8000c08:	0e19      	lsrs	r1, r3, #24
 8000c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c0c:	3303      	adds	r3, #3
 8000c0e:	683a      	ldr	r2, [r7, #0]
 8000c10:	4413      	add	r3, r2
 8000c12:	b2ca      	uxtb	r2, r1
 8000c14:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c18:	3304      	adds	r3, #4
 8000c1a:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61bb      	str	r3, [r7, #24]
 8000c20:	e027      	b.n	8000c72 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	4413      	add	r3, r2
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fa8c 	bl	800014c <strlen>
 8000c34:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c38:	683a      	ldr	r2, [r7, #0]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	6979      	ldr	r1, [r7, #20]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 fc68 	bl	8001514 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c46:	3304      	adds	r3, #4
 8000c48:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c4c:	683a      	ldr	r2, [r7, #0]
 8000c4e:	18d0      	adds	r0, r2, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	4413      	add	r3, r2
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	697a      	ldr	r2, [r7, #20]
 8000c5e:	4619      	mov	r1, r3
 8000c60:	f003 fd92 	bl	8004788 <memcpy>
      offset += length_stringsi;
 8000c64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	4413      	add	r3, r2
 8000c6a:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	61bb      	str	r3, [r7, #24]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	69ba      	ldr	r2, [r7, #24]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d3d2      	bcc.n	8000c22 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8000c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3728      	adds	r7, #40	@ 0x28
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b08e      	sub	sp, #56	@ 0x38
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c96:	683a      	ldr	r2, [r7, #0]
 8000c98:	4413      	add	r3, r2
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	683a      	ldr	r2, [r7, #0]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	021b      	lsls	r3, r3, #8
 8000caa:	6a3a      	ldr	r2, [r7, #32]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cb2:	3302      	adds	r3, #2
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	041b      	lsls	r3, r3, #16
 8000cbc:	6a3a      	ldr	r2, [r7, #32]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cc4:	3303      	adds	r3, #3
 8000cc6:	683a      	ldr	r2, [r7, #0]
 8000cc8:	4413      	add	r3, r2
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	061b      	lsls	r3, r3, #24
 8000cce:	6a3a      	ldr	r2, [r7, #32]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8000cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cd6:	3304      	adds	r3, #4
 8000cd8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	6a3a      	ldr	r2, [r7, #32]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d90a      	bls.n	8000cfa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	68da      	ldr	r2, [r3, #12]
 8000ce8:	6a3b      	ldr	r3, [r7, #32]
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4619      	mov	r1, r3
 8000cee:	4610      	mov	r0, r2
 8000cf0:	f003 fce0 	bl	80046b4 <realloc>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6a3a      	ldr	r2, [r7, #32]
 8000cfe:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8000d00:	2300      	movs	r3, #0
 8000d02:	633b      	str	r3, [r7, #48]	@ 0x30
 8000d04:	e035      	b.n	8000d72 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000d0e:	6839      	ldr	r1, [r7, #0]
 8000d10:	440a      	add	r2, r1
 8000d12:	7812      	ldrb	r2, [r2, #0]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000d18:	697a      	ldr	r2, [r7, #20]
 8000d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	6839      	ldr	r1, [r7, #0]
 8000d20:	440b      	add	r3, r1
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	021b      	lsls	r3, r3, #8
 8000d26:	4313      	orrs	r3, r2
 8000d28:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d2e:	3302      	adds	r3, #2
 8000d30:	6839      	ldr	r1, [r7, #0]
 8000d32:	440b      	add	r3, r1
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	041b      	lsls	r3, r3, #16
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000d3c:	697a      	ldr	r2, [r7, #20]
 8000d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d40:	3303      	adds	r3, #3
 8000d42:	6839      	ldr	r1, [r7, #0]
 8000d44:	440b      	add	r3, r1
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	061b      	lsls	r3, r3, #24
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8000d54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d56:	3304      	adds	r3, #4
 8000d58:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	68da      	ldr	r2, [r3, #12]
 8000d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	4413      	add	r3, r2
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	3208      	adds	r2, #8
 8000d68:	6812      	ldr	r2, [r2, #0]
 8000d6a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8000d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d6e:	3301      	adds	r3, #1
 8000d70:	633b      	str	r3, [r7, #48]	@ 0x30
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d3c4      	bcc.n	8000d06 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d7e:	683a      	ldr	r2, [r7, #0]
 8000d80:	4413      	add	r3, r2
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d88:	3301      	adds	r3, #1
 8000d8a:	683a      	ldr	r2, [r7, #0]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	021b      	lsls	r3, r3, #8
 8000d92:	69fa      	ldr	r2, [r7, #28]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d9a:	3302      	adds	r3, #2
 8000d9c:	683a      	ldr	r2, [r7, #0]
 8000d9e:	4413      	add	r3, r2
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	041b      	lsls	r3, r3, #16
 8000da4:	69fa      	ldr	r2, [r7, #28]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dac:	3303      	adds	r3, #3
 8000dae:	683a      	ldr	r2, [r7, #0]
 8000db0:	4413      	add	r3, r2
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	061b      	lsls	r3, r3, #24
 8000db6:	69fa      	ldr	r2, [r7, #28]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8000dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dbe:	3304      	adds	r3, #4
 8000dc0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	691b      	ldr	r3, [r3, #16]
 8000dc6:	69fa      	ldr	r2, [r7, #28]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d90a      	bls.n	8000de2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	699a      	ldr	r2, [r3, #24]
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4610      	mov	r0, r2
 8000dd8:	f003 fc6c 	bl	80046b4 <realloc>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	69fa      	ldr	r2, [r7, #28]
 8000de6:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8000de8:	2300      	movs	r3, #0
 8000dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000dec:	e035      	b.n	8000e5a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000df6:	6839      	ldr	r1, [r7, #0]
 8000df8:	440a      	add	r2, r1
 8000dfa:	7812      	ldrb	r2, [r2, #0]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e04:	3301      	adds	r3, #1
 8000e06:	6839      	ldr	r1, [r7, #0]
 8000e08:	440b      	add	r3, r1
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	021b      	lsls	r3, r3, #8
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e16:	3302      	adds	r3, #2
 8000e18:	6839      	ldr	r1, [r7, #0]
 8000e1a:	440b      	add	r3, r1
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	041b      	lsls	r3, r3, #16
 8000e20:	4313      	orrs	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e28:	3303      	adds	r3, #3
 8000e2a:	6839      	ldr	r1, [r7, #0]
 8000e2c:	440b      	add	r3, r1
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	061b      	lsls	r3, r3, #24
 8000e32:	4313      	orrs	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8000e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e3e:	3304      	adds	r3, #4
 8000e40:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	699a      	ldr	r2, [r3, #24]
 8000e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	4413      	add	r3, r2
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	3214      	adds	r2, #20
 8000e50:	6812      	ldr	r2, [r2, #0]
 8000e52:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8000e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e56:	3301      	adds	r3, #1
 8000e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	691b      	ldr	r3, [r3, #16]
 8000e5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d3c4      	bcc.n	8000dee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e66:	683a      	ldr	r2, [r7, #0]
 8000e68:	4413      	add	r3, r2
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e70:	3301      	adds	r3, #1
 8000e72:	683a      	ldr	r2, [r7, #0]
 8000e74:	4413      	add	r3, r2
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	021b      	lsls	r3, r3, #8
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e82:	3302      	adds	r3, #2
 8000e84:	683a      	ldr	r2, [r7, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	041b      	lsls	r3, r3, #16
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000e92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e94:	3303      	adds	r3, #3
 8000e96:	683a      	ldr	r2, [r7, #0]
 8000e98:	4413      	add	r3, r2
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	061b      	lsls	r3, r3, #24
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8000ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ea6:	3304      	adds	r3, #4
 8000ea8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d90a      	bls.n	8000eca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4610      	mov	r0, r2
 8000ec0:	f003 fbf8 	bl	80046b4 <realloc>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ed4:	e03e      	b.n	8000f54 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8000ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ed8:	683a      	ldr	r2, [r7, #0]
 8000eda:	441a      	add	r2, r3
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 fb34 	bl	8001550 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000eea:	3304      	adds	r3, #4
 8000eec:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8000eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ef0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ef2:	e00b      	b.n	8000f0c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8000ef4:	683a      	ldr	r2, [r7, #0]
 8000ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef8:	441a      	add	r2, r3
 8000efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000efc:	3b01      	subs	r3, #1
 8000efe:	6839      	ldr	r1, [r7, #0]
 8000f00:	440b      	add	r3, r1
 8000f02:	7812      	ldrb	r2, [r2, #0]
 8000f04:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8000f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f08:	3301      	adds	r3, #1
 8000f0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	4413      	add	r3, r2
 8000f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d3ed      	bcc.n	8000ef4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8000f18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	683a      	ldr	r2, [r7, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8000f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	683a      	ldr	r2, [r7, #0]
 8000f2e:	441a      	add	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8000f34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	4413      	add	r3, r2
 8000f3a:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	3220      	adds	r2, #32
 8000f4a:	6812      	ldr	r2, [r2, #0]
 8000f4c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8000f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f50:	3301      	adds	r3, #1
 8000f52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	69db      	ldr	r3, [r3, #28]
 8000f58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d3bb      	bcc.n	8000ed6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8000f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8000f60:	4618      	mov	r0, r3
 8000f62:	3738      	adds	r7, #56	@ 0x38
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	4b02      	ldr	r3, [pc, #8]	@ (8000f7c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	08004b24 	.word	0x08004b24

08000f80 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	4b02      	ldr	r3, [pc, #8]	@ (8000f94 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	08004a88 	.word	0x08004a88

08000f98 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
 8000fa4:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	68ba      	ldr	r2, [r7, #8]
 8000faa:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	683a      	ldr	r2, [r7, #0]
 8000fb6:	611a      	str	r2, [r3, #16]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr

08000fc4 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	68d8      	ldr	r0, [r3, #12]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	6891      	ldr	r1, [r2, #8]
 8000fde:	683a      	ldr	r2, [r7, #0]
 8000fe0:	4798      	blx	r3
 8000fe2:	4603      	mov	r3, r0
  };
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	691b      	ldr	r3, [r3, #16]
  }
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr

08001002 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr
	...

08001028 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a0a      	ldr	r2, [pc, #40]	@ (800105c <_ZN13STM32HardwareC1Ev+0x34>)
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
    }
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000a30 	.word	0x20000a30

08001060 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f000 f804 	bl	8001076 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6818      	ldr	r0, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3304      	adds	r3, #4
 8001086:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800108a:	4619      	mov	r1, r3
 800108c:	f002 fbde 	bl	800384c <HAL_UART_Receive_DMA>
    }
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
      int c = -1;
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010a4:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f8d3 4204 	ldr.w	r4, [r3, #516]	@ 0x204
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ffa8 	bl	8001002 <_ZN13STM32Hardware10getRdmaIndEv>
 80010b2:	4603      	mov	r3, r0
 80010b4:	429c      	cmp	r4, r3
 80010b6:	bf14      	ite	ne
 80010b8:	2301      	movne	r3, #1
 80010ba:	2300      	moveq	r3, #0
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d012      	beq.n	80010e8 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80010c8:	1c59      	adds	r1, r3, #1
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	f8c2 1204 	str.w	r1, [r2, #516]	@ 0x204
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	4413      	add	r3, r2
 80010d4:	791b      	ldrb	r3, [r3, #4]
 80010d6:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80010de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      return c;
 80010e8:	68fb      	ldr	r3, [r7, #12]
    }
 80010ea:	4618      	mov	r0, r3
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd90      	pop	{r4, r7, pc}
	...

080010f4 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b20      	cmp	r3, #32
 8001108:	d108      	bne.n	800111c <_ZN13STM32Hardware5flushEv+0x28>
 800110a:	4b33      	ldr	r3, [pc, #204]	@ (80011d8 <_ZN13STM32Hardware5flushEv+0xe4>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	f083 0301 	eor.w	r3, r3, #1
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <_ZN13STM32Hardware5flushEv+0x28>
 8001118:	2301      	movs	r3, #1
 800111a:	e000      	b.n	800111e <_ZN13STM32Hardware5flushEv+0x2a>
 800111c:	2300      	movs	r3, #0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d055      	beq.n	80011ce <_ZN13STM32Hardware5flushEv+0xda>
        mutex = true;
 8001122:	4b2d      	ldr	r3, [pc, #180]	@ (80011d8 <_ZN13STM32Hardware5flushEv+0xe4>)
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001134:	429a      	cmp	r2, r3
 8001136:	d047      	beq.n	80011c8 <_ZN13STM32Hardware5flushEv+0xd4>
          uint16_t len = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001148:	429a      	cmp	r2, r3
 800114a:	d217      	bcs.n	800117c <_ZN13STM32Hardware5flushEv+0x88>
			len = twind - tfind;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001152:	b29a      	uxth	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800115a:	b29b      	uxth	r3, r3
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6818      	ldr	r0, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800116a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	89fa      	ldrh	r2, [r7, #14]
 8001174:	4619      	mov	r1, r3
 8001176:	f002 faf9 	bl	800376c <HAL_UART_Transmit_DMA>
 800117a:	e01f      	b.n	80011bc <_ZN13STM32Hardware5flushEv+0xc8>
		  }else{
			len = tbuflen - tfind;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001182:	b29b      	uxth	r3, r3
 8001184:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001188:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6818      	ldr	r0, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001194:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	4413      	add	r3, r2
 800119c:	89fa      	ldrh	r2, [r7, #14]
 800119e:	4619      	mov	r1, r3
 80011a0:	f002 fae4 	bl	800376c <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart, tbuf, twind);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6818      	ldr	r0, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f503 7102 	add.w	r1, r3, #520	@ 0x208
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	461a      	mov	r2, r3
 80011b8:	f002 fad8 	bl	800376c <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
        }
        mutex = false;
 80011c8:	4b03      	ldr	r3, [pc, #12]	@ (80011d8 <_ZN13STM32Hardware5flushEv+0xe4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
      }
    }
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000088 	.word	0x20000088

080011dc <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
      int n = length;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011f2:	bfa8      	it	ge
 80011f4:	f44f 7300 	movge.w	r3, #512	@ 0x200
 80011f8:	617b      	str	r3, [r7, #20]

      int n_tail = n <= (int)(tbuflen - twind) ? n : (int)(tbuflen - twind);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001200:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001204:	461a      	mov	r2, r3
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	4293      	cmp	r3, r2
 800120a:	bfa8      	it	ge
 800120c:	4613      	movge	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001216:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	4413      	add	r3, r2
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	68b9      	ldr	r1, [r7, #8]
 8001222:	4618      	mov	r0, r3
 8001224:	f003 fab0 	bl	8004788 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	4413      	add	r3, r2
 8001232:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

      if(n != n_tail){
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	429a      	cmp	r2, r3
 8001242:	d00b      	beq.n	800125c <_ZN13STM32Hardware5writeEPhi+0x80>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f503 7002 	add.w	r0, r3, #520	@ 0x208
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	18d1      	adds	r1, r2, r3
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	461a      	mov	r2, r3
 8001258:	f003 fa96 	bl	8004788 <memcpy>
      }

      flush();
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	f7ff ff49 	bl	80010f4 <_ZN13STM32Hardware5flushEv>
    }
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	f001 f8b9 	bl	80023e8 <HAL_GetTick>
 8001276:	4603      	mov	r3, r0
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
      data("")
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff f856 	bl	800033c <_ZN3ros3MsgC1Ev>
 8001290:	4a05      	ldr	r2, [pc, #20]	@ (80012a8 <_ZN8std_msgs6StringC1Ev+0x28>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a04      	ldr	r2, [pc, #16]	@ (80012ac <_ZN8std_msgs6StringC1Ev+0x2c>)
 800129a:	605a      	str	r2, [r3, #4]
    {
    }
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	08004b5c 	.word	0x08004b5c
 80012ac:	08004a0c 	.word	0x08004a0c

080012b0 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7fe ff42 	bl	800014c <strlen>
 80012c8:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	68b9      	ldr	r1, [r7, #8]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f91e 	bl	8001514 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	3304      	adds	r3, #4
 80012dc:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	18d0      	adds	r0, r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	68ba      	ldr	r2, [r7, #8]
 80012ea:	4619      	mov	r1, r3
 80012ec:	f003 fa4c 	bl	8004788 <memcpy>
      offset += length_data;
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	4413      	add	r3, r2
 80012f6:	60fb      	str	r3, [r7, #12]
      return offset;
 80012f8:	68fb      	ldr	r3, [r7, #12]
    }
 80012fa:	4618      	mov	r0, r3
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	441a      	add	r2, r3
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f000 f917 	bl	8001550 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	3304      	adds	r3, #4
 8001326:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	e00b      	b.n	8001346 <_ZN8std_msgs6String11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	441a      	add	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	3b01      	subs	r3, #1
 8001338:	6839      	ldr	r1, [r7, #0]
 800133a:	440b      	add	r3, r1
 800133c:	7812      	ldrb	r2, [r2, #0]
 800133e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	3301      	adds	r3, #1
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4413      	add	r3, r2
 800134c:	697a      	ldr	r2, [r7, #20]
 800134e:	429a      	cmp	r2, r3
 8001350:	d3ed      	bcc.n	800132e <_ZN8std_msgs6String11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_data-1]=0;
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4413      	add	r3, r2
 8001358:	3b01      	subs	r3, #1
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	4413      	add	r3, r2
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	3b01      	subs	r3, #1
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	441a      	add	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	605a      	str	r2, [r3, #4]
      offset += length_data;
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4413      	add	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
     return offset;
 8001376:	693b      	ldr	r3, [r7, #16]
    }
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	4b02      	ldr	r3, [pc, #8]	@ (8001394 <_ZN8std_msgs6String7getTypeEv+0x14>)
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	08004aac 	.word	0x08004aac

08001398 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	4b02      	ldr	r3, [pc, #8]	@ (80013ac <_ZN8std_msgs6String6getMD5Ev+0x14>)
 80013a2:	4618      	mov	r0, r3
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	08004abc 	.word	0x08004abc

080013b0 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	4a04      	ldr	r2, [pc, #16]	@ (80013cc <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4618      	mov	r0, r3
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	08004b74 	.word	0x08004b74

080013d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ffe8 	bl	80013b0 <_ZN3ros15NodeHandleBase_C1Ev>
 80013e0:	4a36      	ldr	r2, [pc, #216]	@ (80014bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3304      	adds	r3, #4
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fe1c 	bl	8001028 <_ZN13STM32HardwareC1Ev>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8001416:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800141a:	2100      	movs	r1, #0
 800141c:	4618      	mov	r0, r3
 800141e:	f003 f97f 	bl	8004720 <memset>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8001428:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800142c:	2100      	movs	r1, #0
 800142e:	4618      	mov	r0, r3
 8001430:	f003 f976 	bl	8004720 <memset>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f603 0324 	addw	r3, r3, #2084	@ 0x824
 800143a:	2264      	movs	r2, #100	@ 0x64
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f003 f96e 	bl	8004720 <memset>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 800144a:	2264      	movs	r2, #100	@ 0x64
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f003 f966 	bl	8004720 <memset>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f603 1314 	addw	r3, r3, #2324	@ 0x914
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff faac 	bl	8000a08 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	08004b48 	.word	0x08004b48

080014c0 <setup>:
ros::Publisher chatter("chatter", &str_msg);

char hello[13] = "hello world!";

void setup()
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  nh.initNode();
 80014c4:	4804      	ldr	r0, [pc, #16]	@ (80014d8 <setup+0x18>)
 80014c6:	f000 f868 	bl	800159a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(chatter);
 80014ca:	4904      	ldr	r1, [pc, #16]	@ (80014dc <setup+0x1c>)
 80014cc:	4802      	ldr	r0, [pc, #8]	@ (80014d8 <setup+0x18>)
 80014ce:	f000 f881 	bl	80015d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	2000008c 	.word	0x2000008c
 80014dc:	200009d0 	.word	0x200009d0

080014e0 <loop>:

void loop()
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  str_msg.data = hello;
 80014e4:	4b07      	ldr	r3, [pc, #28]	@ (8001504 <loop+0x24>)
 80014e6:	4a08      	ldr	r2, [pc, #32]	@ (8001508 <loop+0x28>)
 80014e8:	605a      	str	r2, [r3, #4]
  chatter.publish( &str_msg );
 80014ea:	4906      	ldr	r1, [pc, #24]	@ (8001504 <loop+0x24>)
 80014ec:	4807      	ldr	r0, [pc, #28]	@ (800150c <loop+0x2c>)
 80014ee:	f7ff fd69 	bl	8000fc4 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  nh.spinOnce();
 80014f2:	4807      	ldr	r0, [pc, #28]	@ (8001510 <loop+0x30>)
 80014f4:	f000 f89d 	bl	8001632 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
  HAL_Delay(1000);
 80014f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014fc:	f000 ff7e 	bl	80023fc <HAL_Delay>
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	200009c8 	.word	0x200009c8
 8001508:	20000000 	.word	0x20000000
 800150c:	200009d0 	.word	0x200009d0
 8001510:	2000008c 	.word	0x2000008c

08001514 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	e00c      	b.n	800153e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	fa22 f103 	lsr.w	r1, r2, r3
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4413      	add	r3, r2
 8001534:	b2ca      	uxtb	r2, r1
 8001536:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	3301      	adds	r3, #1
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2b03      	cmp	r3, #3
 8001542:	d9ef      	bls.n	8001524 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	e010      	b.n	8001588 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6839      	ldr	r1, [r7, #0]
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	440a      	add	r2, r1
 8001570:	7812      	ldrb	r2, [r2, #0]
 8001572:	4611      	mov	r1, r2
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	00d2      	lsls	r2, r2, #3
 8001578:	fa01 f202 	lsl.w	r2, r1, r2
 800157c:	431a      	orrs	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	3301      	adds	r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2b03      	cmp	r3, #3
 800158c:	d9eb      	bls.n	8001566 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 800158e:	bf00      	nop
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr

0800159a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3304      	adds	r3, #4
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fd5a 	bl	8001060 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
    bytes_ = 0;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
    index_ = 0;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
    topic_ = 0;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
  };
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	e01d      	b.n	8001620 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d111      	bne.n	800161a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	60da      	str	r2, [r3, #12]
        return true;
 8001616:	2301      	movs	r3, #1
 8001618:	e006      	b.n	8001628 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	3301      	adds	r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2b18      	cmp	r3, #24
 8001624:	ddde      	ble.n	80015e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8001626:	2300      	movs	r3, #0
  }
 8001628:	4618      	mov	r0, r3
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr

08001632 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8001632:	b580      	push	{r7, lr}
 8001634:	b084      	sub	sp, #16
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	3304      	adds	r3, #4
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fe13 	bl	800126a <_ZN13STM32Hardware4timeEv>
 8001644:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f8d3 3908 	ldr.w	r3, [r3, #2312]	@ 0x908
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8001654:	4293      	cmp	r3, r2
 8001656:	d903      	bls.n	8001660 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
    if (mode_ != MODE_FIRST_FF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001666:	2b00      	cmp	r3, #0
 8001668:	d009      	beq.n	800167e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	429a      	cmp	r2, r3
 8001674:	d903      	bls.n	800167e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
      if (spin_timeout_ > 0)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8001684:	2b00      	cmp	r3, #0
 8001686:	d014      	beq.n	80016b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3304      	adds	r3, #4
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fdec 	bl	800126a <_ZN13STM32Hardware4timeEv>
 8001692:	4602      	mov	r2, r0
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	1ad2      	subs	r2, r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 800169e:	429a      	cmp	r2, r3
 80016a0:	bf8c      	ite	hi
 80016a2:	2301      	movhi	r3, #1
 80016a4:	2300      	movls	r3, #0
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d002      	beq.n	80016b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 80016ac:	f06f 0301 	mvn.w	r3, #1
 80016b0:	e194      	b.n	80019dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3304      	adds	r3, #4
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fcee 	bl	8001098 <_ZN13STM32Hardware4readEv>
 80016bc:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f2c0 8174 	blt.w	80019ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	@ 0x8fc
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	441a      	add	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80016dc:	2b07      	cmp	r3, #7
 80016de:	d11e      	bne.n	800171e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 80016e6:	1c59      	adds	r1, r3, #1
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	f8c2 18f8 	str.w	r1, [r2, #2296]	@ 0x8f8
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	b2d1      	uxtb	r1, r2
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	460a      	mov	r2, r1
 80016f8:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
        bytes_--;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8001702:	1e5a      	subs	r2, r3, #1
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1b4      	bne.n	800167e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2208      	movs	r2, #8
 8001718:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 800171c:	e7af      	b.n	800167e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001724:	2b00      	cmp	r3, #0
 8001726:	d128      	bne.n	800177a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	2bff      	cmp	r3, #255	@ 0xff
 800172c:	d10d      	bne.n	800174a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f103 0214 	add.w	r2, r3, #20
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 8001748:	e799      	b.n	800167e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3304      	adds	r3, #4
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fd8b 	bl	800126a <_ZN13STM32Hardware4timeEv>
 8001754:	4602      	mov	r2, r0
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800175e:	4293      	cmp	r3, r2
 8001760:	bf8c      	ite	hi
 8001762:	2301      	movhi	r3, #1
 8001764:	2300      	movls	r3, #0
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b00      	cmp	r3, #0
 800176a:	d088      	beq.n	800167e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
          return SPIN_TIMEOUT;
 8001774:	f06f 0301 	mvn.w	r3, #1
 8001778:	e130      	b.n	80019dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001780:	2b01      	cmp	r3, #1
 8001782:	d118      	bne.n	80017b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2bfe      	cmp	r3, #254	@ 0xfe
 8001788:	d107      	bne.n	800179a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001790:	1c5a      	adds	r2, r3, #1
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8001798:	e771      	b.n	800167e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          if (configured_ == false)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f47f af68 	bne.w	800167e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 f918 	bl	80019e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80017b4:	e763      	b.n	800167e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d113      	bne.n	80017e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        index_ = 0;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
        mode_++;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68ba      	ldr	r2, [r7, #8]
 80017e2:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 80017e6:	e74a      	b.n	800167e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d110      	bne.n	8001814 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	@ 0x8f0
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	021b      	lsls	r3, r3, #8
 80017fc:	441a      	add	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        mode_++;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8001812:	e734      	b.n	800167e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800181a:	2b04      	cmp	r3, #4
 800181c:	d116      	bne.n	800184c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 8001824:	425a      	negs	r2, r3
 8001826:	b2db      	uxtb	r3, r3
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	bf58      	it	pl
 800182c:	4253      	negpl	r3, r2
 800182e:	2bff      	cmp	r3, #255	@ 0xff
 8001830:	d107      	bne.n	8001842 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8001840:	e71d      	b.n	800167e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 800184a:	e718      	b.n	800167e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001852:	2b05      	cmp	r3, #5
 8001854:	d10f      	bne.n	8001876 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68ba      	ldr	r2, [r7, #8]
 800185a:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_++;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001864:	1c5a      	adds	r2, r3, #1
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 8001874:	e703      	b.n	800167e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800187c:	2b06      	cmp	r3, #6
 800187e:	d117      	bne.n	80018b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	@ 0x8f4
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	021b      	lsls	r3, r3, #8
 800188a:	441a      	add	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_ = MODE_MESSAGE;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2207      	movs	r2, #7
 8001896:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if (bytes_ == 0)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f47f aeec 	bne.w	800167e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2208      	movs	r2, #8
 80018aa:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 80018ae:	e6e6      	b.n	800167e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80018b6:	2b08      	cmp	r3, #8
 80018b8:	f47f aee1 	bne.w	800167e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if ((checksum_ % 256) == 255)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 80018ca:	425a      	negs	r2, r3
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	bf58      	it	pl
 80018d2:	4253      	negpl	r3, r2
 80018d4:	2bff      	cmp	r3, #255	@ 0xff
 80018d6:	f47f aed2 	bne.w	800167e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d110      	bne.n	8001906 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 f87d 	bl	80019e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f898 	bl	8001a20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
            last_sync_receive_time = c_time;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
            return SPIN_ERR;
 8001900:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001904:	e06a      	b.n	80019dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 800190c:	2b0a      	cmp	r3, #10
 800190e:	d107      	bne.n	8001920 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8001916:	4619      	mov	r1, r3
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 f961 	bl	8001be0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800191e:	e6ae      	b.n	800167e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8001926:	2b06      	cmp	r3, #6
 8001928:	d10e      	bne.n	8001948 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f603 1214 	addw	r2, r3, #2324	@ 0x914
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8001936:	4619      	mov	r1, r3
 8001938:	4610      	mov	r0, r2
 800193a:	f7ff f9a4 	bl	8000c86 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 8001946:	e69a      	b.n	800167e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 800194e:	2b0b      	cmp	r3, #11
 8001950:	d104      	bne.n	800195c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 800195a:	e690      	b.n	800167e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8001962:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800196c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001970:	2b00      	cmp	r3, #0
 8001972:	f43f ae84 	beq.w	800167e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 800197c:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001986:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8001990:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800199a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	f202 4224 	addw	r2, r2, #1060	@ 0x424
 80019a8:	4611      	mov	r1, r2
 80019aa:	4798      	blx	r3
    while (true)
 80019ac:	e667      	b.n	800167e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80019ae:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00f      	beq.n	80019da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d906      	bls.n	80019da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 f809 	bl	80019e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
    return SPIN_OK;
 80019da:	2300      	movs	r3, #0
  }
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80019ec:	f107 030c 	add.w	r3, r7, #12
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fcb3 	bl	800035c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f107 020c 	add.w	r2, r7, #12
 8001a00:	210a      	movs	r1, #10
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	4798      	blx	r3
    rt_time = hardware_.time();
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fc2d 	bl	800126a <_ZN13STM32Hardware4timeEv>
 8001a10:	4602      	mov	r2, r0
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
  }
 8001a18:	bf00      	nop
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b08b      	sub	sp, #44	@ 0x2c
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8001a28:	f107 030c 	add.w	r3, r7, #12
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fd7f 	bl	8000530 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a36:	e062      	b.n	8001afe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d056      	beq.n	8001af8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a62:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a74:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	6859      	ldr	r1, [r3, #4]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a84:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	3308      	adds	r3, #8
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4608      	mov	r0, r1
 8001a98:	4798      	blx	r3
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa2:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	6859      	ldr	r1, [r3, #4]
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab2:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	330c      	adds	r3, #12
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4608      	mov	r0, r1
 8001ac6:	4798      	blx	r3
 8001ac8:	4603      	mov	r3, r0
 8001aca:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8001acc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ad0:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681c      	ldr	r4, [r3, #0]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001adc:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fa80 	bl	8000fec <_ZN3ros9Publisher15getEndpointTypeEv>
 8001aec:	4601      	mov	r1, r0
 8001aee:	f107 030c 	add.w	r3, r7, #12
 8001af2:	461a      	mov	r2, r3
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afa:	3301      	adds	r3, #1
 8001afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b00:	2b18      	cmp	r3, #24
 8001b02:	dd99      	ble.n	8001a38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001b04:	2300      	movs	r3, #0
 8001b06:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b08:	e05e      	b.n	8001bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b0e:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d053      	beq.n	8001bc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b1e:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b30:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b40:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001b44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b4c:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	3308      	adds	r3, #8
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4608      	mov	r0, r1
 8001b5c:	4798      	blx	r3
 8001b5e:	4603      	mov	r3, r0
 8001b60:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b66:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001b6a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b72:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	330c      	adds	r3, #12
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4608      	mov	r0, r1
 8001b82:	4798      	blx	r3
 8001b84:	4603      	mov	r3, r0
 8001b86:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8001b88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b8c:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681c      	ldr	r4, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b98:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001b9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ba4:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	3304      	adds	r3, #4
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4608      	mov	r0, r1
 8001bb4:	4798      	blx	r3
 8001bb6:	4601      	mov	r1, r0
 8001bb8:	f107 030c 	add.w	r3, r7, #12
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bca:	2b18      	cmp	r3, #24
 8001bcc:	dd9d      	ble.n	8001b0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
  }
 8001bd6:	bf00      	nop
 8001bd8:	372c      	adds	r7, #44	@ 0x2c
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd90      	pop	{r4, r7, pc}
	...

08001be0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8001bea:	f107 0308 	add.w	r3, r7, #8
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fbb4 	bl	800035c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fb36 	bl	800126a <_ZN13STM32Hardware4timeEv>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8001c0a:	f107 0308 	add.w	r3, r7, #8
 8001c0e:	6839      	ldr	r1, [r7, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fc12 	bl	800043a <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	4915      	ldr	r1, [pc, #84]	@ (8001c70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8001c1c:	fba1 1303 	umull	r1, r3, r1, r3
 8001c20:	099b      	lsrs	r3, r3, #6
 8001c22:	4413      	add	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8001c26:	6939      	ldr	r1, [r7, #16]
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	4b11      	ldr	r3, [pc, #68]	@ (8001c70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8001c2c:	fba3 0302 	umull	r0, r3, r3, r2
 8001c30:	099b      	lsrs	r3, r3, #6
 8001c32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c36:	fb00 f303 	mul.w	r3, r0, r3
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8001c3e:	fb02 f303 	mul.w	r3, r2, r3
 8001c42:	440b      	add	r3, r1
 8001c44:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8001c46:	f107 0308 	add.w	r3, r7, #8
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f8a6 	bl	8001da0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3304      	adds	r3, #4
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fb06 	bl	800126a <_ZN13STM32Hardware4timeEv>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
  }
 8001c66:	bf00      	nop
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	10624dd3 	.word	0x10624dd3
 8001c74:	000f4240 	.word	0x000f4240

08001c78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	2b63      	cmp	r3, #99	@ 0x63
 8001c88:	dd09      	ble.n	8001c9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8001c90:	f083 0301 	eor.w	r3, r3, #1
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	e079      	b.n	8001d92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	f202 6224 	addw	r2, r2, #1572	@ 0x624
 8001caa:	3207      	adds	r2, #7
 8001cac:	4611      	mov	r1, r2
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	4798      	blx	r3
 8001cb2:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	22ff      	movs	r2, #255	@ 0xff
 8001cb8:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624
    message_out[1] = PROTOCOL_VER;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	22fe      	movs	r2, #254	@ 0xfe
 8001cc0:	f883 2625 	strb.w	r2, [r3, #1573]	@ 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f883 2626 	strb.w	r2, [r3, #1574]	@ 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	0a1b      	lsrs	r3, r3, #8
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f883 2627 	strb.w	r2, [r3, #1575]	@ 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f893 2626 	ldrb.w	r2, [r3, #1574]	@ 0x626
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f893 3627 	ldrb.w	r3, [r3, #1575]	@ 0x627
 8001cea:	4413      	add	r3, r2
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f883 2628 	strb.w	r2, [r3, #1576]	@ 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f883 2629 	strb.w	r2, [r3, #1577]	@ 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	b21b      	sxth	r3, r3
 8001d06:	121b      	asrs	r3, r3, #8
 8001d08:	b21b      	sxth	r3, r3
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f883 262a 	strb.w	r2, [r3, #1578]	@ 0x62a

    /* calculate checksum */
    int chk = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001d16:	2305      	movs	r3, #5
 8001d18:	61bb      	str	r3, [r7, #24]
 8001d1a:	e00c      	b.n	8001d36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	4413      	add	r3, r2
 8001d22:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	3301      	adds	r3, #1
 8001d34:	61bb      	str	r3, [r7, #24]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	3306      	adds	r3, #6
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	dded      	ble.n	8001d1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	3307      	adds	r3, #7
 8001d44:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	425a      	negs	r2, r3
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	bf58      	it	pl
 8001d50:	4253      	negpl	r3, r2
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	1c59      	adds	r1, r3, #1
 8001d58:	6179      	str	r1, [r7, #20]
 8001d5a:	43d2      	mvns	r2, r2
 8001d5c:	b2d1      	uxtb	r1, r2
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	4413      	add	r3, r2
 8001d62:	460a      	mov	r2, r1
 8001d64:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624

    if (l <= OUTPUT_SIZE)
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d6e:	dc0a      	bgt.n	8001d86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	1d18      	adds	r0, r3, #4
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f7ff fa2d 	bl	80011dc <_ZN13STM32Hardware5writeEPhi>
      return l;
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	e005      	b.n	8001d92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8001d86:	4905      	ldr	r1, [pc, #20]	@ (8001d9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f000 f849 	bl	8001e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8001d8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
  }
 8001d92:	4618      	mov	r0, r3
 8001d94:	3720      	adds	r7, #32
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	08004ae0 	.word	0x08004ae0

08001da0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3304      	adds	r3, #4
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fa5b 	bl	800126a <_ZN13STM32Hardware4timeEv>
 8001db4:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	4915      	ldr	r1, [pc, #84]	@ (8001e14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8001dbe:	fba1 1303 	umull	r1, r3, r1, r3
 8001dc2:	099b      	lsrs	r3, r3, #6
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	1e5a      	subs	r2, r3, #1
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	6859      	ldr	r1, [r3, #4]
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8001dd6:	fba3 0302 	umull	r0, r3, r3, r2
 8001dda:	099b      	lsrs	r3, r3, #6
 8001ddc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001de0:	fb00 f303 	mul.w	r3, r0, r3
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	4a0c      	ldr	r2, [pc, #48]	@ (8001e18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8001de8:	fb02 f303 	mul.w	r3, r2, r3
 8001dec:	1aca      	subs	r2, r1, r3
 8001dee:	4b0b      	ldr	r3, [pc, #44]	@ (8001e1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8001df0:	4413      	add	r3, r2
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	f8c2 341c 	str.w	r3, [r2, #1052]	@ 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f503 6283 	add.w	r2, r3, #1048	@ 0x418
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8001e04:	4619      	mov	r1, r3
 8001e06:	4610      	mov	r0, r2
 8001e08:	f7fe f9a8 	bl	800015c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8001e0c:	bf00      	nop
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	10624dd3 	.word	0x10624dd3
 8001e18:	000f4240 	.word	0x000f4240
 8001e1c:	3b9aca00 	.word	0x3b9aca00

08001e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	2103      	movs	r1, #3
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f804 	bl	8001e3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8001e34:	bf00      	nop
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	460b      	mov	r3, r1
 8001e46:	607a      	str	r2, [r7, #4]
 8001e48:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8001e4a:	f107 0314 	add.w	r3, r7, #20
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fd2e 	bl	80008b0 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8001e54:	7afb      	ldrb	r3, [r7, #11]
 8001e56:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f107 0214 	add.w	r2, r7, #20
 8001e66:	2107      	movs	r1, #7
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	4798      	blx	r3
  }
 8001e6c:	bf00      	nop
 8001e6e:	3720      	adds	r7, #32
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <_Z41__static_initialization_and_destruction_0ii>:
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d110      	bne.n	8001ea6 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d10b      	bne.n	8001ea6 <_Z41__static_initialization_and_destruction_0ii+0x32>
ros::NodeHandle nh;
 8001e8e:	4808      	ldr	r0, [pc, #32]	@ (8001eb0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001e90:	f7ff fa9e 	bl	80013d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8001e94:	4807      	ldr	r0, [pc, #28]	@ (8001eb4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001e96:	f7ff f9f3 	bl	8001280 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	4a05      	ldr	r2, [pc, #20]	@ (8001eb4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001e9e:	4906      	ldr	r1, [pc, #24]	@ (8001eb8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001ea0:	4806      	ldr	r0, [pc, #24]	@ (8001ebc <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001ea2:	f7ff f879 	bl	8000f98 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	2000008c 	.word	0x2000008c
 8001eb4:	200009c8 	.word	0x200009c8
 8001eb8:	08004b1c 	.word	0x08004b1c
 8001ebc:	200009d0 	.word	0x200009d0

08001ec0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
    return configured_;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
  };
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <_GLOBAL__sub_I_nh>:
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	f7ff ffc7 	bl	8001e74 <_Z41__static_initialization_and_destruction_0ii>
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001eee:	4b15      	ldr	r3, [pc, #84]	@ (8001f44 <HAL_MspInit+0x5c>)
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	4a14      	ldr	r2, [pc, #80]	@ (8001f44 <HAL_MspInit+0x5c>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6193      	str	r3, [r2, #24]
 8001efa:	4b12      	ldr	r3, [pc, #72]	@ (8001f44 <HAL_MspInit+0x5c>)
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f06:	4b0f      	ldr	r3, [pc, #60]	@ (8001f44 <HAL_MspInit+0x5c>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f44 <HAL_MspInit+0x5c>)
 8001f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f10:	61d3      	str	r3, [r2, #28]
 8001f12:	4b0c      	ldr	r3, [pc, #48]	@ (8001f44 <HAL_MspInit+0x5c>)
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f48 <HAL_MspInit+0x60>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	4a04      	ldr	r2, [pc, #16]	@ (8001f48 <HAL_MspInit+0x60>)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40010000 	.word	0x40010000

08001f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f50:	bf00      	nop
 8001f52:	e7fd      	b.n	8001f50 <NMI_Handler+0x4>

08001f54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f58:	bf00      	nop
 8001f5a:	e7fd      	b.n	8001f58 <HardFault_Handler+0x4>

08001f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f60:	bf00      	nop
 8001f62:	e7fd      	b.n	8001f60 <MemManage_Handler+0x4>

08001f64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f68:	bf00      	nop
 8001f6a:	e7fd      	b.n	8001f68 <BusFault_Handler+0x4>

08001f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f70:	bf00      	nop
 8001f72:	e7fd      	b.n	8001f70 <UsageFault_Handler+0x4>

08001f74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr

08001f8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr

08001f98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f9c:	f000 fa12 	bl	80023c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001fa8:	4802      	ldr	r0, [pc, #8]	@ (8001fb4 <DMA1_Channel6_IRQHandler+0x10>)
 8001faa:	f000 fcc7 	bl	800293c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000a78 	.word	0x20000a78

08001fb8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001fbc:	4802      	ldr	r0, [pc, #8]	@ (8001fc8 <DMA1_Channel7_IRQHandler+0x10>)
 8001fbe:	f000 fcbd 	bl	800293c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000abc 	.word	0x20000abc

08001fcc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fd0:	4802      	ldr	r0, [pc, #8]	@ (8001fdc <USART2_IRQHandler+0x10>)
 8001fd2:	f001 fc61 	bl	8003898 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	200009e8 	.word	0x200009e8

08001fe0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001fe4:	4802      	ldr	r0, [pc, #8]	@ (8001ff0 <USART3_IRQHandler+0x10>)
 8001fe6:	f001 fc57 	bl	8003898 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000a30 	.word	0x20000a30

08001ff4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ffc:	4a14      	ldr	r2, [pc, #80]	@ (8002050 <_sbrk+0x5c>)
 8001ffe:	4b15      	ldr	r3, [pc, #84]	@ (8002054 <_sbrk+0x60>)
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002008:	4b13      	ldr	r3, [pc, #76]	@ (8002058 <_sbrk+0x64>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d102      	bne.n	8002016 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002010:	4b11      	ldr	r3, [pc, #68]	@ (8002058 <_sbrk+0x64>)
 8002012:	4a12      	ldr	r2, [pc, #72]	@ (800205c <_sbrk+0x68>)
 8002014:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002016:	4b10      	ldr	r3, [pc, #64]	@ (8002058 <_sbrk+0x64>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	429a      	cmp	r2, r3
 8002022:	d207      	bcs.n	8002034 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002024:	f002 fb84 	bl	8004730 <__errno>
 8002028:	4603      	mov	r3, r0
 800202a:	220c      	movs	r2, #12
 800202c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800202e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002032:	e009      	b.n	8002048 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002034:	4b08      	ldr	r3, [pc, #32]	@ (8002058 <_sbrk+0x64>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800203a:	4b07      	ldr	r3, [pc, #28]	@ (8002058 <_sbrk+0x64>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	4a05      	ldr	r2, [pc, #20]	@ (8002058 <_sbrk+0x64>)
 8002044:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002046:	68fb      	ldr	r3, [r7, #12]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20005000 	.word	0x20005000
 8002054:	00000400 	.word	0x00000400
 8002058:	200009e4 	.word	0x200009e4
 800205c:	20000c50 	.word	0x20000c50

08002060 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002070:	4b11      	ldr	r3, [pc, #68]	@ (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002072:	4a12      	ldr	r2, [pc, #72]	@ (80020bc <MX_USART2_UART_Init+0x50>)
 8002074:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8002076:	4b10      	ldr	r3, [pc, #64]	@ (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002078:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 800207c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800207e:	4b0e      	ldr	r3, [pc, #56]	@ (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002080:	2200      	movs	r2, #0
 8002082:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002084:	4b0c      	ldr	r3, [pc, #48]	@ (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002086:	2200      	movs	r2, #0
 8002088:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800208a:	4b0b      	ldr	r3, [pc, #44]	@ (80020b8 <MX_USART2_UART_Init+0x4c>)
 800208c:	2200      	movs	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002090:	4b09      	ldr	r3, [pc, #36]	@ (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002092:	220c      	movs	r2, #12
 8002094:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002096:	4b08      	ldr	r3, [pc, #32]	@ (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002098:	2200      	movs	r2, #0
 800209a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800209c:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <MX_USART2_UART_Init+0x4c>)
 800209e:	2200      	movs	r2, #0
 80020a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020a2:	4805      	ldr	r0, [pc, #20]	@ (80020b8 <MX_USART2_UART_Init+0x4c>)
 80020a4:	f001 fb12 	bl	80036cc <HAL_UART_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020ae:	f7fe f92e 	bl	800030e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	200009e8 	.word	0x200009e8
 80020bc:	40004400 	.word	0x40004400

080020c0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020c4:	4b11      	ldr	r3, [pc, #68]	@ (800210c <MX_USART3_UART_Init+0x4c>)
 80020c6:	4a12      	ldr	r2, [pc, #72]	@ (8002110 <MX_USART3_UART_Init+0x50>)
 80020c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 80020ca:	4b10      	ldr	r3, [pc, #64]	@ (800210c <MX_USART3_UART_Init+0x4c>)
 80020cc:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80020d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020d2:	4b0e      	ldr	r3, [pc, #56]	@ (800210c <MX_USART3_UART_Init+0x4c>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020d8:	4b0c      	ldr	r3, [pc, #48]	@ (800210c <MX_USART3_UART_Init+0x4c>)
 80020da:	2200      	movs	r2, #0
 80020dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020de:	4b0b      	ldr	r3, [pc, #44]	@ (800210c <MX_USART3_UART_Init+0x4c>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020e4:	4b09      	ldr	r3, [pc, #36]	@ (800210c <MX_USART3_UART_Init+0x4c>)
 80020e6:	220c      	movs	r2, #12
 80020e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ea:	4b08      	ldr	r3, [pc, #32]	@ (800210c <MX_USART3_UART_Init+0x4c>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020f0:	4b06      	ldr	r3, [pc, #24]	@ (800210c <MX_USART3_UART_Init+0x4c>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020f6:	4805      	ldr	r0, [pc, #20]	@ (800210c <MX_USART3_UART_Init+0x4c>)
 80020f8:	f001 fae8 	bl	80036cc <HAL_UART_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002102:	f7fe f904 	bl	800030e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000a30 	.word	0x20000a30
 8002110:	40004800 	.word	0x40004800

08002114 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08a      	sub	sp, #40	@ 0x28
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 0318 	add.w	r3, r7, #24
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a66      	ldr	r2, [pc, #408]	@ (80022c8 <HAL_UART_MspInit+0x1b4>)
 8002130:	4293      	cmp	r3, r2
 8002132:	f040 8085 	bne.w	8002240 <HAL_UART_MspInit+0x12c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002136:	4b65      	ldr	r3, [pc, #404]	@ (80022cc <HAL_UART_MspInit+0x1b8>)
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	4a64      	ldr	r2, [pc, #400]	@ (80022cc <HAL_UART_MspInit+0x1b8>)
 800213c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002140:	61d3      	str	r3, [r2, #28]
 8002142:	4b62      	ldr	r3, [pc, #392]	@ (80022cc <HAL_UART_MspInit+0x1b8>)
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214e:	4b5f      	ldr	r3, [pc, #380]	@ (80022cc <HAL_UART_MspInit+0x1b8>)
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	4a5e      	ldr	r2, [pc, #376]	@ (80022cc <HAL_UART_MspInit+0x1b8>)
 8002154:	f043 0304 	orr.w	r3, r3, #4
 8002158:	6193      	str	r3, [r2, #24]
 800215a:	4b5c      	ldr	r3, [pc, #368]	@ (80022cc <HAL_UART_MspInit+0x1b8>)
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002166:	2304      	movs	r3, #4
 8002168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216a:	2302      	movs	r3, #2
 800216c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800216e:	2303      	movs	r3, #3
 8002170:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002172:	f107 0318 	add.w	r3, r7, #24
 8002176:	4619      	mov	r1, r3
 8002178:	4855      	ldr	r0, [pc, #340]	@ (80022d0 <HAL_UART_MspInit+0x1bc>)
 800217a:	f000 fd13 	bl	8002ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800217e:	2308      	movs	r3, #8
 8002180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218a:	f107 0318 	add.w	r3, r7, #24
 800218e:	4619      	mov	r1, r3
 8002190:	484f      	ldr	r0, [pc, #316]	@ (80022d0 <HAL_UART_MspInit+0x1bc>)
 8002192:	f000 fd07 	bl	8002ba4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002196:	4b4f      	ldr	r3, [pc, #316]	@ (80022d4 <HAL_UART_MspInit+0x1c0>)
 8002198:	4a4f      	ldr	r2, [pc, #316]	@ (80022d8 <HAL_UART_MspInit+0x1c4>)
 800219a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800219c:	4b4d      	ldr	r3, [pc, #308]	@ (80022d4 <HAL_UART_MspInit+0x1c0>)
 800219e:	2200      	movs	r2, #0
 80021a0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021a2:	4b4c      	ldr	r3, [pc, #304]	@ (80022d4 <HAL_UART_MspInit+0x1c0>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021a8:	4b4a      	ldr	r3, [pc, #296]	@ (80022d4 <HAL_UART_MspInit+0x1c0>)
 80021aa:	2280      	movs	r2, #128	@ 0x80
 80021ac:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021ae:	4b49      	ldr	r3, [pc, #292]	@ (80022d4 <HAL_UART_MspInit+0x1c0>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021b4:	4b47      	ldr	r3, [pc, #284]	@ (80022d4 <HAL_UART_MspInit+0x1c0>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80021ba:	4b46      	ldr	r3, [pc, #280]	@ (80022d4 <HAL_UART_MspInit+0x1c0>)
 80021bc:	2200      	movs	r2, #0
 80021be:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021c0:	4b44      	ldr	r3, [pc, #272]	@ (80022d4 <HAL_UART_MspInit+0x1c0>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80021c6:	4843      	ldr	r0, [pc, #268]	@ (80022d4 <HAL_UART_MspInit+0x1c0>)
 80021c8:	f000 fa4a 	bl	8002660 <HAL_DMA_Init>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80021d2:	f7fe f89c 	bl	800030e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a3e      	ldr	r2, [pc, #248]	@ (80022d4 <HAL_UART_MspInit+0x1c0>)
 80021da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80021dc:	4a3d      	ldr	r2, [pc, #244]	@ (80022d4 <HAL_UART_MspInit+0x1c0>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80021e2:	4b3e      	ldr	r3, [pc, #248]	@ (80022dc <HAL_UART_MspInit+0x1c8>)
 80021e4:	4a3e      	ldr	r2, [pc, #248]	@ (80022e0 <HAL_UART_MspInit+0x1cc>)
 80021e6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021e8:	4b3c      	ldr	r3, [pc, #240]	@ (80022dc <HAL_UART_MspInit+0x1c8>)
 80021ea:	2210      	movs	r2, #16
 80021ec:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021ee:	4b3b      	ldr	r3, [pc, #236]	@ (80022dc <HAL_UART_MspInit+0x1c8>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021f4:	4b39      	ldr	r3, [pc, #228]	@ (80022dc <HAL_UART_MspInit+0x1c8>)
 80021f6:	2280      	movs	r2, #128	@ 0x80
 80021f8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021fa:	4b38      	ldr	r3, [pc, #224]	@ (80022dc <HAL_UART_MspInit+0x1c8>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002200:	4b36      	ldr	r3, [pc, #216]	@ (80022dc <HAL_UART_MspInit+0x1c8>)
 8002202:	2200      	movs	r2, #0
 8002204:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002206:	4b35      	ldr	r3, [pc, #212]	@ (80022dc <HAL_UART_MspInit+0x1c8>)
 8002208:	2200      	movs	r2, #0
 800220a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800220c:	4b33      	ldr	r3, [pc, #204]	@ (80022dc <HAL_UART_MspInit+0x1c8>)
 800220e:	2200      	movs	r2, #0
 8002210:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002212:	4832      	ldr	r0, [pc, #200]	@ (80022dc <HAL_UART_MspInit+0x1c8>)
 8002214:	f000 fa24 	bl	8002660 <HAL_DMA_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 800221e:	f7fe f876 	bl	800030e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a2d      	ldr	r2, [pc, #180]	@ (80022dc <HAL_UART_MspInit+0x1c8>)
 8002226:	639a      	str	r2, [r3, #56]	@ 0x38
 8002228:	4a2c      	ldr	r2, [pc, #176]	@ (80022dc <HAL_UART_MspInit+0x1c8>)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	2100      	movs	r1, #0
 8002232:	2026      	movs	r0, #38	@ 0x26
 8002234:	f000 f9dd 	bl	80025f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002238:	2026      	movs	r0, #38	@ 0x26
 800223a:	f000 f9f6 	bl	800262a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800223e:	e03e      	b.n	80022be <HAL_UART_MspInit+0x1aa>
  else if(uartHandle->Instance==USART3)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a27      	ldr	r2, [pc, #156]	@ (80022e4 <HAL_UART_MspInit+0x1d0>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d139      	bne.n	80022be <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART3_CLK_ENABLE();
 800224a:	4b20      	ldr	r3, [pc, #128]	@ (80022cc <HAL_UART_MspInit+0x1b8>)
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	4a1f      	ldr	r2, [pc, #124]	@ (80022cc <HAL_UART_MspInit+0x1b8>)
 8002250:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002254:	61d3      	str	r3, [r2, #28]
 8002256:	4b1d      	ldr	r3, [pc, #116]	@ (80022cc <HAL_UART_MspInit+0x1b8>)
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002262:	4b1a      	ldr	r3, [pc, #104]	@ (80022cc <HAL_UART_MspInit+0x1b8>)
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	4a19      	ldr	r2, [pc, #100]	@ (80022cc <HAL_UART_MspInit+0x1b8>)
 8002268:	f043 0308 	orr.w	r3, r3, #8
 800226c:	6193      	str	r3, [r2, #24]
 800226e:	4b17      	ldr	r3, [pc, #92]	@ (80022cc <HAL_UART_MspInit+0x1b8>)
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	f003 0308 	and.w	r3, r3, #8
 8002276:	60bb      	str	r3, [r7, #8]
 8002278:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800227a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800227e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002280:	2302      	movs	r3, #2
 8002282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002284:	2303      	movs	r3, #3
 8002286:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002288:	f107 0318 	add.w	r3, r7, #24
 800228c:	4619      	mov	r1, r3
 800228e:	4816      	ldr	r0, [pc, #88]	@ (80022e8 <HAL_UART_MspInit+0x1d4>)
 8002290:	f000 fc88 	bl	8002ba4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002294:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a2:	f107 0318 	add.w	r3, r7, #24
 80022a6:	4619      	mov	r1, r3
 80022a8:	480f      	ldr	r0, [pc, #60]	@ (80022e8 <HAL_UART_MspInit+0x1d4>)
 80022aa:	f000 fc7b 	bl	8002ba4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80022ae:	2200      	movs	r2, #0
 80022b0:	2100      	movs	r1, #0
 80022b2:	2027      	movs	r0, #39	@ 0x27
 80022b4:	f000 f99d 	bl	80025f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80022b8:	2027      	movs	r0, #39	@ 0x27
 80022ba:	f000 f9b6 	bl	800262a <HAL_NVIC_EnableIRQ>
}
 80022be:	bf00      	nop
 80022c0:	3728      	adds	r7, #40	@ 0x28
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40004400 	.word	0x40004400
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40010800 	.word	0x40010800
 80022d4:	20000a78 	.word	0x20000a78
 80022d8:	4002006c 	.word	0x4002006c
 80022dc:	20000abc 	.word	0x20000abc
 80022e0:	40020080 	.word	0x40020080
 80022e4:	40004800 	.word	0x40004800
 80022e8:	40010c00 	.word	0x40010c00

080022ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022ec:	f7ff feb8 	bl	8002060 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022f0:	480b      	ldr	r0, [pc, #44]	@ (8002320 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80022f2:	490c      	ldr	r1, [pc, #48]	@ (8002324 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80022f4:	4a0c      	ldr	r2, [pc, #48]	@ (8002328 <LoopFillZerobss+0x16>)
  movs r3, #0
 80022f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f8:	e002      	b.n	8002300 <LoopCopyDataInit>

080022fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022fe:	3304      	adds	r3, #4

08002300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002304:	d3f9      	bcc.n	80022fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002306:	4a09      	ldr	r2, [pc, #36]	@ (800232c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002308:	4c09      	ldr	r4, [pc, #36]	@ (8002330 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800230a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800230c:	e001      	b.n	8002312 <LoopFillZerobss>

0800230e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800230e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002310:	3204      	adds	r2, #4

08002312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002314:	d3fb      	bcc.n	800230e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002316:	f002 fa11 	bl	800473c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800231a:	f7fd ff9f 	bl	800025c <main>
  bx lr
 800231e:	4770      	bx	lr
  ldr r0, =_sdata
 8002320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002324:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002328:	08004c38 	.word	0x08004c38
  ldr r2, =_sbss
 800232c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002330:	20000c4c 	.word	0x20000c4c

08002334 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002334:	e7fe      	b.n	8002334 <ADC1_2_IRQHandler>
	...

08002338 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800233c:	4b08      	ldr	r3, [pc, #32]	@ (8002360 <HAL_Init+0x28>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a07      	ldr	r2, [pc, #28]	@ (8002360 <HAL_Init+0x28>)
 8002342:	f043 0310 	orr.w	r3, r3, #16
 8002346:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002348:	2003      	movs	r0, #3
 800234a:	f000 f947 	bl	80025dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800234e:	200f      	movs	r0, #15
 8002350:	f000 f808 	bl	8002364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002354:	f7ff fdc8 	bl	8001ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40022000 	.word	0x40022000

08002364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800236c:	4b12      	ldr	r3, [pc, #72]	@ (80023b8 <HAL_InitTick+0x54>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	4b12      	ldr	r3, [pc, #72]	@ (80023bc <HAL_InitTick+0x58>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	4619      	mov	r1, r3
 8002376:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800237a:	fbb3 f3f1 	udiv	r3, r3, r1
 800237e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002382:	4618      	mov	r0, r3
 8002384:	f000 f95f 	bl	8002646 <HAL_SYSTICK_Config>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e00e      	b.n	80023b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b0f      	cmp	r3, #15
 8002396:	d80a      	bhi.n	80023ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002398:	2200      	movs	r2, #0
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80023a0:	f000 f927 	bl	80025f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023a4:	4a06      	ldr	r2, [pc, #24]	@ (80023c0 <HAL_InitTick+0x5c>)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
 80023ac:	e000      	b.n	80023b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20000010 	.word	0x20000010
 80023bc:	20000018 	.word	0x20000018
 80023c0:	20000014 	.word	0x20000014

080023c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023c8:	4b05      	ldr	r3, [pc, #20]	@ (80023e0 <HAL_IncTick+0x1c>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	461a      	mov	r2, r3
 80023ce:	4b05      	ldr	r3, [pc, #20]	@ (80023e4 <HAL_IncTick+0x20>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4413      	add	r3, r2
 80023d4:	4a03      	ldr	r2, [pc, #12]	@ (80023e4 <HAL_IncTick+0x20>)
 80023d6:	6013      	str	r3, [r2, #0]
}
 80023d8:	bf00      	nop
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr
 80023e0:	20000018 	.word	0x20000018
 80023e4:	20000b00 	.word	0x20000b00

080023e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return uwTick;
 80023ec:	4b02      	ldr	r3, [pc, #8]	@ (80023f8 <HAL_GetTick+0x10>)
 80023ee:	681b      	ldr	r3, [r3, #0]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr
 80023f8:	20000b00 	.word	0x20000b00

080023fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002404:	f7ff fff0 	bl	80023e8 <HAL_GetTick>
 8002408:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002414:	d005      	beq.n	8002422 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002416:	4b0a      	ldr	r3, [pc, #40]	@ (8002440 <HAL_Delay+0x44>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4413      	add	r3, r2
 8002420:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002422:	bf00      	nop
 8002424:	f7ff ffe0 	bl	80023e8 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	429a      	cmp	r2, r3
 8002432:	d8f7      	bhi.n	8002424 <HAL_Delay+0x28>
  {
  }
}
 8002434:	bf00      	nop
 8002436:	bf00      	nop
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000018 	.word	0x20000018

08002444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002454:	4b0c      	ldr	r3, [pc, #48]	@ (8002488 <__NVIC_SetPriorityGrouping+0x44>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002460:	4013      	ands	r3, r2
 8002462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800246c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002470:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002476:	4a04      	ldr	r2, [pc, #16]	@ (8002488 <__NVIC_SetPriorityGrouping+0x44>)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	60d3      	str	r3, [r2, #12]
}
 800247c:	bf00      	nop
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002490:	4b04      	ldr	r3, [pc, #16]	@ (80024a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	0a1b      	lsrs	r3, r3, #8
 8002496:	f003 0307 	and.w	r3, r3, #7
}
 800249a:	4618      	mov	r0, r3
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	db0b      	blt.n	80024d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	f003 021f 	and.w	r2, r3, #31
 80024c0:	4906      	ldr	r1, [pc, #24]	@ (80024dc <__NVIC_EnableIRQ+0x34>)
 80024c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c6:	095b      	lsrs	r3, r3, #5
 80024c8:	2001      	movs	r0, #1
 80024ca:	fa00 f202 	lsl.w	r2, r0, r2
 80024ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr
 80024dc:	e000e100 	.word	0xe000e100

080024e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	6039      	str	r1, [r7, #0]
 80024ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	db0a      	blt.n	800250a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	490c      	ldr	r1, [pc, #48]	@ (800252c <__NVIC_SetPriority+0x4c>)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	0112      	lsls	r2, r2, #4
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	440b      	add	r3, r1
 8002504:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002508:	e00a      	b.n	8002520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	b2da      	uxtb	r2, r3
 800250e:	4908      	ldr	r1, [pc, #32]	@ (8002530 <__NVIC_SetPriority+0x50>)
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	3b04      	subs	r3, #4
 8002518:	0112      	lsls	r2, r2, #4
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	440b      	add	r3, r1
 800251e:	761a      	strb	r2, [r3, #24]
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	e000e100 	.word	0xe000e100
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002534:	b480      	push	{r7}
 8002536:	b089      	sub	sp, #36	@ 0x24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f1c3 0307 	rsb	r3, r3, #7
 800254e:	2b04      	cmp	r3, #4
 8002550:	bf28      	it	cs
 8002552:	2304      	movcs	r3, #4
 8002554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3304      	adds	r3, #4
 800255a:	2b06      	cmp	r3, #6
 800255c:	d902      	bls.n	8002564 <NVIC_EncodePriority+0x30>
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	3b03      	subs	r3, #3
 8002562:	e000      	b.n	8002566 <NVIC_EncodePriority+0x32>
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002568:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43da      	mvns	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	401a      	ands	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800257c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	fa01 f303 	lsl.w	r3, r1, r3
 8002586:	43d9      	mvns	r1, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800258c:	4313      	orrs	r3, r2
         );
}
 800258e:	4618      	mov	r0, r3
 8002590:	3724      	adds	r7, #36	@ 0x24
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025a8:	d301      	bcc.n	80025ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025aa:	2301      	movs	r3, #1
 80025ac:	e00f      	b.n	80025ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ae:	4a0a      	ldr	r2, [pc, #40]	@ (80025d8 <SysTick_Config+0x40>)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025b6:	210f      	movs	r1, #15
 80025b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80025bc:	f7ff ff90 	bl	80024e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025c0:	4b05      	ldr	r3, [pc, #20]	@ (80025d8 <SysTick_Config+0x40>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025c6:	4b04      	ldr	r3, [pc, #16]	@ (80025d8 <SysTick_Config+0x40>)
 80025c8:	2207      	movs	r2, #7
 80025ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	e000e010 	.word	0xe000e010

080025dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7ff ff2d 	bl	8002444 <__NVIC_SetPriorityGrouping>
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b086      	sub	sp, #24
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	4603      	mov	r3, r0
 80025fa:	60b9      	str	r1, [r7, #8]
 80025fc:	607a      	str	r2, [r7, #4]
 80025fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002604:	f7ff ff42 	bl	800248c <__NVIC_GetPriorityGrouping>
 8002608:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	6978      	ldr	r0, [r7, #20]
 8002610:	f7ff ff90 	bl	8002534 <NVIC_EncodePriority>
 8002614:	4602      	mov	r2, r0
 8002616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800261a:	4611      	mov	r1, r2
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff ff5f 	bl	80024e0 <__NVIC_SetPriority>
}
 8002622:	bf00      	nop
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	4603      	mov	r3, r0
 8002632:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ff35 	bl	80024a8 <__NVIC_EnableIRQ>
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff ffa2 	bl	8002598 <SysTick_Config>
 8002654:	4603      	mov	r3, r0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002668:	2300      	movs	r3, #0
 800266a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e043      	b.n	80026fe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	461a      	mov	r2, r3
 800267c:	4b22      	ldr	r3, [pc, #136]	@ (8002708 <HAL_DMA_Init+0xa8>)
 800267e:	4413      	add	r3, r2
 8002680:	4a22      	ldr	r2, [pc, #136]	@ (800270c <HAL_DMA_Init+0xac>)
 8002682:	fba2 2303 	umull	r2, r3, r2, r3
 8002686:	091b      	lsrs	r3, r3, #4
 8002688:	009a      	lsls	r2, r3, #2
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a1f      	ldr	r2, [pc, #124]	@ (8002710 <HAL_DMA_Init+0xb0>)
 8002692:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80026aa:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80026ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80026b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	4313      	orrs	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr
 8002708:	bffdfff8 	.word	0xbffdfff8
 800270c:	cccccccd 	.word	0xcccccccd
 8002710:	40020000 	.word	0x40020000

08002714 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
 8002720:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f893 3020 	ldrb.w	r3, [r3, #32]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_DMA_Start_IT+0x20>
 8002730:	2302      	movs	r3, #2
 8002732:	e04b      	b.n	80027cc <HAL_DMA_Start_IT+0xb8>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b01      	cmp	r3, #1
 8002746:	d13a      	bne.n	80027be <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2202      	movs	r2, #2
 800274c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0201 	bic.w	r2, r2, #1
 8002764:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	68b9      	ldr	r1, [r7, #8]
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 f9eb 	bl	8002b48 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002776:	2b00      	cmp	r3, #0
 8002778:	d008      	beq.n	800278c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f042 020e 	orr.w	r2, r2, #14
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	e00f      	b.n	80027ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0204 	bic.w	r2, r2, #4
 800279a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 020a 	orr.w	r2, r2, #10
 80027aa:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0201 	orr.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	e005      	b.n	80027ca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80027c6:	2302      	movs	r3, #2
 80027c8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80027ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d008      	beq.n	80027fe <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2204      	movs	r2, #4
 80027f0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e020      	b.n	8002840 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 020e 	bic.w	r2, r2, #14
 800280c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0201 	bic.w	r2, r2, #1
 800281c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002826:	2101      	movs	r1, #1
 8002828:	fa01 f202 	lsl.w	r2, r1, r2
 800282c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800283e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr
	...

0800284c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002854:	2300      	movs	r3, #0
 8002856:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d005      	beq.n	8002870 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2204      	movs	r2, #4
 8002868:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	73fb      	strb	r3, [r7, #15]
 800286e:	e051      	b.n	8002914 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 020e 	bic.w	r2, r2, #14
 800287e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0201 	bic.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a22      	ldr	r2, [pc, #136]	@ (8002920 <HAL_DMA_Abort_IT+0xd4>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d029      	beq.n	80028ee <HAL_DMA_Abort_IT+0xa2>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a21      	ldr	r2, [pc, #132]	@ (8002924 <HAL_DMA_Abort_IT+0xd8>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d022      	beq.n	80028ea <HAL_DMA_Abort_IT+0x9e>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a1f      	ldr	r2, [pc, #124]	@ (8002928 <HAL_DMA_Abort_IT+0xdc>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d01a      	beq.n	80028e4 <HAL_DMA_Abort_IT+0x98>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a1e      	ldr	r2, [pc, #120]	@ (800292c <HAL_DMA_Abort_IT+0xe0>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d012      	beq.n	80028de <HAL_DMA_Abort_IT+0x92>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1c      	ldr	r2, [pc, #112]	@ (8002930 <HAL_DMA_Abort_IT+0xe4>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d00a      	beq.n	80028d8 <HAL_DMA_Abort_IT+0x8c>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a1b      	ldr	r2, [pc, #108]	@ (8002934 <HAL_DMA_Abort_IT+0xe8>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d102      	bne.n	80028d2 <HAL_DMA_Abort_IT+0x86>
 80028cc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80028d0:	e00e      	b.n	80028f0 <HAL_DMA_Abort_IT+0xa4>
 80028d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028d6:	e00b      	b.n	80028f0 <HAL_DMA_Abort_IT+0xa4>
 80028d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028dc:	e008      	b.n	80028f0 <HAL_DMA_Abort_IT+0xa4>
 80028de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028e2:	e005      	b.n	80028f0 <HAL_DMA_Abort_IT+0xa4>
 80028e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028e8:	e002      	b.n	80028f0 <HAL_DMA_Abort_IT+0xa4>
 80028ea:	2310      	movs	r3, #16
 80028ec:	e000      	b.n	80028f0 <HAL_DMA_Abort_IT+0xa4>
 80028ee:	2301      	movs	r3, #1
 80028f0:	4a11      	ldr	r2, [pc, #68]	@ (8002938 <HAL_DMA_Abort_IT+0xec>)
 80028f2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	4798      	blx	r3
    } 
  }
  return status;
 8002914:	7bfb      	ldrb	r3, [r7, #15]
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40020008 	.word	0x40020008
 8002924:	4002001c 	.word	0x4002001c
 8002928:	40020030 	.word	0x40020030
 800292c:	40020044 	.word	0x40020044
 8002930:	40020058 	.word	0x40020058
 8002934:	4002006c 	.word	0x4002006c
 8002938:	40020000 	.word	0x40020000

0800293c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002958:	2204      	movs	r2, #4
 800295a:	409a      	lsls	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4013      	ands	r3, r2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d04f      	beq.n	8002a04 <HAL_DMA_IRQHandler+0xc8>
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	f003 0304 	and.w	r3, r3, #4
 800296a:	2b00      	cmp	r3, #0
 800296c:	d04a      	beq.n	8002a04 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0320 	and.w	r3, r3, #32
 8002978:	2b00      	cmp	r3, #0
 800297a:	d107      	bne.n	800298c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0204 	bic.w	r2, r2, #4
 800298a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a66      	ldr	r2, [pc, #408]	@ (8002b2c <HAL_DMA_IRQHandler+0x1f0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d029      	beq.n	80029ea <HAL_DMA_IRQHandler+0xae>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a65      	ldr	r2, [pc, #404]	@ (8002b30 <HAL_DMA_IRQHandler+0x1f4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d022      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xaa>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a63      	ldr	r2, [pc, #396]	@ (8002b34 <HAL_DMA_IRQHandler+0x1f8>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d01a      	beq.n	80029e0 <HAL_DMA_IRQHandler+0xa4>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a62      	ldr	r2, [pc, #392]	@ (8002b38 <HAL_DMA_IRQHandler+0x1fc>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d012      	beq.n	80029da <HAL_DMA_IRQHandler+0x9e>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a60      	ldr	r2, [pc, #384]	@ (8002b3c <HAL_DMA_IRQHandler+0x200>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d00a      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x98>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a5f      	ldr	r2, [pc, #380]	@ (8002b40 <HAL_DMA_IRQHandler+0x204>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d102      	bne.n	80029ce <HAL_DMA_IRQHandler+0x92>
 80029c8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80029cc:	e00e      	b.n	80029ec <HAL_DMA_IRQHandler+0xb0>
 80029ce:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80029d2:	e00b      	b.n	80029ec <HAL_DMA_IRQHandler+0xb0>
 80029d4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80029d8:	e008      	b.n	80029ec <HAL_DMA_IRQHandler+0xb0>
 80029da:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80029de:	e005      	b.n	80029ec <HAL_DMA_IRQHandler+0xb0>
 80029e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029e4:	e002      	b.n	80029ec <HAL_DMA_IRQHandler+0xb0>
 80029e6:	2340      	movs	r3, #64	@ 0x40
 80029e8:	e000      	b.n	80029ec <HAL_DMA_IRQHandler+0xb0>
 80029ea:	2304      	movs	r3, #4
 80029ec:	4a55      	ldr	r2, [pc, #340]	@ (8002b44 <HAL_DMA_IRQHandler+0x208>)
 80029ee:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 8094 	beq.w	8002b22 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002a02:	e08e      	b.n	8002b22 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a08:	2202      	movs	r2, #2
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d056      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x186>
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d051      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0320 	and.w	r3, r3, #32
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10b      	bne.n	8002a44 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 020a 	bic.w	r2, r2, #10
 8002a3a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a38      	ldr	r2, [pc, #224]	@ (8002b2c <HAL_DMA_IRQHandler+0x1f0>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d029      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x166>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a37      	ldr	r2, [pc, #220]	@ (8002b30 <HAL_DMA_IRQHandler+0x1f4>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d022      	beq.n	8002a9e <HAL_DMA_IRQHandler+0x162>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a35      	ldr	r2, [pc, #212]	@ (8002b34 <HAL_DMA_IRQHandler+0x1f8>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d01a      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x15c>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a34      	ldr	r2, [pc, #208]	@ (8002b38 <HAL_DMA_IRQHandler+0x1fc>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d012      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x156>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a32      	ldr	r2, [pc, #200]	@ (8002b3c <HAL_DMA_IRQHandler+0x200>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00a      	beq.n	8002a8c <HAL_DMA_IRQHandler+0x150>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a31      	ldr	r2, [pc, #196]	@ (8002b40 <HAL_DMA_IRQHandler+0x204>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d102      	bne.n	8002a86 <HAL_DMA_IRQHandler+0x14a>
 8002a80:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002a84:	e00e      	b.n	8002aa4 <HAL_DMA_IRQHandler+0x168>
 8002a86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a8a:	e00b      	b.n	8002aa4 <HAL_DMA_IRQHandler+0x168>
 8002a8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a90:	e008      	b.n	8002aa4 <HAL_DMA_IRQHandler+0x168>
 8002a92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a96:	e005      	b.n	8002aa4 <HAL_DMA_IRQHandler+0x168>
 8002a98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a9c:	e002      	b.n	8002aa4 <HAL_DMA_IRQHandler+0x168>
 8002a9e:	2320      	movs	r3, #32
 8002aa0:	e000      	b.n	8002aa4 <HAL_DMA_IRQHandler+0x168>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	4a27      	ldr	r2, [pc, #156]	@ (8002b44 <HAL_DMA_IRQHandler+0x208>)
 8002aa6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d034      	beq.n	8002b22 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ac0:	e02f      	b.n	8002b22 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	2208      	movs	r2, #8
 8002ac8:	409a      	lsls	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d028      	beq.n	8002b24 <HAL_DMA_IRQHandler+0x1e8>
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d023      	beq.n	8002b24 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 020e 	bic.w	r2, r2, #14
 8002aea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af4:	2101      	movs	r1, #1
 8002af6:	fa01 f202 	lsl.w	r2, r1, r2
 8002afa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d004      	beq.n	8002b24 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	4798      	blx	r3
    }
  }
  return;
 8002b22:	bf00      	nop
 8002b24:	bf00      	nop
}
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40020008 	.word	0x40020008
 8002b30:	4002001c 	.word	0x4002001c
 8002b34:	40020030 	.word	0x40020030
 8002b38:	40020044 	.word	0x40020044
 8002b3c:	40020058 	.word	0x40020058
 8002b40:	4002006c 	.word	0x4002006c
 8002b44:	40020000 	.word	0x40020000

08002b48 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
 8002b54:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b5e:	2101      	movs	r1, #1
 8002b60:	fa01 f202 	lsl.w	r2, r1, r2
 8002b64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b10      	cmp	r3, #16
 8002b74:	d108      	bne.n	8002b88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b86:	e007      	b.n	8002b98 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	60da      	str	r2, [r3, #12]
}
 8002b98:	bf00      	nop
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr
	...

08002ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b08b      	sub	sp, #44	@ 0x2c
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bb6:	e169      	b.n	8002e8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002bb8:	2201      	movs	r2, #1
 8002bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	69fa      	ldr	r2, [r7, #28]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	f040 8158 	bne.w	8002e86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	4a9a      	ldr	r2, [pc, #616]	@ (8002e44 <HAL_GPIO_Init+0x2a0>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d05e      	beq.n	8002c9e <HAL_GPIO_Init+0xfa>
 8002be0:	4a98      	ldr	r2, [pc, #608]	@ (8002e44 <HAL_GPIO_Init+0x2a0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d875      	bhi.n	8002cd2 <HAL_GPIO_Init+0x12e>
 8002be6:	4a98      	ldr	r2, [pc, #608]	@ (8002e48 <HAL_GPIO_Init+0x2a4>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d058      	beq.n	8002c9e <HAL_GPIO_Init+0xfa>
 8002bec:	4a96      	ldr	r2, [pc, #600]	@ (8002e48 <HAL_GPIO_Init+0x2a4>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d86f      	bhi.n	8002cd2 <HAL_GPIO_Init+0x12e>
 8002bf2:	4a96      	ldr	r2, [pc, #600]	@ (8002e4c <HAL_GPIO_Init+0x2a8>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d052      	beq.n	8002c9e <HAL_GPIO_Init+0xfa>
 8002bf8:	4a94      	ldr	r2, [pc, #592]	@ (8002e4c <HAL_GPIO_Init+0x2a8>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d869      	bhi.n	8002cd2 <HAL_GPIO_Init+0x12e>
 8002bfe:	4a94      	ldr	r2, [pc, #592]	@ (8002e50 <HAL_GPIO_Init+0x2ac>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d04c      	beq.n	8002c9e <HAL_GPIO_Init+0xfa>
 8002c04:	4a92      	ldr	r2, [pc, #584]	@ (8002e50 <HAL_GPIO_Init+0x2ac>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d863      	bhi.n	8002cd2 <HAL_GPIO_Init+0x12e>
 8002c0a:	4a92      	ldr	r2, [pc, #584]	@ (8002e54 <HAL_GPIO_Init+0x2b0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d046      	beq.n	8002c9e <HAL_GPIO_Init+0xfa>
 8002c10:	4a90      	ldr	r2, [pc, #576]	@ (8002e54 <HAL_GPIO_Init+0x2b0>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d85d      	bhi.n	8002cd2 <HAL_GPIO_Init+0x12e>
 8002c16:	2b12      	cmp	r3, #18
 8002c18:	d82a      	bhi.n	8002c70 <HAL_GPIO_Init+0xcc>
 8002c1a:	2b12      	cmp	r3, #18
 8002c1c:	d859      	bhi.n	8002cd2 <HAL_GPIO_Init+0x12e>
 8002c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c24 <HAL_GPIO_Init+0x80>)
 8002c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c24:	08002c9f 	.word	0x08002c9f
 8002c28:	08002c79 	.word	0x08002c79
 8002c2c:	08002c8b 	.word	0x08002c8b
 8002c30:	08002ccd 	.word	0x08002ccd
 8002c34:	08002cd3 	.word	0x08002cd3
 8002c38:	08002cd3 	.word	0x08002cd3
 8002c3c:	08002cd3 	.word	0x08002cd3
 8002c40:	08002cd3 	.word	0x08002cd3
 8002c44:	08002cd3 	.word	0x08002cd3
 8002c48:	08002cd3 	.word	0x08002cd3
 8002c4c:	08002cd3 	.word	0x08002cd3
 8002c50:	08002cd3 	.word	0x08002cd3
 8002c54:	08002cd3 	.word	0x08002cd3
 8002c58:	08002cd3 	.word	0x08002cd3
 8002c5c:	08002cd3 	.word	0x08002cd3
 8002c60:	08002cd3 	.word	0x08002cd3
 8002c64:	08002cd3 	.word	0x08002cd3
 8002c68:	08002c81 	.word	0x08002c81
 8002c6c:	08002c95 	.word	0x08002c95
 8002c70:	4a79      	ldr	r2, [pc, #484]	@ (8002e58 <HAL_GPIO_Init+0x2b4>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d013      	beq.n	8002c9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c76:	e02c      	b.n	8002cd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	623b      	str	r3, [r7, #32]
          break;
 8002c7e:	e029      	b.n	8002cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	3304      	adds	r3, #4
 8002c86:	623b      	str	r3, [r7, #32]
          break;
 8002c88:	e024      	b.n	8002cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	3308      	adds	r3, #8
 8002c90:	623b      	str	r3, [r7, #32]
          break;
 8002c92:	e01f      	b.n	8002cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	330c      	adds	r3, #12
 8002c9a:	623b      	str	r3, [r7, #32]
          break;
 8002c9c:	e01a      	b.n	8002cd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d102      	bne.n	8002cac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ca6:	2304      	movs	r3, #4
 8002ca8:	623b      	str	r3, [r7, #32]
          break;
 8002caa:	e013      	b.n	8002cd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d105      	bne.n	8002cc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cb4:	2308      	movs	r3, #8
 8002cb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69fa      	ldr	r2, [r7, #28]
 8002cbc:	611a      	str	r2, [r3, #16]
          break;
 8002cbe:	e009      	b.n	8002cd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cc0:	2308      	movs	r3, #8
 8002cc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	69fa      	ldr	r2, [r7, #28]
 8002cc8:	615a      	str	r2, [r3, #20]
          break;
 8002cca:	e003      	b.n	8002cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	623b      	str	r3, [r7, #32]
          break;
 8002cd0:	e000      	b.n	8002cd4 <HAL_GPIO_Init+0x130>
          break;
 8002cd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	2bff      	cmp	r3, #255	@ 0xff
 8002cd8:	d801      	bhi.n	8002cde <HAL_GPIO_Init+0x13a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	e001      	b.n	8002ce2 <HAL_GPIO_Init+0x13e>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	2bff      	cmp	r3, #255	@ 0xff
 8002ce8:	d802      	bhi.n	8002cf0 <HAL_GPIO_Init+0x14c>
 8002cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	e002      	b.n	8002cf6 <HAL_GPIO_Init+0x152>
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf2:	3b08      	subs	r3, #8
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	210f      	movs	r1, #15
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	fa01 f303 	lsl.w	r3, r1, r3
 8002d04:	43db      	mvns	r3, r3
 8002d06:	401a      	ands	r2, r3
 8002d08:	6a39      	ldr	r1, [r7, #32]
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d10:	431a      	orrs	r2, r3
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 80b1 	beq.w	8002e86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d24:	4b4d      	ldr	r3, [pc, #308]	@ (8002e5c <HAL_GPIO_Init+0x2b8>)
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	4a4c      	ldr	r2, [pc, #304]	@ (8002e5c <HAL_GPIO_Init+0x2b8>)
 8002d2a:	f043 0301 	orr.w	r3, r3, #1
 8002d2e:	6193      	str	r3, [r2, #24]
 8002d30:	4b4a      	ldr	r3, [pc, #296]	@ (8002e5c <HAL_GPIO_Init+0x2b8>)
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d3c:	4a48      	ldr	r2, [pc, #288]	@ (8002e60 <HAL_GPIO_Init+0x2bc>)
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d40:	089b      	lsrs	r3, r3, #2
 8002d42:	3302      	adds	r3, #2
 8002d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4c:	f003 0303 	and.w	r3, r3, #3
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	220f      	movs	r2, #15
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a40      	ldr	r2, [pc, #256]	@ (8002e64 <HAL_GPIO_Init+0x2c0>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d013      	beq.n	8002d90 <HAL_GPIO_Init+0x1ec>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a3f      	ldr	r2, [pc, #252]	@ (8002e68 <HAL_GPIO_Init+0x2c4>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d00d      	beq.n	8002d8c <HAL_GPIO_Init+0x1e8>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a3e      	ldr	r2, [pc, #248]	@ (8002e6c <HAL_GPIO_Init+0x2c8>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d007      	beq.n	8002d88 <HAL_GPIO_Init+0x1e4>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a3d      	ldr	r2, [pc, #244]	@ (8002e70 <HAL_GPIO_Init+0x2cc>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d101      	bne.n	8002d84 <HAL_GPIO_Init+0x1e0>
 8002d80:	2303      	movs	r3, #3
 8002d82:	e006      	b.n	8002d92 <HAL_GPIO_Init+0x1ee>
 8002d84:	2304      	movs	r3, #4
 8002d86:	e004      	b.n	8002d92 <HAL_GPIO_Init+0x1ee>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	e002      	b.n	8002d92 <HAL_GPIO_Init+0x1ee>
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <HAL_GPIO_Init+0x1ee>
 8002d90:	2300      	movs	r3, #0
 8002d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d94:	f002 0203 	and.w	r2, r2, #3
 8002d98:	0092      	lsls	r2, r2, #2
 8002d9a:	4093      	lsls	r3, r2
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002da2:	492f      	ldr	r1, [pc, #188]	@ (8002e60 <HAL_GPIO_Init+0x2bc>)
 8002da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da6:	089b      	lsrs	r3, r3, #2
 8002da8:	3302      	adds	r3, #2
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d006      	beq.n	8002dca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002dbc:	4b2d      	ldr	r3, [pc, #180]	@ (8002e74 <HAL_GPIO_Init+0x2d0>)
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	492c      	ldr	r1, [pc, #176]	@ (8002e74 <HAL_GPIO_Init+0x2d0>)
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	608b      	str	r3, [r1, #8]
 8002dc8:	e006      	b.n	8002dd8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002dca:	4b2a      	ldr	r3, [pc, #168]	@ (8002e74 <HAL_GPIO_Init+0x2d0>)
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	4928      	ldr	r1, [pc, #160]	@ (8002e74 <HAL_GPIO_Init+0x2d0>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d006      	beq.n	8002df2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002de4:	4b23      	ldr	r3, [pc, #140]	@ (8002e74 <HAL_GPIO_Init+0x2d0>)
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	4922      	ldr	r1, [pc, #136]	@ (8002e74 <HAL_GPIO_Init+0x2d0>)
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	60cb      	str	r3, [r1, #12]
 8002df0:	e006      	b.n	8002e00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002df2:	4b20      	ldr	r3, [pc, #128]	@ (8002e74 <HAL_GPIO_Init+0x2d0>)
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	491e      	ldr	r1, [pc, #120]	@ (8002e74 <HAL_GPIO_Init+0x2d0>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d006      	beq.n	8002e1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e0c:	4b19      	ldr	r3, [pc, #100]	@ (8002e74 <HAL_GPIO_Init+0x2d0>)
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	4918      	ldr	r1, [pc, #96]	@ (8002e74 <HAL_GPIO_Init+0x2d0>)
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	604b      	str	r3, [r1, #4]
 8002e18:	e006      	b.n	8002e28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e1a:	4b16      	ldr	r3, [pc, #88]	@ (8002e74 <HAL_GPIO_Init+0x2d0>)
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	43db      	mvns	r3, r3
 8002e22:	4914      	ldr	r1, [pc, #80]	@ (8002e74 <HAL_GPIO_Init+0x2d0>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d021      	beq.n	8002e78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e34:	4b0f      	ldr	r3, [pc, #60]	@ (8002e74 <HAL_GPIO_Init+0x2d0>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	490e      	ldr	r1, [pc, #56]	@ (8002e74 <HAL_GPIO_Init+0x2d0>)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	600b      	str	r3, [r1, #0]
 8002e40:	e021      	b.n	8002e86 <HAL_GPIO_Init+0x2e2>
 8002e42:	bf00      	nop
 8002e44:	10320000 	.word	0x10320000
 8002e48:	10310000 	.word	0x10310000
 8002e4c:	10220000 	.word	0x10220000
 8002e50:	10210000 	.word	0x10210000
 8002e54:	10120000 	.word	0x10120000
 8002e58:	10110000 	.word	0x10110000
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40010000 	.word	0x40010000
 8002e64:	40010800 	.word	0x40010800
 8002e68:	40010c00 	.word	0x40010c00
 8002e6c:	40011000 	.word	0x40011000
 8002e70:	40011400 	.word	0x40011400
 8002e74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea8 <HAL_GPIO_Init+0x304>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	4909      	ldr	r1, [pc, #36]	@ (8002ea8 <HAL_GPIO_Init+0x304>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e88:	3301      	adds	r3, #1
 8002e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e92:	fa22 f303 	lsr.w	r3, r2, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f47f ae8e 	bne.w	8002bb8 <HAL_GPIO_Init+0x14>
  }
}
 8002e9c:	bf00      	nop
 8002e9e:	bf00      	nop
 8002ea0:	372c      	adds	r7, #44	@ 0x2c
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr
 8002ea8:	40010400 	.word	0x40010400

08002eac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e272      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 8087 	beq.w	8002fda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ecc:	4b92      	ldr	r3, [pc, #584]	@ (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 030c 	and.w	r3, r3, #12
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d00c      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ed8:	4b8f      	ldr	r3, [pc, #572]	@ (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 030c 	and.w	r3, r3, #12
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d112      	bne.n	8002f0a <HAL_RCC_OscConfig+0x5e>
 8002ee4:	4b8c      	ldr	r3, [pc, #560]	@ (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ef0:	d10b      	bne.n	8002f0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef2:	4b89      	ldr	r3, [pc, #548]	@ (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d06c      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x12c>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d168      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e24c      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f12:	d106      	bne.n	8002f22 <HAL_RCC_OscConfig+0x76>
 8002f14:	4b80      	ldr	r3, [pc, #512]	@ (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a7f      	ldr	r2, [pc, #508]	@ (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002f1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	e02e      	b.n	8002f80 <HAL_RCC_OscConfig+0xd4>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10c      	bne.n	8002f44 <HAL_RCC_OscConfig+0x98>
 8002f2a:	4b7b      	ldr	r3, [pc, #492]	@ (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a7a      	ldr	r2, [pc, #488]	@ (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002f30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	4b78      	ldr	r3, [pc, #480]	@ (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a77      	ldr	r2, [pc, #476]	@ (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	e01d      	b.n	8002f80 <HAL_RCC_OscConfig+0xd4>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f4c:	d10c      	bne.n	8002f68 <HAL_RCC_OscConfig+0xbc>
 8002f4e:	4b72      	ldr	r3, [pc, #456]	@ (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a71      	ldr	r2, [pc, #452]	@ (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002f54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	4b6f      	ldr	r3, [pc, #444]	@ (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a6e      	ldr	r2, [pc, #440]	@ (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	e00b      	b.n	8002f80 <HAL_RCC_OscConfig+0xd4>
 8002f68:	4b6b      	ldr	r3, [pc, #428]	@ (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a6a      	ldr	r2, [pc, #424]	@ (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002f6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f72:	6013      	str	r3, [r2, #0]
 8002f74:	4b68      	ldr	r3, [pc, #416]	@ (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a67      	ldr	r2, [pc, #412]	@ (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002f7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d013      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7ff fa2e 	bl	80023e8 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f90:	f7ff fa2a 	bl	80023e8 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b64      	cmp	r3, #100	@ 0x64
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e200      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa2:	4b5d      	ldr	r3, [pc, #372]	@ (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCC_OscConfig+0xe4>
 8002fae:	e014      	b.n	8002fda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb0:	f7ff fa1a 	bl	80023e8 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb8:	f7ff fa16 	bl	80023e8 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b64      	cmp	r3, #100	@ 0x64
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e1ec      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fca:	4b53      	ldr	r3, [pc, #332]	@ (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x10c>
 8002fd6:	e000      	b.n	8002fda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d063      	beq.n	80030ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fe6:	4b4c      	ldr	r3, [pc, #304]	@ (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f003 030c 	and.w	r3, r3, #12
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00b      	beq.n	800300a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ff2:	4b49      	ldr	r3, [pc, #292]	@ (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d11c      	bne.n	8003038 <HAL_RCC_OscConfig+0x18c>
 8002ffe:	4b46      	ldr	r3, [pc, #280]	@ (8003118 <HAL_RCC_OscConfig+0x26c>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d116      	bne.n	8003038 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800300a:	4b43      	ldr	r3, [pc, #268]	@ (8003118 <HAL_RCC_OscConfig+0x26c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <HAL_RCC_OscConfig+0x176>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d001      	beq.n	8003022 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e1c0      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003022:	4b3d      	ldr	r3, [pc, #244]	@ (8003118 <HAL_RCC_OscConfig+0x26c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	4939      	ldr	r1, [pc, #228]	@ (8003118 <HAL_RCC_OscConfig+0x26c>)
 8003032:	4313      	orrs	r3, r2
 8003034:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003036:	e03a      	b.n	80030ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d020      	beq.n	8003082 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003040:	4b36      	ldr	r3, [pc, #216]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 8003042:	2201      	movs	r2, #1
 8003044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003046:	f7ff f9cf 	bl	80023e8 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800304e:	f7ff f9cb 	bl	80023e8 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e1a1      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003060:	4b2d      	ldr	r3, [pc, #180]	@ (8003118 <HAL_RCC_OscConfig+0x26c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0f0      	beq.n	800304e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800306c:	4b2a      	ldr	r3, [pc, #168]	@ (8003118 <HAL_RCC_OscConfig+0x26c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	4927      	ldr	r1, [pc, #156]	@ (8003118 <HAL_RCC_OscConfig+0x26c>)
 800307c:	4313      	orrs	r3, r2
 800307e:	600b      	str	r3, [r1, #0]
 8003080:	e015      	b.n	80030ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003082:	4b26      	ldr	r3, [pc, #152]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003088:	f7ff f9ae 	bl	80023e8 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003090:	f7ff f9aa 	bl	80023e8 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e180      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003118 <HAL_RCC_OscConfig+0x26c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d03a      	beq.n	8003130 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d019      	beq.n	80030f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030c2:	4b17      	ldr	r3, [pc, #92]	@ (8003120 <HAL_RCC_OscConfig+0x274>)
 80030c4:	2201      	movs	r2, #1
 80030c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c8:	f7ff f98e 	bl	80023e8 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d0:	f7ff f98a 	bl	80023e8 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e160      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003118 <HAL_RCC_OscConfig+0x26c>)
 80030e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0f0      	beq.n	80030d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030ee:	2001      	movs	r0, #1
 80030f0:	f000 face 	bl	8003690 <RCC_Delay>
 80030f4:	e01c      	b.n	8003130 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003120 <HAL_RCC_OscConfig+0x274>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fc:	f7ff f974 	bl	80023e8 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003102:	e00f      	b.n	8003124 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003104:	f7ff f970 	bl	80023e8 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d908      	bls.n	8003124 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e146      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>
 8003116:	bf00      	nop
 8003118:	40021000 	.word	0x40021000
 800311c:	42420000 	.word	0x42420000
 8003120:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003124:	4b92      	ldr	r3, [pc, #584]	@ (8003370 <HAL_RCC_OscConfig+0x4c4>)
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1e9      	bne.n	8003104 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 80a6 	beq.w	800328a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800313e:	2300      	movs	r3, #0
 8003140:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003142:	4b8b      	ldr	r3, [pc, #556]	@ (8003370 <HAL_RCC_OscConfig+0x4c4>)
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10d      	bne.n	800316a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800314e:	4b88      	ldr	r3, [pc, #544]	@ (8003370 <HAL_RCC_OscConfig+0x4c4>)
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	4a87      	ldr	r2, [pc, #540]	@ (8003370 <HAL_RCC_OscConfig+0x4c4>)
 8003154:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003158:	61d3      	str	r3, [r2, #28]
 800315a:	4b85      	ldr	r3, [pc, #532]	@ (8003370 <HAL_RCC_OscConfig+0x4c4>)
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003162:	60bb      	str	r3, [r7, #8]
 8003164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003166:	2301      	movs	r3, #1
 8003168:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316a:	4b82      	ldr	r3, [pc, #520]	@ (8003374 <HAL_RCC_OscConfig+0x4c8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003172:	2b00      	cmp	r3, #0
 8003174:	d118      	bne.n	80031a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003176:	4b7f      	ldr	r3, [pc, #508]	@ (8003374 <HAL_RCC_OscConfig+0x4c8>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a7e      	ldr	r2, [pc, #504]	@ (8003374 <HAL_RCC_OscConfig+0x4c8>)
 800317c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003182:	f7ff f931 	bl	80023e8 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800318a:	f7ff f92d 	bl	80023e8 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b64      	cmp	r3, #100	@ 0x64
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e103      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800319c:	4b75      	ldr	r3, [pc, #468]	@ (8003374 <HAL_RCC_OscConfig+0x4c8>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f0      	beq.n	800318a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d106      	bne.n	80031be <HAL_RCC_OscConfig+0x312>
 80031b0:	4b6f      	ldr	r3, [pc, #444]	@ (8003370 <HAL_RCC_OscConfig+0x4c4>)
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	4a6e      	ldr	r2, [pc, #440]	@ (8003370 <HAL_RCC_OscConfig+0x4c4>)
 80031b6:	f043 0301 	orr.w	r3, r3, #1
 80031ba:	6213      	str	r3, [r2, #32]
 80031bc:	e02d      	b.n	800321a <HAL_RCC_OscConfig+0x36e>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10c      	bne.n	80031e0 <HAL_RCC_OscConfig+0x334>
 80031c6:	4b6a      	ldr	r3, [pc, #424]	@ (8003370 <HAL_RCC_OscConfig+0x4c4>)
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	4a69      	ldr	r2, [pc, #420]	@ (8003370 <HAL_RCC_OscConfig+0x4c4>)
 80031cc:	f023 0301 	bic.w	r3, r3, #1
 80031d0:	6213      	str	r3, [r2, #32]
 80031d2:	4b67      	ldr	r3, [pc, #412]	@ (8003370 <HAL_RCC_OscConfig+0x4c4>)
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	4a66      	ldr	r2, [pc, #408]	@ (8003370 <HAL_RCC_OscConfig+0x4c4>)
 80031d8:	f023 0304 	bic.w	r3, r3, #4
 80031dc:	6213      	str	r3, [r2, #32]
 80031de:	e01c      	b.n	800321a <HAL_RCC_OscConfig+0x36e>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	2b05      	cmp	r3, #5
 80031e6:	d10c      	bne.n	8003202 <HAL_RCC_OscConfig+0x356>
 80031e8:	4b61      	ldr	r3, [pc, #388]	@ (8003370 <HAL_RCC_OscConfig+0x4c4>)
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	4a60      	ldr	r2, [pc, #384]	@ (8003370 <HAL_RCC_OscConfig+0x4c4>)
 80031ee:	f043 0304 	orr.w	r3, r3, #4
 80031f2:	6213      	str	r3, [r2, #32]
 80031f4:	4b5e      	ldr	r3, [pc, #376]	@ (8003370 <HAL_RCC_OscConfig+0x4c4>)
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	4a5d      	ldr	r2, [pc, #372]	@ (8003370 <HAL_RCC_OscConfig+0x4c4>)
 80031fa:	f043 0301 	orr.w	r3, r3, #1
 80031fe:	6213      	str	r3, [r2, #32]
 8003200:	e00b      	b.n	800321a <HAL_RCC_OscConfig+0x36e>
 8003202:	4b5b      	ldr	r3, [pc, #364]	@ (8003370 <HAL_RCC_OscConfig+0x4c4>)
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	4a5a      	ldr	r2, [pc, #360]	@ (8003370 <HAL_RCC_OscConfig+0x4c4>)
 8003208:	f023 0301 	bic.w	r3, r3, #1
 800320c:	6213      	str	r3, [r2, #32]
 800320e:	4b58      	ldr	r3, [pc, #352]	@ (8003370 <HAL_RCC_OscConfig+0x4c4>)
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	4a57      	ldr	r2, [pc, #348]	@ (8003370 <HAL_RCC_OscConfig+0x4c4>)
 8003214:	f023 0304 	bic.w	r3, r3, #4
 8003218:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d015      	beq.n	800324e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003222:	f7ff f8e1 	bl	80023e8 <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003228:	e00a      	b.n	8003240 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800322a:	f7ff f8dd 	bl	80023e8 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003238:	4293      	cmp	r3, r2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e0b1      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003240:	4b4b      	ldr	r3, [pc, #300]	@ (8003370 <HAL_RCC_OscConfig+0x4c4>)
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0ee      	beq.n	800322a <HAL_RCC_OscConfig+0x37e>
 800324c:	e014      	b.n	8003278 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324e:	f7ff f8cb 	bl	80023e8 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003254:	e00a      	b.n	800326c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003256:	f7ff f8c7 	bl	80023e8 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003264:	4293      	cmp	r3, r2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e09b      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800326c:	4b40      	ldr	r3, [pc, #256]	@ (8003370 <HAL_RCC_OscConfig+0x4c4>)
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1ee      	bne.n	8003256 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003278:	7dfb      	ldrb	r3, [r7, #23]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d105      	bne.n	800328a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800327e:	4b3c      	ldr	r3, [pc, #240]	@ (8003370 <HAL_RCC_OscConfig+0x4c4>)
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	4a3b      	ldr	r2, [pc, #236]	@ (8003370 <HAL_RCC_OscConfig+0x4c4>)
 8003284:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003288:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 8087 	beq.w	80033a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003294:	4b36      	ldr	r3, [pc, #216]	@ (8003370 <HAL_RCC_OscConfig+0x4c4>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f003 030c 	and.w	r3, r3, #12
 800329c:	2b08      	cmp	r3, #8
 800329e:	d061      	beq.n	8003364 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d146      	bne.n	8003336 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a8:	4b33      	ldr	r3, [pc, #204]	@ (8003378 <HAL_RCC_OscConfig+0x4cc>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ae:	f7ff f89b 	bl	80023e8 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b6:	f7ff f897 	bl	80023e8 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e06d      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c8:	4b29      	ldr	r3, [pc, #164]	@ (8003370 <HAL_RCC_OscConfig+0x4c4>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1f0      	bne.n	80032b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032dc:	d108      	bne.n	80032f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032de:	4b24      	ldr	r3, [pc, #144]	@ (8003370 <HAL_RCC_OscConfig+0x4c4>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	4921      	ldr	r1, [pc, #132]	@ (8003370 <HAL_RCC_OscConfig+0x4c4>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003370 <HAL_RCC_OscConfig+0x4c4>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a19      	ldr	r1, [r3, #32]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003300:	430b      	orrs	r3, r1
 8003302:	491b      	ldr	r1, [pc, #108]	@ (8003370 <HAL_RCC_OscConfig+0x4c4>)
 8003304:	4313      	orrs	r3, r2
 8003306:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003308:	4b1b      	ldr	r3, [pc, #108]	@ (8003378 <HAL_RCC_OscConfig+0x4cc>)
 800330a:	2201      	movs	r2, #1
 800330c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330e:	f7ff f86b 	bl	80023e8 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003316:	f7ff f867 	bl	80023e8 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e03d      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003328:	4b11      	ldr	r3, [pc, #68]	@ (8003370 <HAL_RCC_OscConfig+0x4c4>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0f0      	beq.n	8003316 <HAL_RCC_OscConfig+0x46a>
 8003334:	e035      	b.n	80033a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003336:	4b10      	ldr	r3, [pc, #64]	@ (8003378 <HAL_RCC_OscConfig+0x4cc>)
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333c:	f7ff f854 	bl	80023e8 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003344:	f7ff f850 	bl	80023e8 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e026      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003356:	4b06      	ldr	r3, [pc, #24]	@ (8003370 <HAL_RCC_OscConfig+0x4c4>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f0      	bne.n	8003344 <HAL_RCC_OscConfig+0x498>
 8003362:	e01e      	b.n	80033a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d107      	bne.n	800337c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e019      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>
 8003370:	40021000 	.word	0x40021000
 8003374:	40007000 	.word	0x40007000
 8003378:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800337c:	4b0b      	ldr	r3, [pc, #44]	@ (80033ac <HAL_RCC_OscConfig+0x500>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	429a      	cmp	r2, r3
 800338e:	d106      	bne.n	800339e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800339a:	429a      	cmp	r2, r3
 800339c:	d001      	beq.n	80033a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40021000 	.word	0x40021000

080033b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e0d0      	b.n	8003566 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033c4:	4b6a      	ldr	r3, [pc, #424]	@ (8003570 <HAL_RCC_ClockConfig+0x1c0>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d910      	bls.n	80033f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d2:	4b67      	ldr	r3, [pc, #412]	@ (8003570 <HAL_RCC_ClockConfig+0x1c0>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f023 0207 	bic.w	r2, r3, #7
 80033da:	4965      	ldr	r1, [pc, #404]	@ (8003570 <HAL_RCC_ClockConfig+0x1c0>)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	4313      	orrs	r3, r2
 80033e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e2:	4b63      	ldr	r3, [pc, #396]	@ (8003570 <HAL_RCC_ClockConfig+0x1c0>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d001      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e0b8      	b.n	8003566 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d020      	beq.n	8003442 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	d005      	beq.n	8003418 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800340c:	4b59      	ldr	r3, [pc, #356]	@ (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	4a58      	ldr	r2, [pc, #352]	@ (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 8003412:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003416:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0308 	and.w	r3, r3, #8
 8003420:	2b00      	cmp	r3, #0
 8003422:	d005      	beq.n	8003430 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003424:	4b53      	ldr	r3, [pc, #332]	@ (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	4a52      	ldr	r2, [pc, #328]	@ (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 800342a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800342e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003430:	4b50      	ldr	r3, [pc, #320]	@ (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	494d      	ldr	r1, [pc, #308]	@ (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 800343e:	4313      	orrs	r3, r2
 8003440:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d040      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d107      	bne.n	8003466 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003456:	4b47      	ldr	r3, [pc, #284]	@ (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d115      	bne.n	800348e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e07f      	b.n	8003566 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b02      	cmp	r3, #2
 800346c:	d107      	bne.n	800347e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800346e:	4b41      	ldr	r3, [pc, #260]	@ (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d109      	bne.n	800348e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e073      	b.n	8003566 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347e:	4b3d      	ldr	r3, [pc, #244]	@ (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e06b      	b.n	8003566 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800348e:	4b39      	ldr	r3, [pc, #228]	@ (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f023 0203 	bic.w	r2, r3, #3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	4936      	ldr	r1, [pc, #216]	@ (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 800349c:	4313      	orrs	r3, r2
 800349e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034a0:	f7fe ffa2 	bl	80023e8 <HAL_GetTick>
 80034a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a6:	e00a      	b.n	80034be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a8:	f7fe ff9e 	bl	80023e8 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e053      	b.n	8003566 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034be:	4b2d      	ldr	r3, [pc, #180]	@ (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f003 020c 	and.w	r2, r3, #12
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d1eb      	bne.n	80034a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034d0:	4b27      	ldr	r3, [pc, #156]	@ (8003570 <HAL_RCC_ClockConfig+0x1c0>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d210      	bcs.n	8003500 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034de:	4b24      	ldr	r3, [pc, #144]	@ (8003570 <HAL_RCC_ClockConfig+0x1c0>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 0207 	bic.w	r2, r3, #7
 80034e6:	4922      	ldr	r1, [pc, #136]	@ (8003570 <HAL_RCC_ClockConfig+0x1c0>)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ee:	4b20      	ldr	r3, [pc, #128]	@ (8003570 <HAL_RCC_ClockConfig+0x1c0>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d001      	beq.n	8003500 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e032      	b.n	8003566 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d008      	beq.n	800351e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800350c:	4b19      	ldr	r3, [pc, #100]	@ (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	4916      	ldr	r1, [pc, #88]	@ (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 800351a:	4313      	orrs	r3, r2
 800351c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b00      	cmp	r3, #0
 8003528:	d009      	beq.n	800353e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800352a:	4b12      	ldr	r3, [pc, #72]	@ (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	490e      	ldr	r1, [pc, #56]	@ (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 800353a:	4313      	orrs	r3, r2
 800353c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800353e:	f000 f821 	bl	8003584 <HAL_RCC_GetSysClockFreq>
 8003542:	4602      	mov	r2, r0
 8003544:	4b0b      	ldr	r3, [pc, #44]	@ (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	091b      	lsrs	r3, r3, #4
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	490a      	ldr	r1, [pc, #40]	@ (8003578 <HAL_RCC_ClockConfig+0x1c8>)
 8003550:	5ccb      	ldrb	r3, [r1, r3]
 8003552:	fa22 f303 	lsr.w	r3, r2, r3
 8003556:	4a09      	ldr	r2, [pc, #36]	@ (800357c <HAL_RCC_ClockConfig+0x1cc>)
 8003558:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800355a:	4b09      	ldr	r3, [pc, #36]	@ (8003580 <HAL_RCC_ClockConfig+0x1d0>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f7fe ff00 	bl	8002364 <HAL_InitTick>

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40022000 	.word	0x40022000
 8003574:	40021000 	.word	0x40021000
 8003578:	08004bf8 	.word	0x08004bf8
 800357c:	20000010 	.word	0x20000010
 8003580:	20000014 	.word	0x20000014

08003584 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003584:	b480      	push	{r7}
 8003586:	b087      	sub	sp, #28
 8003588:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800358a:	2300      	movs	r3, #0
 800358c:	60fb      	str	r3, [r7, #12]
 800358e:	2300      	movs	r3, #0
 8003590:	60bb      	str	r3, [r7, #8]
 8003592:	2300      	movs	r3, #0
 8003594:	617b      	str	r3, [r7, #20]
 8003596:	2300      	movs	r3, #0
 8003598:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800359a:	2300      	movs	r3, #0
 800359c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800359e:	4b1e      	ldr	r3, [pc, #120]	@ (8003618 <HAL_RCC_GetSysClockFreq+0x94>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d002      	beq.n	80035b4 <HAL_RCC_GetSysClockFreq+0x30>
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d003      	beq.n	80035ba <HAL_RCC_GetSysClockFreq+0x36>
 80035b2:	e027      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035b4:	4b19      	ldr	r3, [pc, #100]	@ (800361c <HAL_RCC_GetSysClockFreq+0x98>)
 80035b6:	613b      	str	r3, [r7, #16]
      break;
 80035b8:	e027      	b.n	800360a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	0c9b      	lsrs	r3, r3, #18
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	4a17      	ldr	r2, [pc, #92]	@ (8003620 <HAL_RCC_GetSysClockFreq+0x9c>)
 80035c4:	5cd3      	ldrb	r3, [r2, r3]
 80035c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d010      	beq.n	80035f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035d2:	4b11      	ldr	r3, [pc, #68]	@ (8003618 <HAL_RCC_GetSysClockFreq+0x94>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	0c5b      	lsrs	r3, r3, #17
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	4a11      	ldr	r2, [pc, #68]	@ (8003624 <HAL_RCC_GetSysClockFreq+0xa0>)
 80035de:	5cd3      	ldrb	r3, [r2, r3]
 80035e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a0d      	ldr	r2, [pc, #52]	@ (800361c <HAL_RCC_GetSysClockFreq+0x98>)
 80035e6:	fb03 f202 	mul.w	r2, r3, r2
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	e004      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003628 <HAL_RCC_GetSysClockFreq+0xa4>)
 80035f8:	fb02 f303 	mul.w	r3, r2, r3
 80035fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	613b      	str	r3, [r7, #16]
      break;
 8003602:	e002      	b.n	800360a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003604:	4b05      	ldr	r3, [pc, #20]	@ (800361c <HAL_RCC_GetSysClockFreq+0x98>)
 8003606:	613b      	str	r3, [r7, #16]
      break;
 8003608:	bf00      	nop
    }
  }
  return sysclockfreq;
 800360a:	693b      	ldr	r3, [r7, #16]
}
 800360c:	4618      	mov	r0, r3
 800360e:	371c      	adds	r7, #28
 8003610:	46bd      	mov	sp, r7
 8003612:	bc80      	pop	{r7}
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40021000 	.word	0x40021000
 800361c:	007a1200 	.word	0x007a1200
 8003620:	08004c10 	.word	0x08004c10
 8003624:	08004c20 	.word	0x08004c20
 8003628:	003d0900 	.word	0x003d0900

0800362c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003630:	4b02      	ldr	r3, [pc, #8]	@ (800363c <HAL_RCC_GetHCLKFreq+0x10>)
 8003632:	681b      	ldr	r3, [r3, #0]
}
 8003634:	4618      	mov	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr
 800363c:	20000010 	.word	0x20000010

08003640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003644:	f7ff fff2 	bl	800362c <HAL_RCC_GetHCLKFreq>
 8003648:	4602      	mov	r2, r0
 800364a:	4b05      	ldr	r3, [pc, #20]	@ (8003660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	0a1b      	lsrs	r3, r3, #8
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	4903      	ldr	r1, [pc, #12]	@ (8003664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003656:	5ccb      	ldrb	r3, [r1, r3]
 8003658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800365c:	4618      	mov	r0, r3
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40021000 	.word	0x40021000
 8003664:	08004c08 	.word	0x08004c08

08003668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800366c:	f7ff ffde 	bl	800362c <HAL_RCC_GetHCLKFreq>
 8003670:	4602      	mov	r2, r0
 8003672:	4b05      	ldr	r3, [pc, #20]	@ (8003688 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	0adb      	lsrs	r3, r3, #11
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	4903      	ldr	r1, [pc, #12]	@ (800368c <HAL_RCC_GetPCLK2Freq+0x24>)
 800367e:	5ccb      	ldrb	r3, [r1, r3]
 8003680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003684:	4618      	mov	r0, r3
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40021000 	.word	0x40021000
 800368c:	08004c08 	.word	0x08004c08

08003690 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003698:	4b0a      	ldr	r3, [pc, #40]	@ (80036c4 <RCC_Delay+0x34>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a0a      	ldr	r2, [pc, #40]	@ (80036c8 <RCC_Delay+0x38>)
 800369e:	fba2 2303 	umull	r2, r3, r2, r3
 80036a2:	0a5b      	lsrs	r3, r3, #9
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	fb02 f303 	mul.w	r3, r2, r3
 80036aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036ac:	bf00      	nop
  }
  while (Delay --);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	1e5a      	subs	r2, r3, #1
 80036b2:	60fa      	str	r2, [r7, #12]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1f9      	bne.n	80036ac <RCC_Delay+0x1c>
}
 80036b8:	bf00      	nop
 80036ba:	bf00      	nop
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr
 80036c4:	20000010 	.word	0x20000010
 80036c8:	10624dd3 	.word	0x10624dd3

080036cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e042      	b.n	8003764 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d106      	bne.n	80036f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7fe fd0e 	bl	8002114 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2224      	movs	r2, #36	@ 0x24
 80036fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800370e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 ff41 	bl	8004598 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	691a      	ldr	r2, [r3, #16]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003724:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695a      	ldr	r2, [r3, #20]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003734:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003744:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2220      	movs	r2, #32
 8003750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2220      	movs	r2, #32
 8003758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b08c      	sub	sp, #48	@ 0x30
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	4613      	mov	r3, r2
 8003778:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b20      	cmp	r3, #32
 8003784:	d156      	bne.n	8003834 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <HAL_UART_Transmit_DMA+0x26>
 800378c:	88fb      	ldrh	r3, [r7, #6]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e04f      	b.n	8003836 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	88fa      	ldrh	r2, [r7, #6]
 80037a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	88fa      	ldrh	r2, [r7, #6]
 80037a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2221      	movs	r2, #33	@ 0x21
 80037b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ba:	4a21      	ldr	r2, [pc, #132]	@ (8003840 <HAL_UART_Transmit_DMA+0xd4>)
 80037bc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c2:	4a20      	ldr	r2, [pc, #128]	@ (8003844 <HAL_UART_Transmit_DMA+0xd8>)
 80037c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ca:	4a1f      	ldr	r2, [pc, #124]	@ (8003848 <HAL_UART_Transmit_DMA+0xdc>)
 80037cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d2:	2200      	movs	r2, #0
 80037d4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80037d6:	f107 0308 	add.w	r3, r7, #8
 80037da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80037e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037e2:	6819      	ldr	r1, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3304      	adds	r3, #4
 80037ea:	461a      	mov	r2, r3
 80037ec:	88fb      	ldrh	r3, [r7, #6]
 80037ee:	f7fe ff91 	bl	8002714 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80037fa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	3314      	adds	r3, #20
 8003802:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	e853 3f00 	ldrex	r3, [r3]
 800380a:	617b      	str	r3, [r7, #20]
   return(result);
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003812:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	3314      	adds	r3, #20
 800381a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800381c:	627a      	str	r2, [r7, #36]	@ 0x24
 800381e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003820:	6a39      	ldr	r1, [r7, #32]
 8003822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003824:	e841 2300 	strex	r3, r2, [r1]
 8003828:	61fb      	str	r3, [r7, #28]
   return(result);
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1e5      	bne.n	80037fc <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003830:	2300      	movs	r3, #0
 8003832:	e000      	b.n	8003836 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003834:	2302      	movs	r3, #2
  }
}
 8003836:	4618      	mov	r0, r3
 8003838:	3730      	adds	r7, #48	@ 0x30
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	08003e2d 	.word	0x08003e2d
 8003844:	08003ec7 	.word	0x08003ec7
 8003848:	0800404b 	.word	0x0800404b

0800384c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	4613      	mov	r3, r2
 8003858:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b20      	cmp	r3, #32
 8003864:	d112      	bne.n	800388c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <HAL_UART_Receive_DMA+0x26>
 800386c:	88fb      	ldrh	r3, [r7, #6]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e00b      	b.n	800388e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800387c:	88fb      	ldrh	r3, [r7, #6]
 800387e:	461a      	mov	r2, r3
 8003880:	68b9      	ldr	r1, [r7, #8]
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 fc2c 	bl	80040e0 <UART_Start_Receive_DMA>
 8003888:	4603      	mov	r3, r0
 800388a:	e000      	b.n	800388e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800388c:	2302      	movs	r3, #2
  }
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
	...

08003898 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b0ba      	sub	sp, #232	@ 0xe8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80038be:	2300      	movs	r3, #0
 80038c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80038d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10f      	bne.n	80038fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038e2:	f003 0320 	and.w	r3, r3, #32
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d009      	beq.n	80038fe <HAL_UART_IRQHandler+0x66>
 80038ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fd90 	bl	800441c <UART_Receive_IT>
      return;
 80038fc:	e25b      	b.n	8003db6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80038fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 80de 	beq.w	8003ac4 <HAL_UART_IRQHandler+0x22c>
 8003908:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	d106      	bne.n	8003922 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003918:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 80d1 	beq.w	8003ac4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00b      	beq.n	8003946 <HAL_UART_IRQHandler+0xae>
 800392e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003936:	2b00      	cmp	r3, #0
 8003938:	d005      	beq.n	8003946 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800393e:	f043 0201 	orr.w	r2, r3, #1
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800394a:	f003 0304 	and.w	r3, r3, #4
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00b      	beq.n	800396a <HAL_UART_IRQHandler+0xd2>
 8003952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d005      	beq.n	800396a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003962:	f043 0202 	orr.w	r2, r3, #2
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800396a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00b      	beq.n	800398e <HAL_UART_IRQHandler+0xf6>
 8003976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d005      	beq.n	800398e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003986:	f043 0204 	orr.w	r2, r3, #4
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800398e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b00      	cmp	r3, #0
 8003998:	d011      	beq.n	80039be <HAL_UART_IRQHandler+0x126>
 800399a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800399e:	f003 0320 	and.w	r3, r3, #32
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d105      	bne.n	80039b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80039a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d005      	beq.n	80039be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b6:	f043 0208 	orr.w	r2, r3, #8
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 81f2 	beq.w	8003dac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039cc:	f003 0320 	and.w	r3, r3, #32
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <HAL_UART_IRQHandler+0x14e>
 80039d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039d8:	f003 0320 	and.w	r3, r3, #32
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d002      	beq.n	80039e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 fd1b 	bl	800441c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	bf14      	ite	ne
 80039f4:	2301      	movne	r3, #1
 80039f6:	2300      	moveq	r3, #0
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d103      	bne.n	8003a12 <HAL_UART_IRQHandler+0x17a>
 8003a0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d04f      	beq.n	8003ab2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 fc25 	bl	8004262 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d041      	beq.n	8003aaa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3314      	adds	r3, #20
 8003a2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a34:	e853 3f00 	ldrex	r3, [r3]
 8003a38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003a3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3314      	adds	r3, #20
 8003a4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003a52:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003a56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003a62:	e841 2300 	strex	r3, r2, [r1]
 8003a66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003a6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1d9      	bne.n	8003a26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d013      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a7e:	4a7e      	ldr	r2, [pc, #504]	@ (8003c78 <HAL_UART_IRQHandler+0x3e0>)
 8003a80:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fe fee0 	bl	800284c <HAL_DMA_Abort_IT>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d016      	beq.n	8003ac0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa0:	e00e      	b.n	8003ac0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f9ae 	bl	8003e04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa8:	e00a      	b.n	8003ac0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f9aa 	bl	8003e04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab0:	e006      	b.n	8003ac0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f9a6 	bl	8003e04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003abe:	e175      	b.n	8003dac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac0:	bf00      	nop
    return;
 8003ac2:	e173      	b.n	8003dac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	f040 814f 	bne.w	8003d6c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 8148 	beq.w	8003d6c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ae0:	f003 0310 	and.w	r3, r3, #16
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 8141 	beq.w	8003d6c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003aea:	2300      	movs	r3, #0
 8003aec:	60bb      	str	r3, [r7, #8]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	60bb      	str	r3, [r7, #8]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	60bb      	str	r3, [r7, #8]
 8003afe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 80b6 	beq.w	8003c7c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 8145 	beq.w	8003db0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	f080 813e 	bcs.w	8003db0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b3a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	2b20      	cmp	r3, #32
 8003b44:	f000 8088 	beq.w	8003c58 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	330c      	adds	r3, #12
 8003b4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b52:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b56:	e853 3f00 	ldrex	r3, [r3]
 8003b5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003b5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b62:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b66:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	330c      	adds	r3, #12
 8003b70:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003b74:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003b80:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003b84:	e841 2300 	strex	r3, r2, [r1]
 8003b88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003b8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1d9      	bne.n	8003b48 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	3314      	adds	r3, #20
 8003b9a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b9e:	e853 3f00 	ldrex	r3, [r3]
 8003ba2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003ba4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ba6:	f023 0301 	bic.w	r3, r3, #1
 8003baa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3314      	adds	r3, #20
 8003bb4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003bb8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003bbc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bbe:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003bc0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003bc4:	e841 2300 	strex	r3, r2, [r1]
 8003bc8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003bca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1e1      	bne.n	8003b94 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3314      	adds	r3, #20
 8003bd6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bda:	e853 3f00 	ldrex	r3, [r3]
 8003bde:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003be0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003be2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003be6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	3314      	adds	r3, #20
 8003bf0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003bf4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003bf6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003bfa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003bfc:	e841 2300 	strex	r3, r2, [r1]
 8003c00:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003c02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1e3      	bne.n	8003bd0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	330c      	adds	r3, #12
 8003c1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c20:	e853 3f00 	ldrex	r3, [r3]
 8003c24:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003c26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c28:	f023 0310 	bic.w	r3, r3, #16
 8003c2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	330c      	adds	r3, #12
 8003c36:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003c3a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003c3c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c42:	e841 2300 	strex	r3, r2, [r1]
 8003c46:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003c48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1e3      	bne.n	8003c16 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fe fdbe 	bl	80027d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f8d1 	bl	8003e16 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c74:	e09c      	b.n	8003db0 <HAL_UART_IRQHandler+0x518>
 8003c76:	bf00      	nop
 8003c78:	08004327 	.word	0x08004327
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 808e 	beq.w	8003db4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003c98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 8089 	beq.w	8003db4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	330c      	adds	r3, #12
 8003ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cac:	e853 3f00 	ldrex	r3, [r3]
 8003cb0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cb8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	330c      	adds	r3, #12
 8003cc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003cc6:	647a      	str	r2, [r7, #68]	@ 0x44
 8003cc8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ccc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cce:	e841 2300 	strex	r3, r2, [r1]
 8003cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003cd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1e3      	bne.n	8003ca2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	3314      	adds	r3, #20
 8003ce0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce4:	e853 3f00 	ldrex	r3, [r3]
 8003ce8:	623b      	str	r3, [r7, #32]
   return(result);
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	f023 0301 	bic.w	r3, r3, #1
 8003cf0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3314      	adds	r3, #20
 8003cfa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003cfe:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d06:	e841 2300 	strex	r3, r2, [r1]
 8003d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1e3      	bne.n	8003cda <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2220      	movs	r2, #32
 8003d16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	330c      	adds	r3, #12
 8003d26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	e853 3f00 	ldrex	r3, [r3]
 8003d2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f023 0310 	bic.w	r3, r3, #16
 8003d36:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	330c      	adds	r3, #12
 8003d40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003d44:	61fa      	str	r2, [r7, #28]
 8003d46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d48:	69b9      	ldr	r1, [r7, #24]
 8003d4a:	69fa      	ldr	r2, [r7, #28]
 8003d4c:	e841 2300 	strex	r3, r2, [r1]
 8003d50:	617b      	str	r3, [r7, #20]
   return(result);
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1e3      	bne.n	8003d20 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d62:	4619      	mov	r1, r3
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 f856 	bl	8003e16 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d6a:	e023      	b.n	8003db4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d009      	beq.n	8003d8c <HAL_UART_IRQHandler+0x4f4>
 8003d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 fae2 	bl	800434e <UART_Transmit_IT>
    return;
 8003d8a:	e014      	b.n	8003db6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00e      	beq.n	8003db6 <HAL_UART_IRQHandler+0x51e>
 8003d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d008      	beq.n	8003db6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 fb21 	bl	80043ec <UART_EndTransmit_IT>
    return;
 8003daa:	e004      	b.n	8003db6 <HAL_UART_IRQHandler+0x51e>
    return;
 8003dac:	bf00      	nop
 8003dae:	e002      	b.n	8003db6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003db0:	bf00      	nop
 8003db2:	e000      	b.n	8003db6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003db4:	bf00      	nop
  }
}
 8003db6:	37e8      	adds	r7, #232	@ 0xe8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bc80      	pop	{r7}
 8003dcc:	4770      	bx	lr

08003dce <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bc80      	pop	{r7}
 8003dde:	4770      	bx	lr

08003de0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bc80      	pop	{r7}
 8003df0:	4770      	bx	lr

08003df2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr

08003e04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bc80      	pop	{r7}
 8003e14:	4770      	bx	lr

08003e16 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
 8003e1e:	460b      	mov	r3, r1
 8003e20:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr

08003e2c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b090      	sub	sp, #64	@ 0x40
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0320 	and.w	r3, r3, #32
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d137      	bne.n	8003eb8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003e48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003e4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	3314      	adds	r3, #20
 8003e54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e58:	e853 3f00 	ldrex	r3, [r3]
 8003e5c:	623b      	str	r3, [r7, #32]
   return(result);
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	3314      	adds	r3, #20
 8003e6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e6e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e76:	e841 2300 	strex	r3, r2, [r1]
 8003e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1e5      	bne.n	8003e4e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	330c      	adds	r3, #12
 8003e88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	e853 3f00 	ldrex	r3, [r3]
 8003e90:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e98:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	330c      	adds	r3, #12
 8003ea0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ea2:	61fa      	str	r2, [r7, #28]
 8003ea4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea6:	69b9      	ldr	r1, [r7, #24]
 8003ea8:	69fa      	ldr	r2, [r7, #28]
 8003eaa:	e841 2300 	strex	r3, r2, [r1]
 8003eae:	617b      	str	r3, [r7, #20]
   return(result);
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1e5      	bne.n	8003e82 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003eb6:	e002      	b.n	8003ebe <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003eb8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003eba:	f7ff ff7f 	bl	8003dbc <HAL_UART_TxCpltCallback>
}
 8003ebe:	bf00      	nop
 8003ec0:	3740      	adds	r7, #64	@ 0x40
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f7ff ff7a 	bl	8003dce <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003eda:	bf00      	nop
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b09c      	sub	sp, #112	@ 0x70
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eee:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0320 	and.w	r3, r3, #32
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d172      	bne.n	8003fe4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003efe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f00:	2200      	movs	r2, #0
 8003f02:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	330c      	adds	r3, #12
 8003f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f0e:	e853 3f00 	ldrex	r3, [r3]
 8003f12:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f16:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f1a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	330c      	adds	r3, #12
 8003f22:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003f24:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003f26:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f28:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f2a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f2c:	e841 2300 	strex	r3, r2, [r1]
 8003f30:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1e5      	bne.n	8003f04 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3314      	adds	r3, #20
 8003f3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f42:	e853 3f00 	ldrex	r3, [r3]
 8003f46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f4a:	f023 0301 	bic.w	r3, r3, #1
 8003f4e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	3314      	adds	r3, #20
 8003f56:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003f58:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f5a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f60:	e841 2300 	strex	r3, r2, [r1]
 8003f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1e5      	bne.n	8003f38 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3314      	adds	r3, #20
 8003f72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f76:	e853 3f00 	ldrex	r3, [r3]
 8003f7a:	623b      	str	r3, [r7, #32]
   return(result);
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f82:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3314      	adds	r3, #20
 8003f8a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003f8c:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f94:	e841 2300 	strex	r3, r2, [r1]
 8003f98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1e5      	bne.n	8003f6c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003fa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d119      	bne.n	8003fe4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	330c      	adds	r3, #12
 8003fb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	e853 3f00 	ldrex	r3, [r3]
 8003fbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 0310 	bic.w	r3, r3, #16
 8003fc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	330c      	adds	r3, #12
 8003fce:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003fd0:	61fa      	str	r2, [r7, #28]
 8003fd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd4:	69b9      	ldr	r1, [r7, #24]
 8003fd6:	69fa      	ldr	r2, [r7, #28]
 8003fd8:	e841 2300 	strex	r3, r2, [r1]
 8003fdc:	617b      	str	r3, [r7, #20]
   return(result);
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1e5      	bne.n	8003fb0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fe4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d106      	bne.n	8004000 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ff2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ff4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003ffa:	f7ff ff0c 	bl	8003e16 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ffe:	e002      	b.n	8004006 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004000:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004002:	f7ff feed 	bl	8003de0 <HAL_UART_RxCpltCallback>
}
 8004006:	bf00      	nop
 8004008:	3770      	adds	r7, #112	@ 0x70
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b084      	sub	sp, #16
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2201      	movs	r2, #1
 8004020:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004026:	2b01      	cmp	r3, #1
 8004028:	d108      	bne.n	800403c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800402e:	085b      	lsrs	r3, r3, #1
 8004030:	b29b      	uxth	r3, r3
 8004032:	4619      	mov	r1, r3
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f7ff feee 	bl	8003e16 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800403a:	e002      	b.n	8004042 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f7ff fed8 	bl	8003df2 <HAL_UART_RxHalfCpltCallback>
}
 8004042:	bf00      	nop
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b084      	sub	sp, #16
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004052:	2300      	movs	r3, #0
 8004054:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004066:	2b00      	cmp	r3, #0
 8004068:	bf14      	ite	ne
 800406a:	2301      	movne	r3, #1
 800406c:	2300      	moveq	r3, #0
 800406e:	b2db      	uxtb	r3, r3
 8004070:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b21      	cmp	r3, #33	@ 0x21
 800407c:	d108      	bne.n	8004090 <UART_DMAError+0x46>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d005      	beq.n	8004090 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2200      	movs	r2, #0
 8004088:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800408a:	68b8      	ldr	r0, [r7, #8]
 800408c:	f000 f8c2 	bl	8004214 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800409a:	2b00      	cmp	r3, #0
 800409c:	bf14      	ite	ne
 800409e:	2301      	movne	r3, #1
 80040a0:	2300      	moveq	r3, #0
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b22      	cmp	r3, #34	@ 0x22
 80040b0:	d108      	bne.n	80040c4 <UART_DMAError+0x7a>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2200      	movs	r2, #0
 80040bc:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80040be:	68b8      	ldr	r0, [r7, #8]
 80040c0:	f000 f8cf 	bl	8004262 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c8:	f043 0210 	orr.w	r2, r3, #16
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040d0:	68b8      	ldr	r0, [r7, #8]
 80040d2:	f7ff fe97 	bl	8003e04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040d6:	bf00      	nop
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
	...

080040e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b098      	sub	sp, #96	@ 0x60
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	4613      	mov	r3, r2
 80040ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	88fa      	ldrh	r2, [r7, #6]
 80040f8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2222      	movs	r2, #34	@ 0x22
 8004104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800410c:	4a3e      	ldr	r2, [pc, #248]	@ (8004208 <UART_Start_Receive_DMA+0x128>)
 800410e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004114:	4a3d      	ldr	r2, [pc, #244]	@ (800420c <UART_Start_Receive_DMA+0x12c>)
 8004116:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800411c:	4a3c      	ldr	r2, [pc, #240]	@ (8004210 <UART_Start_Receive_DMA+0x130>)
 800411e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004124:	2200      	movs	r2, #0
 8004126:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004128:	f107 0308 	add.w	r3, r7, #8
 800412c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3304      	adds	r3, #4
 8004138:	4619      	mov	r1, r3
 800413a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	88fb      	ldrh	r3, [r7, #6]
 8004140:	f7fe fae8 	bl	8002714 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004144:	2300      	movs	r3, #0
 8004146:	613b      	str	r3, [r7, #16]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	613b      	str	r3, [r7, #16]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	613b      	str	r3, [r7, #16]
 8004158:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d019      	beq.n	8004196 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	330c      	adds	r3, #12
 8004168:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800416c:	e853 3f00 	ldrex	r3, [r3]
 8004170:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004178:	65bb      	str	r3, [r7, #88]	@ 0x58
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	330c      	adds	r3, #12
 8004180:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004182:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004184:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004186:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004188:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800418a:	e841 2300 	strex	r3, r2, [r1]
 800418e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004190:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1e5      	bne.n	8004162 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3314      	adds	r3, #20
 800419c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041a0:	e853 3f00 	ldrex	r3, [r3]
 80041a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a8:	f043 0301 	orr.w	r3, r3, #1
 80041ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3314      	adds	r3, #20
 80041b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80041b6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80041b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80041bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80041be:	e841 2300 	strex	r3, r2, [r1]
 80041c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1e5      	bne.n	8004196 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3314      	adds	r3, #20
 80041d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	e853 3f00 	ldrex	r3, [r3]
 80041d8:	617b      	str	r3, [r7, #20]
   return(result);
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	3314      	adds	r3, #20
 80041e8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80041ea:	627a      	str	r2, [r7, #36]	@ 0x24
 80041ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ee:	6a39      	ldr	r1, [r7, #32]
 80041f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041f2:	e841 2300 	strex	r3, r2, [r1]
 80041f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1e5      	bne.n	80041ca <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3760      	adds	r7, #96	@ 0x60
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	08003ee3 	.word	0x08003ee3
 800420c:	0800400f 	.word	0x0800400f
 8004210:	0800404b 	.word	0x0800404b

08004214 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004214:	b480      	push	{r7}
 8004216:	b089      	sub	sp, #36	@ 0x24
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	330c      	adds	r3, #12
 8004222:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	e853 3f00 	ldrex	r3, [r3]
 800422a:	60bb      	str	r3, [r7, #8]
   return(result);
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004232:	61fb      	str	r3, [r7, #28]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	330c      	adds	r3, #12
 800423a:	69fa      	ldr	r2, [r7, #28]
 800423c:	61ba      	str	r2, [r7, #24]
 800423e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004240:	6979      	ldr	r1, [r7, #20]
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	e841 2300 	strex	r3, r2, [r1]
 8004248:	613b      	str	r3, [r7, #16]
   return(result);
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1e5      	bne.n	800421c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2220      	movs	r2, #32
 8004254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004258:	bf00      	nop
 800425a:	3724      	adds	r7, #36	@ 0x24
 800425c:	46bd      	mov	sp, r7
 800425e:	bc80      	pop	{r7}
 8004260:	4770      	bx	lr

08004262 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004262:	b480      	push	{r7}
 8004264:	b095      	sub	sp, #84	@ 0x54
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	330c      	adds	r3, #12
 8004270:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004274:	e853 3f00 	ldrex	r3, [r3]
 8004278:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800427a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004280:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	330c      	adds	r3, #12
 8004288:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800428a:	643a      	str	r2, [r7, #64]	@ 0x40
 800428c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004290:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004292:	e841 2300 	strex	r3, r2, [r1]
 8004296:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1e5      	bne.n	800426a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3314      	adds	r3, #20
 80042a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	e853 3f00 	ldrex	r3, [r3]
 80042ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	f023 0301 	bic.w	r3, r3, #1
 80042b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	3314      	adds	r3, #20
 80042bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042c6:	e841 2300 	strex	r3, r2, [r1]
 80042ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1e5      	bne.n	800429e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d119      	bne.n	800430e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	330c      	adds	r3, #12
 80042e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	e853 3f00 	ldrex	r3, [r3]
 80042e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f023 0310 	bic.w	r3, r3, #16
 80042f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	330c      	adds	r3, #12
 80042f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042fa:	61ba      	str	r2, [r7, #24]
 80042fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fe:	6979      	ldr	r1, [r7, #20]
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	e841 2300 	strex	r3, r2, [r1]
 8004306:	613b      	str	r3, [r7, #16]
   return(result);
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1e5      	bne.n	80042da <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2220      	movs	r2, #32
 8004312:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800431c:	bf00      	nop
 800431e:	3754      	adds	r7, #84	@ 0x54
 8004320:	46bd      	mov	sp, r7
 8004322:	bc80      	pop	{r7}
 8004324:	4770      	bx	lr

08004326 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b084      	sub	sp, #16
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004332:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f7ff fd5f 	bl	8003e04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004346:	bf00      	nop
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800434e:	b480      	push	{r7}
 8004350:	b085      	sub	sp, #20
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b21      	cmp	r3, #33	@ 0x21
 8004360:	d13e      	bne.n	80043e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800436a:	d114      	bne.n	8004396 <UART_Transmit_IT+0x48>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d110      	bne.n	8004396 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	881b      	ldrh	r3, [r3, #0]
 800437e:	461a      	mov	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004388:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	1c9a      	adds	r2, r3, #2
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	621a      	str	r2, [r3, #32]
 8004394:	e008      	b.n	80043a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	1c59      	adds	r1, r3, #1
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6211      	str	r1, [r2, #32]
 80043a0:	781a      	ldrb	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	4619      	mov	r1, r3
 80043b6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10f      	bne.n	80043dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	e000      	b.n	80043e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043e0:	2302      	movs	r3, #2
  }
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr

080043ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004402:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2220      	movs	r2, #32
 8004408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7ff fcd5 	bl	8003dbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08c      	sub	sp, #48	@ 0x30
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b22      	cmp	r3, #34	@ 0x22
 800442e:	f040 80ae 	bne.w	800458e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800443a:	d117      	bne.n	800446c <UART_Receive_IT+0x50>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d113      	bne.n	800446c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004444:	2300      	movs	r3, #0
 8004446:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	b29b      	uxth	r3, r3
 8004456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800445a:	b29a      	uxth	r2, r3
 800445c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004464:	1c9a      	adds	r2, r3, #2
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	629a      	str	r2, [r3, #40]	@ 0x28
 800446a:	e026      	b.n	80044ba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004470:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004472:	2300      	movs	r3, #0
 8004474:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800447e:	d007      	beq.n	8004490 <UART_Receive_IT+0x74>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10a      	bne.n	800449e <UART_Receive_IT+0x82>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d106      	bne.n	800449e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	b2da      	uxtb	r2, r3
 8004498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800449a:	701a      	strb	r2, [r3, #0]
 800449c:	e008      	b.n	80044b0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b4:	1c5a      	adds	r2, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	4619      	mov	r1, r3
 80044c8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d15d      	bne.n	800458a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0220 	bic.w	r2, r2, #32
 80044dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68da      	ldr	r2, [r3, #12]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695a      	ldr	r2, [r3, #20]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0201 	bic.w	r2, r2, #1
 80044fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2220      	movs	r2, #32
 8004502:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004510:	2b01      	cmp	r3, #1
 8004512:	d135      	bne.n	8004580 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	330c      	adds	r3, #12
 8004520:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	e853 3f00 	ldrex	r3, [r3]
 8004528:	613b      	str	r3, [r7, #16]
   return(result);
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	f023 0310 	bic.w	r3, r3, #16
 8004530:	627b      	str	r3, [r7, #36]	@ 0x24
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	330c      	adds	r3, #12
 8004538:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800453a:	623a      	str	r2, [r7, #32]
 800453c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453e:	69f9      	ldr	r1, [r7, #28]
 8004540:	6a3a      	ldr	r2, [r7, #32]
 8004542:	e841 2300 	strex	r3, r2, [r1]
 8004546:	61bb      	str	r3, [r7, #24]
   return(result);
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1e5      	bne.n	800451a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2b10      	cmp	r3, #16
 800455a:	d10a      	bne.n	8004572 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800455c:	2300      	movs	r3, #0
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004576:	4619      	mov	r1, r3
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7ff fc4c 	bl	8003e16 <HAL_UARTEx_RxEventCallback>
 800457e:	e002      	b.n	8004586 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7ff fc2d 	bl	8003de0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	e002      	b.n	8004590 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	e000      	b.n	8004590 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800458e:	2302      	movs	r3, #2
  }
}
 8004590:	4618      	mov	r0, r3
 8004592:	3730      	adds	r7, #48	@ 0x30
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68da      	ldr	r2, [r3, #12]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80045d2:	f023 030c 	bic.w	r3, r3, #12
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6812      	ldr	r2, [r2, #0]
 80045da:	68b9      	ldr	r1, [r7, #8]
 80045dc:	430b      	orrs	r3, r1
 80045de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	699a      	ldr	r2, [r3, #24]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a2c      	ldr	r2, [pc, #176]	@ (80046ac <UART_SetConfig+0x114>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d103      	bne.n	8004608 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004600:	f7ff f832 	bl	8003668 <HAL_RCC_GetPCLK2Freq>
 8004604:	60f8      	str	r0, [r7, #12]
 8004606:	e002      	b.n	800460e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004608:	f7ff f81a 	bl	8003640 <HAL_RCC_GetPCLK1Freq>
 800460c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	4613      	mov	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	009a      	lsls	r2, r3, #2
 8004618:	441a      	add	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	fbb2 f3f3 	udiv	r3, r2, r3
 8004624:	4a22      	ldr	r2, [pc, #136]	@ (80046b0 <UART_SetConfig+0x118>)
 8004626:	fba2 2303 	umull	r2, r3, r2, r3
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	0119      	lsls	r1, r3, #4
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4613      	mov	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	009a      	lsls	r2, r3, #2
 8004638:	441a      	add	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	fbb2 f2f3 	udiv	r2, r2, r3
 8004644:	4b1a      	ldr	r3, [pc, #104]	@ (80046b0 <UART_SetConfig+0x118>)
 8004646:	fba3 0302 	umull	r0, r3, r3, r2
 800464a:	095b      	lsrs	r3, r3, #5
 800464c:	2064      	movs	r0, #100	@ 0x64
 800464e:	fb00 f303 	mul.w	r3, r0, r3
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	011b      	lsls	r3, r3, #4
 8004656:	3332      	adds	r3, #50	@ 0x32
 8004658:	4a15      	ldr	r2, [pc, #84]	@ (80046b0 <UART_SetConfig+0x118>)
 800465a:	fba2 2303 	umull	r2, r3, r2, r3
 800465e:	095b      	lsrs	r3, r3, #5
 8004660:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004664:	4419      	add	r1, r3
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	4613      	mov	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	009a      	lsls	r2, r3, #2
 8004670:	441a      	add	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	fbb2 f2f3 	udiv	r2, r2, r3
 800467c:	4b0c      	ldr	r3, [pc, #48]	@ (80046b0 <UART_SetConfig+0x118>)
 800467e:	fba3 0302 	umull	r0, r3, r3, r2
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	2064      	movs	r0, #100	@ 0x64
 8004686:	fb00 f303 	mul.w	r3, r0, r3
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	3332      	adds	r3, #50	@ 0x32
 8004690:	4a07      	ldr	r2, [pc, #28]	@ (80046b0 <UART_SetConfig+0x118>)
 8004692:	fba2 2303 	umull	r2, r3, r2, r3
 8004696:	095b      	lsrs	r3, r3, #5
 8004698:	f003 020f 	and.w	r2, r3, #15
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	440a      	add	r2, r1
 80046a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046a4:	bf00      	nop
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40013800 	.word	0x40013800
 80046b0:	51eb851f 	.word	0x51eb851f

080046b4 <realloc>:
 80046b4:	4b02      	ldr	r3, [pc, #8]	@ (80046c0 <realloc+0xc>)
 80046b6:	460a      	mov	r2, r1
 80046b8:	4601      	mov	r1, r0
 80046ba:	6818      	ldr	r0, [r3, #0]
 80046bc:	f000 b802 	b.w	80046c4 <_realloc_r>
 80046c0:	2000001c 	.word	0x2000001c

080046c4 <_realloc_r>:
 80046c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046c8:	4680      	mov	r8, r0
 80046ca:	4615      	mov	r5, r2
 80046cc:	460c      	mov	r4, r1
 80046ce:	b921      	cbnz	r1, 80046da <_realloc_r+0x16>
 80046d0:	4611      	mov	r1, r2
 80046d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046d6:	f000 b8cf 	b.w	8004878 <_malloc_r>
 80046da:	b92a      	cbnz	r2, 80046e8 <_realloc_r+0x24>
 80046dc:	f000 f862 	bl	80047a4 <_free_r>
 80046e0:	2400      	movs	r4, #0
 80046e2:	4620      	mov	r0, r4
 80046e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046e8:	f000 f952 	bl	8004990 <_malloc_usable_size_r>
 80046ec:	4285      	cmp	r5, r0
 80046ee:	4606      	mov	r6, r0
 80046f0:	d802      	bhi.n	80046f8 <_realloc_r+0x34>
 80046f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80046f6:	d8f4      	bhi.n	80046e2 <_realloc_r+0x1e>
 80046f8:	4629      	mov	r1, r5
 80046fa:	4640      	mov	r0, r8
 80046fc:	f000 f8bc 	bl	8004878 <_malloc_r>
 8004700:	4607      	mov	r7, r0
 8004702:	2800      	cmp	r0, #0
 8004704:	d0ec      	beq.n	80046e0 <_realloc_r+0x1c>
 8004706:	42b5      	cmp	r5, r6
 8004708:	462a      	mov	r2, r5
 800470a:	4621      	mov	r1, r4
 800470c:	bf28      	it	cs
 800470e:	4632      	movcs	r2, r6
 8004710:	f000 f83a 	bl	8004788 <memcpy>
 8004714:	4621      	mov	r1, r4
 8004716:	4640      	mov	r0, r8
 8004718:	f000 f844 	bl	80047a4 <_free_r>
 800471c:	463c      	mov	r4, r7
 800471e:	e7e0      	b.n	80046e2 <_realloc_r+0x1e>

08004720 <memset>:
 8004720:	4603      	mov	r3, r0
 8004722:	4402      	add	r2, r0
 8004724:	4293      	cmp	r3, r2
 8004726:	d100      	bne.n	800472a <memset+0xa>
 8004728:	4770      	bx	lr
 800472a:	f803 1b01 	strb.w	r1, [r3], #1
 800472e:	e7f9      	b.n	8004724 <memset+0x4>

08004730 <__errno>:
 8004730:	4b01      	ldr	r3, [pc, #4]	@ (8004738 <__errno+0x8>)
 8004732:	6818      	ldr	r0, [r3, #0]
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	2000001c 	.word	0x2000001c

0800473c <__libc_init_array>:
 800473c:	b570      	push	{r4, r5, r6, lr}
 800473e:	2600      	movs	r6, #0
 8004740:	4d0c      	ldr	r5, [pc, #48]	@ (8004774 <__libc_init_array+0x38>)
 8004742:	4c0d      	ldr	r4, [pc, #52]	@ (8004778 <__libc_init_array+0x3c>)
 8004744:	1b64      	subs	r4, r4, r5
 8004746:	10a4      	asrs	r4, r4, #2
 8004748:	42a6      	cmp	r6, r4
 800474a:	d109      	bne.n	8004760 <__libc_init_array+0x24>
 800474c:	f000 f938 	bl	80049c0 <_init>
 8004750:	2600      	movs	r6, #0
 8004752:	4d0a      	ldr	r5, [pc, #40]	@ (800477c <__libc_init_array+0x40>)
 8004754:	4c0a      	ldr	r4, [pc, #40]	@ (8004780 <__libc_init_array+0x44>)
 8004756:	1b64      	subs	r4, r4, r5
 8004758:	10a4      	asrs	r4, r4, #2
 800475a:	42a6      	cmp	r6, r4
 800475c:	d105      	bne.n	800476a <__libc_init_array+0x2e>
 800475e:	bd70      	pop	{r4, r5, r6, pc}
 8004760:	f855 3b04 	ldr.w	r3, [r5], #4
 8004764:	4798      	blx	r3
 8004766:	3601      	adds	r6, #1
 8004768:	e7ee      	b.n	8004748 <__libc_init_array+0xc>
 800476a:	f855 3b04 	ldr.w	r3, [r5], #4
 800476e:	4798      	blx	r3
 8004770:	3601      	adds	r6, #1
 8004772:	e7f2      	b.n	800475a <__libc_init_array+0x1e>
 8004774:	08004c2c 	.word	0x08004c2c
 8004778:	08004c2c 	.word	0x08004c2c
 800477c:	08004c2c 	.word	0x08004c2c
 8004780:	08004c34 	.word	0x08004c34

08004784 <__retarget_lock_acquire_recursive>:
 8004784:	4770      	bx	lr

08004786 <__retarget_lock_release_recursive>:
 8004786:	4770      	bx	lr

08004788 <memcpy>:
 8004788:	440a      	add	r2, r1
 800478a:	4291      	cmp	r1, r2
 800478c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004790:	d100      	bne.n	8004794 <memcpy+0xc>
 8004792:	4770      	bx	lr
 8004794:	b510      	push	{r4, lr}
 8004796:	f811 4b01 	ldrb.w	r4, [r1], #1
 800479a:	4291      	cmp	r1, r2
 800479c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047a0:	d1f9      	bne.n	8004796 <memcpy+0xe>
 80047a2:	bd10      	pop	{r4, pc}

080047a4 <_free_r>:
 80047a4:	b538      	push	{r3, r4, r5, lr}
 80047a6:	4605      	mov	r5, r0
 80047a8:	2900      	cmp	r1, #0
 80047aa:	d040      	beq.n	800482e <_free_r+0x8a>
 80047ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047b0:	1f0c      	subs	r4, r1, #4
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	bfb8      	it	lt
 80047b6:	18e4      	addlt	r4, r4, r3
 80047b8:	f000 f8de 	bl	8004978 <__malloc_lock>
 80047bc:	4a1c      	ldr	r2, [pc, #112]	@ (8004830 <_free_r+0x8c>)
 80047be:	6813      	ldr	r3, [r2, #0]
 80047c0:	b933      	cbnz	r3, 80047d0 <_free_r+0x2c>
 80047c2:	6063      	str	r3, [r4, #4]
 80047c4:	6014      	str	r4, [r2, #0]
 80047c6:	4628      	mov	r0, r5
 80047c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047cc:	f000 b8da 	b.w	8004984 <__malloc_unlock>
 80047d0:	42a3      	cmp	r3, r4
 80047d2:	d908      	bls.n	80047e6 <_free_r+0x42>
 80047d4:	6820      	ldr	r0, [r4, #0]
 80047d6:	1821      	adds	r1, r4, r0
 80047d8:	428b      	cmp	r3, r1
 80047da:	bf01      	itttt	eq
 80047dc:	6819      	ldreq	r1, [r3, #0]
 80047de:	685b      	ldreq	r3, [r3, #4]
 80047e0:	1809      	addeq	r1, r1, r0
 80047e2:	6021      	streq	r1, [r4, #0]
 80047e4:	e7ed      	b.n	80047c2 <_free_r+0x1e>
 80047e6:	461a      	mov	r2, r3
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	b10b      	cbz	r3, 80047f0 <_free_r+0x4c>
 80047ec:	42a3      	cmp	r3, r4
 80047ee:	d9fa      	bls.n	80047e6 <_free_r+0x42>
 80047f0:	6811      	ldr	r1, [r2, #0]
 80047f2:	1850      	adds	r0, r2, r1
 80047f4:	42a0      	cmp	r0, r4
 80047f6:	d10b      	bne.n	8004810 <_free_r+0x6c>
 80047f8:	6820      	ldr	r0, [r4, #0]
 80047fa:	4401      	add	r1, r0
 80047fc:	1850      	adds	r0, r2, r1
 80047fe:	4283      	cmp	r3, r0
 8004800:	6011      	str	r1, [r2, #0]
 8004802:	d1e0      	bne.n	80047c6 <_free_r+0x22>
 8004804:	6818      	ldr	r0, [r3, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	4408      	add	r0, r1
 800480a:	6010      	str	r0, [r2, #0]
 800480c:	6053      	str	r3, [r2, #4]
 800480e:	e7da      	b.n	80047c6 <_free_r+0x22>
 8004810:	d902      	bls.n	8004818 <_free_r+0x74>
 8004812:	230c      	movs	r3, #12
 8004814:	602b      	str	r3, [r5, #0]
 8004816:	e7d6      	b.n	80047c6 <_free_r+0x22>
 8004818:	6820      	ldr	r0, [r4, #0]
 800481a:	1821      	adds	r1, r4, r0
 800481c:	428b      	cmp	r3, r1
 800481e:	bf01      	itttt	eq
 8004820:	6819      	ldreq	r1, [r3, #0]
 8004822:	685b      	ldreq	r3, [r3, #4]
 8004824:	1809      	addeq	r1, r1, r0
 8004826:	6021      	streq	r1, [r4, #0]
 8004828:	6063      	str	r3, [r4, #4]
 800482a:	6054      	str	r4, [r2, #4]
 800482c:	e7cb      	b.n	80047c6 <_free_r+0x22>
 800482e:	bd38      	pop	{r3, r4, r5, pc}
 8004830:	20000c48 	.word	0x20000c48

08004834 <sbrk_aligned>:
 8004834:	b570      	push	{r4, r5, r6, lr}
 8004836:	4e0f      	ldr	r6, [pc, #60]	@ (8004874 <sbrk_aligned+0x40>)
 8004838:	460c      	mov	r4, r1
 800483a:	6831      	ldr	r1, [r6, #0]
 800483c:	4605      	mov	r5, r0
 800483e:	b911      	cbnz	r1, 8004846 <sbrk_aligned+0x12>
 8004840:	f000 f8ae 	bl	80049a0 <_sbrk_r>
 8004844:	6030      	str	r0, [r6, #0]
 8004846:	4621      	mov	r1, r4
 8004848:	4628      	mov	r0, r5
 800484a:	f000 f8a9 	bl	80049a0 <_sbrk_r>
 800484e:	1c43      	adds	r3, r0, #1
 8004850:	d103      	bne.n	800485a <sbrk_aligned+0x26>
 8004852:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004856:	4620      	mov	r0, r4
 8004858:	bd70      	pop	{r4, r5, r6, pc}
 800485a:	1cc4      	adds	r4, r0, #3
 800485c:	f024 0403 	bic.w	r4, r4, #3
 8004860:	42a0      	cmp	r0, r4
 8004862:	d0f8      	beq.n	8004856 <sbrk_aligned+0x22>
 8004864:	1a21      	subs	r1, r4, r0
 8004866:	4628      	mov	r0, r5
 8004868:	f000 f89a 	bl	80049a0 <_sbrk_r>
 800486c:	3001      	adds	r0, #1
 800486e:	d1f2      	bne.n	8004856 <sbrk_aligned+0x22>
 8004870:	e7ef      	b.n	8004852 <sbrk_aligned+0x1e>
 8004872:	bf00      	nop
 8004874:	20000c44 	.word	0x20000c44

08004878 <_malloc_r>:
 8004878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800487c:	1ccd      	adds	r5, r1, #3
 800487e:	f025 0503 	bic.w	r5, r5, #3
 8004882:	3508      	adds	r5, #8
 8004884:	2d0c      	cmp	r5, #12
 8004886:	bf38      	it	cc
 8004888:	250c      	movcc	r5, #12
 800488a:	2d00      	cmp	r5, #0
 800488c:	4606      	mov	r6, r0
 800488e:	db01      	blt.n	8004894 <_malloc_r+0x1c>
 8004890:	42a9      	cmp	r1, r5
 8004892:	d904      	bls.n	800489e <_malloc_r+0x26>
 8004894:	230c      	movs	r3, #12
 8004896:	6033      	str	r3, [r6, #0]
 8004898:	2000      	movs	r0, #0
 800489a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800489e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004974 <_malloc_r+0xfc>
 80048a2:	f000 f869 	bl	8004978 <__malloc_lock>
 80048a6:	f8d8 3000 	ldr.w	r3, [r8]
 80048aa:	461c      	mov	r4, r3
 80048ac:	bb44      	cbnz	r4, 8004900 <_malloc_r+0x88>
 80048ae:	4629      	mov	r1, r5
 80048b0:	4630      	mov	r0, r6
 80048b2:	f7ff ffbf 	bl	8004834 <sbrk_aligned>
 80048b6:	1c43      	adds	r3, r0, #1
 80048b8:	4604      	mov	r4, r0
 80048ba:	d158      	bne.n	800496e <_malloc_r+0xf6>
 80048bc:	f8d8 4000 	ldr.w	r4, [r8]
 80048c0:	4627      	mov	r7, r4
 80048c2:	2f00      	cmp	r7, #0
 80048c4:	d143      	bne.n	800494e <_malloc_r+0xd6>
 80048c6:	2c00      	cmp	r4, #0
 80048c8:	d04b      	beq.n	8004962 <_malloc_r+0xea>
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	4639      	mov	r1, r7
 80048ce:	4630      	mov	r0, r6
 80048d0:	eb04 0903 	add.w	r9, r4, r3
 80048d4:	f000 f864 	bl	80049a0 <_sbrk_r>
 80048d8:	4581      	cmp	r9, r0
 80048da:	d142      	bne.n	8004962 <_malloc_r+0xea>
 80048dc:	6821      	ldr	r1, [r4, #0]
 80048de:	4630      	mov	r0, r6
 80048e0:	1a6d      	subs	r5, r5, r1
 80048e2:	4629      	mov	r1, r5
 80048e4:	f7ff ffa6 	bl	8004834 <sbrk_aligned>
 80048e8:	3001      	adds	r0, #1
 80048ea:	d03a      	beq.n	8004962 <_malloc_r+0xea>
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	442b      	add	r3, r5
 80048f0:	6023      	str	r3, [r4, #0]
 80048f2:	f8d8 3000 	ldr.w	r3, [r8]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	bb62      	cbnz	r2, 8004954 <_malloc_r+0xdc>
 80048fa:	f8c8 7000 	str.w	r7, [r8]
 80048fe:	e00f      	b.n	8004920 <_malloc_r+0xa8>
 8004900:	6822      	ldr	r2, [r4, #0]
 8004902:	1b52      	subs	r2, r2, r5
 8004904:	d420      	bmi.n	8004948 <_malloc_r+0xd0>
 8004906:	2a0b      	cmp	r2, #11
 8004908:	d917      	bls.n	800493a <_malloc_r+0xc2>
 800490a:	1961      	adds	r1, r4, r5
 800490c:	42a3      	cmp	r3, r4
 800490e:	6025      	str	r5, [r4, #0]
 8004910:	bf18      	it	ne
 8004912:	6059      	strne	r1, [r3, #4]
 8004914:	6863      	ldr	r3, [r4, #4]
 8004916:	bf08      	it	eq
 8004918:	f8c8 1000 	streq.w	r1, [r8]
 800491c:	5162      	str	r2, [r4, r5]
 800491e:	604b      	str	r3, [r1, #4]
 8004920:	4630      	mov	r0, r6
 8004922:	f000 f82f 	bl	8004984 <__malloc_unlock>
 8004926:	f104 000b 	add.w	r0, r4, #11
 800492a:	1d23      	adds	r3, r4, #4
 800492c:	f020 0007 	bic.w	r0, r0, #7
 8004930:	1ac2      	subs	r2, r0, r3
 8004932:	bf1c      	itt	ne
 8004934:	1a1b      	subne	r3, r3, r0
 8004936:	50a3      	strne	r3, [r4, r2]
 8004938:	e7af      	b.n	800489a <_malloc_r+0x22>
 800493a:	6862      	ldr	r2, [r4, #4]
 800493c:	42a3      	cmp	r3, r4
 800493e:	bf0c      	ite	eq
 8004940:	f8c8 2000 	streq.w	r2, [r8]
 8004944:	605a      	strne	r2, [r3, #4]
 8004946:	e7eb      	b.n	8004920 <_malloc_r+0xa8>
 8004948:	4623      	mov	r3, r4
 800494a:	6864      	ldr	r4, [r4, #4]
 800494c:	e7ae      	b.n	80048ac <_malloc_r+0x34>
 800494e:	463c      	mov	r4, r7
 8004950:	687f      	ldr	r7, [r7, #4]
 8004952:	e7b6      	b.n	80048c2 <_malloc_r+0x4a>
 8004954:	461a      	mov	r2, r3
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	42a3      	cmp	r3, r4
 800495a:	d1fb      	bne.n	8004954 <_malloc_r+0xdc>
 800495c:	2300      	movs	r3, #0
 800495e:	6053      	str	r3, [r2, #4]
 8004960:	e7de      	b.n	8004920 <_malloc_r+0xa8>
 8004962:	230c      	movs	r3, #12
 8004964:	4630      	mov	r0, r6
 8004966:	6033      	str	r3, [r6, #0]
 8004968:	f000 f80c 	bl	8004984 <__malloc_unlock>
 800496c:	e794      	b.n	8004898 <_malloc_r+0x20>
 800496e:	6005      	str	r5, [r0, #0]
 8004970:	e7d6      	b.n	8004920 <_malloc_r+0xa8>
 8004972:	bf00      	nop
 8004974:	20000c48 	.word	0x20000c48

08004978 <__malloc_lock>:
 8004978:	4801      	ldr	r0, [pc, #4]	@ (8004980 <__malloc_lock+0x8>)
 800497a:	f7ff bf03 	b.w	8004784 <__retarget_lock_acquire_recursive>
 800497e:	bf00      	nop
 8004980:	20000c40 	.word	0x20000c40

08004984 <__malloc_unlock>:
 8004984:	4801      	ldr	r0, [pc, #4]	@ (800498c <__malloc_unlock+0x8>)
 8004986:	f7ff befe 	b.w	8004786 <__retarget_lock_release_recursive>
 800498a:	bf00      	nop
 800498c:	20000c40 	.word	0x20000c40

08004990 <_malloc_usable_size_r>:
 8004990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004994:	1f18      	subs	r0, r3, #4
 8004996:	2b00      	cmp	r3, #0
 8004998:	bfbc      	itt	lt
 800499a:	580b      	ldrlt	r3, [r1, r0]
 800499c:	18c0      	addlt	r0, r0, r3
 800499e:	4770      	bx	lr

080049a0 <_sbrk_r>:
 80049a0:	b538      	push	{r3, r4, r5, lr}
 80049a2:	2300      	movs	r3, #0
 80049a4:	4d05      	ldr	r5, [pc, #20]	@ (80049bc <_sbrk_r+0x1c>)
 80049a6:	4604      	mov	r4, r0
 80049a8:	4608      	mov	r0, r1
 80049aa:	602b      	str	r3, [r5, #0]
 80049ac:	f7fd fb22 	bl	8001ff4 <_sbrk>
 80049b0:	1c43      	adds	r3, r0, #1
 80049b2:	d102      	bne.n	80049ba <_sbrk_r+0x1a>
 80049b4:	682b      	ldr	r3, [r5, #0]
 80049b6:	b103      	cbz	r3, 80049ba <_sbrk_r+0x1a>
 80049b8:	6023      	str	r3, [r4, #0]
 80049ba:	bd38      	pop	{r3, r4, r5, pc}
 80049bc:	20000c3c 	.word	0x20000c3c

080049c0 <_init>:
 80049c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c2:	bf00      	nop
 80049c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049c6:	bc08      	pop	{r3}
 80049c8:	469e      	mov	lr, r3
 80049ca:	4770      	bx	lr

080049cc <_fini>:
 80049cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ce:	bf00      	nop
 80049d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049d2:	bc08      	pop	{r3}
 80049d4:	469e      	mov	lr, r3
 80049d6:	4770      	bx	lr
