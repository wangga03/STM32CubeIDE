
VL53L.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062bc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080063cc  080063cc  000073cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063f8  080063f8  00008010  2**0
                  CONTENTS
  4 .ARM          00000000  080063f8  080063f8  00008010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080063f8  080063f8  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063f8  080063f8  000073f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080063fc  080063fc  000073fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006400  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000010  08006410  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08006410  0000813c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c6ff  00000000  00000000  00008039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002167  00000000  00000000  00014738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  000168a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ae0  00000000  00000000  00017690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017eec  00000000  00000000  00018170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010074  00000000  00000000  0003005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b117  00000000  00000000  000400d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb1e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cf8  00000000  00000000  000cb22c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000cef24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080063b4 	.word	0x080063b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080063b4 	.word	0x080063b4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__gedf2>:
 80004c8:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80004cc:	e006      	b.n	80004dc <__cmpdf2+0x4>
 80004ce:	bf00      	nop

080004d0 <__ledf2>:
 80004d0:	f04f 0c01 	mov.w	ip, #1
 80004d4:	e002      	b.n	80004dc <__cmpdf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__cmpdf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004ec:	bf18      	it	ne
 80004ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004f2:	d01b      	beq.n	800052c <__cmpdf2+0x54>
 80004f4:	b001      	add	sp, #4
 80004f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004fa:	bf0c      	ite	eq
 80004fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000500:	ea91 0f03 	teqne	r1, r3
 8000504:	bf02      	ittt	eq
 8000506:	ea90 0f02 	teqeq	r0, r2
 800050a:	2000      	moveq	r0, #0
 800050c:	4770      	bxeq	lr
 800050e:	f110 0f00 	cmn.w	r0, #0
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf58      	it	pl
 8000518:	4299      	cmppl	r1, r3
 800051a:	bf08      	it	eq
 800051c:	4290      	cmpeq	r0, r2
 800051e:	bf2c      	ite	cs
 8000520:	17d8      	asrcs	r0, r3, #31
 8000522:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000526:	f040 0001 	orr.w	r0, r0, #1
 800052a:	4770      	bx	lr
 800052c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000534:	d102      	bne.n	800053c <__cmpdf2+0x64>
 8000536:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800053a:	d107      	bne.n	800054c <__cmpdf2+0x74>
 800053c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d1d6      	bne.n	80004f4 <__cmpdf2+0x1c>
 8000546:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800054a:	d0d3      	beq.n	80004f4 <__cmpdf2+0x1c>
 800054c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <__aeabi_cdrcmple>:
 8000554:	4684      	mov	ip, r0
 8000556:	4610      	mov	r0, r2
 8000558:	4662      	mov	r2, ip
 800055a:	468c      	mov	ip, r1
 800055c:	4619      	mov	r1, r3
 800055e:	4663      	mov	r3, ip
 8000560:	e000      	b.n	8000564 <__aeabi_cdcmpeq>
 8000562:	bf00      	nop

08000564 <__aeabi_cdcmpeq>:
 8000564:	b501      	push	{r0, lr}
 8000566:	f7ff ffb7 	bl	80004d8 <__cmpdf2>
 800056a:	2800      	cmp	r0, #0
 800056c:	bf48      	it	mi
 800056e:	f110 0f00 	cmnmi.w	r0, #0
 8000572:	bd01      	pop	{r0, pc}

08000574 <__aeabi_dcmpeq>:
 8000574:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000578:	f7ff fff4 	bl	8000564 <__aeabi_cdcmpeq>
 800057c:	bf0c      	ite	eq
 800057e:	2001      	moveq	r0, #1
 8000580:	2000      	movne	r0, #0
 8000582:	f85d fb08 	ldr.w	pc, [sp], #8
 8000586:	bf00      	nop

08000588 <__aeabi_dcmplt>:
 8000588:	f84d ed08 	str.w	lr, [sp, #-8]!
 800058c:	f7ff ffea 	bl	8000564 <__aeabi_cdcmpeq>
 8000590:	bf34      	ite	cc
 8000592:	2001      	movcc	r0, #1
 8000594:	2000      	movcs	r0, #0
 8000596:	f85d fb08 	ldr.w	pc, [sp], #8
 800059a:	bf00      	nop

0800059c <__aeabi_dcmple>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff ffe0 	bl	8000564 <__aeabi_cdcmpeq>
 80005a4:	bf94      	ite	ls
 80005a6:	2001      	movls	r0, #1
 80005a8:	2000      	movhi	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmpge>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffce 	bl	8000554 <__aeabi_cdrcmple>
 80005b8:	bf94      	ite	ls
 80005ba:	2001      	movls	r0, #1
 80005bc:	2000      	movhi	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmpgt>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffc4 	bl	8000554 <__aeabi_cdrcmple>
 80005cc:	bf34      	ite	cc
 80005ce:	2001      	movcc	r0, #1
 80005d0:	2000      	movcs	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <__aeabi_frsub>:
 80005d8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80005dc:	e002      	b.n	80005e4 <__addsf3>
 80005de:	bf00      	nop

080005e0 <__aeabi_fsub>:
 80005e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080005e4 <__addsf3>:
 80005e4:	0042      	lsls	r2, r0, #1
 80005e6:	bf1f      	itttt	ne
 80005e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80005ec:	ea92 0f03 	teqne	r2, r3
 80005f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80005f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005f8:	d06a      	beq.n	80006d0 <__addsf3+0xec>
 80005fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80005fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000602:	bfc1      	itttt	gt
 8000604:	18d2      	addgt	r2, r2, r3
 8000606:	4041      	eorgt	r1, r0
 8000608:	4048      	eorgt	r0, r1
 800060a:	4041      	eorgt	r1, r0
 800060c:	bfb8      	it	lt
 800060e:	425b      	neglt	r3, r3
 8000610:	2b19      	cmp	r3, #25
 8000612:	bf88      	it	hi
 8000614:	4770      	bxhi	lr
 8000616:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800061a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800061e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000622:	bf18      	it	ne
 8000624:	4240      	negne	r0, r0
 8000626:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800062a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800062e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000632:	bf18      	it	ne
 8000634:	4249      	negne	r1, r1
 8000636:	ea92 0f03 	teq	r2, r3
 800063a:	d03f      	beq.n	80006bc <__addsf3+0xd8>
 800063c:	f1a2 0201 	sub.w	r2, r2, #1
 8000640:	fa41 fc03 	asr.w	ip, r1, r3
 8000644:	eb10 000c 	adds.w	r0, r0, ip
 8000648:	f1c3 0320 	rsb	r3, r3, #32
 800064c:	fa01 f103 	lsl.w	r1, r1, r3
 8000650:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000654:	d502      	bpl.n	800065c <__addsf3+0x78>
 8000656:	4249      	negs	r1, r1
 8000658:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800065c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000660:	d313      	bcc.n	800068a <__addsf3+0xa6>
 8000662:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000666:	d306      	bcc.n	8000676 <__addsf3+0x92>
 8000668:	0840      	lsrs	r0, r0, #1
 800066a:	ea4f 0131 	mov.w	r1, r1, rrx
 800066e:	f102 0201 	add.w	r2, r2, #1
 8000672:	2afe      	cmp	r2, #254	@ 0xfe
 8000674:	d251      	bcs.n	800071a <__addsf3+0x136>
 8000676:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800067a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800067e:	bf08      	it	eq
 8000680:	f020 0001 	biceq.w	r0, r0, #1
 8000684:	ea40 0003 	orr.w	r0, r0, r3
 8000688:	4770      	bx	lr
 800068a:	0049      	lsls	r1, r1, #1
 800068c:	eb40 0000 	adc.w	r0, r0, r0
 8000690:	3a01      	subs	r2, #1
 8000692:	bf28      	it	cs
 8000694:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000698:	d2ed      	bcs.n	8000676 <__addsf3+0x92>
 800069a:	fab0 fc80 	clz	ip, r0
 800069e:	f1ac 0c08 	sub.w	ip, ip, #8
 80006a2:	ebb2 020c 	subs.w	r2, r2, ip
 80006a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80006aa:	bfaa      	itet	ge
 80006ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80006b0:	4252      	neglt	r2, r2
 80006b2:	4318      	orrge	r0, r3
 80006b4:	bfbc      	itt	lt
 80006b6:	40d0      	lsrlt	r0, r2
 80006b8:	4318      	orrlt	r0, r3
 80006ba:	4770      	bx	lr
 80006bc:	f092 0f00 	teq	r2, #0
 80006c0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80006c4:	bf06      	itte	eq
 80006c6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80006ca:	3201      	addeq	r2, #1
 80006cc:	3b01      	subne	r3, #1
 80006ce:	e7b5      	b.n	800063c <__addsf3+0x58>
 80006d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006d8:	bf18      	it	ne
 80006da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006de:	d021      	beq.n	8000724 <__addsf3+0x140>
 80006e0:	ea92 0f03 	teq	r2, r3
 80006e4:	d004      	beq.n	80006f0 <__addsf3+0x10c>
 80006e6:	f092 0f00 	teq	r2, #0
 80006ea:	bf08      	it	eq
 80006ec:	4608      	moveq	r0, r1
 80006ee:	4770      	bx	lr
 80006f0:	ea90 0f01 	teq	r0, r1
 80006f4:	bf1c      	itt	ne
 80006f6:	2000      	movne	r0, #0
 80006f8:	4770      	bxne	lr
 80006fa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80006fe:	d104      	bne.n	800070a <__addsf3+0x126>
 8000700:	0040      	lsls	r0, r0, #1
 8000702:	bf28      	it	cs
 8000704:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000708:	4770      	bx	lr
 800070a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800070e:	bf3c      	itt	cc
 8000710:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000714:	4770      	bxcc	lr
 8000716:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800071a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800071e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000722:	4770      	bx	lr
 8000724:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000728:	bf16      	itet	ne
 800072a:	4608      	movne	r0, r1
 800072c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000730:	4601      	movne	r1, r0
 8000732:	0242      	lsls	r2, r0, #9
 8000734:	bf06      	itte	eq
 8000736:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800073a:	ea90 0f01 	teqeq	r0, r1
 800073e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000742:	4770      	bx	lr

08000744 <__aeabi_ui2f>:
 8000744:	f04f 0300 	mov.w	r3, #0
 8000748:	e004      	b.n	8000754 <__aeabi_i2f+0x8>
 800074a:	bf00      	nop

0800074c <__aeabi_i2f>:
 800074c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000750:	bf48      	it	mi
 8000752:	4240      	negmi	r0, r0
 8000754:	ea5f 0c00 	movs.w	ip, r0
 8000758:	bf08      	it	eq
 800075a:	4770      	bxeq	lr
 800075c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000760:	4601      	mov	r1, r0
 8000762:	f04f 0000 	mov.w	r0, #0
 8000766:	e01c      	b.n	80007a2 <__aeabi_l2f+0x2a>

08000768 <__aeabi_ul2f>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	f04f 0300 	mov.w	r3, #0
 8000774:	e00a      	b.n	800078c <__aeabi_l2f+0x14>
 8000776:	bf00      	nop

08000778 <__aeabi_l2f>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000784:	d502      	bpl.n	800078c <__aeabi_l2f+0x14>
 8000786:	4240      	negs	r0, r0
 8000788:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078c:	ea5f 0c01 	movs.w	ip, r1
 8000790:	bf02      	ittt	eq
 8000792:	4684      	moveq	ip, r0
 8000794:	4601      	moveq	r1, r0
 8000796:	2000      	moveq	r0, #0
 8000798:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 800079c:	bf08      	it	eq
 800079e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80007a2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80007a6:	fabc f28c 	clz	r2, ip
 80007aa:	3a08      	subs	r2, #8
 80007ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80007b0:	db10      	blt.n	80007d4 <__aeabi_l2f+0x5c>
 80007b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80007b6:	4463      	add	r3, ip
 80007b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80007bc:	f1c2 0220 	rsb	r2, r2, #32
 80007c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80007c4:	fa20 f202 	lsr.w	r2, r0, r2
 80007c8:	eb43 0002 	adc.w	r0, r3, r2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f102 0220 	add.w	r2, r2, #32
 80007d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80007dc:	f1c2 0220 	rsb	r2, r2, #32
 80007e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80007e4:	fa21 f202 	lsr.w	r2, r1, r2
 80007e8:	eb43 0002 	adc.w	r0, r3, r2
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007f2:	4770      	bx	lr

080007f4 <__aeabi_fmul>:
 80007f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80007fc:	bf1e      	ittt	ne
 80007fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000802:	ea92 0f0c 	teqne	r2, ip
 8000806:	ea93 0f0c 	teqne	r3, ip
 800080a:	d06f      	beq.n	80008ec <__aeabi_fmul+0xf8>
 800080c:	441a      	add	r2, r3
 800080e:	ea80 0c01 	eor.w	ip, r0, r1
 8000812:	0240      	lsls	r0, r0, #9
 8000814:	bf18      	it	ne
 8000816:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800081a:	d01e      	beq.n	800085a <__aeabi_fmul+0x66>
 800081c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000820:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000824:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000828:	fba0 3101 	umull	r3, r1, r0, r1
 800082c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000830:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000834:	bf3e      	ittt	cc
 8000836:	0049      	lslcc	r1, r1, #1
 8000838:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800083c:	005b      	lslcc	r3, r3, #1
 800083e:	ea40 0001 	orr.w	r0, r0, r1
 8000842:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000846:	2afd      	cmp	r2, #253	@ 0xfd
 8000848:	d81d      	bhi.n	8000886 <__aeabi_fmul+0x92>
 800084a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800084e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000852:	bf08      	it	eq
 8000854:	f020 0001 	biceq.w	r0, r0, #1
 8000858:	4770      	bx	lr
 800085a:	f090 0f00 	teq	r0, #0
 800085e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000862:	bf08      	it	eq
 8000864:	0249      	lsleq	r1, r1, #9
 8000866:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800086a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800086e:	3a7f      	subs	r2, #127	@ 0x7f
 8000870:	bfc2      	ittt	gt
 8000872:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000876:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800087a:	4770      	bxgt	lr
 800087c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000880:	f04f 0300 	mov.w	r3, #0
 8000884:	3a01      	subs	r2, #1
 8000886:	dc5d      	bgt.n	8000944 <__aeabi_fmul+0x150>
 8000888:	f112 0f19 	cmn.w	r2, #25
 800088c:	bfdc      	itt	le
 800088e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000892:	4770      	bxle	lr
 8000894:	f1c2 0200 	rsb	r2, r2, #0
 8000898:	0041      	lsls	r1, r0, #1
 800089a:	fa21 f102 	lsr.w	r1, r1, r2
 800089e:	f1c2 0220 	rsb	r2, r2, #32
 80008a2:	fa00 fc02 	lsl.w	ip, r0, r2
 80008a6:	ea5f 0031 	movs.w	r0, r1, rrx
 80008aa:	f140 0000 	adc.w	r0, r0, #0
 80008ae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80008b2:	bf08      	it	eq
 80008b4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008b8:	4770      	bx	lr
 80008ba:	f092 0f00 	teq	r2, #0
 80008be:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80008c2:	bf02      	ittt	eq
 80008c4:	0040      	lsleq	r0, r0, #1
 80008c6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80008ca:	3a01      	subeq	r2, #1
 80008cc:	d0f9      	beq.n	80008c2 <__aeabi_fmul+0xce>
 80008ce:	ea40 000c 	orr.w	r0, r0, ip
 80008d2:	f093 0f00 	teq	r3, #0
 80008d6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008da:	bf02      	ittt	eq
 80008dc:	0049      	lsleq	r1, r1, #1
 80008de:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80008e2:	3b01      	subeq	r3, #1
 80008e4:	d0f9      	beq.n	80008da <__aeabi_fmul+0xe6>
 80008e6:	ea41 010c 	orr.w	r1, r1, ip
 80008ea:	e78f      	b.n	800080c <__aeabi_fmul+0x18>
 80008ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80008f0:	ea92 0f0c 	teq	r2, ip
 80008f4:	bf18      	it	ne
 80008f6:	ea93 0f0c 	teqne	r3, ip
 80008fa:	d00a      	beq.n	8000912 <__aeabi_fmul+0x11e>
 80008fc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000900:	bf18      	it	ne
 8000902:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000906:	d1d8      	bne.n	80008ba <__aeabi_fmul+0xc6>
 8000908:	ea80 0001 	eor.w	r0, r0, r1
 800090c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000910:	4770      	bx	lr
 8000912:	f090 0f00 	teq	r0, #0
 8000916:	bf17      	itett	ne
 8000918:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 800091c:	4608      	moveq	r0, r1
 800091e:	f091 0f00 	teqne	r1, #0
 8000922:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000926:	d014      	beq.n	8000952 <__aeabi_fmul+0x15e>
 8000928:	ea92 0f0c 	teq	r2, ip
 800092c:	d101      	bne.n	8000932 <__aeabi_fmul+0x13e>
 800092e:	0242      	lsls	r2, r0, #9
 8000930:	d10f      	bne.n	8000952 <__aeabi_fmul+0x15e>
 8000932:	ea93 0f0c 	teq	r3, ip
 8000936:	d103      	bne.n	8000940 <__aeabi_fmul+0x14c>
 8000938:	024b      	lsls	r3, r1, #9
 800093a:	bf18      	it	ne
 800093c:	4608      	movne	r0, r1
 800093e:	d108      	bne.n	8000952 <__aeabi_fmul+0x15e>
 8000940:	ea80 0001 	eor.w	r0, r0, r1
 8000944:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000948:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800094c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000950:	4770      	bx	lr
 8000952:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000956:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800095a:	4770      	bx	lr

0800095c <__aeabi_fdiv>:
 800095c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000960:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000964:	bf1e      	ittt	ne
 8000966:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800096a:	ea92 0f0c 	teqne	r2, ip
 800096e:	ea93 0f0c 	teqne	r3, ip
 8000972:	d069      	beq.n	8000a48 <__aeabi_fdiv+0xec>
 8000974:	eba2 0203 	sub.w	r2, r2, r3
 8000978:	ea80 0c01 	eor.w	ip, r0, r1
 800097c:	0249      	lsls	r1, r1, #9
 800097e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000982:	d037      	beq.n	80009f4 <__aeabi_fdiv+0x98>
 8000984:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000988:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800098c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000990:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000994:	428b      	cmp	r3, r1
 8000996:	bf38      	it	cc
 8000998:	005b      	lslcc	r3, r3, #1
 800099a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800099e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 80009a2:	428b      	cmp	r3, r1
 80009a4:	bf24      	itt	cs
 80009a6:	1a5b      	subcs	r3, r3, r1
 80009a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80009ac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80009b0:	bf24      	itt	cs
 80009b2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80009b6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009ba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80009be:	bf24      	itt	cs
 80009c0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80009c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80009cc:	bf24      	itt	cs
 80009ce:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80009d2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d6:	011b      	lsls	r3, r3, #4
 80009d8:	bf18      	it	ne
 80009da:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80009de:	d1e0      	bne.n	80009a2 <__aeabi_fdiv+0x46>
 80009e0:	2afd      	cmp	r2, #253	@ 0xfd
 80009e2:	f63f af50 	bhi.w	8000886 <__aeabi_fmul+0x92>
 80009e6:	428b      	cmp	r3, r1
 80009e8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80009f8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009fc:	327f      	adds	r2, #127	@ 0x7f
 80009fe:	bfc2      	ittt	gt
 8000a00:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a08:	4770      	bxgt	lr
 8000a0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a0e:	f04f 0300 	mov.w	r3, #0
 8000a12:	3a01      	subs	r2, #1
 8000a14:	e737      	b.n	8000886 <__aeabi_fmul+0x92>
 8000a16:	f092 0f00 	teq	r2, #0
 8000a1a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000a1e:	bf02      	ittt	eq
 8000a20:	0040      	lsleq	r0, r0, #1
 8000a22:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000a26:	3a01      	subeq	r2, #1
 8000a28:	d0f9      	beq.n	8000a1e <__aeabi_fdiv+0xc2>
 8000a2a:	ea40 000c 	orr.w	r0, r0, ip
 8000a2e:	f093 0f00 	teq	r3, #0
 8000a32:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a36:	bf02      	ittt	eq
 8000a38:	0049      	lsleq	r1, r1, #1
 8000a3a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000a3e:	3b01      	subeq	r3, #1
 8000a40:	d0f9      	beq.n	8000a36 <__aeabi_fdiv+0xda>
 8000a42:	ea41 010c 	orr.w	r1, r1, ip
 8000a46:	e795      	b.n	8000974 <__aeabi_fdiv+0x18>
 8000a48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a4c:	ea92 0f0c 	teq	r2, ip
 8000a50:	d108      	bne.n	8000a64 <__aeabi_fdiv+0x108>
 8000a52:	0242      	lsls	r2, r0, #9
 8000a54:	f47f af7d 	bne.w	8000952 <__aeabi_fmul+0x15e>
 8000a58:	ea93 0f0c 	teq	r3, ip
 8000a5c:	f47f af70 	bne.w	8000940 <__aeabi_fmul+0x14c>
 8000a60:	4608      	mov	r0, r1
 8000a62:	e776      	b.n	8000952 <__aeabi_fmul+0x15e>
 8000a64:	ea93 0f0c 	teq	r3, ip
 8000a68:	d104      	bne.n	8000a74 <__aeabi_fdiv+0x118>
 8000a6a:	024b      	lsls	r3, r1, #9
 8000a6c:	f43f af4c 	beq.w	8000908 <__aeabi_fmul+0x114>
 8000a70:	4608      	mov	r0, r1
 8000a72:	e76e      	b.n	8000952 <__aeabi_fmul+0x15e>
 8000a74:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a78:	bf18      	it	ne
 8000a7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000a7e:	d1ca      	bne.n	8000a16 <__aeabi_fdiv+0xba>
 8000a80:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000a84:	f47f af5c 	bne.w	8000940 <__aeabi_fmul+0x14c>
 8000a88:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000a8c:	f47f af3c 	bne.w	8000908 <__aeabi_fmul+0x114>
 8000a90:	e75f      	b.n	8000952 <__aeabi_fmul+0x15e>
 8000a92:	bf00      	nop

08000a94 <__gesf2>:
 8000a94:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a98:	e006      	b.n	8000aa8 <__cmpsf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__lesf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	e002      	b.n	8000aa8 <__cmpsf2+0x4>
 8000aa2:	bf00      	nop

08000aa4 <__cmpsf2>:
 8000aa4:	f04f 0c01 	mov.w	ip, #1
 8000aa8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ab0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ab4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ab8:	bf18      	it	ne
 8000aba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abe:	d011      	beq.n	8000ae4 <__cmpsf2+0x40>
 8000ac0:	b001      	add	sp, #4
 8000ac2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ac6:	bf18      	it	ne
 8000ac8:	ea90 0f01 	teqne	r0, r1
 8000acc:	bf58      	it	pl
 8000ace:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ad2:	bf88      	it	hi
 8000ad4:	17c8      	asrhi	r0, r1, #31
 8000ad6:	bf38      	it	cc
 8000ad8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000adc:	bf18      	it	ne
 8000ade:	f040 0001 	orrne.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ae8:	d102      	bne.n	8000af0 <__cmpsf2+0x4c>
 8000aea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000aee:	d105      	bne.n	8000afc <__cmpsf2+0x58>
 8000af0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000af4:	d1e4      	bne.n	8000ac0 <__cmpsf2+0x1c>
 8000af6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000afa:	d0e1      	beq.n	8000ac0 <__cmpsf2+0x1c>
 8000afc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_cfrcmple>:
 8000b04:	4684      	mov	ip, r0
 8000b06:	4608      	mov	r0, r1
 8000b08:	4661      	mov	r1, ip
 8000b0a:	e7ff      	b.n	8000b0c <__aeabi_cfcmpeq>

08000b0c <__aeabi_cfcmpeq>:
 8000b0c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b0e:	f7ff ffc9 	bl	8000aa4 <__cmpsf2>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	bf48      	it	mi
 8000b16:	f110 0f00 	cmnmi.w	r0, #0
 8000b1a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b1c <__aeabi_fcmpeq>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff fff4 	bl	8000b0c <__aeabi_cfcmpeq>
 8000b24:	bf0c      	ite	eq
 8000b26:	2001      	moveq	r0, #1
 8000b28:	2000      	movne	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fcmplt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffea 	bl	8000b0c <__aeabi_cfcmpeq>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_fcmple>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffe0 	bl	8000b0c <__aeabi_cfcmpeq>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_fcmpge>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffd2 	bl	8000b04 <__aeabi_cfrcmple>
 8000b60:	bf94      	ite	ls
 8000b62:	2001      	movls	r0, #1
 8000b64:	2000      	movhi	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_fcmpgt>:
 8000b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b70:	f7ff ffc8 	bl	8000b04 <__aeabi_cfrcmple>
 8000b74:	bf34      	ite	cc
 8000b76:	2001      	movcc	r0, #1
 8000b78:	2000      	movcs	r0, #0
 8000b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7e:	bf00      	nop

08000b80 <__aeabi_f2uiz>:
 8000b80:	0042      	lsls	r2, r0, #1
 8000b82:	d20e      	bcs.n	8000ba2 <__aeabi_f2uiz+0x22>
 8000b84:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000b88:	d30b      	bcc.n	8000ba2 <__aeabi_f2uiz+0x22>
 8000b8a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b8e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b92:	d409      	bmi.n	8000ba8 <__aeabi_f2uiz+0x28>
 8000b94:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b98:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9c:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr
 8000ba8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000bac:	d101      	bne.n	8000bb2 <__aeabi_f2uiz+0x32>
 8000bae:	0242      	lsls	r2, r0, #9
 8000bb0:	d102      	bne.n	8000bb8 <__aeabi_f2uiz+0x38>
 8000bb2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <writeReg>:

//---------------------------------------------------------
// I2C communication Functions
//---------------------------------------------------------
// Write an 8-bit register
void writeReg(uint8_t reg, uint8_t value) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af04      	add	r7, sp, #16
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	460a      	mov	r2, r1
 8000bca:	71fb      	strb	r3, [r7, #7]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	71bb      	strb	r3, [r7, #6]

  msgBuffer[0] = value; // Assign the value to the buffer.
 8000bd0:	4a0c      	ldr	r2, [pc, #48]	@ (8000c04 <writeReg+0x44>)
 8000bd2:	79bb      	ldrb	r3, [r7, #6]
 8000bd4:	7013      	strb	r3, [r2, #0]
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 1, I2C_TIMEOUT);
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c08 <writeReg+0x48>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	4619      	mov	r1, r3
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	2364      	movs	r3, #100	@ 0x64
 8000be2:	9302      	str	r3, [sp, #8]
 8000be4:	2301      	movs	r3, #1
 8000be6:	9301      	str	r3, [sp, #4]
 8000be8:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <writeReg+0x44>)
 8000bea:	9300      	str	r3, [sp, #0]
 8000bec:	2301      	movs	r3, #1
 8000bee:	4807      	ldr	r0, [pc, #28]	@ (8000c0c <writeReg+0x4c>)
 8000bf0:	f002 f80e 	bl	8002c10 <HAL_I2C_Mem_Write>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	4b05      	ldr	r3, [pc, #20]	@ (8000c10 <writeReg+0x50>)
 8000bfa:	701a      	strb	r2, [r3, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	2000008c 	.word	0x2000008c
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	20000038 	.word	0x20000038
 8000c10:	20000090 	.word	0x20000090

08000c14 <writeReg16Bit>:

// Write a 16-bit register
void writeReg16Bit(uint8_t reg, uint16_t value){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af04      	add	r7, sp, #16
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	460a      	mov	r2, r1
 8000c1e:	71fb      	strb	r3, [r7, #7]
 8000c20:	4613      	mov	r3, r2
 8000c22:	80bb      	strh	r3, [r7, #4]

  memcpy(msgBuffer, &value, 2); // Assign the value to the buffer.
 8000c24:	88ba      	ldrh	r2, [r7, #4]
 8000c26:	4b0c      	ldr	r3, [pc, #48]	@ (8000c58 <writeReg16Bit+0x44>)
 8000c28:	801a      	strh	r2, [r3, #0]
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 2, I2C_TIMEOUT);
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c5c <writeReg16Bit+0x48>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	4619      	mov	r1, r3
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	2364      	movs	r3, #100	@ 0x64
 8000c36:	9302      	str	r3, [sp, #8]
 8000c38:	2302      	movs	r3, #2
 8000c3a:	9301      	str	r3, [sp, #4]
 8000c3c:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <writeReg16Bit+0x44>)
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	2301      	movs	r3, #1
 8000c42:	4807      	ldr	r0, [pc, #28]	@ (8000c60 <writeReg16Bit+0x4c>)
 8000c44:	f001 ffe4 	bl	8002c10 <HAL_I2C_Mem_Write>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	4b05      	ldr	r3, [pc, #20]	@ (8000c64 <writeReg16Bit+0x50>)
 8000c4e:	701a      	strb	r2, [r3, #0]
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	2000008c 	.word	0x2000008c
 8000c5c:	20000000 	.word	0x20000000
 8000c60:	20000038 	.word	0x20000038
 8000c64:	20000090 	.word	0x20000090

08000c68 <readReg>:
  memcpy(msgBuffer, &value, 4); // Assign the value to the buffer.
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 4, I2C_TIMEOUT);
}

// Read an 8-bit register
uint8_t readReg(uint8_t reg) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af04      	add	r7, sp, #16
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
  uint8_t value;

  i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, msgBuffer, 1, I2C_TIMEOUT);
 8000c72:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb0 <readReg+0x48>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	f043 0301 	orr.w	r3, r3, #1
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	2364      	movs	r3, #100	@ 0x64
 8000c84:	9302      	str	r3, [sp, #8]
 8000c86:	2301      	movs	r3, #1
 8000c88:	9301      	str	r3, [sp, #4]
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb4 <readReg+0x4c>)
 8000c8c:	9300      	str	r3, [sp, #0]
 8000c8e:	2301      	movs	r3, #1
 8000c90:	4809      	ldr	r0, [pc, #36]	@ (8000cb8 <readReg+0x50>)
 8000c92:	f002 f8b7 	bl	8002e04 <HAL_I2C_Mem_Read>
 8000c96:	4603      	mov	r3, r0
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <readReg+0x54>)
 8000c9c:	701a      	strb	r2, [r3, #0]
  value = msgBuffer[0];
 8000c9e:	4b05      	ldr	r3, [pc, #20]	@ (8000cb4 <readReg+0x4c>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	73fb      	strb	r3, [r7, #15]

  return value;
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000000 	.word	0x20000000
 8000cb4:	2000008c 	.word	0x2000008c
 8000cb8:	20000038 	.word	0x20000038
 8000cbc:	20000090 	.word	0x20000090

08000cc0 <readReg16Bit>:

// Read a 16-bit register
uint16_t readReg16Bit(uint8_t reg) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b088      	sub	sp, #32
 8000cc4:	af04      	add	r7, sp, #16
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
  uint16_t value;

  i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, msgBuffer, 2, I2C_TIMEOUT);
 8000cca:	4b0f      	ldr	r3, [pc, #60]	@ (8000d08 <readReg16Bit+0x48>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	2364      	movs	r3, #100	@ 0x64
 8000cdc:	9302      	str	r3, [sp, #8]
 8000cde:	2302      	movs	r3, #2
 8000ce0:	9301      	str	r3, [sp, #4]
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8000d0c <readReg16Bit+0x4c>)
 8000ce4:	9300      	str	r3, [sp, #0]
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	4809      	ldr	r0, [pc, #36]	@ (8000d10 <readReg16Bit+0x50>)
 8000cea:	f002 f88b 	bl	8002e04 <HAL_I2C_Mem_Read>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b08      	ldr	r3, [pc, #32]	@ (8000d14 <readReg16Bit+0x54>)
 8000cf4:	701a      	strb	r2, [r3, #0]
  memcpy(&value, msgBuffer, 2);
 8000cf6:	4b05      	ldr	r3, [pc, #20]	@ (8000d0c <readReg16Bit+0x4c>)
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	81fb      	strh	r3, [r7, #14]

  return value;
 8000cfc:	89fb      	ldrh	r3, [r7, #14]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	2000008c 	.word	0x2000008c
 8000d10:	20000038 	.word	0x20000038
 8000d14:	20000090 	.word	0x20000090

08000d18 <writeMulti>:
  return value;
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
void writeMulti(uint8_t reg, uint8_t const *src, uint8_t count){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af04      	add	r7, sp, #16
 8000d1e:	4603      	mov	r3, r0
 8000d20:	6039      	str	r1, [r7, #0]
 8000d22:	71fb      	strb	r3, [r7, #7]
 8000d24:	4613      	mov	r3, r2
 8000d26:	71bb      	strb	r3, [r7, #6]

  memcpy(msgBuffer, src, 4);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d64 <writeMulti+0x4c>)
 8000d30:	601a      	str	r2, [r3, #0]
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, count, I2C_TIMEOUT);
 8000d32:	4b0d      	ldr	r3, [pc, #52]	@ (8000d68 <writeMulti+0x50>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	4618      	mov	r0, r3
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	79bb      	ldrb	r3, [r7, #6]
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	2164      	movs	r1, #100	@ 0x64
 8000d42:	9102      	str	r1, [sp, #8]
 8000d44:	9301      	str	r3, [sp, #4]
 8000d46:	4b07      	ldr	r3, [pc, #28]	@ (8000d64 <writeMulti+0x4c>)
 8000d48:	9300      	str	r3, [sp, #0]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	4601      	mov	r1, r0
 8000d4e:	4807      	ldr	r0, [pc, #28]	@ (8000d6c <writeMulti+0x54>)
 8000d50:	f001 ff5e 	bl	8002c10 <HAL_I2C_Mem_Write>
 8000d54:	4603      	mov	r3, r0
 8000d56:	461a      	mov	r2, r3
 8000d58:	4b05      	ldr	r3, [pc, #20]	@ (8000d70 <writeMulti+0x58>)
 8000d5a:	701a      	strb	r2, [r3, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	2000008c 	.word	0x2000008c
 8000d68:	20000000 	.word	0x20000000
 8000d6c:	20000038 	.word	0x20000038
 8000d70:	20000090 	.word	0x20000090

08000d74 <readMulti>:

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void readMulti(uint8_t reg, uint8_t * dst, uint8_t count) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af04      	add	r7, sp, #16
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	6039      	str	r1, [r7, #0]
 8000d7e:	71fb      	strb	r3, [r7, #7]
 8000d80:	4613      	mov	r3, r2
 8000d82:	71bb      	strb	r3, [r7, #6]

	i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, dst, count, I2C_TIMEOUT);
 8000d84:	4b0d      	ldr	r3, [pc, #52]	@ (8000dbc <readMulti+0x48>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	79bb      	ldrb	r3, [r7, #6]
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	2164      	movs	r1, #100	@ 0x64
 8000d9a:	9102      	str	r1, [sp, #8]
 8000d9c:	9301      	str	r3, [sp, #4]
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	2301      	movs	r3, #1
 8000da4:	4601      	mov	r1, r0
 8000da6:	4806      	ldr	r0, [pc, #24]	@ (8000dc0 <readMulti+0x4c>)
 8000da8:	f002 f82c 	bl	8002e04 <HAL_I2C_Mem_Read>
 8000dac:	4603      	mov	r3, r0
 8000dae:	461a      	mov	r2, r3
 8000db0:	4b04      	ldr	r3, [pc, #16]	@ (8000dc4 <readMulti+0x50>)
 8000db2:	701a      	strb	r2, [r3, #0]
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	20000038 	.word	0x20000038
 8000dc4:	20000090 	.word	0x20000090

08000dc8 <initVL53L0X>:
// (VL53L0X_PerformRefSpadManagement()), since the API user manual says that it
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
bool initVL53L0X(bool io_2v8, I2C_HandleTypeDef *handler){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	71fb      	strb	r3, [r7, #7]
  // VL53L0X_DataInit() begin

  // Handler
  memcpy(&VL53L0X_I2C_Handler, handler, sizeof(*handler));
 8000dd4:	2254      	movs	r2, #84	@ 0x54
 8000dd6:	6839      	ldr	r1, [r7, #0]
 8000dd8:	4854      	ldr	r0, [pc, #336]	@ (8000f2c <initVL53L0X+0x164>)
 8000dda:	f005 fadd 	bl	8006398 <memcpy>

  // Reset the message buffer.
  msgBuffer[0] = 0;
 8000dde:	4b54      	ldr	r3, [pc, #336]	@ (8000f30 <initVL53L0X+0x168>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
  msgBuffer[1] = 0;
 8000de4:	4b52      	ldr	r3, [pc, #328]	@ (8000f30 <initVL53L0X+0x168>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	705a      	strb	r2, [r3, #1]
  msgBuffer[2] = 0;
 8000dea:	4b51      	ldr	r3, [pc, #324]	@ (8000f30 <initVL53L0X+0x168>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	709a      	strb	r2, [r3, #2]
  msgBuffer[3] = 0;
 8000df0:	4b4f      	ldr	r3, [pc, #316]	@ (8000f30 <initVL53L0X+0x168>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	70da      	strb	r2, [r3, #3]

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d00a      	beq.n	8000e12 <initVL53L0X+0x4a>
  {
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
      readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 8000dfc:	2089      	movs	r0, #137	@ 0x89
 8000dfe:	f7ff ff33 	bl	8000c68 <readReg>
 8000e02:	4603      	mov	r3, r0
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	2089      	movs	r0, #137	@ 0x89
 8000e0e:	f7ff fed7 	bl	8000bc0 <writeReg>
  }

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 8000e12:	2100      	movs	r1, #0
 8000e14:	2088      	movs	r0, #136	@ 0x88
 8000e16:	f7ff fed3 	bl	8000bc0 <writeReg>

  writeReg(0x80, 0x01);
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	2080      	movs	r0, #128	@ 0x80
 8000e1e:	f7ff fecf 	bl	8000bc0 <writeReg>
  writeReg(0xFF, 0x01);
 8000e22:	2101      	movs	r1, #1
 8000e24:	20ff      	movs	r0, #255	@ 0xff
 8000e26:	f7ff fecb 	bl	8000bc0 <writeReg>
  writeReg(0x00, 0x00);
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f7ff fec7 	bl	8000bc0 <writeReg>
  g_stopVariable = readReg(0x91);
 8000e32:	2091      	movs	r0, #145	@ 0x91
 8000e34:	f7ff ff18 	bl	8000c68 <readReg>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	4b3d      	ldr	r3, [pc, #244]	@ (8000f34 <initVL53L0X+0x16c>)
 8000e3e:	701a      	strb	r2, [r3, #0]
  writeReg(0x00, 0x01);
 8000e40:	2101      	movs	r1, #1
 8000e42:	2000      	movs	r0, #0
 8000e44:	f7ff febc 	bl	8000bc0 <writeReg>
  writeReg(0xFF, 0x00);
 8000e48:	2100      	movs	r1, #0
 8000e4a:	20ff      	movs	r0, #255	@ 0xff
 8000e4c:	f7ff feb8 	bl	8000bc0 <writeReg>
  writeReg(0x80, 0x00);
 8000e50:	2100      	movs	r1, #0
 8000e52:	2080      	movs	r0, #128	@ 0x80
 8000e54:	f7ff feb4 	bl	8000bc0 <writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 8000e58:	2060      	movs	r0, #96	@ 0x60
 8000e5a:	f7ff ff05 	bl	8000c68 <readReg>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	f043 0312 	orr.w	r3, r3, #18
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	4619      	mov	r1, r3
 8000e68:	2060      	movs	r0, #96	@ 0x60
 8000e6a:	f7ff fea9 	bl	8000bc0 <writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 8000e6e:	f04f 507a 	mov.w	r0, #1048576000	@ 0x3e800000
 8000e72:	f000 fa09 	bl	8001288 <setSignalRateLimit>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8000e76:	21ff      	movs	r1, #255	@ 0xff
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f7ff fea1 	bl	8000bc0 <writeReg>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 8000e7e:	f107 0213 	add.w	r2, r7, #19
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4611      	mov	r1, r2
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f000 fd6d 	bl	8001968 <getSpadInfo>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d101      	bne.n	8000e98 <initVL53L0X+0xd0>
 8000e94:	2300      	movs	r3, #0
 8000e96:	e1ee      	b.n	8001276 <initVL53L0X+0x4ae>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	2206      	movs	r2, #6
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	20b0      	movs	r0, #176	@ 0xb0
 8000ea2:	f7ff ff67 	bl	8000d74 <readMulti>

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	20ff      	movs	r0, #255	@ 0xff
 8000eaa:	f7ff fe89 	bl	8000bc0 <writeReg>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8000eae:	2100      	movs	r1, #0
 8000eb0:	204f      	movs	r0, #79	@ 0x4f
 8000eb2:	f7ff fe85 	bl	8000bc0 <writeReg>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8000eb6:	212c      	movs	r1, #44	@ 0x2c
 8000eb8:	204e      	movs	r0, #78	@ 0x4e
 8000eba:	f7ff fe81 	bl	8000bc0 <writeReg>
  writeReg(0xFF, 0x00);
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	20ff      	movs	r0, #255	@ 0xff
 8000ec2:	f7ff fe7d 	bl	8000bc0 <writeReg>
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8000ec6:	21b4      	movs	r1, #180	@ 0xb4
 8000ec8:	20b6      	movs	r0, #182	@ 0xb6
 8000eca:	f7ff fe79 	bl	8000bc0 <writeReg>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 8000ece:	7cfb      	ldrb	r3, [r7, #19]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <initVL53L0X+0x110>
 8000ed4:	230c      	movs	r3, #12
 8000ed6:	e000      	b.n	8000eda <initVL53L0X+0x112>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	757b      	strb	r3, [r7, #21]
  uint8_t spads_enabled = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < 48; i++)
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	75bb      	strb	r3, [r7, #22]
 8000ee4:	e03f      	b.n	8000f66 <initVL53L0X+0x19e>
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 8000ee6:	7dba      	ldrb	r2, [r7, #22]
 8000ee8:	7d7b      	ldrb	r3, [r7, #21]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d303      	bcc.n	8000ef6 <initVL53L0X+0x12e>
 8000eee:	7d3b      	ldrb	r3, [r7, #20]
 8000ef0:	7dfa      	ldrb	r2, [r7, #23]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d120      	bne.n	8000f38 <initVL53L0X+0x170>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 8000ef6:	7dbb      	ldrb	r3, [r7, #22]
 8000ef8:	08db      	lsrs	r3, r3, #3
 8000efa:	b2d8      	uxtb	r0, r3
 8000efc:	4603      	mov	r3, r0
 8000efe:	3318      	adds	r3, #24
 8000f00:	443b      	add	r3, r7
 8000f02:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000f06:	b25a      	sxtb	r2, r3
 8000f08:	7dbb      	ldrb	r3, [r7, #22]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	2101      	movs	r1, #1
 8000f10:	fa01 f303 	lsl.w	r3, r1, r3
 8000f14:	b25b      	sxtb	r3, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	b25b      	sxtb	r3, r3
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	b25a      	sxtb	r2, r3
 8000f1e:	4603      	mov	r3, r0
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	3318      	adds	r3, #24
 8000f24:	443b      	add	r3, r7
 8000f26:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8000f2a:	e019      	b.n	8000f60 <initVL53L0X+0x198>
 8000f2c:	20000038 	.word	0x20000038
 8000f30:	2000008c 	.word	0x2000008c
 8000f34:	20000032 	.word	0x20000032
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 8000f38:	7dbb      	ldrb	r3, [r7, #22]
 8000f3a:	08db      	lsrs	r3, r3, #3
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	3318      	adds	r3, #24
 8000f40:	443b      	add	r3, r7
 8000f42:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000f46:	461a      	mov	r2, r3
 8000f48:	7dbb      	ldrb	r3, [r7, #22]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	fa42 f303 	asr.w	r3, r2, r3
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d002      	beq.n	8000f60 <initVL53L0X+0x198>
    {
      spads_enabled++;
 8000f5a:	7dfb      	ldrb	r3, [r7, #23]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	75fb      	strb	r3, [r7, #23]
  for (uint8_t i = 0; i < 48; i++)
 8000f60:	7dbb      	ldrb	r3, [r7, #22]
 8000f62:	3301      	adds	r3, #1
 8000f64:	75bb      	strb	r3, [r7, #22]
 8000f66:	7dbb      	ldrb	r3, [r7, #22]
 8000f68:	2b2f      	cmp	r3, #47	@ 0x2f
 8000f6a:	d9bc      	bls.n	8000ee6 <initVL53L0X+0x11e>
    }
  }

  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	2206      	movs	r2, #6
 8000f72:	4619      	mov	r1, r3
 8000f74:	20b0      	movs	r0, #176	@ 0xb0
 8000f76:	f7ff fecf 	bl	8000d18 <writeMulti>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	20ff      	movs	r0, #255	@ 0xff
 8000f7e:	f7ff fe1f 	bl	8000bc0 <writeReg>
  writeReg(0x00, 0x00);
 8000f82:	2100      	movs	r1, #0
 8000f84:	2000      	movs	r0, #0
 8000f86:	f7ff fe1b 	bl	8000bc0 <writeReg>

  writeReg(0xFF, 0x00);
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	20ff      	movs	r0, #255	@ 0xff
 8000f8e:	f7ff fe17 	bl	8000bc0 <writeReg>
  writeReg(0x09, 0x00);
 8000f92:	2100      	movs	r1, #0
 8000f94:	2009      	movs	r0, #9
 8000f96:	f7ff fe13 	bl	8000bc0 <writeReg>
  writeReg(0x10, 0x00);
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	2010      	movs	r0, #16
 8000f9e:	f7ff fe0f 	bl	8000bc0 <writeReg>
  writeReg(0x11, 0x00);
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2011      	movs	r0, #17
 8000fa6:	f7ff fe0b 	bl	8000bc0 <writeReg>

  writeReg(0x24, 0x01);
 8000faa:	2101      	movs	r1, #1
 8000fac:	2024      	movs	r0, #36	@ 0x24
 8000fae:	f7ff fe07 	bl	8000bc0 <writeReg>
  writeReg(0x25, 0xFF);
 8000fb2:	21ff      	movs	r1, #255	@ 0xff
 8000fb4:	2025      	movs	r0, #37	@ 0x25
 8000fb6:	f7ff fe03 	bl	8000bc0 <writeReg>
  writeReg(0x75, 0x00);
 8000fba:	2100      	movs	r1, #0
 8000fbc:	2075      	movs	r0, #117	@ 0x75
 8000fbe:	f7ff fdff 	bl	8000bc0 <writeReg>

  writeReg(0xFF, 0x01);
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	20ff      	movs	r0, #255	@ 0xff
 8000fc6:	f7ff fdfb 	bl	8000bc0 <writeReg>
  writeReg(0x4E, 0x2C);
 8000fca:	212c      	movs	r1, #44	@ 0x2c
 8000fcc:	204e      	movs	r0, #78	@ 0x4e
 8000fce:	f7ff fdf7 	bl	8000bc0 <writeReg>
  writeReg(0x48, 0x00);
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	2048      	movs	r0, #72	@ 0x48
 8000fd6:	f7ff fdf3 	bl	8000bc0 <writeReg>
  writeReg(0x30, 0x20);
 8000fda:	2120      	movs	r1, #32
 8000fdc:	2030      	movs	r0, #48	@ 0x30
 8000fde:	f7ff fdef 	bl	8000bc0 <writeReg>

  writeReg(0xFF, 0x00);
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	20ff      	movs	r0, #255	@ 0xff
 8000fe6:	f7ff fdeb 	bl	8000bc0 <writeReg>
  writeReg(0x30, 0x09);
 8000fea:	2109      	movs	r1, #9
 8000fec:	2030      	movs	r0, #48	@ 0x30
 8000fee:	f7ff fde7 	bl	8000bc0 <writeReg>
  writeReg(0x54, 0x00);
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2054      	movs	r0, #84	@ 0x54
 8000ff6:	f7ff fde3 	bl	8000bc0 <writeReg>
  writeReg(0x31, 0x04);
 8000ffa:	2104      	movs	r1, #4
 8000ffc:	2031      	movs	r0, #49	@ 0x31
 8000ffe:	f7ff fddf 	bl	8000bc0 <writeReg>
  writeReg(0x32, 0x03);
 8001002:	2103      	movs	r1, #3
 8001004:	2032      	movs	r0, #50	@ 0x32
 8001006:	f7ff fddb 	bl	8000bc0 <writeReg>
  writeReg(0x40, 0x83);
 800100a:	2183      	movs	r1, #131	@ 0x83
 800100c:	2040      	movs	r0, #64	@ 0x40
 800100e:	f7ff fdd7 	bl	8000bc0 <writeReg>
  writeReg(0x46, 0x25);
 8001012:	2125      	movs	r1, #37	@ 0x25
 8001014:	2046      	movs	r0, #70	@ 0x46
 8001016:	f7ff fdd3 	bl	8000bc0 <writeReg>
  writeReg(0x60, 0x00);
 800101a:	2100      	movs	r1, #0
 800101c:	2060      	movs	r0, #96	@ 0x60
 800101e:	f7ff fdcf 	bl	8000bc0 <writeReg>
  writeReg(0x27, 0x00);
 8001022:	2100      	movs	r1, #0
 8001024:	2027      	movs	r0, #39	@ 0x27
 8001026:	f7ff fdcb 	bl	8000bc0 <writeReg>
  writeReg(0x50, 0x06);
 800102a:	2106      	movs	r1, #6
 800102c:	2050      	movs	r0, #80	@ 0x50
 800102e:	f7ff fdc7 	bl	8000bc0 <writeReg>
  writeReg(0x51, 0x00);
 8001032:	2100      	movs	r1, #0
 8001034:	2051      	movs	r0, #81	@ 0x51
 8001036:	f7ff fdc3 	bl	8000bc0 <writeReg>
  writeReg(0x52, 0x96);
 800103a:	2196      	movs	r1, #150	@ 0x96
 800103c:	2052      	movs	r0, #82	@ 0x52
 800103e:	f7ff fdbf 	bl	8000bc0 <writeReg>
  writeReg(0x56, 0x08);
 8001042:	2108      	movs	r1, #8
 8001044:	2056      	movs	r0, #86	@ 0x56
 8001046:	f7ff fdbb 	bl	8000bc0 <writeReg>
  writeReg(0x57, 0x30);
 800104a:	2130      	movs	r1, #48	@ 0x30
 800104c:	2057      	movs	r0, #87	@ 0x57
 800104e:	f7ff fdb7 	bl	8000bc0 <writeReg>
  writeReg(0x61, 0x00);
 8001052:	2100      	movs	r1, #0
 8001054:	2061      	movs	r0, #97	@ 0x61
 8001056:	f7ff fdb3 	bl	8000bc0 <writeReg>
  writeReg(0x62, 0x00);
 800105a:	2100      	movs	r1, #0
 800105c:	2062      	movs	r0, #98	@ 0x62
 800105e:	f7ff fdaf 	bl	8000bc0 <writeReg>
  writeReg(0x64, 0x00);
 8001062:	2100      	movs	r1, #0
 8001064:	2064      	movs	r0, #100	@ 0x64
 8001066:	f7ff fdab 	bl	8000bc0 <writeReg>
  writeReg(0x65, 0x00);
 800106a:	2100      	movs	r1, #0
 800106c:	2065      	movs	r0, #101	@ 0x65
 800106e:	f7ff fda7 	bl	8000bc0 <writeReg>
  writeReg(0x66, 0xA0);
 8001072:	21a0      	movs	r1, #160	@ 0xa0
 8001074:	2066      	movs	r0, #102	@ 0x66
 8001076:	f7ff fda3 	bl	8000bc0 <writeReg>

  writeReg(0xFF, 0x01);
 800107a:	2101      	movs	r1, #1
 800107c:	20ff      	movs	r0, #255	@ 0xff
 800107e:	f7ff fd9f 	bl	8000bc0 <writeReg>
  writeReg(0x22, 0x32);
 8001082:	2132      	movs	r1, #50	@ 0x32
 8001084:	2022      	movs	r0, #34	@ 0x22
 8001086:	f7ff fd9b 	bl	8000bc0 <writeReg>
  writeReg(0x47, 0x14);
 800108a:	2114      	movs	r1, #20
 800108c:	2047      	movs	r0, #71	@ 0x47
 800108e:	f7ff fd97 	bl	8000bc0 <writeReg>
  writeReg(0x49, 0xFF);
 8001092:	21ff      	movs	r1, #255	@ 0xff
 8001094:	2049      	movs	r0, #73	@ 0x49
 8001096:	f7ff fd93 	bl	8000bc0 <writeReg>
  writeReg(0x4A, 0x00);
 800109a:	2100      	movs	r1, #0
 800109c:	204a      	movs	r0, #74	@ 0x4a
 800109e:	f7ff fd8f 	bl	8000bc0 <writeReg>

  writeReg(0xFF, 0x00);
 80010a2:	2100      	movs	r1, #0
 80010a4:	20ff      	movs	r0, #255	@ 0xff
 80010a6:	f7ff fd8b 	bl	8000bc0 <writeReg>
  writeReg(0x7A, 0x0A);
 80010aa:	210a      	movs	r1, #10
 80010ac:	207a      	movs	r0, #122	@ 0x7a
 80010ae:	f7ff fd87 	bl	8000bc0 <writeReg>
  writeReg(0x7B, 0x00);
 80010b2:	2100      	movs	r1, #0
 80010b4:	207b      	movs	r0, #123	@ 0x7b
 80010b6:	f7ff fd83 	bl	8000bc0 <writeReg>
  writeReg(0x78, 0x21);
 80010ba:	2121      	movs	r1, #33	@ 0x21
 80010bc:	2078      	movs	r0, #120	@ 0x78
 80010be:	f7ff fd7f 	bl	8000bc0 <writeReg>

  writeReg(0xFF, 0x01);
 80010c2:	2101      	movs	r1, #1
 80010c4:	20ff      	movs	r0, #255	@ 0xff
 80010c6:	f7ff fd7b 	bl	8000bc0 <writeReg>
  writeReg(0x23, 0x34);
 80010ca:	2134      	movs	r1, #52	@ 0x34
 80010cc:	2023      	movs	r0, #35	@ 0x23
 80010ce:	f7ff fd77 	bl	8000bc0 <writeReg>
  writeReg(0x42, 0x00);
 80010d2:	2100      	movs	r1, #0
 80010d4:	2042      	movs	r0, #66	@ 0x42
 80010d6:	f7ff fd73 	bl	8000bc0 <writeReg>
  writeReg(0x44, 0xFF);
 80010da:	21ff      	movs	r1, #255	@ 0xff
 80010dc:	2044      	movs	r0, #68	@ 0x44
 80010de:	f7ff fd6f 	bl	8000bc0 <writeReg>
  writeReg(0x45, 0x26);
 80010e2:	2126      	movs	r1, #38	@ 0x26
 80010e4:	2045      	movs	r0, #69	@ 0x45
 80010e6:	f7ff fd6b 	bl	8000bc0 <writeReg>
  writeReg(0x46, 0x05);
 80010ea:	2105      	movs	r1, #5
 80010ec:	2046      	movs	r0, #70	@ 0x46
 80010ee:	f7ff fd67 	bl	8000bc0 <writeReg>
  writeReg(0x40, 0x40);
 80010f2:	2140      	movs	r1, #64	@ 0x40
 80010f4:	2040      	movs	r0, #64	@ 0x40
 80010f6:	f7ff fd63 	bl	8000bc0 <writeReg>
  writeReg(0x0E, 0x06);
 80010fa:	2106      	movs	r1, #6
 80010fc:	200e      	movs	r0, #14
 80010fe:	f7ff fd5f 	bl	8000bc0 <writeReg>
  writeReg(0x20, 0x1A);
 8001102:	211a      	movs	r1, #26
 8001104:	2020      	movs	r0, #32
 8001106:	f7ff fd5b 	bl	8000bc0 <writeReg>
  writeReg(0x43, 0x40);
 800110a:	2140      	movs	r1, #64	@ 0x40
 800110c:	2043      	movs	r0, #67	@ 0x43
 800110e:	f7ff fd57 	bl	8000bc0 <writeReg>

  writeReg(0xFF, 0x00);
 8001112:	2100      	movs	r1, #0
 8001114:	20ff      	movs	r0, #255	@ 0xff
 8001116:	f7ff fd53 	bl	8000bc0 <writeReg>
  writeReg(0x34, 0x03);
 800111a:	2103      	movs	r1, #3
 800111c:	2034      	movs	r0, #52	@ 0x34
 800111e:	f7ff fd4f 	bl	8000bc0 <writeReg>
  writeReg(0x35, 0x44);
 8001122:	2144      	movs	r1, #68	@ 0x44
 8001124:	2035      	movs	r0, #53	@ 0x35
 8001126:	f7ff fd4b 	bl	8000bc0 <writeReg>

  writeReg(0xFF, 0x01);
 800112a:	2101      	movs	r1, #1
 800112c:	20ff      	movs	r0, #255	@ 0xff
 800112e:	f7ff fd47 	bl	8000bc0 <writeReg>
  writeReg(0x31, 0x04);
 8001132:	2104      	movs	r1, #4
 8001134:	2031      	movs	r0, #49	@ 0x31
 8001136:	f7ff fd43 	bl	8000bc0 <writeReg>
  writeReg(0x4B, 0x09);
 800113a:	2109      	movs	r1, #9
 800113c:	204b      	movs	r0, #75	@ 0x4b
 800113e:	f7ff fd3f 	bl	8000bc0 <writeReg>
  writeReg(0x4C, 0x05);
 8001142:	2105      	movs	r1, #5
 8001144:	204c      	movs	r0, #76	@ 0x4c
 8001146:	f7ff fd3b 	bl	8000bc0 <writeReg>
  writeReg(0x4D, 0x04);
 800114a:	2104      	movs	r1, #4
 800114c:	204d      	movs	r0, #77	@ 0x4d
 800114e:	f7ff fd37 	bl	8000bc0 <writeReg>

  writeReg(0xFF, 0x00);
 8001152:	2100      	movs	r1, #0
 8001154:	20ff      	movs	r0, #255	@ 0xff
 8001156:	f7ff fd33 	bl	8000bc0 <writeReg>
  writeReg(0x44, 0x00);
 800115a:	2100      	movs	r1, #0
 800115c:	2044      	movs	r0, #68	@ 0x44
 800115e:	f7ff fd2f 	bl	8000bc0 <writeReg>
  writeReg(0x45, 0x20);
 8001162:	2120      	movs	r1, #32
 8001164:	2045      	movs	r0, #69	@ 0x45
 8001166:	f7ff fd2b 	bl	8000bc0 <writeReg>
  writeReg(0x47, 0x08);
 800116a:	2108      	movs	r1, #8
 800116c:	2047      	movs	r0, #71	@ 0x47
 800116e:	f7ff fd27 	bl	8000bc0 <writeReg>
  writeReg(0x48, 0x28);
 8001172:	2128      	movs	r1, #40	@ 0x28
 8001174:	2048      	movs	r0, #72	@ 0x48
 8001176:	f7ff fd23 	bl	8000bc0 <writeReg>
  writeReg(0x67, 0x00);
 800117a:	2100      	movs	r1, #0
 800117c:	2067      	movs	r0, #103	@ 0x67
 800117e:	f7ff fd1f 	bl	8000bc0 <writeReg>
  writeReg(0x70, 0x04);
 8001182:	2104      	movs	r1, #4
 8001184:	2070      	movs	r0, #112	@ 0x70
 8001186:	f7ff fd1b 	bl	8000bc0 <writeReg>
  writeReg(0x71, 0x01);
 800118a:	2101      	movs	r1, #1
 800118c:	2071      	movs	r0, #113	@ 0x71
 800118e:	f7ff fd17 	bl	8000bc0 <writeReg>
  writeReg(0x72, 0xFE);
 8001192:	21fe      	movs	r1, #254	@ 0xfe
 8001194:	2072      	movs	r0, #114	@ 0x72
 8001196:	f7ff fd13 	bl	8000bc0 <writeReg>
  writeReg(0x76, 0x00);
 800119a:	2100      	movs	r1, #0
 800119c:	2076      	movs	r0, #118	@ 0x76
 800119e:	f7ff fd0f 	bl	8000bc0 <writeReg>
  writeReg(0x77, 0x00);
 80011a2:	2100      	movs	r1, #0
 80011a4:	2077      	movs	r0, #119	@ 0x77
 80011a6:	f7ff fd0b 	bl	8000bc0 <writeReg>

  writeReg(0xFF, 0x01);
 80011aa:	2101      	movs	r1, #1
 80011ac:	20ff      	movs	r0, #255	@ 0xff
 80011ae:	f7ff fd07 	bl	8000bc0 <writeReg>
  writeReg(0x0D, 0x01);
 80011b2:	2101      	movs	r1, #1
 80011b4:	200d      	movs	r0, #13
 80011b6:	f7ff fd03 	bl	8000bc0 <writeReg>

  writeReg(0xFF, 0x00);
 80011ba:	2100      	movs	r1, #0
 80011bc:	20ff      	movs	r0, #255	@ 0xff
 80011be:	f7ff fcff 	bl	8000bc0 <writeReg>
  writeReg(0x80, 0x01);
 80011c2:	2101      	movs	r1, #1
 80011c4:	2080      	movs	r0, #128	@ 0x80
 80011c6:	f7ff fcfb 	bl	8000bc0 <writeReg>
  writeReg(0x01, 0xF8);
 80011ca:	21f8      	movs	r1, #248	@ 0xf8
 80011cc:	2001      	movs	r0, #1
 80011ce:	f7ff fcf7 	bl	8000bc0 <writeReg>

  writeReg(0xFF, 0x01);
 80011d2:	2101      	movs	r1, #1
 80011d4:	20ff      	movs	r0, #255	@ 0xff
 80011d6:	f7ff fcf3 	bl	8000bc0 <writeReg>
  writeReg(0x8E, 0x01);
 80011da:	2101      	movs	r1, #1
 80011dc:	208e      	movs	r0, #142	@ 0x8e
 80011de:	f7ff fcef 	bl	8000bc0 <writeReg>
  writeReg(0x00, 0x01);
 80011e2:	2101      	movs	r1, #1
 80011e4:	2000      	movs	r0, #0
 80011e6:	f7ff fceb 	bl	8000bc0 <writeReg>
  writeReg(0xFF, 0x00);
 80011ea:	2100      	movs	r1, #0
 80011ec:	20ff      	movs	r0, #255	@ 0xff
 80011ee:	f7ff fce7 	bl	8000bc0 <writeReg>
  writeReg(0x80, 0x00);
 80011f2:	2100      	movs	r1, #0
 80011f4:	2080      	movs	r0, #128	@ 0x80
 80011f6:	f7ff fce3 	bl	8000bc0 <writeReg>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80011fa:	2104      	movs	r1, #4
 80011fc:	200a      	movs	r0, #10
 80011fe:	f7ff fcdf 	bl	8000bc0 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 8001202:	2084      	movs	r0, #132	@ 0x84
 8001204:	f7ff fd30 	bl	8000c68 <readReg>
 8001208:	4603      	mov	r3, r0
 800120a:	f023 0310 	bic.w	r3, r3, #16
 800120e:	b2db      	uxtb	r3, r3
 8001210:	4619      	mov	r1, r3
 8001212:	2084      	movs	r0, #132	@ 0x84
 8001214:	f7ff fcd4 	bl	8000bc0 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001218:	2101      	movs	r1, #1
 800121a:	200b      	movs	r0, #11
 800121c:	f7ff fcd0 	bl	8000bc0 <writeReg>

  // -- VL53L0X_SetGpioConfig() end

  g_measTimBudUs = getMeasurementTimingBudget();
 8001220:	f000 f8fe 	bl	8001420 <getMeasurementTimingBudget>
 8001224:	4603      	mov	r3, r0
 8001226:	4a16      	ldr	r2, [pc, #88]	@ (8001280 <initVL53L0X+0x4b8>)
 8001228:	6013      	str	r3, [r2, #0]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 800122a:	21e8      	movs	r1, #232	@ 0xe8
 800122c:	2001      	movs	r0, #1
 800122e:	f7ff fcc7 	bl	8000bc0 <writeReg>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
  setMeasurementTimingBudget(g_measTimBudUs);
 8001232:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <initVL53L0X+0x4b8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f000 f85a 	bl	80012f0 <setMeasurementTimingBudget>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 800123c:	2101      	movs	r1, #1
 800123e:	2001      	movs	r0, #1
 8001240:	f7ff fcbe 	bl	8000bc0 <writeReg>
  if (!performSingleRefCalibration(0x40)) { return false; }
 8001244:	2040      	movs	r0, #64	@ 0x40
 8001246:	f000 fd45 	bl	8001cd4 <performSingleRefCalibration>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d101      	bne.n	8001254 <initVL53L0X+0x48c>
 8001250:	2300      	movs	r3, #0
 8001252:	e010      	b.n	8001276 <initVL53L0X+0x4ae>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8001254:	2102      	movs	r1, #2
 8001256:	2001      	movs	r0, #1
 8001258:	f7ff fcb2 	bl	8000bc0 <writeReg>
  if (!performSingleRefCalibration(0x00)) { return false; }
 800125c:	2000      	movs	r0, #0
 800125e:	f000 fd39 	bl	8001cd4 <performSingleRefCalibration>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <initVL53L0X+0x4a4>
 8001268:	2300      	movs	r3, #0
 800126a:	e004      	b.n	8001276 <initVL53L0X+0x4ae>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 800126c:	21e8      	movs	r1, #232	@ 0xe8
 800126e:	2001      	movs	r0, #1
 8001270:	f7ff fca6 	bl	8000bc0 <writeReg>

  // VL53L0X_PerformRefCalibration() end

  return true;
 8001274:	2301      	movs	r3, #1
}
 8001276:	4618      	mov	r0, r3
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000034 	.word	0x20000034
 8001284:	00000000 	.word	0x00000000

08001288 <setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool setSignalRateLimit(float limit_Mcps)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 8001290:	f04f 0100 	mov.w	r1, #0
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff fc4b 	bl	8000b30 <__aeabi_fcmplt>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d10a      	bne.n	80012b6 <setSignalRateLimit+0x2e>
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff f8b9 	bl	8000418 <__aeabi_f2d>
 80012a6:	a310      	add	r3, pc, #64	@ (adr r3, 80012e8 <setSignalRateLimit+0x60>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	f7ff f98a 	bl	80005c4 <__aeabi_dcmpgt>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <setSignalRateLimit+0x32>
 80012b6:	2300      	movs	r3, #0
 80012b8:	e00f      	b.n	80012da <setSignalRateLimit+0x52>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 80012ba:	f04f 4186 	mov.w	r1, #1124073472	@ 0x43000000
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff fa98 	bl	80007f4 <__aeabi_fmul>
 80012c4:	4603      	mov	r3, r0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fc5a 	bl	8000b80 <__aeabi_f2uiz>
 80012cc:	4603      	mov	r3, r0
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	4619      	mov	r1, r3
 80012d2:	2044      	movs	r0, #68	@ 0x44
 80012d4:	f7ff fc9e 	bl	8000c14 <writeReg16Bit>
  return true;
 80012d8:	2301      	movs	r3, #1
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	f3af 8000 	nop.w
 80012e8:	0a3d70a4 	.word	0x0a3d70a4
 80012ec:	407fffd7 	.word	0x407fffd7

080012f0 <setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool setMeasurementTimingBudget(uint32_t budget_us)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b092      	sub	sp, #72	@ 0x48
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 80012f8:	f44f 63a5 	mov.w	r3, #1320	@ 0x528
 80012fc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  uint16_t const EndOverhead        = 960;
 8001300:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001304:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t const MsrcOverhead       = 660;
 8001306:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800130a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  uint16_t const TccOverhead        = 590;
 800130c:	f240 234e 	movw	r3, #590	@ 0x24e
 8001310:	877b      	strh	r3, [r7, #58]	@ 0x3a
  uint16_t const DssOverhead        = 690;
 8001312:	f240 23b2 	movw	r3, #690	@ 0x2b2
 8001316:	873b      	strh	r3, [r7, #56]	@ 0x38
  uint16_t const PreRangeOverhead   = 660;
 8001318:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800131c:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint16_t const FinalRangeOverhead = 550;
 800131e:	f240 2326 	movw	r3, #550	@ 0x226
 8001322:	86bb      	strh	r3, [r7, #52]	@ 0x34

  uint32_t const MinTimingBudget = 20000;
 8001324:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001328:	633b      	str	r3, [r7, #48]	@ 0x30

  if (budget_us < MinTimingBudget) { return false; }
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800132e:	429a      	cmp	r2, r3
 8001330:	d201      	bcs.n	8001336 <setMeasurementTimingBudget+0x46>
 8001332:	2300      	movs	r3, #0
 8001334:	e06e      	b.n	8001414 <setMeasurementTimingBudget+0x124>

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 8001336:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800133a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800133c:	4413      	add	r3, r2
 800133e:	647b      	str	r3, [r7, #68]	@ 0x44

  getSequenceStepEnables(&enables);
 8001340:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001344:	4618      	mov	r0, r3
 8001346:	f000 fba3 	bl	8001a90 <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 800134a:	f107 020c 	add.w	r2, r7, #12
 800134e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f000 fbcd 	bl	8001af4 <getSequenceStepTimeouts>

  if (enables.tcc)
 800135a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800135e:	2b00      	cmp	r3, #0
 8001360:	d005      	beq.n	800136e <setMeasurementTimingBudget+0x7e>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001366:	4413      	add	r3, r2
 8001368:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800136a:	4413      	add	r3, r2
 800136c:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.dss)
 800136e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001372:	2b00      	cmp	r3, #0
 8001374:	d007      	beq.n	8001386 <setMeasurementTimingBudget+0x96>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800137a:	4413      	add	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001380:	4413      	add	r3, r2
 8001382:	647b      	str	r3, [r7, #68]	@ 0x44
 8001384:	e009      	b.n	800139a <setMeasurementTimingBudget+0xaa>
  }
  else if (enables.msrc)
 8001386:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800138a:	2b00      	cmp	r3, #0
 800138c:	d005      	beq.n	800139a <setMeasurementTimingBudget+0xaa>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001392:	4413      	add	r3, r2
 8001394:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001396:	4413      	add	r3, r2
 8001398:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.pre_range)
 800139a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d005      	beq.n	80013ae <setMeasurementTimingBudget+0xbe>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80013a2:	69fa      	ldr	r2, [r7, #28]
 80013a4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80013a6:	4413      	add	r3, r2
 80013a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80013aa:	4413      	add	r3, r2
 80013ac:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.final_range)
 80013ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d02d      	beq.n	8001412 <setMeasurementTimingBudget+0x122>
  {
    used_budget_us += FinalRangeOverhead;
 80013b6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80013b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80013ba:	4413      	add	r3, r2
 80013bc:	647b      	str	r3, [r7, #68]	@ 0x44
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 80013be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d901      	bls.n	80013ca <setMeasurementTimingBudget+0xda>
    {
      // "Requested timeout too big."
      return false;
 80013c6:	2300      	movs	r3, #0
 80013c8:	e024      	b.n	8001414 <setMeasurementTimingBudget+0x124>
    }

    uint32_t final_range_timeout_us = budget_us - used_budget_us;
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 80013d2:	89fb      	ldrh	r3, [r7, #14]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	4619      	mov	r1, r3
 80013d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80013da:	f000 fc55 	bl	8001c88 <timeoutMicrosecondsToMclks>
 80013de:	4603      	mov	r3, r0
    uint16_t final_range_timeout_mclks =
 80013e0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

    if (enables.pre_range)
 80013e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d005      	beq.n	80013f8 <setMeasurementTimingBudget+0x108>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 80013ec:	8a7a      	ldrh	r2, [r7, #18]
 80013ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80013f2:	4413      	add	r3, r2
 80013f4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80013f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 fbf1 	bl	8001be4 <encodeTimeout>
 8001402:	4603      	mov	r3, r0
 8001404:	4619      	mov	r1, r3
 8001406:	2071      	movs	r0, #113	@ 0x71
 8001408:	f7ff fc04 	bl	8000c14 <writeReg16Bit>
      encodeTimeout(final_range_timeout_mclks));

    // set_sequence_step_timeout() end

    g_measTimBudUs = budget_us; // store for internal reuse
 800140c:	4a03      	ldr	r2, [pc, #12]	@ (800141c <setMeasurementTimingBudget+0x12c>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6013      	str	r3, [r2, #0]
  }
  return true;
 8001412:	2301      	movs	r3, #1
}
 8001414:	4618      	mov	r0, r3
 8001416:	3748      	adds	r7, #72	@ 0x48
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000034 	.word	0x20000034

08001420 <getMeasurementTimingBudget>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t getMeasurementTimingBudget(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08c      	sub	sp, #48	@ 0x30
 8001424:	af00      	add	r7, sp, #0
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 8001426:	f240 7376 	movw	r3, #1910	@ 0x776
 800142a:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t const EndOverhead        = 960;
 800142c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001430:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint16_t const MsrcOverhead       = 660;
 8001432:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8001436:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const TccOverhead        = 590;
 8001438:	f240 234e 	movw	r3, #590	@ 0x24e
 800143c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  uint16_t const DssOverhead        = 690;
 800143e:	f240 23b2 	movw	r3, #690	@ 0x2b2
 8001442:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t const PreRangeOverhead   = 660;
 8001444:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8001448:	843b      	strh	r3, [r7, #32]
  uint16_t const FinalRangeOverhead = 550;
 800144a:	f240 2326 	movw	r3, #550	@ 0x226
 800144e:	83fb      	strh	r3, [r7, #30]

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 8001450:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001452:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001454:	4413      	add	r3, r2
 8001456:	62fb      	str	r3, [r7, #44]	@ 0x2c

  getSequenceStepEnables(&enables);
 8001458:	f107 0318 	add.w	r3, r7, #24
 800145c:	4618      	mov	r0, r3
 800145e:	f000 fb17 	bl	8001a90 <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 8001462:	463a      	mov	r2, r7
 8001464:	f107 0318 	add.w	r3, r7, #24
 8001468:	4611      	mov	r1, r2
 800146a:	4618      	mov	r0, r3
 800146c:	f000 fb42 	bl	8001af4 <getSequenceStepTimeouts>

  if (enables.tcc)
 8001470:	7e3b      	ldrb	r3, [r7, #24]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d005      	beq.n	8001482 <getMeasurementTimingBudget+0x62>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800147a:	4413      	add	r3, r2
 800147c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800147e:	4413      	add	r3, r2
 8001480:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  if (enables.dss)
 8001482:	7ebb      	ldrb	r3, [r7, #26]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d007      	beq.n	8001498 <getMeasurementTimingBudget+0x78>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800148c:	4413      	add	r3, r2
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001492:	4413      	add	r3, r2
 8001494:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001496:	e008      	b.n	80014aa <getMeasurementTimingBudget+0x8a>
  }
  else if (enables.msrc)
 8001498:	7e7b      	ldrb	r3, [r7, #25]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d005      	beq.n	80014aa <getMeasurementTimingBudget+0x8a>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80014a2:	4413      	add	r3, r2
 80014a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014a6:	4413      	add	r3, r2
 80014a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  if (enables.pre_range)
 80014aa:	7efb      	ldrb	r3, [r7, #27]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d005      	beq.n	80014bc <getMeasurementTimingBudget+0x9c>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	8c3b      	ldrh	r3, [r7, #32]
 80014b4:	4413      	add	r3, r2
 80014b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014b8:	4413      	add	r3, r2
 80014ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  if (enables.final_range)
 80014bc:	7f3b      	ldrb	r3, [r7, #28]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d005      	beq.n	80014ce <getMeasurementTimingBudget+0xae>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	8bfb      	ldrh	r3, [r7, #30]
 80014c6:	4413      	add	r3, r2
 80014c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014ca:	4413      	add	r3, r2
 80014cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  g_measTimBudUs = budget_us; // store for internal reuse
 80014ce:	4a04      	ldr	r2, [pc, #16]	@ (80014e0 <getMeasurementTimingBudget+0xc0>)
 80014d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014d2:	6013      	str	r3, [r2, #0]
  return budget_us;
 80014d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3730      	adds	r7, #48	@ 0x30
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000034 	.word	0x20000034

080014e4 <setVcselPulsePeriod>:
// Valid values are (even numbers only):
//  pre:  12 to 18 (initialized default: 14)
//  final: 8 to 14 (initialized default: 10)
// based on VL53L0X_set_vcsel_pulse_period()
bool setVcselPulsePeriod(vcselPeriodType type, uint8_t period_pclks)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08c      	sub	sp, #48	@ 0x30
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	460a      	mov	r2, r1
 80014ee:	71fb      	strb	r3, [r7, #7]
 80014f0:	4613      	mov	r3, r2
 80014f2:	71bb      	strb	r3, [r7, #6]
  uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
 80014f4:	79bb      	ldrb	r3, [r7, #6]
 80014f6:	085b      	lsrs	r3, r3, #1
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	3b01      	subs	r3, #1
 80014fc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  getSequenceStepEnables(&enables);
 8001500:	f107 0320 	add.w	r3, r7, #32
 8001504:	4618      	mov	r0, r3
 8001506:	f000 fac3 	bl	8001a90 <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 800150a:	f107 0208 	add.w	r2, r7, #8
 800150e:	f107 0320 	add.w	r3, r7, #32
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f000 faed 	bl	8001af4 <getSequenceStepTimeouts>
  //
  // For the MSRC timeout, the same applies - this timeout being
  // dependant on the pre-range vcsel period."


  if (type == VcselPeriodPreRange)
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d15d      	bne.n	80015dc <setVcselPulsePeriod+0xf8>
  {
    // "Set phase check limits"
    switch (period_pclks)
 8001520:	79bb      	ldrb	r3, [r7, #6]
 8001522:	3b0c      	subs	r3, #12
 8001524:	2b06      	cmp	r3, #6
 8001526:	d825      	bhi.n	8001574 <setVcselPulsePeriod+0x90>
 8001528:	a201      	add	r2, pc, #4	@ (adr r2, 8001530 <setVcselPulsePeriod+0x4c>)
 800152a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152e:	bf00      	nop
 8001530:	0800154d 	.word	0x0800154d
 8001534:	08001575 	.word	0x08001575
 8001538:	08001557 	.word	0x08001557
 800153c:	08001575 	.word	0x08001575
 8001540:	08001561 	.word	0x08001561
 8001544:	08001575 	.word	0x08001575
 8001548:	0800156b 	.word	0x0800156b
    {
      case 12:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18);
 800154c:	2118      	movs	r1, #24
 800154e:	2057      	movs	r0, #87	@ 0x57
 8001550:	f7ff fb36 	bl	8000bc0 <writeReg>
        break;
 8001554:	e010      	b.n	8001578 <setVcselPulsePeriod+0x94>

      case 14:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30);
 8001556:	2130      	movs	r1, #48	@ 0x30
 8001558:	2057      	movs	r0, #87	@ 0x57
 800155a:	f7ff fb31 	bl	8000bc0 <writeReg>
        break;
 800155e:	e00b      	b.n	8001578 <setVcselPulsePeriod+0x94>

      case 16:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40);
 8001560:	2140      	movs	r1, #64	@ 0x40
 8001562:	2057      	movs	r0, #87	@ 0x57
 8001564:	f7ff fb2c 	bl	8000bc0 <writeReg>
        break;
 8001568:	e006      	b.n	8001578 <setVcselPulsePeriod+0x94>

      case 18:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50);
 800156a:	2150      	movs	r1, #80	@ 0x50
 800156c:	2057      	movs	r0, #87	@ 0x57
 800156e:	f7ff fb27 	bl	8000bc0 <writeReg>
        break;
 8001572:	e001      	b.n	8001578 <setVcselPulsePeriod+0x94>

      default:
        // invalid period
        return false;
 8001574:	2300      	movs	r3, #0
 8001576:	e0fc      	b.n	8001772 <setVcselPulsePeriod+0x28e>
    }
    writeReg(PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08);
 8001578:	2108      	movs	r1, #8
 800157a:	2056      	movs	r0, #86	@ 0x56
 800157c:	f7ff fb20 	bl	8000bc0 <writeReg>

    // apply new VCSEL period
    writeReg(PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8001580:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001584:	4619      	mov	r1, r3
 8001586:	2050      	movs	r0, #80	@ 0x50
 8001588:	f7ff fb1a 	bl	8000bc0 <writeReg>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE)

    uint16_t new_pre_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.pre_range_us, period_pclks);
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	79ba      	ldrb	r2, [r7, #6]
 8001590:	4611      	mov	r1, r2
 8001592:	4618      	mov	r0, r3
 8001594:	f000 fb78 	bl	8001c88 <timeoutMicrosecondsToMclks>
 8001598:	4603      	mov	r3, r0
    uint16_t new_pre_range_timeout_mclks =
 800159a:	857b      	strh	r3, [r7, #42]	@ 0x2a

    writeReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 800159c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 fb20 	bl	8001be4 <encodeTimeout>
 80015a4:	4603      	mov	r3, r0
 80015a6:	4619      	mov	r1, r3
 80015a8:	2051      	movs	r0, #81	@ 0x51
 80015aa:	f7ff fb33 	bl	8000c14 <writeReg16Bit>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)

    uint16_t new_msrc_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.msrc_dss_tcc_us, period_pclks);
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	79ba      	ldrb	r2, [r7, #6]
 80015b2:	4611      	mov	r1, r2
 80015b4:	4618      	mov	r0, r3
 80015b6:	f000 fb67 	bl	8001c88 <timeoutMicrosecondsToMclks>
 80015ba:	4603      	mov	r3, r0
    uint16_t new_msrc_timeout_mclks =
 80015bc:	853b      	strh	r3, [r7, #40]	@ 0x28

    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 80015be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80015c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015c4:	d804      	bhi.n	80015d0 <setVcselPulsePeriod+0xec>
      (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1));
 80015c6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80015c8:	b2db      	uxtb	r3, r3
    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 80015ca:	3b01      	subs	r3, #1
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	e000      	b.n	80015d2 <setVcselPulsePeriod+0xee>
 80015d0:	23ff      	movs	r3, #255	@ 0xff
 80015d2:	4619      	mov	r1, r3
 80015d4:	2046      	movs	r0, #70	@ 0x46
 80015d6:	f7ff faf3 	bl	8000bc0 <writeReg>
 80015da:	e0b1      	b.n	8001740 <setVcselPulsePeriod+0x25c>

    // set_sequence_step_timeout() end
  }
  else if (type == VcselPeriodFinalRange)
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	f040 80ac 	bne.w	800173c <setVcselPulsePeriod+0x258>
  {
    switch (period_pclks)
 80015e4:	79bb      	ldrb	r3, [r7, #6]
 80015e6:	3b08      	subs	r3, #8
 80015e8:	2b06      	cmp	r3, #6
 80015ea:	f200 8085 	bhi.w	80016f8 <setVcselPulsePeriod+0x214>
 80015ee:	a201      	add	r2, pc, #4	@ (adr r2, 80015f4 <setVcselPulsePeriod+0x110>)
 80015f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f4:	08001611 	.word	0x08001611
 80015f8:	080016f9 	.word	0x080016f9
 80015fc:	0800164b 	.word	0x0800164b
 8001600:	080016f9 	.word	0x080016f9
 8001604:	08001685 	.word	0x08001685
 8001608:	080016f9 	.word	0x080016f9
 800160c:	080016bf 	.word	0x080016bf
    {
      case 8:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10);
 8001610:	2110      	movs	r1, #16
 8001612:	2048      	movs	r0, #72	@ 0x48
 8001614:	f7ff fad4 	bl	8000bc0 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001618:	2108      	movs	r1, #8
 800161a:	2047      	movs	r0, #71	@ 0x47
 800161c:	f7ff fad0 	bl	8000bc0 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
 8001620:	2102      	movs	r1, #2
 8001622:	2032      	movs	r0, #50	@ 0x32
 8001624:	f7ff facc 	bl	8000bc0 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);
 8001628:	210c      	movs	r1, #12
 800162a:	2030      	movs	r0, #48	@ 0x30
 800162c:	f7ff fac8 	bl	8000bc0 <writeReg>
        writeReg(0xFF, 0x01);
 8001630:	2101      	movs	r1, #1
 8001632:	20ff      	movs	r0, #255	@ 0xff
 8001634:	f7ff fac4 	bl	8000bc0 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x30);
 8001638:	2130      	movs	r1, #48	@ 0x30
 800163a:	2030      	movs	r0, #48	@ 0x30
 800163c:	f7ff fac0 	bl	8000bc0 <writeReg>
        writeReg(0xFF, 0x00);
 8001640:	2100      	movs	r1, #0
 8001642:	20ff      	movs	r0, #255	@ 0xff
 8001644:	f7ff fabc 	bl	8000bc0 <writeReg>
        break;
 8001648:	e058      	b.n	80016fc <setVcselPulsePeriod+0x218>

      case 10:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28);
 800164a:	2128      	movs	r1, #40	@ 0x28
 800164c:	2048      	movs	r0, #72	@ 0x48
 800164e:	f7ff fab7 	bl	8000bc0 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001652:	2108      	movs	r1, #8
 8001654:	2047      	movs	r0, #71	@ 0x47
 8001656:	f7ff fab3 	bl	8000bc0 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 800165a:	2103      	movs	r1, #3
 800165c:	2032      	movs	r0, #50	@ 0x32
 800165e:	f7ff faaf 	bl	8000bc0 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);
 8001662:	2109      	movs	r1, #9
 8001664:	2030      	movs	r0, #48	@ 0x30
 8001666:	f7ff faab 	bl	8000bc0 <writeReg>
        writeReg(0xFF, 0x01);
 800166a:	2101      	movs	r1, #1
 800166c:	20ff      	movs	r0, #255	@ 0xff
 800166e:	f7ff faa7 	bl	8000bc0 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8001672:	2120      	movs	r1, #32
 8001674:	2030      	movs	r0, #48	@ 0x30
 8001676:	f7ff faa3 	bl	8000bc0 <writeReg>
        writeReg(0xFF, 0x00);
 800167a:	2100      	movs	r1, #0
 800167c:	20ff      	movs	r0, #255	@ 0xff
 800167e:	f7ff fa9f 	bl	8000bc0 <writeReg>
        break;
 8001682:	e03b      	b.n	80016fc <setVcselPulsePeriod+0x218>

      case 12:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38);
 8001684:	2138      	movs	r1, #56	@ 0x38
 8001686:	2048      	movs	r0, #72	@ 0x48
 8001688:	f7ff fa9a 	bl	8000bc0 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 800168c:	2108      	movs	r1, #8
 800168e:	2047      	movs	r0, #71	@ 0x47
 8001690:	f7ff fa96 	bl	8000bc0 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8001694:	2103      	movs	r1, #3
 8001696:	2032      	movs	r0, #50	@ 0x32
 8001698:	f7ff fa92 	bl	8000bc0 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);
 800169c:	2108      	movs	r1, #8
 800169e:	2030      	movs	r0, #48	@ 0x30
 80016a0:	f7ff fa8e 	bl	8000bc0 <writeReg>
        writeReg(0xFF, 0x01);
 80016a4:	2101      	movs	r1, #1
 80016a6:	20ff      	movs	r0, #255	@ 0xff
 80016a8:	f7ff fa8a 	bl	8000bc0 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 80016ac:	2120      	movs	r1, #32
 80016ae:	2030      	movs	r0, #48	@ 0x30
 80016b0:	f7ff fa86 	bl	8000bc0 <writeReg>
        writeReg(0xFF, 0x00);
 80016b4:	2100      	movs	r1, #0
 80016b6:	20ff      	movs	r0, #255	@ 0xff
 80016b8:	f7ff fa82 	bl	8000bc0 <writeReg>
        break;
 80016bc:	e01e      	b.n	80016fc <setVcselPulsePeriod+0x218>

      case 14:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48);
 80016be:	2148      	movs	r1, #72	@ 0x48
 80016c0:	2048      	movs	r0, #72	@ 0x48
 80016c2:	f7ff fa7d 	bl	8000bc0 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80016c6:	2108      	movs	r1, #8
 80016c8:	2047      	movs	r0, #71	@ 0x47
 80016ca:	f7ff fa79 	bl	8000bc0 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 80016ce:	2103      	movs	r1, #3
 80016d0:	2032      	movs	r0, #50	@ 0x32
 80016d2:	f7ff fa75 	bl	8000bc0 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);
 80016d6:	2107      	movs	r1, #7
 80016d8:	2030      	movs	r0, #48	@ 0x30
 80016da:	f7ff fa71 	bl	8000bc0 <writeReg>
        writeReg(0xFF, 0x01);
 80016de:	2101      	movs	r1, #1
 80016e0:	20ff      	movs	r0, #255	@ 0xff
 80016e2:	f7ff fa6d 	bl	8000bc0 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 80016e6:	2120      	movs	r1, #32
 80016e8:	2030      	movs	r0, #48	@ 0x30
 80016ea:	f7ff fa69 	bl	8000bc0 <writeReg>
        writeReg(0xFF, 0x00);
 80016ee:	2100      	movs	r1, #0
 80016f0:	20ff      	movs	r0, #255	@ 0xff
 80016f2:	f7ff fa65 	bl	8000bc0 <writeReg>
        break;
 80016f6:	e001      	b.n	80016fc <setVcselPulsePeriod+0x218>

      default:
        // invalid period
        return false;
 80016f8:	2300      	movs	r3, #0
 80016fa:	e03a      	b.n	8001772 <setVcselPulsePeriod+0x28e>
    }

    // apply new VCSEL period
    writeReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 80016fc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001700:	4619      	mov	r1, r3
 8001702:	2070      	movs	r0, #112	@ 0x70
 8001704:	f7ff fa5c 	bl	8000bc0 <writeReg>
    //  must be added. To do this both final and pre-range
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t new_final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.final_range_us, period_pclks);
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	79ba      	ldrb	r2, [r7, #6]
 800170c:	4611      	mov	r1, r2
 800170e:	4618      	mov	r0, r3
 8001710:	f000 faba 	bl	8001c88 <timeoutMicrosecondsToMclks>
 8001714:	4603      	mov	r3, r0
    uint16_t new_final_range_timeout_mclks =
 8001716:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    if (enables.pre_range)
 8001718:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <setVcselPulsePeriod+0x244>
    {
      new_final_range_timeout_mclks += timeouts.pre_range_mclks;
 8001720:	89fa      	ldrh	r2, [r7, #14]
 8001722:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001724:	4413      	add	r3, r2
 8001726:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8001728:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800172a:	4618      	mov	r0, r3
 800172c:	f000 fa5a 	bl	8001be4 <encodeTimeout>
 8001730:	4603      	mov	r3, r0
 8001732:	4619      	mov	r1, r3
 8001734:	2071      	movs	r0, #113	@ 0x71
 8001736:	f7ff fa6d 	bl	8000c14 <writeReg16Bit>
 800173a:	e001      	b.n	8001740 <setVcselPulsePeriod+0x25c>
    // set_sequence_step_timeout end
  }
  else
  {
    // invalid type
    return false;
 800173c:	2300      	movs	r3, #0
 800173e:	e018      	b.n	8001772 <setVcselPulsePeriod+0x28e>
  }

  // "Finally, the timing budget must be re-applied"

  setMeasurementTimingBudget(g_measTimBudUs);
 8001740:	4b0e      	ldr	r3, [pc, #56]	@ (800177c <setVcselPulsePeriod+0x298>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fdd3 	bl	80012f0 <setMeasurementTimingBudget>

  // "Perform the phase calibration. This is needed after changing on vcsel period."
  // VL53L0X_perform_phase_calibration() begin

  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 800174a:	2001      	movs	r0, #1
 800174c:	f7ff fa8c 	bl	8000c68 <readReg>
 8001750:	4603      	mov	r3, r0
 8001752:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8001756:	2102      	movs	r1, #2
 8001758:	2001      	movs	r0, #1
 800175a:	f7ff fa31 	bl	8000bc0 <writeReg>
  performSingleRefCalibration(0x0);
 800175e:	2000      	movs	r0, #0
 8001760:	f000 fab8 	bl	8001cd4 <performSingleRefCalibration>
  writeReg(SYSTEM_SEQUENCE_CONFIG, sequence_config);
 8001764:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001768:	4619      	mov	r1, r3
 800176a:	2001      	movs	r0, #1
 800176c:	f7ff fa28 	bl	8000bc0 <writeReg>

  // VL53L0X_perform_phase_calibration() end

  return true;
 8001770:	2301      	movs	r3, #1
}
 8001772:	4618      	mov	r0, r3
 8001774:	3730      	adds	r7, #48	@ 0x30
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000034 	.word	0x20000034

08001780 <getVcselPulsePeriod>:

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t getVcselPulsePeriod(vcselPeriodType type)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	71fb      	strb	r3, [r7, #7]
  if (type == VcselPeriodPreRange)
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d108      	bne.n	80017a2 <getVcselPulsePeriod+0x22>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
 8001790:	2050      	movs	r0, #80	@ 0x50
 8001792:	f7ff fa69 	bl	8000c68 <readReg>
 8001796:	4603      	mov	r3, r0
 8001798:	3301      	adds	r3, #1
 800179a:	b2db      	uxtb	r3, r3
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	e00c      	b.n	80017bc <getVcselPulsePeriod+0x3c>
  }
  else if (type == VcselPeriodFinalRange)
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d108      	bne.n	80017ba <getVcselPulsePeriod+0x3a>
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80017a8:	2070      	movs	r0, #112	@ 0x70
 80017aa:	f7ff fa5d 	bl	8000c68 <readReg>
 80017ae:	4603      	mov	r3, r0
 80017b0:	3301      	adds	r3, #1
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	e000      	b.n	80017bc <getVcselPulsePeriod+0x3c>
  }
  else { return 255; }
 80017ba:	23ff      	movs	r3, #255	@ 0xff
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <readRangeContinuousMillimeters>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t readRangeContinuousMillimeters( statInfo_t_VL53L0X *extraStats ) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint8_t tempBuffer[12];
  uint16_t temp;
  startTimeout();
 80017cc:	f000 fda6 	bl	800231c <HAL_GetTick>
 80017d0:	4603      	mov	r3, r0
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	4b33      	ldr	r3, [pc, #204]	@ (80018a4 <readRangeContinuousMillimeters+0xe0>)
 80017d6:	801a      	strh	r2, [r3, #0]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0) {
 80017d8:	e015      	b.n	8001806 <readRangeContinuousMillimeters+0x42>
    if (checkTimeoutExpired())
 80017da:	4b33      	ldr	r3, [pc, #204]	@ (80018a8 <readRangeContinuousMillimeters+0xe4>)
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d011      	beq.n	8001806 <readRangeContinuousMillimeters+0x42>
 80017e2:	f000 fd9b 	bl	800231c <HAL_GetTick>
 80017e6:	4603      	mov	r3, r0
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	461a      	mov	r2, r3
 80017ec:	4b2d      	ldr	r3, [pc, #180]	@ (80018a4 <readRangeContinuousMillimeters+0xe0>)
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	4a2d      	ldr	r2, [pc, #180]	@ (80018a8 <readRangeContinuousMillimeters+0xe4>)
 80017f4:	8812      	ldrh	r2, [r2, #0]
 80017f6:	4293      	cmp	r3, r2
 80017f8:	dd05      	ble.n	8001806 <readRangeContinuousMillimeters+0x42>
    {
      g_isTimeout = true;
 80017fa:	4b2c      	ldr	r3, [pc, #176]	@ (80018ac <readRangeContinuousMillimeters+0xe8>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	701a      	strb	r2, [r3, #0]
      return 65535;
 8001800:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001804:	e04a      	b.n	800189c <readRangeContinuousMillimeters+0xd8>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0) {
 8001806:	2013      	movs	r0, #19
 8001808:	f7ff fa2e 	bl	8000c68 <readReg>
 800180c:	4603      	mov	r3, r0
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0e1      	beq.n	80017da <readRangeContinuousMillimeters+0x16>
    }
  }
  if( extraStats == 0 ){
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d105      	bne.n	8001828 <readRangeContinuousMillimeters+0x64>
    // assumptions: Linearity Corrective Gain is 1000 (default);
    // fractional ranging is not enabled
    temp = readReg16Bit(RESULT_RANGE_STATUS + 10);
 800181c:	201e      	movs	r0, #30
 800181e:	f7ff fa4f 	bl	8000cc0 <readReg16Bit>
 8001822:	4603      	mov	r3, r0
 8001824:	82fb      	strh	r3, [r7, #22]
 8001826:	e034      	b.n	8001892 <readRangeContinuousMillimeters+0xce>
    //   4: 0 ?
    //   5: ???
    // 6,7: signal count rate [mcps], uint16_t, fixpoint9.7
    // 9,8: AmbientRateRtnMegaCps  [mcps], uint16_t, fixpoimt9.7
    // A,B: uncorrected distance [mm], uint16_t
    readMulti(0x14, tempBuffer, 12);
 8001828:	f107 0308 	add.w	r3, r7, #8
 800182c:	220c      	movs	r2, #12
 800182e:	4619      	mov	r1, r3
 8001830:	2014      	movs	r0, #20
 8001832:	f7ff fa9f 	bl	8000d74 <readMulti>
    extraStats->rangeStatus =  tempBuffer[0x00]>>3;
 8001836:	7a3b      	ldrb	r3, [r7, #8]
 8001838:	08db      	lsrs	r3, r3, #3
 800183a:	b2da      	uxtb	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	721a      	strb	r2, [r3, #8]
    extraStats->spadCnt     = (tempBuffer[0x02]<<8) | tempBuffer[0x03];
 8001840:	7abb      	ldrb	r3, [r7, #10]
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	b21a      	sxth	r2, r3
 8001846:	7afb      	ldrb	r3, [r7, #11]
 8001848:	b21b      	sxth	r3, r3
 800184a:	4313      	orrs	r3, r2
 800184c:	b21b      	sxth	r3, r3
 800184e:	b29a      	uxth	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	80da      	strh	r2, [r3, #6]
    extraStats->signalCnt   = (tempBuffer[0x06]<<8) | tempBuffer[0x07];
 8001854:	7bbb      	ldrb	r3, [r7, #14]
 8001856:	021b      	lsls	r3, r3, #8
 8001858:	b21a      	sxth	r2, r3
 800185a:	7bfb      	ldrb	r3, [r7, #15]
 800185c:	b21b      	sxth	r3, r3
 800185e:	4313      	orrs	r3, r2
 8001860:	b21b      	sxth	r3, r3
 8001862:	b29a      	uxth	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	805a      	strh	r2, [r3, #2]
    extraStats->ambientCnt  = (tempBuffer[0x08]<<8) | tempBuffer[0x09];
 8001868:	7c3b      	ldrb	r3, [r7, #16]
 800186a:	021b      	lsls	r3, r3, #8
 800186c:	b21a      	sxth	r2, r3
 800186e:	7c7b      	ldrb	r3, [r7, #17]
 8001870:	b21b      	sxth	r3, r3
 8001872:	4313      	orrs	r3, r2
 8001874:	b21b      	sxth	r3, r3
 8001876:	b29a      	uxth	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	809a      	strh	r2, [r3, #4]
    temp                    = (tempBuffer[0x0A]<<8) | tempBuffer[0x0B];
 800187c:	7cbb      	ldrb	r3, [r7, #18]
 800187e:	021b      	lsls	r3, r3, #8
 8001880:	b21a      	sxth	r2, r3
 8001882:	7cfb      	ldrb	r3, [r7, #19]
 8001884:	b21b      	sxth	r3, r3
 8001886:	4313      	orrs	r3, r2
 8001888:	b21b      	sxth	r3, r3
 800188a:	82fb      	strh	r3, [r7, #22]
    extraStats->rawDistance = temp;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	8afa      	ldrh	r2, [r7, #22]
 8001890:	801a      	strh	r2, [r3, #0]
  }
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001892:	2101      	movs	r1, #1
 8001894:	200b      	movs	r0, #11
 8001896:	f7ff f993 	bl	8000bc0 <writeReg>
  return temp;
 800189a:	8afb      	ldrh	r3, [r7, #22]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000030 	.word	0x20000030
 80018a8:	2000002c 	.word	0x2000002c
 80018ac:	2000002e 	.word	0x2000002e

080018b0 <readRangeSingleMillimeters>:

// Performs a single-shot range measurement and returns the reading in
// millimeters
// based on VL53L0X_PerformSingleRangingMeasurement()
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t readRangeSingleMillimeters( statInfo_t_VL53L0X *extraStats ) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  writeReg(0x80, 0x01);
 80018b8:	2101      	movs	r1, #1
 80018ba:	2080      	movs	r0, #128	@ 0x80
 80018bc:	f7ff f980 	bl	8000bc0 <writeReg>
  writeReg(0xFF, 0x01);
 80018c0:	2101      	movs	r1, #1
 80018c2:	20ff      	movs	r0, #255	@ 0xff
 80018c4:	f7ff f97c 	bl	8000bc0 <writeReg>
  writeReg(0x00, 0x00);
 80018c8:	2100      	movs	r1, #0
 80018ca:	2000      	movs	r0, #0
 80018cc:	f7ff f978 	bl	8000bc0 <writeReg>
  writeReg(0x91, g_stopVariable);
 80018d0:	4b21      	ldr	r3, [pc, #132]	@ (8001958 <readRangeSingleMillimeters+0xa8>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	4619      	mov	r1, r3
 80018d6:	2091      	movs	r0, #145	@ 0x91
 80018d8:	f7ff f972 	bl	8000bc0 <writeReg>
  writeReg(0x00, 0x01);
 80018dc:	2101      	movs	r1, #1
 80018de:	2000      	movs	r0, #0
 80018e0:	f7ff f96e 	bl	8000bc0 <writeReg>
  writeReg(0xFF, 0x00);
 80018e4:	2100      	movs	r1, #0
 80018e6:	20ff      	movs	r0, #255	@ 0xff
 80018e8:	f7ff f96a 	bl	8000bc0 <writeReg>
  writeReg(0x80, 0x00);
 80018ec:	2100      	movs	r1, #0
 80018ee:	2080      	movs	r0, #128	@ 0x80
 80018f0:	f7ff f966 	bl	8000bc0 <writeReg>
  writeReg(SYSRANGE_START, 0x01);
 80018f4:	2101      	movs	r1, #1
 80018f6:	2000      	movs	r0, #0
 80018f8:	f7ff f962 	bl	8000bc0 <writeReg>
  // "Wait until start bit has been cleared"
  startTimeout();
 80018fc:	f000 fd0e 	bl	800231c <HAL_GetTick>
 8001900:	4603      	mov	r3, r0
 8001902:	b29a      	uxth	r2, r3
 8001904:	4b15      	ldr	r3, [pc, #84]	@ (800195c <readRangeSingleMillimeters+0xac>)
 8001906:	801a      	strh	r2, [r3, #0]
  while (readReg(SYSRANGE_START) & 0x01){
 8001908:	e015      	b.n	8001936 <readRangeSingleMillimeters+0x86>
    if (checkTimeoutExpired()){
 800190a:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <readRangeSingleMillimeters+0xb0>)
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d011      	beq.n	8001936 <readRangeSingleMillimeters+0x86>
 8001912:	f000 fd03 	bl	800231c <HAL_GetTick>
 8001916:	4603      	mov	r3, r0
 8001918:	b29b      	uxth	r3, r3
 800191a:	461a      	mov	r2, r3
 800191c:	4b0f      	ldr	r3, [pc, #60]	@ (800195c <readRangeSingleMillimeters+0xac>)
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	4a0f      	ldr	r2, [pc, #60]	@ (8001960 <readRangeSingleMillimeters+0xb0>)
 8001924:	8812      	ldrh	r2, [r2, #0]
 8001926:	4293      	cmp	r3, r2
 8001928:	dd05      	ble.n	8001936 <readRangeSingleMillimeters+0x86>
      g_isTimeout = true;
 800192a:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <readRangeSingleMillimeters+0xb4>)
 800192c:	2201      	movs	r2, #1
 800192e:	701a      	strb	r2, [r3, #0]
      return 65535;
 8001930:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001934:	e00b      	b.n	800194e <readRangeSingleMillimeters+0x9e>
  while (readReg(SYSRANGE_START) & 0x01){
 8001936:	2000      	movs	r0, #0
 8001938:	f7ff f996 	bl	8000c68 <readReg>
 800193c:	4603      	mov	r3, r0
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1e1      	bne.n	800190a <readRangeSingleMillimeters+0x5a>
    }
  }
  return readRangeContinuousMillimeters( extraStats );
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ff3c 	bl	80017c4 <readRangeContinuousMillimeters>
 800194c:	4603      	mov	r3, r0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000032 	.word	0x20000032
 800195c:	20000030 	.word	0x20000030
 8001960:	2000002c 	.word	0x2000002c
 8001964:	2000002e 	.word	0x2000002e

08001968 <getSpadInfo>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  uint8_t tmp;

  writeReg(0x80, 0x01);
 8001972:	2101      	movs	r1, #1
 8001974:	2080      	movs	r0, #128	@ 0x80
 8001976:	f7ff f923 	bl	8000bc0 <writeReg>
  writeReg(0xFF, 0x01);
 800197a:	2101      	movs	r1, #1
 800197c:	20ff      	movs	r0, #255	@ 0xff
 800197e:	f7ff f91f 	bl	8000bc0 <writeReg>
  writeReg(0x00, 0x00);
 8001982:	2100      	movs	r1, #0
 8001984:	2000      	movs	r0, #0
 8001986:	f7ff f91b 	bl	8000bc0 <writeReg>

  writeReg(0xFF, 0x06);
 800198a:	2106      	movs	r1, #6
 800198c:	20ff      	movs	r0, #255	@ 0xff
 800198e:	f7ff f917 	bl	8000bc0 <writeReg>
  writeReg(0x83, readReg(0x83) | 0x04);
 8001992:	2083      	movs	r0, #131	@ 0x83
 8001994:	f7ff f968 	bl	8000c68 <readReg>
 8001998:	4603      	mov	r3, r0
 800199a:	f043 0304 	orr.w	r3, r3, #4
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	4619      	mov	r1, r3
 80019a2:	2083      	movs	r0, #131	@ 0x83
 80019a4:	f7ff f90c 	bl	8000bc0 <writeReg>
  writeReg(0xFF, 0x07);
 80019a8:	2107      	movs	r1, #7
 80019aa:	20ff      	movs	r0, #255	@ 0xff
 80019ac:	f7ff f908 	bl	8000bc0 <writeReg>
  writeReg(0x81, 0x01);
 80019b0:	2101      	movs	r1, #1
 80019b2:	2081      	movs	r0, #129	@ 0x81
 80019b4:	f7ff f904 	bl	8000bc0 <writeReg>

  writeReg(0x80, 0x01);
 80019b8:	2101      	movs	r1, #1
 80019ba:	2080      	movs	r0, #128	@ 0x80
 80019bc:	f7ff f900 	bl	8000bc0 <writeReg>

  writeReg(0x94, 0x6b);
 80019c0:	216b      	movs	r1, #107	@ 0x6b
 80019c2:	2094      	movs	r0, #148	@ 0x94
 80019c4:	f7ff f8fc 	bl	8000bc0 <writeReg>
  writeReg(0x83, 0x00);
 80019c8:	2100      	movs	r1, #0
 80019ca:	2083      	movs	r0, #131	@ 0x83
 80019cc:	f7ff f8f8 	bl	8000bc0 <writeReg>
  startTimeout();
 80019d0:	f000 fca4 	bl	800231c <HAL_GetTick>
 80019d4:	4603      	mov	r3, r0
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001a88 <getSpadInfo+0x120>)
 80019da:	801a      	strh	r2, [r3, #0]
  while (readReg(0x83) == 0x00)
 80019dc:	e011      	b.n	8001a02 <getSpadInfo+0x9a>
  {
    if (checkTimeoutExpired()) { return false; }
 80019de:	4b2b      	ldr	r3, [pc, #172]	@ (8001a8c <getSpadInfo+0x124>)
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d00d      	beq.n	8001a02 <getSpadInfo+0x9a>
 80019e6:	f000 fc99 	bl	800231c <HAL_GetTick>
 80019ea:	4603      	mov	r3, r0
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	461a      	mov	r2, r3
 80019f0:	4b25      	ldr	r3, [pc, #148]	@ (8001a88 <getSpadInfo+0x120>)
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	4a25      	ldr	r2, [pc, #148]	@ (8001a8c <getSpadInfo+0x124>)
 80019f8:	8812      	ldrh	r2, [r2, #0]
 80019fa:	4293      	cmp	r3, r2
 80019fc:	dd01      	ble.n	8001a02 <getSpadInfo+0x9a>
 80019fe:	2300      	movs	r3, #0
 8001a00:	e03d      	b.n	8001a7e <getSpadInfo+0x116>
  while (readReg(0x83) == 0x00)
 8001a02:	2083      	movs	r0, #131	@ 0x83
 8001a04:	f7ff f930 	bl	8000c68 <readReg>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0e7      	beq.n	80019de <getSpadInfo+0x76>
  }
  writeReg(0x83, 0x01);
 8001a0e:	2101      	movs	r1, #1
 8001a10:	2083      	movs	r0, #131	@ 0x83
 8001a12:	f7ff f8d5 	bl	8000bc0 <writeReg>
  tmp = readReg(0x92);
 8001a16:	2092      	movs	r0, #146	@ 0x92
 8001a18:	f7ff f926 	bl	8000c68 <readReg>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	73fb      	strb	r3, [r7, #15]

  *count = tmp & 0x7f;
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	701a      	strb	r2, [r3, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	09db      	lsrs	r3, r3, #7
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	701a      	strb	r2, [r3, #0]

  writeReg(0x81, 0x00);
 8001a36:	2100      	movs	r1, #0
 8001a38:	2081      	movs	r0, #129	@ 0x81
 8001a3a:	f7ff f8c1 	bl	8000bc0 <writeReg>
  writeReg(0xFF, 0x06);
 8001a3e:	2106      	movs	r1, #6
 8001a40:	20ff      	movs	r0, #255	@ 0xff
 8001a42:	f7ff f8bd 	bl	8000bc0 <writeReg>
  writeReg(0x83, readReg(0x83)  & ~0x04);
 8001a46:	2083      	movs	r0, #131	@ 0x83
 8001a48:	f7ff f90e 	bl	8000c68 <readReg>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f023 0304 	bic.w	r3, r3, #4
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	4619      	mov	r1, r3
 8001a56:	2083      	movs	r0, #131	@ 0x83
 8001a58:	f7ff f8b2 	bl	8000bc0 <writeReg>
  writeReg(0xFF, 0x01);
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	20ff      	movs	r0, #255	@ 0xff
 8001a60:	f7ff f8ae 	bl	8000bc0 <writeReg>
  writeReg(0x00, 0x01);
 8001a64:	2101      	movs	r1, #1
 8001a66:	2000      	movs	r0, #0
 8001a68:	f7ff f8aa 	bl	8000bc0 <writeReg>

  writeReg(0xFF, 0x00);
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	20ff      	movs	r0, #255	@ 0xff
 8001a70:	f7ff f8a6 	bl	8000bc0 <writeReg>
  writeReg(0x80, 0x00);
 8001a74:	2100      	movs	r1, #0
 8001a76:	2080      	movs	r0, #128	@ 0x80
 8001a78:	f7ff f8a2 	bl	8000bc0 <writeReg>

  return true;
 8001a7c:	2301      	movs	r3, #1
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000030 	.word	0x20000030
 8001a8c:	2000002c 	.word	0x2000002c

08001a90 <getSequenceStepEnables>:

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void getSequenceStepEnables(SequenceStepEnables * enables)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 8001a98:	2001      	movs	r0, #1
 8001a9a:	f7ff f8e5 	bl	8000c68 <readReg>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	73fb      	strb	r3, [r7, #15]

  enables->tcc          = (sequence_config >> 4) & 0x1;
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	091b      	lsrs	r3, r3, #4
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	701a      	strb	r2, [r3, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	08db      	lsrs	r3, r3, #3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	709a      	strb	r2, [r3, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	089b      	lsrs	r3, r3, #2
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	705a      	strb	r2, [r3, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	099b      	lsrs	r3, r3, #6
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	70da      	strb	r2, [r3, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
 8001ae4:	09db      	lsrs	r3, r3, #7
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	711a      	strb	r2, [r3, #4]
}
 8001aec:	bf00      	nop
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <getSequenceStepTimeouts>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 8001afe:	2000      	movs	r0, #0
 8001b00:	f7ff fe3e 	bl	8001780 <getVcselPulsePeriod>
 8001b04:	4603      	mov	r3, r0
 8001b06:	461a      	mov	r2, r3
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8001b0c:	2046      	movs	r0, #70	@ 0x46
 8001b0e:	f7ff f8ab 	bl	8000c68 <readReg>
 8001b12:	4603      	mov	r3, r0
 8001b14:	3301      	adds	r3, #1
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	4619      	mov	r1, r3
 8001b28:	4610      	mov	r0, r2
 8001b2a:	f000 f885 	bl	8001c38 <timeoutMclksToMicroseconds>
 8001b2e:	4602      	mov	r2, r0
  timeouts->msrc_dss_tcc_us =
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8001b34:	2051      	movs	r0, #81	@ 0x51
 8001b36:	f7ff f8c3 	bl	8000cc0 <readReg16Bit>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f000 f83e 	bl	8001bbe <decodeTimeout>
 8001b42:	4603      	mov	r3, r0
 8001b44:	461a      	mov	r2, r3
  timeouts->pre_range_mclks =
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	4619      	mov	r1, r3
 8001b56:	4610      	mov	r0, r2
 8001b58:	f000 f86e 	bl	8001c38 <timeoutMclksToMicroseconds>
 8001b5c:	4602      	mov	r2, r0
  timeouts->pre_range_us =
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
 8001b62:	2001      	movs	r0, #1
 8001b64:	f7ff fe0c 	bl	8001780 <getVcselPulsePeriod>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8001b70:	2071      	movs	r0, #113	@ 0x71
 8001b72:	f7ff f8a5 	bl	8000cc0 <readReg16Bit>
 8001b76:	4603      	mov	r3, r0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 f820 	bl	8001bbe <decodeTimeout>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	461a      	mov	r2, r3
  timeouts->final_range_mclks =
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	811a      	strh	r2, [r3, #8]

  if (enables->pre_range)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	78db      	ldrb	r3, [r3, #3]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d007      	beq.n	8001b9e <getSequenceStepTimeouts+0xaa>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	891a      	ldrh	r2, [r3, #8]
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	88db      	ldrh	r3, [r3, #6]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4610      	mov	r0, r2
 8001bac:	f000 f844 	bl	8001c38 <timeoutMclksToMicroseconds>
 8001bb0:	4602      	mov	r2, r0
  timeouts->final_range_us =
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	615a      	str	r2, [r3, #20]
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t decodeTimeout(uint16_t reg_val)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 8001bc8:	88fb      	ldrh	r3, [r7, #6]
 8001bca:	b2db      	uxtb	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8001bcc:	88fa      	ldrh	r2, [r7, #6]
 8001bce:	0a12      	lsrs	r2, r2, #8
 8001bd0:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 8001bd2:	4093      	lsls	r3, r2
 8001bd4:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	b29b      	uxth	r3, r3
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr

08001be4 <encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	817b      	strh	r3, [r7, #10]

  if (timeout_mclks > 0)
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d016      	beq.n	8001c2a <encodeTimeout+0x46>
  {
    ls_byte = timeout_mclks - 1;
 8001bfc:	88fb      	ldrh	r3, [r7, #6]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 8001c02:	e005      	b.n	8001c10 <encodeTimeout+0x2c>
    {
      ls_byte >>= 1;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	085b      	lsrs	r3, r3, #1
 8001c08:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 8001c0a:	897b      	ldrh	r3, [r7, #10]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2bff      	cmp	r3, #255	@ 0xff
 8001c14:	d8f6      	bhi.n	8001c04 <encodeTimeout+0x20>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 8001c16:	897b      	ldrh	r3, [r7, #10]
 8001c18:	021b      	lsls	r3, r3, #8
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	4313      	orrs	r3, r2
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	e000      	b.n	8001c2c <encodeTimeout+0x48>
  }
  else { return 0; }
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr
	...

08001c38 <timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	460a      	mov	r2, r1
 8001c42:	80fb      	strh	r3, [r7, #6]
 8001c44:	4613      	mov	r3, r2
 8001c46:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8001c48:	797b      	ldrb	r3, [r7, #5]
 8001c4a:	4a0d      	ldr	r2, [pc, #52]	@ (8001c80 <timeoutMclksToMicroseconds+0x48>)
 8001c4c:	fb02 f303 	mul.w	r3, r2, r3
 8001c50:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001c54:	4a0b      	ldr	r2, [pc, #44]	@ (8001c84 <timeoutMclksToMicroseconds+0x4c>)
 8001c56:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5a:	099b      	lsrs	r3, r3, #6
 8001c5c:	60fb      	str	r3, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8001c5e:	88fb      	ldrh	r3, [r7, #6]
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	fb03 f202 	mul.w	r2, r3, r2
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	085b      	lsrs	r3, r3, #1
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4a05      	ldr	r2, [pc, #20]	@ (8001c84 <timeoutMclksToMicroseconds+0x4c>)
 8001c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c72:	099b      	lsrs	r3, r3, #6
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	003a2f00 	.word	0x003a2f00
 8001c84:	10624dd3 	.word	0x10624dd3

08001c88 <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8001c94:	78fb      	ldrb	r3, [r7, #3]
 8001c96:	4a0d      	ldr	r2, [pc, #52]	@ (8001ccc <timeoutMicrosecondsToMclks+0x44>)
 8001c98:	fb02 f303 	mul.w	r3, r2, r3
 8001c9c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001ca0:	4a0b      	ldr	r2, [pc, #44]	@ (8001cd0 <timeoutMicrosecondsToMclks+0x48>)
 8001ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca6:	099b      	lsrs	r3, r3, #6
 8001ca8:	60fb      	str	r3, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001cb0:	fb03 f202 	mul.w	r2, r3, r2
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	085b      	lsrs	r3, r3, #1
 8001cb8:	441a      	add	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	003a2f00 	.word	0x003a2f00
 8001cd0:	10624dd3 	.word	0x10624dd3

08001cd4 <performSingleRefCalibration>:


// based on VL53L0X_perform_single_ref_calibration()
bool performSingleRefCalibration(uint8_t vhv_init_byte)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	2000      	movs	r0, #0
 8001cea:	f7fe ff69 	bl	8000bc0 <writeReg>

  startTimeout();
 8001cee:	f000 fb15 	bl	800231c <HAL_GetTick>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <performSingleRefCalibration+0x78>)
 8001cf8:	801a      	strh	r2, [r3, #0]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8001cfa:	e011      	b.n	8001d20 <performSingleRefCalibration+0x4c>
  {
    if (checkTimeoutExpired()) { return false; }
 8001cfc:	4b14      	ldr	r3, [pc, #80]	@ (8001d50 <performSingleRefCalibration+0x7c>)
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00d      	beq.n	8001d20 <performSingleRefCalibration+0x4c>
 8001d04:	f000 fb0a 	bl	800231c <HAL_GetTick>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d4c <performSingleRefCalibration+0x78>)
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	4a0e      	ldr	r2, [pc, #56]	@ (8001d50 <performSingleRefCalibration+0x7c>)
 8001d16:	8812      	ldrh	r2, [r2, #0]
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	dd01      	ble.n	8001d20 <performSingleRefCalibration+0x4c>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	e010      	b.n	8001d42 <performSingleRefCalibration+0x6e>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8001d20:	2013      	movs	r0, #19
 8001d22:	f7fe ffa1 	bl	8000c68 <readReg>
 8001d26:	4603      	mov	r3, r0
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0e5      	beq.n	8001cfc <performSingleRefCalibration+0x28>
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001d30:	2101      	movs	r1, #1
 8001d32:	200b      	movs	r0, #11
 8001d34:	f7fe ff44 	bl	8000bc0 <writeReg>

  writeReg(SYSRANGE_START, 0x00);
 8001d38:	2100      	movs	r1, #0
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f7fe ff40 	bl	8000bc0 <writeReg>

  return true;
 8001d40:	2301      	movs	r3, #1
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000030 	.word	0x20000030
 8001d50:	2000002c 	.word	0x2000002c

08001d54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d5a:	4b14      	ldr	r3, [pc, #80]	@ (8001dac <MX_GPIO_Init+0x58>)
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	4a13      	ldr	r2, [pc, #76]	@ (8001dac <MX_GPIO_Init+0x58>)
 8001d60:	f043 0320 	orr.w	r3, r3, #32
 8001d64:	6193      	str	r3, [r2, #24]
 8001d66:	4b11      	ldr	r3, [pc, #68]	@ (8001dac <MX_GPIO_Init+0x58>)
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	f003 0320 	and.w	r3, r3, #32
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	4b0e      	ldr	r3, [pc, #56]	@ (8001dac <MX_GPIO_Init+0x58>)
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	4a0d      	ldr	r2, [pc, #52]	@ (8001dac <MX_GPIO_Init+0x58>)
 8001d78:	f043 0304 	orr.w	r3, r3, #4
 8001d7c:	6193      	str	r3, [r2, #24]
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001dac <MX_GPIO_Init+0x58>)
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8a:	4b08      	ldr	r3, [pc, #32]	@ (8001dac <MX_GPIO_Init+0x58>)
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	4a07      	ldr	r2, [pc, #28]	@ (8001dac <MX_GPIO_Init+0x58>)
 8001d90:	f043 0308 	orr.w	r3, r3, #8
 8001d94:	6193      	str	r3, [r2, #24]
 8001d96:	4b05      	ldr	r3, [pc, #20]	@ (8001dac <MX_GPIO_Init+0x58>)
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	607b      	str	r3, [r7, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]

}
 8001da2:	bf00      	nop
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr
 8001dac:	40021000 	.word	0x40021000

08001db0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001db4:	4b12      	ldr	r3, [pc, #72]	@ (8001e00 <MX_I2C1_Init+0x50>)
 8001db6:	4a13      	ldr	r2, [pc, #76]	@ (8001e04 <MX_I2C1_Init+0x54>)
 8001db8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001dba:	4b11      	ldr	r3, [pc, #68]	@ (8001e00 <MX_I2C1_Init+0x50>)
 8001dbc:	4a12      	ldr	r2, [pc, #72]	@ (8001e08 <MX_I2C1_Init+0x58>)
 8001dbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e00 <MX_I2C1_Init+0x50>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e00 <MX_I2C1_Init+0x50>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e00 <MX_I2C1_Init+0x50>)
 8001dce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001dd2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8001e00 <MX_I2C1_Init+0x50>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001dda:	4b09      	ldr	r3, [pc, #36]	@ (8001e00 <MX_I2C1_Init+0x50>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001de0:	4b07      	ldr	r3, [pc, #28]	@ (8001e00 <MX_I2C1_Init+0x50>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001de6:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <MX_I2C1_Init+0x50>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dec:	4804      	ldr	r0, [pc, #16]	@ (8001e00 <MX_I2C1_Init+0x50>)
 8001dee:	f000 fdb7 	bl	8002960 <HAL_I2C_Init>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001df8:	f000 f8dd 	bl	8001fb6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000094 	.word	0x20000094
 8001e04:	40005400 	.word	0x40005400
 8001e08:	000186a0 	.word	0x000186a0

08001e0c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 0310 	add.w	r3, r7, #16
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a1d      	ldr	r2, [pc, #116]	@ (8001e9c <HAL_I2C_MspInit+0x90>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d133      	bne.n	8001e94 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea0 <HAL_I2C_MspInit+0x94>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	4a1b      	ldr	r2, [pc, #108]	@ (8001ea0 <HAL_I2C_MspInit+0x94>)
 8001e32:	f043 0308 	orr.w	r3, r3, #8
 8001e36:	6193      	str	r3, [r2, #24]
 8001e38:	4b19      	ldr	r3, [pc, #100]	@ (8001ea0 <HAL_I2C_MspInit+0x94>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	f003 0308 	and.w	r3, r3, #8
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e44:	23c0      	movs	r3, #192	@ 0xc0
 8001e46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e48:	2312      	movs	r3, #18
 8001e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e50:	f107 0310 	add.w	r3, r7, #16
 8001e54:	4619      	mov	r1, r3
 8001e56:	4813      	ldr	r0, [pc, #76]	@ (8001ea4 <HAL_I2C_MspInit+0x98>)
 8001e58:	f000 fbfe 	bl	8002658 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e5c:	4b10      	ldr	r3, [pc, #64]	@ (8001ea0 <HAL_I2C_MspInit+0x94>)
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	4a0f      	ldr	r2, [pc, #60]	@ (8001ea0 <HAL_I2C_MspInit+0x94>)
 8001e62:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e66:	61d3      	str	r3, [r2, #28]
 8001e68:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea0 <HAL_I2C_MspInit+0x94>)
 8001e6a:	69db      	ldr	r3, [r3, #28]
 8001e6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001e74:	2200      	movs	r2, #0
 8001e76:	2100      	movs	r1, #0
 8001e78:	201f      	movs	r0, #31
 8001e7a:	f000 fb30 	bl	80024de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e7e:	201f      	movs	r0, #31
 8001e80:	f000 fb49 	bl	8002516 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001e84:	2200      	movs	r2, #0
 8001e86:	2100      	movs	r1, #0
 8001e88:	2020      	movs	r0, #32
 8001e8a:	f000 fb28 	bl	80024de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001e8e:	2020      	movs	r0, #32
 8001e90:	f000 fb41 	bl	8002516 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e94:	bf00      	nop
 8001e96:	3720      	adds	r7, #32
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40005400 	.word	0x40005400
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40010c00 	.word	0x40010c00

08001ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eae:	f000 f9dd 	bl	800226c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eb2:	f000 f83b 	bl	8001f2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001eb6:	f7ff ff4d 	bl	8001d54 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001eba:	f7ff ff79 	bl	8001db0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001ebe:	f000 f921 	bl	8002104 <MX_TIM1_Init>
//  		msgBuffer[i] = ' ';
//  	}

  	// Initialise the VL53L0X
  	statInfo_t_VL53L0X distanceStr;
  	initVL53L0X(1, &hi2c1);
 8001ec2:	4914      	ldr	r1, [pc, #80]	@ (8001f14 <main+0x6c>)
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	f7fe ff7f 	bl	8000dc8 <initVL53L0X>

  	// Configure the sensor for high accuracy and speed in 20 cm.
  	setSignalRateLimit(200);
 8001eca:	4813      	ldr	r0, [pc, #76]	@ (8001f18 <main+0x70>)
 8001ecc:	f7ff f9dc 	bl	8001288 <setSignalRateLimit>
  	setVcselPulsePeriod(VcselPeriodPreRange, 10);
 8001ed0:	210a      	movs	r1, #10
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f7ff fb06 	bl	80014e4 <setVcselPulsePeriod>
  	setVcselPulsePeriod(VcselPeriodFinalRange, 14);
 8001ed8:	210e      	movs	r1, #14
 8001eda:	2001      	movs	r0, #1
 8001edc:	f7ff fb02 	bl	80014e4 <setVcselPulsePeriod>
  	setMeasurementTimingBudget(300 * 1000UL);
 8001ee0:	480e      	ldr	r0, [pc, #56]	@ (8001f1c <main+0x74>)
 8001ee2:	f7ff fa05 	bl	80012f0 <setMeasurementTimingBudget>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  distance = readRangeSingleMillimeters(&distanceStr);
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff fce1 	bl	80018b0 <readRangeSingleMillimeters>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe fc27 	bl	8000744 <__aeabi_ui2f>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	4a09      	ldr	r2, [pc, #36]	@ (8001f20 <main+0x78>)
 8001efa:	6013      	str	r3, [r2, #0]
	  distanceCM = distance/10;
 8001efc:	4b08      	ldr	r3, [pc, #32]	@ (8001f20 <main+0x78>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4908      	ldr	r1, [pc, #32]	@ (8001f24 <main+0x7c>)
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe fd2a 	bl	800095c <__aeabi_fdiv>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	4b06      	ldr	r3, [pc, #24]	@ (8001f28 <main+0x80>)
 8001f0e:	601a      	str	r2, [r3, #0]
	  distance = readRangeSingleMillimeters(&distanceStr);
 8001f10:	bf00      	nop
 8001f12:	e7e8      	b.n	8001ee6 <main+0x3e>
 8001f14:	20000094 	.word	0x20000094
 8001f18:	43480000 	.word	0x43480000
 8001f1c:	000493e0 	.word	0x000493e0
 8001f20:	200000e8 	.word	0x200000e8
 8001f24:	41200000 	.word	0x41200000
 8001f28:	200000ec 	.word	0x200000ec

08001f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b090      	sub	sp, #64	@ 0x40
 8001f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f32:	f107 0318 	add.w	r3, r7, #24
 8001f36:	2228      	movs	r2, #40	@ 0x28
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f004 fa00 	bl	8006340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f40:	1d3b      	adds	r3, r7, #4
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	60da      	str	r2, [r3, #12]
 8001f4c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f52:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f60:	2302      	movs	r3, #2
 8001f62:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f68:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f6a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f70:	f107 0318 	add.w	r3, r7, #24
 8001f74:	4618      	mov	r0, r3
 8001f76:	f003 fa3f 	bl	80053f8 <HAL_RCC_OscConfig>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001f80:	f000 f819 	bl	8001fb6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f84:	230f      	movs	r3, #15
 8001f86:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f9a:	1d3b      	adds	r3, r7, #4
 8001f9c:	2102      	movs	r1, #2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f003 fcac 	bl	80058fc <HAL_RCC_ClockConfig>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001faa:	f000 f804 	bl	8001fb6 <Error_Handler>
  }
}
 8001fae:	bf00      	nop
 8001fb0:	3740      	adds	r7, #64	@ 0x40
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fba:	b672      	cpsid	i
}
 8001fbc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fbe:	bf00      	nop
 8001fc0:	e7fd      	b.n	8001fbe <Error_Handler+0x8>
	...

08001fc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fca:	4b15      	ldr	r3, [pc, #84]	@ (8002020 <HAL_MspInit+0x5c>)
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	4a14      	ldr	r2, [pc, #80]	@ (8002020 <HAL_MspInit+0x5c>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6193      	str	r3, [r2, #24]
 8001fd6:	4b12      	ldr	r3, [pc, #72]	@ (8002020 <HAL_MspInit+0x5c>)
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8002020 <HAL_MspInit+0x5c>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	4a0e      	ldr	r2, [pc, #56]	@ (8002020 <HAL_MspInit+0x5c>)
 8001fe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fec:	61d3      	str	r3, [r2, #28]
 8001fee:	4b0c      	ldr	r3, [pc, #48]	@ (8002020 <HAL_MspInit+0x5c>)
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8002024 <HAL_MspInit+0x60>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	4a04      	ldr	r2, [pc, #16]	@ (8002024 <HAL_MspInit+0x60>)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002016:	bf00      	nop
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr
 8002020:	40021000 	.word	0x40021000
 8002024:	40010000 	.word	0x40010000

08002028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <NMI_Handler+0x4>

08002030 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002034:	bf00      	nop
 8002036:	e7fd      	b.n	8002034 <HardFault_Handler+0x4>

08002038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800203c:	bf00      	nop
 800203e:	e7fd      	b.n	800203c <MemManage_Handler+0x4>

08002040 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002044:	bf00      	nop
 8002046:	e7fd      	b.n	8002044 <BusFault_Handler+0x4>

08002048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800204c:	bf00      	nop
 800204e:	e7fd      	b.n	800204c <UsageFault_Handler+0x4>

08002050 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr

0800205c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr

08002068 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr

08002074 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002078:	f000 f93e 	bl	80022f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}

08002080 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002084:	4802      	ldr	r0, [pc, #8]	@ (8002090 <TIM1_BRK_IRQHandler+0x10>)
 8002086:	f003 fe02 	bl	8005c8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	200000f0 	.word	0x200000f0

08002094 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002098:	4802      	ldr	r0, [pc, #8]	@ (80020a4 <TIM1_UP_IRQHandler+0x10>)
 800209a:	f003 fdf8 	bl	8005c8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	200000f0 	.word	0x200000f0

080020a8 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020ac:	4802      	ldr	r0, [pc, #8]	@ (80020b8 <TIM1_TRG_COM_IRQHandler+0x10>)
 80020ae:	f003 fdee 	bl	8005c8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	200000f0 	.word	0x200000f0

080020bc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020c0:	4802      	ldr	r0, [pc, #8]	@ (80020cc <TIM1_CC_IRQHandler+0x10>)
 80020c2:	f003 fde4 	bl	8005c8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	200000f0 	.word	0x200000f0

080020d0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80020d4:	4802      	ldr	r0, [pc, #8]	@ (80020e0 <I2C1_EV_IRQHandler+0x10>)
 80020d6:	f001 f909 	bl	80032ec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000094 	.word	0x20000094

080020e4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80020e8:	4802      	ldr	r0, [pc, #8]	@ (80020f4 <I2C1_ER_IRQHandler+0x10>)
 80020ea:	f001 fa52 	bl	8003592 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000094 	.word	0x20000094

080020f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr

08002104 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800210a:	f107 0308 	add.w	r3, r7, #8
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	605a      	str	r2, [r3, #4]
 8002114:	609a      	str	r2, [r3, #8]
 8002116:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002118:	463b      	mov	r3, r7
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002120:	4b1e      	ldr	r3, [pc, #120]	@ (800219c <MX_TIM1_Init+0x98>)
 8002122:	4a1f      	ldr	r2, [pc, #124]	@ (80021a0 <MX_TIM1_Init+0x9c>)
 8002124:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002126:	4b1d      	ldr	r3, [pc, #116]	@ (800219c <MX_TIM1_Init+0x98>)
 8002128:	2200      	movs	r2, #0
 800212a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800212c:	4b1b      	ldr	r3, [pc, #108]	@ (800219c <MX_TIM1_Init+0x98>)
 800212e:	2200      	movs	r2, #0
 8002130:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002132:	4b1a      	ldr	r3, [pc, #104]	@ (800219c <MX_TIM1_Init+0x98>)
 8002134:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002138:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800213a:	4b18      	ldr	r3, [pc, #96]	@ (800219c <MX_TIM1_Init+0x98>)
 800213c:	2200      	movs	r2, #0
 800213e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002140:	4b16      	ldr	r3, [pc, #88]	@ (800219c <MX_TIM1_Init+0x98>)
 8002142:	2200      	movs	r2, #0
 8002144:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002146:	4b15      	ldr	r3, [pc, #84]	@ (800219c <MX_TIM1_Init+0x98>)
 8002148:	2200      	movs	r2, #0
 800214a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800214c:	4813      	ldr	r0, [pc, #76]	@ (800219c <MX_TIM1_Init+0x98>)
 800214e:	f003 fd4f 	bl	8005bf0 <HAL_TIM_Base_Init>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002158:	f7ff ff2d 	bl	8001fb6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800215c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002160:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002162:	f107 0308 	add.w	r3, r7, #8
 8002166:	4619      	mov	r1, r3
 8002168:	480c      	ldr	r0, [pc, #48]	@ (800219c <MX_TIM1_Init+0x98>)
 800216a:	f003 fe80 	bl	8005e6e <HAL_TIM_ConfigClockSource>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002174:	f7ff ff1f 	bl	8001fb6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002178:	2300      	movs	r3, #0
 800217a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800217c:	2300      	movs	r3, #0
 800217e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002180:	463b      	mov	r3, r7
 8002182:	4619      	mov	r1, r3
 8002184:	4805      	ldr	r0, [pc, #20]	@ (800219c <MX_TIM1_Init+0x98>)
 8002186:	f004 f86b 	bl	8006260 <HAL_TIMEx_MasterConfigSynchronization>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002190:	f7ff ff11 	bl	8001fb6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002194:	bf00      	nop
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	200000f0 	.word	0x200000f0
 80021a0:	40012c00 	.word	0x40012c00

080021a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a19      	ldr	r2, [pc, #100]	@ (8002218 <HAL_TIM_Base_MspInit+0x74>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d12b      	bne.n	800220e <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021b6:	4b19      	ldr	r3, [pc, #100]	@ (800221c <HAL_TIM_Base_MspInit+0x78>)
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	4a18      	ldr	r2, [pc, #96]	@ (800221c <HAL_TIM_Base_MspInit+0x78>)
 80021bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021c0:	6193      	str	r3, [r2, #24]
 80021c2:	4b16      	ldr	r3, [pc, #88]	@ (800221c <HAL_TIM_Base_MspInit+0x78>)
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2100      	movs	r1, #0
 80021d2:	2018      	movs	r0, #24
 80021d4:	f000 f983 	bl	80024de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80021d8:	2018      	movs	r0, #24
 80021da:	f000 f99c 	bl	8002516 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2100      	movs	r1, #0
 80021e2:	2019      	movs	r0, #25
 80021e4:	f000 f97b 	bl	80024de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80021e8:	2019      	movs	r0, #25
 80021ea:	f000 f994 	bl	8002516 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80021ee:	2200      	movs	r2, #0
 80021f0:	2100      	movs	r1, #0
 80021f2:	201a      	movs	r0, #26
 80021f4:	f000 f973 	bl	80024de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80021f8:	201a      	movs	r0, #26
 80021fa:	f000 f98c 	bl	8002516 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80021fe:	2200      	movs	r2, #0
 8002200:	2100      	movs	r1, #0
 8002202:	201b      	movs	r0, #27
 8002204:	f000 f96b 	bl	80024de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002208:	201b      	movs	r0, #27
 800220a:	f000 f984 	bl	8002516 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800220e:	bf00      	nop
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40012c00 	.word	0x40012c00
 800221c:	40021000 	.word	0x40021000

08002220 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002220:	f7ff ff6a 	bl	80020f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002224:	480b      	ldr	r0, [pc, #44]	@ (8002254 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002226:	490c      	ldr	r1, [pc, #48]	@ (8002258 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002228:	4a0c      	ldr	r2, [pc, #48]	@ (800225c <LoopFillZerobss+0x16>)
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800222c:	e002      	b.n	8002234 <LoopCopyDataInit>

0800222e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800222e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002232:	3304      	adds	r3, #4

08002234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002238:	d3f9      	bcc.n	800222e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223a:	4a09      	ldr	r2, [pc, #36]	@ (8002260 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800223c:	4c09      	ldr	r4, [pc, #36]	@ (8002264 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800223e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002240:	e001      	b.n	8002246 <LoopFillZerobss>

08002242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002244:	3204      	adds	r2, #4

08002246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002248:	d3fb      	bcc.n	8002242 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800224a:	f004 f881 	bl	8006350 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800224e:	f7ff fe2b 	bl	8001ea8 <main>
  bx lr
 8002252:	4770      	bx	lr
  ldr r0, =_sdata
 8002254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002258:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800225c:	08006400 	.word	0x08006400
  ldr r2, =_sbss
 8002260:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002264:	2000013c 	.word	0x2000013c

08002268 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002268:	e7fe      	b.n	8002268 <ADC1_2_IRQHandler>
	...

0800226c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002270:	4b08      	ldr	r3, [pc, #32]	@ (8002294 <HAL_Init+0x28>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a07      	ldr	r2, [pc, #28]	@ (8002294 <HAL_Init+0x28>)
 8002276:	f043 0310 	orr.w	r3, r3, #16
 800227a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800227c:	2003      	movs	r0, #3
 800227e:	f000 f923 	bl	80024c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002282:	200f      	movs	r0, #15
 8002284:	f000 f808 	bl	8002298 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002288:	f7ff fe9c 	bl	8001fc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40022000 	.word	0x40022000

08002298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022a0:	4b12      	ldr	r3, [pc, #72]	@ (80022ec <HAL_InitTick+0x54>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	4b12      	ldr	r3, [pc, #72]	@ (80022f0 <HAL_InitTick+0x58>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	4619      	mov	r1, r3
 80022aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80022b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 f93b 	bl	8002532 <HAL_SYSTICK_Config>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e00e      	b.n	80022e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b0f      	cmp	r3, #15
 80022ca:	d80a      	bhi.n	80022e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022cc:	2200      	movs	r2, #0
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80022d4:	f000 f903 	bl	80024de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022d8:	4a06      	ldr	r2, [pc, #24]	@ (80022f4 <HAL_InitTick+0x5c>)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
 80022e0:	e000      	b.n	80022e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	20000004 	.word	0x20000004
 80022f0:	2000000c 	.word	0x2000000c
 80022f4:	20000008 	.word	0x20000008

080022f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022fc:	4b05      	ldr	r3, [pc, #20]	@ (8002314 <HAL_IncTick+0x1c>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	461a      	mov	r2, r3
 8002302:	4b05      	ldr	r3, [pc, #20]	@ (8002318 <HAL_IncTick+0x20>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4413      	add	r3, r2
 8002308:	4a03      	ldr	r2, [pc, #12]	@ (8002318 <HAL_IncTick+0x20>)
 800230a:	6013      	str	r3, [r2, #0]
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr
 8002314:	2000000c 	.word	0x2000000c
 8002318:	20000138 	.word	0x20000138

0800231c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return uwTick;
 8002320:	4b02      	ldr	r3, [pc, #8]	@ (800232c <HAL_GetTick+0x10>)
 8002322:	681b      	ldr	r3, [r3, #0]
}
 8002324:	4618      	mov	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr
 800232c:	20000138 	.word	0x20000138

08002330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002340:	4b0c      	ldr	r3, [pc, #48]	@ (8002374 <__NVIC_SetPriorityGrouping+0x44>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800234c:	4013      	ands	r3, r2
 800234e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002358:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800235c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002362:	4a04      	ldr	r2, [pc, #16]	@ (8002374 <__NVIC_SetPriorityGrouping+0x44>)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	60d3      	str	r3, [r2, #12]
}
 8002368:	bf00      	nop
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800237c:	4b04      	ldr	r3, [pc, #16]	@ (8002390 <__NVIC_GetPriorityGrouping+0x18>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	0a1b      	lsrs	r3, r3, #8
 8002382:	f003 0307 	and.w	r3, r3, #7
}
 8002386:	4618      	mov	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	db0b      	blt.n	80023be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	f003 021f 	and.w	r2, r3, #31
 80023ac:	4906      	ldr	r1, [pc, #24]	@ (80023c8 <__NVIC_EnableIRQ+0x34>)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	2001      	movs	r0, #1
 80023b6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr
 80023c8:	e000e100 	.word	0xe000e100

080023cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	6039      	str	r1, [r7, #0]
 80023d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	db0a      	blt.n	80023f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	490c      	ldr	r1, [pc, #48]	@ (8002418 <__NVIC_SetPriority+0x4c>)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	0112      	lsls	r2, r2, #4
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	440b      	add	r3, r1
 80023f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f4:	e00a      	b.n	800240c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	4908      	ldr	r1, [pc, #32]	@ (800241c <__NVIC_SetPriority+0x50>)
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	3b04      	subs	r3, #4
 8002404:	0112      	lsls	r2, r2, #4
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	440b      	add	r3, r1
 800240a:	761a      	strb	r2, [r3, #24]
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	bc80      	pop	{r7}
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	e000e100 	.word	0xe000e100
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002420:	b480      	push	{r7}
 8002422:	b089      	sub	sp, #36	@ 0x24
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f1c3 0307 	rsb	r3, r3, #7
 800243a:	2b04      	cmp	r3, #4
 800243c:	bf28      	it	cs
 800243e:	2304      	movcs	r3, #4
 8002440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3304      	adds	r3, #4
 8002446:	2b06      	cmp	r3, #6
 8002448:	d902      	bls.n	8002450 <NVIC_EncodePriority+0x30>
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3b03      	subs	r3, #3
 800244e:	e000      	b.n	8002452 <NVIC_EncodePriority+0x32>
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002454:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43da      	mvns	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	401a      	ands	r2, r3
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002468:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	fa01 f303 	lsl.w	r3, r1, r3
 8002472:	43d9      	mvns	r1, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002478:	4313      	orrs	r3, r2
         );
}
 800247a:	4618      	mov	r0, r3
 800247c:	3724      	adds	r7, #36	@ 0x24
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr

08002484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3b01      	subs	r3, #1
 8002490:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002494:	d301      	bcc.n	800249a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002496:	2301      	movs	r3, #1
 8002498:	e00f      	b.n	80024ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800249a:	4a0a      	ldr	r2, [pc, #40]	@ (80024c4 <SysTick_Config+0x40>)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3b01      	subs	r3, #1
 80024a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024a2:	210f      	movs	r1, #15
 80024a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80024a8:	f7ff ff90 	bl	80023cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024ac:	4b05      	ldr	r3, [pc, #20]	@ (80024c4 <SysTick_Config+0x40>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024b2:	4b04      	ldr	r3, [pc, #16]	@ (80024c4 <SysTick_Config+0x40>)
 80024b4:	2207      	movs	r2, #7
 80024b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	e000e010 	.word	0xe000e010

080024c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7ff ff2d 	bl	8002330 <__NVIC_SetPriorityGrouping>
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024de:	b580      	push	{r7, lr}
 80024e0:	b086      	sub	sp, #24
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	4603      	mov	r3, r0
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	607a      	str	r2, [r7, #4]
 80024ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024f0:	f7ff ff42 	bl	8002378 <__NVIC_GetPriorityGrouping>
 80024f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	68b9      	ldr	r1, [r7, #8]
 80024fa:	6978      	ldr	r0, [r7, #20]
 80024fc:	f7ff ff90 	bl	8002420 <NVIC_EncodePriority>
 8002500:	4602      	mov	r2, r0
 8002502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002506:	4611      	mov	r1, r2
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff ff5f 	bl	80023cc <__NVIC_SetPriority>
}
 800250e:	bf00      	nop
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	4603      	mov	r3, r0
 800251e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff ff35 	bl	8002394 <__NVIC_EnableIRQ>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff ffa2 	bl	8002484 <SysTick_Config>
 8002540:	4603      	mov	r3, r0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d005      	beq.n	8002570 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2204      	movs	r2, #4
 8002568:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	73fb      	strb	r3, [r7, #15]
 800256e:	e051      	b.n	8002614 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 020e 	bic.w	r2, r2, #14
 800257e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0201 	bic.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a22      	ldr	r2, [pc, #136]	@ (8002620 <HAL_DMA_Abort_IT+0xd4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d029      	beq.n	80025ee <HAL_DMA_Abort_IT+0xa2>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a21      	ldr	r2, [pc, #132]	@ (8002624 <HAL_DMA_Abort_IT+0xd8>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d022      	beq.n	80025ea <HAL_DMA_Abort_IT+0x9e>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a1f      	ldr	r2, [pc, #124]	@ (8002628 <HAL_DMA_Abort_IT+0xdc>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d01a      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x98>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a1e      	ldr	r2, [pc, #120]	@ (800262c <HAL_DMA_Abort_IT+0xe0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d012      	beq.n	80025de <HAL_DMA_Abort_IT+0x92>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a1c      	ldr	r2, [pc, #112]	@ (8002630 <HAL_DMA_Abort_IT+0xe4>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d00a      	beq.n	80025d8 <HAL_DMA_Abort_IT+0x8c>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a1b      	ldr	r2, [pc, #108]	@ (8002634 <HAL_DMA_Abort_IT+0xe8>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d102      	bne.n	80025d2 <HAL_DMA_Abort_IT+0x86>
 80025cc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80025d0:	e00e      	b.n	80025f0 <HAL_DMA_Abort_IT+0xa4>
 80025d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025d6:	e00b      	b.n	80025f0 <HAL_DMA_Abort_IT+0xa4>
 80025d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025dc:	e008      	b.n	80025f0 <HAL_DMA_Abort_IT+0xa4>
 80025de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025e2:	e005      	b.n	80025f0 <HAL_DMA_Abort_IT+0xa4>
 80025e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025e8:	e002      	b.n	80025f0 <HAL_DMA_Abort_IT+0xa4>
 80025ea:	2310      	movs	r3, #16
 80025ec:	e000      	b.n	80025f0 <HAL_DMA_Abort_IT+0xa4>
 80025ee:	2301      	movs	r3, #1
 80025f0:	4a11      	ldr	r2, [pc, #68]	@ (8002638 <HAL_DMA_Abort_IT+0xec>)
 80025f2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	4798      	blx	r3
    } 
  }
  return status;
 8002614:	7bfb      	ldrb	r3, [r7, #15]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40020008 	.word	0x40020008
 8002624:	4002001c 	.word	0x4002001c
 8002628:	40020030 	.word	0x40020030
 800262c:	40020044 	.word	0x40020044
 8002630:	40020058 	.word	0x40020058
 8002634:	4002006c 	.word	0x4002006c
 8002638:	40020000 	.word	0x40020000

0800263c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800264a:	b2db      	uxtb	r3, r3
}
 800264c:	4618      	mov	r0, r3
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr
	...

08002658 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002658:	b480      	push	{r7}
 800265a:	b08b      	sub	sp, #44	@ 0x2c
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002662:	2300      	movs	r3, #0
 8002664:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002666:	2300      	movs	r3, #0
 8002668:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800266a:	e169      	b.n	8002940 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800266c:	2201      	movs	r2, #1
 800266e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	69fa      	ldr	r2, [r7, #28]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	429a      	cmp	r2, r3
 8002686:	f040 8158 	bne.w	800293a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	4a9a      	ldr	r2, [pc, #616]	@ (80028f8 <HAL_GPIO_Init+0x2a0>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d05e      	beq.n	8002752 <HAL_GPIO_Init+0xfa>
 8002694:	4a98      	ldr	r2, [pc, #608]	@ (80028f8 <HAL_GPIO_Init+0x2a0>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d875      	bhi.n	8002786 <HAL_GPIO_Init+0x12e>
 800269a:	4a98      	ldr	r2, [pc, #608]	@ (80028fc <HAL_GPIO_Init+0x2a4>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d058      	beq.n	8002752 <HAL_GPIO_Init+0xfa>
 80026a0:	4a96      	ldr	r2, [pc, #600]	@ (80028fc <HAL_GPIO_Init+0x2a4>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d86f      	bhi.n	8002786 <HAL_GPIO_Init+0x12e>
 80026a6:	4a96      	ldr	r2, [pc, #600]	@ (8002900 <HAL_GPIO_Init+0x2a8>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d052      	beq.n	8002752 <HAL_GPIO_Init+0xfa>
 80026ac:	4a94      	ldr	r2, [pc, #592]	@ (8002900 <HAL_GPIO_Init+0x2a8>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d869      	bhi.n	8002786 <HAL_GPIO_Init+0x12e>
 80026b2:	4a94      	ldr	r2, [pc, #592]	@ (8002904 <HAL_GPIO_Init+0x2ac>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d04c      	beq.n	8002752 <HAL_GPIO_Init+0xfa>
 80026b8:	4a92      	ldr	r2, [pc, #584]	@ (8002904 <HAL_GPIO_Init+0x2ac>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d863      	bhi.n	8002786 <HAL_GPIO_Init+0x12e>
 80026be:	4a92      	ldr	r2, [pc, #584]	@ (8002908 <HAL_GPIO_Init+0x2b0>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d046      	beq.n	8002752 <HAL_GPIO_Init+0xfa>
 80026c4:	4a90      	ldr	r2, [pc, #576]	@ (8002908 <HAL_GPIO_Init+0x2b0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d85d      	bhi.n	8002786 <HAL_GPIO_Init+0x12e>
 80026ca:	2b12      	cmp	r3, #18
 80026cc:	d82a      	bhi.n	8002724 <HAL_GPIO_Init+0xcc>
 80026ce:	2b12      	cmp	r3, #18
 80026d0:	d859      	bhi.n	8002786 <HAL_GPIO_Init+0x12e>
 80026d2:	a201      	add	r2, pc, #4	@ (adr r2, 80026d8 <HAL_GPIO_Init+0x80>)
 80026d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d8:	08002753 	.word	0x08002753
 80026dc:	0800272d 	.word	0x0800272d
 80026e0:	0800273f 	.word	0x0800273f
 80026e4:	08002781 	.word	0x08002781
 80026e8:	08002787 	.word	0x08002787
 80026ec:	08002787 	.word	0x08002787
 80026f0:	08002787 	.word	0x08002787
 80026f4:	08002787 	.word	0x08002787
 80026f8:	08002787 	.word	0x08002787
 80026fc:	08002787 	.word	0x08002787
 8002700:	08002787 	.word	0x08002787
 8002704:	08002787 	.word	0x08002787
 8002708:	08002787 	.word	0x08002787
 800270c:	08002787 	.word	0x08002787
 8002710:	08002787 	.word	0x08002787
 8002714:	08002787 	.word	0x08002787
 8002718:	08002787 	.word	0x08002787
 800271c:	08002735 	.word	0x08002735
 8002720:	08002749 	.word	0x08002749
 8002724:	4a79      	ldr	r2, [pc, #484]	@ (800290c <HAL_GPIO_Init+0x2b4>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d013      	beq.n	8002752 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800272a:	e02c      	b.n	8002786 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	623b      	str	r3, [r7, #32]
          break;
 8002732:	e029      	b.n	8002788 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	3304      	adds	r3, #4
 800273a:	623b      	str	r3, [r7, #32]
          break;
 800273c:	e024      	b.n	8002788 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	3308      	adds	r3, #8
 8002744:	623b      	str	r3, [r7, #32]
          break;
 8002746:	e01f      	b.n	8002788 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	330c      	adds	r3, #12
 800274e:	623b      	str	r3, [r7, #32]
          break;
 8002750:	e01a      	b.n	8002788 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d102      	bne.n	8002760 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800275a:	2304      	movs	r3, #4
 800275c:	623b      	str	r3, [r7, #32]
          break;
 800275e:	e013      	b.n	8002788 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d105      	bne.n	8002774 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002768:	2308      	movs	r3, #8
 800276a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	69fa      	ldr	r2, [r7, #28]
 8002770:	611a      	str	r2, [r3, #16]
          break;
 8002772:	e009      	b.n	8002788 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002774:	2308      	movs	r3, #8
 8002776:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69fa      	ldr	r2, [r7, #28]
 800277c:	615a      	str	r2, [r3, #20]
          break;
 800277e:	e003      	b.n	8002788 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002780:	2300      	movs	r3, #0
 8002782:	623b      	str	r3, [r7, #32]
          break;
 8002784:	e000      	b.n	8002788 <HAL_GPIO_Init+0x130>
          break;
 8002786:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	2bff      	cmp	r3, #255	@ 0xff
 800278c:	d801      	bhi.n	8002792 <HAL_GPIO_Init+0x13a>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	e001      	b.n	8002796 <HAL_GPIO_Init+0x13e>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3304      	adds	r3, #4
 8002796:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	2bff      	cmp	r3, #255	@ 0xff
 800279c:	d802      	bhi.n	80027a4 <HAL_GPIO_Init+0x14c>
 800279e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	e002      	b.n	80027aa <HAL_GPIO_Init+0x152>
 80027a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a6:	3b08      	subs	r3, #8
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	210f      	movs	r1, #15
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	fa01 f303 	lsl.w	r3, r1, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	401a      	ands	r2, r3
 80027bc:	6a39      	ldr	r1, [r7, #32]
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	fa01 f303 	lsl.w	r3, r1, r3
 80027c4:	431a      	orrs	r2, r3
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 80b1 	beq.w	800293a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027d8:	4b4d      	ldr	r3, [pc, #308]	@ (8002910 <HAL_GPIO_Init+0x2b8>)
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	4a4c      	ldr	r2, [pc, #304]	@ (8002910 <HAL_GPIO_Init+0x2b8>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	6193      	str	r3, [r2, #24]
 80027e4:	4b4a      	ldr	r3, [pc, #296]	@ (8002910 <HAL_GPIO_Init+0x2b8>)
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027f0:	4a48      	ldr	r2, [pc, #288]	@ (8002914 <HAL_GPIO_Init+0x2bc>)
 80027f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f4:	089b      	lsrs	r3, r3, #2
 80027f6:	3302      	adds	r3, #2
 80027f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	220f      	movs	r2, #15
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	4013      	ands	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a40      	ldr	r2, [pc, #256]	@ (8002918 <HAL_GPIO_Init+0x2c0>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d013      	beq.n	8002844 <HAL_GPIO_Init+0x1ec>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a3f      	ldr	r2, [pc, #252]	@ (800291c <HAL_GPIO_Init+0x2c4>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d00d      	beq.n	8002840 <HAL_GPIO_Init+0x1e8>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a3e      	ldr	r2, [pc, #248]	@ (8002920 <HAL_GPIO_Init+0x2c8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d007      	beq.n	800283c <HAL_GPIO_Init+0x1e4>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a3d      	ldr	r2, [pc, #244]	@ (8002924 <HAL_GPIO_Init+0x2cc>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d101      	bne.n	8002838 <HAL_GPIO_Init+0x1e0>
 8002834:	2303      	movs	r3, #3
 8002836:	e006      	b.n	8002846 <HAL_GPIO_Init+0x1ee>
 8002838:	2304      	movs	r3, #4
 800283a:	e004      	b.n	8002846 <HAL_GPIO_Init+0x1ee>
 800283c:	2302      	movs	r3, #2
 800283e:	e002      	b.n	8002846 <HAL_GPIO_Init+0x1ee>
 8002840:	2301      	movs	r3, #1
 8002842:	e000      	b.n	8002846 <HAL_GPIO_Init+0x1ee>
 8002844:	2300      	movs	r3, #0
 8002846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002848:	f002 0203 	and.w	r2, r2, #3
 800284c:	0092      	lsls	r2, r2, #2
 800284e:	4093      	lsls	r3, r2
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	4313      	orrs	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002856:	492f      	ldr	r1, [pc, #188]	@ (8002914 <HAL_GPIO_Init+0x2bc>)
 8002858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285a:	089b      	lsrs	r3, r3, #2
 800285c:	3302      	adds	r3, #2
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d006      	beq.n	800287e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002870:	4b2d      	ldr	r3, [pc, #180]	@ (8002928 <HAL_GPIO_Init+0x2d0>)
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	492c      	ldr	r1, [pc, #176]	@ (8002928 <HAL_GPIO_Init+0x2d0>)
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	4313      	orrs	r3, r2
 800287a:	608b      	str	r3, [r1, #8]
 800287c:	e006      	b.n	800288c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800287e:	4b2a      	ldr	r3, [pc, #168]	@ (8002928 <HAL_GPIO_Init+0x2d0>)
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	43db      	mvns	r3, r3
 8002886:	4928      	ldr	r1, [pc, #160]	@ (8002928 <HAL_GPIO_Init+0x2d0>)
 8002888:	4013      	ands	r3, r2
 800288a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d006      	beq.n	80028a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002898:	4b23      	ldr	r3, [pc, #140]	@ (8002928 <HAL_GPIO_Init+0x2d0>)
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	4922      	ldr	r1, [pc, #136]	@ (8002928 <HAL_GPIO_Init+0x2d0>)
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	60cb      	str	r3, [r1, #12]
 80028a4:	e006      	b.n	80028b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028a6:	4b20      	ldr	r3, [pc, #128]	@ (8002928 <HAL_GPIO_Init+0x2d0>)
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	43db      	mvns	r3, r3
 80028ae:	491e      	ldr	r1, [pc, #120]	@ (8002928 <HAL_GPIO_Init+0x2d0>)
 80028b0:	4013      	ands	r3, r2
 80028b2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d006      	beq.n	80028ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028c0:	4b19      	ldr	r3, [pc, #100]	@ (8002928 <HAL_GPIO_Init+0x2d0>)
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	4918      	ldr	r1, [pc, #96]	@ (8002928 <HAL_GPIO_Init+0x2d0>)
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	604b      	str	r3, [r1, #4]
 80028cc:	e006      	b.n	80028dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028ce:	4b16      	ldr	r3, [pc, #88]	@ (8002928 <HAL_GPIO_Init+0x2d0>)
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	43db      	mvns	r3, r3
 80028d6:	4914      	ldr	r1, [pc, #80]	@ (8002928 <HAL_GPIO_Init+0x2d0>)
 80028d8:	4013      	ands	r3, r2
 80028da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d021      	beq.n	800292c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002928 <HAL_GPIO_Init+0x2d0>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	490e      	ldr	r1, [pc, #56]	@ (8002928 <HAL_GPIO_Init+0x2d0>)
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	600b      	str	r3, [r1, #0]
 80028f4:	e021      	b.n	800293a <HAL_GPIO_Init+0x2e2>
 80028f6:	bf00      	nop
 80028f8:	10320000 	.word	0x10320000
 80028fc:	10310000 	.word	0x10310000
 8002900:	10220000 	.word	0x10220000
 8002904:	10210000 	.word	0x10210000
 8002908:	10120000 	.word	0x10120000
 800290c:	10110000 	.word	0x10110000
 8002910:	40021000 	.word	0x40021000
 8002914:	40010000 	.word	0x40010000
 8002918:	40010800 	.word	0x40010800
 800291c:	40010c00 	.word	0x40010c00
 8002920:	40011000 	.word	0x40011000
 8002924:	40011400 	.word	0x40011400
 8002928:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800292c:	4b0b      	ldr	r3, [pc, #44]	@ (800295c <HAL_GPIO_Init+0x304>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	43db      	mvns	r3, r3
 8002934:	4909      	ldr	r1, [pc, #36]	@ (800295c <HAL_GPIO_Init+0x304>)
 8002936:	4013      	ands	r3, r2
 8002938:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293c:	3301      	adds	r3, #1
 800293e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002946:	fa22 f303 	lsr.w	r3, r2, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	f47f ae8e 	bne.w	800266c <HAL_GPIO_Init+0x14>
  }
}
 8002950:	bf00      	nop
 8002952:	bf00      	nop
 8002954:	372c      	adds	r7, #44	@ 0x2c
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr
 800295c:	40010400 	.word	0x40010400

08002960 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e12b      	b.n	8002bca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d106      	bne.n	800298c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7ff fa40 	bl	8001e0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2224      	movs	r2, #36	@ 0x24
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0201 	bic.w	r2, r2, #1
 80029a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029c4:	f003 f8e2 	bl	8005b8c <HAL_RCC_GetPCLK1Freq>
 80029c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	4a81      	ldr	r2, [pc, #516]	@ (8002bd4 <HAL_I2C_Init+0x274>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d807      	bhi.n	80029e4 <HAL_I2C_Init+0x84>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4a80      	ldr	r2, [pc, #512]	@ (8002bd8 <HAL_I2C_Init+0x278>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	bf94      	ite	ls
 80029dc:	2301      	movls	r3, #1
 80029de:	2300      	movhi	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	e006      	b.n	80029f2 <HAL_I2C_Init+0x92>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4a7d      	ldr	r2, [pc, #500]	@ (8002bdc <HAL_I2C_Init+0x27c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	bf94      	ite	ls
 80029ec:	2301      	movls	r3, #1
 80029ee:	2300      	movhi	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e0e7      	b.n	8002bca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4a78      	ldr	r2, [pc, #480]	@ (8002be0 <HAL_I2C_Init+0x280>)
 80029fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002a02:	0c9b      	lsrs	r3, r3, #18
 8002a04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	4a6a      	ldr	r2, [pc, #424]	@ (8002bd4 <HAL_I2C_Init+0x274>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d802      	bhi.n	8002a34 <HAL_I2C_Init+0xd4>
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	3301      	adds	r3, #1
 8002a32:	e009      	b.n	8002a48 <HAL_I2C_Init+0xe8>
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a3a:	fb02 f303 	mul.w	r3, r2, r3
 8002a3e:	4a69      	ldr	r2, [pc, #420]	@ (8002be4 <HAL_I2C_Init+0x284>)
 8002a40:	fba2 2303 	umull	r2, r3, r2, r3
 8002a44:	099b      	lsrs	r3, r3, #6
 8002a46:	3301      	adds	r3, #1
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a5a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	495c      	ldr	r1, [pc, #368]	@ (8002bd4 <HAL_I2C_Init+0x274>)
 8002a64:	428b      	cmp	r3, r1
 8002a66:	d819      	bhi.n	8002a9c <HAL_I2C_Init+0x13c>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	1e59      	subs	r1, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a76:	1c59      	adds	r1, r3, #1
 8002a78:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002a7c:	400b      	ands	r3, r1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00a      	beq.n	8002a98 <HAL_I2C_Init+0x138>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1e59      	subs	r1, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a90:	3301      	adds	r3, #1
 8002a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a96:	e051      	b.n	8002b3c <HAL_I2C_Init+0x1dc>
 8002a98:	2304      	movs	r3, #4
 8002a9a:	e04f      	b.n	8002b3c <HAL_I2C_Init+0x1dc>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d111      	bne.n	8002ac8 <HAL_I2C_Init+0x168>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1e58      	subs	r0, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6859      	ldr	r1, [r3, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	440b      	add	r3, r1
 8002ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	bf0c      	ite	eq
 8002ac0:	2301      	moveq	r3, #1
 8002ac2:	2300      	movne	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	e012      	b.n	8002aee <HAL_I2C_Init+0x18e>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	1e58      	subs	r0, r3, #1
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6859      	ldr	r1, [r3, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	0099      	lsls	r1, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ade:	3301      	adds	r3, #1
 8002ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	bf0c      	ite	eq
 8002ae8:	2301      	moveq	r3, #1
 8002aea:	2300      	movne	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_I2C_Init+0x196>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e022      	b.n	8002b3c <HAL_I2C_Init+0x1dc>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10e      	bne.n	8002b1c <HAL_I2C_Init+0x1bc>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	1e58      	subs	r0, r3, #1
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6859      	ldr	r1, [r3, #4]
 8002b06:	460b      	mov	r3, r1
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	440b      	add	r3, r1
 8002b0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b10:	3301      	adds	r3, #1
 8002b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b1a:	e00f      	b.n	8002b3c <HAL_I2C_Init+0x1dc>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	1e58      	subs	r0, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6859      	ldr	r1, [r3, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	0099      	lsls	r1, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b32:	3301      	adds	r3, #1
 8002b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	6809      	ldr	r1, [r1, #0]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69da      	ldr	r2, [r3, #28]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b6a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6911      	ldr	r1, [r2, #16]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	68d2      	ldr	r2, [r2, #12]
 8002b76:	4311      	orrs	r1, r2
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	430b      	orrs	r3, r1
 8002b7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695a      	ldr	r2, [r3, #20]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0201 	orr.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	000186a0 	.word	0x000186a0
 8002bd8:	001e847f 	.word	0x001e847f
 8002bdc:	003d08ff 	.word	0x003d08ff
 8002be0:	431bde83 	.word	0x431bde83
 8002be4:	10624dd3 	.word	0x10624dd3

08002be8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bfa:	2b80      	cmp	r3, #128	@ 0x80
 8002bfc:	d103      	bne.n	8002c06 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2200      	movs	r2, #0
 8002c04:	611a      	str	r2, [r3, #16]
  }
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af02      	add	r7, sp, #8
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	4608      	mov	r0, r1
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4603      	mov	r3, r0
 8002c20:	817b      	strh	r3, [r7, #10]
 8002c22:	460b      	mov	r3, r1
 8002c24:	813b      	strh	r3, [r7, #8]
 8002c26:	4613      	mov	r3, r2
 8002c28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c2a:	f7ff fb77 	bl	800231c <HAL_GetTick>
 8002c2e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b20      	cmp	r3, #32
 8002c3a:	f040 80d9 	bne.w	8002df0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	2319      	movs	r3, #25
 8002c44:	2201      	movs	r2, #1
 8002c46:	496d      	ldr	r1, [pc, #436]	@ (8002dfc <HAL_I2C_Mem_Write+0x1ec>)
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f002 f953 	bl	8004ef4 <I2C_WaitOnFlagUntilTimeout>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c54:	2302      	movs	r3, #2
 8002c56:	e0cc      	b.n	8002df2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_I2C_Mem_Write+0x56>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e0c5      	b.n	8002df2 <HAL_I2C_Mem_Write+0x1e2>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d007      	beq.n	8002c8c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f042 0201 	orr.w	r2, r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2221      	movs	r2, #33	@ 0x21
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2240      	movs	r2, #64	@ 0x40
 8002ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6a3a      	ldr	r2, [r7, #32]
 8002cb6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002cbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4a4d      	ldr	r2, [pc, #308]	@ (8002e00 <HAL_I2C_Mem_Write+0x1f0>)
 8002ccc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cce:	88f8      	ldrh	r0, [r7, #6]
 8002cd0:	893a      	ldrh	r2, [r7, #8]
 8002cd2:	8979      	ldrh	r1, [r7, #10]
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	9301      	str	r3, [sp, #4]
 8002cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	4603      	mov	r3, r0
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f001 fee2 	bl	8004aa8 <I2C_RequestMemoryWrite>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d052      	beq.n	8002d90 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e081      	b.n	8002df2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f002 fa18 	bl	8005128 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00d      	beq.n	8002d1a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d107      	bne.n	8002d16 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e06b      	b.n	8002df2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1e:	781a      	ldrb	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2a:	1c5a      	adds	r2, r3, #1
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d11b      	bne.n	8002d90 <HAL_I2C_Mem_Write+0x180>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d017      	beq.n	8002d90 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d64:	781a      	ldrb	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1aa      	bne.n	8002cee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f002 fa0b 	bl	80051b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00d      	beq.n	8002dc4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d107      	bne.n	8002dc0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dbe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e016      	b.n	8002df2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	e000      	b.n	8002df2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002df0:	2302      	movs	r3, #2
  }
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	00100002 	.word	0x00100002
 8002e00:	ffff0000 	.word	0xffff0000

08002e04 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08c      	sub	sp, #48	@ 0x30
 8002e08:	af02      	add	r7, sp, #8
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	4608      	mov	r0, r1
 8002e0e:	4611      	mov	r1, r2
 8002e10:	461a      	mov	r2, r3
 8002e12:	4603      	mov	r3, r0
 8002e14:	817b      	strh	r3, [r7, #10]
 8002e16:	460b      	mov	r3, r1
 8002e18:	813b      	strh	r3, [r7, #8]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e22:	f7ff fa7b 	bl	800231c <HAL_GetTick>
 8002e26:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b20      	cmp	r3, #32
 8002e32:	f040 8250 	bne.w	80032d6 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	2319      	movs	r3, #25
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	4982      	ldr	r1, [pc, #520]	@ (8003048 <HAL_I2C_Mem_Read+0x244>)
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f002 f857 	bl	8004ef4 <I2C_WaitOnFlagUntilTimeout>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e243      	b.n	80032d8 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_I2C_Mem_Read+0x5a>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e23c      	b.n	80032d8 <HAL_I2C_Mem_Read+0x4d4>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d007      	beq.n	8002e84 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2222      	movs	r2, #34	@ 0x22
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2240      	movs	r2, #64	@ 0x40
 8002ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002eae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002eb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4a62      	ldr	r2, [pc, #392]	@ (800304c <HAL_I2C_Mem_Read+0x248>)
 8002ec4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ec6:	88f8      	ldrh	r0, [r7, #6]
 8002ec8:	893a      	ldrh	r2, [r7, #8]
 8002eca:	8979      	ldrh	r1, [r7, #10]
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ece:	9301      	str	r3, [sp, #4]
 8002ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f001 fe7c 	bl	8004bd4 <I2C_RequestMemoryRead>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e1f8      	b.n	80032d8 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d113      	bne.n	8002f16 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	61fb      	str	r3, [r7, #28]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	61fb      	str	r3, [r7, #28]
 8002f02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	e1cc      	b.n	80032b0 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d11e      	bne.n	8002f5c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f2e:	b672      	cpsid	i
}
 8002f30:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f32:	2300      	movs	r3, #0
 8002f34:	61bb      	str	r3, [r7, #24]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	61bb      	str	r3, [r7, #24]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	61bb      	str	r3, [r7, #24]
 8002f46:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f56:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f58:	b662      	cpsie	i
}
 8002f5a:	e035      	b.n	8002fc8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d11e      	bne.n	8002fa2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f72:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f74:	b672      	cpsid	i
}
 8002f76:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f78:	2300      	movs	r3, #0
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f9c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f9e:	b662      	cpsie	i
}
 8002fa0:	e012      	b.n	8002fc8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002fb0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002fc8:	e172      	b.n	80032b0 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fce:	2b03      	cmp	r3, #3
 8002fd0:	f200 811f 	bhi.w	8003212 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d123      	bne.n	8003024 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fde:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f002 f963 	bl	80052ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e173      	b.n	80032d8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691a      	ldr	r2, [r3, #16]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003002:	1c5a      	adds	r2, r3, #1
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800300c:	3b01      	subs	r3, #1
 800300e:	b29a      	uxth	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003018:	b29b      	uxth	r3, r3
 800301a:	3b01      	subs	r3, #1
 800301c:	b29a      	uxth	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003022:	e145      	b.n	80032b0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003028:	2b02      	cmp	r3, #2
 800302a:	d152      	bne.n	80030d2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800302c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003032:	2200      	movs	r2, #0
 8003034:	4906      	ldr	r1, [pc, #24]	@ (8003050 <HAL_I2C_Mem_Read+0x24c>)
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f001 ff5c 	bl	8004ef4 <I2C_WaitOnFlagUntilTimeout>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d008      	beq.n	8003054 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e148      	b.n	80032d8 <HAL_I2C_Mem_Read+0x4d4>
 8003046:	bf00      	nop
 8003048:	00100002 	.word	0x00100002
 800304c:	ffff0000 	.word	0xffff0000
 8003050:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003054:	b672      	cpsid	i
}
 8003056:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003066:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691a      	ldr	r2, [r3, #16]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003084:	3b01      	subs	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003090:	b29b      	uxth	r3, r3
 8003092:	3b01      	subs	r3, #1
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800309a:	b662      	cpsie	i
}
 800309c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	691a      	ldr	r2, [r3, #16]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29a      	uxth	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030d0:	e0ee      	b.n	80032b0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030d8:	2200      	movs	r2, #0
 80030da:	4981      	ldr	r1, [pc, #516]	@ (80032e0 <HAL_I2C_Mem_Read+0x4dc>)
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f001 ff09 	bl	8004ef4 <I2C_WaitOnFlagUntilTimeout>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0f5      	b.n	80032d8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80030fc:	b672      	cpsid	i
}
 80030fe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691a      	ldr	r2, [r3, #16]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003112:	1c5a      	adds	r2, r3, #1
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003128:	b29b      	uxth	r3, r3
 800312a:	3b01      	subs	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003132:	4b6c      	ldr	r3, [pc, #432]	@ (80032e4 <HAL_I2C_Mem_Read+0x4e0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	08db      	lsrs	r3, r3, #3
 8003138:	4a6b      	ldr	r2, [pc, #428]	@ (80032e8 <HAL_I2C_Mem_Read+0x4e4>)
 800313a:	fba2 2303 	umull	r2, r3, r2, r3
 800313e:	0a1a      	lsrs	r2, r3, #8
 8003140:	4613      	mov	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	00da      	lsls	r2, r3, #3
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	3b01      	subs	r3, #1
 8003150:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d118      	bne.n	800318a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2220      	movs	r2, #32
 8003162:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003172:	f043 0220 	orr.w	r2, r3, #32
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800317a:	b662      	cpsie	i
}
 800317c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e0a6      	b.n	80032d8 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b04      	cmp	r3, #4
 8003196:	d1d9      	bne.n	800314c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691a      	ldr	r2, [r3, #16]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ba:	1c5a      	adds	r2, r3, #1
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80031da:	b662      	cpsie	i
}
 80031dc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e8:	b2d2      	uxtb	r2, r2
 80031ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003206:	b29b      	uxth	r3, r3
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003210:	e04e      	b.n	80032b0 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003214:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f002 f848 	bl	80052ac <I2C_WaitOnRXNEFlagUntilTimeout>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e058      	b.n	80032d8 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	691a      	ldr	r2, [r3, #16]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003238:	1c5a      	adds	r2, r3, #1
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003242:	3b01      	subs	r3, #1
 8003244:	b29a      	uxth	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800324e:	b29b      	uxth	r3, r3
 8003250:	3b01      	subs	r3, #1
 8003252:	b29a      	uxth	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	f003 0304 	and.w	r3, r3, #4
 8003262:	2b04      	cmp	r3, #4
 8003264:	d124      	bne.n	80032b0 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800326a:	2b03      	cmp	r3, #3
 800326c:	d107      	bne.n	800327e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800327c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003288:	b2d2      	uxtb	r2, r2
 800328a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f47f ae88 	bne.w	8002fca <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2220      	movs	r2, #32
 80032be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	e000      	b.n	80032d8 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80032d6:	2302      	movs	r3, #2
  }
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3728      	adds	r7, #40	@ 0x28
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	00010004 	.word	0x00010004
 80032e4:	20000004 	.word	0x20000004
 80032e8:	14f8b589 	.word	0x14f8b589

080032ec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003304:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800330c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003314:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003316:	7bfb      	ldrb	r3, [r7, #15]
 8003318:	2b10      	cmp	r3, #16
 800331a:	d003      	beq.n	8003324 <HAL_I2C_EV_IRQHandler+0x38>
 800331c:	7bfb      	ldrb	r3, [r7, #15]
 800331e:	2b40      	cmp	r3, #64	@ 0x40
 8003320:	f040 80b1 	bne.w	8003486 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10d      	bne.n	800335a <HAL_I2C_EV_IRQHandler+0x6e>
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003344:	d003      	beq.n	800334e <HAL_I2C_EV_IRQHandler+0x62>
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800334c:	d101      	bne.n	8003352 <HAL_I2C_EV_IRQHandler+0x66>
 800334e:	2301      	movs	r3, #1
 8003350:	e000      	b.n	8003354 <HAL_I2C_EV_IRQHandler+0x68>
 8003352:	2300      	movs	r3, #0
 8003354:	2b01      	cmp	r3, #1
 8003356:	f000 8114 	beq.w	8003582 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00b      	beq.n	800337c <HAL_I2C_EV_IRQHandler+0x90>
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800336a:	2b00      	cmp	r3, #0
 800336c:	d006      	beq.n	800337c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f002 f827 	bl	80053c2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 fd74 	bl	8003e62 <I2C_Master_SB>
 800337a:	e083      	b.n	8003484 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d008      	beq.n	8003398 <HAL_I2C_EV_IRQHandler+0xac>
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 fdeb 	bl	8003f6c <I2C_Master_ADD10>
 8003396:	e075      	b.n	8003484 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d008      	beq.n	80033b4 <HAL_I2C_EV_IRQHandler+0xc8>
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 fe06 	bl	8003fbe <I2C_Master_ADDR>
 80033b2:	e067      	b.n	8003484 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	f003 0304 	and.w	r3, r3, #4
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d036      	beq.n	800342c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033cc:	f000 80db 	beq.w	8003586 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00d      	beq.n	80033f6 <HAL_I2C_EV_IRQHandler+0x10a>
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d008      	beq.n	80033f6 <HAL_I2C_EV_IRQHandler+0x10a>
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	f003 0304 	and.w	r3, r3, #4
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d103      	bne.n	80033f6 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f9d4 	bl	800379c <I2C_MasterTransmit_TXE>
 80033f4:	e046      	b.n	8003484 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 80c2 	beq.w	8003586 <HAL_I2C_EV_IRQHandler+0x29a>
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 80bc 	beq.w	8003586 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800340e:	7bbb      	ldrb	r3, [r7, #14]
 8003410:	2b21      	cmp	r3, #33	@ 0x21
 8003412:	d103      	bne.n	800341c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 fa5d 	bl	80038d4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800341a:	e0b4      	b.n	8003586 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	2b40      	cmp	r3, #64	@ 0x40
 8003420:	f040 80b1 	bne.w	8003586 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 facb 	bl	80039c0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800342a:	e0ac      	b.n	8003586 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003436:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800343a:	f000 80a4 	beq.w	8003586 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00d      	beq.n	8003464 <HAL_I2C_EV_IRQHandler+0x178>
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800344e:	2b00      	cmp	r3, #0
 8003450:	d008      	beq.n	8003464 <HAL_I2C_EV_IRQHandler+0x178>
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	d103      	bne.n	8003464 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 fb47 	bl	8003af0 <I2C_MasterReceive_RXNE>
 8003462:	e00f      	b.n	8003484 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 808b 	beq.w	8003586 <HAL_I2C_EV_IRQHandler+0x29a>
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 8085 	beq.w	8003586 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 fbff 	bl	8003c80 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003482:	e080      	b.n	8003586 <HAL_I2C_EV_IRQHandler+0x29a>
 8003484:	e07f      	b.n	8003586 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348a:	2b00      	cmp	r3, #0
 800348c:	d004      	beq.n	8003498 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	61fb      	str	r3, [r7, #28]
 8003496:	e007      	b.n	80034a8 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d011      	beq.n	80034d6 <HAL_I2C_EV_IRQHandler+0x1ea>
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00c      	beq.n	80034d6 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d003      	beq.n	80034cc <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80034cc:	69b9      	ldr	r1, [r7, #24]
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 ffcc 	bl	800446c <I2C_Slave_ADDR>
 80034d4:	e05a      	b.n	800358c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	f003 0310 	and.w	r3, r3, #16
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <HAL_I2C_EV_IRQHandler+0x206>
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f001 f806 	bl	80044fc <I2C_Slave_STOPF>
 80034f0:	e04c      	b.n	800358c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80034f2:	7bbb      	ldrb	r3, [r7, #14]
 80034f4:	2b21      	cmp	r3, #33	@ 0x21
 80034f6:	d002      	beq.n	80034fe <HAL_I2C_EV_IRQHandler+0x212>
 80034f8:	7bbb      	ldrb	r3, [r7, #14]
 80034fa:	2b29      	cmp	r3, #41	@ 0x29
 80034fc:	d120      	bne.n	8003540 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00d      	beq.n	8003524 <HAL_I2C_EV_IRQHandler+0x238>
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800350e:	2b00      	cmp	r3, #0
 8003510:	d008      	beq.n	8003524 <HAL_I2C_EV_IRQHandler+0x238>
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	d103      	bne.n	8003524 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 fee9 	bl	80042f4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003522:	e032      	b.n	800358a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b00      	cmp	r3, #0
 800352c:	d02d      	beq.n	800358a <HAL_I2C_EV_IRQHandler+0x29e>
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003534:	2b00      	cmp	r3, #0
 8003536:	d028      	beq.n	800358a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 ff18 	bl	800436e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800353e:	e024      	b.n	800358a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00d      	beq.n	8003566 <HAL_I2C_EV_IRQHandler+0x27a>
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003550:	2b00      	cmp	r3, #0
 8003552:	d008      	beq.n	8003566 <HAL_I2C_EV_IRQHandler+0x27a>
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	2b00      	cmp	r3, #0
 800355c:	d103      	bne.n	8003566 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 ff25 	bl	80043ae <I2C_SlaveReceive_RXNE>
 8003564:	e012      	b.n	800358c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00d      	beq.n	800358c <HAL_I2C_EV_IRQHandler+0x2a0>
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003576:	2b00      	cmp	r3, #0
 8003578:	d008      	beq.n	800358c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 ff55 	bl	800442a <I2C_SlaveReceive_BTF>
 8003580:	e004      	b.n	800358c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003582:	bf00      	nop
 8003584:	e002      	b.n	800358c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003586:	bf00      	nop
 8003588:	e000      	b.n	800358c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800358a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800358c:	3720      	adds	r7, #32
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b08a      	sub	sp, #40	@ 0x28
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80035aa:	2300      	movs	r3, #0
 80035ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035b4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d015      	beq.n	80035ec <HAL_I2C_ER_IRQHandler+0x5a>
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d010      	beq.n	80035ec <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80035ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035cc:	f043 0301 	orr.w	r3, r3, #1
 80035d0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80035da:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035ea:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00d      	beq.n	8003612 <HAL_I2C_ER_IRQHandler+0x80>
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003602:	f043 0302 	orr.w	r3, r3, #2
 8003606:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003610:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003618:	2b00      	cmp	r3, #0
 800361a:	d03e      	beq.n	800369a <HAL_I2C_ER_IRQHandler+0x108>
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003622:	2b00      	cmp	r3, #0
 8003624:	d039      	beq.n	800369a <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8003626:	7efb      	ldrb	r3, [r7, #27]
 8003628:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800362e:	b29b      	uxth	r3, r3
 8003630:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003638:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003640:	7ebb      	ldrb	r3, [r7, #26]
 8003642:	2b20      	cmp	r3, #32
 8003644:	d112      	bne.n	800366c <HAL_I2C_ER_IRQHandler+0xda>
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10f      	bne.n	800366c <HAL_I2C_ER_IRQHandler+0xda>
 800364c:	7cfb      	ldrb	r3, [r7, #19]
 800364e:	2b21      	cmp	r3, #33	@ 0x21
 8003650:	d008      	beq.n	8003664 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003652:	7cfb      	ldrb	r3, [r7, #19]
 8003654:	2b29      	cmp	r3, #41	@ 0x29
 8003656:	d005      	beq.n	8003664 <HAL_I2C_ER_IRQHandler+0xd2>
 8003658:	7cfb      	ldrb	r3, [r7, #19]
 800365a:	2b28      	cmp	r3, #40	@ 0x28
 800365c:	d106      	bne.n	800366c <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2b21      	cmp	r3, #33	@ 0x21
 8003662:	d103      	bne.n	800366c <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f001 f879 	bl	800475c <I2C_Slave_AF>
 800366a:	e016      	b.n	800369a <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003674:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003678:	f043 0304 	orr.w	r3, r3, #4
 800367c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800367e:	7efb      	ldrb	r3, [r7, #27]
 8003680:	2b10      	cmp	r3, #16
 8003682:	d002      	beq.n	800368a <HAL_I2C_ER_IRQHandler+0xf8>
 8003684:	7efb      	ldrb	r3, [r7, #27]
 8003686:	2b40      	cmp	r3, #64	@ 0x40
 8003688:	d107      	bne.n	800369a <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003698:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00d      	beq.n	80036c0 <HAL_I2C_ER_IRQHandler+0x12e>
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d008      	beq.n	80036c0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80036ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b0:	f043 0308 	orr.w	r3, r3, #8
 80036b4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80036be:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80036c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d008      	beq.n	80036d8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036cc:	431a      	orrs	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f001 f8b6 	bl	8004844 <I2C_ITError>
  }
}
 80036d8:	bf00      	nop
 80036da:	3728      	adds	r7, #40	@ 0x28
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bc80      	pop	{r7}
 80036f0:	4770      	bx	lr

080036f2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr

08003704 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr

08003716 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr

08003728 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	70fb      	strb	r3, [r7, #3]
 8003734:	4613      	mov	r3, r2
 8003736:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr

08003742 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr

08003754 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr

08003766 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr

08003778 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	bc80      	pop	{r7}
 8003788:	4770      	bx	lr

0800378a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr

0800379c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037b2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d150      	bne.n	8003864 <I2C_MasterTransmit_TXE+0xc8>
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	2b21      	cmp	r3, #33	@ 0x21
 80037c6:	d14d      	bne.n	8003864 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d01d      	beq.n	800380a <I2C_MasterTransmit_TXE+0x6e>
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b20      	cmp	r3, #32
 80037d2:	d01a      	beq.n	800380a <I2C_MasterTransmit_TXE+0x6e>
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80037da:	d016      	beq.n	800380a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80037ea:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2211      	movs	r2, #17
 80037f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2220      	movs	r2, #32
 80037fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7ff ff6c 	bl	80036e0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003808:	e060      	b.n	80038cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003818:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003828:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b40      	cmp	r3, #64	@ 0x40
 8003842:	d107      	bne.n	8003854 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f7ff ff81 	bl	8003754 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003852:	e03b      	b.n	80038cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7ff ff3f 	bl	80036e0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003862:	e033      	b.n	80038cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003864:	7bfb      	ldrb	r3, [r7, #15]
 8003866:	2b21      	cmp	r3, #33	@ 0x21
 8003868:	d005      	beq.n	8003876 <I2C_MasterTransmit_TXE+0xda>
 800386a:	7bbb      	ldrb	r3, [r7, #14]
 800386c:	2b40      	cmp	r3, #64	@ 0x40
 800386e:	d12d      	bne.n	80038cc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003870:	7bfb      	ldrb	r3, [r7, #15]
 8003872:	2b22      	cmp	r3, #34	@ 0x22
 8003874:	d12a      	bne.n	80038cc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800387a:	b29b      	uxth	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d108      	bne.n	8003892 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800388e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003890:	e01c      	b.n	80038cc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b40      	cmp	r3, #64	@ 0x40
 800389c:	d103      	bne.n	80038a6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f88e 	bl	80039c0 <I2C_MemoryTransmit_TXE_BTF>
}
 80038a4:	e012      	b.n	80038cc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038aa:	781a      	ldrb	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b6:	1c5a      	adds	r2, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	3b01      	subs	r3, #1
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80038ca:	e7ff      	b.n	80038cc <I2C_MasterTransmit_TXE+0x130>
 80038cc:	bf00      	nop
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b21      	cmp	r3, #33	@ 0x21
 80038ec:	d164      	bne.n	80039b8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d012      	beq.n	800391e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fc:	781a      	ldrb	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003912:	b29b      	uxth	r3, r3
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800391c:	e04c      	b.n	80039b8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2b08      	cmp	r3, #8
 8003922:	d01d      	beq.n	8003960 <I2C_MasterTransmit_BTF+0x8c>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2b20      	cmp	r3, #32
 8003928:	d01a      	beq.n	8003960 <I2C_MasterTransmit_BTF+0x8c>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003930:	d016      	beq.n	8003960 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003940:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2211      	movs	r2, #17
 8003946:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2220      	movs	r2, #32
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f7ff fec1 	bl	80036e0 <HAL_I2C_MasterTxCpltCallback>
}
 800395e:	e02b      	b.n	80039b8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800396e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800397e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2220      	movs	r2, #32
 800398a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b40      	cmp	r3, #64	@ 0x40
 8003998:	d107      	bne.n	80039aa <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7ff fed6 	bl	8003754 <HAL_I2C_MemTxCpltCallback>
}
 80039a8:	e006      	b.n	80039b8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7ff fe94 	bl	80036e0 <HAL_I2C_MasterTxCpltCallback>
}
 80039b8:	bf00      	nop
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039ce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d11d      	bne.n	8003a14 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d10b      	bne.n	80039f8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039f0:	1c9a      	adds	r2, r3, #2
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80039f6:	e077      	b.n	8003ae8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	121b      	asrs	r3, r3, #8
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003a12:	e069      	b.n	8003ae8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d10b      	bne.n	8003a34 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a2c:	1c5a      	adds	r2, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003a32:	e059      	b.n	8003ae8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d152      	bne.n	8003ae2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
 8003a3e:	2b22      	cmp	r3, #34	@ 0x22
 8003a40:	d10d      	bne.n	8003a5e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a50:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003a5c:	e044      	b.n	8003ae8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d015      	beq.n	8003a94 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
 8003a6a:	2b21      	cmp	r3, #33	@ 0x21
 8003a6c:	d112      	bne.n	8003a94 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a72:	781a      	ldrb	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7e:	1c5a      	adds	r2, r3, #1
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003a92:	e029      	b.n	8003ae8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d124      	bne.n	8003ae8 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003a9e:	7bfb      	ldrb	r3, [r7, #15]
 8003aa0:	2b21      	cmp	r3, #33	@ 0x21
 8003aa2:	d121      	bne.n	8003ae8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ab2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ac2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2220      	movs	r2, #32
 8003ace:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7ff fe3a 	bl	8003754 <HAL_I2C_MemTxCpltCallback>
}
 8003ae0:	e002      	b.n	8003ae8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7ff f880 	bl	8002be8 <I2C_Flush_DR>
}
 8003ae8:	bf00      	nop
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b22      	cmp	r3, #34	@ 0x22
 8003b02:	f040 80b9 	bne.w	8003c78 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b03      	cmp	r3, #3
 8003b18:	d921      	bls.n	8003b5e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	691a      	ldr	r2, [r3, #16]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2c:	1c5a      	adds	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2b03      	cmp	r3, #3
 8003b48:	f040 8096 	bne.w	8003c78 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b5a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003b5c:	e08c      	b.n	8003c78 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d07f      	beq.n	8003c66 <I2C_MasterReceive_RXNE+0x176>
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d002      	beq.n	8003b72 <I2C_MasterReceive_RXNE+0x82>
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d179      	bne.n	8003c66 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f001 fb68 	bl	8005248 <I2C_WaitOnSTOPRequestThroughIT>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d14c      	bne.n	8003c18 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b8c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b9c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba8:	b2d2      	uxtb	r2, r2
 8003baa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb0:	1c5a      	adds	r2, r3, #1
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b40      	cmp	r3, #64	@ 0x40
 8003bd6:	d10a      	bne.n	8003bee <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7ff fdbd 	bl	8003766 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003bec:	e044      	b.n	8003c78 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2b08      	cmp	r3, #8
 8003bfa:	d002      	beq.n	8003c02 <I2C_MasterReceive_RXNE+0x112>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2b20      	cmp	r3, #32
 8003c00:	d103      	bne.n	8003c0a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c08:	e002      	b.n	8003c10 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2212      	movs	r2, #18
 8003c0e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff fd6e 	bl	80036f2 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c16:	e02f      	b.n	8003c78 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c26:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	691a      	ldr	r2, [r3, #16]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	3b01      	subs	r3, #1
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2220      	movs	r2, #32
 8003c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7ff fd8a 	bl	8003778 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c64:	e008      	b.n	8003c78 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c74:	605a      	str	r2, [r3, #4]
}
 8003c76:	e7ff      	b.n	8003c78 <I2C_MasterReceive_RXNE+0x188>
 8003c78:	bf00      	nop
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2b04      	cmp	r3, #4
 8003c96:	d11b      	bne.n	8003cd0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ca6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	691a      	ldr	r2, [r3, #16]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb2:	b2d2      	uxtb	r2, r2
 8003cb4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cba:	1c5a      	adds	r2, r3, #1
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003cce:	e0c4      	b.n	8003e5a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	d129      	bne.n	8003d2e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ce8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	d00a      	beq.n	8003d06 <I2C_MasterReceive_BTF+0x86>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d007      	beq.n	8003d06 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d04:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003d2c:	e095      	b.n	8003e5a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d17d      	bne.n	8003e34 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d002      	beq.n	8003d44 <I2C_MasterReceive_BTF+0xc4>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b10      	cmp	r3, #16
 8003d42:	d108      	bne.n	8003d56 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	e016      	b.n	8003d84 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	d002      	beq.n	8003d62 <I2C_MasterReceive_BTF+0xe2>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d108      	bne.n	8003d74 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	e007      	b.n	8003d84 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d82:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	691a      	ldr	r2, [r3, #16]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	691a      	ldr	r2, [r3, #16]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbc:	1c5a      	adds	r2, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003dde:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b40      	cmp	r3, #64	@ 0x40
 8003df2:	d10a      	bne.n	8003e0a <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7ff fcaf 	bl	8003766 <HAL_I2C_MemRxCpltCallback>
}
 8003e08:	e027      	b.n	8003e5a <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d002      	beq.n	8003e1e <I2C_MasterReceive_BTF+0x19e>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b20      	cmp	r3, #32
 8003e1c:	d103      	bne.n	8003e26 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e24:	e002      	b.n	8003e2c <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2212      	movs	r2, #18
 8003e2a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7ff fc60 	bl	80036f2 <HAL_I2C_MasterRxCpltCallback>
}
 8003e32:	e012      	b.n	8003e5a <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	691a      	ldr	r2, [r3, #16]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003e5a:	bf00      	nop
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b40      	cmp	r3, #64	@ 0x40
 8003e74:	d117      	bne.n	8003ea6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d109      	bne.n	8003e92 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	461a      	mov	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e8e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003e90:	e067      	b.n	8003f62 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	f043 0301 	orr.w	r3, r3, #1
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	611a      	str	r2, [r3, #16]
}
 8003ea4:	e05d      	b.n	8003f62 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003eae:	d133      	bne.n	8003f18 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b21      	cmp	r3, #33	@ 0x21
 8003eba:	d109      	bne.n	8003ed0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ecc:	611a      	str	r2, [r3, #16]
 8003ece:	e008      	b.n	8003ee2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	f043 0301 	orr.w	r3, r3, #1
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d004      	beq.n	8003ef4 <I2C_Master_SB+0x92>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d108      	bne.n	8003f06 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d032      	beq.n	8003f62 <I2C_Master_SB+0x100>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d02d      	beq.n	8003f62 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f14:	605a      	str	r2, [r3, #4]
}
 8003f16:	e024      	b.n	8003f62 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10e      	bne.n	8003f3e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	11db      	asrs	r3, r3, #7
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	f003 0306 	and.w	r3, r3, #6
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	f063 030f 	orn	r3, r3, #15
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	611a      	str	r2, [r3, #16]
}
 8003f3c:	e011      	b.n	8003f62 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d10d      	bne.n	8003f62 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	11db      	asrs	r3, r3, #7
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	f003 0306 	and.w	r3, r3, #6
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	f063 030e 	orn	r3, r3, #14
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	611a      	str	r2, [r3, #16]
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr

08003f6c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d004      	beq.n	8003f92 <I2C_Master_ADD10+0x26>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d108      	bne.n	8003fa4 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00c      	beq.n	8003fb4 <I2C_Master_ADD10+0x48>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d007      	beq.n	8003fb4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fb2:	605a      	str	r2, [r3, #4]
  }
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bc80      	pop	{r7}
 8003fbc:	4770      	bx	lr

08003fbe <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b091      	sub	sp, #68	@ 0x44
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fcc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fda:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b22      	cmp	r3, #34	@ 0x22
 8003fe6:	f040 8174 	bne.w	80042d2 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10f      	bne.n	8004012 <I2C_Master_ADDR+0x54>
 8003ff2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003ff6:	2b40      	cmp	r3, #64	@ 0x40
 8003ff8:	d10b      	bne.n	8004012 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	633b      	str	r3, [r7, #48]	@ 0x30
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	633b      	str	r3, [r7, #48]	@ 0x30
 800400e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004010:	e16b      	b.n	80042ea <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004016:	2b00      	cmp	r3, #0
 8004018:	d11d      	bne.n	8004056 <I2C_Master_ADDR+0x98>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004022:	d118      	bne.n	8004056 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004024:	2300      	movs	r3, #0
 8004026:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004048:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800404e:	1c5a      	adds	r2, r3, #1
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	651a      	str	r2, [r3, #80]	@ 0x50
 8004054:	e149      	b.n	80042ea <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405a:	b29b      	uxth	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	d113      	bne.n	8004088 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004060:	2300      	movs	r3, #0
 8004062:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004074:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	e120      	b.n	80042ca <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800408c:	b29b      	uxth	r3, r3
 800408e:	2b01      	cmp	r3, #1
 8004090:	f040 808a 	bne.w	80041a8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004096:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800409a:	d137      	bne.n	800410c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040aa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040ba:	d113      	bne.n	80040e4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040ca:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040cc:	2300      	movs	r3, #0
 80040ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	627b      	str	r3, [r7, #36]	@ 0x24
 80040e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e2:	e0f2      	b.n	80042ca <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e4:	2300      	movs	r3, #0
 80040e6:	623b      	str	r3, [r7, #32]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	623b      	str	r3, [r7, #32]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	623b      	str	r3, [r7, #32]
 80040f8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	e0de      	b.n	80042ca <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800410c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800410e:	2b08      	cmp	r3, #8
 8004110:	d02e      	beq.n	8004170 <I2C_Master_ADDR+0x1b2>
 8004112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004114:	2b20      	cmp	r3, #32
 8004116:	d02b      	beq.n	8004170 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800411a:	2b12      	cmp	r3, #18
 800411c:	d102      	bne.n	8004124 <I2C_Master_ADDR+0x166>
 800411e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004120:	2b01      	cmp	r3, #1
 8004122:	d125      	bne.n	8004170 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004126:	2b04      	cmp	r3, #4
 8004128:	d00e      	beq.n	8004148 <I2C_Master_ADDR+0x18a>
 800412a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800412c:	2b02      	cmp	r3, #2
 800412e:	d00b      	beq.n	8004148 <I2C_Master_ADDR+0x18a>
 8004130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004132:	2b10      	cmp	r3, #16
 8004134:	d008      	beq.n	8004148 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	e007      	b.n	8004158 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004156:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004158:	2300      	movs	r3, #0
 800415a:	61fb      	str	r3, [r7, #28]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	61fb      	str	r3, [r7, #28]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	61fb      	str	r3, [r7, #28]
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	e0ac      	b.n	80042ca <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800417e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004180:	2300      	movs	r3, #0
 8004182:	61bb      	str	r3, [r7, #24]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	61bb      	str	r3, [r7, #24]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	61bb      	str	r3, [r7, #24]
 8004194:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	e090      	b.n	80042ca <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d158      	bne.n	8004264 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80041b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d021      	beq.n	80041fc <I2C_Master_ADDR+0x23e>
 80041b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d01e      	beq.n	80041fc <I2C_Master_ADDR+0x23e>
 80041be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c0:	2b10      	cmp	r3, #16
 80041c2:	d01b      	beq.n	80041fc <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041d2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041d4:	2300      	movs	r3, #0
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	617b      	str	r3, [r7, #20]
 80041e8:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	e012      	b.n	8004222 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800420a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800420c:	2300      	movs	r3, #0
 800420e:	613b      	str	r3, [r7, #16]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	613b      	str	r3, [r7, #16]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	613b      	str	r3, [r7, #16]
 8004220:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800422c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004230:	d14b      	bne.n	80042ca <I2C_Master_ADDR+0x30c>
 8004232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004234:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004238:	d00b      	beq.n	8004252 <I2C_Master_ADDR+0x294>
 800423a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800423c:	2b01      	cmp	r3, #1
 800423e:	d008      	beq.n	8004252 <I2C_Master_ADDR+0x294>
 8004240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004242:	2b08      	cmp	r3, #8
 8004244:	d005      	beq.n	8004252 <I2C_Master_ADDR+0x294>
 8004246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004248:	2b10      	cmp	r3, #16
 800424a:	d002      	beq.n	8004252 <I2C_Master_ADDR+0x294>
 800424c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800424e:	2b20      	cmp	r3, #32
 8004250:	d13b      	bne.n	80042ca <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004260:	605a      	str	r2, [r3, #4]
 8004262:	e032      	b.n	80042ca <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004272:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800427e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004282:	d117      	bne.n	80042b4 <I2C_Master_ADDR+0x2f6>
 8004284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004286:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800428a:	d00b      	beq.n	80042a4 <I2C_Master_ADDR+0x2e6>
 800428c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800428e:	2b01      	cmp	r3, #1
 8004290:	d008      	beq.n	80042a4 <I2C_Master_ADDR+0x2e6>
 8004292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004294:	2b08      	cmp	r3, #8
 8004296:	d005      	beq.n	80042a4 <I2C_Master_ADDR+0x2e6>
 8004298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800429a:	2b10      	cmp	r3, #16
 800429c:	d002      	beq.n	80042a4 <I2C_Master_ADDR+0x2e6>
 800429e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a0:	2b20      	cmp	r3, #32
 80042a2:	d107      	bne.n	80042b4 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80042b2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042b4:	2300      	movs	r3, #0
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80042d0:	e00b      	b.n	80042ea <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042d2:	2300      	movs	r3, #0
 80042d4:	60bb      	str	r3, [r7, #8]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	60bb      	str	r3, [r7, #8]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	60bb      	str	r3, [r7, #8]
 80042e6:	68bb      	ldr	r3, [r7, #8]
}
 80042e8:	e7ff      	b.n	80042ea <I2C_Master_ADDR+0x32c>
 80042ea:	bf00      	nop
 80042ec:	3744      	adds	r7, #68	@ 0x44
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bc80      	pop	{r7}
 80042f2:	4770      	bx	lr

080042f4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004302:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004308:	b29b      	uxth	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d02b      	beq.n	8004366 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004312:	781a      	ldrb	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004328:	b29b      	uxth	r3, r3
 800432a:	3b01      	subs	r3, #1
 800432c:	b29a      	uxth	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d114      	bne.n	8004366 <I2C_SlaveTransmit_TXE+0x72>
 800433c:	7bfb      	ldrb	r3, [r7, #15]
 800433e:	2b29      	cmp	r3, #41	@ 0x29
 8004340:	d111      	bne.n	8004366 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004350:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2221      	movs	r2, #33	@ 0x21
 8004356:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2228      	movs	r2, #40	@ 0x28
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7ff f9cf 	bl	8003704 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004366:	bf00      	nop
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800436e:	b480      	push	{r7}
 8004370:	b083      	sub	sp, #12
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800437a:	b29b      	uxth	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d011      	beq.n	80043a4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004384:	781a      	ldrb	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004390:	1c5a      	adds	r2, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800439a:	b29b      	uxth	r3, r3
 800439c:	3b01      	subs	r3, #1
 800439e:	b29a      	uxth	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bc80      	pop	{r7}
 80043ac:	4770      	bx	lr

080043ae <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b084      	sub	sp, #16
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043bc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d02c      	beq.n	8004422 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691a      	ldr	r2, [r3, #16]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d114      	bne.n	8004422 <I2C_SlaveReceive_RXNE+0x74>
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
 80043fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80043fc:	d111      	bne.n	8004422 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800440c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2222      	movs	r2, #34	@ 0x22
 8004412:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2228      	movs	r2, #40	@ 0x28
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7ff f97a 	bl	8003716 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004422:	bf00      	nop
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004436:	b29b      	uxth	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d012      	beq.n	8004462 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691a      	ldr	r2, [r3, #16]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444e:	1c5a      	adds	r2, r3, #1
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004458:	b29b      	uxth	r3, r3
 800445a:	3b01      	subs	r3, #1
 800445c:	b29a      	uxth	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr

0800446c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004476:	2300      	movs	r3, #0
 8004478:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004480:	b2db      	uxtb	r3, r3
 8004482:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004486:	2b28      	cmp	r3, #40	@ 0x28
 8004488:	d125      	bne.n	80044d6 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004498:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80044a4:	2301      	movs	r3, #1
 80044a6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d103      	bne.n	80044ba <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	81bb      	strh	r3, [r7, #12]
 80044b8:	e002      	b.n	80044c0 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80044c8:	89ba      	ldrh	r2, [r7, #12]
 80044ca:	7bfb      	ldrb	r3, [r7, #15]
 80044cc:	4619      	mov	r1, r3
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7ff f92a 	bl	8003728 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80044d4:	e00e      	b.n	80044f4 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044d6:	2300      	movs	r3, #0
 80044d8:	60bb      	str	r3, [r7, #8]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	60bb      	str	r3, [r7, #8]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	60bb      	str	r3, [r7, #8]
 80044ea:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80044f4:	bf00      	nop
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800450a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800451a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800451c:	2300      	movs	r3, #0
 800451e:	60bb      	str	r3, [r7, #8]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	60bb      	str	r3, [r7, #8]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0201 	orr.w	r2, r2, #1
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004548:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004554:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004558:	d172      	bne.n	8004640 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800455a:	7bfb      	ldrb	r3, [r7, #15]
 800455c:	2b22      	cmp	r3, #34	@ 0x22
 800455e:	d002      	beq.n	8004566 <I2C_Slave_STOPF+0x6a>
 8004560:	7bfb      	ldrb	r3, [r7, #15]
 8004562:	2b2a      	cmp	r3, #42	@ 0x2a
 8004564:	d135      	bne.n	80045d2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	b29a      	uxth	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d005      	beq.n	800458a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004582:	f043 0204 	orr.w	r2, r3, #4
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004598:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fe f84c 	bl	800263c <HAL_DMA_GetState>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d049      	beq.n	800463e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ae:	4a69      	ldr	r2, [pc, #420]	@ (8004754 <I2C_Slave_STOPF+0x258>)
 80045b0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fd ffc8 	bl	800254c <HAL_DMA_Abort_IT>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d03d      	beq.n	800463e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80045cc:	4610      	mov	r0, r2
 80045ce:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045d0:	e035      	b.n	800463e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	b29a      	uxth	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d005      	beq.n	80045f6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ee:	f043 0204 	orr.w	r2, r3, #4
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004604:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800460a:	4618      	mov	r0, r3
 800460c:	f7fe f816 	bl	800263c <HAL_DMA_GetState>
 8004610:	4603      	mov	r3, r0
 8004612:	2b01      	cmp	r3, #1
 8004614:	d014      	beq.n	8004640 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800461a:	4a4e      	ldr	r2, [pc, #312]	@ (8004754 <I2C_Slave_STOPF+0x258>)
 800461c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004622:	4618      	mov	r0, r3
 8004624:	f7fd ff92 	bl	800254c <HAL_DMA_Abort_IT>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d008      	beq.n	8004640 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004632:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004638:	4610      	mov	r0, r2
 800463a:	4798      	blx	r3
 800463c:	e000      	b.n	8004640 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800463e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004644:	b29b      	uxth	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d03e      	beq.n	80046c8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b04      	cmp	r3, #4
 8004656:	d112      	bne.n	800467e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	691a      	ldr	r2, [r3, #16]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004674:	b29b      	uxth	r3, r3
 8004676:	3b01      	subs	r3, #1
 8004678:	b29a      	uxth	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004688:	2b40      	cmp	r3, #64	@ 0x40
 800468a:	d112      	bne.n	80046b2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	691a      	ldr	r2, [r3, #16]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004696:	b2d2      	uxtb	r2, r2
 8004698:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469e:	1c5a      	adds	r2, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	3b01      	subs	r3, #1
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d005      	beq.n	80046c8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c0:	f043 0204 	orr.w	r2, r3, #4
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d003      	beq.n	80046d8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f8b7 	bl	8004844 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80046d6:	e039      	b.n	800474c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
 80046da:	2b2a      	cmp	r3, #42	@ 0x2a
 80046dc:	d109      	bne.n	80046f2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2228      	movs	r2, #40	@ 0x28
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7ff f812 	bl	8003716 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b28      	cmp	r3, #40	@ 0x28
 80046fc:	d111      	bne.n	8004722 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a15      	ldr	r2, [pc, #84]	@ (8004758 <I2C_Slave_STOPF+0x25c>)
 8004702:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2220      	movs	r2, #32
 800470e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7ff f811 	bl	8003742 <HAL_I2C_ListenCpltCallback>
}
 8004720:	e014      	b.n	800474c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004726:	2b22      	cmp	r3, #34	@ 0x22
 8004728:	d002      	beq.n	8004730 <I2C_Slave_STOPF+0x234>
 800472a:	7bfb      	ldrb	r3, [r7, #15]
 800472c:	2b22      	cmp	r3, #34	@ 0x22
 800472e:	d10d      	bne.n	800474c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2220      	movs	r2, #32
 800473a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7fe ffe5 	bl	8003716 <HAL_I2C_SlaveRxCpltCallback>
}
 800474c:	bf00      	nop
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	08004da5 	.word	0x08004da5
 8004758:	ffff0000 	.word	0xffff0000

0800475c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800476a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004770:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2b08      	cmp	r3, #8
 8004776:	d002      	beq.n	800477e <I2C_Slave_AF+0x22>
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	2b20      	cmp	r3, #32
 800477c:	d129      	bne.n	80047d2 <I2C_Slave_AF+0x76>
 800477e:	7bfb      	ldrb	r3, [r7, #15]
 8004780:	2b28      	cmp	r3, #40	@ 0x28
 8004782:	d126      	bne.n	80047d2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a2e      	ldr	r2, [pc, #184]	@ (8004840 <I2C_Slave_AF+0xe4>)
 8004788:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685a      	ldr	r2, [r3, #4]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004798:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047a2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047b2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2220      	movs	r2, #32
 80047be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7fe ffb9 	bl	8003742 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80047d0:	e031      	b.n	8004836 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
 80047d4:	2b21      	cmp	r3, #33	@ 0x21
 80047d6:	d129      	bne.n	800482c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a19      	ldr	r2, [pc, #100]	@ (8004840 <I2C_Slave_AF+0xe4>)
 80047dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2221      	movs	r2, #33	@ 0x21
 80047e2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004802:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800480c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800481c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7fe f9e2 	bl	8002be8 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7fe ff6d 	bl	8003704 <HAL_I2C_SlaveTxCpltCallback>
}
 800482a:	e004      	b.n	8004836 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004834:	615a      	str	r2, [r3, #20]
}
 8004836:	bf00      	nop
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	ffff0000 	.word	0xffff0000

08004844 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004852:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800485a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800485c:	7bbb      	ldrb	r3, [r7, #14]
 800485e:	2b10      	cmp	r3, #16
 8004860:	d002      	beq.n	8004868 <I2C_ITError+0x24>
 8004862:	7bbb      	ldrb	r3, [r7, #14]
 8004864:	2b40      	cmp	r3, #64	@ 0x40
 8004866:	d10a      	bne.n	800487e <I2C_ITError+0x3a>
 8004868:	7bfb      	ldrb	r3, [r7, #15]
 800486a:	2b22      	cmp	r3, #34	@ 0x22
 800486c:	d107      	bne.n	800487e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800487c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004884:	2b28      	cmp	r3, #40	@ 0x28
 8004886:	d107      	bne.n	8004898 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2228      	movs	r2, #40	@ 0x28
 8004892:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004896:	e015      	b.n	80048c4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048a6:	d00a      	beq.n	80048be <I2C_ITError+0x7a>
 80048a8:	7bfb      	ldrb	r3, [r7, #15]
 80048aa:	2b60      	cmp	r3, #96	@ 0x60
 80048ac:	d007      	beq.n	80048be <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048d2:	d162      	bne.n	800499a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048e2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048e8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d020      	beq.n	8004934 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048f6:	4a6a      	ldr	r2, [pc, #424]	@ (8004aa0 <I2C_ITError+0x25c>)
 80048f8:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fd fe24 	bl	800254c <HAL_DMA_Abort_IT>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 8089 	beq.w	8004a1e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0201 	bic.w	r2, r2, #1
 800491a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2220      	movs	r2, #32
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800492e:	4610      	mov	r0, r2
 8004930:	4798      	blx	r3
 8004932:	e074      	b.n	8004a1e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004938:	4a59      	ldr	r2, [pc, #356]	@ (8004aa0 <I2C_ITError+0x25c>)
 800493a:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004940:	4618      	mov	r0, r3
 8004942:	f7fd fe03 	bl	800254c <HAL_DMA_Abort_IT>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d068      	beq.n	8004a1e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004956:	2b40      	cmp	r3, #64	@ 0x40
 8004958:	d10b      	bne.n	8004972 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	691a      	ldr	r2, [r3, #16]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004964:	b2d2      	uxtb	r2, r2
 8004966:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0201 	bic.w	r2, r2, #1
 8004980:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2220      	movs	r2, #32
 8004986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800498e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004994:	4610      	mov	r0, r2
 8004996:	4798      	blx	r3
 8004998:	e041      	b.n	8004a1e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b60      	cmp	r3, #96	@ 0x60
 80049a4:	d125      	bne.n	80049f2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2220      	movs	r2, #32
 80049aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049be:	2b40      	cmp	r3, #64	@ 0x40
 80049c0:	d10b      	bne.n	80049da <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	691a      	ldr	r2, [r3, #16]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049cc:	b2d2      	uxtb	r2, r2
 80049ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d4:	1c5a      	adds	r2, r3, #1
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 0201 	bic.w	r2, r2, #1
 80049e8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fe fecd 	bl	800378a <HAL_I2C_AbortCpltCallback>
 80049f0:	e015      	b.n	8004a1e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049fc:	2b40      	cmp	r3, #64	@ 0x40
 80049fe:	d10b      	bne.n	8004a18 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	691a      	ldr	r2, [r3, #16]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0a:	b2d2      	uxtb	r2, r2
 8004a0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7fe fead 	bl	8003778 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a22:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10e      	bne.n	8004a4c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d109      	bne.n	8004a4c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d104      	bne.n	8004a4c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d007      	beq.n	8004a5c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a5a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a62:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b04      	cmp	r3, #4
 8004a6e:	d113      	bne.n	8004a98 <I2C_ITError+0x254>
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
 8004a72:	2b28      	cmp	r3, #40	@ 0x28
 8004a74:	d110      	bne.n	8004a98 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a0a      	ldr	r2, [pc, #40]	@ (8004aa4 <I2C_ITError+0x260>)
 8004a7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7fe fe55 	bl	8003742 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a98:	bf00      	nop
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	08004da5 	.word	0x08004da5
 8004aa4:	ffff0000 	.word	0xffff0000

08004aa8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af02      	add	r7, sp, #8
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	4608      	mov	r0, r1
 8004ab2:	4611      	mov	r1, r2
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	817b      	strh	r3, [r7, #10]
 8004aba:	460b      	mov	r3, r1
 8004abc:	813b      	strh	r3, [r7, #8]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ad0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f000 fa08 	bl	8004ef4 <I2C_WaitOnFlagUntilTimeout>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00d      	beq.n	8004b06 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004af4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004af8:	d103      	bne.n	8004b02 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b00:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e05f      	b.n	8004bc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b06:	897b      	ldrh	r3, [r7, #10]
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004b14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b18:	6a3a      	ldr	r2, [r7, #32]
 8004b1a:	492d      	ldr	r1, [pc, #180]	@ (8004bd0 <I2C_RequestMemoryWrite+0x128>)
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f000 fa63 	bl	8004fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e04c      	b.n	8004bc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	617b      	str	r3, [r7, #20]
 8004b40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b44:	6a39      	ldr	r1, [r7, #32]
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f000 faee 	bl	8005128 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00d      	beq.n	8004b6e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d107      	bne.n	8004b6a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e02b      	b.n	8004bc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b6e:	88fb      	ldrh	r3, [r7, #6]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d105      	bne.n	8004b80 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b74:	893b      	ldrh	r3, [r7, #8]
 8004b76:	b2da      	uxtb	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	611a      	str	r2, [r3, #16]
 8004b7e:	e021      	b.n	8004bc4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b80:	893b      	ldrh	r3, [r7, #8]
 8004b82:	0a1b      	lsrs	r3, r3, #8
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b90:	6a39      	ldr	r1, [r7, #32]
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 fac8 	bl	8005128 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00d      	beq.n	8004bba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	d107      	bne.n	8004bb6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bb4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e005      	b.n	8004bc6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bba:	893b      	ldrh	r3, [r7, #8]
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	00010002 	.word	0x00010002

08004bd4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b088      	sub	sp, #32
 8004bd8:	af02      	add	r7, sp, #8
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	4608      	mov	r0, r1
 8004bde:	4611      	mov	r1, r2
 8004be0:	461a      	mov	r2, r3
 8004be2:	4603      	mov	r3, r0
 8004be4:	817b      	strh	r3, [r7, #10]
 8004be6:	460b      	mov	r3, r1
 8004be8:	813b      	strh	r3, [r7, #8]
 8004bea:	4613      	mov	r3, r2
 8004bec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004bfc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 f96a 	bl	8004ef4 <I2C_WaitOnFlagUntilTimeout>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00d      	beq.n	8004c42 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c34:	d103      	bne.n	8004c3e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e0aa      	b.n	8004d98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c42:	897b      	ldrh	r3, [r7, #10]
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	461a      	mov	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c54:	6a3a      	ldr	r2, [r7, #32]
 8004c56:	4952      	ldr	r1, [pc, #328]	@ (8004da0 <I2C_RequestMemoryRead+0x1cc>)
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 f9c5 	bl	8004fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e097      	b.n	8004d98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c68:	2300      	movs	r3, #0
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	617b      	str	r3, [r7, #20]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	617b      	str	r3, [r7, #20]
 8004c7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c80:	6a39      	ldr	r1, [r7, #32]
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 fa50 	bl	8005128 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00d      	beq.n	8004caa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	d107      	bne.n	8004ca6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ca4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e076      	b.n	8004d98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004caa:	88fb      	ldrh	r3, [r7, #6]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d105      	bne.n	8004cbc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cb0:	893b      	ldrh	r3, [r7, #8]
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	611a      	str	r2, [r3, #16]
 8004cba:	e021      	b.n	8004d00 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004cbc:	893b      	ldrh	r3, [r7, #8]
 8004cbe:	0a1b      	lsrs	r3, r3, #8
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ccc:	6a39      	ldr	r1, [r7, #32]
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f000 fa2a 	bl	8005128 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00d      	beq.n	8004cf6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	d107      	bne.n	8004cf2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cf0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e050      	b.n	8004d98 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cf6:	893b      	ldrh	r3, [r7, #8]
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d02:	6a39      	ldr	r1, [r7, #32]
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 fa0f 	bl	8005128 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00d      	beq.n	8004d2c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d14:	2b04      	cmp	r3, #4
 8004d16:	d107      	bne.n	8004d28 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d26:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e035      	b.n	8004d98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d3a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f000 f8d3 	bl	8004ef4 <I2C_WaitOnFlagUntilTimeout>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00d      	beq.n	8004d70 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d62:	d103      	bne.n	8004d6c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d6a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e013      	b.n	8004d98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d70:	897b      	ldrh	r3, [r7, #10]
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	f043 0301 	orr.w	r3, r3, #1
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d82:	6a3a      	ldr	r2, [r7, #32]
 8004d84:	4906      	ldr	r1, [pc, #24]	@ (8004da0 <I2C_RequestMemoryRead+0x1cc>)
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 f92e 	bl	8004fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e000      	b.n	8004d98 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3718      	adds	r7, #24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	00010002 	.word	0x00010002

08004da4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dbc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004dbe:	4b4b      	ldr	r3, [pc, #300]	@ (8004eec <I2C_DMAAbort+0x148>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	08db      	lsrs	r3, r3, #3
 8004dc4:	4a4a      	ldr	r2, [pc, #296]	@ (8004ef0 <I2C_DMAAbort+0x14c>)
 8004dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dca:	0a1a      	lsrs	r2, r3, #8
 8004dcc:	4613      	mov	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	00da      	lsls	r2, r3, #3
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d106      	bne.n	8004dec <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de2:	f043 0220 	orr.w	r2, r3, #32
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004dea:	e00a      	b.n	8004e02 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	3b01      	subs	r3, #1
 8004df0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e00:	d0ea      	beq.n	8004dd8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e0e:	2200      	movs	r2, #0
 8004e10:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1e:	2200      	movs	r2, #0
 8004e20:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e30:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	2200      	movs	r2, #0
 8004e36:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e44:	2200      	movs	r2, #0
 8004e46:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d003      	beq.n	8004e58 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e54:	2200      	movs	r2, #0
 8004e56:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0201 	bic.w	r2, r2, #1
 8004e66:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b60      	cmp	r3, #96	@ 0x60
 8004e72:	d10e      	bne.n	8004e92 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	2220      	movs	r2, #32
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	2200      	movs	r2, #0
 8004e88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e8a:	6978      	ldr	r0, [r7, #20]
 8004e8c:	f7fe fc7d 	bl	800378a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e90:	e027      	b.n	8004ee2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e92:	7cfb      	ldrb	r3, [r7, #19]
 8004e94:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e98:	2b28      	cmp	r3, #40	@ 0x28
 8004e9a:	d117      	bne.n	8004ecc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0201 	orr.w	r2, r2, #1
 8004eaa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004eba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	2228      	movs	r2, #40	@ 0x28
 8004ec6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004eca:	e007      	b.n	8004edc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004edc:	6978      	ldr	r0, [r7, #20]
 8004ede:	f7fe fc4b 	bl	8003778 <HAL_I2C_ErrorCallback>
}
 8004ee2:	bf00      	nop
 8004ee4:	3718      	adds	r7, #24
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	20000004 	.word	0x20000004
 8004ef0:	14f8b589 	.word	0x14f8b589

08004ef4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	603b      	str	r3, [r7, #0]
 8004f00:	4613      	mov	r3, r2
 8004f02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f04:	e048      	b.n	8004f98 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f0c:	d044      	beq.n	8004f98 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f0e:	f7fd fa05 	bl	800231c <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d302      	bcc.n	8004f24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d139      	bne.n	8004f98 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	0c1b      	lsrs	r3, r3, #16
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d10d      	bne.n	8004f4a <I2C_WaitOnFlagUntilTimeout+0x56>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	43da      	mvns	r2, r3
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	bf0c      	ite	eq
 8004f40:	2301      	moveq	r3, #1
 8004f42:	2300      	movne	r3, #0
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	461a      	mov	r2, r3
 8004f48:	e00c      	b.n	8004f64 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	43da      	mvns	r2, r3
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	4013      	ands	r3, r2
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	bf0c      	ite	eq
 8004f5c:	2301      	moveq	r3, #1
 8004f5e:	2300      	movne	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	461a      	mov	r2, r3
 8004f64:	79fb      	ldrb	r3, [r7, #7]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d116      	bne.n	8004f98 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2220      	movs	r2, #32
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f84:	f043 0220 	orr.w	r2, r3, #32
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e023      	b.n	8004fe0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	0c1b      	lsrs	r3, r3, #16
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d10d      	bne.n	8004fbe <I2C_WaitOnFlagUntilTimeout+0xca>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	43da      	mvns	r2, r3
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	4013      	ands	r3, r2
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	bf0c      	ite	eq
 8004fb4:	2301      	moveq	r3, #1
 8004fb6:	2300      	movne	r3, #0
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	461a      	mov	r2, r3
 8004fbc:	e00c      	b.n	8004fd8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	43da      	mvns	r2, r3
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	bf0c      	ite	eq
 8004fd0:	2301      	moveq	r3, #1
 8004fd2:	2300      	movne	r3, #0
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	79fb      	ldrb	r3, [r7, #7]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d093      	beq.n	8004f06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
 8004ff4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ff6:	e071      	b.n	80050dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005006:	d123      	bne.n	8005050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005016:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005020:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2220      	movs	r2, #32
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503c:	f043 0204 	orr.w	r2, r3, #4
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e067      	b.n	8005120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005056:	d041      	beq.n	80050dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005058:	f7fd f960 	bl	800231c <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	429a      	cmp	r2, r3
 8005066:	d302      	bcc.n	800506e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d136      	bne.n	80050dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	0c1b      	lsrs	r3, r3, #16
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b01      	cmp	r3, #1
 8005076:	d10c      	bne.n	8005092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	43da      	mvns	r2, r3
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	4013      	ands	r3, r2
 8005084:	b29b      	uxth	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	bf14      	ite	ne
 800508a:	2301      	movne	r3, #1
 800508c:	2300      	moveq	r3, #0
 800508e:	b2db      	uxtb	r3, r3
 8005090:	e00b      	b.n	80050aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	43da      	mvns	r2, r3
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	4013      	ands	r3, r2
 800509e:	b29b      	uxth	r3, r3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	bf14      	ite	ne
 80050a4:	2301      	movne	r3, #1
 80050a6:	2300      	moveq	r3, #0
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d016      	beq.n	80050dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c8:	f043 0220 	orr.w	r2, r3, #32
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e021      	b.n	8005120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	0c1b      	lsrs	r3, r3, #16
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d10c      	bne.n	8005100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	43da      	mvns	r2, r3
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	4013      	ands	r3, r2
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	bf14      	ite	ne
 80050f8:	2301      	movne	r3, #1
 80050fa:	2300      	moveq	r3, #0
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	e00b      	b.n	8005118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	43da      	mvns	r2, r3
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	4013      	ands	r3, r2
 800510c:	b29b      	uxth	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	bf14      	ite	ne
 8005112:	2301      	movne	r3, #1
 8005114:	2300      	moveq	r3, #0
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b00      	cmp	r3, #0
 800511a:	f47f af6d 	bne.w	8004ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005134:	e034      	b.n	80051a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f000 f915 	bl	8005366 <I2C_IsAcknowledgeFailed>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e034      	b.n	80051b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800514c:	d028      	beq.n	80051a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800514e:	f7fd f8e5 	bl	800231c <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	429a      	cmp	r2, r3
 800515c:	d302      	bcc.n	8005164 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d11d      	bne.n	80051a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800516e:	2b80      	cmp	r3, #128	@ 0x80
 8005170:	d016      	beq.n	80051a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2220      	movs	r2, #32
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518c:	f043 0220 	orr.w	r2, r3, #32
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e007      	b.n	80051b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051aa:	2b80      	cmp	r3, #128	@ 0x80
 80051ac:	d1c3      	bne.n	8005136 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051c4:	e034      	b.n	8005230 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f000 f8cd 	bl	8005366 <I2C_IsAcknowledgeFailed>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e034      	b.n	8005240 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051dc:	d028      	beq.n	8005230 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051de:	f7fd f89d 	bl	800231c <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d302      	bcc.n	80051f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d11d      	bne.n	8005230 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	f003 0304 	and.w	r3, r3, #4
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d016      	beq.n	8005230 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2220      	movs	r2, #32
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521c:	f043 0220 	orr.w	r2, r3, #32
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e007      	b.n	8005240 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	f003 0304 	and.w	r3, r3, #4
 800523a:	2b04      	cmp	r3, #4
 800523c:	d1c3      	bne.n	80051c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005250:	2300      	movs	r3, #0
 8005252:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005254:	4b13      	ldr	r3, [pc, #76]	@ (80052a4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	08db      	lsrs	r3, r3, #3
 800525a:	4a13      	ldr	r2, [pc, #76]	@ (80052a8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800525c:	fba2 2303 	umull	r2, r3, r2, r3
 8005260:	0a1a      	lsrs	r2, r3, #8
 8005262:	4613      	mov	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	3b01      	subs	r3, #1
 800526e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d107      	bne.n	8005286 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527a:	f043 0220 	orr.w	r2, r3, #32
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e008      	b.n	8005298 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005290:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005294:	d0e9      	beq.n	800526a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3714      	adds	r7, #20
 800529c:	46bd      	mov	sp, r7
 800529e:	bc80      	pop	{r7}
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	20000004 	.word	0x20000004
 80052a8:	14f8b589 	.word	0x14f8b589

080052ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052b8:	e049      	b.n	800534e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	f003 0310 	and.w	r3, r3, #16
 80052c4:	2b10      	cmp	r3, #16
 80052c6:	d119      	bne.n	80052fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f06f 0210 	mvn.w	r2, #16
 80052d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2220      	movs	r2, #32
 80052dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e030      	b.n	800535e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052fc:	f7fd f80e 	bl	800231c <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	429a      	cmp	r2, r3
 800530a:	d302      	bcc.n	8005312 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d11d      	bne.n	800534e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800531c:	2b40      	cmp	r3, #64	@ 0x40
 800531e:	d016      	beq.n	800534e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2220      	movs	r2, #32
 800532a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800533a:	f043 0220 	orr.w	r2, r3, #32
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e007      	b.n	800535e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005358:	2b40      	cmp	r3, #64	@ 0x40
 800535a:	d1ae      	bne.n	80052ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005366:	b480      	push	{r7}
 8005368:	b083      	sub	sp, #12
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005378:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800537c:	d11b      	bne.n	80053b6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005386:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2220      	movs	r2, #32
 8005392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a2:	f043 0204 	orr.w	r2, r3, #4
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e000      	b.n	80053b8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	bc80      	pop	{r7}
 80053c0:	4770      	bx	lr

080053c2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ce:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80053d2:	d103      	bne.n	80053dc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80053da:	e007      	b.n	80053ec <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80053e4:	d102      	bne.n	80053ec <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2208      	movs	r2, #8
 80053ea:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bc80      	pop	{r7}
 80053f4:	4770      	bx	lr
	...

080053f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e272      	b.n	80058f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	f000 8087 	beq.w	8005526 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005418:	4b92      	ldr	r3, [pc, #584]	@ (8005664 <HAL_RCC_OscConfig+0x26c>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f003 030c 	and.w	r3, r3, #12
 8005420:	2b04      	cmp	r3, #4
 8005422:	d00c      	beq.n	800543e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005424:	4b8f      	ldr	r3, [pc, #572]	@ (8005664 <HAL_RCC_OscConfig+0x26c>)
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f003 030c 	and.w	r3, r3, #12
 800542c:	2b08      	cmp	r3, #8
 800542e:	d112      	bne.n	8005456 <HAL_RCC_OscConfig+0x5e>
 8005430:	4b8c      	ldr	r3, [pc, #560]	@ (8005664 <HAL_RCC_OscConfig+0x26c>)
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800543c:	d10b      	bne.n	8005456 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800543e:	4b89      	ldr	r3, [pc, #548]	@ (8005664 <HAL_RCC_OscConfig+0x26c>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d06c      	beq.n	8005524 <HAL_RCC_OscConfig+0x12c>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d168      	bne.n	8005524 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e24c      	b.n	80058f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800545e:	d106      	bne.n	800546e <HAL_RCC_OscConfig+0x76>
 8005460:	4b80      	ldr	r3, [pc, #512]	@ (8005664 <HAL_RCC_OscConfig+0x26c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a7f      	ldr	r2, [pc, #508]	@ (8005664 <HAL_RCC_OscConfig+0x26c>)
 8005466:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800546a:	6013      	str	r3, [r2, #0]
 800546c:	e02e      	b.n	80054cc <HAL_RCC_OscConfig+0xd4>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10c      	bne.n	8005490 <HAL_RCC_OscConfig+0x98>
 8005476:	4b7b      	ldr	r3, [pc, #492]	@ (8005664 <HAL_RCC_OscConfig+0x26c>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a7a      	ldr	r2, [pc, #488]	@ (8005664 <HAL_RCC_OscConfig+0x26c>)
 800547c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005480:	6013      	str	r3, [r2, #0]
 8005482:	4b78      	ldr	r3, [pc, #480]	@ (8005664 <HAL_RCC_OscConfig+0x26c>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a77      	ldr	r2, [pc, #476]	@ (8005664 <HAL_RCC_OscConfig+0x26c>)
 8005488:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	e01d      	b.n	80054cc <HAL_RCC_OscConfig+0xd4>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005498:	d10c      	bne.n	80054b4 <HAL_RCC_OscConfig+0xbc>
 800549a:	4b72      	ldr	r3, [pc, #456]	@ (8005664 <HAL_RCC_OscConfig+0x26c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a71      	ldr	r2, [pc, #452]	@ (8005664 <HAL_RCC_OscConfig+0x26c>)
 80054a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054a4:	6013      	str	r3, [r2, #0]
 80054a6:	4b6f      	ldr	r3, [pc, #444]	@ (8005664 <HAL_RCC_OscConfig+0x26c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a6e      	ldr	r2, [pc, #440]	@ (8005664 <HAL_RCC_OscConfig+0x26c>)
 80054ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054b0:	6013      	str	r3, [r2, #0]
 80054b2:	e00b      	b.n	80054cc <HAL_RCC_OscConfig+0xd4>
 80054b4:	4b6b      	ldr	r3, [pc, #428]	@ (8005664 <HAL_RCC_OscConfig+0x26c>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a6a      	ldr	r2, [pc, #424]	@ (8005664 <HAL_RCC_OscConfig+0x26c>)
 80054ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054be:	6013      	str	r3, [r2, #0]
 80054c0:	4b68      	ldr	r3, [pc, #416]	@ (8005664 <HAL_RCC_OscConfig+0x26c>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a67      	ldr	r2, [pc, #412]	@ (8005664 <HAL_RCC_OscConfig+0x26c>)
 80054c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d013      	beq.n	80054fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d4:	f7fc ff22 	bl	800231c <HAL_GetTick>
 80054d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054da:	e008      	b.n	80054ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054dc:	f7fc ff1e 	bl	800231c <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b64      	cmp	r3, #100	@ 0x64
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e200      	b.n	80058f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ee:	4b5d      	ldr	r3, [pc, #372]	@ (8005664 <HAL_RCC_OscConfig+0x26c>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d0f0      	beq.n	80054dc <HAL_RCC_OscConfig+0xe4>
 80054fa:	e014      	b.n	8005526 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054fc:	f7fc ff0e 	bl	800231c <HAL_GetTick>
 8005500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005502:	e008      	b.n	8005516 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005504:	f7fc ff0a 	bl	800231c <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b64      	cmp	r3, #100	@ 0x64
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e1ec      	b.n	80058f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005516:	4b53      	ldr	r3, [pc, #332]	@ (8005664 <HAL_RCC_OscConfig+0x26c>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1f0      	bne.n	8005504 <HAL_RCC_OscConfig+0x10c>
 8005522:	e000      	b.n	8005526 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d063      	beq.n	80055fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005532:	4b4c      	ldr	r3, [pc, #304]	@ (8005664 <HAL_RCC_OscConfig+0x26c>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f003 030c 	and.w	r3, r3, #12
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00b      	beq.n	8005556 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800553e:	4b49      	ldr	r3, [pc, #292]	@ (8005664 <HAL_RCC_OscConfig+0x26c>)
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f003 030c 	and.w	r3, r3, #12
 8005546:	2b08      	cmp	r3, #8
 8005548:	d11c      	bne.n	8005584 <HAL_RCC_OscConfig+0x18c>
 800554a:	4b46      	ldr	r3, [pc, #280]	@ (8005664 <HAL_RCC_OscConfig+0x26c>)
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d116      	bne.n	8005584 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005556:	4b43      	ldr	r3, [pc, #268]	@ (8005664 <HAL_RCC_OscConfig+0x26c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d005      	beq.n	800556e <HAL_RCC_OscConfig+0x176>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d001      	beq.n	800556e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e1c0      	b.n	80058f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800556e:	4b3d      	ldr	r3, [pc, #244]	@ (8005664 <HAL_RCC_OscConfig+0x26c>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	4939      	ldr	r1, [pc, #228]	@ (8005664 <HAL_RCC_OscConfig+0x26c>)
 800557e:	4313      	orrs	r3, r2
 8005580:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005582:	e03a      	b.n	80055fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d020      	beq.n	80055ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800558c:	4b36      	ldr	r3, [pc, #216]	@ (8005668 <HAL_RCC_OscConfig+0x270>)
 800558e:	2201      	movs	r2, #1
 8005590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005592:	f7fc fec3 	bl	800231c <HAL_GetTick>
 8005596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005598:	e008      	b.n	80055ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800559a:	f7fc febf 	bl	800231c <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d901      	bls.n	80055ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e1a1      	b.n	80058f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055ac:	4b2d      	ldr	r3, [pc, #180]	@ (8005664 <HAL_RCC_OscConfig+0x26c>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d0f0      	beq.n	800559a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055b8:	4b2a      	ldr	r3, [pc, #168]	@ (8005664 <HAL_RCC_OscConfig+0x26c>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	4927      	ldr	r1, [pc, #156]	@ (8005664 <HAL_RCC_OscConfig+0x26c>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	600b      	str	r3, [r1, #0]
 80055cc:	e015      	b.n	80055fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055ce:	4b26      	ldr	r3, [pc, #152]	@ (8005668 <HAL_RCC_OscConfig+0x270>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d4:	f7fc fea2 	bl	800231c <HAL_GetTick>
 80055d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055da:	e008      	b.n	80055ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055dc:	f7fc fe9e 	bl	800231c <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e180      	b.n	80058f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055ee:	4b1d      	ldr	r3, [pc, #116]	@ (8005664 <HAL_RCC_OscConfig+0x26c>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1f0      	bne.n	80055dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b00      	cmp	r3, #0
 8005604:	d03a      	beq.n	800567c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d019      	beq.n	8005642 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800560e:	4b17      	ldr	r3, [pc, #92]	@ (800566c <HAL_RCC_OscConfig+0x274>)
 8005610:	2201      	movs	r2, #1
 8005612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005614:	f7fc fe82 	bl	800231c <HAL_GetTick>
 8005618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800561a:	e008      	b.n	800562e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800561c:	f7fc fe7e 	bl	800231c <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e160      	b.n	80058f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800562e:	4b0d      	ldr	r3, [pc, #52]	@ (8005664 <HAL_RCC_OscConfig+0x26c>)
 8005630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d0f0      	beq.n	800561c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800563a:	2001      	movs	r0, #1
 800563c:	f000 faba 	bl	8005bb4 <RCC_Delay>
 8005640:	e01c      	b.n	800567c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005642:	4b0a      	ldr	r3, [pc, #40]	@ (800566c <HAL_RCC_OscConfig+0x274>)
 8005644:	2200      	movs	r2, #0
 8005646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005648:	f7fc fe68 	bl	800231c <HAL_GetTick>
 800564c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800564e:	e00f      	b.n	8005670 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005650:	f7fc fe64 	bl	800231c <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b02      	cmp	r3, #2
 800565c:	d908      	bls.n	8005670 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e146      	b.n	80058f0 <HAL_RCC_OscConfig+0x4f8>
 8005662:	bf00      	nop
 8005664:	40021000 	.word	0x40021000
 8005668:	42420000 	.word	0x42420000
 800566c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005670:	4b92      	ldr	r3, [pc, #584]	@ (80058bc <HAL_RCC_OscConfig+0x4c4>)
 8005672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005674:	f003 0302 	and.w	r3, r3, #2
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1e9      	bne.n	8005650 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0304 	and.w	r3, r3, #4
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 80a6 	beq.w	80057d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800568a:	2300      	movs	r3, #0
 800568c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800568e:	4b8b      	ldr	r3, [pc, #556]	@ (80058bc <HAL_RCC_OscConfig+0x4c4>)
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10d      	bne.n	80056b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800569a:	4b88      	ldr	r3, [pc, #544]	@ (80058bc <HAL_RCC_OscConfig+0x4c4>)
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	4a87      	ldr	r2, [pc, #540]	@ (80058bc <HAL_RCC_OscConfig+0x4c4>)
 80056a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056a4:	61d3      	str	r3, [r2, #28]
 80056a6:	4b85      	ldr	r3, [pc, #532]	@ (80058bc <HAL_RCC_OscConfig+0x4c4>)
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056ae:	60bb      	str	r3, [r7, #8]
 80056b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056b2:	2301      	movs	r3, #1
 80056b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b6:	4b82      	ldr	r3, [pc, #520]	@ (80058c0 <HAL_RCC_OscConfig+0x4c8>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d118      	bne.n	80056f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056c2:	4b7f      	ldr	r3, [pc, #508]	@ (80058c0 <HAL_RCC_OscConfig+0x4c8>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a7e      	ldr	r2, [pc, #504]	@ (80058c0 <HAL_RCC_OscConfig+0x4c8>)
 80056c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056ce:	f7fc fe25 	bl	800231c <HAL_GetTick>
 80056d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056d4:	e008      	b.n	80056e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056d6:	f7fc fe21 	bl	800231c <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	2b64      	cmp	r3, #100	@ 0x64
 80056e2:	d901      	bls.n	80056e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e103      	b.n	80058f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056e8:	4b75      	ldr	r3, [pc, #468]	@ (80058c0 <HAL_RCC_OscConfig+0x4c8>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d0f0      	beq.n	80056d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d106      	bne.n	800570a <HAL_RCC_OscConfig+0x312>
 80056fc:	4b6f      	ldr	r3, [pc, #444]	@ (80058bc <HAL_RCC_OscConfig+0x4c4>)
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	4a6e      	ldr	r2, [pc, #440]	@ (80058bc <HAL_RCC_OscConfig+0x4c4>)
 8005702:	f043 0301 	orr.w	r3, r3, #1
 8005706:	6213      	str	r3, [r2, #32]
 8005708:	e02d      	b.n	8005766 <HAL_RCC_OscConfig+0x36e>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10c      	bne.n	800572c <HAL_RCC_OscConfig+0x334>
 8005712:	4b6a      	ldr	r3, [pc, #424]	@ (80058bc <HAL_RCC_OscConfig+0x4c4>)
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	4a69      	ldr	r2, [pc, #420]	@ (80058bc <HAL_RCC_OscConfig+0x4c4>)
 8005718:	f023 0301 	bic.w	r3, r3, #1
 800571c:	6213      	str	r3, [r2, #32]
 800571e:	4b67      	ldr	r3, [pc, #412]	@ (80058bc <HAL_RCC_OscConfig+0x4c4>)
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	4a66      	ldr	r2, [pc, #408]	@ (80058bc <HAL_RCC_OscConfig+0x4c4>)
 8005724:	f023 0304 	bic.w	r3, r3, #4
 8005728:	6213      	str	r3, [r2, #32]
 800572a:	e01c      	b.n	8005766 <HAL_RCC_OscConfig+0x36e>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	2b05      	cmp	r3, #5
 8005732:	d10c      	bne.n	800574e <HAL_RCC_OscConfig+0x356>
 8005734:	4b61      	ldr	r3, [pc, #388]	@ (80058bc <HAL_RCC_OscConfig+0x4c4>)
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	4a60      	ldr	r2, [pc, #384]	@ (80058bc <HAL_RCC_OscConfig+0x4c4>)
 800573a:	f043 0304 	orr.w	r3, r3, #4
 800573e:	6213      	str	r3, [r2, #32]
 8005740:	4b5e      	ldr	r3, [pc, #376]	@ (80058bc <HAL_RCC_OscConfig+0x4c4>)
 8005742:	6a1b      	ldr	r3, [r3, #32]
 8005744:	4a5d      	ldr	r2, [pc, #372]	@ (80058bc <HAL_RCC_OscConfig+0x4c4>)
 8005746:	f043 0301 	orr.w	r3, r3, #1
 800574a:	6213      	str	r3, [r2, #32]
 800574c:	e00b      	b.n	8005766 <HAL_RCC_OscConfig+0x36e>
 800574e:	4b5b      	ldr	r3, [pc, #364]	@ (80058bc <HAL_RCC_OscConfig+0x4c4>)
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	4a5a      	ldr	r2, [pc, #360]	@ (80058bc <HAL_RCC_OscConfig+0x4c4>)
 8005754:	f023 0301 	bic.w	r3, r3, #1
 8005758:	6213      	str	r3, [r2, #32]
 800575a:	4b58      	ldr	r3, [pc, #352]	@ (80058bc <HAL_RCC_OscConfig+0x4c4>)
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	4a57      	ldr	r2, [pc, #348]	@ (80058bc <HAL_RCC_OscConfig+0x4c4>)
 8005760:	f023 0304 	bic.w	r3, r3, #4
 8005764:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d015      	beq.n	800579a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800576e:	f7fc fdd5 	bl	800231c <HAL_GetTick>
 8005772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005774:	e00a      	b.n	800578c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005776:	f7fc fdd1 	bl	800231c <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005784:	4293      	cmp	r3, r2
 8005786:	d901      	bls.n	800578c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e0b1      	b.n	80058f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800578c:	4b4b      	ldr	r3, [pc, #300]	@ (80058bc <HAL_RCC_OscConfig+0x4c4>)
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d0ee      	beq.n	8005776 <HAL_RCC_OscConfig+0x37e>
 8005798:	e014      	b.n	80057c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800579a:	f7fc fdbf 	bl	800231c <HAL_GetTick>
 800579e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057a0:	e00a      	b.n	80057b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057a2:	f7fc fdbb 	bl	800231c <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e09b      	b.n	80058f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057b8:	4b40      	ldr	r3, [pc, #256]	@ (80058bc <HAL_RCC_OscConfig+0x4c4>)
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1ee      	bne.n	80057a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80057c4:	7dfb      	ldrb	r3, [r7, #23]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d105      	bne.n	80057d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057ca:	4b3c      	ldr	r3, [pc, #240]	@ (80058bc <HAL_RCC_OscConfig+0x4c4>)
 80057cc:	69db      	ldr	r3, [r3, #28]
 80057ce:	4a3b      	ldr	r2, [pc, #236]	@ (80058bc <HAL_RCC_OscConfig+0x4c4>)
 80057d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f000 8087 	beq.w	80058ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057e0:	4b36      	ldr	r3, [pc, #216]	@ (80058bc <HAL_RCC_OscConfig+0x4c4>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f003 030c 	and.w	r3, r3, #12
 80057e8:	2b08      	cmp	r3, #8
 80057ea:	d061      	beq.n	80058b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	69db      	ldr	r3, [r3, #28]
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d146      	bne.n	8005882 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057f4:	4b33      	ldr	r3, [pc, #204]	@ (80058c4 <HAL_RCC_OscConfig+0x4cc>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057fa:	f7fc fd8f 	bl	800231c <HAL_GetTick>
 80057fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005800:	e008      	b.n	8005814 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005802:	f7fc fd8b 	bl	800231c <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	2b02      	cmp	r3, #2
 800580e:	d901      	bls.n	8005814 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e06d      	b.n	80058f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005814:	4b29      	ldr	r3, [pc, #164]	@ (80058bc <HAL_RCC_OscConfig+0x4c4>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1f0      	bne.n	8005802 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005828:	d108      	bne.n	800583c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800582a:	4b24      	ldr	r3, [pc, #144]	@ (80058bc <HAL_RCC_OscConfig+0x4c4>)
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	4921      	ldr	r1, [pc, #132]	@ (80058bc <HAL_RCC_OscConfig+0x4c4>)
 8005838:	4313      	orrs	r3, r2
 800583a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800583c:	4b1f      	ldr	r3, [pc, #124]	@ (80058bc <HAL_RCC_OscConfig+0x4c4>)
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a19      	ldr	r1, [r3, #32]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584c:	430b      	orrs	r3, r1
 800584e:	491b      	ldr	r1, [pc, #108]	@ (80058bc <HAL_RCC_OscConfig+0x4c4>)
 8005850:	4313      	orrs	r3, r2
 8005852:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005854:	4b1b      	ldr	r3, [pc, #108]	@ (80058c4 <HAL_RCC_OscConfig+0x4cc>)
 8005856:	2201      	movs	r2, #1
 8005858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800585a:	f7fc fd5f 	bl	800231c <HAL_GetTick>
 800585e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005860:	e008      	b.n	8005874 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005862:	f7fc fd5b 	bl	800231c <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	2b02      	cmp	r3, #2
 800586e:	d901      	bls.n	8005874 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e03d      	b.n	80058f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005874:	4b11      	ldr	r3, [pc, #68]	@ (80058bc <HAL_RCC_OscConfig+0x4c4>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d0f0      	beq.n	8005862 <HAL_RCC_OscConfig+0x46a>
 8005880:	e035      	b.n	80058ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005882:	4b10      	ldr	r3, [pc, #64]	@ (80058c4 <HAL_RCC_OscConfig+0x4cc>)
 8005884:	2200      	movs	r2, #0
 8005886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005888:	f7fc fd48 	bl	800231c <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800588e:	e008      	b.n	80058a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005890:	f7fc fd44 	bl	800231c <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e026      	b.n	80058f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058a2:	4b06      	ldr	r3, [pc, #24]	@ (80058bc <HAL_RCC_OscConfig+0x4c4>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1f0      	bne.n	8005890 <HAL_RCC_OscConfig+0x498>
 80058ae:	e01e      	b.n	80058ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	69db      	ldr	r3, [r3, #28]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d107      	bne.n	80058c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e019      	b.n	80058f0 <HAL_RCC_OscConfig+0x4f8>
 80058bc:	40021000 	.word	0x40021000
 80058c0:	40007000 	.word	0x40007000
 80058c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80058c8:	4b0b      	ldr	r3, [pc, #44]	@ (80058f8 <HAL_RCC_OscConfig+0x500>)
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d106      	bne.n	80058ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d001      	beq.n	80058ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e000      	b.n	80058f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3718      	adds	r7, #24
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	40021000 	.word	0x40021000

080058fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e0d0      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005910:	4b6a      	ldr	r3, [pc, #424]	@ (8005abc <HAL_RCC_ClockConfig+0x1c0>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0307 	and.w	r3, r3, #7
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	429a      	cmp	r2, r3
 800591c:	d910      	bls.n	8005940 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800591e:	4b67      	ldr	r3, [pc, #412]	@ (8005abc <HAL_RCC_ClockConfig+0x1c0>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f023 0207 	bic.w	r2, r3, #7
 8005926:	4965      	ldr	r1, [pc, #404]	@ (8005abc <HAL_RCC_ClockConfig+0x1c0>)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	4313      	orrs	r3, r2
 800592c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800592e:	4b63      	ldr	r3, [pc, #396]	@ (8005abc <HAL_RCC_ClockConfig+0x1c0>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0307 	and.w	r3, r3, #7
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	429a      	cmp	r2, r3
 800593a:	d001      	beq.n	8005940 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e0b8      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d020      	beq.n	800598e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	2b00      	cmp	r3, #0
 8005956:	d005      	beq.n	8005964 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005958:	4b59      	ldr	r3, [pc, #356]	@ (8005ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	4a58      	ldr	r2, [pc, #352]	@ (8005ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800595e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005962:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0308 	and.w	r3, r3, #8
 800596c:	2b00      	cmp	r3, #0
 800596e:	d005      	beq.n	800597c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005970:	4b53      	ldr	r3, [pc, #332]	@ (8005ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	4a52      	ldr	r2, [pc, #328]	@ (8005ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8005976:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800597a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800597c:	4b50      	ldr	r3, [pc, #320]	@ (8005ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	494d      	ldr	r1, [pc, #308]	@ (8005ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800598a:	4313      	orrs	r3, r2
 800598c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b00      	cmp	r3, #0
 8005998:	d040      	beq.n	8005a1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d107      	bne.n	80059b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059a2:	4b47      	ldr	r3, [pc, #284]	@ (8005ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d115      	bne.n	80059da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e07f      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d107      	bne.n	80059ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ba:	4b41      	ldr	r3, [pc, #260]	@ (8005ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d109      	bne.n	80059da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e073      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059ca:	4b3d      	ldr	r3, [pc, #244]	@ (8005ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e06b      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059da:	4b39      	ldr	r3, [pc, #228]	@ (8005ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f023 0203 	bic.w	r2, r3, #3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	4936      	ldr	r1, [pc, #216]	@ (8005ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059ec:	f7fc fc96 	bl	800231c <HAL_GetTick>
 80059f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059f2:	e00a      	b.n	8005a0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059f4:	f7fc fc92 	bl	800231c <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d901      	bls.n	8005a0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e053      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a0a:	4b2d      	ldr	r3, [pc, #180]	@ (8005ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f003 020c 	and.w	r2, r3, #12
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d1eb      	bne.n	80059f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a1c:	4b27      	ldr	r3, [pc, #156]	@ (8005abc <HAL_RCC_ClockConfig+0x1c0>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0307 	and.w	r3, r3, #7
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d210      	bcs.n	8005a4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a2a:	4b24      	ldr	r3, [pc, #144]	@ (8005abc <HAL_RCC_ClockConfig+0x1c0>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f023 0207 	bic.w	r2, r3, #7
 8005a32:	4922      	ldr	r1, [pc, #136]	@ (8005abc <HAL_RCC_ClockConfig+0x1c0>)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a3a:	4b20      	ldr	r3, [pc, #128]	@ (8005abc <HAL_RCC_ClockConfig+0x1c0>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0307 	and.w	r3, r3, #7
 8005a42:	683a      	ldr	r2, [r7, #0]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d001      	beq.n	8005a4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e032      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d008      	beq.n	8005a6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a58:	4b19      	ldr	r3, [pc, #100]	@ (8005ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	4916      	ldr	r1, [pc, #88]	@ (8005ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0308 	and.w	r3, r3, #8
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d009      	beq.n	8005a8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a76:	4b12      	ldr	r3, [pc, #72]	@ (8005ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	00db      	lsls	r3, r3, #3
 8005a84:	490e      	ldr	r1, [pc, #56]	@ (8005ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a8a:	f000 f821 	bl	8005ad0 <HAL_RCC_GetSysClockFreq>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	4b0b      	ldr	r3, [pc, #44]	@ (8005ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	091b      	lsrs	r3, r3, #4
 8005a96:	f003 030f 	and.w	r3, r3, #15
 8005a9a:	490a      	ldr	r1, [pc, #40]	@ (8005ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8005a9c:	5ccb      	ldrb	r3, [r1, r3]
 8005a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa2:	4a09      	ldr	r2, [pc, #36]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1cc>)
 8005aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005aa6:	4b09      	ldr	r3, [pc, #36]	@ (8005acc <HAL_RCC_ClockConfig+0x1d0>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7fc fbf4 	bl	8002298 <HAL_InitTick>

  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	40022000 	.word	0x40022000
 8005ac0:	40021000 	.word	0x40021000
 8005ac4:	080063cc 	.word	0x080063cc
 8005ac8:	20000004 	.word	0x20000004
 8005acc:	20000008 	.word	0x20000008

08005ad0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b087      	sub	sp, #28
 8005ad4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60fb      	str	r3, [r7, #12]
 8005ada:	2300      	movs	r3, #0
 8005adc:	60bb      	str	r3, [r7, #8]
 8005ade:	2300      	movs	r3, #0
 8005ae0:	617b      	str	r3, [r7, #20]
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005aea:	4b1e      	ldr	r3, [pc, #120]	@ (8005b64 <HAL_RCC_GetSysClockFreq+0x94>)
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f003 030c 	and.w	r3, r3, #12
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	d002      	beq.n	8005b00 <HAL_RCC_GetSysClockFreq+0x30>
 8005afa:	2b08      	cmp	r3, #8
 8005afc:	d003      	beq.n	8005b06 <HAL_RCC_GetSysClockFreq+0x36>
 8005afe:	e027      	b.n	8005b50 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b00:	4b19      	ldr	r3, [pc, #100]	@ (8005b68 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b02:	613b      	str	r3, [r7, #16]
      break;
 8005b04:	e027      	b.n	8005b56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	0c9b      	lsrs	r3, r3, #18
 8005b0a:	f003 030f 	and.w	r3, r3, #15
 8005b0e:	4a17      	ldr	r2, [pc, #92]	@ (8005b6c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005b10:	5cd3      	ldrb	r3, [r2, r3]
 8005b12:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d010      	beq.n	8005b40 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005b1e:	4b11      	ldr	r3, [pc, #68]	@ (8005b64 <HAL_RCC_GetSysClockFreq+0x94>)
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	0c5b      	lsrs	r3, r3, #17
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	4a11      	ldr	r2, [pc, #68]	@ (8005b70 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005b2a:	5cd3      	ldrb	r3, [r2, r3]
 8005b2c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a0d      	ldr	r2, [pc, #52]	@ (8005b68 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b32:	fb03 f202 	mul.w	r2, r3, r2
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b3c:	617b      	str	r3, [r7, #20]
 8005b3e:	e004      	b.n	8005b4a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a0c      	ldr	r2, [pc, #48]	@ (8005b74 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005b44:	fb02 f303 	mul.w	r3, r2, r3
 8005b48:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	613b      	str	r3, [r7, #16]
      break;
 8005b4e:	e002      	b.n	8005b56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005b50:	4b05      	ldr	r3, [pc, #20]	@ (8005b68 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b52:	613b      	str	r3, [r7, #16]
      break;
 8005b54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b56:	693b      	ldr	r3, [r7, #16]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	371c      	adds	r7, #28
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bc80      	pop	{r7}
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	40021000 	.word	0x40021000
 8005b68:	007a1200 	.word	0x007a1200
 8005b6c:	080063e4 	.word	0x080063e4
 8005b70:	080063f4 	.word	0x080063f4
 8005b74:	003d0900 	.word	0x003d0900

08005b78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b7c:	4b02      	ldr	r3, [pc, #8]	@ (8005b88 <HAL_RCC_GetHCLKFreq+0x10>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bc80      	pop	{r7}
 8005b86:	4770      	bx	lr
 8005b88:	20000004 	.word	0x20000004

08005b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b90:	f7ff fff2 	bl	8005b78 <HAL_RCC_GetHCLKFreq>
 8005b94:	4602      	mov	r2, r0
 8005b96:	4b05      	ldr	r3, [pc, #20]	@ (8005bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	0a1b      	lsrs	r3, r3, #8
 8005b9c:	f003 0307 	and.w	r3, r3, #7
 8005ba0:	4903      	ldr	r1, [pc, #12]	@ (8005bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ba2:	5ccb      	ldrb	r3, [r1, r3]
 8005ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	40021000 	.word	0x40021000
 8005bb0:	080063dc 	.word	0x080063dc

08005bb4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8005be8 <RCC_Delay+0x34>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8005bec <RCC_Delay+0x38>)
 8005bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc6:	0a5b      	lsrs	r3, r3, #9
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	fb02 f303 	mul.w	r3, r2, r3
 8005bce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005bd0:	bf00      	nop
  }
  while (Delay --);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	1e5a      	subs	r2, r3, #1
 8005bd6:	60fa      	str	r2, [r7, #12]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1f9      	bne.n	8005bd0 <RCC_Delay+0x1c>
}
 8005bdc:	bf00      	nop
 8005bde:	bf00      	nop
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bc80      	pop	{r7}
 8005be6:	4770      	bx	lr
 8005be8:	20000004 	.word	0x20000004
 8005bec:	10624dd3 	.word	0x10624dd3

08005bf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e041      	b.n	8005c86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d106      	bne.n	8005c1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f7fc fac4 	bl	80021a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2202      	movs	r2, #2
 8005c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	3304      	adds	r3, #4
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	4610      	mov	r0, r2
 8005c30:	f000 fa12 	bl	8006058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b084      	sub	sp, #16
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	f003 0302 	and.w	r3, r3, #2
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d020      	beq.n	8005cf2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d01b      	beq.n	8005cf2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f06f 0202 	mvn.w	r2, #2
 8005cc2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	f003 0303 	and.w	r3, r3, #3
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d003      	beq.n	8005ce0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 f9a1 	bl	8006020 <HAL_TIM_IC_CaptureCallback>
 8005cde:	e005      	b.n	8005cec <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 f994 	bl	800600e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f9a3 	bl	8006032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	f003 0304 	and.w	r3, r3, #4
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d020      	beq.n	8005d3e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f003 0304 	and.w	r3, r3, #4
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d01b      	beq.n	8005d3e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f06f 0204 	mvn.w	r2, #4
 8005d0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2202      	movs	r2, #2
 8005d14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d003      	beq.n	8005d2c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 f97b 	bl	8006020 <HAL_TIM_IC_CaptureCallback>
 8005d2a:	e005      	b.n	8005d38 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 f96e 	bl	800600e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f97d 	bl	8006032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	f003 0308 	and.w	r3, r3, #8
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d020      	beq.n	8005d8a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f003 0308 	and.w	r3, r3, #8
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d01b      	beq.n	8005d8a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f06f 0208 	mvn.w	r2, #8
 8005d5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2204      	movs	r2, #4
 8005d60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	69db      	ldr	r3, [r3, #28]
 8005d68:	f003 0303 	and.w	r3, r3, #3
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d003      	beq.n	8005d78 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f955 	bl	8006020 <HAL_TIM_IC_CaptureCallback>
 8005d76:	e005      	b.n	8005d84 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 f948 	bl	800600e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f957 	bl	8006032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	f003 0310 	and.w	r3, r3, #16
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d020      	beq.n	8005dd6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f003 0310 	and.w	r3, r3, #16
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d01b      	beq.n	8005dd6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f06f 0210 	mvn.w	r2, #16
 8005da6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2208      	movs	r2, #8
 8005dac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d003      	beq.n	8005dc4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f92f 	bl	8006020 <HAL_TIM_IC_CaptureCallback>
 8005dc2:	e005      	b.n	8005dd0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 f922 	bl	800600e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f931 	bl	8006032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00c      	beq.n	8005dfa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d007      	beq.n	8005dfa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f06f 0201 	mvn.w	r2, #1
 8005df2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 f901 	bl	8005ffc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00c      	beq.n	8005e1e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d007      	beq.n	8005e1e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fa88 	bl	800632e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00c      	beq.n	8005e42 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d007      	beq.n	8005e42 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f901 	bl	8006044 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	f003 0320 	and.w	r3, r3, #32
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00c      	beq.n	8005e66 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f003 0320 	and.w	r3, r3, #32
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d007      	beq.n	8005e66 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f06f 0220 	mvn.w	r2, #32
 8005e5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 fa5b 	bl	800631c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e66:	bf00      	nop
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b084      	sub	sp, #16
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d101      	bne.n	8005e8a <HAL_TIM_ConfigClockSource+0x1c>
 8005e86:	2302      	movs	r3, #2
 8005e88:	e0b4      	b.n	8005ff4 <HAL_TIM_ConfigClockSource+0x186>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2202      	movs	r2, #2
 8005e96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ea8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005eb0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ec2:	d03e      	beq.n	8005f42 <HAL_TIM_ConfigClockSource+0xd4>
 8005ec4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ec8:	f200 8087 	bhi.w	8005fda <HAL_TIM_ConfigClockSource+0x16c>
 8005ecc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ed0:	f000 8086 	beq.w	8005fe0 <HAL_TIM_ConfigClockSource+0x172>
 8005ed4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ed8:	d87f      	bhi.n	8005fda <HAL_TIM_ConfigClockSource+0x16c>
 8005eda:	2b70      	cmp	r3, #112	@ 0x70
 8005edc:	d01a      	beq.n	8005f14 <HAL_TIM_ConfigClockSource+0xa6>
 8005ede:	2b70      	cmp	r3, #112	@ 0x70
 8005ee0:	d87b      	bhi.n	8005fda <HAL_TIM_ConfigClockSource+0x16c>
 8005ee2:	2b60      	cmp	r3, #96	@ 0x60
 8005ee4:	d050      	beq.n	8005f88 <HAL_TIM_ConfigClockSource+0x11a>
 8005ee6:	2b60      	cmp	r3, #96	@ 0x60
 8005ee8:	d877      	bhi.n	8005fda <HAL_TIM_ConfigClockSource+0x16c>
 8005eea:	2b50      	cmp	r3, #80	@ 0x50
 8005eec:	d03c      	beq.n	8005f68 <HAL_TIM_ConfigClockSource+0xfa>
 8005eee:	2b50      	cmp	r3, #80	@ 0x50
 8005ef0:	d873      	bhi.n	8005fda <HAL_TIM_ConfigClockSource+0x16c>
 8005ef2:	2b40      	cmp	r3, #64	@ 0x40
 8005ef4:	d058      	beq.n	8005fa8 <HAL_TIM_ConfigClockSource+0x13a>
 8005ef6:	2b40      	cmp	r3, #64	@ 0x40
 8005ef8:	d86f      	bhi.n	8005fda <HAL_TIM_ConfigClockSource+0x16c>
 8005efa:	2b30      	cmp	r3, #48	@ 0x30
 8005efc:	d064      	beq.n	8005fc8 <HAL_TIM_ConfigClockSource+0x15a>
 8005efe:	2b30      	cmp	r3, #48	@ 0x30
 8005f00:	d86b      	bhi.n	8005fda <HAL_TIM_ConfigClockSource+0x16c>
 8005f02:	2b20      	cmp	r3, #32
 8005f04:	d060      	beq.n	8005fc8 <HAL_TIM_ConfigClockSource+0x15a>
 8005f06:	2b20      	cmp	r3, #32
 8005f08:	d867      	bhi.n	8005fda <HAL_TIM_ConfigClockSource+0x16c>
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d05c      	beq.n	8005fc8 <HAL_TIM_ConfigClockSource+0x15a>
 8005f0e:	2b10      	cmp	r3, #16
 8005f10:	d05a      	beq.n	8005fc8 <HAL_TIM_ConfigClockSource+0x15a>
 8005f12:	e062      	b.n	8005fda <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f24:	f000 f97d 	bl	8006222 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005f36:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	609a      	str	r2, [r3, #8]
      break;
 8005f40:	e04f      	b.n	8005fe2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f52:	f000 f966 	bl	8006222 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f64:	609a      	str	r2, [r3, #8]
      break;
 8005f66:	e03c      	b.n	8005fe2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f74:	461a      	mov	r2, r3
 8005f76:	f000 f8dd 	bl	8006134 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2150      	movs	r1, #80	@ 0x50
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 f934 	bl	80061ee <TIM_ITRx_SetConfig>
      break;
 8005f86:	e02c      	b.n	8005fe2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f94:	461a      	mov	r2, r3
 8005f96:	f000 f8fb 	bl	8006190 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2160      	movs	r1, #96	@ 0x60
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f000 f924 	bl	80061ee <TIM_ITRx_SetConfig>
      break;
 8005fa6:	e01c      	b.n	8005fe2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	f000 f8bd 	bl	8006134 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2140      	movs	r1, #64	@ 0x40
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f000 f914 	bl	80061ee <TIM_ITRx_SetConfig>
      break;
 8005fc6:	e00c      	b.n	8005fe2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4610      	mov	r0, r2
 8005fd4:	f000 f90b 	bl	80061ee <TIM_ITRx_SetConfig>
      break;
 8005fd8:	e003      	b.n	8005fe2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	73fb      	strb	r3, [r7, #15]
      break;
 8005fde:	e000      	b.n	8005fe2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005fe0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	bc80      	pop	{r7}
 800600c:	4770      	bx	lr

0800600e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006016:	bf00      	nop
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	bc80      	pop	{r7}
 800601e:	4770      	bx	lr

08006020 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	bc80      	pop	{r7}
 8006030:	4770      	bx	lr

08006032 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006032:	b480      	push	{r7}
 8006034:	b083      	sub	sp, #12
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800603a:	bf00      	nop
 800603c:	370c      	adds	r7, #12
 800603e:	46bd      	mov	sp, r7
 8006040:	bc80      	pop	{r7}
 8006042:	4770      	bx	lr

08006044 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	bc80      	pop	{r7}
 8006054:	4770      	bx	lr
	...

08006058 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a2f      	ldr	r2, [pc, #188]	@ (8006128 <TIM_Base_SetConfig+0xd0>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d00b      	beq.n	8006088 <TIM_Base_SetConfig+0x30>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006076:	d007      	beq.n	8006088 <TIM_Base_SetConfig+0x30>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a2c      	ldr	r2, [pc, #176]	@ (800612c <TIM_Base_SetConfig+0xd4>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d003      	beq.n	8006088 <TIM_Base_SetConfig+0x30>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a2b      	ldr	r2, [pc, #172]	@ (8006130 <TIM_Base_SetConfig+0xd8>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d108      	bne.n	800609a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800608e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	4313      	orrs	r3, r2
 8006098:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a22      	ldr	r2, [pc, #136]	@ (8006128 <TIM_Base_SetConfig+0xd0>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d00b      	beq.n	80060ba <TIM_Base_SetConfig+0x62>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060a8:	d007      	beq.n	80060ba <TIM_Base_SetConfig+0x62>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a1f      	ldr	r2, [pc, #124]	@ (800612c <TIM_Base_SetConfig+0xd4>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d003      	beq.n	80060ba <TIM_Base_SetConfig+0x62>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a1e      	ldr	r2, [pc, #120]	@ (8006130 <TIM_Base_SetConfig+0xd8>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d108      	bne.n	80060cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	689a      	ldr	r2, [r3, #8]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a0d      	ldr	r2, [pc, #52]	@ (8006128 <TIM_Base_SetConfig+0xd0>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d103      	bne.n	8006100 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	691a      	ldr	r2, [r3, #16]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b00      	cmp	r3, #0
 8006110:	d005      	beq.n	800611e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	f023 0201 	bic.w	r2, r3, #1
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	611a      	str	r2, [r3, #16]
  }
}
 800611e:	bf00      	nop
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	bc80      	pop	{r7}
 8006126:	4770      	bx	lr
 8006128:	40012c00 	.word	0x40012c00
 800612c:	40000400 	.word	0x40000400
 8006130:	40000800 	.word	0x40000800

08006134 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	f023 0201 	bic.w	r2, r3, #1
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800615e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	011b      	lsls	r3, r3, #4
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	4313      	orrs	r3, r2
 8006168:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	f023 030a 	bic.w	r3, r3, #10
 8006170:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	4313      	orrs	r3, r2
 8006178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	621a      	str	r2, [r3, #32]
}
 8006186:	bf00      	nop
 8006188:	371c      	adds	r7, #28
 800618a:	46bd      	mov	sp, r7
 800618c:	bc80      	pop	{r7}
 800618e:	4770      	bx	lr

08006190 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006190:	b480      	push	{r7}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6a1b      	ldr	r3, [r3, #32]
 80061a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	f023 0210 	bic.w	r2, r3, #16
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80061ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	031b      	lsls	r3, r3, #12
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80061cc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	011b      	lsls	r3, r3, #4
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	621a      	str	r2, [r3, #32]
}
 80061e4:	bf00      	nop
 80061e6:	371c      	adds	r7, #28
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bc80      	pop	{r7}
 80061ec:	4770      	bx	lr

080061ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b085      	sub	sp, #20
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
 80061f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006204:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4313      	orrs	r3, r2
 800620c:	f043 0307 	orr.w	r3, r3, #7
 8006210:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	609a      	str	r2, [r3, #8]
}
 8006218:	bf00      	nop
 800621a:	3714      	adds	r7, #20
 800621c:	46bd      	mov	sp, r7
 800621e:	bc80      	pop	{r7}
 8006220:	4770      	bx	lr

08006222 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006222:	b480      	push	{r7}
 8006224:	b087      	sub	sp, #28
 8006226:	af00      	add	r7, sp, #0
 8006228:	60f8      	str	r0, [r7, #12]
 800622a:	60b9      	str	r1, [r7, #8]
 800622c:	607a      	str	r2, [r7, #4]
 800622e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800623c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	021a      	lsls	r2, r3, #8
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	431a      	orrs	r2, r3
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	4313      	orrs	r3, r2
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	4313      	orrs	r3, r2
 800624e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	609a      	str	r2, [r3, #8]
}
 8006256:	bf00      	nop
 8006258:	371c      	adds	r7, #28
 800625a:	46bd      	mov	sp, r7
 800625c:	bc80      	pop	{r7}
 800625e:	4770      	bx	lr

08006260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006270:	2b01      	cmp	r3, #1
 8006272:	d101      	bne.n	8006278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006274:	2302      	movs	r3, #2
 8006276:	e046      	b.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2202      	movs	r2, #2
 8006284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800629e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a16      	ldr	r2, [pc, #88]	@ (8006310 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d00e      	beq.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062c4:	d009      	beq.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a12      	ldr	r2, [pc, #72]	@ (8006314 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d004      	beq.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a10      	ldr	r2, [pc, #64]	@ (8006318 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d10c      	bne.n	80062f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	bc80      	pop	{r7}
 800630e:	4770      	bx	lr
 8006310:	40012c00 	.word	0x40012c00
 8006314:	40000400 	.word	0x40000400
 8006318:	40000800 	.word	0x40000800

0800631c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	bc80      	pop	{r7}
 800632c:	4770      	bx	lr

0800632e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800632e:	b480      	push	{r7}
 8006330:	b083      	sub	sp, #12
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006336:	bf00      	nop
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	bc80      	pop	{r7}
 800633e:	4770      	bx	lr

08006340 <memset>:
 8006340:	4603      	mov	r3, r0
 8006342:	4402      	add	r2, r0
 8006344:	4293      	cmp	r3, r2
 8006346:	d100      	bne.n	800634a <memset+0xa>
 8006348:	4770      	bx	lr
 800634a:	f803 1b01 	strb.w	r1, [r3], #1
 800634e:	e7f9      	b.n	8006344 <memset+0x4>

08006350 <__libc_init_array>:
 8006350:	b570      	push	{r4, r5, r6, lr}
 8006352:	2600      	movs	r6, #0
 8006354:	4d0c      	ldr	r5, [pc, #48]	@ (8006388 <__libc_init_array+0x38>)
 8006356:	4c0d      	ldr	r4, [pc, #52]	@ (800638c <__libc_init_array+0x3c>)
 8006358:	1b64      	subs	r4, r4, r5
 800635a:	10a4      	asrs	r4, r4, #2
 800635c:	42a6      	cmp	r6, r4
 800635e:	d109      	bne.n	8006374 <__libc_init_array+0x24>
 8006360:	f000 f828 	bl	80063b4 <_init>
 8006364:	2600      	movs	r6, #0
 8006366:	4d0a      	ldr	r5, [pc, #40]	@ (8006390 <__libc_init_array+0x40>)
 8006368:	4c0a      	ldr	r4, [pc, #40]	@ (8006394 <__libc_init_array+0x44>)
 800636a:	1b64      	subs	r4, r4, r5
 800636c:	10a4      	asrs	r4, r4, #2
 800636e:	42a6      	cmp	r6, r4
 8006370:	d105      	bne.n	800637e <__libc_init_array+0x2e>
 8006372:	bd70      	pop	{r4, r5, r6, pc}
 8006374:	f855 3b04 	ldr.w	r3, [r5], #4
 8006378:	4798      	blx	r3
 800637a:	3601      	adds	r6, #1
 800637c:	e7ee      	b.n	800635c <__libc_init_array+0xc>
 800637e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006382:	4798      	blx	r3
 8006384:	3601      	adds	r6, #1
 8006386:	e7f2      	b.n	800636e <__libc_init_array+0x1e>
 8006388:	080063f8 	.word	0x080063f8
 800638c:	080063f8 	.word	0x080063f8
 8006390:	080063f8 	.word	0x080063f8
 8006394:	080063fc 	.word	0x080063fc

08006398 <memcpy>:
 8006398:	440a      	add	r2, r1
 800639a:	4291      	cmp	r1, r2
 800639c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80063a0:	d100      	bne.n	80063a4 <memcpy+0xc>
 80063a2:	4770      	bx	lr
 80063a4:	b510      	push	{r4, lr}
 80063a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063aa:	4291      	cmp	r1, r2
 80063ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063b0:	d1f9      	bne.n	80063a6 <memcpy+0xe>
 80063b2:	bd10      	pop	{r4, pc}

080063b4 <_init>:
 80063b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063b6:	bf00      	nop
 80063b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ba:	bc08      	pop	{r3}
 80063bc:	469e      	mov	lr, r3
 80063be:	4770      	bx	lr

080063c0 <_fini>:
 80063c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c2:	bf00      	nop
 80063c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063c6:	bc08      	pop	{r3}
 80063c8:	469e      	mov	lr, r3
 80063ca:	4770      	bx	lr
