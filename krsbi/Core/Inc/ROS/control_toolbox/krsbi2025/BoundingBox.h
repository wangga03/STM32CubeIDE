// Generated by gencpp from file krsbi2025/BoundingBox.msg
// DO NOT EDIT!


#ifndef KRSBI2025_MESSAGE_BOUNDINGBOX_H
#define KRSBI2025_MESSAGE_BOUNDINGBOX_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace krsbi2025
{
template <class ContainerAllocator>
struct BoundingBox_
{
  typedef BoundingBox_<ContainerAllocator> Type;

  BoundingBox_()
    : class_name()
    , probability(0.0)
    , x_min(0)
    , y_min(0)
    , x_max(0)
    , y_max(0)  {
    }
  BoundingBox_(const ContainerAllocator& _alloc)
    : class_name(_alloc)
    , probability(0.0)
    , x_min(0)
    , y_min(0)
    , x_max(0)
    , y_max(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _class_name_type;
  _class_name_type class_name;

   typedef float _probability_type;
  _probability_type probability;

   typedef int16_t _x_min_type;
  _x_min_type x_min;

   typedef int16_t _y_min_type;
  _y_min_type y_min;

   typedef int16_t _x_max_type;
  _x_max_type x_max;

   typedef int16_t _y_max_type;
  _y_max_type y_max;





  typedef boost::shared_ptr< ::krsbi2025::BoundingBox_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::krsbi2025::BoundingBox_<ContainerAllocator> const> ConstPtr;

}; // struct BoundingBox_

typedef ::krsbi2025::BoundingBox_<std::allocator<void> > BoundingBox;

typedef boost::shared_ptr< ::krsbi2025::BoundingBox > BoundingBoxPtr;
typedef boost::shared_ptr< ::krsbi2025::BoundingBox const> BoundingBoxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::krsbi2025::BoundingBox_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::krsbi2025::BoundingBox_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::krsbi2025::BoundingBox_<ContainerAllocator1> & lhs, const ::krsbi2025::BoundingBox_<ContainerAllocator2> & rhs)
{
  return lhs.class_name == rhs.class_name &&
    lhs.probability == rhs.probability &&
    lhs.x_min == rhs.x_min &&
    lhs.y_min == rhs.y_min &&
    lhs.x_max == rhs.x_max &&
    lhs.y_max == rhs.y_max;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::krsbi2025::BoundingBox_<ContainerAllocator1> & lhs, const ::krsbi2025::BoundingBox_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace krsbi2025

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::krsbi2025::BoundingBox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::krsbi2025::BoundingBox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::krsbi2025::BoundingBox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::krsbi2025::BoundingBox_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::krsbi2025::BoundingBox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::krsbi2025::BoundingBox_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::krsbi2025::BoundingBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bab830745238c189a819fc237712823a";
  }

  static const char* value(const ::krsbi2025::BoundingBox_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbab830745238c189ULL;
  static const uint64_t static_value2 = 0xa819fc237712823aULL;
};

template<class ContainerAllocator>
struct DataType< ::krsbi2025::BoundingBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "krsbi2025/BoundingBox";
  }

  static const char* value(const ::krsbi2025::BoundingBox_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::krsbi2025::BoundingBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string class_name\n"
"float32 probability\n"
"int16 x_min\n"
"int16 y_min\n"
"int16 x_max\n"
"int16 y_max\n"
;
  }

  static const char* value(const ::krsbi2025::BoundingBox_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::krsbi2025::BoundingBox_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.class_name);
      stream.next(m.probability);
      stream.next(m.x_min);
      stream.next(m.y_min);
      stream.next(m.x_max);
      stream.next(m.y_max);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BoundingBox_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::krsbi2025::BoundingBox_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::krsbi2025::BoundingBox_<ContainerAllocator>& v)
  {
    s << indent << "class_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.class_name);
    s << indent << "probability: ";
    Printer<float>::stream(s, indent + "  ", v.probability);
    s << indent << "x_min: ";
    Printer<int16_t>::stream(s, indent + "  ", v.x_min);
    s << indent << "y_min: ";
    Printer<int16_t>::stream(s, indent + "  ", v.y_min);
    s << indent << "x_max: ";
    Printer<int16_t>::stream(s, indent + "  ", v.x_max);
    s << indent << "y_max: ";
    Printer<int16_t>::stream(s, indent + "  ", v.y_max);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KRSBI2025_MESSAGE_BOUNDINGBOX_H
