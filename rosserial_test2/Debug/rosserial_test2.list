
rosserial_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047c8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  080048d4  080048d4  000058d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b24  08004b24  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b24  08004b24  00005b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b2c  08004b2c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004b2c  08004b2c  00005b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b34  08004b34  00005b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004b38  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ba4  2000005c  08004b94  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c00  08004b94  00006c00  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dad6  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023e7  00000000  00000000  00013b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  00015f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000701  00000000  00000000  00016880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d2b  00000000  00000000  00016f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd50  00000000  00000000  0002ecac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087a86  00000000  00000000  0003a9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2482  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002764  00000000  00000000  000c24c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000c4c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080048bc 	.word	0x080048bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080048bc 	.word	0x080048bc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000166:	683b      	ldr	r3, [r7, #0]
 8000168:	681b      	ldr	r3, [r3, #0]
 800016a:	0a5a      	lsrs	r2, r3, #9
 800016c:	490f      	ldr	r1, [pc, #60]	@ (80001ac <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800016e:	fba1 1202 	umull	r1, r2, r1, r2
 8000172:	09d2      	lsrs	r2, r2, #7
 8000174:	490e      	ldr	r1, [pc, #56]	@ (80001b0 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000176:	fb01 f202 	mul.w	r2, r1, r2
 800017a:	1a9b      	subs	r3, r3, r2
 800017c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800017e:	683b      	ldr	r3, [r7, #0]
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	0a5b      	lsrs	r3, r3, #9
 8000184:	4a09      	ldr	r2, [pc, #36]	@ (80001ac <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000186:	fba2 2303 	umull	r2, r3, r2, r3
 800018a:	09db      	lsrs	r3, r3, #7
 800018c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	681a      	ldr	r2, [r3, #0]
 8000192:	68bb      	ldr	r3, [r7, #8]
 8000194:	441a      	add	r2, r3
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800019a:	683b      	ldr	r3, [r7, #0]
 800019c:	68fa      	ldr	r2, [r7, #12]
 800019e:	601a      	str	r2, [r3, #0]
}
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	00044b83 	.word	0x00044b83
 80001b0:	3b9aca00 	.word	0x3b9aca00

080001b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80001ba:	4b10      	ldr	r3, [pc, #64]	@ (80001fc <MX_DMA_Init+0x48>)
 80001bc:	695b      	ldr	r3, [r3, #20]
 80001be:	4a0f      	ldr	r2, [pc, #60]	@ (80001fc <MX_DMA_Init+0x48>)
 80001c0:	f043 0301 	orr.w	r3, r3, #1
 80001c4:	6153      	str	r3, [r2, #20]
 80001c6:	4b0d      	ldr	r3, [pc, #52]	@ (80001fc <MX_DMA_Init+0x48>)
 80001c8:	695b      	ldr	r3, [r3, #20]
 80001ca:	f003 0301 	and.w	r3, r3, #1
 80001ce:	607b      	str	r3, [r7, #4]
 80001d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80001d2:	2200      	movs	r2, #0
 80001d4:	2100      	movs	r1, #0
 80001d6:	2010      	movs	r0, #16
 80001d8:	f002 f99b 	bl	8002512 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80001dc:	2010      	movs	r0, #16
 80001de:	f002 f9b4 	bl	800254a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80001e2:	2200      	movs	r2, #0
 80001e4:	2100      	movs	r1, #0
 80001e6:	2011      	movs	r0, #17
 80001e8:	f002 f993 	bl	8002512 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80001ec:	2011      	movs	r0, #17
 80001ee:	f002 f9ac 	bl	800254a <HAL_NVIC_EnableIRQ>

}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40021000 	.word	0x40021000

08000200 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000206:	4b0e      	ldr	r3, [pc, #56]	@ (8000240 <MX_GPIO_Init+0x40>)
 8000208:	699b      	ldr	r3, [r3, #24]
 800020a:	4a0d      	ldr	r2, [pc, #52]	@ (8000240 <MX_GPIO_Init+0x40>)
 800020c:	f043 0320 	orr.w	r3, r3, #32
 8000210:	6193      	str	r3, [r2, #24]
 8000212:	4b0b      	ldr	r3, [pc, #44]	@ (8000240 <MX_GPIO_Init+0x40>)
 8000214:	699b      	ldr	r3, [r3, #24]
 8000216:	f003 0320 	and.w	r3, r3, #32
 800021a:	607b      	str	r3, [r7, #4]
 800021c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800021e:	4b08      	ldr	r3, [pc, #32]	@ (8000240 <MX_GPIO_Init+0x40>)
 8000220:	699b      	ldr	r3, [r3, #24]
 8000222:	4a07      	ldr	r2, [pc, #28]	@ (8000240 <MX_GPIO_Init+0x40>)
 8000224:	f043 0304 	orr.w	r3, r3, #4
 8000228:	6193      	str	r3, [r2, #24]
 800022a:	4b05      	ldr	r3, [pc, #20]	@ (8000240 <MX_GPIO_Init+0x40>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	f003 0304 	and.w	r3, r3, #4
 8000232:	603b      	str	r3, [r7, #0]
 8000234:	683b      	ldr	r3, [r7, #0]

}
 8000236:	bf00      	nop
 8000238:	370c      	adds	r7, #12
 800023a:	46bd      	mov	sp, r7
 800023c:	bc80      	pop	{r7}
 800023e:	4770      	bx	lr
 8000240:	40021000 	.word	0x40021000

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000248:	f002 f82a 	bl	80022a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024c:	f000 f80c 	bl	8000268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000250:	f7ff ffd6 	bl	8000200 <MX_GPIO_Init>
  MX_DMA_Init();
 8000254:	f7ff ffae 	bl	80001b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000258:	f001 ff2a 	bl	80020b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  setup();
 800025c:	f001 f93a 	bl	80014d4 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8000260:	f001 f948 	bl	80014f4 <loop>
  {
 8000264:	bf00      	nop
 8000266:	e7fb      	b.n	8000260 <main+0x1c>

08000268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b090      	sub	sp, #64	@ 0x40
 800026c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026e:	f107 0318 	add.w	r3, r7, #24
 8000272:	2228      	movs	r2, #40	@ 0x28
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f004 f9d0 	bl	800461c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]
 8000288:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800028a:	2301      	movs	r3, #1
 800028c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800028e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000292:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000298:	2301      	movs	r3, #1
 800029a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029c:	2302      	movs	r3, #2
 800029e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002a6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ac:	f107 0318 	add.w	r3, r7, #24
 80002b0:	4618      	mov	r0, r3
 80002b2:	f002 fd8b 	bl	8002dcc <HAL_RCC_OscConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002bc:	f000 f819 	bl	80002f2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c0:	230f      	movs	r3, #15
 80002c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c4:	2302      	movs	r3, #2
 80002c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2102      	movs	r1, #2
 80002da:	4618      	mov	r0, r3
 80002dc:	f002 fff8 	bl	80032d0 <HAL_RCC_ClockConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002e6:	f000 f804 	bl	80002f2 <Error_Handler>
  }
}
 80002ea:	bf00      	nop
 80002ec:	3740      	adds	r7, #64	@ 0x40
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}

080002f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002f2:	b480      	push	{r7}
 80002f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002f6:	b672      	cpsid	i
}
 80002f8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002fa:	bf00      	nop
 80002fc:	e7fd      	b.n	80002fa <Error_Handler+0x8>

080002fe <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80002fe:	b480      	push	{r7}
 8000300:	b083      	sub	sp, #12
 8000302:	af00      	add	r7, sp, #0
 8000304:	6078      	str	r0, [r7, #4]
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	2200      	movs	r2, #0
 800030a:	601a      	str	r2, [r3, #0]
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	2200      	movs	r2, #0
 8000310:	605a      	str	r2, [r3, #4]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4618      	mov	r0, r3
 8000316:	370c      	adds	r7, #12
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr
	...

08000320 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	4a04      	ldr	r2, [pc, #16]	@ (800033c <_ZN3ros3MsgC1Ev+0x1c>)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4618      	mov	r0, r3
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	08004ae8 	.word	0x08004ae8

08000340 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
      data()
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	4618      	mov	r0, r3
 800034c:	f7ff ffe8 	bl	8000320 <_ZN3ros3MsgC1Ev>
 8000350:	4a06      	ldr	r2, [pc, #24]	@ (800036c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	3304      	adds	r3, #4
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff ffcf 	bl	80002fe <_ZN3ros4TimeC1Ev>
    {
    }
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4618      	mov	r0, r3
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	08004ad0 	.word	0x08004ad0

08000370 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	6859      	ldr	r1, [r3, #4]
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	683a      	ldr	r2, [r7, #0]
 8000386:	4413      	add	r3, r2
 8000388:	b2ca      	uxtb	r2, r1
 800038a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	685b      	ldr	r3, [r3, #4]
 8000390:	0a19      	lsrs	r1, r3, #8
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	3301      	adds	r3, #1
 8000396:	683a      	ldr	r2, [r7, #0]
 8000398:	4413      	add	r3, r2
 800039a:	b2ca      	uxtb	r2, r1
 800039c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	685b      	ldr	r3, [r3, #4]
 80003a2:	0c19      	lsrs	r1, r3, #16
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	3302      	adds	r3, #2
 80003a8:	683a      	ldr	r2, [r7, #0]
 80003aa:	4413      	add	r3, r2
 80003ac:	b2ca      	uxtb	r2, r1
 80003ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	685b      	ldr	r3, [r3, #4]
 80003b4:	0e19      	lsrs	r1, r3, #24
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	3303      	adds	r3, #3
 80003ba:	683a      	ldr	r2, [r7, #0]
 80003bc:	4413      	add	r3, r2
 80003be:	b2ca      	uxtb	r2, r1
 80003c0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	3304      	adds	r3, #4
 80003c6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	6899      	ldr	r1, [r3, #8]
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	683a      	ldr	r2, [r7, #0]
 80003d0:	4413      	add	r3, r2
 80003d2:	b2ca      	uxtb	r2, r1
 80003d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	689b      	ldr	r3, [r3, #8]
 80003da:	0a19      	lsrs	r1, r3, #8
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	3301      	adds	r3, #1
 80003e0:	683a      	ldr	r2, [r7, #0]
 80003e2:	4413      	add	r3, r2
 80003e4:	b2ca      	uxtb	r2, r1
 80003e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	689b      	ldr	r3, [r3, #8]
 80003ec:	0c19      	lsrs	r1, r3, #16
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	3302      	adds	r3, #2
 80003f2:	683a      	ldr	r2, [r7, #0]
 80003f4:	4413      	add	r3, r2
 80003f6:	b2ca      	uxtb	r2, r1
 80003f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	689b      	ldr	r3, [r3, #8]
 80003fe:	0e19      	lsrs	r1, r3, #24
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	3303      	adds	r3, #3
 8000404:	683a      	ldr	r2, [r7, #0]
 8000406:	4413      	add	r3, r2
 8000408:	b2ca      	uxtb	r2, r1
 800040a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	3304      	adds	r3, #4
 8000410:	60fb      	str	r3, [r7, #12]
      return offset;
 8000412:	68fb      	ldr	r3, [r7, #12]
    }
 8000414:	4618      	mov	r0, r3
 8000416:	3714      	adds	r7, #20
 8000418:	46bd      	mov	sp, r7
 800041a:	bc80      	pop	{r7}
 800041c:	4770      	bx	lr

0800041e <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800041e:	b480      	push	{r7}
 8000420:	b085      	sub	sp, #20
 8000422:	af00      	add	r7, sp, #0
 8000424:	6078      	str	r0, [r7, #4]
 8000426:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000428:	2300      	movs	r3, #0
 800042a:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	683a      	ldr	r2, [r7, #0]
 8000430:	4413      	add	r3, r2
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	461a      	mov	r2, r3
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	685a      	ldr	r2, [r3, #4]
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	3301      	adds	r3, #1
 8000442:	6839      	ldr	r1, [r7, #0]
 8000444:	440b      	add	r3, r1
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	021b      	lsls	r3, r3, #8
 800044a:	431a      	orrs	r2, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	685a      	ldr	r2, [r3, #4]
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	3302      	adds	r3, #2
 8000458:	6839      	ldr	r1, [r7, #0]
 800045a:	440b      	add	r3, r1
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	041b      	lsls	r3, r3, #16
 8000460:	431a      	orrs	r2, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	685a      	ldr	r2, [r3, #4]
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	3303      	adds	r3, #3
 800046e:	6839      	ldr	r1, [r7, #0]
 8000470:	440b      	add	r3, r1
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	061b      	lsls	r3, r3, #24
 8000476:	431a      	orrs	r2, r3
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	3304      	adds	r3, #4
 8000480:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	683a      	ldr	r2, [r7, #0]
 8000486:	4413      	add	r3, r2
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	461a      	mov	r2, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	689a      	ldr	r2, [r3, #8]
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	3301      	adds	r3, #1
 8000498:	6839      	ldr	r1, [r7, #0]
 800049a:	440b      	add	r3, r1
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	021b      	lsls	r3, r3, #8
 80004a0:	431a      	orrs	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	689a      	ldr	r2, [r3, #8]
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	3302      	adds	r3, #2
 80004ae:	6839      	ldr	r1, [r7, #0]
 80004b0:	440b      	add	r3, r1
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	041b      	lsls	r3, r3, #16
 80004b6:	431a      	orrs	r2, r3
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	689a      	ldr	r2, [r3, #8]
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	3303      	adds	r3, #3
 80004c4:	6839      	ldr	r1, [r7, #0]
 80004c6:	440b      	add	r3, r1
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	061b      	lsls	r3, r3, #24
 80004cc:	431a      	orrs	r2, r3
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	3304      	adds	r3, #4
 80004d6:	60fb      	str	r3, [r7, #12]
     return offset;
 80004d8:	68fb      	ldr	r3, [r7, #12]
    }
 80004da:	4618      	mov	r0, r3
 80004dc:	3714      	adds	r7, #20
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr

080004e4 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	4b02      	ldr	r3, [pc, #8]	@ (80004f8 <_ZN8std_msgs4Time7getTypeEv+0x14>)
 80004ee:	4618      	mov	r0, r3
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr
 80004f8:	080048d4 	.word	0x080048d4

080004fc <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	4b02      	ldr	r3, [pc, #8]	@ (8000510 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 8000506:	4618      	mov	r0, r3
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr
 8000510:	080048e4 	.word	0x080048e4

08000514 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4618      	mov	r0, r3
 8000520:	f7ff fefe 	bl	8000320 <_ZN3ros3MsgC1Ev>
 8000524:	4a0b      	ldr	r2, [pc, #44]	@ (8000554 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	601a      	str	r2, [r3, #0]
      topic_id(0),
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2200      	movs	r2, #0
 800052e:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4a09      	ldr	r2, [pc, #36]	@ (8000558 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000534:	609a      	str	r2, [r3, #8]
      message_type(""),
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4a07      	ldr	r2, [pc, #28]	@ (8000558 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800053a:	60da      	str	r2, [r3, #12]
      md5sum(""),
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4a06      	ldr	r2, [pc, #24]	@ (8000558 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000540:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2200      	movs	r2, #0
 8000546:	615a      	str	r2, [r3, #20]
    {
    }
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4618      	mov	r0, r3
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	08004ab8 	.word	0x08004ab8
 8000558:	08004908 	.word	0x08004908

0800055c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800055c:	b580      	push	{r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000566:	2300      	movs	r3, #0
 8000568:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	8899      	ldrh	r1, [r3, #4]
 800056e:	69fb      	ldr	r3, [r7, #28]
 8000570:	683a      	ldr	r2, [r7, #0]
 8000572:	4413      	add	r3, r2
 8000574:	b2ca      	uxtb	r2, r1
 8000576:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	889b      	ldrh	r3, [r3, #4]
 800057c:	0a1b      	lsrs	r3, r3, #8
 800057e:	b299      	uxth	r1, r3
 8000580:	69fb      	ldr	r3, [r7, #28]
 8000582:	3301      	adds	r3, #1
 8000584:	683a      	ldr	r2, [r7, #0]
 8000586:	4413      	add	r3, r2
 8000588:	b2ca      	uxtb	r2, r1
 800058a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800058c:	69fb      	ldr	r3, [r7, #28]
 800058e:	3302      	adds	r3, #2
 8000590:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	689b      	ldr	r3, [r3, #8]
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff fdd8 	bl	800014c <strlen>
 800059c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800059e:	69fb      	ldr	r3, [r7, #28]
 80005a0:	683a      	ldr	r2, [r7, #0]
 80005a2:	4413      	add	r3, r2
 80005a4:	69b9      	ldr	r1, [r7, #24]
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 ffd6 	bl	8001558 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80005ac:	69fb      	ldr	r3, [r7, #28]
 80005ae:	3304      	adds	r3, #4
 80005b0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80005b2:	69fb      	ldr	r3, [r7, #28]
 80005b4:	683a      	ldr	r2, [r7, #0]
 80005b6:	18d0      	adds	r0, r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	69ba      	ldr	r2, [r7, #24]
 80005be:	4619      	mov	r1, r3
 80005c0:	f004 f860 	bl	8004684 <memcpy>
      offset += length_topic_name;
 80005c4:	69fa      	ldr	r2, [r7, #28]
 80005c6:	69bb      	ldr	r3, [r7, #24]
 80005c8:	4413      	add	r3, r2
 80005ca:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff fdbb 	bl	800014c <strlen>
 80005d6:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80005d8:	69fb      	ldr	r3, [r7, #28]
 80005da:	683a      	ldr	r2, [r7, #0]
 80005dc:	4413      	add	r3, r2
 80005de:	6979      	ldr	r1, [r7, #20]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 ffb9 	bl	8001558 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80005e6:	69fb      	ldr	r3, [r7, #28]
 80005e8:	3304      	adds	r3, #4
 80005ea:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80005ec:	69fb      	ldr	r3, [r7, #28]
 80005ee:	683a      	ldr	r2, [r7, #0]
 80005f0:	18d0      	adds	r0, r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	68db      	ldr	r3, [r3, #12]
 80005f6:	697a      	ldr	r2, [r7, #20]
 80005f8:	4619      	mov	r1, r3
 80005fa:	f004 f843 	bl	8004684 <memcpy>
      offset += length_message_type;
 80005fe:	69fa      	ldr	r2, [r7, #28]
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	4413      	add	r3, r2
 8000604:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	691b      	ldr	r3, [r3, #16]
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff fd9e 	bl	800014c <strlen>
 8000610:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000612:	69fb      	ldr	r3, [r7, #28]
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	4413      	add	r3, r2
 8000618:	6939      	ldr	r1, [r7, #16]
 800061a:	4618      	mov	r0, r3
 800061c:	f000 ff9c 	bl	8001558 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000620:	69fb      	ldr	r3, [r7, #28]
 8000622:	3304      	adds	r3, #4
 8000624:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000626:	69fb      	ldr	r3, [r7, #28]
 8000628:	683a      	ldr	r2, [r7, #0]
 800062a:	18d0      	adds	r0, r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	691b      	ldr	r3, [r3, #16]
 8000630:	693a      	ldr	r2, [r7, #16]
 8000632:	4619      	mov	r1, r3
 8000634:	f004 f826 	bl	8004684 <memcpy>
      offset += length_md5sum;
 8000638:	69fa      	ldr	r2, [r7, #28]
 800063a:	693b      	ldr	r3, [r7, #16]
 800063c:	4413      	add	r3, r2
 800063e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	695b      	ldr	r3, [r3, #20]
 8000644:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000646:	68f9      	ldr	r1, [r7, #12]
 8000648:	69fb      	ldr	r3, [r7, #28]
 800064a:	683a      	ldr	r2, [r7, #0]
 800064c:	4413      	add	r3, r2
 800064e:	b2ca      	uxtb	r2, r1
 8000650:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	0a19      	lsrs	r1, r3, #8
 8000656:	69fb      	ldr	r3, [r7, #28]
 8000658:	3301      	adds	r3, #1
 800065a:	683a      	ldr	r2, [r7, #0]
 800065c:	4413      	add	r3, r2
 800065e:	b2ca      	uxtb	r2, r1
 8000660:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	0c19      	lsrs	r1, r3, #16
 8000666:	69fb      	ldr	r3, [r7, #28]
 8000668:	3302      	adds	r3, #2
 800066a:	683a      	ldr	r2, [r7, #0]
 800066c:	4413      	add	r3, r2
 800066e:	b2ca      	uxtb	r2, r1
 8000670:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	0e19      	lsrs	r1, r3, #24
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	3303      	adds	r3, #3
 800067a:	683a      	ldr	r2, [r7, #0]
 800067c:	4413      	add	r3, r2
 800067e:	b2ca      	uxtb	r2, r1
 8000680:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	3304      	adds	r3, #4
 8000686:	61fb      	str	r3, [r7, #28]
      return offset;
 8000688:	69fb      	ldr	r3, [r7, #28]
    }
 800068a:	4618      	mov	r0, r3
 800068c:	3720      	adds	r7, #32
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000692:	b580      	push	{r7, lr}
 8000694:	b08a      	sub	sp, #40	@ 0x28
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
 800069a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80006a0:	69bb      	ldr	r3, [r7, #24]
 80006a2:	683a      	ldr	r2, [r7, #0]
 80006a4:	4413      	add	r3, r2
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	461a      	mov	r2, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	889b      	ldrh	r3, [r3, #4]
 80006b2:	b21a      	sxth	r2, r3
 80006b4:	69bb      	ldr	r3, [r7, #24]
 80006b6:	3301      	adds	r3, #1
 80006b8:	6839      	ldr	r1, [r7, #0]
 80006ba:	440b      	add	r3, r1
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	021b      	lsls	r3, r3, #8
 80006c0:	b21b      	sxth	r3, r3
 80006c2:	4313      	orrs	r3, r2
 80006c4:	b21b      	sxth	r3, r3
 80006c6:	b29a      	uxth	r2, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80006cc:	69bb      	ldr	r3, [r7, #24]
 80006ce:	3302      	adds	r3, #2
 80006d0:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	683a      	ldr	r2, [r7, #0]
 80006d6:	441a      	add	r2, r3
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4611      	mov	r1, r2
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 ff58 	bl	8001594 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	3304      	adds	r3, #4
 80006e8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80006ea:	69bb      	ldr	r3, [r7, #24]
 80006ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80006ee:	e00b      	b.n	8000708 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 80006f0:	683a      	ldr	r2, [r7, #0]
 80006f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006f4:	441a      	add	r2, r3
 80006f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006f8:	3b01      	subs	r3, #1
 80006fa:	6839      	ldr	r1, [r7, #0]
 80006fc:	440b      	add	r3, r1
 80006fe:	7812      	ldrb	r2, [r2, #0]
 8000700:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000704:	3301      	adds	r3, #1
 8000706:	627b      	str	r3, [r7, #36]	@ 0x24
 8000708:	69ba      	ldr	r2, [r7, #24]
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	4413      	add	r3, r2
 800070e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000710:	429a      	cmp	r2, r3
 8000712:	d3ed      	bcc.n	80006f0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000714:	69ba      	ldr	r2, [r7, #24]
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	4413      	add	r3, r2
 800071a:	3b01      	subs	r3, #1
 800071c:	683a      	ldr	r2, [r7, #0]
 800071e:	4413      	add	r3, r2
 8000720:	2200      	movs	r2, #0
 8000722:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	3b01      	subs	r3, #1
 8000728:	683a      	ldr	r2, [r7, #0]
 800072a:	441a      	add	r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000730:	69ba      	ldr	r2, [r7, #24]
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	4413      	add	r3, r2
 8000736:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	683a      	ldr	r2, [r7, #0]
 800073c:	441a      	add	r2, r3
 800073e:	f107 0310 	add.w	r3, r7, #16
 8000742:	4611      	mov	r1, r2
 8000744:	4618      	mov	r0, r3
 8000746:	f000 ff25 	bl	8001594 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800074a:	69bb      	ldr	r3, [r7, #24]
 800074c:	3304      	adds	r3, #4
 800074e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000750:	69bb      	ldr	r3, [r7, #24]
 8000752:	623b      	str	r3, [r7, #32]
 8000754:	e00b      	b.n	800076e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8000756:	683a      	ldr	r2, [r7, #0]
 8000758:	6a3b      	ldr	r3, [r7, #32]
 800075a:	441a      	add	r2, r3
 800075c:	6a3b      	ldr	r3, [r7, #32]
 800075e:	3b01      	subs	r3, #1
 8000760:	6839      	ldr	r1, [r7, #0]
 8000762:	440b      	add	r3, r1
 8000764:	7812      	ldrb	r2, [r2, #0]
 8000766:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000768:	6a3b      	ldr	r3, [r7, #32]
 800076a:	3301      	adds	r3, #1
 800076c:	623b      	str	r3, [r7, #32]
 800076e:	69ba      	ldr	r2, [r7, #24]
 8000770:	693b      	ldr	r3, [r7, #16]
 8000772:	4413      	add	r3, r2
 8000774:	6a3a      	ldr	r2, [r7, #32]
 8000776:	429a      	cmp	r2, r3
 8000778:	d3ed      	bcc.n	8000756 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 800077a:	69ba      	ldr	r2, [r7, #24]
 800077c:	693b      	ldr	r3, [r7, #16]
 800077e:	4413      	add	r3, r2
 8000780:	3b01      	subs	r3, #1
 8000782:	683a      	ldr	r2, [r7, #0]
 8000784:	4413      	add	r3, r2
 8000786:	2200      	movs	r2, #0
 8000788:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800078a:	69bb      	ldr	r3, [r7, #24]
 800078c:	3b01      	subs	r3, #1
 800078e:	683a      	ldr	r2, [r7, #0]
 8000790:	441a      	add	r2, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000796:	69ba      	ldr	r2, [r7, #24]
 8000798:	693b      	ldr	r3, [r7, #16]
 800079a:	4413      	add	r3, r2
 800079c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800079e:	69bb      	ldr	r3, [r7, #24]
 80007a0:	683a      	ldr	r2, [r7, #0]
 80007a2:	441a      	add	r2, r3
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	4611      	mov	r1, r2
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fef2 	bl	8001594 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	3304      	adds	r3, #4
 80007b4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80007b6:	69bb      	ldr	r3, [r7, #24]
 80007b8:	61fb      	str	r3, [r7, #28]
 80007ba:	e00b      	b.n	80007d4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 80007bc:	683a      	ldr	r2, [r7, #0]
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	441a      	add	r2, r3
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	3b01      	subs	r3, #1
 80007c6:	6839      	ldr	r1, [r7, #0]
 80007c8:	440b      	add	r3, r1
 80007ca:	7812      	ldrb	r2, [r2, #0]
 80007cc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3301      	adds	r3, #1
 80007d2:	61fb      	str	r3, [r7, #28]
 80007d4:	69ba      	ldr	r2, [r7, #24]
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	4413      	add	r3, r2
 80007da:	69fa      	ldr	r2, [r7, #28]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d3ed      	bcc.n	80007bc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80007e0:	69ba      	ldr	r2, [r7, #24]
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	4413      	add	r3, r2
 80007e6:	3b01      	subs	r3, #1
 80007e8:	683a      	ldr	r2, [r7, #0]
 80007ea:	4413      	add	r3, r2
 80007ec:	2200      	movs	r2, #0
 80007ee:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	3b01      	subs	r3, #1
 80007f4:	683a      	ldr	r2, [r7, #0]
 80007f6:	441a      	add	r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80007fc:	69ba      	ldr	r2, [r7, #24]
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	4413      	add	r3, r2
 8000802:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	69ba      	ldr	r2, [r7, #24]
 800080c:	6839      	ldr	r1, [r7, #0]
 800080e:	440a      	add	r2, r1
 8000810:	7812      	ldrb	r2, [r2, #0]
 8000812:	4313      	orrs	r3, r2
 8000814:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	69bb      	ldr	r3, [r7, #24]
 800081a:	3301      	adds	r3, #1
 800081c:	6839      	ldr	r1, [r7, #0]
 800081e:	440b      	add	r3, r1
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	021b      	lsls	r3, r3, #8
 8000824:	4313      	orrs	r3, r2
 8000826:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000828:	68ba      	ldr	r2, [r7, #8]
 800082a:	69bb      	ldr	r3, [r7, #24]
 800082c:	3302      	adds	r3, #2
 800082e:	6839      	ldr	r1, [r7, #0]
 8000830:	440b      	add	r3, r1
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	041b      	lsls	r3, r3, #16
 8000836:	4313      	orrs	r3, r2
 8000838:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800083a:	68ba      	ldr	r2, [r7, #8]
 800083c:	69bb      	ldr	r3, [r7, #24]
 800083e:	3303      	adds	r3, #3
 8000840:	6839      	ldr	r1, [r7, #0]
 8000842:	440b      	add	r3, r1
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	061b      	lsls	r3, r3, #24
 8000848:	4313      	orrs	r3, r2
 800084a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800084c:	68ba      	ldr	r2, [r7, #8]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000852:	69bb      	ldr	r3, [r7, #24]
 8000854:	3304      	adds	r3, #4
 8000856:	61bb      	str	r3, [r7, #24]
     return offset;
 8000858:	69bb      	ldr	r3, [r7, #24]
    }
 800085a:	4618      	mov	r0, r3
 800085c:	3728      	adds	r7, #40	@ 0x28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	4b02      	ldr	r3, [pc, #8]	@ (8000878 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 800086e:	4618      	mov	r0, r3
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr
 8000878:	0800490c 	.word	0x0800490c

0800087c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	4b02      	ldr	r3, [pc, #8]	@ (8000890 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 8000886:	4618      	mov	r0, r3
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	08004928 	.word	0x08004928

08000894 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fd3e 	bl	8000320 <_ZN3ros3MsgC1Ev>
 80008a4:	4a06      	ldr	r2, [pc, #24]	@ (80008c0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	601a      	str	r2, [r3, #0]
      level(0),
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2200      	movs	r2, #0
 80008ae:	711a      	strb	r2, [r3, #4]
      msg("")
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4a04      	ldr	r2, [pc, #16]	@ (80008c4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80008b4:	609a      	str	r2, [r3, #8]
    {
    }
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4618      	mov	r0, r3
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	08004aa0 	.word	0x08004aa0
 80008c4:	08004908 	.word	0x08004908

080008c8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	683a      	ldr	r2, [r7, #0]
 80008da:	4413      	add	r3, r2
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	7912      	ldrb	r2, [r2, #4]
 80008e0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	3301      	adds	r3, #1
 80008e6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fc2d 	bl	800014c <strlen>
 80008f2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	683a      	ldr	r2, [r7, #0]
 80008f8:	4413      	add	r3, r2
 80008fa:	68b9      	ldr	r1, [r7, #8]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 fe2b 	bl	8001558 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	3304      	adds	r3, #4
 8000906:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	683a      	ldr	r2, [r7, #0]
 800090c:	18d0      	adds	r0, r2, r3
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	689b      	ldr	r3, [r3, #8]
 8000912:	68ba      	ldr	r2, [r7, #8]
 8000914:	4619      	mov	r1, r3
 8000916:	f003 feb5 	bl	8004684 <memcpy>
      offset += length_msg;
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	4413      	add	r3, r2
 8000920:	60fb      	str	r3, [r7, #12]
      return offset;
 8000922:	68fb      	ldr	r3, [r7, #12]
    }
 8000924:	4618      	mov	r0, r3
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	683a      	ldr	r2, [r7, #0]
 800093e:	4413      	add	r3, r2
 8000940:	781a      	ldrb	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	3301      	adds	r3, #1
 800094a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	683a      	ldr	r2, [r7, #0]
 8000950:	441a      	add	r2, r3
 8000952:	f107 030c 	add.w	r3, r7, #12
 8000956:	4611      	mov	r1, r2
 8000958:	4618      	mov	r0, r3
 800095a:	f000 fe1b 	bl	8001594 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	3304      	adds	r3, #4
 8000962:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	e00b      	b.n	8000982 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 800096a:	683a      	ldr	r2, [r7, #0]
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	441a      	add	r2, r3
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	3b01      	subs	r3, #1
 8000974:	6839      	ldr	r1, [r7, #0]
 8000976:	440b      	add	r3, r1
 8000978:	7812      	ldrb	r2, [r2, #0]
 800097a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	3301      	adds	r3, #1
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	4413      	add	r3, r2
 8000988:	697a      	ldr	r2, [r7, #20]
 800098a:	429a      	cmp	r2, r3
 800098c:	d3ed      	bcc.n	800096a <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	4413      	add	r3, r2
 8000994:	3b01      	subs	r3, #1
 8000996:	683a      	ldr	r2, [r7, #0]
 8000998:	4413      	add	r3, r2
 800099a:	2200      	movs	r2, #0
 800099c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	3b01      	subs	r3, #1
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	441a      	add	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	4413      	add	r3, r2
 80009b0:	613b      	str	r3, [r7, #16]
     return offset;
 80009b2:	693b      	ldr	r3, [r7, #16]
    }
 80009b4:	4618      	mov	r0, r3
 80009b6:	3718      	adds	r7, #24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	4b02      	ldr	r3, [pc, #8]	@ (80009d0 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 80009c6:	4618      	mov	r0, r3
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr
 80009d0:	0800494c 	.word	0x0800494c

080009d4 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	4b02      	ldr	r3, [pc, #8]	@ (80009e8 <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 80009de:	4618      	mov	r0, r3
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	08004960 	.word	0x08004960

080009ec <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fc92 	bl	8000320 <_ZN3ros3MsgC1Ev>
 80009fc:	4a11      	ldr	r2, [pc, #68]	@ (8000a44 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2200      	movs	r2, #0
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2200      	movs	r2, #0
 8000a12:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	f04f 0200 	mov.w	r2, #0
 8000a20:	615a      	str	r2, [r3, #20]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2200      	movs	r2, #0
 8000a38:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	08004a88 	.word	0x08004a88

08000a48 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	@ 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6859      	ldr	r1, [r3, #4]
 8000a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a5c:	683a      	ldr	r2, [r7, #0]
 8000a5e:	4413      	add	r3, r2
 8000a60:	b2ca      	uxtb	r2, r1
 8000a62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	0a19      	lsrs	r1, r3, #8
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	683a      	ldr	r2, [r7, #0]
 8000a70:	4413      	add	r3, r2
 8000a72:	b2ca      	uxtb	r2, r1
 8000a74:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	0c19      	lsrs	r1, r3, #16
 8000a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a7e:	3302      	adds	r3, #2
 8000a80:	683a      	ldr	r2, [r7, #0]
 8000a82:	4413      	add	r3, r2
 8000a84:	b2ca      	uxtb	r2, r1
 8000a86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	0e19      	lsrs	r1, r3, #24
 8000a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a90:	3303      	adds	r3, #3
 8000a92:	683a      	ldr	r2, [r7, #0]
 8000a94:	4413      	add	r3, r2
 8000a96:	b2ca      	uxtb	r2, r1
 8000a98:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a9c:	3304      	adds	r3, #4
 8000a9e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
 8000aa4:	e02a      	b.n	8000afc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	68da      	ldr	r2, [r3, #12]
 8000aaa:	6a3b      	ldr	r3, [r7, #32]
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	4413      	add	r3, r2
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000ab4:	6939      	ldr	r1, [r7, #16]
 8000ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab8:	683a      	ldr	r2, [r7, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	b2ca      	uxtb	r2, r1
 8000abe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	0a19      	lsrs	r1, r3, #8
 8000ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	b2ca      	uxtb	r2, r1
 8000ace:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	0c19      	lsrs	r1, r3, #16
 8000ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad6:	3302      	adds	r3, #2
 8000ad8:	683a      	ldr	r2, [r7, #0]
 8000ada:	4413      	add	r3, r2
 8000adc:	b2ca      	uxtb	r2, r1
 8000ade:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	0e19      	lsrs	r1, r3, #24
 8000ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae6:	3303      	adds	r3, #3
 8000ae8:	683a      	ldr	r2, [r7, #0]
 8000aea:	4413      	add	r3, r2
 8000aec:	b2ca      	uxtb	r2, r1
 8000aee:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af2:	3304      	adds	r3, #4
 8000af4:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000af6:	6a3b      	ldr	r3, [r7, #32]
 8000af8:	3301      	adds	r3, #1
 8000afa:	623b      	str	r3, [r7, #32]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	6a3a      	ldr	r2, [r7, #32]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d3cf      	bcc.n	8000aa6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6919      	ldr	r1, [r3, #16]
 8000b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b0c:	683a      	ldr	r2, [r7, #0]
 8000b0e:	4413      	add	r3, r2
 8000b10:	b2ca      	uxtb	r2, r1
 8000b12:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	691b      	ldr	r3, [r3, #16]
 8000b18:	0a19      	lsrs	r1, r3, #8
 8000b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	683a      	ldr	r2, [r7, #0]
 8000b20:	4413      	add	r3, r2
 8000b22:	b2ca      	uxtb	r2, r1
 8000b24:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	691b      	ldr	r3, [r3, #16]
 8000b2a:	0c19      	lsrs	r1, r3, #16
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2e:	3302      	adds	r3, #2
 8000b30:	683a      	ldr	r2, [r7, #0]
 8000b32:	4413      	add	r3, r2
 8000b34:	b2ca      	uxtb	r2, r1
 8000b36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	691b      	ldr	r3, [r3, #16]
 8000b3c:	0e19      	lsrs	r1, r3, #24
 8000b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b40:	3303      	adds	r3, #3
 8000b42:	683a      	ldr	r2, [r7, #0]
 8000b44:	4413      	add	r3, r2
 8000b46:	b2ca      	uxtb	r2, r1
 8000b48:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b4c:	3304      	adds	r3, #4
 8000b4e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
 8000b54:	e02a      	b.n	8000bac <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	699a      	ldr	r2, [r3, #24]
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	4413      	add	r3, r2
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000b64:	68f9      	ldr	r1, [r7, #12]
 8000b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b68:	683a      	ldr	r2, [r7, #0]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	b2ca      	uxtb	r2, r1
 8000b6e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	0a19      	lsrs	r1, r3, #8
 8000b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b76:	3301      	adds	r3, #1
 8000b78:	683a      	ldr	r2, [r7, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	b2ca      	uxtb	r2, r1
 8000b7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	0c19      	lsrs	r1, r3, #16
 8000b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b86:	3302      	adds	r3, #2
 8000b88:	683a      	ldr	r2, [r7, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	b2ca      	uxtb	r2, r1
 8000b8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	0e19      	lsrs	r1, r3, #24
 8000b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b96:	3303      	adds	r3, #3
 8000b98:	683a      	ldr	r2, [r7, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	b2ca      	uxtb	r2, r1
 8000b9e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ba2:	3304      	adds	r3, #4
 8000ba4:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	61fb      	str	r3, [r7, #28]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	691b      	ldr	r3, [r3, #16]
 8000bb0:	69fa      	ldr	r2, [r7, #28]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d3cf      	bcc.n	8000b56 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	69d9      	ldr	r1, [r3, #28]
 8000bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bbc:	683a      	ldr	r2, [r7, #0]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	b2ca      	uxtb	r2, r1
 8000bc2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	69db      	ldr	r3, [r3, #28]
 8000bc8:	0a19      	lsrs	r1, r3, #8
 8000bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bcc:	3301      	adds	r3, #1
 8000bce:	683a      	ldr	r2, [r7, #0]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	b2ca      	uxtb	r2, r1
 8000bd4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	0c19      	lsrs	r1, r3, #16
 8000bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bde:	3302      	adds	r3, #2
 8000be0:	683a      	ldr	r2, [r7, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	b2ca      	uxtb	r2, r1
 8000be6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	69db      	ldr	r3, [r3, #28]
 8000bec:	0e19      	lsrs	r1, r3, #24
 8000bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf0:	3303      	adds	r3, #3
 8000bf2:	683a      	ldr	r2, [r7, #0]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	b2ca      	uxtb	r2, r1
 8000bf8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000c00:	2300      	movs	r3, #0
 8000c02:	61bb      	str	r3, [r7, #24]
 8000c04:	e027      	b.n	8000c56 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	4413      	add	r3, r2
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fa9a 	bl	800014c <strlen>
 8000c18:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c1c:	683a      	ldr	r2, [r7, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	6979      	ldr	r1, [r7, #20]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 fc98 	bl	8001558 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c2a:	3304      	adds	r3, #4
 8000c2c:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c30:	683a      	ldr	r2, [r7, #0]
 8000c32:	18d0      	adds	r0, r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	4413      	add	r3, r2
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	4619      	mov	r1, r3
 8000c44:	f003 fd1e 	bl	8004684 <memcpy>
      offset += length_stringsi;
 8000c48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	3301      	adds	r3, #1
 8000c54:	61bb      	str	r3, [r7, #24]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	69db      	ldr	r3, [r3, #28]
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d3d2      	bcc.n	8000c06 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8000c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8000c62:	4618      	mov	r0, r3
 8000c64:	3728      	adds	r7, #40	@ 0x28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b08e      	sub	sp, #56	@ 0x38
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
 8000c72:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c7a:	683a      	ldr	r2, [r7, #0]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c84:	3301      	adds	r3, #1
 8000c86:	683a      	ldr	r2, [r7, #0]
 8000c88:	4413      	add	r3, r2
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	021b      	lsls	r3, r3, #8
 8000c8e:	6a3a      	ldr	r2, [r7, #32]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c96:	3302      	adds	r3, #2
 8000c98:	683a      	ldr	r2, [r7, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	041b      	lsls	r3, r3, #16
 8000ca0:	6a3a      	ldr	r2, [r7, #32]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000ca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ca8:	3303      	adds	r3, #3
 8000caa:	683a      	ldr	r2, [r7, #0]
 8000cac:	4413      	add	r3, r2
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	061b      	lsls	r3, r3, #24
 8000cb2:	6a3a      	ldr	r2, [r7, #32]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8000cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cba:	3304      	adds	r3, #4
 8000cbc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	6a3a      	ldr	r2, [r7, #32]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d90a      	bls.n	8000cde <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	68da      	ldr	r2, [r3, #12]
 8000ccc:	6a3b      	ldr	r3, [r7, #32]
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4610      	mov	r0, r2
 8000cd4:	f003 fc6c 	bl	80045b0 <realloc>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6a3a      	ldr	r2, [r7, #32]
 8000ce2:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	633b      	str	r3, [r7, #48]	@ 0x30
 8000ce8:	e035      	b.n	8000d56 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000cf2:	6839      	ldr	r1, [r7, #0]
 8000cf4:	440a      	add	r2, r1
 8000cf6:	7812      	ldrb	r2, [r2, #0]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000cfc:	697a      	ldr	r2, [r7, #20]
 8000cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d00:	3301      	adds	r3, #1
 8000d02:	6839      	ldr	r1, [r7, #0]
 8000d04:	440b      	add	r3, r1
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	021b      	lsls	r3, r3, #8
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000d0e:	697a      	ldr	r2, [r7, #20]
 8000d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d12:	3302      	adds	r3, #2
 8000d14:	6839      	ldr	r1, [r7, #0]
 8000d16:	440b      	add	r3, r1
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	041b      	lsls	r3, r3, #16
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000d20:	697a      	ldr	r2, [r7, #20]
 8000d22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d24:	3303      	adds	r3, #3
 8000d26:	6839      	ldr	r1, [r7, #0]
 8000d28:	440b      	add	r3, r1
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	061b      	lsls	r3, r3, #24
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8000d32:	697a      	ldr	r2, [r7, #20]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8000d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d3a:	3304      	adds	r3, #4
 8000d3c:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	68da      	ldr	r2, [r3, #12]
 8000d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	4413      	add	r3, r2
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	3208      	adds	r2, #8
 8000d4c:	6812      	ldr	r2, [r2, #0]
 8000d4e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8000d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d52:	3301      	adds	r3, #1
 8000d54:	633b      	str	r3, [r7, #48]	@ 0x30
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d3c4      	bcc.n	8000cea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d62:	683a      	ldr	r2, [r7, #0]
 8000d64:	4413      	add	r3, r2
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	683a      	ldr	r2, [r7, #0]
 8000d70:	4413      	add	r3, r2
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	021b      	lsls	r3, r3, #8
 8000d76:	69fa      	ldr	r2, [r7, #28]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d7e:	3302      	adds	r3, #2
 8000d80:	683a      	ldr	r2, [r7, #0]
 8000d82:	4413      	add	r3, r2
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	041b      	lsls	r3, r3, #16
 8000d88:	69fa      	ldr	r2, [r7, #28]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d90:	3303      	adds	r3, #3
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	4413      	add	r3, r2
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	061b      	lsls	r3, r3, #24
 8000d9a:	69fa      	ldr	r2, [r7, #28]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8000da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000da2:	3304      	adds	r3, #4
 8000da4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	691b      	ldr	r3, [r3, #16]
 8000daa:	69fa      	ldr	r2, [r7, #28]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d90a      	bls.n	8000dc6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	699a      	ldr	r2, [r3, #24]
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	4619      	mov	r1, r3
 8000dba:	4610      	mov	r0, r2
 8000dbc:	f003 fbf8 	bl	80045b0 <realloc>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	69fa      	ldr	r2, [r7, #28]
 8000dca:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000dd0:	e035      	b.n	8000e3e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000dda:	6839      	ldr	r1, [r7, #0]
 8000ddc:	440a      	add	r2, r1
 8000dde:	7812      	ldrb	r2, [r2, #0]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000de8:	3301      	adds	r3, #1
 8000dea:	6839      	ldr	r1, [r7, #0]
 8000dec:	440b      	add	r3, r1
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	4313      	orrs	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dfa:	3302      	adds	r3, #2
 8000dfc:	6839      	ldr	r1, [r7, #0]
 8000dfe:	440b      	add	r3, r1
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	041b      	lsls	r3, r3, #16
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e0c:	3303      	adds	r3, #3
 8000e0e:	6839      	ldr	r1, [r7, #0]
 8000e10:	440b      	add	r3, r1
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	061b      	lsls	r3, r3, #24
 8000e16:	4313      	orrs	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8000e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e22:	3304      	adds	r3, #4
 8000e24:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	699a      	ldr	r2, [r3, #24]
 8000e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	4413      	add	r3, r2
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	3214      	adds	r2, #20
 8000e34:	6812      	ldr	r2, [r2, #0]
 8000e36:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8000e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	691b      	ldr	r3, [r3, #16]
 8000e42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d3c4      	bcc.n	8000dd2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e4a:	683a      	ldr	r2, [r7, #0]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e54:	3301      	adds	r3, #1
 8000e56:	683a      	ldr	r2, [r7, #0]
 8000e58:	4413      	add	r3, r2
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	021b      	lsls	r3, r3, #8
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e66:	3302      	adds	r3, #2
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	041b      	lsls	r3, r3, #16
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e78:	3303      	adds	r3, #3
 8000e7a:	683a      	ldr	r2, [r7, #0]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	061b      	lsls	r3, r3, #24
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8000e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e8a:	3304      	adds	r3, #4
 8000e8c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d90a      	bls.n	8000eae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4610      	mov	r0, r2
 8000ea4:	f003 fb84 	bl	80045b0 <realloc>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000eb8:	e03e      	b.n	8000f38 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8000eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ebc:	683a      	ldr	r2, [r7, #0]
 8000ebe:	441a      	add	r2, r3
 8000ec0:	f107 030c 	add.w	r3, r7, #12
 8000ec4:	4611      	mov	r1, r2
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 fb64 	bl	8001594 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ece:	3304      	adds	r3, #4
 8000ed0:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8000ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ed4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ed6:	e00b      	b.n	8000ef0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8000ed8:	683a      	ldr	r2, [r7, #0]
 8000eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000edc:	441a      	add	r2, r3
 8000ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	6839      	ldr	r1, [r7, #0]
 8000ee4:	440b      	add	r3, r1
 8000ee6:	7812      	ldrb	r2, [r2, #0]
 8000ee8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8000eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eec:	3301      	adds	r3, #1
 8000eee:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ef0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d3ed      	bcc.n	8000ed8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8000efc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	4413      	add	r3, r2
 8000f02:	3b01      	subs	r3, #1
 8000f04:	683a      	ldr	r2, [r7, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8000f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	441a      	add	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8000f18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4413      	add	r3, r2
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	3220      	adds	r2, #32
 8000f2e:	6812      	ldr	r2, [r2, #0]
 8000f30:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8000f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f34:	3301      	adds	r3, #1
 8000f36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69db      	ldr	r3, [r3, #28]
 8000f3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d3bb      	bcc.n	8000eba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8000f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8000f44:	4618      	mov	r0, r3
 8000f46:	3738      	adds	r7, #56	@ 0x38
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	4b02      	ldr	r3, [pc, #8]	@ (8000f60 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	08004a24 	.word	0x08004a24

08000f64 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	4b02      	ldr	r3, [pc, #8]	@ (8000f78 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 8000f6e:	4618      	mov	r0, r3
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	08004984 	.word	0x08004984

08000f7c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
 8000f88:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	683a      	ldr	r2, [r7, #0]
 8000f9a:	611a      	str	r2, [r3, #16]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr

08000fa8 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	68d8      	ldr	r0, [r3, #12]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	6891      	ldr	r1, [r2, #8]
 8000fc2:	683a      	ldr	r2, [r7, #0]
 8000fc4:	4798      	blx	r3
 8000fc6:	4603      	mov	r3, r0
  };
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	691b      	ldr	r3, [r3, #16]
  }
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr

08000fe6 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8000ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
	...

0800100c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a0a      	ldr	r2, [pc, #40]	@ (8001040 <_ZN13STM32HardwareC1Ev+0x34>)
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
    }
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	200009e4 	.word	0x200009e4

08001044 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f000 f804 	bl	800105a <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6818      	ldr	r0, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3304      	adds	r3, #4
 800106a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800106e:	4619      	mov	r1, r3
 8001070:	f002 fb7c 	bl	800376c <HAL_UART_Receive_DMA>
    }
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <_ZN13STM32Hardware4readEv>:

    int read(){
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001084:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001088:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f8d3 4204 	ldr.w	r4, [r3, #516]	@ 0x204
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ffa8 	bl	8000fe6 <_ZN13STM32Hardware10getRdmaIndEv>
 8001096:	4603      	mov	r3, r0
 8001098:	429c      	cmp	r4, r3
 800109a:	bf14      	ite	ne
 800109c:	2301      	movne	r3, #1
 800109e:	2300      	moveq	r3, #0
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d012      	beq.n	80010cc <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80010ac:	1c59      	adds	r1, r3, #1
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	f8c2 1204 	str.w	r1, [r2, #516]	@ 0x204
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	4413      	add	r3, r2
 80010b8:	791b      	ldrb	r3, [r3, #4]
 80010ba:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80010c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      return c;
 80010cc:	68fb      	ldr	r3, [r7, #12]
    }
 80010ce:	4618      	mov	r0, r3
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd90      	pop	{r4, r7, pc}
	...

080010d8 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b20      	cmp	r3, #32
 80010ec:	d108      	bne.n	8001100 <_ZN13STM32Hardware5flushEv+0x28>
 80010ee:	4b28      	ldr	r3, [pc, #160]	@ (8001190 <_ZN13STM32Hardware5flushEv+0xb8>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	f083 0301 	eor.w	r3, r3, #1
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <_ZN13STM32Hardware5flushEv+0x28>
 80010fc:	2301      	movs	r3, #1
 80010fe:	e000      	b.n	8001102 <_ZN13STM32Hardware5flushEv+0x2a>
 8001100:	2300      	movs	r3, #0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d03f      	beq.n	8001186 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8001106:	4b22      	ldr	r3, [pc, #136]	@ (8001190 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001108:	2201      	movs	r2, #1
 800110a:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001118:	429a      	cmp	r2, r3
 800111a:	d031      	beq.n	8001180 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001128:	429a      	cmp	r2, r3
 800112a:	d20a      	bcs.n	8001142 <_ZN13STM32Hardware5flushEv+0x6a>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001132:	b29a      	uxth	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800113a:	b29b      	uxth	r3, r3
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	b29b      	uxth	r3, r3
 8001140:	e006      	b.n	8001150 <_ZN13STM32Hardware5flushEv+0x78>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001148:	b29b      	uxth	r3, r3
 800114a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800114e:	b29b      	uxth	r3, r3
 8001150:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6818      	ldr	r0, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800115c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	4413      	add	r3, r2
 8001164:	89fa      	ldrh	r2, [r7, #14]
 8001166:	4619      	mov	r1, r3
 8001168:	f002 fa90 	bl	800368c <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8001172:	89fb      	ldrh	r3, [r7, #14]
 8001174:	4413      	add	r3, r2
 8001176:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
        }
        mutex = false;
 8001180:	4b03      	ldr	r3, [pc, #12]	@ (8001190 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
      }
    }
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000078 	.word	0x20000078

08001194 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
      int n = length;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011aa:	bfa8      	it	ge
 80011ac:	f44f 7300 	movge.w	r3, #512	@ 0x200
 80011b0:	617b      	str	r3, [r7, #20]

      int n_tail = n <= (int)(tbuflen - twind) ? n : (int)(tbuflen - twind);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80011b8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80011bc:	461a      	mov	r2, r3
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	4293      	cmp	r3, r2
 80011c2:	bfa8      	it	ge
 80011c4:	4613      	movge	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80011ce:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	4413      	add	r3, r2
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	68b9      	ldr	r1, [r7, #8]
 80011da:	4618      	mov	r0, r3
 80011dc:	f003 fa52 	bl	8004684 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	4413      	add	r3, r2
 80011ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

      if(n != n_tail){
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d00b      	beq.n	8001214 <_ZN13STM32Hardware5writeEPhi+0x80>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f503 7002 	add.w	r0, r3, #520	@ 0x208
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	68ba      	ldr	r2, [r7, #8]
 8001206:	18d1      	adds	r1, r2, r3
 8001208:	697a      	ldr	r2, [r7, #20]
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	461a      	mov	r2, r3
 8001210:	f003 fa38 	bl	8004684 <memcpy>
      }

      flush();
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	f7ff ff5f 	bl	80010d8 <_ZN13STM32Hardware5flushEv>
    }
 800121a:	bf00      	nop
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	f001 f891 	bl	8002350 <HAL_GetTick>
 800122e:	4603      	mov	r3, r0
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <_ZN8std_msgs5Int32C1Ev>:
  {
    public:
      typedef int32_t _data_type;
      _data_type data;

    Int32():
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
      data(0)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f86c 	bl	8000320 <_ZN3ros3MsgC1Ev>
 8001248:	4a05      	ldr	r2, [pc, #20]	@ (8001260 <_ZN8std_msgs5Int32C1Ev+0x28>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	605a      	str	r2, [r3, #4]
    {
    }
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	08004a5c 	.word	0x08004a5c

08001264 <_ZNK8std_msgs5Int329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8001278:	68b9      	ldr	r1, [r7, #8]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	4413      	add	r3, r2
 8001280:	b2ca      	uxtb	r2, r1
 8001282:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	0a19      	lsrs	r1, r3, #8
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	3301      	adds	r3, #1
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	4413      	add	r3, r2
 8001290:	b2ca      	uxtb	r2, r1
 8001292:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	0c19      	lsrs	r1, r3, #16
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	3302      	adds	r3, #2
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	4413      	add	r3, r2
 80012a0:	b2ca      	uxtb	r2, r1
 80012a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	0e19      	lsrs	r1, r3, #24
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	3303      	adds	r3, #3
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	4413      	add	r3, r2
 80012b0:	b2ca      	uxtb	r2, r1
 80012b2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	3304      	adds	r3, #4
 80012b8:	60fb      	str	r3, [r7, #12]
      return offset;
 80012ba:	68fb      	ldr	r3, [r7, #12]
    }
 80012bc:	4618      	mov	r0, r3
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr

080012c6 <_ZN8std_msgs5Int3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80012c6:	b480      	push	{r7}
 80012c8:	b085      	sub	sp, #20
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	6839      	ldr	r1, [r7, #0]
 80012de:	440a      	add	r2, r1
 80012e0:	7812      	ldrb	r2, [r2, #0]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	3301      	adds	r3, #1
 80012ec:	6839      	ldr	r1, [r7, #0]
 80012ee:	440b      	add	r3, r1
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	4313      	orrs	r3, r2
 80012f6:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80012f8:	68ba      	ldr	r2, [r7, #8]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	3302      	adds	r3, #2
 80012fe:	6839      	ldr	r1, [r7, #0]
 8001300:	440b      	add	r3, r1
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	041b      	lsls	r3, r3, #16
 8001306:	4313      	orrs	r3, r2
 8001308:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	3303      	adds	r3, #3
 8001310:	6839      	ldr	r1, [r7, #0]
 8001312:	440b      	add	r3, r1
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	061b      	lsls	r3, r3, #24
 8001318:	4313      	orrs	r3, r2
 800131a:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 800131c:	68ba      	ldr	r2, [r7, #8]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	3304      	adds	r3, #4
 8001326:	60fb      	str	r3, [r7, #12]
     return offset;
 8001328:	68fb      	ldr	r3, [r7, #12]
    }
 800132a:	4618      	mov	r0, r3
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr

08001334 <_ZN8std_msgs5Int327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Int32"; };
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	4b02      	ldr	r3, [pc, #8]	@ (8001348 <_ZN8std_msgs5Int327getTypeEv+0x14>)
 800133e:	4618      	mov	r0, r3
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	080049a8 	.word	0x080049a8

0800134c <_ZN8std_msgs5Int326getMD5Ev>:
    virtual const char * getMD5() override { return "da5909fbe378aeaf85e547e830cc1bb7"; };
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	4b02      	ldr	r3, [pc, #8]	@ (8001360 <_ZN8std_msgs5Int326getMD5Ev+0x14>)
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr
 8001360:	080049b8 	.word	0x080049b8

08001364 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	4a04      	ldr	r2, [pc, #16]	@ (8001380 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4618      	mov	r0, r3
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	08004a74 	.word	0x08004a74

08001384 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff ffe8 	bl	8001364 <_ZN3ros15NodeHandleBase_C1Ev>
 8001394:	4a36      	ldr	r2, [pc, #216]	@ (8001470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3304      	adds	r3, #4
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fe34 	bl	800100c <_ZN13STM32HardwareC1Ev>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 80013ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f003 f923 	bl	800461c <memset>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 80013dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f003 f91a 	bl	800461c <memset>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f603 0324 	addw	r3, r3, #2084	@ 0x824
 80013ee:	2264      	movs	r2, #100	@ 0x64
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f003 f912 	bl	800461c <memset>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 80013fe:	2264      	movs	r2, #100	@ 0x64
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f003 f90a 	bl	800461c <memset>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f603 1314 	addw	r3, r3, #2324	@ 0x914
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fac4 	bl	80009ec <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	08004a48 	.word	0x08004a48

08001474 <HAL_UART_TxCpltCallback>:

ros::Publisher num_pub("num_node", &num_msg);


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a07      	ldr	r2, [pc, #28]	@ (800149c <HAL_UART_TxCpltCallback+0x28>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d106      	bne.n	8001492 <HAL_UART_TxCpltCallback+0x1e>
	{
		nh.getHardware()->flush();
 8001484:	4806      	ldr	r0, [pc, #24]	@ (80014a0 <HAL_UART_TxCpltCallback+0x2c>)
 8001486:	f000 f8aa 	bl	80015de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800148a:	4603      	mov	r3, r0
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fe23 	bl	80010d8 <_ZN13STM32Hardware5flushEv>
	}
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200009e4 	.word	0x200009e4
 80014a0:	2000007c 	.word	0x2000007c

080014a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a07      	ldr	r2, [pc, #28]	@ (80014cc <HAL_UART_RxCpltCallback+0x28>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d106      	bne.n	80014c2 <HAL_UART_RxCpltCallback+0x1e>
	{
		nh.getHardware()->reset_rbuf();
 80014b4:	4806      	ldr	r0, [pc, #24]	@ (80014d0 <HAL_UART_RxCpltCallback+0x2c>)
 80014b6:	f000 f892 	bl	80015de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80014ba:	4603      	mov	r3, r0
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fdcc 	bl	800105a <_ZN13STM32Hardware10reset_rbufEv>
	}
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200009e4 	.word	0x200009e4
 80014d0:	2000007c 	.word	0x2000007c

080014d4 <setup>:


void setup()
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
	nh.initNode();
 80014d8:	4804      	ldr	r0, [pc, #16]	@ (80014ec <setup+0x18>)
 80014da:	f000 f88b 	bl	80015f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(num_pub);
 80014de:	4904      	ldr	r1, [pc, #16]	@ (80014f0 <setup+0x1c>)
 80014e0:	4802      	ldr	r0, [pc, #8]	@ (80014ec <setup+0x18>)
 80014e2:	f000 f8a4 	bl	800162e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	2000007c 	.word	0x2000007c
 80014f0:	200009cc 	.word	0x200009cc

080014f4 <loop>:


void loop()
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
	nowTick = HAL_GetTick();
 80014f8:	f000 ff2a 	bl	8002350 <HAL_GetTick>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461a      	mov	r2, r3
 8001500:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <loop+0x4c>)
 8001502:	601a      	str	r2, [r3, #0]
	if(nowTick - prevTick >= 10)
 8001504:	4b0e      	ldr	r3, [pc, #56]	@ (8001540 <loop+0x4c>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b0e      	ldr	r3, [pc, #56]	@ (8001544 <loop+0x50>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b09      	cmp	r3, #9
 8001510:	dd10      	ble.n	8001534 <loop+0x40>
	{
		prevTick = nowTick;
 8001512:	4b0b      	ldr	r3, [pc, #44]	@ (8001540 <loop+0x4c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a0b      	ldr	r2, [pc, #44]	@ (8001544 <loop+0x50>)
 8001518:	6013      	str	r3, [r2, #0]
		num_msg.data = num_tick;
 800151a:	4b0b      	ldr	r3, [pc, #44]	@ (8001548 <loop+0x54>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a0b      	ldr	r2, [pc, #44]	@ (800154c <loop+0x58>)
 8001520:	6053      	str	r3, [r2, #4]
		num_pub.publish(&num_msg);
 8001522:	490a      	ldr	r1, [pc, #40]	@ (800154c <loop+0x58>)
 8001524:	480a      	ldr	r0, [pc, #40]	@ (8001550 <loop+0x5c>)
 8001526:	f7ff fd3f 	bl	8000fa8 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		num_tick++;
 800152a:	4b07      	ldr	r3, [pc, #28]	@ (8001548 <loop+0x54>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	3301      	adds	r3, #1
 8001530:	4a05      	ldr	r2, [pc, #20]	@ (8001548 <loop+0x54>)
 8001532:	6013      	str	r3, [r2, #0]
	}

	nh.spinOnce();
 8001534:	4807      	ldr	r0, [pc, #28]	@ (8001554 <loop+0x60>)
 8001536:	f000 f8a9 	bl	800168c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200009b8 	.word	0x200009b8
 8001544:	200009bc 	.word	0x200009bc
 8001548:	200009c0 	.word	0x200009c0
 800154c:	200009c4 	.word	0x200009c4
 8001550:	200009cc 	.word	0x200009cc
 8001554:	2000007c 	.word	0x2000007c

08001558 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	e00c      	b.n	8001582 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	fa22 f103 	lsr.w	r1, r2, r3
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4413      	add	r3, r2
 8001578:	b2ca      	uxtb	r2, r1
 800157a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	3301      	adds	r3, #1
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2b03      	cmp	r3, #3
 8001586:	d9ef      	bls.n	8001568 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8001588:	bf00      	nop
 800158a:	bf00      	nop
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr

08001594 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	e010      	b.n	80015cc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6839      	ldr	r1, [r7, #0]
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	440a      	add	r2, r1
 80015b4:	7812      	ldrb	r2, [r2, #0]
 80015b6:	4611      	mov	r1, r2
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	00d2      	lsls	r2, r2, #3
 80015bc:	fa01 f202 	lsl.w	r2, r1, r2
 80015c0:	431a      	orrs	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	3301      	adds	r3, #1
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	d9eb      	bls.n	80015aa <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 80015d2:	bf00      	nop
 80015d4:	bf00      	nop
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr

080015de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3304      	adds	r3, #4
  }
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr

080015f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3304      	adds	r3, #4
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fd1f 	bl	8001044 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
    bytes_ = 0;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
    index_ = 0;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
    topic_ = 0;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
  };
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 800162e:	b480      	push	{r7}
 8001630:	b085      	sub	sp, #20
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	e01d      	b.n	800167a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d111      	bne.n	8001674 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	60da      	str	r2, [r3, #12]
        return true;
 8001670:	2301      	movs	r3, #1
 8001672:	e006      	b.n	8001682 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	3301      	adds	r3, #1
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2b18      	cmp	r3, #24
 800167e:	ddde      	ble.n	800163e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8001680:	2300      	movs	r3, #0
  }
 8001682:	4618      	mov	r0, r3
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3304      	adds	r3, #4
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fdc2 	bl	8001222 <_ZN13STM32Hardware4timeEv>
 800169e:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f8d3 3908 	ldr.w	r3, [r3, #2312]	@ 0x908
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d903      	bls.n	80016ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
    if (mode_ != MODE_FIRST_FF)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d009      	beq.n	80016d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d903      	bls.n	80016d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
      if (spin_timeout_ > 0)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d014      	beq.n	800170c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3304      	adds	r3, #4
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fd9b 	bl	8001222 <_ZN13STM32Hardware4timeEv>
 80016ec:	4602      	mov	r2, r0
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	1ad2      	subs	r2, r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 80016f8:	429a      	cmp	r2, r3
 80016fa:	bf8c      	ite	hi
 80016fc:	2301      	movhi	r3, #1
 80016fe:	2300      	movls	r3, #0
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	d002      	beq.n	800170c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8001706:	f06f 0301 	mvn.w	r3, #1
 800170a:	e194      	b.n	8001a36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3304      	adds	r3, #4
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fcb3 	bl	800107c <_ZN13STM32Hardware4readEv>
 8001716:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	2b00      	cmp	r3, #0
 800171c:	f2c0 8174 	blt.w	8001a08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	@ 0x8fc
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	441a      	add	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001736:	2b07      	cmp	r3, #7
 8001738:	d11e      	bne.n	8001778 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 8001740:	1c59      	adds	r1, r3, #1
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	f8c2 18f8 	str.w	r1, [r2, #2296]	@ 0x8f8
 8001748:	68ba      	ldr	r2, [r7, #8]
 800174a:	b2d1      	uxtb	r1, r2
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	4413      	add	r3, r2
 8001750:	460a      	mov	r2, r1
 8001752:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
        bytes_--;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 800175c:	1e5a      	subs	r2, r3, #1
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1b4      	bne.n	80016d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2208      	movs	r2, #8
 8001772:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8001776:	e7af      	b.n	80016d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800177e:	2b00      	cmp	r3, #0
 8001780:	d128      	bne.n	80017d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	2bff      	cmp	r3, #255	@ 0xff
 8001786:	d10d      	bne.n	80017a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f103 0214 	add.w	r2, r3, #20
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 80017a2:	e799      	b.n	80016d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3304      	adds	r3, #4
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fd3a 	bl	8001222 <_ZN13STM32Hardware4timeEv>
 80017ae:	4602      	mov	r2, r0
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017b8:	4293      	cmp	r3, r2
 80017ba:	bf8c      	ite	hi
 80017bc:	2301      	movhi	r3, #1
 80017be:	2300      	movls	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d088      	beq.n	80016d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
          return SPIN_TIMEOUT;
 80017ce:	f06f 0301 	mvn.w	r3, #1
 80017d2:	e130      	b.n	8001a36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d118      	bne.n	8001810 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	2bfe      	cmp	r3, #254	@ 0xfe
 80017e2:	d107      	bne.n	80017f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 80017f2:	e771      	b.n	80016d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          if (configured_ == false)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8001802:	2b00      	cmp	r3, #0
 8001804:	f47f af68 	bne.w	80016d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 f918 	bl	8001a3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800180e:	e763      	b.n	80016d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001816:	2b02      	cmp	r3, #2
 8001818:	d113      	bne.n	8001842 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68ba      	ldr	r2, [r7, #8]
 800181e:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        index_ = 0;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
        mode_++;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001830:	1c5a      	adds	r2, r3, #1
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 8001840:	e74a      	b.n	80016d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001848:	2b03      	cmp	r3, #3
 800184a:	d110      	bne.n	800186e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	@ 0x8f0
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	021b      	lsls	r3, r3, #8
 8001856:	441a      	add	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        mode_++;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001864:	1c5a      	adds	r2, r3, #1
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 800186c:	e734      	b.n	80016d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001874:	2b04      	cmp	r3, #4
 8001876:	d116      	bne.n	80018a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 800187e:	425a      	negs	r2, r3
 8001880:	b2db      	uxtb	r3, r3
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	bf58      	it	pl
 8001886:	4253      	negpl	r3, r2
 8001888:	2bff      	cmp	r3, #255	@ 0xff
 800188a:	d107      	bne.n	800189c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001892:	1c5a      	adds	r2, r3, #1
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 800189a:	e71d      	b.n	80016d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 80018a4:	e718      	b.n	80016d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80018ac:	2b05      	cmp	r3, #5
 80018ae:	d10f      	bne.n	80018d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_++;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 80018ce:	e703      	b.n	80016d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80018d6:	2b06      	cmp	r3, #6
 80018d8:	d117      	bne.n	800190a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	@ 0x8f4
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	021b      	lsls	r3, r3, #8
 80018e4:	441a      	add	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_ = MODE_MESSAGE;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2207      	movs	r2, #7
 80018f0:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if (bytes_ == 0)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f47f aeec 	bne.w	80016d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2208      	movs	r2, #8
 8001904:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8001908:	e6e6      	b.n	80016d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001910:	2b08      	cmp	r3, #8
 8001912:	f47f aee1 	bne.w	80016d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if ((checksum_ % 256) == 255)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 8001924:	425a      	negs	r2, r3
 8001926:	b2db      	uxtb	r3, r3
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	bf58      	it	pl
 800192c:	4253      	negpl	r3, r2
 800192e:	2bff      	cmp	r3, #255	@ 0xff
 8001930:	f47f aed2 	bne.w	80016d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 800193a:	2b00      	cmp	r3, #0
 800193c:	d110      	bne.n	8001960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 f87d 	bl	8001a3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 f898 	bl	8001a7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
            last_sync_receive_time = c_time;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
            return SPIN_ERR;
 800195a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800195e:	e06a      	b.n	8001a36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8001966:	2b0a      	cmp	r3, #10
 8001968:	d107      	bne.n	800197a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8001970:	4619      	mov	r1, r3
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 f960 	bl	8001c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8001978:	e6ae      	b.n	80016d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8001980:	2b06      	cmp	r3, #6
 8001982:	d10e      	bne.n	80019a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f603 1214 	addw	r2, r3, #2324	@ 0x914
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8001990:	4619      	mov	r1, r3
 8001992:	4610      	mov	r0, r2
 8001994:	f7ff f969 	bl	8000c6a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 80019a0:	e69a      	b.n	80016d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 80019a8:	2b0b      	cmp	r3, #11
 80019aa:	d104      	bne.n	80019b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 80019b4:	e690      	b.n	80016d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 80019bc:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80019c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f43f ae84 	beq.w	80016d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 80019d6:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80019e0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 80019ea:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80019f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	f202 4224 	addw	r2, r2, #1060	@ 0x424
 8001a02:	4611      	mov	r1, r2
 8001a04:	4798      	blx	r3
    while (true)
 8001a06:	e667      	b.n	80016d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8001a08:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00f      	beq.n	8001a34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d906      	bls.n	8001a34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 f809 	bl	8001a3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
    return SPIN_OK;
 8001a34:	2300      	movs	r3, #0
  }
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b086      	sub	sp, #24
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8001a46:	f107 030c 	add.w	r3, r7, #12
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe fc78 	bl	8000340 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f107 020c 	add.w	r2, r7, #12
 8001a5a:	210a      	movs	r1, #10
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	4798      	blx	r3
    rt_time = hardware_.time();
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3304      	adds	r3, #4
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fbdc 	bl	8001222 <_ZN13STM32Hardware4timeEv>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
  }
 8001a72:	bf00      	nop
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8001a7a:	b590      	push	{r4, r7, lr}
 8001a7c:	b08b      	sub	sp, #44	@ 0x2c
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8001a82:	f107 030c 	add.w	r3, r7, #12
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe fd44 	bl	8000514 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a90:	e062      	b.n	8001b58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a96:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d056      	beq.n	8001b52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa8:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abc:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ace:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	6859      	ldr	r1, [r3, #4]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ade:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	3308      	adds	r3, #8
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4608      	mov	r0, r1
 8001af2:	4798      	blx	r3
 8001af4:	4603      	mov	r3, r0
 8001af6:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afc:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	6859      	ldr	r1, [r3, #4]
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	330c      	adds	r3, #12
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4608      	mov	r0, r1
 8001b20:	4798      	blx	r3
 8001b22:	4603      	mov	r3, r0
 8001b24:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8001b26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b2a:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681c      	ldr	r4, [r3, #0]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b36:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fa45 	bl	8000fd0 <_ZN3ros9Publisher15getEndpointTypeEv>
 8001b46:	4601      	mov	r1, r0
 8001b48:	f107 030c 	add.w	r3, r7, #12
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b54:	3301      	adds	r3, #1
 8001b56:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5a:	2b18      	cmp	r3, #24
 8001b5c:	dd99      	ble.n	8001a92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001b5e:	2300      	movs	r3, #0
 8001b60:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b62:	e05e      	b.n	8001c22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b68:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d053      	beq.n	8001c1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b78:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b8a:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b9a:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001b9e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ba6:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	3308      	adds	r3, #8
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4608      	mov	r0, r1
 8001bb6:	4798      	blx	r3
 8001bb8:	4603      	mov	r3, r0
 8001bba:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bc0:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001bc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bcc:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	330c      	adds	r3, #12
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4608      	mov	r0, r1
 8001bdc:	4798      	blx	r3
 8001bde:	4603      	mov	r3, r0
 8001be0:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8001be2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001be6:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681c      	ldr	r4, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bf2:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001bf6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bfe:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4608      	mov	r0, r1
 8001c0e:	4798      	blx	r3
 8001c10:	4601      	mov	r1, r0
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	461a      	mov	r2, r3
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1e:	3301      	adds	r3, #1
 8001c20:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c24:	2b18      	cmp	r3, #24
 8001c26:	dd9d      	ble.n	8001b64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
  }
 8001c30:	bf00      	nop
 8001c32:	372c      	adds	r7, #44	@ 0x2c
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd90      	pop	{r4, r7, pc}

08001c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8001c42:	f107 0308 	add.w	r3, r7, #8
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fb7a 	bl	8000340 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3304      	adds	r3, #4
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fae6 	bl	8001222 <_ZN13STM32Hardware4timeEv>
 8001c56:	4602      	mov	r2, r0
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8001c62:	f107 0308 	add.w	r3, r7, #8
 8001c66:	6839      	ldr	r1, [r7, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fbd8 	bl	800041e <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	4915      	ldr	r1, [pc, #84]	@ (8001cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8001c74:	fba1 1303 	umull	r1, r3, r1, r3
 8001c78:	099b      	lsrs	r3, r3, #6
 8001c7a:	4413      	add	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8001c7e:	6939      	ldr	r1, [r7, #16]
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	4b11      	ldr	r3, [pc, #68]	@ (8001cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8001c84:	fba3 0302 	umull	r0, r3, r3, r2
 8001c88:	099b      	lsrs	r3, r3, #6
 8001c8a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c8e:	fb00 f303 	mul.w	r3, r0, r3
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	4a0d      	ldr	r2, [pc, #52]	@ (8001ccc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8001c96:	fb02 f303 	mul.w	r3, r2, r3
 8001c9a:	440b      	add	r3, r1
 8001c9c:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8001c9e:	f107 0308 	add.w	r3, r7, #8
 8001ca2:	3304      	adds	r3, #4
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f8a6 	bl	8001df8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3304      	adds	r3, #4
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fab6 	bl	8001222 <_ZN13STM32Hardware4timeEv>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
  }
 8001cbe:	bf00      	nop
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	10624dd3 	.word	0x10624dd3
 8001ccc:	000f4240 	.word	0x000f4240

08001cd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	2b63      	cmp	r3, #99	@ 0x63
 8001ce0:	dd09      	ble.n	8001cf6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8001ce8:	f083 0301 	eor.w	r3, r3, #1
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	e079      	b.n	8001dea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	f202 6224 	addw	r2, r2, #1572	@ 0x624
 8001d02:	3207      	adds	r2, #7
 8001d04:	4611      	mov	r1, r2
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	4798      	blx	r3
 8001d0a:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	22ff      	movs	r2, #255	@ 0xff
 8001d10:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624
    message_out[1] = PROTOCOL_VER;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	22fe      	movs	r2, #254	@ 0xfe
 8001d18:	f883 2625 	strb.w	r2, [r3, #1573]	@ 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f883 2626 	strb.w	r2, [r3, #1574]	@ 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	0a1b      	lsrs	r3, r3, #8
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f883 2627 	strb.w	r2, [r3, #1575]	@ 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f893 2626 	ldrb.w	r2, [r3, #1574]	@ 0x626
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f893 3627 	ldrb.w	r3, [r3, #1575]	@ 0x627
 8001d42:	4413      	add	r3, r2
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f883 2628 	strb.w	r2, [r3, #1576]	@ 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f883 2629 	strb.w	r2, [r3, #1577]	@ 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	b21b      	sxth	r3, r3
 8001d5e:	121b      	asrs	r3, r3, #8
 8001d60:	b21b      	sxth	r3, r3
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f883 262a 	strb.w	r2, [r3, #1578]	@ 0x62a

    /* calculate checksum */
    int chk = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001d6e:	2305      	movs	r3, #5
 8001d70:	61bb      	str	r3, [r7, #24]
 8001d72:	e00c      	b.n	8001d8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	4413      	add	r3, r2
 8001d7a:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	461a      	mov	r2, r3
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	4413      	add	r3, r2
 8001d86:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	61bb      	str	r3, [r7, #24]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	3306      	adds	r3, #6
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	dded      	ble.n	8001d74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	3307      	adds	r3, #7
 8001d9c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	425a      	negs	r2, r3
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	bf58      	it	pl
 8001da8:	4253      	negpl	r3, r2
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	1c59      	adds	r1, r3, #1
 8001db0:	6179      	str	r1, [r7, #20]
 8001db2:	43d2      	mvns	r2, r2
 8001db4:	b2d1      	uxtb	r1, r2
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	4413      	add	r3, r2
 8001dba:	460a      	mov	r2, r1
 8001dbc:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624

    if (l <= OUTPUT_SIZE)
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001dc6:	dc0a      	bgt.n	8001dde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	1d18      	adds	r0, r3, #4
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f7ff f9dd 	bl	8001194 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	e005      	b.n	8001dea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8001dde:	4905      	ldr	r1, [pc, #20]	@ (8001df4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f000 f849 	bl	8001e78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8001de6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
  }
 8001dea:	4618      	mov	r0, r3
 8001dec:	3720      	adds	r7, #32
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	080049dc 	.word	0x080049dc

08001df8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3304      	adds	r3, #4
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fa0b 	bl	8001222 <_ZN13STM32Hardware4timeEv>
 8001e0c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4915      	ldr	r1, [pc, #84]	@ (8001e6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8001e16:	fba1 1303 	umull	r1, r3, r1, r3
 8001e1a:	099b      	lsrs	r3, r3, #6
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	1e5a      	subs	r2, r3, #1
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	6859      	ldr	r1, [r3, #4]
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8001e2e:	fba3 0302 	umull	r0, r3, r3, r2
 8001e32:	099b      	lsrs	r3, r3, #6
 8001e34:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e38:	fb00 f303 	mul.w	r3, r0, r3
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	4a0c      	ldr	r2, [pc, #48]	@ (8001e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8001e40:	fb02 f303 	mul.w	r3, r2, r3
 8001e44:	1aca      	subs	r2, r1, r3
 8001e46:	4b0b      	ldr	r3, [pc, #44]	@ (8001e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8001e48:	4413      	add	r3, r2
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	f8c2 341c 	str.w	r3, [r2, #1052]	@ 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f503 6283 	add.w	r2, r3, #1048	@ 0x418
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4610      	mov	r0, r2
 8001e60:	f7fe f97c 	bl	800015c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8001e64:	bf00      	nop
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	10624dd3 	.word	0x10624dd3
 8001e70:	000f4240 	.word	0x000f4240
 8001e74:	3b9aca00 	.word	0x3b9aca00

08001e78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	2103      	movs	r1, #3
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f804 	bl	8001e94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b088      	sub	sp, #32
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe fcf4 	bl	8000894 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8001eac:	7afb      	ldrb	r3, [r7, #11]
 8001eae:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f107 0214 	add.w	r2, r7, #20
 8001ebe:	2107      	movs	r1, #7
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	4798      	blx	r3
  }
 8001ec4:	bf00      	nop
 8001ec6:	3720      	adds	r7, #32
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <_Z41__static_initialization_and_destruction_0ii>:
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d110      	bne.n	8001efe <_Z41__static_initialization_and_destruction_0ii+0x32>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d10b      	bne.n	8001efe <_Z41__static_initialization_and_destruction_0ii+0x32>
ros::NodeHandle nh;
 8001ee6:	4808      	ldr	r0, [pc, #32]	@ (8001f08 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001ee8:	f7ff fa4c 	bl	8001384 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Int32 num_msg;
 8001eec:	4807      	ldr	r0, [pc, #28]	@ (8001f0c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001eee:	f7ff f9a3 	bl	8001238 <_ZN8std_msgs5Int32C1Ev>
ros::Publisher num_pub("num_node", &num_msg);
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	4a05      	ldr	r2, [pc, #20]	@ (8001f0c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001ef6:	4906      	ldr	r1, [pc, #24]	@ (8001f10 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001ef8:	4806      	ldr	r0, [pc, #24]	@ (8001f14 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001efa:	f7ff f83f 	bl	8000f7c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	2000007c 	.word	0x2000007c
 8001f0c:	200009c4 	.word	0x200009c4
 8001f10:	08004a18 	.word	0x08004a18
 8001f14:	200009cc 	.word	0x200009cc

08001f18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
    return configured_;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
  };
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <_GLOBAL__sub_I_nh>:
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001f38:	2001      	movs	r0, #1
 8001f3a:	f7ff ffc7 	bl	8001ecc <_Z41__static_initialization_and_destruction_0ii>
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f46:	4b15      	ldr	r3, [pc, #84]	@ (8001f9c <HAL_MspInit+0x5c>)
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	4a14      	ldr	r2, [pc, #80]	@ (8001f9c <HAL_MspInit+0x5c>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6193      	str	r3, [r2, #24]
 8001f52:	4b12      	ldr	r3, [pc, #72]	@ (8001f9c <HAL_MspInit+0x5c>)
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f9c <HAL_MspInit+0x5c>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	4a0e      	ldr	r2, [pc, #56]	@ (8001f9c <HAL_MspInit+0x5c>)
 8001f64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f68:	61d3      	str	r3, [r2, #28]
 8001f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f9c <HAL_MspInit+0x5c>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f72:	607b      	str	r3, [r7, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f76:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa0 <HAL_MspInit+0x60>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	4a04      	ldr	r2, [pc, #16]	@ (8001fa0 <HAL_MspInit+0x60>)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f92:	bf00      	nop
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40010000 	.word	0x40010000

08001fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fa8:	bf00      	nop
 8001faa:	e7fd      	b.n	8001fa8 <NMI_Handler+0x4>

08001fac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb0:	bf00      	nop
 8001fb2:	e7fd      	b.n	8001fb0 <HardFault_Handler+0x4>

08001fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb8:	bf00      	nop
 8001fba:	e7fd      	b.n	8001fb8 <MemManage_Handler+0x4>

08001fbc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fc0:	bf00      	nop
 8001fc2:	e7fd      	b.n	8001fc0 <BusFault_Handler+0x4>

08001fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc8:	bf00      	nop
 8001fca:	e7fd      	b.n	8001fc8 <UsageFault_Handler+0x4>

08001fcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr

08001fd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff4:	f000 f99a 	bl	800232c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ff8:	bf00      	nop
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002000:	4802      	ldr	r0, [pc, #8]	@ (800200c <DMA1_Channel6_IRQHandler+0x10>)
 8002002:	f000 fc2b 	bl	800285c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000a2c 	.word	0x20000a2c

08002010 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002014:	4802      	ldr	r0, [pc, #8]	@ (8002020 <DMA1_Channel7_IRQHandler+0x10>)
 8002016:	f000 fc21 	bl	800285c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000a70 	.word	0x20000a70

08002024 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002028:	4802      	ldr	r0, [pc, #8]	@ (8002034 <USART2_IRQHandler+0x10>)
 800202a:	f001 fbc5 	bl	80037b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200009e4 	.word	0x200009e4

08002038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002040:	4a14      	ldr	r2, [pc, #80]	@ (8002094 <_sbrk+0x5c>)
 8002042:	4b15      	ldr	r3, [pc, #84]	@ (8002098 <_sbrk+0x60>)
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800204c:	4b13      	ldr	r3, [pc, #76]	@ (800209c <_sbrk+0x64>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d102      	bne.n	800205a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002054:	4b11      	ldr	r3, [pc, #68]	@ (800209c <_sbrk+0x64>)
 8002056:	4a12      	ldr	r2, [pc, #72]	@ (80020a0 <_sbrk+0x68>)
 8002058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800205a:	4b10      	ldr	r3, [pc, #64]	@ (800209c <_sbrk+0x64>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	429a      	cmp	r2, r3
 8002066:	d207      	bcs.n	8002078 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002068:	f002 fae0 	bl	800462c <__errno>
 800206c:	4603      	mov	r3, r0
 800206e:	220c      	movs	r2, #12
 8002070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002072:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002076:	e009      	b.n	800208c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002078:	4b08      	ldr	r3, [pc, #32]	@ (800209c <_sbrk+0x64>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800207e:	4b07      	ldr	r3, [pc, #28]	@ (800209c <_sbrk+0x64>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	4a05      	ldr	r2, [pc, #20]	@ (800209c <_sbrk+0x64>)
 8002088:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800208a:	68fb      	ldr	r3, [r7, #12]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20005000 	.word	0x20005000
 8002098:	00000400 	.word	0x00000400
 800209c:	200009e0 	.word	0x200009e0
 80020a0:	20000c00 	.word	0x20000c00

080020a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020b4:	4b11      	ldr	r3, [pc, #68]	@ (80020fc <MX_USART2_UART_Init+0x4c>)
 80020b6:	4a12      	ldr	r2, [pc, #72]	@ (8002100 <MX_USART2_UART_Init+0x50>)
 80020b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80020ba:	4b10      	ldr	r3, [pc, #64]	@ (80020fc <MX_USART2_UART_Init+0x4c>)
 80020bc:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80020c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020c2:	4b0e      	ldr	r3, [pc, #56]	@ (80020fc <MX_USART2_UART_Init+0x4c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020c8:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <MX_USART2_UART_Init+0x4c>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020ce:	4b0b      	ldr	r3, [pc, #44]	@ (80020fc <MX_USART2_UART_Init+0x4c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020d4:	4b09      	ldr	r3, [pc, #36]	@ (80020fc <MX_USART2_UART_Init+0x4c>)
 80020d6:	220c      	movs	r2, #12
 80020d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020da:	4b08      	ldr	r3, [pc, #32]	@ (80020fc <MX_USART2_UART_Init+0x4c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e0:	4b06      	ldr	r3, [pc, #24]	@ (80020fc <MX_USART2_UART_Init+0x4c>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020e6:	4805      	ldr	r0, [pc, #20]	@ (80020fc <MX_USART2_UART_Init+0x4c>)
 80020e8:	f001 fa80 	bl	80035ec <HAL_UART_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020f2:	f7fe f8fe 	bl	80002f2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	200009e4 	.word	0x200009e4
 8002100:	40004400 	.word	0x40004400

08002104 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210c:	f107 0310 	add.w	r3, r7, #16
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a46      	ldr	r2, [pc, #280]	@ (8002238 <HAL_UART_MspInit+0x134>)
 8002120:	4293      	cmp	r3, r2
 8002122:	f040 8084 	bne.w	800222e <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002126:	4b45      	ldr	r3, [pc, #276]	@ (800223c <HAL_UART_MspInit+0x138>)
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	4a44      	ldr	r2, [pc, #272]	@ (800223c <HAL_UART_MspInit+0x138>)
 800212c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002130:	61d3      	str	r3, [r2, #28]
 8002132:	4b42      	ldr	r3, [pc, #264]	@ (800223c <HAL_UART_MspInit+0x138>)
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800213e:	4b3f      	ldr	r3, [pc, #252]	@ (800223c <HAL_UART_MspInit+0x138>)
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	4a3e      	ldr	r2, [pc, #248]	@ (800223c <HAL_UART_MspInit+0x138>)
 8002144:	f043 0304 	orr.w	r3, r3, #4
 8002148:	6193      	str	r3, [r2, #24]
 800214a:	4b3c      	ldr	r3, [pc, #240]	@ (800223c <HAL_UART_MspInit+0x138>)
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002156:	2304      	movs	r3, #4
 8002158:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215a:	2302      	movs	r3, #2
 800215c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800215e:	2303      	movs	r3, #3
 8002160:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002162:	f107 0310 	add.w	r3, r7, #16
 8002166:	4619      	mov	r1, r3
 8002168:	4835      	ldr	r0, [pc, #212]	@ (8002240 <HAL_UART_MspInit+0x13c>)
 800216a:	f000 fcab 	bl	8002ac4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800216e:	2308      	movs	r3, #8
 8002170:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217a:	f107 0310 	add.w	r3, r7, #16
 800217e:	4619      	mov	r1, r3
 8002180:	482f      	ldr	r0, [pc, #188]	@ (8002240 <HAL_UART_MspInit+0x13c>)
 8002182:	f000 fc9f 	bl	8002ac4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002186:	4b2f      	ldr	r3, [pc, #188]	@ (8002244 <HAL_UART_MspInit+0x140>)
 8002188:	4a2f      	ldr	r2, [pc, #188]	@ (8002248 <HAL_UART_MspInit+0x144>)
 800218a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800218c:	4b2d      	ldr	r3, [pc, #180]	@ (8002244 <HAL_UART_MspInit+0x140>)
 800218e:	2200      	movs	r2, #0
 8002190:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002192:	4b2c      	ldr	r3, [pc, #176]	@ (8002244 <HAL_UART_MspInit+0x140>)
 8002194:	2200      	movs	r2, #0
 8002196:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002198:	4b2a      	ldr	r3, [pc, #168]	@ (8002244 <HAL_UART_MspInit+0x140>)
 800219a:	2280      	movs	r2, #128	@ 0x80
 800219c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800219e:	4b29      	ldr	r3, [pc, #164]	@ (8002244 <HAL_UART_MspInit+0x140>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021a4:	4b27      	ldr	r3, [pc, #156]	@ (8002244 <HAL_UART_MspInit+0x140>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80021aa:	4b26      	ldr	r3, [pc, #152]	@ (8002244 <HAL_UART_MspInit+0x140>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021b0:	4b24      	ldr	r3, [pc, #144]	@ (8002244 <HAL_UART_MspInit+0x140>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80021b6:	4823      	ldr	r0, [pc, #140]	@ (8002244 <HAL_UART_MspInit+0x140>)
 80021b8:	f000 f9e2 	bl	8002580 <HAL_DMA_Init>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80021c2:	f7fe f896 	bl	80002f2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a1e      	ldr	r2, [pc, #120]	@ (8002244 <HAL_UART_MspInit+0x140>)
 80021ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80021cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002244 <HAL_UART_MspInit+0x140>)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80021d2:	4b1e      	ldr	r3, [pc, #120]	@ (800224c <HAL_UART_MspInit+0x148>)
 80021d4:	4a1e      	ldr	r2, [pc, #120]	@ (8002250 <HAL_UART_MspInit+0x14c>)
 80021d6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021d8:	4b1c      	ldr	r3, [pc, #112]	@ (800224c <HAL_UART_MspInit+0x148>)
 80021da:	2210      	movs	r2, #16
 80021dc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021de:	4b1b      	ldr	r3, [pc, #108]	@ (800224c <HAL_UART_MspInit+0x148>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021e4:	4b19      	ldr	r3, [pc, #100]	@ (800224c <HAL_UART_MspInit+0x148>)
 80021e6:	2280      	movs	r2, #128	@ 0x80
 80021e8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021ea:	4b18      	ldr	r3, [pc, #96]	@ (800224c <HAL_UART_MspInit+0x148>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021f0:	4b16      	ldr	r3, [pc, #88]	@ (800224c <HAL_UART_MspInit+0x148>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80021f6:	4b15      	ldr	r3, [pc, #84]	@ (800224c <HAL_UART_MspInit+0x148>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021fc:	4b13      	ldr	r3, [pc, #76]	@ (800224c <HAL_UART_MspInit+0x148>)
 80021fe:	2200      	movs	r2, #0
 8002200:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002202:	4812      	ldr	r0, [pc, #72]	@ (800224c <HAL_UART_MspInit+0x148>)
 8002204:	f000 f9bc 	bl	8002580 <HAL_DMA_Init>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 800220e:	f7fe f870 	bl	80002f2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a0d      	ldr	r2, [pc, #52]	@ (800224c <HAL_UART_MspInit+0x148>)
 8002216:	639a      	str	r2, [r3, #56]	@ 0x38
 8002218:	4a0c      	ldr	r2, [pc, #48]	@ (800224c <HAL_UART_MspInit+0x148>)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	2100      	movs	r1, #0
 8002222:	2026      	movs	r0, #38	@ 0x26
 8002224:	f000 f975 	bl	8002512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002228:	2026      	movs	r0, #38	@ 0x26
 800222a:	f000 f98e 	bl	800254a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800222e:	bf00      	nop
 8002230:	3720      	adds	r7, #32
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40004400 	.word	0x40004400
 800223c:	40021000 	.word	0x40021000
 8002240:	40010800 	.word	0x40010800
 8002244:	20000a2c 	.word	0x20000a2c
 8002248:	4002006c 	.word	0x4002006c
 800224c:	20000a70 	.word	0x20000a70
 8002250:	40020080 	.word	0x40020080

08002254 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002254:	f7ff ff26 	bl	80020a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002258:	480b      	ldr	r0, [pc, #44]	@ (8002288 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800225a:	490c      	ldr	r1, [pc, #48]	@ (800228c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800225c:	4a0c      	ldr	r2, [pc, #48]	@ (8002290 <LoopFillZerobss+0x16>)
  movs r3, #0
 800225e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002260:	e002      	b.n	8002268 <LoopCopyDataInit>

08002262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002266:	3304      	adds	r3, #4

08002268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800226a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800226c:	d3f9      	bcc.n	8002262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800226e:	4a09      	ldr	r2, [pc, #36]	@ (8002294 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002270:	4c09      	ldr	r4, [pc, #36]	@ (8002298 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002274:	e001      	b.n	800227a <LoopFillZerobss>

08002276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002278:	3204      	adds	r2, #4

0800227a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800227a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800227c:	d3fb      	bcc.n	8002276 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800227e:	f002 f9db 	bl	8004638 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002282:	f7fd ffdf 	bl	8000244 <main>
  bx lr
 8002286:	4770      	bx	lr
  ldr r0, =_sdata
 8002288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800228c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002290:	08004b38 	.word	0x08004b38
  ldr r2, =_sbss
 8002294:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002298:	20000c00 	.word	0x20000c00

0800229c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800229c:	e7fe      	b.n	800229c <ADC1_2_IRQHandler>
	...

080022a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a4:	4b08      	ldr	r3, [pc, #32]	@ (80022c8 <HAL_Init+0x28>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a07      	ldr	r2, [pc, #28]	@ (80022c8 <HAL_Init+0x28>)
 80022aa:	f043 0310 	orr.w	r3, r3, #16
 80022ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b0:	2003      	movs	r0, #3
 80022b2:	f000 f923 	bl	80024fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022b6:	200f      	movs	r0, #15
 80022b8:	f000 f808 	bl	80022cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022bc:	f7ff fe40 	bl	8001f40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40022000 	.word	0x40022000

080022cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022d4:	4b12      	ldr	r3, [pc, #72]	@ (8002320 <HAL_InitTick+0x54>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4b12      	ldr	r3, [pc, #72]	@ (8002324 <HAL_InitTick+0x58>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	4619      	mov	r1, r3
 80022de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 f93b 	bl	8002566 <HAL_SYSTICK_Config>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e00e      	b.n	8002318 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b0f      	cmp	r3, #15
 80022fe:	d80a      	bhi.n	8002316 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002300:	2200      	movs	r2, #0
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002308:	f000 f903 	bl	8002512 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800230c:	4a06      	ldr	r2, [pc, #24]	@ (8002328 <HAL_InitTick+0x5c>)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	e000      	b.n	8002318 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
}
 8002318:	4618      	mov	r0, r3
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000000 	.word	0x20000000
 8002324:	20000008 	.word	0x20000008
 8002328:	20000004 	.word	0x20000004

0800232c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002330:	4b05      	ldr	r3, [pc, #20]	@ (8002348 <HAL_IncTick+0x1c>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	4b05      	ldr	r3, [pc, #20]	@ (800234c <HAL_IncTick+0x20>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4413      	add	r3, r2
 800233c:	4a03      	ldr	r2, [pc, #12]	@ (800234c <HAL_IncTick+0x20>)
 800233e:	6013      	str	r3, [r2, #0]
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr
 8002348:	20000008 	.word	0x20000008
 800234c:	20000ab4 	.word	0x20000ab4

08002350 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return uwTick;
 8002354:	4b02      	ldr	r3, [pc, #8]	@ (8002360 <HAL_GetTick+0x10>)
 8002356:	681b      	ldr	r3, [r3, #0]
}
 8002358:	4618      	mov	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr
 8002360:	20000ab4 	.word	0x20000ab4

08002364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002374:	4b0c      	ldr	r3, [pc, #48]	@ (80023a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002380:	4013      	ands	r3, r2
 8002382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800238c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002390:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002396:	4a04      	ldr	r2, [pc, #16]	@ (80023a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	60d3      	str	r3, [r2, #12]
}
 800239c:	bf00      	nop
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b0:	4b04      	ldr	r3, [pc, #16]	@ (80023c4 <__NVIC_GetPriorityGrouping+0x18>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	0a1b      	lsrs	r3, r3, #8
 80023b6:	f003 0307 	and.w	r3, r3, #7
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	db0b      	blt.n	80023f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	f003 021f 	and.w	r2, r3, #31
 80023e0:	4906      	ldr	r1, [pc, #24]	@ (80023fc <__NVIC_EnableIRQ+0x34>)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	2001      	movs	r0, #1
 80023ea:	fa00 f202 	lsl.w	r2, r0, r2
 80023ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr
 80023fc:	e000e100 	.word	0xe000e100

08002400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	6039      	str	r1, [r7, #0]
 800240a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002410:	2b00      	cmp	r3, #0
 8002412:	db0a      	blt.n	800242a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	b2da      	uxtb	r2, r3
 8002418:	490c      	ldr	r1, [pc, #48]	@ (800244c <__NVIC_SetPriority+0x4c>)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	0112      	lsls	r2, r2, #4
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	440b      	add	r3, r1
 8002424:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002428:	e00a      	b.n	8002440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	b2da      	uxtb	r2, r3
 800242e:	4908      	ldr	r1, [pc, #32]	@ (8002450 <__NVIC_SetPriority+0x50>)
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	3b04      	subs	r3, #4
 8002438:	0112      	lsls	r2, r2, #4
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	440b      	add	r3, r1
 800243e:	761a      	strb	r2, [r3, #24]
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e000e100 	.word	0xe000e100
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002454:	b480      	push	{r7}
 8002456:	b089      	sub	sp, #36	@ 0x24
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f1c3 0307 	rsb	r3, r3, #7
 800246e:	2b04      	cmp	r3, #4
 8002470:	bf28      	it	cs
 8002472:	2304      	movcs	r3, #4
 8002474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3304      	adds	r3, #4
 800247a:	2b06      	cmp	r3, #6
 800247c:	d902      	bls.n	8002484 <NVIC_EncodePriority+0x30>
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3b03      	subs	r3, #3
 8002482:	e000      	b.n	8002486 <NVIC_EncodePriority+0x32>
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002488:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43da      	mvns	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	401a      	ands	r2, r3
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800249c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	fa01 f303 	lsl.w	r3, r1, r3
 80024a6:	43d9      	mvns	r1, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ac:	4313      	orrs	r3, r2
         );
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3724      	adds	r7, #36	@ 0x24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024c8:	d301      	bcc.n	80024ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ca:	2301      	movs	r3, #1
 80024cc:	e00f      	b.n	80024ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ce:	4a0a      	ldr	r2, [pc, #40]	@ (80024f8 <SysTick_Config+0x40>)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024d6:	210f      	movs	r1, #15
 80024d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80024dc:	f7ff ff90 	bl	8002400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e0:	4b05      	ldr	r3, [pc, #20]	@ (80024f8 <SysTick_Config+0x40>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024e6:	4b04      	ldr	r3, [pc, #16]	@ (80024f8 <SysTick_Config+0x40>)
 80024e8:	2207      	movs	r2, #7
 80024ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	e000e010 	.word	0xe000e010

080024fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7ff ff2d 	bl	8002364 <__NVIC_SetPriorityGrouping>
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002512:	b580      	push	{r7, lr}
 8002514:	b086      	sub	sp, #24
 8002516:	af00      	add	r7, sp, #0
 8002518:	4603      	mov	r3, r0
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	607a      	str	r2, [r7, #4]
 800251e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002524:	f7ff ff42 	bl	80023ac <__NVIC_GetPriorityGrouping>
 8002528:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	68b9      	ldr	r1, [r7, #8]
 800252e:	6978      	ldr	r0, [r7, #20]
 8002530:	f7ff ff90 	bl	8002454 <NVIC_EncodePriority>
 8002534:	4602      	mov	r2, r0
 8002536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800253a:	4611      	mov	r1, r2
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff ff5f 	bl	8002400 <__NVIC_SetPriority>
}
 8002542:	bf00      	nop
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	4603      	mov	r3, r0
 8002552:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff ff35 	bl	80023c8 <__NVIC_EnableIRQ>
}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff ffa2 	bl	80024b8 <SysTick_Config>
 8002574:	4603      	mov	r3, r0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e043      	b.n	800261e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	4b22      	ldr	r3, [pc, #136]	@ (8002628 <HAL_DMA_Init+0xa8>)
 800259e:	4413      	add	r3, r2
 80025a0:	4a22      	ldr	r2, [pc, #136]	@ (800262c <HAL_DMA_Init+0xac>)
 80025a2:	fba2 2303 	umull	r2, r3, r2, r3
 80025a6:	091b      	lsrs	r3, r3, #4
 80025a8:	009a      	lsls	r2, r3, #2
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a1f      	ldr	r2, [pc, #124]	@ (8002630 <HAL_DMA_Init+0xb0>)
 80025b2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80025ca:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80025ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80025d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr
 8002628:	bffdfff8 	.word	0xbffdfff8
 800262c:	cccccccd 	.word	0xcccccccd
 8002630:	40020000 	.word	0x40020000

08002634 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
 8002640:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002642:	2300      	movs	r3, #0
 8002644:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f893 3020 	ldrb.w	r3, [r3, #32]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_DMA_Start_IT+0x20>
 8002650:	2302      	movs	r3, #2
 8002652:	e04b      	b.n	80026ec <HAL_DMA_Start_IT+0xb8>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b01      	cmp	r3, #1
 8002666:	d13a      	bne.n	80026de <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2202      	movs	r2, #2
 800266c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0201 	bic.w	r2, r2, #1
 8002684:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	68b9      	ldr	r1, [r7, #8]
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f000 f9eb 	bl	8002a68 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002696:	2b00      	cmp	r3, #0
 8002698:	d008      	beq.n	80026ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 020e 	orr.w	r2, r2, #14
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	e00f      	b.n	80026cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0204 	bic.w	r2, r2, #4
 80026ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 020a 	orr.w	r2, r2, #10
 80026ca:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0201 	orr.w	r2, r2, #1
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	e005      	b.n	80026ea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80026e6:	2302      	movs	r3, #2
 80026e8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80026ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026fc:	2300      	movs	r3, #0
 80026fe:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d008      	beq.n	800271e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2204      	movs	r2, #4
 8002710:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e020      	b.n	8002760 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 020e 	bic.w	r2, r2, #14
 800272c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0201 	bic.w	r2, r2, #1
 800273c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002746:	2101      	movs	r1, #1
 8002748:	fa01 f202 	lsl.w	r2, r1, r2
 800274c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800275e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr
	...

0800276c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d005      	beq.n	8002790 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2204      	movs	r2, #4
 8002788:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	73fb      	strb	r3, [r7, #15]
 800278e:	e051      	b.n	8002834 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 020e 	bic.w	r2, r2, #14
 800279e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0201 	bic.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a22      	ldr	r2, [pc, #136]	@ (8002840 <HAL_DMA_Abort_IT+0xd4>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d029      	beq.n	800280e <HAL_DMA_Abort_IT+0xa2>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a21      	ldr	r2, [pc, #132]	@ (8002844 <HAL_DMA_Abort_IT+0xd8>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d022      	beq.n	800280a <HAL_DMA_Abort_IT+0x9e>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002848 <HAL_DMA_Abort_IT+0xdc>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d01a      	beq.n	8002804 <HAL_DMA_Abort_IT+0x98>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a1e      	ldr	r2, [pc, #120]	@ (800284c <HAL_DMA_Abort_IT+0xe0>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d012      	beq.n	80027fe <HAL_DMA_Abort_IT+0x92>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002850 <HAL_DMA_Abort_IT+0xe4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d00a      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x8c>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a1b      	ldr	r2, [pc, #108]	@ (8002854 <HAL_DMA_Abort_IT+0xe8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d102      	bne.n	80027f2 <HAL_DMA_Abort_IT+0x86>
 80027ec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80027f0:	e00e      	b.n	8002810 <HAL_DMA_Abort_IT+0xa4>
 80027f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027f6:	e00b      	b.n	8002810 <HAL_DMA_Abort_IT+0xa4>
 80027f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027fc:	e008      	b.n	8002810 <HAL_DMA_Abort_IT+0xa4>
 80027fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002802:	e005      	b.n	8002810 <HAL_DMA_Abort_IT+0xa4>
 8002804:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002808:	e002      	b.n	8002810 <HAL_DMA_Abort_IT+0xa4>
 800280a:	2310      	movs	r3, #16
 800280c:	e000      	b.n	8002810 <HAL_DMA_Abort_IT+0xa4>
 800280e:	2301      	movs	r3, #1
 8002810:	4a11      	ldr	r2, [pc, #68]	@ (8002858 <HAL_DMA_Abort_IT+0xec>)
 8002812:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	4798      	blx	r3
    } 
  }
  return status;
 8002834:	7bfb      	ldrb	r3, [r7, #15]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40020008 	.word	0x40020008
 8002844:	4002001c 	.word	0x4002001c
 8002848:	40020030 	.word	0x40020030
 800284c:	40020044 	.word	0x40020044
 8002850:	40020058 	.word	0x40020058
 8002854:	4002006c 	.word	0x4002006c
 8002858:	40020000 	.word	0x40020000

0800285c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002878:	2204      	movs	r2, #4
 800287a:	409a      	lsls	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4013      	ands	r3, r2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d04f      	beq.n	8002924 <HAL_DMA_IRQHandler+0xc8>
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	2b00      	cmp	r3, #0
 800288c:	d04a      	beq.n	8002924 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0320 	and.w	r3, r3, #32
 8002898:	2b00      	cmp	r3, #0
 800289a:	d107      	bne.n	80028ac <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0204 	bic.w	r2, r2, #4
 80028aa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a66      	ldr	r2, [pc, #408]	@ (8002a4c <HAL_DMA_IRQHandler+0x1f0>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d029      	beq.n	800290a <HAL_DMA_IRQHandler+0xae>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a65      	ldr	r2, [pc, #404]	@ (8002a50 <HAL_DMA_IRQHandler+0x1f4>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d022      	beq.n	8002906 <HAL_DMA_IRQHandler+0xaa>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a63      	ldr	r2, [pc, #396]	@ (8002a54 <HAL_DMA_IRQHandler+0x1f8>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d01a      	beq.n	8002900 <HAL_DMA_IRQHandler+0xa4>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a62      	ldr	r2, [pc, #392]	@ (8002a58 <HAL_DMA_IRQHandler+0x1fc>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d012      	beq.n	80028fa <HAL_DMA_IRQHandler+0x9e>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a60      	ldr	r2, [pc, #384]	@ (8002a5c <HAL_DMA_IRQHandler+0x200>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d00a      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x98>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a5f      	ldr	r2, [pc, #380]	@ (8002a60 <HAL_DMA_IRQHandler+0x204>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d102      	bne.n	80028ee <HAL_DMA_IRQHandler+0x92>
 80028e8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80028ec:	e00e      	b.n	800290c <HAL_DMA_IRQHandler+0xb0>
 80028ee:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80028f2:	e00b      	b.n	800290c <HAL_DMA_IRQHandler+0xb0>
 80028f4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80028f8:	e008      	b.n	800290c <HAL_DMA_IRQHandler+0xb0>
 80028fa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80028fe:	e005      	b.n	800290c <HAL_DMA_IRQHandler+0xb0>
 8002900:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002904:	e002      	b.n	800290c <HAL_DMA_IRQHandler+0xb0>
 8002906:	2340      	movs	r3, #64	@ 0x40
 8002908:	e000      	b.n	800290c <HAL_DMA_IRQHandler+0xb0>
 800290a:	2304      	movs	r3, #4
 800290c:	4a55      	ldr	r2, [pc, #340]	@ (8002a64 <HAL_DMA_IRQHandler+0x208>)
 800290e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 8094 	beq.w	8002a42 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002922:	e08e      	b.n	8002a42 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002928:	2202      	movs	r2, #2
 800292a:	409a      	lsls	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4013      	ands	r3, r2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d056      	beq.n	80029e2 <HAL_DMA_IRQHandler+0x186>
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d051      	beq.n	80029e2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0320 	and.w	r3, r3, #32
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10b      	bne.n	8002964 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 020a 	bic.w	r2, r2, #10
 800295a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a38      	ldr	r2, [pc, #224]	@ (8002a4c <HAL_DMA_IRQHandler+0x1f0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d029      	beq.n	80029c2 <HAL_DMA_IRQHandler+0x166>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a37      	ldr	r2, [pc, #220]	@ (8002a50 <HAL_DMA_IRQHandler+0x1f4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d022      	beq.n	80029be <HAL_DMA_IRQHandler+0x162>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a35      	ldr	r2, [pc, #212]	@ (8002a54 <HAL_DMA_IRQHandler+0x1f8>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d01a      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x15c>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a34      	ldr	r2, [pc, #208]	@ (8002a58 <HAL_DMA_IRQHandler+0x1fc>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d012      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x156>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a32      	ldr	r2, [pc, #200]	@ (8002a5c <HAL_DMA_IRQHandler+0x200>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d00a      	beq.n	80029ac <HAL_DMA_IRQHandler+0x150>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a31      	ldr	r2, [pc, #196]	@ (8002a60 <HAL_DMA_IRQHandler+0x204>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d102      	bne.n	80029a6 <HAL_DMA_IRQHandler+0x14a>
 80029a0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80029a4:	e00e      	b.n	80029c4 <HAL_DMA_IRQHandler+0x168>
 80029a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029aa:	e00b      	b.n	80029c4 <HAL_DMA_IRQHandler+0x168>
 80029ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029b0:	e008      	b.n	80029c4 <HAL_DMA_IRQHandler+0x168>
 80029b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029b6:	e005      	b.n	80029c4 <HAL_DMA_IRQHandler+0x168>
 80029b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029bc:	e002      	b.n	80029c4 <HAL_DMA_IRQHandler+0x168>
 80029be:	2320      	movs	r3, #32
 80029c0:	e000      	b.n	80029c4 <HAL_DMA_IRQHandler+0x168>
 80029c2:	2302      	movs	r3, #2
 80029c4:	4a27      	ldr	r2, [pc, #156]	@ (8002a64 <HAL_DMA_IRQHandler+0x208>)
 80029c6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d034      	beq.n	8002a42 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80029e0:	e02f      	b.n	8002a42 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e6:	2208      	movs	r2, #8
 80029e8:	409a      	lsls	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	4013      	ands	r3, r2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d028      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x1e8>
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d023      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 020e 	bic.w	r2, r2, #14
 8002a0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a14:	2101      	movs	r1, #1
 8002a16:	fa01 f202 	lsl.w	r2, r1, r2
 8002a1a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d004      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	4798      	blx	r3
    }
  }
  return;
 8002a42:	bf00      	nop
 8002a44:	bf00      	nop
}
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40020008 	.word	0x40020008
 8002a50:	4002001c 	.word	0x4002001c
 8002a54:	40020030 	.word	0x40020030
 8002a58:	40020044 	.word	0x40020044
 8002a5c:	40020058 	.word	0x40020058
 8002a60:	4002006c 	.word	0x4002006c
 8002a64:	40020000 	.word	0x40020000

08002a68 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a7e:	2101      	movs	r1, #1
 8002a80:	fa01 f202 	lsl.w	r2, r1, r2
 8002a84:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b10      	cmp	r3, #16
 8002a94:	d108      	bne.n	8002aa8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002aa6:	e007      	b.n	8002ab8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	60da      	str	r2, [r3, #12]
}
 8002ab8:	bf00      	nop
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr
	...

08002ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b08b      	sub	sp, #44	@ 0x2c
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ad6:	e169      	b.n	8002dac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ad8:	2201      	movs	r2, #1
 8002ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	69fa      	ldr	r2, [r7, #28]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	f040 8158 	bne.w	8002da6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	4a9a      	ldr	r2, [pc, #616]	@ (8002d64 <HAL_GPIO_Init+0x2a0>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d05e      	beq.n	8002bbe <HAL_GPIO_Init+0xfa>
 8002b00:	4a98      	ldr	r2, [pc, #608]	@ (8002d64 <HAL_GPIO_Init+0x2a0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d875      	bhi.n	8002bf2 <HAL_GPIO_Init+0x12e>
 8002b06:	4a98      	ldr	r2, [pc, #608]	@ (8002d68 <HAL_GPIO_Init+0x2a4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d058      	beq.n	8002bbe <HAL_GPIO_Init+0xfa>
 8002b0c:	4a96      	ldr	r2, [pc, #600]	@ (8002d68 <HAL_GPIO_Init+0x2a4>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d86f      	bhi.n	8002bf2 <HAL_GPIO_Init+0x12e>
 8002b12:	4a96      	ldr	r2, [pc, #600]	@ (8002d6c <HAL_GPIO_Init+0x2a8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d052      	beq.n	8002bbe <HAL_GPIO_Init+0xfa>
 8002b18:	4a94      	ldr	r2, [pc, #592]	@ (8002d6c <HAL_GPIO_Init+0x2a8>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d869      	bhi.n	8002bf2 <HAL_GPIO_Init+0x12e>
 8002b1e:	4a94      	ldr	r2, [pc, #592]	@ (8002d70 <HAL_GPIO_Init+0x2ac>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d04c      	beq.n	8002bbe <HAL_GPIO_Init+0xfa>
 8002b24:	4a92      	ldr	r2, [pc, #584]	@ (8002d70 <HAL_GPIO_Init+0x2ac>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d863      	bhi.n	8002bf2 <HAL_GPIO_Init+0x12e>
 8002b2a:	4a92      	ldr	r2, [pc, #584]	@ (8002d74 <HAL_GPIO_Init+0x2b0>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d046      	beq.n	8002bbe <HAL_GPIO_Init+0xfa>
 8002b30:	4a90      	ldr	r2, [pc, #576]	@ (8002d74 <HAL_GPIO_Init+0x2b0>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d85d      	bhi.n	8002bf2 <HAL_GPIO_Init+0x12e>
 8002b36:	2b12      	cmp	r3, #18
 8002b38:	d82a      	bhi.n	8002b90 <HAL_GPIO_Init+0xcc>
 8002b3a:	2b12      	cmp	r3, #18
 8002b3c:	d859      	bhi.n	8002bf2 <HAL_GPIO_Init+0x12e>
 8002b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b44 <HAL_GPIO_Init+0x80>)
 8002b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b44:	08002bbf 	.word	0x08002bbf
 8002b48:	08002b99 	.word	0x08002b99
 8002b4c:	08002bab 	.word	0x08002bab
 8002b50:	08002bed 	.word	0x08002bed
 8002b54:	08002bf3 	.word	0x08002bf3
 8002b58:	08002bf3 	.word	0x08002bf3
 8002b5c:	08002bf3 	.word	0x08002bf3
 8002b60:	08002bf3 	.word	0x08002bf3
 8002b64:	08002bf3 	.word	0x08002bf3
 8002b68:	08002bf3 	.word	0x08002bf3
 8002b6c:	08002bf3 	.word	0x08002bf3
 8002b70:	08002bf3 	.word	0x08002bf3
 8002b74:	08002bf3 	.word	0x08002bf3
 8002b78:	08002bf3 	.word	0x08002bf3
 8002b7c:	08002bf3 	.word	0x08002bf3
 8002b80:	08002bf3 	.word	0x08002bf3
 8002b84:	08002bf3 	.word	0x08002bf3
 8002b88:	08002ba1 	.word	0x08002ba1
 8002b8c:	08002bb5 	.word	0x08002bb5
 8002b90:	4a79      	ldr	r2, [pc, #484]	@ (8002d78 <HAL_GPIO_Init+0x2b4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d013      	beq.n	8002bbe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b96:	e02c      	b.n	8002bf2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	623b      	str	r3, [r7, #32]
          break;
 8002b9e:	e029      	b.n	8002bf4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	623b      	str	r3, [r7, #32]
          break;
 8002ba8:	e024      	b.n	8002bf4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	3308      	adds	r3, #8
 8002bb0:	623b      	str	r3, [r7, #32]
          break;
 8002bb2:	e01f      	b.n	8002bf4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	330c      	adds	r3, #12
 8002bba:	623b      	str	r3, [r7, #32]
          break;
 8002bbc:	e01a      	b.n	8002bf4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d102      	bne.n	8002bcc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002bc6:	2304      	movs	r3, #4
 8002bc8:	623b      	str	r3, [r7, #32]
          break;
 8002bca:	e013      	b.n	8002bf4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d105      	bne.n	8002be0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bd4:	2308      	movs	r3, #8
 8002bd6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	69fa      	ldr	r2, [r7, #28]
 8002bdc:	611a      	str	r2, [r3, #16]
          break;
 8002bde:	e009      	b.n	8002bf4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002be0:	2308      	movs	r3, #8
 8002be2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	69fa      	ldr	r2, [r7, #28]
 8002be8:	615a      	str	r2, [r3, #20]
          break;
 8002bea:	e003      	b.n	8002bf4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002bec:	2300      	movs	r3, #0
 8002bee:	623b      	str	r3, [r7, #32]
          break;
 8002bf0:	e000      	b.n	8002bf4 <HAL_GPIO_Init+0x130>
          break;
 8002bf2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	2bff      	cmp	r3, #255	@ 0xff
 8002bf8:	d801      	bhi.n	8002bfe <HAL_GPIO_Init+0x13a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	e001      	b.n	8002c02 <HAL_GPIO_Init+0x13e>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3304      	adds	r3, #4
 8002c02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	2bff      	cmp	r3, #255	@ 0xff
 8002c08:	d802      	bhi.n	8002c10 <HAL_GPIO_Init+0x14c>
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	e002      	b.n	8002c16 <HAL_GPIO_Init+0x152>
 8002c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c12:	3b08      	subs	r3, #8
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	210f      	movs	r1, #15
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	fa01 f303 	lsl.w	r3, r1, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	401a      	ands	r2, r3
 8002c28:	6a39      	ldr	r1, [r7, #32]
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c30:	431a      	orrs	r2, r3
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 80b1 	beq.w	8002da6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c44:	4b4d      	ldr	r3, [pc, #308]	@ (8002d7c <HAL_GPIO_Init+0x2b8>)
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	4a4c      	ldr	r2, [pc, #304]	@ (8002d7c <HAL_GPIO_Init+0x2b8>)
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	6193      	str	r3, [r2, #24]
 8002c50:	4b4a      	ldr	r3, [pc, #296]	@ (8002d7c <HAL_GPIO_Init+0x2b8>)
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	60bb      	str	r3, [r7, #8]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c5c:	4a48      	ldr	r2, [pc, #288]	@ (8002d80 <HAL_GPIO_Init+0x2bc>)
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c60:	089b      	lsrs	r3, r3, #2
 8002c62:	3302      	adds	r3, #2
 8002c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6c:	f003 0303 	and.w	r3, r3, #3
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	220f      	movs	r2, #15
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a40      	ldr	r2, [pc, #256]	@ (8002d84 <HAL_GPIO_Init+0x2c0>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d013      	beq.n	8002cb0 <HAL_GPIO_Init+0x1ec>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a3f      	ldr	r2, [pc, #252]	@ (8002d88 <HAL_GPIO_Init+0x2c4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d00d      	beq.n	8002cac <HAL_GPIO_Init+0x1e8>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a3e      	ldr	r2, [pc, #248]	@ (8002d8c <HAL_GPIO_Init+0x2c8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d007      	beq.n	8002ca8 <HAL_GPIO_Init+0x1e4>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a3d      	ldr	r2, [pc, #244]	@ (8002d90 <HAL_GPIO_Init+0x2cc>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d101      	bne.n	8002ca4 <HAL_GPIO_Init+0x1e0>
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e006      	b.n	8002cb2 <HAL_GPIO_Init+0x1ee>
 8002ca4:	2304      	movs	r3, #4
 8002ca6:	e004      	b.n	8002cb2 <HAL_GPIO_Init+0x1ee>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e002      	b.n	8002cb2 <HAL_GPIO_Init+0x1ee>
 8002cac:	2301      	movs	r3, #1
 8002cae:	e000      	b.n	8002cb2 <HAL_GPIO_Init+0x1ee>
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cb4:	f002 0203 	and.w	r2, r2, #3
 8002cb8:	0092      	lsls	r2, r2, #2
 8002cba:	4093      	lsls	r3, r2
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002cc2:	492f      	ldr	r1, [pc, #188]	@ (8002d80 <HAL_GPIO_Init+0x2bc>)
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc6:	089b      	lsrs	r3, r3, #2
 8002cc8:	3302      	adds	r3, #2
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d006      	beq.n	8002cea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002cdc:	4b2d      	ldr	r3, [pc, #180]	@ (8002d94 <HAL_GPIO_Init+0x2d0>)
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	492c      	ldr	r1, [pc, #176]	@ (8002d94 <HAL_GPIO_Init+0x2d0>)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	608b      	str	r3, [r1, #8]
 8002ce8:	e006      	b.n	8002cf8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002cea:	4b2a      	ldr	r3, [pc, #168]	@ (8002d94 <HAL_GPIO_Init+0x2d0>)
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	4928      	ldr	r1, [pc, #160]	@ (8002d94 <HAL_GPIO_Init+0x2d0>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d006      	beq.n	8002d12 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d04:	4b23      	ldr	r3, [pc, #140]	@ (8002d94 <HAL_GPIO_Init+0x2d0>)
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	4922      	ldr	r1, [pc, #136]	@ (8002d94 <HAL_GPIO_Init+0x2d0>)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	60cb      	str	r3, [r1, #12]
 8002d10:	e006      	b.n	8002d20 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d12:	4b20      	ldr	r3, [pc, #128]	@ (8002d94 <HAL_GPIO_Init+0x2d0>)
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	491e      	ldr	r1, [pc, #120]	@ (8002d94 <HAL_GPIO_Init+0x2d0>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d006      	beq.n	8002d3a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d2c:	4b19      	ldr	r3, [pc, #100]	@ (8002d94 <HAL_GPIO_Init+0x2d0>)
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	4918      	ldr	r1, [pc, #96]	@ (8002d94 <HAL_GPIO_Init+0x2d0>)
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	604b      	str	r3, [r1, #4]
 8002d38:	e006      	b.n	8002d48 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d3a:	4b16      	ldr	r3, [pc, #88]	@ (8002d94 <HAL_GPIO_Init+0x2d0>)
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	43db      	mvns	r3, r3
 8002d42:	4914      	ldr	r1, [pc, #80]	@ (8002d94 <HAL_GPIO_Init+0x2d0>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d021      	beq.n	8002d98 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d54:	4b0f      	ldr	r3, [pc, #60]	@ (8002d94 <HAL_GPIO_Init+0x2d0>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	490e      	ldr	r1, [pc, #56]	@ (8002d94 <HAL_GPIO_Init+0x2d0>)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	600b      	str	r3, [r1, #0]
 8002d60:	e021      	b.n	8002da6 <HAL_GPIO_Init+0x2e2>
 8002d62:	bf00      	nop
 8002d64:	10320000 	.word	0x10320000
 8002d68:	10310000 	.word	0x10310000
 8002d6c:	10220000 	.word	0x10220000
 8002d70:	10210000 	.word	0x10210000
 8002d74:	10120000 	.word	0x10120000
 8002d78:	10110000 	.word	0x10110000
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	40010000 	.word	0x40010000
 8002d84:	40010800 	.word	0x40010800
 8002d88:	40010c00 	.word	0x40010c00
 8002d8c:	40011000 	.word	0x40011000
 8002d90:	40011400 	.word	0x40011400
 8002d94:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d98:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc8 <HAL_GPIO_Init+0x304>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	4909      	ldr	r1, [pc, #36]	@ (8002dc8 <HAL_GPIO_Init+0x304>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da8:	3301      	adds	r3, #1
 8002daa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db2:	fa22 f303 	lsr.w	r3, r2, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f47f ae8e 	bne.w	8002ad8 <HAL_GPIO_Init+0x14>
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	bf00      	nop
 8002dc0:	372c      	adds	r7, #44	@ 0x2c
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr
 8002dc8:	40010400 	.word	0x40010400

08002dcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e272      	b.n	80032c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 8087 	beq.w	8002efa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dec:	4b92      	ldr	r3, [pc, #584]	@ (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 030c 	and.w	r3, r3, #12
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	d00c      	beq.n	8002e12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002df8:	4b8f      	ldr	r3, [pc, #572]	@ (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 030c 	and.w	r3, r3, #12
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d112      	bne.n	8002e2a <HAL_RCC_OscConfig+0x5e>
 8002e04:	4b8c      	ldr	r3, [pc, #560]	@ (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e10:	d10b      	bne.n	8002e2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e12:	4b89      	ldr	r3, [pc, #548]	@ (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d06c      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x12c>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d168      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e24c      	b.n	80032c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e32:	d106      	bne.n	8002e42 <HAL_RCC_OscConfig+0x76>
 8002e34:	4b80      	ldr	r3, [pc, #512]	@ (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a7f      	ldr	r2, [pc, #508]	@ (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002e3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e3e:	6013      	str	r3, [r2, #0]
 8002e40:	e02e      	b.n	8002ea0 <HAL_RCC_OscConfig+0xd4>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10c      	bne.n	8002e64 <HAL_RCC_OscConfig+0x98>
 8002e4a:	4b7b      	ldr	r3, [pc, #492]	@ (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a7a      	ldr	r2, [pc, #488]	@ (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002e50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	4b78      	ldr	r3, [pc, #480]	@ (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a77      	ldr	r2, [pc, #476]	@ (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002e5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	e01d      	b.n	8002ea0 <HAL_RCC_OscConfig+0xd4>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e6c:	d10c      	bne.n	8002e88 <HAL_RCC_OscConfig+0xbc>
 8002e6e:	4b72      	ldr	r3, [pc, #456]	@ (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a71      	ldr	r2, [pc, #452]	@ (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002e74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	4b6f      	ldr	r3, [pc, #444]	@ (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a6e      	ldr	r2, [pc, #440]	@ (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002e80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	e00b      	b.n	8002ea0 <HAL_RCC_OscConfig+0xd4>
 8002e88:	4b6b      	ldr	r3, [pc, #428]	@ (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a6a      	ldr	r2, [pc, #424]	@ (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002e8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e92:	6013      	str	r3, [r2, #0]
 8002e94:	4b68      	ldr	r3, [pc, #416]	@ (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a67      	ldr	r2, [pc, #412]	@ (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002e9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d013      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea8:	f7ff fa52 	bl	8002350 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb0:	f7ff fa4e 	bl	8002350 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b64      	cmp	r3, #100	@ 0x64
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e200      	b.n	80032c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec2:	4b5d      	ldr	r3, [pc, #372]	@ (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f0      	beq.n	8002eb0 <HAL_RCC_OscConfig+0xe4>
 8002ece:	e014      	b.n	8002efa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed0:	f7ff fa3e 	bl	8002350 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed8:	f7ff fa3a 	bl	8002350 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b64      	cmp	r3, #100	@ 0x64
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e1ec      	b.n	80032c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eea:	4b53      	ldr	r3, [pc, #332]	@ (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f0      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x10c>
 8002ef6:	e000      	b.n	8002efa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d063      	beq.n	8002fce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f06:	4b4c      	ldr	r3, [pc, #304]	@ (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 030c 	and.w	r3, r3, #12
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00b      	beq.n	8002f2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f12:	4b49      	ldr	r3, [pc, #292]	@ (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f003 030c 	and.w	r3, r3, #12
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d11c      	bne.n	8002f58 <HAL_RCC_OscConfig+0x18c>
 8002f1e:	4b46      	ldr	r3, [pc, #280]	@ (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d116      	bne.n	8002f58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f2a:	4b43      	ldr	r3, [pc, #268]	@ (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d005      	beq.n	8002f42 <HAL_RCC_OscConfig+0x176>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d001      	beq.n	8002f42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e1c0      	b.n	80032c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f42:	4b3d      	ldr	r3, [pc, #244]	@ (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	4939      	ldr	r1, [pc, #228]	@ (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f56:	e03a      	b.n	8002fce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d020      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f60:	4b36      	ldr	r3, [pc, #216]	@ (800303c <HAL_RCC_OscConfig+0x270>)
 8002f62:	2201      	movs	r2, #1
 8002f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f66:	f7ff f9f3 	bl	8002350 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f6e:	f7ff f9ef 	bl	8002350 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e1a1      	b.n	80032c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f80:	4b2d      	ldr	r3, [pc, #180]	@ (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0f0      	beq.n	8002f6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f8c:	4b2a      	ldr	r3, [pc, #168]	@ (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	4927      	ldr	r1, [pc, #156]	@ (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	600b      	str	r3, [r1, #0]
 8002fa0:	e015      	b.n	8002fce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fa2:	4b26      	ldr	r3, [pc, #152]	@ (800303c <HAL_RCC_OscConfig+0x270>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa8:	f7ff f9d2 	bl	8002350 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb0:	f7ff f9ce 	bl	8002350 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e180      	b.n	80032c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8003038 <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f0      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d03a      	beq.n	8003050 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d019      	beq.n	8003016 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fe2:	4b17      	ldr	r3, [pc, #92]	@ (8003040 <HAL_RCC_OscConfig+0x274>)
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe8:	f7ff f9b2 	bl	8002350 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff0:	f7ff f9ae 	bl	8002350 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e160      	b.n	80032c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003002:	4b0d      	ldr	r3, [pc, #52]	@ (8003038 <HAL_RCC_OscConfig+0x26c>)
 8003004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0f0      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800300e:	2001      	movs	r0, #1
 8003010:	f000 face 	bl	80035b0 <RCC_Delay>
 8003014:	e01c      	b.n	8003050 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003016:	4b0a      	ldr	r3, [pc, #40]	@ (8003040 <HAL_RCC_OscConfig+0x274>)
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301c:	f7ff f998 	bl	8002350 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003022:	e00f      	b.n	8003044 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003024:	f7ff f994 	bl	8002350 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d908      	bls.n	8003044 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e146      	b.n	80032c4 <HAL_RCC_OscConfig+0x4f8>
 8003036:	bf00      	nop
 8003038:	40021000 	.word	0x40021000
 800303c:	42420000 	.word	0x42420000
 8003040:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003044:	4b92      	ldr	r3, [pc, #584]	@ (8003290 <HAL_RCC_OscConfig+0x4c4>)
 8003046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1e9      	bne.n	8003024 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 80a6 	beq.w	80031aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800305e:	2300      	movs	r3, #0
 8003060:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003062:	4b8b      	ldr	r3, [pc, #556]	@ (8003290 <HAL_RCC_OscConfig+0x4c4>)
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10d      	bne.n	800308a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800306e:	4b88      	ldr	r3, [pc, #544]	@ (8003290 <HAL_RCC_OscConfig+0x4c4>)
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	4a87      	ldr	r2, [pc, #540]	@ (8003290 <HAL_RCC_OscConfig+0x4c4>)
 8003074:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003078:	61d3      	str	r3, [r2, #28]
 800307a:	4b85      	ldr	r3, [pc, #532]	@ (8003290 <HAL_RCC_OscConfig+0x4c4>)
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003082:	60bb      	str	r3, [r7, #8]
 8003084:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003086:	2301      	movs	r3, #1
 8003088:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800308a:	4b82      	ldr	r3, [pc, #520]	@ (8003294 <HAL_RCC_OscConfig+0x4c8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003092:	2b00      	cmp	r3, #0
 8003094:	d118      	bne.n	80030c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003096:	4b7f      	ldr	r3, [pc, #508]	@ (8003294 <HAL_RCC_OscConfig+0x4c8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a7e      	ldr	r2, [pc, #504]	@ (8003294 <HAL_RCC_OscConfig+0x4c8>)
 800309c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030a2:	f7ff f955 	bl	8002350 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030aa:	f7ff f951 	bl	8002350 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b64      	cmp	r3, #100	@ 0x64
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e103      	b.n	80032c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030bc:	4b75      	ldr	r3, [pc, #468]	@ (8003294 <HAL_RCC_OscConfig+0x4c8>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0f0      	beq.n	80030aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d106      	bne.n	80030de <HAL_RCC_OscConfig+0x312>
 80030d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003290 <HAL_RCC_OscConfig+0x4c4>)
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	4a6e      	ldr	r2, [pc, #440]	@ (8003290 <HAL_RCC_OscConfig+0x4c4>)
 80030d6:	f043 0301 	orr.w	r3, r3, #1
 80030da:	6213      	str	r3, [r2, #32]
 80030dc:	e02d      	b.n	800313a <HAL_RCC_OscConfig+0x36e>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10c      	bne.n	8003100 <HAL_RCC_OscConfig+0x334>
 80030e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003290 <HAL_RCC_OscConfig+0x4c4>)
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	4a69      	ldr	r2, [pc, #420]	@ (8003290 <HAL_RCC_OscConfig+0x4c4>)
 80030ec:	f023 0301 	bic.w	r3, r3, #1
 80030f0:	6213      	str	r3, [r2, #32]
 80030f2:	4b67      	ldr	r3, [pc, #412]	@ (8003290 <HAL_RCC_OscConfig+0x4c4>)
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	4a66      	ldr	r2, [pc, #408]	@ (8003290 <HAL_RCC_OscConfig+0x4c4>)
 80030f8:	f023 0304 	bic.w	r3, r3, #4
 80030fc:	6213      	str	r3, [r2, #32]
 80030fe:	e01c      	b.n	800313a <HAL_RCC_OscConfig+0x36e>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	2b05      	cmp	r3, #5
 8003106:	d10c      	bne.n	8003122 <HAL_RCC_OscConfig+0x356>
 8003108:	4b61      	ldr	r3, [pc, #388]	@ (8003290 <HAL_RCC_OscConfig+0x4c4>)
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	4a60      	ldr	r2, [pc, #384]	@ (8003290 <HAL_RCC_OscConfig+0x4c4>)
 800310e:	f043 0304 	orr.w	r3, r3, #4
 8003112:	6213      	str	r3, [r2, #32]
 8003114:	4b5e      	ldr	r3, [pc, #376]	@ (8003290 <HAL_RCC_OscConfig+0x4c4>)
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	4a5d      	ldr	r2, [pc, #372]	@ (8003290 <HAL_RCC_OscConfig+0x4c4>)
 800311a:	f043 0301 	orr.w	r3, r3, #1
 800311e:	6213      	str	r3, [r2, #32]
 8003120:	e00b      	b.n	800313a <HAL_RCC_OscConfig+0x36e>
 8003122:	4b5b      	ldr	r3, [pc, #364]	@ (8003290 <HAL_RCC_OscConfig+0x4c4>)
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	4a5a      	ldr	r2, [pc, #360]	@ (8003290 <HAL_RCC_OscConfig+0x4c4>)
 8003128:	f023 0301 	bic.w	r3, r3, #1
 800312c:	6213      	str	r3, [r2, #32]
 800312e:	4b58      	ldr	r3, [pc, #352]	@ (8003290 <HAL_RCC_OscConfig+0x4c4>)
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	4a57      	ldr	r2, [pc, #348]	@ (8003290 <HAL_RCC_OscConfig+0x4c4>)
 8003134:	f023 0304 	bic.w	r3, r3, #4
 8003138:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d015      	beq.n	800316e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003142:	f7ff f905 	bl	8002350 <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003148:	e00a      	b.n	8003160 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800314a:	f7ff f901 	bl	8002350 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003158:	4293      	cmp	r3, r2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e0b1      	b.n	80032c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003160:	4b4b      	ldr	r3, [pc, #300]	@ (8003290 <HAL_RCC_OscConfig+0x4c4>)
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0ee      	beq.n	800314a <HAL_RCC_OscConfig+0x37e>
 800316c:	e014      	b.n	8003198 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800316e:	f7ff f8ef 	bl	8002350 <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003174:	e00a      	b.n	800318c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003176:	f7ff f8eb 	bl	8002350 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003184:	4293      	cmp	r3, r2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e09b      	b.n	80032c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800318c:	4b40      	ldr	r3, [pc, #256]	@ (8003290 <HAL_RCC_OscConfig+0x4c4>)
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1ee      	bne.n	8003176 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003198:	7dfb      	ldrb	r3, [r7, #23]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d105      	bne.n	80031aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800319e:	4b3c      	ldr	r3, [pc, #240]	@ (8003290 <HAL_RCC_OscConfig+0x4c4>)
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	4a3b      	ldr	r2, [pc, #236]	@ (8003290 <HAL_RCC_OscConfig+0x4c4>)
 80031a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 8087 	beq.w	80032c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031b4:	4b36      	ldr	r3, [pc, #216]	@ (8003290 <HAL_RCC_OscConfig+0x4c4>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f003 030c 	and.w	r3, r3, #12
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d061      	beq.n	8003284 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d146      	bne.n	8003256 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c8:	4b33      	ldr	r3, [pc, #204]	@ (8003298 <HAL_RCC_OscConfig+0x4cc>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ce:	f7ff f8bf 	bl	8002350 <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d6:	f7ff f8bb 	bl	8002350 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e06d      	b.n	80032c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031e8:	4b29      	ldr	r3, [pc, #164]	@ (8003290 <HAL_RCC_OscConfig+0x4c4>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1f0      	bne.n	80031d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031fc:	d108      	bne.n	8003210 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031fe:	4b24      	ldr	r3, [pc, #144]	@ (8003290 <HAL_RCC_OscConfig+0x4c4>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	4921      	ldr	r1, [pc, #132]	@ (8003290 <HAL_RCC_OscConfig+0x4c4>)
 800320c:	4313      	orrs	r3, r2
 800320e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003210:	4b1f      	ldr	r3, [pc, #124]	@ (8003290 <HAL_RCC_OscConfig+0x4c4>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a19      	ldr	r1, [r3, #32]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003220:	430b      	orrs	r3, r1
 8003222:	491b      	ldr	r1, [pc, #108]	@ (8003290 <HAL_RCC_OscConfig+0x4c4>)
 8003224:	4313      	orrs	r3, r2
 8003226:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003228:	4b1b      	ldr	r3, [pc, #108]	@ (8003298 <HAL_RCC_OscConfig+0x4cc>)
 800322a:	2201      	movs	r2, #1
 800322c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322e:	f7ff f88f 	bl	8002350 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003236:	f7ff f88b 	bl	8002350 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e03d      	b.n	80032c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003248:	4b11      	ldr	r3, [pc, #68]	@ (8003290 <HAL_RCC_OscConfig+0x4c4>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0f0      	beq.n	8003236 <HAL_RCC_OscConfig+0x46a>
 8003254:	e035      	b.n	80032c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003256:	4b10      	ldr	r3, [pc, #64]	@ (8003298 <HAL_RCC_OscConfig+0x4cc>)
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325c:	f7ff f878 	bl	8002350 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003264:	f7ff f874 	bl	8002350 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e026      	b.n	80032c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003276:	4b06      	ldr	r3, [pc, #24]	@ (8003290 <HAL_RCC_OscConfig+0x4c4>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0x498>
 8003282:	e01e      	b.n	80032c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d107      	bne.n	800329c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e019      	b.n	80032c4 <HAL_RCC_OscConfig+0x4f8>
 8003290:	40021000 	.word	0x40021000
 8003294:	40007000 	.word	0x40007000
 8003298:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800329c:	4b0b      	ldr	r3, [pc, #44]	@ (80032cc <HAL_RCC_OscConfig+0x500>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d106      	bne.n	80032be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d001      	beq.n	80032c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e000      	b.n	80032c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40021000 	.word	0x40021000

080032d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0d0      	b.n	8003486 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032e4:	4b6a      	ldr	r3, [pc, #424]	@ (8003490 <HAL_RCC_ClockConfig+0x1c0>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d910      	bls.n	8003314 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f2:	4b67      	ldr	r3, [pc, #412]	@ (8003490 <HAL_RCC_ClockConfig+0x1c0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f023 0207 	bic.w	r2, r3, #7
 80032fa:	4965      	ldr	r1, [pc, #404]	@ (8003490 <HAL_RCC_ClockConfig+0x1c0>)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	4313      	orrs	r3, r2
 8003300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003302:	4b63      	ldr	r3, [pc, #396]	@ (8003490 <HAL_RCC_ClockConfig+0x1c0>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	d001      	beq.n	8003314 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e0b8      	b.n	8003486 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d020      	beq.n	8003362 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800332c:	4b59      	ldr	r3, [pc, #356]	@ (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	4a58      	ldr	r2, [pc, #352]	@ (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 8003332:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003336:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0308 	and.w	r3, r3, #8
 8003340:	2b00      	cmp	r3, #0
 8003342:	d005      	beq.n	8003350 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003344:	4b53      	ldr	r3, [pc, #332]	@ (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	4a52      	ldr	r2, [pc, #328]	@ (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 800334a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800334e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003350:	4b50      	ldr	r3, [pc, #320]	@ (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	494d      	ldr	r1, [pc, #308]	@ (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 800335e:	4313      	orrs	r3, r2
 8003360:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d040      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d107      	bne.n	8003386 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003376:	4b47      	ldr	r3, [pc, #284]	@ (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d115      	bne.n	80033ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e07f      	b.n	8003486 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d107      	bne.n	800339e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800338e:	4b41      	ldr	r3, [pc, #260]	@ (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d109      	bne.n	80033ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e073      	b.n	8003486 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339e:	4b3d      	ldr	r3, [pc, #244]	@ (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e06b      	b.n	8003486 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ae:	4b39      	ldr	r3, [pc, #228]	@ (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f023 0203 	bic.w	r2, r3, #3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	4936      	ldr	r1, [pc, #216]	@ (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033c0:	f7fe ffc6 	bl	8002350 <HAL_GetTick>
 80033c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c6:	e00a      	b.n	80033de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c8:	f7fe ffc2 	bl	8002350 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e053      	b.n	8003486 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033de:	4b2d      	ldr	r3, [pc, #180]	@ (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f003 020c 	and.w	r2, r3, #12
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d1eb      	bne.n	80033c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033f0:	4b27      	ldr	r3, [pc, #156]	@ (8003490 <HAL_RCC_ClockConfig+0x1c0>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d210      	bcs.n	8003420 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fe:	4b24      	ldr	r3, [pc, #144]	@ (8003490 <HAL_RCC_ClockConfig+0x1c0>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f023 0207 	bic.w	r2, r3, #7
 8003406:	4922      	ldr	r1, [pc, #136]	@ (8003490 <HAL_RCC_ClockConfig+0x1c0>)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	4313      	orrs	r3, r2
 800340c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800340e:	4b20      	ldr	r3, [pc, #128]	@ (8003490 <HAL_RCC_ClockConfig+0x1c0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	429a      	cmp	r2, r3
 800341a:	d001      	beq.n	8003420 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e032      	b.n	8003486 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b00      	cmp	r3, #0
 800342a:	d008      	beq.n	800343e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800342c:	4b19      	ldr	r3, [pc, #100]	@ (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	4916      	ldr	r1, [pc, #88]	@ (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 800343a:	4313      	orrs	r3, r2
 800343c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	2b00      	cmp	r3, #0
 8003448:	d009      	beq.n	800345e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800344a:	4b12      	ldr	r3, [pc, #72]	@ (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	490e      	ldr	r1, [pc, #56]	@ (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 800345a:	4313      	orrs	r3, r2
 800345c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800345e:	f000 f821 	bl	80034a4 <HAL_RCC_GetSysClockFreq>
 8003462:	4602      	mov	r2, r0
 8003464:	4b0b      	ldr	r3, [pc, #44]	@ (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	091b      	lsrs	r3, r3, #4
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	490a      	ldr	r1, [pc, #40]	@ (8003498 <HAL_RCC_ClockConfig+0x1c8>)
 8003470:	5ccb      	ldrb	r3, [r1, r3]
 8003472:	fa22 f303 	lsr.w	r3, r2, r3
 8003476:	4a09      	ldr	r2, [pc, #36]	@ (800349c <HAL_RCC_ClockConfig+0x1cc>)
 8003478:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800347a:	4b09      	ldr	r3, [pc, #36]	@ (80034a0 <HAL_RCC_ClockConfig+0x1d0>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f7fe ff24 	bl	80022cc <HAL_InitTick>

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40022000 	.word	0x40022000
 8003494:	40021000 	.word	0x40021000
 8003498:	08004af8 	.word	0x08004af8
 800349c:	20000000 	.word	0x20000000
 80034a0:	20000004 	.word	0x20000004

080034a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	2300      	movs	r3, #0
 80034b0:	60bb      	str	r3, [r7, #8]
 80034b2:	2300      	movs	r3, #0
 80034b4:	617b      	str	r3, [r7, #20]
 80034b6:	2300      	movs	r3, #0
 80034b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034be:	4b1e      	ldr	r3, [pc, #120]	@ (8003538 <HAL_RCC_GetSysClockFreq+0x94>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f003 030c 	and.w	r3, r3, #12
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d002      	beq.n	80034d4 <HAL_RCC_GetSysClockFreq+0x30>
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d003      	beq.n	80034da <HAL_RCC_GetSysClockFreq+0x36>
 80034d2:	e027      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034d4:	4b19      	ldr	r3, [pc, #100]	@ (800353c <HAL_RCC_GetSysClockFreq+0x98>)
 80034d6:	613b      	str	r3, [r7, #16]
      break;
 80034d8:	e027      	b.n	800352a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	0c9b      	lsrs	r3, r3, #18
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	4a17      	ldr	r2, [pc, #92]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x9c>)
 80034e4:	5cd3      	ldrb	r3, [r2, r3]
 80034e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d010      	beq.n	8003514 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034f2:	4b11      	ldr	r3, [pc, #68]	@ (8003538 <HAL_RCC_GetSysClockFreq+0x94>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	0c5b      	lsrs	r3, r3, #17
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	4a11      	ldr	r2, [pc, #68]	@ (8003544 <HAL_RCC_GetSysClockFreq+0xa0>)
 80034fe:	5cd3      	ldrb	r3, [r2, r3]
 8003500:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a0d      	ldr	r2, [pc, #52]	@ (800353c <HAL_RCC_GetSysClockFreq+0x98>)
 8003506:	fb03 f202 	mul.w	r2, r3, r2
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	e004      	b.n	800351e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a0c      	ldr	r2, [pc, #48]	@ (8003548 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003518:	fb02 f303 	mul.w	r3, r2, r3
 800351c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	613b      	str	r3, [r7, #16]
      break;
 8003522:	e002      	b.n	800352a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003524:	4b05      	ldr	r3, [pc, #20]	@ (800353c <HAL_RCC_GetSysClockFreq+0x98>)
 8003526:	613b      	str	r3, [r7, #16]
      break;
 8003528:	bf00      	nop
    }
  }
  return sysclockfreq;
 800352a:	693b      	ldr	r3, [r7, #16]
}
 800352c:	4618      	mov	r0, r3
 800352e:	371c      	adds	r7, #28
 8003530:	46bd      	mov	sp, r7
 8003532:	bc80      	pop	{r7}
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40021000 	.word	0x40021000
 800353c:	007a1200 	.word	0x007a1200
 8003540:	08004b10 	.word	0x08004b10
 8003544:	08004b20 	.word	0x08004b20
 8003548:	003d0900 	.word	0x003d0900

0800354c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003550:	4b02      	ldr	r3, [pc, #8]	@ (800355c <HAL_RCC_GetHCLKFreq+0x10>)
 8003552:	681b      	ldr	r3, [r3, #0]
}
 8003554:	4618      	mov	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr
 800355c:	20000000 	.word	0x20000000

08003560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003564:	f7ff fff2 	bl	800354c <HAL_RCC_GetHCLKFreq>
 8003568:	4602      	mov	r2, r0
 800356a:	4b05      	ldr	r3, [pc, #20]	@ (8003580 <HAL_RCC_GetPCLK1Freq+0x20>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	0a1b      	lsrs	r3, r3, #8
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	4903      	ldr	r1, [pc, #12]	@ (8003584 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003576:	5ccb      	ldrb	r3, [r1, r3]
 8003578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800357c:	4618      	mov	r0, r3
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40021000 	.word	0x40021000
 8003584:	08004b08 	.word	0x08004b08

08003588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800358c:	f7ff ffde 	bl	800354c <HAL_RCC_GetHCLKFreq>
 8003590:	4602      	mov	r2, r0
 8003592:	4b05      	ldr	r3, [pc, #20]	@ (80035a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	0adb      	lsrs	r3, r3, #11
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	4903      	ldr	r1, [pc, #12]	@ (80035ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800359e:	5ccb      	ldrb	r3, [r1, r3]
 80035a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40021000 	.word	0x40021000
 80035ac:	08004b08 	.word	0x08004b08

080035b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035b8:	4b0a      	ldr	r3, [pc, #40]	@ (80035e4 <RCC_Delay+0x34>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a0a      	ldr	r2, [pc, #40]	@ (80035e8 <RCC_Delay+0x38>)
 80035be:	fba2 2303 	umull	r2, r3, r2, r3
 80035c2:	0a5b      	lsrs	r3, r3, #9
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	fb02 f303 	mul.w	r3, r2, r3
 80035ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035cc:	bf00      	nop
  }
  while (Delay --);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	1e5a      	subs	r2, r3, #1
 80035d2:	60fa      	str	r2, [r7, #12]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1f9      	bne.n	80035cc <RCC_Delay+0x1c>
}
 80035d8:	bf00      	nop
 80035da:	bf00      	nop
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr
 80035e4:	20000000 	.word	0x20000000
 80035e8:	10624dd3 	.word	0x10624dd3

080035ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e042      	b.n	8003684 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d106      	bne.n	8003618 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7fe fd76 	bl	8002104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2224      	movs	r2, #36	@ 0x24
 800361c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800362e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 ff2f 	bl	8004494 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003644:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695a      	ldr	r2, [r3, #20]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003654:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003664:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08c      	sub	sp, #48	@ 0x30
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	4613      	mov	r3, r2
 8003698:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	d156      	bne.n	8003754 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <HAL_UART_Transmit_DMA+0x26>
 80036ac:	88fb      	ldrh	r3, [r7, #6]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e04f      	b.n	8003756 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	88fa      	ldrh	r2, [r7, #6]
 80036c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	88fa      	ldrh	r2, [r7, #6]
 80036c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2221      	movs	r2, #33	@ 0x21
 80036d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036da:	4a21      	ldr	r2, [pc, #132]	@ (8003760 <HAL_UART_Transmit_DMA+0xd4>)
 80036dc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e2:	4a20      	ldr	r2, [pc, #128]	@ (8003764 <HAL_UART_Transmit_DMA+0xd8>)
 80036e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ea:	4a1f      	ldr	r2, [pc, #124]	@ (8003768 <HAL_UART_Transmit_DMA+0xdc>)
 80036ec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f2:	2200      	movs	r2, #0
 80036f4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80036f6:	f107 0308 	add.w	r3, r7, #8
 80036fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003702:	6819      	ldr	r1, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	3304      	adds	r3, #4
 800370a:	461a      	mov	r2, r3
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	f7fe ff91 	bl	8002634 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800371a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3314      	adds	r3, #20
 8003722:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	e853 3f00 	ldrex	r3, [r3]
 800372a:	617b      	str	r3, [r7, #20]
   return(result);
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003732:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	3314      	adds	r3, #20
 800373a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800373c:	627a      	str	r2, [r7, #36]	@ 0x24
 800373e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003740:	6a39      	ldr	r1, [r7, #32]
 8003742:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003744:	e841 2300 	strex	r3, r2, [r1]
 8003748:	61fb      	str	r3, [r7, #28]
   return(result);
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1e5      	bne.n	800371c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003750:	2300      	movs	r3, #0
 8003752:	e000      	b.n	8003756 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003754:	2302      	movs	r3, #2
  }
}
 8003756:	4618      	mov	r0, r3
 8003758:	3730      	adds	r7, #48	@ 0x30
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	08003d29 	.word	0x08003d29
 8003764:	08003dc3 	.word	0x08003dc3
 8003768:	08003f47 	.word	0x08003f47

0800376c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	4613      	mov	r3, r2
 8003778:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b20      	cmp	r3, #32
 8003784:	d112      	bne.n	80037ac <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <HAL_UART_Receive_DMA+0x26>
 800378c:	88fb      	ldrh	r3, [r7, #6]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e00b      	b.n	80037ae <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800379c:	88fb      	ldrh	r3, [r7, #6]
 800379e:	461a      	mov	r2, r3
 80037a0:	68b9      	ldr	r1, [r7, #8]
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 fc1a 	bl	8003fdc <UART_Start_Receive_DMA>
 80037a8:	4603      	mov	r3, r0
 80037aa:	e000      	b.n	80037ae <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80037ac:	2302      	movs	r3, #2
  }
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b0ba      	sub	sp, #232	@ 0xe8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80037de:	2300      	movs	r3, #0
 80037e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80037e4:	2300      	movs	r3, #0
 80037e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80037f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10f      	bne.n	800381e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003802:	f003 0320 	and.w	r3, r3, #32
 8003806:	2b00      	cmp	r3, #0
 8003808:	d009      	beq.n	800381e <HAL_UART_IRQHandler+0x66>
 800380a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800380e:	f003 0320 	and.w	r3, r3, #32
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fd7e 	bl	8004318 <UART_Receive_IT>
      return;
 800381c:	e25b      	b.n	8003cd6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800381e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 80de 	beq.w	80039e4 <HAL_UART_IRQHandler+0x22c>
 8003828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	d106      	bne.n	8003842 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003838:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 80d1 	beq.w	80039e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00b      	beq.n	8003866 <HAL_UART_IRQHandler+0xae>
 800384e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003856:	2b00      	cmp	r3, #0
 8003858:	d005      	beq.n	8003866 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800385e:	f043 0201 	orr.w	r2, r3, #1
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800386a:	f003 0304 	and.w	r3, r3, #4
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00b      	beq.n	800388a <HAL_UART_IRQHandler+0xd2>
 8003872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d005      	beq.n	800388a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003882:	f043 0202 	orr.w	r2, r3, #2
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800388a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00b      	beq.n	80038ae <HAL_UART_IRQHandler+0xf6>
 8003896:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d005      	beq.n	80038ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a6:	f043 0204 	orr.w	r2, r3, #4
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80038ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d011      	beq.n	80038de <HAL_UART_IRQHandler+0x126>
 80038ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d105      	bne.n	80038d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80038c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d005      	beq.n	80038de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d6:	f043 0208 	orr.w	r2, r3, #8
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 81f2 	beq.w	8003ccc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038ec:	f003 0320 	and.w	r3, r3, #32
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d008      	beq.n	8003906 <HAL_UART_IRQHandler+0x14e>
 80038f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038f8:	f003 0320 	and.w	r3, r3, #32
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 fd09 	bl	8004318 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003910:	2b00      	cmp	r3, #0
 8003912:	bf14      	ite	ne
 8003914:	2301      	movne	r3, #1
 8003916:	2300      	moveq	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	2b00      	cmp	r3, #0
 8003928:	d103      	bne.n	8003932 <HAL_UART_IRQHandler+0x17a>
 800392a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800392e:	2b00      	cmp	r3, #0
 8003930:	d04f      	beq.n	80039d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 fc13 	bl	800415e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003942:	2b00      	cmp	r3, #0
 8003944:	d041      	beq.n	80039ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	3314      	adds	r3, #20
 800394c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003950:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003954:	e853 3f00 	ldrex	r3, [r3]
 8003958:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800395c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003960:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003964:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	3314      	adds	r3, #20
 800396e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003972:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003976:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800397e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003982:	e841 2300 	strex	r3, r2, [r1]
 8003986:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800398a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1d9      	bne.n	8003946 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003996:	2b00      	cmp	r3, #0
 8003998:	d013      	beq.n	80039c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399e:	4a7e      	ldr	r2, [pc, #504]	@ (8003b98 <HAL_UART_IRQHandler+0x3e0>)
 80039a0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fe fee0 	bl	800276c <HAL_DMA_Abort_IT>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d016      	beq.n	80039e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80039bc:	4610      	mov	r0, r2
 80039be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c0:	e00e      	b.n	80039e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f99c 	bl	8003d00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c8:	e00a      	b.n	80039e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f998 	bl	8003d00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d0:	e006      	b.n	80039e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f994 	bl	8003d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80039de:	e175      	b.n	8003ccc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e0:	bf00      	nop
    return;
 80039e2:	e173      	b.n	8003ccc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	f040 814f 	bne.w	8003c8c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80039ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039f2:	f003 0310 	and.w	r3, r3, #16
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 8148 	beq.w	8003c8c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80039fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a00:	f003 0310 	and.w	r3, r3, #16
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 8141 	beq.w	8003c8c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	60bb      	str	r3, [r7, #8]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	60bb      	str	r3, [r7, #8]
 8003a1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 80b6 	beq.w	8003b9c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 8145 	beq.w	8003cd0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	f080 813e 	bcs.w	8003cd0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a5a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	2b20      	cmp	r3, #32
 8003a64:	f000 8088 	beq.w	8003b78 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	330c      	adds	r3, #12
 8003a6e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a76:	e853 3f00 	ldrex	r3, [r3]
 8003a7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003a7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a82:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a86:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	330c      	adds	r3, #12
 8003a90:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003a94:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003aa0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003aa4:	e841 2300 	strex	r3, r2, [r1]
 8003aa8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003aac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1d9      	bne.n	8003a68 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3314      	adds	r3, #20
 8003aba:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003abe:	e853 3f00 	ldrex	r3, [r3]
 8003ac2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003ac4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ac6:	f023 0301 	bic.w	r3, r3, #1
 8003aca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3314      	adds	r3, #20
 8003ad4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ad8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003adc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ade:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003ae0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003ae4:	e841 2300 	strex	r3, r2, [r1]
 8003ae8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003aea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1e1      	bne.n	8003ab4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	3314      	adds	r3, #20
 8003af6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003afa:	e853 3f00 	ldrex	r3, [r3]
 8003afe:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003b00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	3314      	adds	r3, #20
 8003b10:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003b14:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b16:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b18:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003b1a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b1c:	e841 2300 	strex	r3, r2, [r1]
 8003b20:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003b22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1e3      	bne.n	8003af0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	330c      	adds	r3, #12
 8003b3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b40:	e853 3f00 	ldrex	r3, [r3]
 8003b44:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b48:	f023 0310 	bic.w	r3, r3, #16
 8003b4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	330c      	adds	r3, #12
 8003b56:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003b5a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003b5c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b60:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b62:	e841 2300 	strex	r3, r2, [r1]
 8003b66:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1e3      	bne.n	8003b36 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fe fdbe 	bl	80026f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f8bf 	bl	8003d12 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b94:	e09c      	b.n	8003cd0 <HAL_UART_IRQHandler+0x518>
 8003b96:	bf00      	nop
 8003b98:	08004223 	.word	0x08004223
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 808e 	beq.w	8003cd4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003bb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 8089 	beq.w	8003cd4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	330c      	adds	r3, #12
 8003bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bcc:	e853 3f00 	ldrex	r3, [r3]
 8003bd0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bd8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	330c      	adds	r3, #12
 8003be2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003be6:	647a      	str	r2, [r7, #68]	@ 0x44
 8003be8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bee:	e841 2300 	strex	r3, r2, [r1]
 8003bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003bf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1e3      	bne.n	8003bc2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	3314      	adds	r3, #20
 8003c00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c04:	e853 3f00 	ldrex	r3, [r3]
 8003c08:	623b      	str	r3, [r7, #32]
   return(result);
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	f023 0301 	bic.w	r3, r3, #1
 8003c10:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3314      	adds	r3, #20
 8003c1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003c1e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c26:	e841 2300 	strex	r3, r2, [r1]
 8003c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1e3      	bne.n	8003bfa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2220      	movs	r2, #32
 8003c36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	330c      	adds	r3, #12
 8003c46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	e853 3f00 	ldrex	r3, [r3]
 8003c4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f023 0310 	bic.w	r3, r3, #16
 8003c56:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	330c      	adds	r3, #12
 8003c60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003c64:	61fa      	str	r2, [r7, #28]
 8003c66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c68:	69b9      	ldr	r1, [r7, #24]
 8003c6a:	69fa      	ldr	r2, [r7, #28]
 8003c6c:	e841 2300 	strex	r3, r2, [r1]
 8003c70:	617b      	str	r3, [r7, #20]
   return(result);
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1e3      	bne.n	8003c40 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c82:	4619      	mov	r1, r3
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f844 	bl	8003d12 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c8a:	e023      	b.n	8003cd4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d009      	beq.n	8003cac <HAL_UART_IRQHandler+0x4f4>
 8003c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d003      	beq.n	8003cac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 fad0 	bl	800424a <UART_Transmit_IT>
    return;
 8003caa:	e014      	b.n	8003cd6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00e      	beq.n	8003cd6 <HAL_UART_IRQHandler+0x51e>
 8003cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d008      	beq.n	8003cd6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fb0f 	bl	80042e8 <UART_EndTransmit_IT>
    return;
 8003cca:	e004      	b.n	8003cd6 <HAL_UART_IRQHandler+0x51e>
    return;
 8003ccc:	bf00      	nop
 8003cce:	e002      	b.n	8003cd6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003cd0:	bf00      	nop
 8003cd2:	e000      	b.n	8003cd6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003cd4:	bf00      	nop
  }
}
 8003cd6:	37e8      	adds	r7, #232	@ 0xe8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bc80      	pop	{r7}
 8003cec:	4770      	bx	lr

08003cee <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr

08003d00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bc80      	pop	{r7}
 8003d10:	4770      	bx	lr

08003d12 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d1e:	bf00      	nop
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr

08003d28 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b090      	sub	sp, #64	@ 0x40
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0320 	and.w	r3, r3, #32
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d137      	bne.n	8003db4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003d44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d46:	2200      	movs	r2, #0
 8003d48:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3314      	adds	r3, #20
 8003d50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d54:	e853 3f00 	ldrex	r3, [r3]
 8003d58:	623b      	str	r3, [r7, #32]
   return(result);
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3314      	adds	r3, #20
 8003d68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003d6a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d72:	e841 2300 	strex	r3, r2, [r1]
 8003d76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1e5      	bne.n	8003d4a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	330c      	adds	r3, #12
 8003d84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	e853 3f00 	ldrex	r3, [r3]
 8003d8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d94:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	330c      	adds	r3, #12
 8003d9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d9e:	61fa      	str	r2, [r7, #28]
 8003da0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da2:	69b9      	ldr	r1, [r7, #24]
 8003da4:	69fa      	ldr	r2, [r7, #28]
 8003da6:	e841 2300 	strex	r3, r2, [r1]
 8003daa:	617b      	str	r3, [r7, #20]
   return(result);
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1e5      	bne.n	8003d7e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003db2:	e002      	b.n	8003dba <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003db4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003db6:	f7fd fb5d 	bl	8001474 <HAL_UART_TxCpltCallback>
}
 8003dba:	bf00      	nop
 8003dbc:	3740      	adds	r7, #64	@ 0x40
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b084      	sub	sp, #16
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dce:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f7ff ff83 	bl	8003cdc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dd6:	bf00      	nop
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b09c      	sub	sp, #112	@ 0x70
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dea:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0320 	and.w	r3, r3, #32
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d172      	bne.n	8003ee0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003dfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	330c      	adds	r3, #12
 8003e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e0a:	e853 3f00 	ldrex	r3, [r3]
 8003e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e16:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	330c      	adds	r3, #12
 8003e1e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003e20:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003e22:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e26:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e28:	e841 2300 	strex	r3, r2, [r1]
 8003e2c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1e5      	bne.n	8003e00 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	3314      	adds	r3, #20
 8003e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e3e:	e853 3f00 	ldrex	r3, [r3]
 8003e42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e46:	f023 0301 	bic.w	r3, r3, #1
 8003e4a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3314      	adds	r3, #20
 8003e52:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003e54:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e56:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e5c:	e841 2300 	strex	r3, r2, [r1]
 8003e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1e5      	bne.n	8003e34 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3314      	adds	r3, #20
 8003e6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e72:	e853 3f00 	ldrex	r3, [r3]
 8003e76:	623b      	str	r3, [r7, #32]
   return(result);
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e7e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	3314      	adds	r3, #20
 8003e86:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003e88:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e90:	e841 2300 	strex	r3, r2, [r1]
 8003e94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1e5      	bne.n	8003e68 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ea4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d119      	bne.n	8003ee0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	330c      	adds	r3, #12
 8003eb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	e853 3f00 	ldrex	r3, [r3]
 8003eba:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f023 0310 	bic.w	r3, r3, #16
 8003ec2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ec4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	330c      	adds	r3, #12
 8003eca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003ecc:	61fa      	str	r2, [r7, #28]
 8003ece:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed0:	69b9      	ldr	r1, [r7, #24]
 8003ed2:	69fa      	ldr	r2, [r7, #28]
 8003ed4:	e841 2300 	strex	r3, r2, [r1]
 8003ed8:	617b      	str	r3, [r7, #20]
   return(result);
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1e5      	bne.n	8003eac <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ee0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ee6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d106      	bne.n	8003efc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003eee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ef0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003ef6:	f7ff ff0c 	bl	8003d12 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003efa:	e002      	b.n	8003f02 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003efc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003efe:	f7fd fad1 	bl	80014a4 <HAL_UART_RxCpltCallback>
}
 8003f02:	bf00      	nop
 8003f04:	3770      	adds	r7, #112	@ 0x70
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b084      	sub	sp, #16
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d108      	bne.n	8003f38 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f2a:	085b      	lsrs	r3, r3, #1
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	4619      	mov	r1, r3
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f7ff feee 	bl	8003d12 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f36:	e002      	b.n	8003f3e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f7ff fed8 	bl	8003cee <HAL_UART_RxHalfCpltCallback>
}
 8003f3e:	bf00      	nop
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b084      	sub	sp, #16
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f56:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	bf14      	ite	ne
 8003f66:	2301      	movne	r3, #1
 8003f68:	2300      	moveq	r3, #0
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b21      	cmp	r3, #33	@ 0x21
 8003f78:	d108      	bne.n	8003f8c <UART_DMAError+0x46>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d005      	beq.n	8003f8c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2200      	movs	r2, #0
 8003f84:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003f86:	68b8      	ldr	r0, [r7, #8]
 8003f88:	f000 f8c2 	bl	8004110 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	bf14      	ite	ne
 8003f9a:	2301      	movne	r3, #1
 8003f9c:	2300      	moveq	r3, #0
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b22      	cmp	r3, #34	@ 0x22
 8003fac:	d108      	bne.n	8003fc0 <UART_DMAError+0x7a>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d005      	beq.n	8003fc0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003fba:	68b8      	ldr	r0, [r7, #8]
 8003fbc:	f000 f8cf 	bl	800415e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc4:	f043 0210 	orr.w	r2, r3, #16
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fcc:	68b8      	ldr	r0, [r7, #8]
 8003fce:	f7ff fe97 	bl	8003d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fd2:	bf00      	nop
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
	...

08003fdc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b098      	sub	sp, #96	@ 0x60
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	88fa      	ldrh	r2, [r7, #6]
 8003ff4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2222      	movs	r2, #34	@ 0x22
 8004000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004008:	4a3e      	ldr	r2, [pc, #248]	@ (8004104 <UART_Start_Receive_DMA+0x128>)
 800400a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004010:	4a3d      	ldr	r2, [pc, #244]	@ (8004108 <UART_Start_Receive_DMA+0x12c>)
 8004012:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004018:	4a3c      	ldr	r2, [pc, #240]	@ (800410c <UART_Start_Receive_DMA+0x130>)
 800401a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004020:	2200      	movs	r2, #0
 8004022:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004024:	f107 0308 	add.w	r3, r7, #8
 8004028:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3304      	adds	r3, #4
 8004034:	4619      	mov	r1, r3
 8004036:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	88fb      	ldrh	r3, [r7, #6]
 800403c:	f7fe fafa 	bl	8002634 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004040:	2300      	movs	r3, #0
 8004042:	613b      	str	r3, [r7, #16]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	613b      	str	r3, [r7, #16]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	613b      	str	r3, [r7, #16]
 8004054:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d019      	beq.n	8004092 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	330c      	adds	r3, #12
 8004064:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004066:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004068:	e853 3f00 	ldrex	r3, [r3]
 800406c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800406e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004074:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	330c      	adds	r3, #12
 800407c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800407e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004080:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004082:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004084:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004086:	e841 2300 	strex	r3, r2, [r1]
 800408a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800408c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1e5      	bne.n	800405e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3314      	adds	r3, #20
 8004098:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800409c:	e853 3f00 	ldrex	r3, [r3]
 80040a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	3314      	adds	r3, #20
 80040b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80040b2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80040b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80040b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80040ba:	e841 2300 	strex	r3, r2, [r1]
 80040be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1e5      	bne.n	8004092 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	3314      	adds	r3, #20
 80040cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	e853 3f00 	ldrex	r3, [r3]
 80040d4:	617b      	str	r3, [r7, #20]
   return(result);
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3314      	adds	r3, #20
 80040e4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80040e6:	627a      	str	r2, [r7, #36]	@ 0x24
 80040e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ea:	6a39      	ldr	r1, [r7, #32]
 80040ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ee:	e841 2300 	strex	r3, r2, [r1]
 80040f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1e5      	bne.n	80040c6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3760      	adds	r7, #96	@ 0x60
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	08003ddf 	.word	0x08003ddf
 8004108:	08003f0b 	.word	0x08003f0b
 800410c:	08003f47 	.word	0x08003f47

08004110 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004110:	b480      	push	{r7}
 8004112:	b089      	sub	sp, #36	@ 0x24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	330c      	adds	r3, #12
 800411e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	e853 3f00 	ldrex	r3, [r3]
 8004126:	60bb      	str	r3, [r7, #8]
   return(result);
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800412e:	61fb      	str	r3, [r7, #28]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	330c      	adds	r3, #12
 8004136:	69fa      	ldr	r2, [r7, #28]
 8004138:	61ba      	str	r2, [r7, #24]
 800413a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413c:	6979      	ldr	r1, [r7, #20]
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	e841 2300 	strex	r3, r2, [r1]
 8004144:	613b      	str	r3, [r7, #16]
   return(result);
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1e5      	bne.n	8004118 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004154:	bf00      	nop
 8004156:	3724      	adds	r7, #36	@ 0x24
 8004158:	46bd      	mov	sp, r7
 800415a:	bc80      	pop	{r7}
 800415c:	4770      	bx	lr

0800415e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800415e:	b480      	push	{r7}
 8004160:	b095      	sub	sp, #84	@ 0x54
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	330c      	adds	r3, #12
 800416c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004170:	e853 3f00 	ldrex	r3, [r3]
 8004174:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004178:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800417c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	330c      	adds	r3, #12
 8004184:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004186:	643a      	str	r2, [r7, #64]	@ 0x40
 8004188:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800418c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800418e:	e841 2300 	strex	r3, r2, [r1]
 8004192:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1e5      	bne.n	8004166 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3314      	adds	r3, #20
 80041a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	e853 3f00 	ldrex	r3, [r3]
 80041a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	f023 0301 	bic.w	r3, r3, #1
 80041b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3314      	adds	r3, #20
 80041b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041c2:	e841 2300 	strex	r3, r2, [r1]
 80041c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1e5      	bne.n	800419a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d119      	bne.n	800420a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	330c      	adds	r3, #12
 80041dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	e853 3f00 	ldrex	r3, [r3]
 80041e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	f023 0310 	bic.w	r3, r3, #16
 80041ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	330c      	adds	r3, #12
 80041f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041f6:	61ba      	str	r2, [r7, #24]
 80041f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fa:	6979      	ldr	r1, [r7, #20]
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	e841 2300 	strex	r3, r2, [r1]
 8004202:	613b      	str	r3, [r7, #16]
   return(result);
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1e5      	bne.n	80041d6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2220      	movs	r2, #32
 800420e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004218:	bf00      	nop
 800421a:	3754      	adds	r7, #84	@ 0x54
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr

08004222 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b084      	sub	sp, #16
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f7ff fd5f 	bl	8003d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004242:	bf00      	nop
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800424a:	b480      	push	{r7}
 800424c:	b085      	sub	sp, #20
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b21      	cmp	r3, #33	@ 0x21
 800425c:	d13e      	bne.n	80042dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004266:	d114      	bne.n	8004292 <UART_Transmit_IT+0x48>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d110      	bne.n	8004292 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004284:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	1c9a      	adds	r2, r3, #2
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	621a      	str	r2, [r3, #32]
 8004290:	e008      	b.n	80042a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	1c59      	adds	r1, r3, #1
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6211      	str	r1, [r2, #32]
 800429c:	781a      	ldrb	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	4619      	mov	r1, r3
 80042b2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10f      	bne.n	80042d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68da      	ldr	r2, [r3, #12]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80042c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042d8:	2300      	movs	r3, #0
 80042da:	e000      	b.n	80042de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042dc:	2302      	movs	r3, #2
  }
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr

080042e8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042fe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7fd f8b3 	bl	8001474 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b08c      	sub	sp, #48	@ 0x30
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b22      	cmp	r3, #34	@ 0x22
 800432a:	f040 80ae 	bne.w	800448a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004336:	d117      	bne.n	8004368 <UART_Receive_IT+0x50>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d113      	bne.n	8004368 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004340:	2300      	movs	r3, #0
 8004342:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004348:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	b29b      	uxth	r3, r3
 8004352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004356:	b29a      	uxth	r2, r3
 8004358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800435a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004360:	1c9a      	adds	r2, r3, #2
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	629a      	str	r2, [r3, #40]	@ 0x28
 8004366:	e026      	b.n	80043b6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800436e:	2300      	movs	r3, #0
 8004370:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800437a:	d007      	beq.n	800438c <UART_Receive_IT+0x74>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10a      	bne.n	800439a <UART_Receive_IT+0x82>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d106      	bne.n	800439a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	b2da      	uxtb	r2, r3
 8004394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004396:	701a      	strb	r2, [r3, #0]
 8004398:	e008      	b.n	80043ac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043aa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b0:	1c5a      	adds	r2, r3, #1
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	3b01      	subs	r3, #1
 80043be:	b29b      	uxth	r3, r3
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	4619      	mov	r1, r3
 80043c4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d15d      	bne.n	8004486 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68da      	ldr	r2, [r3, #12]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 0220 	bic.w	r2, r2, #32
 80043d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68da      	ldr	r2, [r3, #12]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	695a      	ldr	r2, [r3, #20]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0201 	bic.w	r2, r2, #1
 80043f8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2220      	movs	r2, #32
 80043fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440c:	2b01      	cmp	r3, #1
 800440e:	d135      	bne.n	800447c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	330c      	adds	r3, #12
 800441c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	e853 3f00 	ldrex	r3, [r3]
 8004424:	613b      	str	r3, [r7, #16]
   return(result);
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f023 0310 	bic.w	r3, r3, #16
 800442c:	627b      	str	r3, [r7, #36]	@ 0x24
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	330c      	adds	r3, #12
 8004434:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004436:	623a      	str	r2, [r7, #32]
 8004438:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443a:	69f9      	ldr	r1, [r7, #28]
 800443c:	6a3a      	ldr	r2, [r7, #32]
 800443e:	e841 2300 	strex	r3, r2, [r1]
 8004442:	61bb      	str	r3, [r7, #24]
   return(result);
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1e5      	bne.n	8004416 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0310 	and.w	r3, r3, #16
 8004454:	2b10      	cmp	r3, #16
 8004456:	d10a      	bne.n	800446e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004458:	2300      	movs	r3, #0
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004472:	4619      	mov	r1, r3
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f7ff fc4c 	bl	8003d12 <HAL_UARTEx_RxEventCallback>
 800447a:	e002      	b.n	8004482 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7fd f811 	bl	80014a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004482:	2300      	movs	r3, #0
 8004484:	e002      	b.n	800448c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004486:	2300      	movs	r3, #0
 8004488:	e000      	b.n	800448c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800448a:	2302      	movs	r3, #2
  }
}
 800448c:	4618      	mov	r0, r3
 800448e:	3730      	adds	r7, #48	@ 0x30
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68da      	ldr	r2, [r3, #12]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80044ce:	f023 030c 	bic.w	r3, r3, #12
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6812      	ldr	r2, [r2, #0]
 80044d6:	68b9      	ldr	r1, [r7, #8]
 80044d8:	430b      	orrs	r3, r1
 80044da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699a      	ldr	r2, [r3, #24]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a2c      	ldr	r2, [pc, #176]	@ (80045a8 <UART_SetConfig+0x114>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d103      	bne.n	8004504 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044fc:	f7ff f844 	bl	8003588 <HAL_RCC_GetPCLK2Freq>
 8004500:	60f8      	str	r0, [r7, #12]
 8004502:	e002      	b.n	800450a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004504:	f7ff f82c 	bl	8003560 <HAL_RCC_GetPCLK1Freq>
 8004508:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	4613      	mov	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	009a      	lsls	r2, r3, #2
 8004514:	441a      	add	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004520:	4a22      	ldr	r2, [pc, #136]	@ (80045ac <UART_SetConfig+0x118>)
 8004522:	fba2 2303 	umull	r2, r3, r2, r3
 8004526:	095b      	lsrs	r3, r3, #5
 8004528:	0119      	lsls	r1, r3, #4
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4613      	mov	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	009a      	lsls	r2, r3, #2
 8004534:	441a      	add	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004540:	4b1a      	ldr	r3, [pc, #104]	@ (80045ac <UART_SetConfig+0x118>)
 8004542:	fba3 0302 	umull	r0, r3, r3, r2
 8004546:	095b      	lsrs	r3, r3, #5
 8004548:	2064      	movs	r0, #100	@ 0x64
 800454a:	fb00 f303 	mul.w	r3, r0, r3
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	011b      	lsls	r3, r3, #4
 8004552:	3332      	adds	r3, #50	@ 0x32
 8004554:	4a15      	ldr	r2, [pc, #84]	@ (80045ac <UART_SetConfig+0x118>)
 8004556:	fba2 2303 	umull	r2, r3, r2, r3
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004560:	4419      	add	r1, r3
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	4613      	mov	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	4413      	add	r3, r2
 800456a:	009a      	lsls	r2, r3, #2
 800456c:	441a      	add	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	fbb2 f2f3 	udiv	r2, r2, r3
 8004578:	4b0c      	ldr	r3, [pc, #48]	@ (80045ac <UART_SetConfig+0x118>)
 800457a:	fba3 0302 	umull	r0, r3, r3, r2
 800457e:	095b      	lsrs	r3, r3, #5
 8004580:	2064      	movs	r0, #100	@ 0x64
 8004582:	fb00 f303 	mul.w	r3, r0, r3
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	011b      	lsls	r3, r3, #4
 800458a:	3332      	adds	r3, #50	@ 0x32
 800458c:	4a07      	ldr	r2, [pc, #28]	@ (80045ac <UART_SetConfig+0x118>)
 800458e:	fba2 2303 	umull	r2, r3, r2, r3
 8004592:	095b      	lsrs	r3, r3, #5
 8004594:	f003 020f 	and.w	r2, r3, #15
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	440a      	add	r2, r1
 800459e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80045a0:	bf00      	nop
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	40013800 	.word	0x40013800
 80045ac:	51eb851f 	.word	0x51eb851f

080045b0 <realloc>:
 80045b0:	4b02      	ldr	r3, [pc, #8]	@ (80045bc <realloc+0xc>)
 80045b2:	460a      	mov	r2, r1
 80045b4:	4601      	mov	r1, r0
 80045b6:	6818      	ldr	r0, [r3, #0]
 80045b8:	f000 b802 	b.w	80045c0 <_realloc_r>
 80045bc:	2000000c 	.word	0x2000000c

080045c0 <_realloc_r>:
 80045c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045c4:	4680      	mov	r8, r0
 80045c6:	4615      	mov	r5, r2
 80045c8:	460c      	mov	r4, r1
 80045ca:	b921      	cbnz	r1, 80045d6 <_realloc_r+0x16>
 80045cc:	4611      	mov	r1, r2
 80045ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045d2:	f000 b8cf 	b.w	8004774 <_malloc_r>
 80045d6:	b92a      	cbnz	r2, 80045e4 <_realloc_r+0x24>
 80045d8:	f000 f862 	bl	80046a0 <_free_r>
 80045dc:	2400      	movs	r4, #0
 80045de:	4620      	mov	r0, r4
 80045e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045e4:	f000 f952 	bl	800488c <_malloc_usable_size_r>
 80045e8:	4285      	cmp	r5, r0
 80045ea:	4606      	mov	r6, r0
 80045ec:	d802      	bhi.n	80045f4 <_realloc_r+0x34>
 80045ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80045f2:	d8f4      	bhi.n	80045de <_realloc_r+0x1e>
 80045f4:	4629      	mov	r1, r5
 80045f6:	4640      	mov	r0, r8
 80045f8:	f000 f8bc 	bl	8004774 <_malloc_r>
 80045fc:	4607      	mov	r7, r0
 80045fe:	2800      	cmp	r0, #0
 8004600:	d0ec      	beq.n	80045dc <_realloc_r+0x1c>
 8004602:	42b5      	cmp	r5, r6
 8004604:	462a      	mov	r2, r5
 8004606:	4621      	mov	r1, r4
 8004608:	bf28      	it	cs
 800460a:	4632      	movcs	r2, r6
 800460c:	f000 f83a 	bl	8004684 <memcpy>
 8004610:	4621      	mov	r1, r4
 8004612:	4640      	mov	r0, r8
 8004614:	f000 f844 	bl	80046a0 <_free_r>
 8004618:	463c      	mov	r4, r7
 800461a:	e7e0      	b.n	80045de <_realloc_r+0x1e>

0800461c <memset>:
 800461c:	4603      	mov	r3, r0
 800461e:	4402      	add	r2, r0
 8004620:	4293      	cmp	r3, r2
 8004622:	d100      	bne.n	8004626 <memset+0xa>
 8004624:	4770      	bx	lr
 8004626:	f803 1b01 	strb.w	r1, [r3], #1
 800462a:	e7f9      	b.n	8004620 <memset+0x4>

0800462c <__errno>:
 800462c:	4b01      	ldr	r3, [pc, #4]	@ (8004634 <__errno+0x8>)
 800462e:	6818      	ldr	r0, [r3, #0]
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	2000000c 	.word	0x2000000c

08004638 <__libc_init_array>:
 8004638:	b570      	push	{r4, r5, r6, lr}
 800463a:	2600      	movs	r6, #0
 800463c:	4d0c      	ldr	r5, [pc, #48]	@ (8004670 <__libc_init_array+0x38>)
 800463e:	4c0d      	ldr	r4, [pc, #52]	@ (8004674 <__libc_init_array+0x3c>)
 8004640:	1b64      	subs	r4, r4, r5
 8004642:	10a4      	asrs	r4, r4, #2
 8004644:	42a6      	cmp	r6, r4
 8004646:	d109      	bne.n	800465c <__libc_init_array+0x24>
 8004648:	f000 f938 	bl	80048bc <_init>
 800464c:	2600      	movs	r6, #0
 800464e:	4d0a      	ldr	r5, [pc, #40]	@ (8004678 <__libc_init_array+0x40>)
 8004650:	4c0a      	ldr	r4, [pc, #40]	@ (800467c <__libc_init_array+0x44>)
 8004652:	1b64      	subs	r4, r4, r5
 8004654:	10a4      	asrs	r4, r4, #2
 8004656:	42a6      	cmp	r6, r4
 8004658:	d105      	bne.n	8004666 <__libc_init_array+0x2e>
 800465a:	bd70      	pop	{r4, r5, r6, pc}
 800465c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004660:	4798      	blx	r3
 8004662:	3601      	adds	r6, #1
 8004664:	e7ee      	b.n	8004644 <__libc_init_array+0xc>
 8004666:	f855 3b04 	ldr.w	r3, [r5], #4
 800466a:	4798      	blx	r3
 800466c:	3601      	adds	r6, #1
 800466e:	e7f2      	b.n	8004656 <__libc_init_array+0x1e>
 8004670:	08004b2c 	.word	0x08004b2c
 8004674:	08004b2c 	.word	0x08004b2c
 8004678:	08004b2c 	.word	0x08004b2c
 800467c:	08004b34 	.word	0x08004b34

08004680 <__retarget_lock_acquire_recursive>:
 8004680:	4770      	bx	lr

08004682 <__retarget_lock_release_recursive>:
 8004682:	4770      	bx	lr

08004684 <memcpy>:
 8004684:	440a      	add	r2, r1
 8004686:	4291      	cmp	r1, r2
 8004688:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800468c:	d100      	bne.n	8004690 <memcpy+0xc>
 800468e:	4770      	bx	lr
 8004690:	b510      	push	{r4, lr}
 8004692:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004696:	4291      	cmp	r1, r2
 8004698:	f803 4f01 	strb.w	r4, [r3, #1]!
 800469c:	d1f9      	bne.n	8004692 <memcpy+0xe>
 800469e:	bd10      	pop	{r4, pc}

080046a0 <_free_r>:
 80046a0:	b538      	push	{r3, r4, r5, lr}
 80046a2:	4605      	mov	r5, r0
 80046a4:	2900      	cmp	r1, #0
 80046a6:	d040      	beq.n	800472a <_free_r+0x8a>
 80046a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046ac:	1f0c      	subs	r4, r1, #4
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	bfb8      	it	lt
 80046b2:	18e4      	addlt	r4, r4, r3
 80046b4:	f000 f8de 	bl	8004874 <__malloc_lock>
 80046b8:	4a1c      	ldr	r2, [pc, #112]	@ (800472c <_free_r+0x8c>)
 80046ba:	6813      	ldr	r3, [r2, #0]
 80046bc:	b933      	cbnz	r3, 80046cc <_free_r+0x2c>
 80046be:	6063      	str	r3, [r4, #4]
 80046c0:	6014      	str	r4, [r2, #0]
 80046c2:	4628      	mov	r0, r5
 80046c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046c8:	f000 b8da 	b.w	8004880 <__malloc_unlock>
 80046cc:	42a3      	cmp	r3, r4
 80046ce:	d908      	bls.n	80046e2 <_free_r+0x42>
 80046d0:	6820      	ldr	r0, [r4, #0]
 80046d2:	1821      	adds	r1, r4, r0
 80046d4:	428b      	cmp	r3, r1
 80046d6:	bf01      	itttt	eq
 80046d8:	6819      	ldreq	r1, [r3, #0]
 80046da:	685b      	ldreq	r3, [r3, #4]
 80046dc:	1809      	addeq	r1, r1, r0
 80046de:	6021      	streq	r1, [r4, #0]
 80046e0:	e7ed      	b.n	80046be <_free_r+0x1e>
 80046e2:	461a      	mov	r2, r3
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	b10b      	cbz	r3, 80046ec <_free_r+0x4c>
 80046e8:	42a3      	cmp	r3, r4
 80046ea:	d9fa      	bls.n	80046e2 <_free_r+0x42>
 80046ec:	6811      	ldr	r1, [r2, #0]
 80046ee:	1850      	adds	r0, r2, r1
 80046f0:	42a0      	cmp	r0, r4
 80046f2:	d10b      	bne.n	800470c <_free_r+0x6c>
 80046f4:	6820      	ldr	r0, [r4, #0]
 80046f6:	4401      	add	r1, r0
 80046f8:	1850      	adds	r0, r2, r1
 80046fa:	4283      	cmp	r3, r0
 80046fc:	6011      	str	r1, [r2, #0]
 80046fe:	d1e0      	bne.n	80046c2 <_free_r+0x22>
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	4408      	add	r0, r1
 8004706:	6010      	str	r0, [r2, #0]
 8004708:	6053      	str	r3, [r2, #4]
 800470a:	e7da      	b.n	80046c2 <_free_r+0x22>
 800470c:	d902      	bls.n	8004714 <_free_r+0x74>
 800470e:	230c      	movs	r3, #12
 8004710:	602b      	str	r3, [r5, #0]
 8004712:	e7d6      	b.n	80046c2 <_free_r+0x22>
 8004714:	6820      	ldr	r0, [r4, #0]
 8004716:	1821      	adds	r1, r4, r0
 8004718:	428b      	cmp	r3, r1
 800471a:	bf01      	itttt	eq
 800471c:	6819      	ldreq	r1, [r3, #0]
 800471e:	685b      	ldreq	r3, [r3, #4]
 8004720:	1809      	addeq	r1, r1, r0
 8004722:	6021      	streq	r1, [r4, #0]
 8004724:	6063      	str	r3, [r4, #4]
 8004726:	6054      	str	r4, [r2, #4]
 8004728:	e7cb      	b.n	80046c2 <_free_r+0x22>
 800472a:	bd38      	pop	{r3, r4, r5, pc}
 800472c:	20000bfc 	.word	0x20000bfc

08004730 <sbrk_aligned>:
 8004730:	b570      	push	{r4, r5, r6, lr}
 8004732:	4e0f      	ldr	r6, [pc, #60]	@ (8004770 <sbrk_aligned+0x40>)
 8004734:	460c      	mov	r4, r1
 8004736:	6831      	ldr	r1, [r6, #0]
 8004738:	4605      	mov	r5, r0
 800473a:	b911      	cbnz	r1, 8004742 <sbrk_aligned+0x12>
 800473c:	f000 f8ae 	bl	800489c <_sbrk_r>
 8004740:	6030      	str	r0, [r6, #0]
 8004742:	4621      	mov	r1, r4
 8004744:	4628      	mov	r0, r5
 8004746:	f000 f8a9 	bl	800489c <_sbrk_r>
 800474a:	1c43      	adds	r3, r0, #1
 800474c:	d103      	bne.n	8004756 <sbrk_aligned+0x26>
 800474e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004752:	4620      	mov	r0, r4
 8004754:	bd70      	pop	{r4, r5, r6, pc}
 8004756:	1cc4      	adds	r4, r0, #3
 8004758:	f024 0403 	bic.w	r4, r4, #3
 800475c:	42a0      	cmp	r0, r4
 800475e:	d0f8      	beq.n	8004752 <sbrk_aligned+0x22>
 8004760:	1a21      	subs	r1, r4, r0
 8004762:	4628      	mov	r0, r5
 8004764:	f000 f89a 	bl	800489c <_sbrk_r>
 8004768:	3001      	adds	r0, #1
 800476a:	d1f2      	bne.n	8004752 <sbrk_aligned+0x22>
 800476c:	e7ef      	b.n	800474e <sbrk_aligned+0x1e>
 800476e:	bf00      	nop
 8004770:	20000bf8 	.word	0x20000bf8

08004774 <_malloc_r>:
 8004774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004778:	1ccd      	adds	r5, r1, #3
 800477a:	f025 0503 	bic.w	r5, r5, #3
 800477e:	3508      	adds	r5, #8
 8004780:	2d0c      	cmp	r5, #12
 8004782:	bf38      	it	cc
 8004784:	250c      	movcc	r5, #12
 8004786:	2d00      	cmp	r5, #0
 8004788:	4606      	mov	r6, r0
 800478a:	db01      	blt.n	8004790 <_malloc_r+0x1c>
 800478c:	42a9      	cmp	r1, r5
 800478e:	d904      	bls.n	800479a <_malloc_r+0x26>
 8004790:	230c      	movs	r3, #12
 8004792:	6033      	str	r3, [r6, #0]
 8004794:	2000      	movs	r0, #0
 8004796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800479a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004870 <_malloc_r+0xfc>
 800479e:	f000 f869 	bl	8004874 <__malloc_lock>
 80047a2:	f8d8 3000 	ldr.w	r3, [r8]
 80047a6:	461c      	mov	r4, r3
 80047a8:	bb44      	cbnz	r4, 80047fc <_malloc_r+0x88>
 80047aa:	4629      	mov	r1, r5
 80047ac:	4630      	mov	r0, r6
 80047ae:	f7ff ffbf 	bl	8004730 <sbrk_aligned>
 80047b2:	1c43      	adds	r3, r0, #1
 80047b4:	4604      	mov	r4, r0
 80047b6:	d158      	bne.n	800486a <_malloc_r+0xf6>
 80047b8:	f8d8 4000 	ldr.w	r4, [r8]
 80047bc:	4627      	mov	r7, r4
 80047be:	2f00      	cmp	r7, #0
 80047c0:	d143      	bne.n	800484a <_malloc_r+0xd6>
 80047c2:	2c00      	cmp	r4, #0
 80047c4:	d04b      	beq.n	800485e <_malloc_r+0xea>
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	4639      	mov	r1, r7
 80047ca:	4630      	mov	r0, r6
 80047cc:	eb04 0903 	add.w	r9, r4, r3
 80047d0:	f000 f864 	bl	800489c <_sbrk_r>
 80047d4:	4581      	cmp	r9, r0
 80047d6:	d142      	bne.n	800485e <_malloc_r+0xea>
 80047d8:	6821      	ldr	r1, [r4, #0]
 80047da:	4630      	mov	r0, r6
 80047dc:	1a6d      	subs	r5, r5, r1
 80047de:	4629      	mov	r1, r5
 80047e0:	f7ff ffa6 	bl	8004730 <sbrk_aligned>
 80047e4:	3001      	adds	r0, #1
 80047e6:	d03a      	beq.n	800485e <_malloc_r+0xea>
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	442b      	add	r3, r5
 80047ec:	6023      	str	r3, [r4, #0]
 80047ee:	f8d8 3000 	ldr.w	r3, [r8]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	bb62      	cbnz	r2, 8004850 <_malloc_r+0xdc>
 80047f6:	f8c8 7000 	str.w	r7, [r8]
 80047fa:	e00f      	b.n	800481c <_malloc_r+0xa8>
 80047fc:	6822      	ldr	r2, [r4, #0]
 80047fe:	1b52      	subs	r2, r2, r5
 8004800:	d420      	bmi.n	8004844 <_malloc_r+0xd0>
 8004802:	2a0b      	cmp	r2, #11
 8004804:	d917      	bls.n	8004836 <_malloc_r+0xc2>
 8004806:	1961      	adds	r1, r4, r5
 8004808:	42a3      	cmp	r3, r4
 800480a:	6025      	str	r5, [r4, #0]
 800480c:	bf18      	it	ne
 800480e:	6059      	strne	r1, [r3, #4]
 8004810:	6863      	ldr	r3, [r4, #4]
 8004812:	bf08      	it	eq
 8004814:	f8c8 1000 	streq.w	r1, [r8]
 8004818:	5162      	str	r2, [r4, r5]
 800481a:	604b      	str	r3, [r1, #4]
 800481c:	4630      	mov	r0, r6
 800481e:	f000 f82f 	bl	8004880 <__malloc_unlock>
 8004822:	f104 000b 	add.w	r0, r4, #11
 8004826:	1d23      	adds	r3, r4, #4
 8004828:	f020 0007 	bic.w	r0, r0, #7
 800482c:	1ac2      	subs	r2, r0, r3
 800482e:	bf1c      	itt	ne
 8004830:	1a1b      	subne	r3, r3, r0
 8004832:	50a3      	strne	r3, [r4, r2]
 8004834:	e7af      	b.n	8004796 <_malloc_r+0x22>
 8004836:	6862      	ldr	r2, [r4, #4]
 8004838:	42a3      	cmp	r3, r4
 800483a:	bf0c      	ite	eq
 800483c:	f8c8 2000 	streq.w	r2, [r8]
 8004840:	605a      	strne	r2, [r3, #4]
 8004842:	e7eb      	b.n	800481c <_malloc_r+0xa8>
 8004844:	4623      	mov	r3, r4
 8004846:	6864      	ldr	r4, [r4, #4]
 8004848:	e7ae      	b.n	80047a8 <_malloc_r+0x34>
 800484a:	463c      	mov	r4, r7
 800484c:	687f      	ldr	r7, [r7, #4]
 800484e:	e7b6      	b.n	80047be <_malloc_r+0x4a>
 8004850:	461a      	mov	r2, r3
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	42a3      	cmp	r3, r4
 8004856:	d1fb      	bne.n	8004850 <_malloc_r+0xdc>
 8004858:	2300      	movs	r3, #0
 800485a:	6053      	str	r3, [r2, #4]
 800485c:	e7de      	b.n	800481c <_malloc_r+0xa8>
 800485e:	230c      	movs	r3, #12
 8004860:	4630      	mov	r0, r6
 8004862:	6033      	str	r3, [r6, #0]
 8004864:	f000 f80c 	bl	8004880 <__malloc_unlock>
 8004868:	e794      	b.n	8004794 <_malloc_r+0x20>
 800486a:	6005      	str	r5, [r0, #0]
 800486c:	e7d6      	b.n	800481c <_malloc_r+0xa8>
 800486e:	bf00      	nop
 8004870:	20000bfc 	.word	0x20000bfc

08004874 <__malloc_lock>:
 8004874:	4801      	ldr	r0, [pc, #4]	@ (800487c <__malloc_lock+0x8>)
 8004876:	f7ff bf03 	b.w	8004680 <__retarget_lock_acquire_recursive>
 800487a:	bf00      	nop
 800487c:	20000bf4 	.word	0x20000bf4

08004880 <__malloc_unlock>:
 8004880:	4801      	ldr	r0, [pc, #4]	@ (8004888 <__malloc_unlock+0x8>)
 8004882:	f7ff befe 	b.w	8004682 <__retarget_lock_release_recursive>
 8004886:	bf00      	nop
 8004888:	20000bf4 	.word	0x20000bf4

0800488c <_malloc_usable_size_r>:
 800488c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004890:	1f18      	subs	r0, r3, #4
 8004892:	2b00      	cmp	r3, #0
 8004894:	bfbc      	itt	lt
 8004896:	580b      	ldrlt	r3, [r1, r0]
 8004898:	18c0      	addlt	r0, r0, r3
 800489a:	4770      	bx	lr

0800489c <_sbrk_r>:
 800489c:	b538      	push	{r3, r4, r5, lr}
 800489e:	2300      	movs	r3, #0
 80048a0:	4d05      	ldr	r5, [pc, #20]	@ (80048b8 <_sbrk_r+0x1c>)
 80048a2:	4604      	mov	r4, r0
 80048a4:	4608      	mov	r0, r1
 80048a6:	602b      	str	r3, [r5, #0]
 80048a8:	f7fd fbc6 	bl	8002038 <_sbrk>
 80048ac:	1c43      	adds	r3, r0, #1
 80048ae:	d102      	bne.n	80048b6 <_sbrk_r+0x1a>
 80048b0:	682b      	ldr	r3, [r5, #0]
 80048b2:	b103      	cbz	r3, 80048b6 <_sbrk_r+0x1a>
 80048b4:	6023      	str	r3, [r4, #0]
 80048b6:	bd38      	pop	{r3, r4, r5, pc}
 80048b8:	20000bf0 	.word	0x20000bf0

080048bc <_init>:
 80048bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048be:	bf00      	nop
 80048c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048c2:	bc08      	pop	{r3}
 80048c4:	469e      	mov	lr, r3
 80048c6:	4770      	bx	lr

080048c8 <_fini>:
 80048c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ca:	bf00      	nop
 80048cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ce:	bc08      	pop	{r3}
 80048d0:	469e      	mov	lr, r3
 80048d2:	4770      	bx	lr
