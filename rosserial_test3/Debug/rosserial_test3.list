
rosserial_test3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005370  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  0800547c  0800547c  0000647c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056c8  080056c8  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  080056c8  080056c8  000066c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056d0  080056d0  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080056d0  080056d0  000066d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056d8  080056d8  000066d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080056dc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c38  2000006c  08005748  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ca4  08005748  00007ca4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012cfa  00000000  00000000  00007095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c89  00000000  00000000  00019d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  0001ca18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b8e  00000000  00000000  0001d8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c97  00000000  00000000  0001e47e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000114d8  00000000  00000000  00037115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fd4a  00000000  00000000  000485ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8337  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004098  00000000  00000000  000d837c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000dc414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005464 	.word	0x08005464

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08005464 	.word	0x08005464

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000166:	683b      	ldr	r3, [r7, #0]
 8000168:	681b      	ldr	r3, [r3, #0]
 800016a:	0a5a      	lsrs	r2, r3, #9
 800016c:	490f      	ldr	r1, [pc, #60]	@ (80001ac <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800016e:	fba1 1202 	umull	r1, r2, r1, r2
 8000172:	09d2      	lsrs	r2, r2, #7
 8000174:	490e      	ldr	r1, [pc, #56]	@ (80001b0 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000176:	fb01 f202 	mul.w	r2, r1, r2
 800017a:	1a9b      	subs	r3, r3, r2
 800017c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800017e:	683b      	ldr	r3, [r7, #0]
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	0a5b      	lsrs	r3, r3, #9
 8000184:	4a09      	ldr	r2, [pc, #36]	@ (80001ac <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000186:	fba2 2303 	umull	r2, r3, r2, r3
 800018a:	09db      	lsrs	r3, r3, #7
 800018c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	681a      	ldr	r2, [r3, #0]
 8000192:	68bb      	ldr	r3, [r7, #8]
 8000194:	441a      	add	r2, r3
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800019a:	683b      	ldr	r3, [r7, #0]
 800019c:	68fa      	ldr	r2, [r7, #12]
 800019e:	601a      	str	r2, [r3, #0]
}
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	00044b83 	.word	0x00044b83
 80001b0:	3b9aca00 	.word	0x3b9aca00

080001b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80001ba:	4b10      	ldr	r3, [pc, #64]	@ (80001fc <MX_DMA_Init+0x48>)
 80001bc:	695b      	ldr	r3, [r3, #20]
 80001be:	4a0f      	ldr	r2, [pc, #60]	@ (80001fc <MX_DMA_Init+0x48>)
 80001c0:	f043 0301 	orr.w	r3, r3, #1
 80001c4:	6153      	str	r3, [r2, #20]
 80001c6:	4b0d      	ldr	r3, [pc, #52]	@ (80001fc <MX_DMA_Init+0x48>)
 80001c8:	695b      	ldr	r3, [r3, #20]
 80001ca:	f003 0301 	and.w	r3, r3, #1
 80001ce:	607b      	str	r3, [r7, #4]
 80001d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80001d2:	2200      	movs	r2, #0
 80001d4:	2100      	movs	r1, #0
 80001d6:	2010      	movs	r0, #16
 80001d8:	f002 fb4b 	bl	8002872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80001dc:	2010      	movs	r0, #16
 80001de:	f002 fb64 	bl	80028aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80001e2:	2200      	movs	r2, #0
 80001e4:	2100      	movs	r1, #0
 80001e6:	2011      	movs	r0, #17
 80001e8:	f002 fb43 	bl	8002872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80001ec:	2011      	movs	r0, #17
 80001ee:	f002 fb5c 	bl	80028aa <HAL_NVIC_EnableIRQ>

}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40021000 	.word	0x40021000

08000200 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b088      	sub	sp, #32
 8000204:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000206:	f107 0310 	add.w	r3, r7, #16
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000214:	4b1e      	ldr	r3, [pc, #120]	@ (8000290 <MX_GPIO_Init+0x90>)
 8000216:	699b      	ldr	r3, [r3, #24]
 8000218:	4a1d      	ldr	r2, [pc, #116]	@ (8000290 <MX_GPIO_Init+0x90>)
 800021a:	f043 0310 	orr.w	r3, r3, #16
 800021e:	6193      	str	r3, [r2, #24]
 8000220:	4b1b      	ldr	r3, [pc, #108]	@ (8000290 <MX_GPIO_Init+0x90>)
 8000222:	699b      	ldr	r3, [r3, #24]
 8000224:	f003 0310 	and.w	r3, r3, #16
 8000228:	60fb      	str	r3, [r7, #12]
 800022a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800022c:	4b18      	ldr	r3, [pc, #96]	@ (8000290 <MX_GPIO_Init+0x90>)
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	4a17      	ldr	r2, [pc, #92]	@ (8000290 <MX_GPIO_Init+0x90>)
 8000232:	f043 0320 	orr.w	r3, r3, #32
 8000236:	6193      	str	r3, [r2, #24]
 8000238:	4b15      	ldr	r3, [pc, #84]	@ (8000290 <MX_GPIO_Init+0x90>)
 800023a:	699b      	ldr	r3, [r3, #24]
 800023c:	f003 0320 	and.w	r3, r3, #32
 8000240:	60bb      	str	r3, [r7, #8]
 8000242:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000244:	4b12      	ldr	r3, [pc, #72]	@ (8000290 <MX_GPIO_Init+0x90>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	4a11      	ldr	r2, [pc, #68]	@ (8000290 <MX_GPIO_Init+0x90>)
 800024a:	f043 0304 	orr.w	r3, r3, #4
 800024e:	6193      	str	r3, [r2, #24]
 8000250:	4b0f      	ldr	r3, [pc, #60]	@ (8000290 <MX_GPIO_Init+0x90>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	f003 0304 	and.w	r3, r3, #4
 8000258:	607b      	str	r3, [r7, #4]
 800025a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800025c:	2200      	movs	r2, #0
 800025e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000262:	480c      	ldr	r0, [pc, #48]	@ (8000294 <MX_GPIO_Init+0x94>)
 8000264:	f002 ff62 	bl	800312c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000268:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800026c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800026e:	2301      	movs	r3, #1
 8000270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000272:	2300      	movs	r3, #0
 8000274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000276:	2302      	movs	r3, #2
 8000278:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800027a:	f107 0310 	add.w	r3, r7, #16
 800027e:	4619      	mov	r1, r3
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <MX_GPIO_Init+0x94>)
 8000282:	f002 fdcf 	bl	8002e24 <HAL_GPIO_Init>

}
 8000286:	bf00      	nop
 8000288:	3720      	adds	r7, #32
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	40021000 	.word	0x40021000
 8000294:	40011000 	.word	0x40011000

08000298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029c:	f002 f98c 	bl	80025b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a0:	f000 f81a 	bl	80002d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a4:	f7ff ffac 	bl	8000200 <MX_GPIO_Init>
  MX_DMA_Init();
 80002a8:	f7ff ff84 	bl	80001b4 <MX_DMA_Init>
  MX_TIM1_Init();
 80002ac:	f001 ff98 	bl	80021e0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80002b0:	f002 f88a 	bl	80023c8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80002b4:	f001 ffe4 	bl	8002280 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

//  HAL_TIM_Base_Start_IT(&htim1);
  HAL_TIM_Base_Start_IT(&htim2);
 80002b8:	4806      	ldr	r0, [pc, #24]	@ (80002d4 <main+0x3c>)
 80002ba:	f003 fbc9 	bl	8003a50 <HAL_TIM_Base_Start_IT>

  setup();
 80002be:	f001 f98b 	bl	80015d8 <setup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  loop();
 80002c2:	f001 f999 	bl	80015f8 <loop>

	  HAL_Delay(1000);
 80002c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002ca:	f002 f9d7 	bl	800267c <HAL_Delay>
	  loop();
 80002ce:	bf00      	nop
 80002d0:	e7f7      	b.n	80002c2 <main+0x2a>
 80002d2:	bf00      	nop
 80002d4:	20000a40 	.word	0x20000a40

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b090      	sub	sp, #64	@ 0x40
 80002dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002de:	f107 0318 	add.w	r3, r7, #24
 80002e2:	2228      	movs	r2, #40	@ 0x28
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f004 ff6c 	bl	80051c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
 80002f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002fa:	2301      	movs	r3, #1
 80002fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000302:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000304:	2300      	movs	r3, #0
 8000306:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000308:	2301      	movs	r3, #1
 800030a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030c:	2302      	movs	r3, #2
 800030e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000310:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000314:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000316:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800031a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031c:	f107 0318 	add.w	r3, r7, #24
 8000320:	4618      	mov	r0, r3
 8000322:	f002 ff35 	bl	8003190 <HAL_RCC_OscConfig>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800032c:	f000 f862 	bl	80003f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000330:	230f      	movs	r3, #15
 8000332:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000334:	2302      	movs	r3, #2
 8000336:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800033c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000340:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	2102      	movs	r1, #2
 800034a:	4618      	mov	r0, r3
 800034c:	f003 f9a2 	bl	8003694 <HAL_RCC_ClockConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000356:	f000 f84d 	bl	80003f4 <Error_Handler>
  }
}
 800035a:	bf00      	nop
 800035c:	3740      	adds	r7, #64	@ 0x40
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
	...

08000364 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

int cnt2 = 0, timer2 = 0, timer = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	if(htim==&htim1){
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4a1a      	ldr	r2, [pc, #104]	@ (80003d8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d111      	bne.n	8000398 <HAL_TIM_PeriodElapsedCallback+0x34>

//		loop();
		if(cnt == 1000){
 8000374:	4b19      	ldr	r3, [pc, #100]	@ (80003dc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800037c:	d107      	bne.n	800038e <HAL_TIM_PeriodElapsedCallback+0x2a>
			timer++;
 800037e:	4b18      	ldr	r3, [pc, #96]	@ (80003e0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	3301      	adds	r3, #1
 8000384:	4a16      	ldr	r2, [pc, #88]	@ (80003e0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000386:	6013      	str	r3, [r2, #0]
			cnt = 0;
 8000388:	4b14      	ldr	r3, [pc, #80]	@ (80003dc <HAL_TIM_PeriodElapsedCallback+0x78>)
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
		}
		cnt++;
 800038e:	4b13      	ldr	r3, [pc, #76]	@ (80003dc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	3301      	adds	r3, #1
 8000394:	4a11      	ldr	r2, [pc, #68]	@ (80003dc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000396:	6013      	str	r3, [r2, #0]

	}

	if(htim==&htim2){
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4a12      	ldr	r2, [pc, #72]	@ (80003e4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800039c:	4293      	cmp	r3, r2
 800039e:	d116      	bne.n	80003ce <HAL_TIM_PeriodElapsedCallback+0x6a>

	//		loop();
			if(cnt2 == 1000){
 80003a0:	4b11      	ldr	r3, [pc, #68]	@ (80003e8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80003a8:	d10c      	bne.n	80003c4 <HAL_TIM_PeriodElapsedCallback+0x60>

			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80003aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003ae:	480f      	ldr	r0, [pc, #60]	@ (80003ec <HAL_TIM_PeriodElapsedCallback+0x88>)
 80003b0:	f002 fed4 	bl	800315c <HAL_GPIO_TogglePin>
			timer2++;
 80003b4:	4b0e      	ldr	r3, [pc, #56]	@ (80003f0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	3301      	adds	r3, #1
 80003ba:	4a0d      	ldr	r2, [pc, #52]	@ (80003f0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80003bc:	6013      	str	r3, [r2, #0]
			cnt2 = 0;
 80003be:	4b0a      	ldr	r3, [pc, #40]	@ (80003e8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
			}
			cnt2++;
 80003c4:	4b08      	ldr	r3, [pc, #32]	@ (80003e8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	3301      	adds	r3, #1
 80003ca:	4a07      	ldr	r2, [pc, #28]	@ (80003e8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80003cc:	6013      	str	r3, [r2, #0]

		}


}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	200009f8 	.word	0x200009f8
 80003dc:	20000088 	.word	0x20000088
 80003e0:	20000094 	.word	0x20000094
 80003e4:	20000a40 	.word	0x20000a40
 80003e8:	2000008c 	.word	0x2000008c
 80003ec:	40011000 	.word	0x40011000
 80003f0:	20000090 	.word	0x20000090

080003f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f8:	b672      	cpsid	i
}
 80003fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003fc:	bf00      	nop
 80003fe:	e7fd      	b.n	80003fc <Error_Handler+0x8>

08000400 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	2200      	movs	r2, #0
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4618      	mov	r0, r3
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr

08000420 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	4a04      	ldr	r2, [pc, #16]	@ (800043c <_ZN3ros3MsgC1Ev+0x1c>)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4618      	mov	r0, r3
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	bc80      	pop	{r7}
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	0800568c 	.word	0x0800568c

08000440 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
      data()
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff ffe8 	bl	8000420 <_ZN3ros3MsgC1Ev>
 8000450:	4a06      	ldr	r2, [pc, #24]	@ (800046c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	3304      	adds	r3, #4
 800045a:	4618      	mov	r0, r3
 800045c:	f7ff ffd0 	bl	8000400 <_ZN3ros4TimeC1Ev>
    {
    }
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4618      	mov	r0, r3
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	08005674 	.word	0x08005674

08000470 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000470:	b480      	push	{r7}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800047a:	2300      	movs	r3, #0
 800047c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	6859      	ldr	r1, [r3, #4]
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	683a      	ldr	r2, [r7, #0]
 8000486:	4413      	add	r3, r2
 8000488:	b2ca      	uxtb	r2, r1
 800048a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	685b      	ldr	r3, [r3, #4]
 8000490:	0a19      	lsrs	r1, r3, #8
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	3301      	adds	r3, #1
 8000496:	683a      	ldr	r2, [r7, #0]
 8000498:	4413      	add	r3, r2
 800049a:	b2ca      	uxtb	r2, r1
 800049c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	685b      	ldr	r3, [r3, #4]
 80004a2:	0c19      	lsrs	r1, r3, #16
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	3302      	adds	r3, #2
 80004a8:	683a      	ldr	r2, [r7, #0]
 80004aa:	4413      	add	r3, r2
 80004ac:	b2ca      	uxtb	r2, r1
 80004ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	685b      	ldr	r3, [r3, #4]
 80004b4:	0e19      	lsrs	r1, r3, #24
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	3303      	adds	r3, #3
 80004ba:	683a      	ldr	r2, [r7, #0]
 80004bc:	4413      	add	r3, r2
 80004be:	b2ca      	uxtb	r2, r1
 80004c0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	3304      	adds	r3, #4
 80004c6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	6899      	ldr	r1, [r3, #8]
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	683a      	ldr	r2, [r7, #0]
 80004d0:	4413      	add	r3, r2
 80004d2:	b2ca      	uxtb	r2, r1
 80004d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	689b      	ldr	r3, [r3, #8]
 80004da:	0a19      	lsrs	r1, r3, #8
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	3301      	adds	r3, #1
 80004e0:	683a      	ldr	r2, [r7, #0]
 80004e2:	4413      	add	r3, r2
 80004e4:	b2ca      	uxtb	r2, r1
 80004e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	689b      	ldr	r3, [r3, #8]
 80004ec:	0c19      	lsrs	r1, r3, #16
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	3302      	adds	r3, #2
 80004f2:	683a      	ldr	r2, [r7, #0]
 80004f4:	4413      	add	r3, r2
 80004f6:	b2ca      	uxtb	r2, r1
 80004f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	689b      	ldr	r3, [r3, #8]
 80004fe:	0e19      	lsrs	r1, r3, #24
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	3303      	adds	r3, #3
 8000504:	683a      	ldr	r2, [r7, #0]
 8000506:	4413      	add	r3, r2
 8000508:	b2ca      	uxtb	r2, r1
 800050a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	3304      	adds	r3, #4
 8000510:	60fb      	str	r3, [r7, #12]
      return offset;
 8000512:	68fb      	ldr	r3, [r7, #12]
    }
 8000514:	4618      	mov	r0, r3
 8000516:	3714      	adds	r7, #20
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr

0800051e <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800051e:	b480      	push	{r7}
 8000520:	b085      	sub	sp, #20
 8000522:	af00      	add	r7, sp, #0
 8000524:	6078      	str	r0, [r7, #4]
 8000526:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	683a      	ldr	r2, [r7, #0]
 8000530:	4413      	add	r3, r2
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	461a      	mov	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	685a      	ldr	r2, [r3, #4]
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	3301      	adds	r3, #1
 8000542:	6839      	ldr	r1, [r7, #0]
 8000544:	440b      	add	r3, r1
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	021b      	lsls	r3, r3, #8
 800054a:	431a      	orrs	r2, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	685a      	ldr	r2, [r3, #4]
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	3302      	adds	r3, #2
 8000558:	6839      	ldr	r1, [r7, #0]
 800055a:	440b      	add	r3, r1
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	041b      	lsls	r3, r3, #16
 8000560:	431a      	orrs	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	685a      	ldr	r2, [r3, #4]
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	3303      	adds	r3, #3
 800056e:	6839      	ldr	r1, [r7, #0]
 8000570:	440b      	add	r3, r1
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	061b      	lsls	r3, r3, #24
 8000576:	431a      	orrs	r2, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	3304      	adds	r3, #4
 8000580:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	683a      	ldr	r2, [r7, #0]
 8000586:	4413      	add	r3, r2
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	461a      	mov	r2, r3
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	689a      	ldr	r2, [r3, #8]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	3301      	adds	r3, #1
 8000598:	6839      	ldr	r1, [r7, #0]
 800059a:	440b      	add	r3, r1
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	021b      	lsls	r3, r3, #8
 80005a0:	431a      	orrs	r2, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	689a      	ldr	r2, [r3, #8]
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	3302      	adds	r3, #2
 80005ae:	6839      	ldr	r1, [r7, #0]
 80005b0:	440b      	add	r3, r1
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	041b      	lsls	r3, r3, #16
 80005b6:	431a      	orrs	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	689a      	ldr	r2, [r3, #8]
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	3303      	adds	r3, #3
 80005c4:	6839      	ldr	r1, [r7, #0]
 80005c6:	440b      	add	r3, r1
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	061b      	lsls	r3, r3, #24
 80005cc:	431a      	orrs	r2, r3
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	3304      	adds	r3, #4
 80005d6:	60fb      	str	r3, [r7, #12]
     return offset;
 80005d8:	68fb      	ldr	r3, [r7, #12]
    }
 80005da:	4618      	mov	r0, r3
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr

080005e4 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	4b02      	ldr	r3, [pc, #8]	@ (80005f8 <_ZN8std_msgs4Time7getTypeEv+0x14>)
 80005ee:	4618      	mov	r0, r3
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr
 80005f8:	0800547c 	.word	0x0800547c

080005fc <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	4b02      	ldr	r3, [pc, #8]	@ (8000610 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 8000606:	4618      	mov	r0, r3
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	0800548c 	.word	0x0800548c

08000614 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff fefe 	bl	8000420 <_ZN3ros3MsgC1Ev>
 8000624:	4a0b      	ldr	r2, [pc, #44]	@ (8000654 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	601a      	str	r2, [r3, #0]
      topic_id(0),
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2200      	movs	r2, #0
 800062e:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4a09      	ldr	r2, [pc, #36]	@ (8000658 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000634:	609a      	str	r2, [r3, #8]
      message_type(""),
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4a07      	ldr	r2, [pc, #28]	@ (8000658 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800063a:	60da      	str	r2, [r3, #12]
      md5sum(""),
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a06      	ldr	r2, [pc, #24]	@ (8000658 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000640:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2200      	movs	r2, #0
 8000646:	615a      	str	r2, [r3, #20]
    {
    }
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4618      	mov	r0, r3
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	0800565c 	.word	0x0800565c
 8000658:	080054b0 	.word	0x080054b0

0800065c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	8899      	ldrh	r1, [r3, #4]
 800066e:	69fb      	ldr	r3, [r7, #28]
 8000670:	683a      	ldr	r2, [r7, #0]
 8000672:	4413      	add	r3, r2
 8000674:	b2ca      	uxtb	r2, r1
 8000676:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	889b      	ldrh	r3, [r3, #4]
 800067c:	0a1b      	lsrs	r3, r3, #8
 800067e:	b299      	uxth	r1, r3
 8000680:	69fb      	ldr	r3, [r7, #28]
 8000682:	3301      	adds	r3, #1
 8000684:	683a      	ldr	r2, [r7, #0]
 8000686:	4413      	add	r3, r2
 8000688:	b2ca      	uxtb	r2, r1
 800068a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	3302      	adds	r3, #2
 8000690:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	689b      	ldr	r3, [r3, #8]
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff fd58 	bl	800014c <strlen>
 800069c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800069e:	69fb      	ldr	r3, [r7, #28]
 80006a0:	683a      	ldr	r2, [r7, #0]
 80006a2:	4413      	add	r3, r2
 80006a4:	69b9      	ldr	r1, [r7, #24]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 ffbc 	bl	8001624 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80006ac:	69fb      	ldr	r3, [r7, #28]
 80006ae:	3304      	adds	r3, #4
 80006b0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80006b2:	69fb      	ldr	r3, [r7, #28]
 80006b4:	683a      	ldr	r2, [r7, #0]
 80006b6:	18d0      	adds	r0, r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	689b      	ldr	r3, [r3, #8]
 80006bc:	69ba      	ldr	r2, [r7, #24]
 80006be:	4619      	mov	r1, r3
 80006c0:	f004 fdb4 	bl	800522c <memcpy>
      offset += length_topic_name;
 80006c4:	69fa      	ldr	r2, [r7, #28]
 80006c6:	69bb      	ldr	r3, [r7, #24]
 80006c8:	4413      	add	r3, r2
 80006ca:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff fd3b 	bl	800014c <strlen>
 80006d6:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80006d8:	69fb      	ldr	r3, [r7, #28]
 80006da:	683a      	ldr	r2, [r7, #0]
 80006dc:	4413      	add	r3, r2
 80006de:	6979      	ldr	r1, [r7, #20]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 ff9f 	bl	8001624 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	3304      	adds	r3, #4
 80006ea:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80006ec:	69fb      	ldr	r3, [r7, #28]
 80006ee:	683a      	ldr	r2, [r7, #0]
 80006f0:	18d0      	adds	r0, r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	68db      	ldr	r3, [r3, #12]
 80006f6:	697a      	ldr	r2, [r7, #20]
 80006f8:	4619      	mov	r1, r3
 80006fa:	f004 fd97 	bl	800522c <memcpy>
      offset += length_message_type;
 80006fe:	69fa      	ldr	r2, [r7, #28]
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	4413      	add	r3, r2
 8000704:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	691b      	ldr	r3, [r3, #16]
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff fd1e 	bl	800014c <strlen>
 8000710:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	683a      	ldr	r2, [r7, #0]
 8000716:	4413      	add	r3, r2
 8000718:	6939      	ldr	r1, [r7, #16]
 800071a:	4618      	mov	r0, r3
 800071c:	f000 ff82 	bl	8001624 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000720:	69fb      	ldr	r3, [r7, #28]
 8000722:	3304      	adds	r3, #4
 8000724:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	683a      	ldr	r2, [r7, #0]
 800072a:	18d0      	adds	r0, r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	691b      	ldr	r3, [r3, #16]
 8000730:	693a      	ldr	r2, [r7, #16]
 8000732:	4619      	mov	r1, r3
 8000734:	f004 fd7a 	bl	800522c <memcpy>
      offset += length_md5sum;
 8000738:	69fa      	ldr	r2, [r7, #28]
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	4413      	add	r3, r2
 800073e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	695b      	ldr	r3, [r3, #20]
 8000744:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000746:	68f9      	ldr	r1, [r7, #12]
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	683a      	ldr	r2, [r7, #0]
 800074c:	4413      	add	r3, r2
 800074e:	b2ca      	uxtb	r2, r1
 8000750:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	0a19      	lsrs	r1, r3, #8
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	3301      	adds	r3, #1
 800075a:	683a      	ldr	r2, [r7, #0]
 800075c:	4413      	add	r3, r2
 800075e:	b2ca      	uxtb	r2, r1
 8000760:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	0c19      	lsrs	r1, r3, #16
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	3302      	adds	r3, #2
 800076a:	683a      	ldr	r2, [r7, #0]
 800076c:	4413      	add	r3, r2
 800076e:	b2ca      	uxtb	r2, r1
 8000770:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	0e19      	lsrs	r1, r3, #24
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	3303      	adds	r3, #3
 800077a:	683a      	ldr	r2, [r7, #0]
 800077c:	4413      	add	r3, r2
 800077e:	b2ca      	uxtb	r2, r1
 8000780:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	3304      	adds	r3, #4
 8000786:	61fb      	str	r3, [r7, #28]
      return offset;
 8000788:	69fb      	ldr	r3, [r7, #28]
    }
 800078a:	4618      	mov	r0, r3
 800078c:	3720      	adds	r7, #32
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000792:	b580      	push	{r7, lr}
 8000794:	b08a      	sub	sp, #40	@ 0x28
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
 800079a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80007a0:	69bb      	ldr	r3, [r7, #24]
 80007a2:	683a      	ldr	r2, [r7, #0]
 80007a4:	4413      	add	r3, r2
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	461a      	mov	r2, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	889b      	ldrh	r3, [r3, #4]
 80007b2:	b21a      	sxth	r2, r3
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	3301      	adds	r3, #1
 80007b8:	6839      	ldr	r1, [r7, #0]
 80007ba:	440b      	add	r3, r1
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	021b      	lsls	r3, r3, #8
 80007c0:	b21b      	sxth	r3, r3
 80007c2:	4313      	orrs	r3, r2
 80007c4:	b21b      	sxth	r3, r3
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	3302      	adds	r3, #2
 80007d0:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80007d2:	69bb      	ldr	r3, [r7, #24]
 80007d4:	683a      	ldr	r2, [r7, #0]
 80007d6:	441a      	add	r2, r3
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4611      	mov	r1, r2
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 ff3e 	bl	8001660 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	3304      	adds	r3, #4
 80007e8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80007ee:	e00b      	b.n	8000808 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 80007f0:	683a      	ldr	r2, [r7, #0]
 80007f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007f4:	441a      	add	r2, r3
 80007f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007f8:	3b01      	subs	r3, #1
 80007fa:	6839      	ldr	r1, [r7, #0]
 80007fc:	440b      	add	r3, r1
 80007fe:	7812      	ldrb	r2, [r2, #0]
 8000800:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000804:	3301      	adds	r3, #1
 8000806:	627b      	str	r3, [r7, #36]	@ 0x24
 8000808:	69ba      	ldr	r2, [r7, #24]
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	4413      	add	r3, r2
 800080e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000810:	429a      	cmp	r2, r3
 8000812:	d3ed      	bcc.n	80007f0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000814:	69ba      	ldr	r2, [r7, #24]
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	4413      	add	r3, r2
 800081a:	3b01      	subs	r3, #1
 800081c:	683a      	ldr	r2, [r7, #0]
 800081e:	4413      	add	r3, r2
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	3b01      	subs	r3, #1
 8000828:	683a      	ldr	r2, [r7, #0]
 800082a:	441a      	add	r2, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000830:	69ba      	ldr	r2, [r7, #24]
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	4413      	add	r3, r2
 8000836:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000838:	69bb      	ldr	r3, [r7, #24]
 800083a:	683a      	ldr	r2, [r7, #0]
 800083c:	441a      	add	r2, r3
 800083e:	f107 0310 	add.w	r3, r7, #16
 8000842:	4611      	mov	r1, r2
 8000844:	4618      	mov	r0, r3
 8000846:	f000 ff0b 	bl	8001660 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800084a:	69bb      	ldr	r3, [r7, #24]
 800084c:	3304      	adds	r3, #4
 800084e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	623b      	str	r3, [r7, #32]
 8000854:	e00b      	b.n	800086e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8000856:	683a      	ldr	r2, [r7, #0]
 8000858:	6a3b      	ldr	r3, [r7, #32]
 800085a:	441a      	add	r2, r3
 800085c:	6a3b      	ldr	r3, [r7, #32]
 800085e:	3b01      	subs	r3, #1
 8000860:	6839      	ldr	r1, [r7, #0]
 8000862:	440b      	add	r3, r1
 8000864:	7812      	ldrb	r2, [r2, #0]
 8000866:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000868:	6a3b      	ldr	r3, [r7, #32]
 800086a:	3301      	adds	r3, #1
 800086c:	623b      	str	r3, [r7, #32]
 800086e:	69ba      	ldr	r2, [r7, #24]
 8000870:	693b      	ldr	r3, [r7, #16]
 8000872:	4413      	add	r3, r2
 8000874:	6a3a      	ldr	r2, [r7, #32]
 8000876:	429a      	cmp	r2, r3
 8000878:	d3ed      	bcc.n	8000856 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 800087a:	69ba      	ldr	r2, [r7, #24]
 800087c:	693b      	ldr	r3, [r7, #16]
 800087e:	4413      	add	r3, r2
 8000880:	3b01      	subs	r3, #1
 8000882:	683a      	ldr	r2, [r7, #0]
 8000884:	4413      	add	r3, r2
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800088a:	69bb      	ldr	r3, [r7, #24]
 800088c:	3b01      	subs	r3, #1
 800088e:	683a      	ldr	r2, [r7, #0]
 8000890:	441a      	add	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000896:	69ba      	ldr	r2, [r7, #24]
 8000898:	693b      	ldr	r3, [r7, #16]
 800089a:	4413      	add	r3, r2
 800089c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800089e:	69bb      	ldr	r3, [r7, #24]
 80008a0:	683a      	ldr	r2, [r7, #0]
 80008a2:	441a      	add	r2, r3
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	4611      	mov	r1, r2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 fed8 	bl	8001660 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80008b0:	69bb      	ldr	r3, [r7, #24]
 80008b2:	3304      	adds	r3, #4
 80008b4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80008b6:	69bb      	ldr	r3, [r7, #24]
 80008b8:	61fb      	str	r3, [r7, #28]
 80008ba:	e00b      	b.n	80008d4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 80008bc:	683a      	ldr	r2, [r7, #0]
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	441a      	add	r2, r3
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	3b01      	subs	r3, #1
 80008c6:	6839      	ldr	r1, [r7, #0]
 80008c8:	440b      	add	r3, r1
 80008ca:	7812      	ldrb	r2, [r2, #0]
 80008cc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	3301      	adds	r3, #1
 80008d2:	61fb      	str	r3, [r7, #28]
 80008d4:	69ba      	ldr	r2, [r7, #24]
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	4413      	add	r3, r2
 80008da:	69fa      	ldr	r2, [r7, #28]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d3ed      	bcc.n	80008bc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80008e0:	69ba      	ldr	r2, [r7, #24]
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	4413      	add	r3, r2
 80008e6:	3b01      	subs	r3, #1
 80008e8:	683a      	ldr	r2, [r7, #0]
 80008ea:	4413      	add	r3, r2
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	3b01      	subs	r3, #1
 80008f4:	683a      	ldr	r2, [r7, #0]
 80008f6:	441a      	add	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80008fc:	69ba      	ldr	r2, [r7, #24]
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	4413      	add	r3, r2
 8000902:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	69ba      	ldr	r2, [r7, #24]
 800090c:	6839      	ldr	r1, [r7, #0]
 800090e:	440a      	add	r2, r1
 8000910:	7812      	ldrb	r2, [r2, #0]
 8000912:	4313      	orrs	r3, r2
 8000914:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	3301      	adds	r3, #1
 800091c:	6839      	ldr	r1, [r7, #0]
 800091e:	440b      	add	r3, r1
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	021b      	lsls	r3, r3, #8
 8000924:	4313      	orrs	r3, r2
 8000926:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000928:	68ba      	ldr	r2, [r7, #8]
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	3302      	adds	r3, #2
 800092e:	6839      	ldr	r1, [r7, #0]
 8000930:	440b      	add	r3, r1
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	041b      	lsls	r3, r3, #16
 8000936:	4313      	orrs	r3, r2
 8000938:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800093a:	68ba      	ldr	r2, [r7, #8]
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	3303      	adds	r3, #3
 8000940:	6839      	ldr	r1, [r7, #0]
 8000942:	440b      	add	r3, r1
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	061b      	lsls	r3, r3, #24
 8000948:	4313      	orrs	r3, r2
 800094a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800094c:	68ba      	ldr	r2, [r7, #8]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000952:	69bb      	ldr	r3, [r7, #24]
 8000954:	3304      	adds	r3, #4
 8000956:	61bb      	str	r3, [r7, #24]
     return offset;
 8000958:	69bb      	ldr	r3, [r7, #24]
    }
 800095a:	4618      	mov	r0, r3
 800095c:	3728      	adds	r7, #40	@ 0x28
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	4b02      	ldr	r3, [pc, #8]	@ (8000978 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 800096e:	4618      	mov	r0, r3
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	080054b4 	.word	0x080054b4

0800097c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	4b02      	ldr	r3, [pc, #8]	@ (8000990 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 8000986:	4618      	mov	r0, r3
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	080054d0 	.word	0x080054d0

08000994 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fd3e 	bl	8000420 <_ZN3ros3MsgC1Ev>
 80009a4:	4a06      	ldr	r2, [pc, #24]	@ (80009c0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	601a      	str	r2, [r3, #0]
      level(0),
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2200      	movs	r2, #0
 80009ae:	711a      	strb	r2, [r3, #4]
      msg("")
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a04      	ldr	r2, [pc, #16]	@ (80009c4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80009b4:	609a      	str	r2, [r3, #8]
    {
    }
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4618      	mov	r0, r3
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	08005644 	.word	0x08005644
 80009c4:	080054b0 	.word	0x080054b0

080009c8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	683a      	ldr	r2, [r7, #0]
 80009da:	4413      	add	r3, r2
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	7912      	ldrb	r2, [r2, #4]
 80009e0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	3301      	adds	r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff fbad 	bl	800014c <strlen>
 80009f2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	683a      	ldr	r2, [r7, #0]
 80009f8:	4413      	add	r3, r2
 80009fa:	68b9      	ldr	r1, [r7, #8]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f000 fe11 	bl	8001624 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	3304      	adds	r3, #4
 8000a06:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	683a      	ldr	r2, [r7, #0]
 8000a0c:	18d0      	adds	r0, r2, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	4619      	mov	r1, r3
 8000a16:	f004 fc09 	bl	800522c <memcpy>
      offset += length_msg;
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	4413      	add	r3, r2
 8000a20:	60fb      	str	r3, [r7, #12]
      return offset;
 8000a22:	68fb      	ldr	r3, [r7, #12]
    }
 8000a24:	4618      	mov	r0, r3
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	683a      	ldr	r2, [r7, #0]
 8000a3e:	4413      	add	r3, r2
 8000a40:	781a      	ldrb	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	683a      	ldr	r2, [r7, #0]
 8000a50:	441a      	add	r2, r3
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	4611      	mov	r1, r2
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f000 fe01 	bl	8001660 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	3304      	adds	r3, #4
 8000a62:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	e00b      	b.n	8000a82 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8000a6a:	683a      	ldr	r2, [r7, #0]
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	441a      	add	r2, r3
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	3b01      	subs	r3, #1
 8000a74:	6839      	ldr	r1, [r7, #0]
 8000a76:	440b      	add	r3, r1
 8000a78:	7812      	ldrb	r2, [r2, #0]
 8000a7a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4413      	add	r3, r2
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d3ed      	bcc.n	8000a6a <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	4413      	add	r3, r2
 8000a94:	3b01      	subs	r3, #1
 8000a96:	683a      	ldr	r2, [r7, #0]
 8000a98:	4413      	add	r3, r2
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	683a      	ldr	r2, [r7, #0]
 8000aa4:	441a      	add	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	4413      	add	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
     return offset;
 8000ab2:	693b      	ldr	r3, [r7, #16]
    }
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3718      	adds	r7, #24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	4b02      	ldr	r3, [pc, #8]	@ (8000ad0 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	080054f4 	.word	0x080054f4

08000ad4 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	4b02      	ldr	r3, [pc, #8]	@ (8000ae8 <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 8000ade:	4618      	mov	r0, r3
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	08005508 	.word	0x08005508

08000aec <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fc92 	bl	8000420 <_ZN3ros3MsgC1Ev>
 8000afc:	4a11      	ldr	r2, [pc, #68]	@ (8000b44 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2200      	movs	r2, #0
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f04f 0200 	mov.w	r2, #0
 8000b20:	615a      	str	r2, [r3, #20]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2200      	movs	r2, #0
 8000b32:	621a      	str	r2, [r3, #32]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2200      	movs	r2, #0
 8000b38:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	0800562c 	.word	0x0800562c

08000b48 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	@ 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6859      	ldr	r1, [r3, #4]
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b5c:	683a      	ldr	r2, [r7, #0]
 8000b5e:	4413      	add	r3, r2
 8000b60:	b2ca      	uxtb	r2, r1
 8000b62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	0a19      	lsrs	r1, r3, #8
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	683a      	ldr	r2, [r7, #0]
 8000b70:	4413      	add	r3, r2
 8000b72:	b2ca      	uxtb	r2, r1
 8000b74:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	0c19      	lsrs	r1, r3, #16
 8000b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b7e:	3302      	adds	r3, #2
 8000b80:	683a      	ldr	r2, [r7, #0]
 8000b82:	4413      	add	r3, r2
 8000b84:	b2ca      	uxtb	r2, r1
 8000b86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	0e19      	lsrs	r1, r3, #24
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b90:	3303      	adds	r3, #3
 8000b92:	683a      	ldr	r2, [r7, #0]
 8000b94:	4413      	add	r3, r2
 8000b96:	b2ca      	uxtb	r2, r1
 8000b98:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
 8000ba4:	e02a      	b.n	8000bfc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	68da      	ldr	r2, [r3, #12]
 8000baa:	6a3b      	ldr	r3, [r7, #32]
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	4413      	add	r3, r2
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000bb4:	6939      	ldr	r1, [r7, #16]
 8000bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb8:	683a      	ldr	r2, [r7, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	b2ca      	uxtb	r2, r1
 8000bbe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	0a19      	lsrs	r1, r3, #8
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	683a      	ldr	r2, [r7, #0]
 8000bca:	4413      	add	r3, r2
 8000bcc:	b2ca      	uxtb	r2, r1
 8000bce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	0c19      	lsrs	r1, r3, #16
 8000bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd6:	3302      	adds	r3, #2
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	4413      	add	r3, r2
 8000bdc:	b2ca      	uxtb	r2, r1
 8000bde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	0e19      	lsrs	r1, r3, #24
 8000be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be6:	3303      	adds	r3, #3
 8000be8:	683a      	ldr	r2, [r7, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	b2ca      	uxtb	r2, r1
 8000bee:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf2:	3304      	adds	r3, #4
 8000bf4:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000bf6:	6a3b      	ldr	r3, [r7, #32]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	623b      	str	r3, [r7, #32]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	6a3a      	ldr	r2, [r7, #32]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d3cf      	bcc.n	8000ba6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6919      	ldr	r1, [r3, #16]
 8000c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c0c:	683a      	ldr	r2, [r7, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	b2ca      	uxtb	r2, r1
 8000c12:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	691b      	ldr	r3, [r3, #16]
 8000c18:	0a19      	lsrs	r1, r3, #8
 8000c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	683a      	ldr	r2, [r7, #0]
 8000c20:	4413      	add	r3, r2
 8000c22:	b2ca      	uxtb	r2, r1
 8000c24:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	691b      	ldr	r3, [r3, #16]
 8000c2a:	0c19      	lsrs	r1, r3, #16
 8000c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c2e:	3302      	adds	r3, #2
 8000c30:	683a      	ldr	r2, [r7, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	b2ca      	uxtb	r2, r1
 8000c36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	691b      	ldr	r3, [r3, #16]
 8000c3c:	0e19      	lsrs	r1, r3, #24
 8000c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c40:	3303      	adds	r3, #3
 8000c42:	683a      	ldr	r2, [r7, #0]
 8000c44:	4413      	add	r3, r2
 8000c46:	b2ca      	uxtb	r2, r1
 8000c48:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
 8000c54:	e02a      	b.n	8000cac <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	699a      	ldr	r2, [r3, #24]
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	4413      	add	r3, r2
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000c64:	68f9      	ldr	r1, [r7, #12]
 8000c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c68:	683a      	ldr	r2, [r7, #0]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	b2ca      	uxtb	r2, r1
 8000c6e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	0a19      	lsrs	r1, r3, #8
 8000c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c76:	3301      	adds	r3, #1
 8000c78:	683a      	ldr	r2, [r7, #0]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	b2ca      	uxtb	r2, r1
 8000c7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	0c19      	lsrs	r1, r3, #16
 8000c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c86:	3302      	adds	r3, #2
 8000c88:	683a      	ldr	r2, [r7, #0]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	b2ca      	uxtb	r2, r1
 8000c8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	0e19      	lsrs	r1, r3, #24
 8000c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c96:	3303      	adds	r3, #3
 8000c98:	683a      	ldr	r2, [r7, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	b2ca      	uxtb	r2, r1
 8000c9e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ca2:	3304      	adds	r3, #4
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	61fb      	str	r3, [r7, #28]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	691b      	ldr	r3, [r3, #16]
 8000cb0:	69fa      	ldr	r2, [r7, #28]
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d3cf      	bcc.n	8000c56 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	69d9      	ldr	r1, [r3, #28]
 8000cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cbc:	683a      	ldr	r2, [r7, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	b2ca      	uxtb	r2, r1
 8000cc2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	69db      	ldr	r3, [r3, #28]
 8000cc8:	0a19      	lsrs	r1, r3, #8
 8000cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ccc:	3301      	adds	r3, #1
 8000cce:	683a      	ldr	r2, [r7, #0]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	b2ca      	uxtb	r2, r1
 8000cd4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	0c19      	lsrs	r1, r3, #16
 8000cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cde:	3302      	adds	r3, #2
 8000ce0:	683a      	ldr	r2, [r7, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	b2ca      	uxtb	r2, r1
 8000ce6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	69db      	ldr	r3, [r3, #28]
 8000cec:	0e19      	lsrs	r1, r3, #24
 8000cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cf0:	3303      	adds	r3, #3
 8000cf2:	683a      	ldr	r2, [r7, #0]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	b2ca      	uxtb	r2, r1
 8000cf8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000d00:	2300      	movs	r3, #0
 8000d02:	61bb      	str	r3, [r7, #24]
 8000d04:	e027      	b.n	8000d56 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	4413      	add	r3, r2
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fa1a 	bl	800014c <strlen>
 8000d18:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d1c:	683a      	ldr	r2, [r7, #0]
 8000d1e:	4413      	add	r3, r2
 8000d20:	6979      	ldr	r1, [r7, #20]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 fc7e 	bl	8001624 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d2a:	3304      	adds	r3, #4
 8000d2c:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d30:	683a      	ldr	r2, [r7, #0]
 8000d32:	18d0      	adds	r0, r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	4413      	add	r3, r2
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	697a      	ldr	r2, [r7, #20]
 8000d42:	4619      	mov	r1, r3
 8000d44:	f004 fa72 	bl	800522c <memcpy>
      offset += length_stringsi;
 8000d48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	3301      	adds	r3, #1
 8000d54:	61bb      	str	r3, [r7, #24]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d3d2      	bcc.n	8000d06 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8000d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8000d62:	4618      	mov	r0, r3
 8000d64:	3728      	adds	r7, #40	@ 0x28
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b08e      	sub	sp, #56	@ 0x38
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
 8000d72:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d7a:	683a      	ldr	r2, [r7, #0]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d84:	3301      	adds	r3, #1
 8000d86:	683a      	ldr	r2, [r7, #0]
 8000d88:	4413      	add	r3, r2
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	021b      	lsls	r3, r3, #8
 8000d8e:	6a3a      	ldr	r2, [r7, #32]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d96:	3302      	adds	r3, #2
 8000d98:	683a      	ldr	r2, [r7, #0]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	041b      	lsls	r3, r3, #16
 8000da0:	6a3a      	ldr	r2, [r7, #32]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000da8:	3303      	adds	r3, #3
 8000daa:	683a      	ldr	r2, [r7, #0]
 8000dac:	4413      	add	r3, r2
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	061b      	lsls	r3, r3, #24
 8000db2:	6a3a      	ldr	r2, [r7, #32]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8000db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dba:	3304      	adds	r3, #4
 8000dbc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	6a3a      	ldr	r2, [r7, #32]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d90a      	bls.n	8000dde <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	68da      	ldr	r2, [r3, #12]
 8000dcc:	6a3b      	ldr	r3, [r7, #32]
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4610      	mov	r0, r2
 8000dd4:	f004 f9c0 	bl	8005158 <realloc>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6a3a      	ldr	r2, [r7, #32]
 8000de2:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8000de4:	2300      	movs	r3, #0
 8000de6:	633b      	str	r3, [r7, #48]	@ 0x30
 8000de8:	e035      	b.n	8000e56 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000df2:	6839      	ldr	r1, [r7, #0]
 8000df4:	440a      	add	r2, r1
 8000df6:	7812      	ldrb	r2, [r2, #0]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000dfc:	697a      	ldr	r2, [r7, #20]
 8000dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e00:	3301      	adds	r3, #1
 8000e02:	6839      	ldr	r1, [r7, #0]
 8000e04:	440b      	add	r3, r1
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	021b      	lsls	r3, r3, #8
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000e0e:	697a      	ldr	r2, [r7, #20]
 8000e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e12:	3302      	adds	r3, #2
 8000e14:	6839      	ldr	r1, [r7, #0]
 8000e16:	440b      	add	r3, r1
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	041b      	lsls	r3, r3, #16
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e24:	3303      	adds	r3, #3
 8000e26:	6839      	ldr	r1, [r7, #0]
 8000e28:	440b      	add	r3, r1
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	061b      	lsls	r3, r3, #24
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8000e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e3a:	3304      	adds	r3, #4
 8000e3c:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	68da      	ldr	r2, [r3, #12]
 8000e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	4413      	add	r3, r2
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	3208      	adds	r2, #8
 8000e4c:	6812      	ldr	r2, [r2, #0]
 8000e4e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8000e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e52:	3301      	adds	r3, #1
 8000e54:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d3c4      	bcc.n	8000dea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e62:	683a      	ldr	r2, [r7, #0]
 8000e64:	4413      	add	r3, r2
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	683a      	ldr	r2, [r7, #0]
 8000e70:	4413      	add	r3, r2
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	021b      	lsls	r3, r3, #8
 8000e76:	69fa      	ldr	r2, [r7, #28]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e7e:	3302      	adds	r3, #2
 8000e80:	683a      	ldr	r2, [r7, #0]
 8000e82:	4413      	add	r3, r2
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	041b      	lsls	r3, r3, #16
 8000e88:	69fa      	ldr	r2, [r7, #28]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e90:	3303      	adds	r3, #3
 8000e92:	683a      	ldr	r2, [r7, #0]
 8000e94:	4413      	add	r3, r2
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	061b      	lsls	r3, r3, #24
 8000e9a:	69fa      	ldr	r2, [r7, #28]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8000ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ea2:	3304      	adds	r3, #4
 8000ea4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	691b      	ldr	r3, [r3, #16]
 8000eaa:	69fa      	ldr	r2, [r7, #28]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d90a      	bls.n	8000ec6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	699a      	ldr	r2, [r3, #24]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4610      	mov	r0, r2
 8000ebc:	f004 f94c 	bl	8005158 <realloc>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69fa      	ldr	r2, [r7, #28]
 8000eca:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ed0:	e035      	b.n	8000f3e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000eda:	6839      	ldr	r1, [r7, #0]
 8000edc:	440a      	add	r2, r1
 8000ede:	7812      	ldrb	r2, [r2, #0]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ee8:	3301      	adds	r3, #1
 8000eea:	6839      	ldr	r1, [r7, #0]
 8000eec:	440b      	add	r3, r1
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	021b      	lsls	r3, r3, #8
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000efa:	3302      	adds	r3, #2
 8000efc:	6839      	ldr	r1, [r7, #0]
 8000efe:	440b      	add	r3, r1
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	041b      	lsls	r3, r3, #16
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f0c:	3303      	adds	r3, #3
 8000f0e:	6839      	ldr	r1, [r7, #0]
 8000f10:	440b      	add	r3, r1
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	061b      	lsls	r3, r3, #24
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8000f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f22:	3304      	adds	r3, #4
 8000f24:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	699a      	ldr	r2, [r3, #24]
 8000f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	4413      	add	r3, r2
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	3214      	adds	r2, #20
 8000f34:	6812      	ldr	r2, [r2, #0]
 8000f36:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8000f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	691b      	ldr	r3, [r3, #16]
 8000f42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d3c4      	bcc.n	8000ed2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f54:	3301      	adds	r3, #1
 8000f56:	683a      	ldr	r2, [r7, #0]
 8000f58:	4413      	add	r3, r2
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	021b      	lsls	r3, r3, #8
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f66:	3302      	adds	r3, #2
 8000f68:	683a      	ldr	r2, [r7, #0]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	041b      	lsls	r3, r3, #16
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f78:	3303      	adds	r3, #3
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	061b      	lsls	r3, r3, #24
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8000f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f8a:	3304      	adds	r3, #4
 8000f8c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d90a      	bls.n	8000fae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4610      	mov	r0, r2
 8000fa4:	f004 f8d8 	bl	8005158 <realloc>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fb8:	e03e      	b.n	8001038 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8000fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fbc:	683a      	ldr	r2, [r7, #0]
 8000fbe:	441a      	add	r2, r3
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 fb4a 	bl	8001660 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fce:	3304      	adds	r3, #4
 8000fd0:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8000fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fd6:	e00b      	b.n	8000ff0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fdc:	441a      	add	r2, r3
 8000fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	6839      	ldr	r1, [r7, #0]
 8000fe4:	440b      	add	r3, r1
 8000fe6:	7812      	ldrb	r2, [r2, #0]
 8000fe8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8000fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fec:	3301      	adds	r3, #1
 8000fee:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ff0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d3ed      	bcc.n	8000fd8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8000ffc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	4413      	add	r3, r2
 8001002:	3b01      	subs	r3, #1
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	4413      	add	r3, r2
 8001008:	2200      	movs	r2, #0
 800100a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800100c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800100e:	3b01      	subs	r3, #1
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	441a      	add	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001018:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	4413      	add	r3, r2
 800101e:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	3220      	adds	r2, #32
 800102e:	6812      	ldr	r2, [r2, #0]
 8001030:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001034:	3301      	adds	r3, #1
 8001036:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69db      	ldr	r3, [r3, #28]
 800103c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800103e:	429a      	cmp	r2, r3
 8001040:	d3bb      	bcc.n	8000fba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8001042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8001044:	4618      	mov	r0, r3
 8001046:	3738      	adds	r7, #56	@ 0x38
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	4b02      	ldr	r3, [pc, #8]	@ (8001060 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	080055c8 	.word	0x080055c8

08001064 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	4b02      	ldr	r3, [pc, #8]	@ (8001078 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr
 8001078:	0800552c 	.word	0x0800552c

0800107c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	68ba      	ldr	r2, [r7, #8]
 800108e:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	683a      	ldr	r2, [r7, #0]
 800109a:	611a      	str	r2, [r3, #16]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4618      	mov	r0, r3
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr

080010a8 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68d8      	ldr	r0, [r3, #12]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	6891      	ldr	r1, [r2, #8]
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	4798      	blx	r3
 80010c6:	4603      	mov	r3, r0
  };
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	691b      	ldr	r3, [r3, #16]
  }
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr

080010e6 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80010fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr
	...

0800110c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a0a      	ldr	r2, [pc, #40]	@ (8001140 <_ZN13STM32HardwareC1Ev+0x34>)
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
    }
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4618      	mov	r0, r3
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000a88 	.word	0x20000a88

08001144 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f000 f804 	bl	800115a <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6818      	ldr	r0, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3304      	adds	r3, #4
 800116a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800116e:	4619      	mov	r1, r3
 8001170:	f003 f8d0 	bl	8004314 <HAL_UART_Receive_DMA>
    }
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <_ZN13STM32Hardware4readEv>:

    int read(){
 800117c:	b590      	push	{r4, r7, lr}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001184:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001188:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f8d3 4204 	ldr.w	r4, [r3, #516]	@ 0x204
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff ffa8 	bl	80010e6 <_ZN13STM32Hardware10getRdmaIndEv>
 8001196:	4603      	mov	r3, r0
 8001198:	429c      	cmp	r4, r3
 800119a:	bf14      	ite	ne
 800119c:	2301      	movne	r3, #1
 800119e:	2300      	moveq	r3, #0
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d012      	beq.n	80011cc <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80011ac:	1c59      	adds	r1, r3, #1
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	f8c2 1204 	str.w	r1, [r2, #516]	@ 0x204
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	4413      	add	r3, r2
 80011b8:	791b      	ldrb	r3, [r3, #4]
 80011ba:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80011c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      return c;
 80011cc:	68fb      	ldr	r3, [r7, #12]
    }
 80011ce:	4618      	mov	r0, r3
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd90      	pop	{r4, r7, pc}
	...

080011d8 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b20      	cmp	r3, #32
 80011ec:	d108      	bne.n	8001200 <_ZN13STM32Hardware5flushEv+0x28>
 80011ee:	4b28      	ldr	r3, [pc, #160]	@ (8001290 <_ZN13STM32Hardware5flushEv+0xb8>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	f083 0301 	eor.w	r3, r3, #1
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <_ZN13STM32Hardware5flushEv+0x28>
 80011fc:	2301      	movs	r3, #1
 80011fe:	e000      	b.n	8001202 <_ZN13STM32Hardware5flushEv+0x2a>
 8001200:	2300      	movs	r3, #0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d03f      	beq.n	8001286 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8001206:	4b22      	ldr	r3, [pc, #136]	@ (8001290 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001208:	2201      	movs	r2, #1
 800120a:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001218:	429a      	cmp	r2, r3
 800121a:	d031      	beq.n	8001280 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001228:	429a      	cmp	r2, r3
 800122a:	d20a      	bcs.n	8001242 <_ZN13STM32Hardware5flushEv+0x6a>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001232:	b29a      	uxth	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800123a:	b29b      	uxth	r3, r3
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	b29b      	uxth	r3, r3
 8001240:	e006      	b.n	8001250 <_ZN13STM32Hardware5flushEv+0x78>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001248:	b29b      	uxth	r3, r3
 800124a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800124e:	b29b      	uxth	r3, r3
 8001250:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6818      	ldr	r0, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800125c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	4413      	add	r3, r2
 8001264:	89fa      	ldrh	r2, [r7, #14]
 8001266:	4619      	mov	r1, r3
 8001268:	f002 ffe4 	bl	8004234 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8001272:	89fb      	ldrh	r3, [r7, #14]
 8001274:	4413      	add	r3, r2
 8001276:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
        }
        mutex = false;
 8001280:	4b03      	ldr	r3, [pc, #12]	@ (8001290 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
      }
    }
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000098 	.word	0x20000098

08001294 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
      int n = length;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012aa:	bfa8      	it	ge
 80012ac:	f44f 7300 	movge.w	r3, #512	@ 0x200
 80012b0:	617b      	str	r3, [r7, #20]

      int n_tail = n <= (int)(tbuflen - twind) ? n : (int)(tbuflen - twind);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80012b8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80012bc:	461a      	mov	r2, r3
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	4293      	cmp	r3, r2
 80012c2:	bfa8      	it	ge
 80012c4:	4613      	movge	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80012ce:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	4413      	add	r3, r2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	68b9      	ldr	r1, [r7, #8]
 80012da:	4618      	mov	r0, r3
 80012dc:	f003 ffa6 	bl	800522c <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	4413      	add	r3, r2
 80012ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

      if(n != n_tail){
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d00b      	beq.n	8001314 <_ZN13STM32Hardware5writeEPhi+0x80>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f503 7002 	add.w	r0, r3, #520	@ 0x208
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	68ba      	ldr	r2, [r7, #8]
 8001306:	18d1      	adds	r1, r2, r3
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	461a      	mov	r2, r3
 8001310:	f003 ff8c 	bl	800522c <memcpy>
      }

      flush();
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	f7ff ff5f 	bl	80011d8 <_ZN13STM32Hardware5flushEv>
    }
 800131a:	bf00      	nop
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	f001 f99d 	bl	8002668 <HAL_GetTick>
 800132e:	4603      	mov	r3, r0
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
      data("")
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f86c 	bl	8000420 <_ZN3ros3MsgC1Ev>
 8001348:	4a05      	ldr	r2, [pc, #20]	@ (8001360 <_ZN8std_msgs6StringC1Ev+0x28>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a04      	ldr	r2, [pc, #16]	@ (8001364 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8001352:	605a      	str	r2, [r3, #4]
    {
    }
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	08005600 	.word	0x08005600
 8001364:	080054b0 	.word	0x080054b0

08001368 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	4618      	mov	r0, r3
 800137c:	f7fe fee6 	bl	800014c <strlen>
 8001380:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	4413      	add	r3, r2
 8001388:	68b9      	ldr	r1, [r7, #8]
 800138a:	4618      	mov	r0, r3
 800138c:	f000 f94a 	bl	8001624 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	3304      	adds	r3, #4
 8001394:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	18d0      	adds	r0, r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	68ba      	ldr	r2, [r7, #8]
 80013a2:	4619      	mov	r1, r3
 80013a4:	f003 ff42 	bl	800522c <memcpy>
      offset += length_data;
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	4413      	add	r3, r2
 80013ae:	60fb      	str	r3, [r7, #12]
      return offset;
 80013b0:	68fb      	ldr	r3, [r7, #12]
    }
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b086      	sub	sp, #24
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	441a      	add	r2, r3
 80013ce:	f107 030c 	add.w	r3, r7, #12
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 f943 	bl	8001660 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	3304      	adds	r3, #4
 80013de:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	e00b      	b.n	80013fe <_ZN8std_msgs6String11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	441a      	add	r2, r3
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	6839      	ldr	r1, [r7, #0]
 80013f2:	440b      	add	r3, r1
 80013f4:	7812      	ldrb	r2, [r2, #0]
 80013f6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	3301      	adds	r3, #1
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4413      	add	r3, r2
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	429a      	cmp	r2, r3
 8001408:	d3ed      	bcc.n	80013e6 <_ZN8std_msgs6String11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_data-1]=0;
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4413      	add	r3, r2
 8001410:	3b01      	subs	r3, #1
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	4413      	add	r3, r2
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	3b01      	subs	r3, #1
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	441a      	add	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4413      	add	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
     return offset;
 800142e:	693b      	ldr	r3, [r7, #16]
    }
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	4b02      	ldr	r3, [pc, #8]	@ (800144c <_ZN8std_msgs6String7getTypeEv+0x14>)
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	08005550 	.word	0x08005550

08001450 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	4b02      	ldr	r3, [pc, #8]	@ (8001464 <_ZN8std_msgs6String6getMD5Ev+0x14>)
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	08005560 	.word	0x08005560

08001468 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	4a04      	ldr	r2, [pc, #16]	@ (8001484 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	08005618 	.word	0x08005618

08001488 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ffe8 	bl	8001468 <_ZN3ros15NodeHandleBase_C1Ev>
 8001498:	4a36      	ldr	r2, [pc, #216]	@ (8001574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3304      	adds	r3, #4
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fe32 	bl	800110c <_ZN13STM32HardwareC1Ev>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 80014ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f003 fe75 	bl	80051c4 <memset>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 80014e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f003 fe6c 	bl	80051c4 <memset>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f603 0324 	addw	r3, r3, #2084	@ 0x824
 80014f2:	2264      	movs	r2, #100	@ 0x64
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f003 fe64 	bl	80051c4 <memset>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 8001502:	2264      	movs	r2, #100	@ 0x64
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f003 fe5c 	bl	80051c4 <memset>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f603 1314 	addw	r3, r3, #2324	@ 0x914
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fac2 	bl	8000aec <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	080055ec 	.word	0x080055ec

08001578 <HAL_UART_TxCpltCallback>:
std_msgs::String str_msg;
ros::Publisher chatter("chatter", &str_msg);
char hello[] = "Hello world!";

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a07      	ldr	r2, [pc, #28]	@ (80015a0 <HAL_UART_TxCpltCallback+0x28>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d106      	bne.n	8001596 <HAL_UART_TxCpltCallback+0x1e>
	{
		nh.getHardware()->flush();
 8001588:	4806      	ldr	r0, [pc, #24]	@ (80015a4 <HAL_UART_TxCpltCallback+0x2c>)
 800158a:	f000 f88e 	bl	80016aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800158e:	4603      	mov	r3, r0
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fe21 	bl	80011d8 <_ZN13STM32Hardware5flushEv>
	}
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000a88 	.word	0x20000a88
 80015a4:	2000009c 	.word	0x2000009c

080015a8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a07      	ldr	r2, [pc, #28]	@ (80015d0 <HAL_UART_RxCpltCallback+0x28>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d106      	bne.n	80015c6 <HAL_UART_RxCpltCallback+0x1e>
	{
		nh.getHardware()->reset_rbuf();
 80015b8:	4806      	ldr	r0, [pc, #24]	@ (80015d4 <HAL_UART_RxCpltCallback+0x2c>)
 80015ba:	f000 f876 	bl	80016aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80015be:	4603      	mov	r3, r0
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fdca 	bl	800115a <_ZN13STM32Hardware10reset_rbufEv>
	}
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000a88 	.word	0x20000a88
 80015d4:	2000009c 	.word	0x2000009c

080015d8 <setup>:

void setup(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  nh.initNode();
 80015dc:	4804      	ldr	r0, [pc, #16]	@ (80015f0 <setup+0x18>)
 80015de:	f000 f86f 	bl	80016c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(chatter);
 80015e2:	4904      	ldr	r1, [pc, #16]	@ (80015f4 <setup+0x1c>)
 80015e4:	4802      	ldr	r0, [pc, #8]	@ (80015f0 <setup+0x18>)
 80015e6:	f000 f888 	bl	80016fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	2000009c 	.word	0x2000009c
 80015f4:	200009e0 	.word	0x200009e0

080015f8 <loop>:

void loop(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  str_msg.data = hello;
 80015fc:	4b05      	ldr	r3, [pc, #20]	@ (8001614 <loop+0x1c>)
 80015fe:	4a06      	ldr	r2, [pc, #24]	@ (8001618 <loop+0x20>)
 8001600:	605a      	str	r2, [r3, #4]
  chatter.publish(&str_msg);
 8001602:	4904      	ldr	r1, [pc, #16]	@ (8001614 <loop+0x1c>)
 8001604:	4805      	ldr	r0, [pc, #20]	@ (800161c <loop+0x24>)
 8001606:	f7ff fd4f 	bl	80010a8 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  nh.spinOnce();
 800160a:	4805      	ldr	r0, [pc, #20]	@ (8001620 <loop+0x28>)
 800160c:	f000 f8a4 	bl	8001758 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	200009d8 	.word	0x200009d8
 8001618:	20000000 	.word	0x20000000
 800161c:	200009e0 	.word	0x200009e0
 8001620:	2000009c 	.word	0x2000009c

08001624 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	e00c      	b.n	800164e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	fa22 f103 	lsr.w	r1, r2, r3
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4413      	add	r3, r2
 8001644:	b2ca      	uxtb	r2, r1
 8001646:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	3301      	adds	r3, #1
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2b03      	cmp	r3, #3
 8001652:	d9ef      	bls.n	8001634 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8001654:	bf00      	nop
 8001656:	bf00      	nop
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr

08001660 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	e010      	b.n	8001698 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6839      	ldr	r1, [r7, #0]
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	440a      	add	r2, r1
 8001680:	7812      	ldrb	r2, [r2, #0]
 8001682:	4611      	mov	r1, r2
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	00d2      	lsls	r2, r2, #3
 8001688:	fa01 f202 	lsl.w	r2, r1, r2
 800168c:	431a      	orrs	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	3301      	adds	r3, #1
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2b03      	cmp	r3, #3
 800169c:	d9eb      	bls.n	8001676 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 800169e:	bf00      	nop
 80016a0:	bf00      	nop
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr

080016aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3304      	adds	r3, #4
  }
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr

080016c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3304      	adds	r3, #4
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fd39 	bl	8001144 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
    bytes_ = 0;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
    index_ = 0;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
    topic_ = 0;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
  };
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 80016fa:	b480      	push	{r7}
 80016fc:	b085      	sub	sp, #20
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	e01d      	b.n	8001746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d111      	bne.n	8001740 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	60da      	str	r2, [r3, #12]
        return true;
 800173c:	2301      	movs	r3, #1
 800173e:	e006      	b.n	800174e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	3301      	adds	r3, #1
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2b18      	cmp	r3, #24
 800174a:	ddde      	ble.n	800170a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 800174c:	2300      	movs	r3, #0
  }
 800174e:	4618      	mov	r0, r3
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3304      	adds	r3, #4
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fddc 	bl	8001322 <_ZN13STM32Hardware4timeEv>
 800176a:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f8d3 3908 	ldr.w	r3, [r3, #2312]	@ 0x908
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800177a:	4293      	cmp	r3, r2
 800177c:	d903      	bls.n	8001786 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
    if (mode_ != MODE_FIRST_FF)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800178c:	2b00      	cmp	r3, #0
 800178e:	d009      	beq.n	80017a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	429a      	cmp	r2, r3
 800179a:	d903      	bls.n	80017a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
      if (spin_timeout_ > 0)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d014      	beq.n	80017d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3304      	adds	r3, #4
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fdb5 	bl	8001322 <_ZN13STM32Hardware4timeEv>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	1ad2      	subs	r2, r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 80017c4:	429a      	cmp	r2, r3
 80017c6:	bf8c      	ite	hi
 80017c8:	2301      	movhi	r3, #1
 80017ca:	2300      	movls	r3, #0
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 80017d2:	f06f 0301 	mvn.w	r3, #1
 80017d6:	e194      	b.n	8001b02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3304      	adds	r3, #4
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fccd 	bl	800117c <_ZN13STM32Hardware4readEv>
 80017e2:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f2c0 8174 	blt.w	8001ad4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	@ 0x8fc
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	441a      	add	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001802:	2b07      	cmp	r3, #7
 8001804:	d11e      	bne.n	8001844 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 800180c:	1c59      	adds	r1, r3, #1
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	f8c2 18f8 	str.w	r1, [r2, #2296]	@ 0x8f8
 8001814:	68ba      	ldr	r2, [r7, #8]
 8001816:	b2d1      	uxtb	r1, r2
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	4413      	add	r3, r2
 800181c:	460a      	mov	r2, r1
 800181e:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
        bytes_--;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8001828:	1e5a      	subs	r2, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1b4      	bne.n	80017a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2208      	movs	r2, #8
 800183e:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8001842:	e7af      	b.n	80017a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800184a:	2b00      	cmp	r3, #0
 800184c:	d128      	bne.n	80018a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	2bff      	cmp	r3, #255	@ 0xff
 8001852:	d10d      	bne.n	8001870 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800185a:	1c5a      	adds	r2, r3, #1
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f103 0214 	add.w	r2, r3, #20
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 800186e:	e799      	b.n	80017a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3304      	adds	r3, #4
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fd54 	bl	8001322 <_ZN13STM32Hardware4timeEv>
 800187a:	4602      	mov	r2, r0
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001884:	4293      	cmp	r3, r2
 8001886:	bf8c      	ite	hi
 8001888:	2301      	movhi	r3, #1
 800188a:	2300      	movls	r3, #0
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d088      	beq.n	80017a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
          return SPIN_TIMEOUT;
 800189a:	f06f 0301 	mvn.w	r3, #1
 800189e:	e130      	b.n	8001b02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d118      	bne.n	80018dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	2bfe      	cmp	r3, #254	@ 0xfe
 80018ae:	d107      	bne.n	80018c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 80018be:	e771      	b.n	80017a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          if (configured_ == false)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f47f af68 	bne.w	80017a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 f918 	bl	8001b0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80018da:	e763      	b.n	80017a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d113      	bne.n	800190e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68ba      	ldr	r2, [r7, #8]
 80018ea:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        index_ = 0;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
        mode_++;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80018fc:	1c5a      	adds	r2, r3, #1
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68ba      	ldr	r2, [r7, #8]
 8001908:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 800190c:	e74a      	b.n	80017a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001914:	2b03      	cmp	r3, #3
 8001916:	d110      	bne.n	800193a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	@ 0x8f0
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	441a      	add	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        mode_++;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001930:	1c5a      	adds	r2, r3, #1
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8001938:	e734      	b.n	80017a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001940:	2b04      	cmp	r3, #4
 8001942:	d116      	bne.n	8001972 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 800194a:	425a      	negs	r2, r3
 800194c:	b2db      	uxtb	r3, r3
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	bf58      	it	pl
 8001952:	4253      	negpl	r3, r2
 8001954:	2bff      	cmp	r3, #255	@ 0xff
 8001956:	d107      	bne.n	8001968 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8001966:	e71d      	b.n	80017a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8001970:	e718      	b.n	80017a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001978:	2b05      	cmp	r3, #5
 800197a:	d10f      	bne.n	800199c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_++;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800198a:	1c5a      	adds	r2, r3, #1
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68ba      	ldr	r2, [r7, #8]
 8001996:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 800199a:	e703      	b.n	80017a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80019a2:	2b06      	cmp	r3, #6
 80019a4:	d117      	bne.n	80019d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	@ 0x8f4
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	021b      	lsls	r3, r3, #8
 80019b0:	441a      	add	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_ = MODE_MESSAGE;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2207      	movs	r2, #7
 80019bc:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if (bytes_ == 0)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f47f aeec 	bne.w	80017a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2208      	movs	r2, #8
 80019d0:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 80019d4:	e6e6      	b.n	80017a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80019dc:	2b08      	cmp	r3, #8
 80019de:	f47f aee1 	bne.w	80017a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if ((checksum_ % 256) == 255)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 80019f0:	425a      	negs	r2, r3
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	bf58      	it	pl
 80019f8:	4253      	negpl	r3, r2
 80019fa:	2bff      	cmp	r3, #255	@ 0xff
 80019fc:	f47f aed2 	bne.w	80017a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d110      	bne.n	8001a2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f87d 	bl	8001b0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 f898 	bl	8001b46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
            last_sync_receive_time = c_time;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
            return SPIN_ERR;
 8001a26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a2a:	e06a      	b.n	8001b02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8001a32:	2b0a      	cmp	r3, #10
 8001a34:	d107      	bne.n	8001a46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 f960 	bl	8001d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8001a44:	e6ae      	b.n	80017a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8001a4c:	2b06      	cmp	r3, #6
 8001a4e:	d10e      	bne.n	8001a6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f603 1214 	addw	r2, r3, #2324	@ 0x914
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4610      	mov	r0, r2
 8001a60:	f7ff f983 	bl	8000d6a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 8001a6c:	e69a      	b.n	80017a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8001a74:	2b0b      	cmp	r3, #11
 8001a76:	d104      	bne.n	8001a82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 8001a80:	e690      	b.n	80017a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8001a88:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f43f ae84 	beq.w	80017a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8001aa2:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001aac:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8001ab6:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	f202 4224 	addw	r2, r2, #1060	@ 0x424
 8001ace:	4611      	mov	r1, r2
 8001ad0:	4798      	blx	r3
    while (true)
 8001ad2:	e667      	b.n	80017a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8001ad4:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d00f      	beq.n	8001b00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d906      	bls.n	8001b00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f809 	bl	8001b0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
    return SPIN_OK;
 8001b00:	2300      	movs	r3, #0
  }
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b086      	sub	sp, #24
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8001b12:	f107 030c 	add.w	r3, r7, #12
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fc92 	bl	8000440 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f107 020c 	add.w	r2, r7, #12
 8001b26:	210a      	movs	r1, #10
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	4798      	blx	r3
    rt_time = hardware_.time();
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3304      	adds	r3, #4
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fbf6 	bl	8001322 <_ZN13STM32Hardware4timeEv>
 8001b36:	4602      	mov	r2, r0
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
  }
 8001b3e:	bf00      	nop
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8001b46:	b590      	push	{r4, r7, lr}
 8001b48:	b08b      	sub	sp, #44	@ 0x2c
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8001b4e:	f107 030c 	add.w	r3, r7, #12
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fd5e 	bl	8000614 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001b58:	2300      	movs	r3, #0
 8001b5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b5c:	e062      	b.n	8001c24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b62:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d056      	beq.n	8001c1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b74:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b88:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	6859      	ldr	r1, [r3, #4]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001baa:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	3308      	adds	r3, #8
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4608      	mov	r0, r1
 8001bbe:	4798      	blx	r3
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc8:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	6859      	ldr	r1, [r3, #4]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd8:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	330c      	adds	r3, #12
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4608      	mov	r0, r1
 8001bec:	4798      	blx	r3
 8001bee:	4603      	mov	r3, r0
 8001bf0:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8001bf2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bf6:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681c      	ldr	r4, [r3, #0]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c02:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff fa5f 	bl	80010d0 <_ZN3ros9Publisher15getEndpointTypeEv>
 8001c12:	4601      	mov	r1, r0
 8001c14:	f107 030c 	add.w	r3, r7, #12
 8001c18:	461a      	mov	r2, r3
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c20:	3301      	adds	r3, #1
 8001c22:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c26:	2b18      	cmp	r3, #24
 8001c28:	dd99      	ble.n	8001b5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c2e:	e05e      	b.n	8001cee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c34:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d053      	beq.n	8001ce8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c44:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c56:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c66:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001c6a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c72:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	3308      	adds	r3, #8
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4608      	mov	r0, r1
 8001c82:	4798      	blx	r3
 8001c84:	4603      	mov	r3, r0
 8001c86:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c8c:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001c90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c98:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	330c      	adds	r3, #12
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4608      	mov	r0, r1
 8001ca8:	4798      	blx	r3
 8001caa:	4603      	mov	r3, r0
 8001cac:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8001cae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cb2:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681c      	ldr	r4, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cbe:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001cc2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cca:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4608      	mov	r0, r1
 8001cda:	4798      	blx	r3
 8001cdc:	4601      	mov	r1, r0
 8001cde:	f107 030c 	add.w	r3, r7, #12
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cea:	3301      	adds	r3, #1
 8001cec:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf0:	2b18      	cmp	r3, #24
 8001cf2:	dd9d      	ble.n	8001c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
  }
 8001cfc:	bf00      	nop
 8001cfe:	372c      	adds	r7, #44	@ 0x2c
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd90      	pop	{r4, r7, pc}

08001d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8001d0e:	f107 0308 	add.w	r3, r7, #8
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fb94 	bl	8000440 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3304      	adds	r3, #4
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff fb00 	bl	8001322 <_ZN13STM32Hardware4timeEv>
 8001d22:	4602      	mov	r2, r0
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8001d2e:	f107 0308 	add.w	r3, r7, #8
 8001d32:	6839      	ldr	r1, [r7, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe fbf2 	bl	800051e <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	4915      	ldr	r1, [pc, #84]	@ (8001d94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8001d40:	fba1 1303 	umull	r1, r3, r1, r3
 8001d44:	099b      	lsrs	r3, r3, #6
 8001d46:	4413      	add	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8001d4a:	6939      	ldr	r1, [r7, #16]
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	4b11      	ldr	r3, [pc, #68]	@ (8001d94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8001d50:	fba3 0302 	umull	r0, r3, r3, r2
 8001d54:	099b      	lsrs	r3, r3, #6
 8001d56:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d5a:	fb00 f303 	mul.w	r3, r0, r3
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	4a0d      	ldr	r2, [pc, #52]	@ (8001d98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8001d62:	fb02 f303 	mul.w	r3, r2, r3
 8001d66:	440b      	add	r3, r1
 8001d68:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8001d6a:	f107 0308 	add.w	r3, r7, #8
 8001d6e:	3304      	adds	r3, #4
 8001d70:	4619      	mov	r1, r3
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f8a6 	bl	8001ec4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3304      	adds	r3, #4
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fad0 	bl	8001322 <_ZN13STM32Hardware4timeEv>
 8001d82:	4602      	mov	r2, r0
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
  }
 8001d8a:	bf00      	nop
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	10624dd3 	.word	0x10624dd3
 8001d98:	000f4240 	.word	0x000f4240

08001d9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b088      	sub	sp, #32
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	2b63      	cmp	r3, #99	@ 0x63
 8001dac:	dd09      	ble.n	8001dc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8001db4:	f083 0301 	eor.w	r3, r3, #1
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	e079      	b.n	8001eb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	f202 6224 	addw	r2, r2, #1572	@ 0x624
 8001dce:	3207      	adds	r2, #7
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	4798      	blx	r3
 8001dd6:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	22ff      	movs	r2, #255	@ 0xff
 8001ddc:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624
    message_out[1] = PROTOCOL_VER;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	22fe      	movs	r2, #254	@ 0xfe
 8001de4:	f883 2625 	strb.w	r2, [r3, #1573]	@ 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f883 2626 	strb.w	r2, [r3, #1574]	@ 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	0a1b      	lsrs	r3, r3, #8
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f883 2627 	strb.w	r2, [r3, #1575]	@ 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f893 2626 	ldrb.w	r2, [r3, #1574]	@ 0x626
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f893 3627 	ldrb.w	r3, [r3, #1575]	@ 0x627
 8001e0e:	4413      	add	r3, r2
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f883 2628 	strb.w	r2, [r3, #1576]	@ 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f883 2629 	strb.w	r2, [r3, #1577]	@ 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	b21b      	sxth	r3, r3
 8001e2a:	121b      	asrs	r3, r3, #8
 8001e2c:	b21b      	sxth	r3, r3
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f883 262a 	strb.w	r2, [r3, #1578]	@ 0x62a

    /* calculate checksum */
    int chk = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001e3a:	2305      	movs	r3, #5
 8001e3c:	61bb      	str	r3, [r7, #24]
 8001e3e:	e00c      	b.n	8001e5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	4413      	add	r3, r2
 8001e46:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	4413      	add	r3, r2
 8001e52:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	3301      	adds	r3, #1
 8001e58:	61bb      	str	r3, [r7, #24]
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	3306      	adds	r3, #6
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	dded      	ble.n	8001e40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	3307      	adds	r3, #7
 8001e68:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	425a      	negs	r2, r3
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	bf58      	it	pl
 8001e74:	4253      	negpl	r3, r2
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	1c59      	adds	r1, r3, #1
 8001e7c:	6179      	str	r1, [r7, #20]
 8001e7e:	43d2      	mvns	r2, r2
 8001e80:	b2d1      	uxtb	r1, r2
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	4413      	add	r3, r2
 8001e86:	460a      	mov	r2, r1
 8001e88:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624

    if (l <= OUTPUT_SIZE)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e92:	dc0a      	bgt.n	8001eaa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	1d18      	adds	r0, r3, #4
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f7ff f9f7 	bl	8001294 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	e005      	b.n	8001eb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8001eaa:	4905      	ldr	r1, [pc, #20]	@ (8001ec0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f000 f849 	bl	8001f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8001eb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
  }
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3720      	adds	r7, #32
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	08005584 	.word	0x08005584

08001ec4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fa25 	bl	8001322 <_ZN13STM32Hardware4timeEv>
 8001ed8:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	4915      	ldr	r1, [pc, #84]	@ (8001f38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8001ee2:	fba1 1303 	umull	r1, r3, r1, r3
 8001ee6:	099b      	lsrs	r3, r3, #6
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	1e5a      	subs	r2, r3, #1
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	6859      	ldr	r1, [r3, #4]
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8001efa:	fba3 0302 	umull	r0, r3, r3, r2
 8001efe:	099b      	lsrs	r3, r3, #6
 8001f00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f04:	fb00 f303 	mul.w	r3, r0, r3
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	4a0c      	ldr	r2, [pc, #48]	@ (8001f3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8001f0c:	fb02 f303 	mul.w	r3, r2, r3
 8001f10:	1aca      	subs	r2, r1, r3
 8001f12:	4b0b      	ldr	r3, [pc, #44]	@ (8001f40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8001f14:	4413      	add	r3, r2
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	f8c2 341c 	str.w	r3, [r2, #1052]	@ 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f503 6283 	add.w	r2, r3, #1048	@ 0x418
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	f7fe f916 	bl	800015c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8001f30:	bf00      	nop
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	10624dd3 	.word	0x10624dd3
 8001f3c:	000f4240 	.word	0x000f4240
 8001f40:	3b9aca00 	.word	0x3b9aca00

08001f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	2103      	movs	r1, #3
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f804 	bl	8001f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b088      	sub	sp, #32
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	607a      	str	r2, [r7, #4]
 8001f6c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8001f6e:	f107 0314 	add.w	r3, r7, #20
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fd0e 	bl	8000994 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8001f78:	7afb      	ldrb	r3, [r7, #11]
 8001f7a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f107 0214 	add.w	r2, r7, #20
 8001f8a:	2107      	movs	r1, #7
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	4798      	blx	r3
  }
 8001f90:	bf00      	nop
 8001f92:	3720      	adds	r7, #32
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <_Z41__static_initialization_and_destruction_0ii>:
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d110      	bne.n	8001fca <_Z41__static_initialization_and_destruction_0ii+0x32>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d10b      	bne.n	8001fca <_Z41__static_initialization_and_destruction_0ii+0x32>
ros::NodeHandle nh;
 8001fb2:	4808      	ldr	r0, [pc, #32]	@ (8001fd4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001fb4:	f7ff fa68 	bl	8001488 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8001fb8:	4807      	ldr	r0, [pc, #28]	@ (8001fd8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001fba:	f7ff f9bd 	bl	8001338 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	4a05      	ldr	r2, [pc, #20]	@ (8001fd8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001fc2:	4906      	ldr	r1, [pc, #24]	@ (8001fdc <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001fc4:	4806      	ldr	r0, [pc, #24]	@ (8001fe0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001fc6:	f7ff f859 	bl	800107c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	2000009c 	.word	0x2000009c
 8001fd8:	200009d8 	.word	0x200009d8
 8001fdc:	080055c0 	.word	0x080055c0
 8001fe0:	200009e0 	.word	0x200009e0

08001fe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
    return configured_;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
  };
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr

08001ffc <_GLOBAL__sub_I_nh>:
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002004:	2001      	movs	r0, #1
 8002006:	f7ff ffc7 	bl	8001f98 <_Z41__static_initialization_and_destruction_0ii>
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002012:	4b15      	ldr	r3, [pc, #84]	@ (8002068 <HAL_MspInit+0x5c>)
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	4a14      	ldr	r2, [pc, #80]	@ (8002068 <HAL_MspInit+0x5c>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	6193      	str	r3, [r2, #24]
 800201e:	4b12      	ldr	r3, [pc, #72]	@ (8002068 <HAL_MspInit+0x5c>)
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202a:	4b0f      	ldr	r3, [pc, #60]	@ (8002068 <HAL_MspInit+0x5c>)
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	4a0e      	ldr	r2, [pc, #56]	@ (8002068 <HAL_MspInit+0x5c>)
 8002030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002034:	61d3      	str	r3, [r2, #28]
 8002036:	4b0c      	ldr	r3, [pc, #48]	@ (8002068 <HAL_MspInit+0x5c>)
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800203e:	607b      	str	r3, [r7, #4]
 8002040:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002042:	4b0a      	ldr	r3, [pc, #40]	@ (800206c <HAL_MspInit+0x60>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	4a04      	ldr	r2, [pc, #16]	@ (800206c <HAL_MspInit+0x60>)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800205e:	bf00      	nop
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	40021000 	.word	0x40021000
 800206c:	40010000 	.word	0x40010000

08002070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002074:	bf00      	nop
 8002076:	e7fd      	b.n	8002074 <NMI_Handler+0x4>

08002078 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800207c:	bf00      	nop
 800207e:	e7fd      	b.n	800207c <HardFault_Handler+0x4>

08002080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002084:	bf00      	nop
 8002086:	e7fd      	b.n	8002084 <MemManage_Handler+0x4>

08002088 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800208c:	bf00      	nop
 800208e:	e7fd      	b.n	800208c <BusFault_Handler+0x4>

08002090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002094:	bf00      	nop
 8002096:	e7fd      	b.n	8002094 <UsageFault_Handler+0x4>

08002098 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020c0:	f000 fac0 	bl	8002644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80020cc:	4802      	ldr	r0, [pc, #8]	@ (80020d8 <DMA1_Channel6_IRQHandler+0x10>)
 80020ce:	f000 fd75 	bl	8002bbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000ad0 	.word	0x20000ad0

080020dc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80020e0:	4802      	ldr	r0, [pc, #8]	@ (80020ec <DMA1_Channel7_IRQHandler+0x10>)
 80020e2:	f000 fd6b 	bl	8002bbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000b14 	.word	0x20000b14

080020f0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020f4:	4802      	ldr	r0, [pc, #8]	@ (8002100 <TIM1_BRK_IRQHandler+0x10>)
 80020f6:	f001 fcfd 	bl	8003af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	200009f8 	.word	0x200009f8

08002104 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002108:	4802      	ldr	r0, [pc, #8]	@ (8002114 <TIM1_UP_IRQHandler+0x10>)
 800210a:	f001 fcf3 	bl	8003af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	200009f8 	.word	0x200009f8

08002118 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800211c:	4802      	ldr	r0, [pc, #8]	@ (8002128 <TIM1_TRG_COM_IRQHandler+0x10>)
 800211e:	f001 fce9 	bl	8003af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200009f8 	.word	0x200009f8

0800212c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002130:	4802      	ldr	r0, [pc, #8]	@ (800213c <TIM1_CC_IRQHandler+0x10>)
 8002132:	f001 fcdf 	bl	8003af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	200009f8 	.word	0x200009f8

08002140 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002144:	4802      	ldr	r0, [pc, #8]	@ (8002150 <TIM2_IRQHandler+0x10>)
 8002146:	f001 fcd5 	bl	8003af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000a40 	.word	0x20000a40

08002154 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002158:	4802      	ldr	r0, [pc, #8]	@ (8002164 <USART2_IRQHandler+0x10>)
 800215a:	f002 f901 	bl	8004360 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000a88 	.word	0x20000a88

08002168 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002170:	4a14      	ldr	r2, [pc, #80]	@ (80021c4 <_sbrk+0x5c>)
 8002172:	4b15      	ldr	r3, [pc, #84]	@ (80021c8 <_sbrk+0x60>)
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800217c:	4b13      	ldr	r3, [pc, #76]	@ (80021cc <_sbrk+0x64>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d102      	bne.n	800218a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002184:	4b11      	ldr	r3, [pc, #68]	@ (80021cc <_sbrk+0x64>)
 8002186:	4a12      	ldr	r2, [pc, #72]	@ (80021d0 <_sbrk+0x68>)
 8002188:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800218a:	4b10      	ldr	r3, [pc, #64]	@ (80021cc <_sbrk+0x64>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4413      	add	r3, r2
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	429a      	cmp	r2, r3
 8002196:	d207      	bcs.n	80021a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002198:	f003 f81c 	bl	80051d4 <__errno>
 800219c:	4603      	mov	r3, r0
 800219e:	220c      	movs	r2, #12
 80021a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021a6:	e009      	b.n	80021bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021a8:	4b08      	ldr	r3, [pc, #32]	@ (80021cc <_sbrk+0x64>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ae:	4b07      	ldr	r3, [pc, #28]	@ (80021cc <_sbrk+0x64>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4413      	add	r3, r2
 80021b6:	4a05      	ldr	r2, [pc, #20]	@ (80021cc <_sbrk+0x64>)
 80021b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ba:	68fb      	ldr	r3, [r7, #12]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20005000 	.word	0x20005000
 80021c8:	00000400 	.word	0x00000400
 80021cc:	200009f4 	.word	0x200009f4
 80021d0:	20000ca8 	.word	0x20000ca8

080021d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021e6:	f107 0308 	add.w	r3, r7, #8
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	605a      	str	r2, [r3, #4]
 80021f0:	609a      	str	r2, [r3, #8]
 80021f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021f4:	463b      	mov	r3, r7
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002278 <MX_TIM1_Init+0x98>)
 80021fe:	4a1f      	ldr	r2, [pc, #124]	@ (800227c <MX_TIM1_Init+0x9c>)
 8002200:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8002202:	4b1d      	ldr	r3, [pc, #116]	@ (8002278 <MX_TIM1_Init+0x98>)
 8002204:	2247      	movs	r2, #71	@ 0x47
 8002206:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002208:	4b1b      	ldr	r3, [pc, #108]	@ (8002278 <MX_TIM1_Init+0x98>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800220e:	4b1a      	ldr	r3, [pc, #104]	@ (8002278 <MX_TIM1_Init+0x98>)
 8002210:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002214:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002216:	4b18      	ldr	r3, [pc, #96]	@ (8002278 <MX_TIM1_Init+0x98>)
 8002218:	2200      	movs	r2, #0
 800221a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800221c:	4b16      	ldr	r3, [pc, #88]	@ (8002278 <MX_TIM1_Init+0x98>)
 800221e:	2200      	movs	r2, #0
 8002220:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002222:	4b15      	ldr	r3, [pc, #84]	@ (8002278 <MX_TIM1_Init+0x98>)
 8002224:	2200      	movs	r2, #0
 8002226:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002228:	4813      	ldr	r0, [pc, #76]	@ (8002278 <MX_TIM1_Init+0x98>)
 800222a:	f001 fbc1 	bl	80039b0 <HAL_TIM_Base_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002234:	f7fe f8de 	bl	80003f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002238:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800223c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800223e:	f107 0308 	add.w	r3, r7, #8
 8002242:	4619      	mov	r1, r3
 8002244:	480c      	ldr	r0, [pc, #48]	@ (8002278 <MX_TIM1_Init+0x98>)
 8002246:	f001 fd45 	bl	8003cd4 <HAL_TIM_ConfigClockSource>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002250:	f7fe f8d0 	bl	80003f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002254:	2300      	movs	r3, #0
 8002256:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002258:	2300      	movs	r3, #0
 800225a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800225c:	463b      	mov	r3, r7
 800225e:	4619      	mov	r1, r3
 8002260:	4805      	ldr	r0, [pc, #20]	@ (8002278 <MX_TIM1_Init+0x98>)
 8002262:	f001 ff27 	bl	80040b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800226c:	f7fe f8c2 	bl	80003f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002270:	bf00      	nop
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	200009f8 	.word	0x200009f8
 800227c:	40012c00 	.word	0x40012c00

08002280 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002286:	f107 0308 	add.w	r3, r7, #8
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]
 8002290:	609a      	str	r2, [r3, #8]
 8002292:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002294:	463b      	mov	r3, r7
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800229c:	4b1d      	ldr	r3, [pc, #116]	@ (8002314 <MX_TIM2_Init+0x94>)
 800229e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36-1;
 80022a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002314 <MX_TIM2_Init+0x94>)
 80022a6:	2223      	movs	r2, #35	@ 0x23
 80022a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002314 <MX_TIM2_Init+0x94>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80022b0:	4b18      	ldr	r3, [pc, #96]	@ (8002314 <MX_TIM2_Init+0x94>)
 80022b2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80022b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b8:	4b16      	ldr	r3, [pc, #88]	@ (8002314 <MX_TIM2_Init+0x94>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022be:	4b15      	ldr	r3, [pc, #84]	@ (8002314 <MX_TIM2_Init+0x94>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022c4:	4813      	ldr	r0, [pc, #76]	@ (8002314 <MX_TIM2_Init+0x94>)
 80022c6:	f001 fb73 	bl	80039b0 <HAL_TIM_Base_Init>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80022d0:	f7fe f890 	bl	80003f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022da:	f107 0308 	add.w	r3, r7, #8
 80022de:	4619      	mov	r1, r3
 80022e0:	480c      	ldr	r0, [pc, #48]	@ (8002314 <MX_TIM2_Init+0x94>)
 80022e2:	f001 fcf7 	bl	8003cd4 <HAL_TIM_ConfigClockSource>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80022ec:	f7fe f882 	bl	80003f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f0:	2300      	movs	r3, #0
 80022f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f4:	2300      	movs	r3, #0
 80022f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022f8:	463b      	mov	r3, r7
 80022fa:	4619      	mov	r1, r3
 80022fc:	4805      	ldr	r0, [pc, #20]	@ (8002314 <MX_TIM2_Init+0x94>)
 80022fe:	f001 fed9 	bl	80040b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002308:	f7fe f874 	bl	80003f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800230c:	bf00      	nop
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000a40 	.word	0x20000a40

08002318 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a26      	ldr	r2, [pc, #152]	@ (80023c0 <HAL_TIM_Base_MspInit+0xa8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d12c      	bne.n	8002384 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800232a:	4b26      	ldr	r3, [pc, #152]	@ (80023c4 <HAL_TIM_Base_MspInit+0xac>)
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	4a25      	ldr	r2, [pc, #148]	@ (80023c4 <HAL_TIM_Base_MspInit+0xac>)
 8002330:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002334:	6193      	str	r3, [r2, #24]
 8002336:	4b23      	ldr	r3, [pc, #140]	@ (80023c4 <HAL_TIM_Base_MspInit+0xac>)
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002342:	2200      	movs	r2, #0
 8002344:	2100      	movs	r1, #0
 8002346:	2018      	movs	r0, #24
 8002348:	f000 fa93 	bl	8002872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800234c:	2018      	movs	r0, #24
 800234e:	f000 faac 	bl	80028aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002352:	2200      	movs	r2, #0
 8002354:	2100      	movs	r1, #0
 8002356:	2019      	movs	r0, #25
 8002358:	f000 fa8b 	bl	8002872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800235c:	2019      	movs	r0, #25
 800235e:	f000 faa4 	bl	80028aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002362:	2200      	movs	r2, #0
 8002364:	2100      	movs	r1, #0
 8002366:	201a      	movs	r0, #26
 8002368:	f000 fa83 	bl	8002872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800236c:	201a      	movs	r0, #26
 800236e:	f000 fa9c 	bl	80028aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002372:	2200      	movs	r2, #0
 8002374:	2100      	movs	r1, #0
 8002376:	201b      	movs	r0, #27
 8002378:	f000 fa7b 	bl	8002872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800237c:	201b      	movs	r0, #27
 800237e:	f000 fa94 	bl	80028aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002382:	e018      	b.n	80023b6 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM2)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800238c:	d113      	bne.n	80023b6 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800238e:	4b0d      	ldr	r3, [pc, #52]	@ (80023c4 <HAL_TIM_Base_MspInit+0xac>)
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	4a0c      	ldr	r2, [pc, #48]	@ (80023c4 <HAL_TIM_Base_MspInit+0xac>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	61d3      	str	r3, [r2, #28]
 800239a:	4b0a      	ldr	r3, [pc, #40]	@ (80023c4 <HAL_TIM_Base_MspInit+0xac>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	60bb      	str	r3, [r7, #8]
 80023a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80023a6:	2200      	movs	r2, #0
 80023a8:	2100      	movs	r1, #0
 80023aa:	201c      	movs	r0, #28
 80023ac:	f000 fa61 	bl	8002872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023b0:	201c      	movs	r0, #28
 80023b2:	f000 fa7a 	bl	80028aa <HAL_NVIC_EnableIRQ>
}
 80023b6:	bf00      	nop
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40012c00 	.word	0x40012c00
 80023c4:	40021000 	.word	0x40021000

080023c8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023cc:	4b11      	ldr	r3, [pc, #68]	@ (8002414 <MX_USART2_UART_Init+0x4c>)
 80023ce:	4a12      	ldr	r2, [pc, #72]	@ (8002418 <MX_USART2_UART_Init+0x50>)
 80023d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80023d2:	4b10      	ldr	r3, [pc, #64]	@ (8002414 <MX_USART2_UART_Init+0x4c>)
 80023d4:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80023d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023da:	4b0e      	ldr	r3, [pc, #56]	@ (8002414 <MX_USART2_UART_Init+0x4c>)
 80023dc:	2200      	movs	r2, #0
 80023de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002414 <MX_USART2_UART_Init+0x4c>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002414 <MX_USART2_UART_Init+0x4c>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023ec:	4b09      	ldr	r3, [pc, #36]	@ (8002414 <MX_USART2_UART_Init+0x4c>)
 80023ee:	220c      	movs	r2, #12
 80023f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023f2:	4b08      	ldr	r3, [pc, #32]	@ (8002414 <MX_USART2_UART_Init+0x4c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023f8:	4b06      	ldr	r3, [pc, #24]	@ (8002414 <MX_USART2_UART_Init+0x4c>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023fe:	4805      	ldr	r0, [pc, #20]	@ (8002414 <MX_USART2_UART_Init+0x4c>)
 8002400:	f001 fec8 	bl	8004194 <HAL_UART_Init>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800240a:	f7fd fff3 	bl	80003f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000a88 	.word	0x20000a88
 8002418:	40004400 	.word	0x40004400

0800241c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002424:	f107 0310 	add.w	r3, r7, #16
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a46      	ldr	r2, [pc, #280]	@ (8002550 <HAL_UART_MspInit+0x134>)
 8002438:	4293      	cmp	r3, r2
 800243a:	f040 8084 	bne.w	8002546 <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800243e:	4b45      	ldr	r3, [pc, #276]	@ (8002554 <HAL_UART_MspInit+0x138>)
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	4a44      	ldr	r2, [pc, #272]	@ (8002554 <HAL_UART_MspInit+0x138>)
 8002444:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002448:	61d3      	str	r3, [r2, #28]
 800244a:	4b42      	ldr	r3, [pc, #264]	@ (8002554 <HAL_UART_MspInit+0x138>)
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002456:	4b3f      	ldr	r3, [pc, #252]	@ (8002554 <HAL_UART_MspInit+0x138>)
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	4a3e      	ldr	r2, [pc, #248]	@ (8002554 <HAL_UART_MspInit+0x138>)
 800245c:	f043 0304 	orr.w	r3, r3, #4
 8002460:	6193      	str	r3, [r2, #24]
 8002462:	4b3c      	ldr	r3, [pc, #240]	@ (8002554 <HAL_UART_MspInit+0x138>)
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800246e:	2304      	movs	r3, #4
 8002470:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002472:	2302      	movs	r3, #2
 8002474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002476:	2303      	movs	r3, #3
 8002478:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800247a:	f107 0310 	add.w	r3, r7, #16
 800247e:	4619      	mov	r1, r3
 8002480:	4835      	ldr	r0, [pc, #212]	@ (8002558 <HAL_UART_MspInit+0x13c>)
 8002482:	f000 fccf 	bl	8002e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002486:	2308      	movs	r3, #8
 8002488:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002492:	f107 0310 	add.w	r3, r7, #16
 8002496:	4619      	mov	r1, r3
 8002498:	482f      	ldr	r0, [pc, #188]	@ (8002558 <HAL_UART_MspInit+0x13c>)
 800249a:	f000 fcc3 	bl	8002e24 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800249e:	4b2f      	ldr	r3, [pc, #188]	@ (800255c <HAL_UART_MspInit+0x140>)
 80024a0:	4a2f      	ldr	r2, [pc, #188]	@ (8002560 <HAL_UART_MspInit+0x144>)
 80024a2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024a4:	4b2d      	ldr	r3, [pc, #180]	@ (800255c <HAL_UART_MspInit+0x140>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024aa:	4b2c      	ldr	r3, [pc, #176]	@ (800255c <HAL_UART_MspInit+0x140>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024b0:	4b2a      	ldr	r3, [pc, #168]	@ (800255c <HAL_UART_MspInit+0x140>)
 80024b2:	2280      	movs	r2, #128	@ 0x80
 80024b4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024b6:	4b29      	ldr	r3, [pc, #164]	@ (800255c <HAL_UART_MspInit+0x140>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024bc:	4b27      	ldr	r3, [pc, #156]	@ (800255c <HAL_UART_MspInit+0x140>)
 80024be:	2200      	movs	r2, #0
 80024c0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80024c2:	4b26      	ldr	r3, [pc, #152]	@ (800255c <HAL_UART_MspInit+0x140>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024c8:	4b24      	ldr	r3, [pc, #144]	@ (800255c <HAL_UART_MspInit+0x140>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80024ce:	4823      	ldr	r0, [pc, #140]	@ (800255c <HAL_UART_MspInit+0x140>)
 80024d0:	f000 fa06 	bl	80028e0 <HAL_DMA_Init>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80024da:	f7fd ff8b 	bl	80003f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a1e      	ldr	r2, [pc, #120]	@ (800255c <HAL_UART_MspInit+0x140>)
 80024e2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80024e4:	4a1d      	ldr	r2, [pc, #116]	@ (800255c <HAL_UART_MspInit+0x140>)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80024ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002564 <HAL_UART_MspInit+0x148>)
 80024ec:	4a1e      	ldr	r2, [pc, #120]	@ (8002568 <HAL_UART_MspInit+0x14c>)
 80024ee:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002564 <HAL_UART_MspInit+0x148>)
 80024f2:	2210      	movs	r2, #16
 80024f4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002564 <HAL_UART_MspInit+0x148>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024fc:	4b19      	ldr	r3, [pc, #100]	@ (8002564 <HAL_UART_MspInit+0x148>)
 80024fe:	2280      	movs	r2, #128	@ 0x80
 8002500:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002502:	4b18      	ldr	r3, [pc, #96]	@ (8002564 <HAL_UART_MspInit+0x148>)
 8002504:	2200      	movs	r2, #0
 8002506:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002508:	4b16      	ldr	r3, [pc, #88]	@ (8002564 <HAL_UART_MspInit+0x148>)
 800250a:	2200      	movs	r2, #0
 800250c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800250e:	4b15      	ldr	r3, [pc, #84]	@ (8002564 <HAL_UART_MspInit+0x148>)
 8002510:	2200      	movs	r2, #0
 8002512:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002514:	4b13      	ldr	r3, [pc, #76]	@ (8002564 <HAL_UART_MspInit+0x148>)
 8002516:	2200      	movs	r2, #0
 8002518:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800251a:	4812      	ldr	r0, [pc, #72]	@ (8002564 <HAL_UART_MspInit+0x148>)
 800251c:	f000 f9e0 	bl	80028e0 <HAL_DMA_Init>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8002526:	f7fd ff65 	bl	80003f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a0d      	ldr	r2, [pc, #52]	@ (8002564 <HAL_UART_MspInit+0x148>)
 800252e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002530:	4a0c      	ldr	r2, [pc, #48]	@ (8002564 <HAL_UART_MspInit+0x148>)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	2100      	movs	r1, #0
 800253a:	2026      	movs	r0, #38	@ 0x26
 800253c:	f000 f999 	bl	8002872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002540:	2026      	movs	r0, #38	@ 0x26
 8002542:	f000 f9b2 	bl	80028aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002546:	bf00      	nop
 8002548:	3720      	adds	r7, #32
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40004400 	.word	0x40004400
 8002554:	40021000 	.word	0x40021000
 8002558:	40010800 	.word	0x40010800
 800255c:	20000ad0 	.word	0x20000ad0
 8002560:	4002006c 	.word	0x4002006c
 8002564:	20000b14 	.word	0x20000b14
 8002568:	40020080 	.word	0x40020080

0800256c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800256c:	f7ff fe32 	bl	80021d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002570:	480b      	ldr	r0, [pc, #44]	@ (80025a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002572:	490c      	ldr	r1, [pc, #48]	@ (80025a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002574:	4a0c      	ldr	r2, [pc, #48]	@ (80025a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002578:	e002      	b.n	8002580 <LoopCopyDataInit>

0800257a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800257a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800257c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800257e:	3304      	adds	r3, #4

08002580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002584:	d3f9      	bcc.n	800257a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002586:	4a09      	ldr	r2, [pc, #36]	@ (80025ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002588:	4c09      	ldr	r4, [pc, #36]	@ (80025b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800258a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800258c:	e001      	b.n	8002592 <LoopFillZerobss>

0800258e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800258e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002590:	3204      	adds	r2, #4

08002592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002594:	d3fb      	bcc.n	800258e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002596:	f002 fe23 	bl	80051e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800259a:	f7fd fe7d 	bl	8000298 <main>
  bx lr
 800259e:	4770      	bx	lr
  ldr r0, =_sdata
 80025a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025a4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80025a8:	080056dc 	.word	0x080056dc
  ldr r2, =_sbss
 80025ac:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80025b0:	20000ca4 	.word	0x20000ca4

080025b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025b4:	e7fe      	b.n	80025b4 <ADC1_2_IRQHandler>
	...

080025b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025bc:	4b08      	ldr	r3, [pc, #32]	@ (80025e0 <HAL_Init+0x28>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a07      	ldr	r2, [pc, #28]	@ (80025e0 <HAL_Init+0x28>)
 80025c2:	f043 0310 	orr.w	r3, r3, #16
 80025c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c8:	2003      	movs	r0, #3
 80025ca:	f000 f947 	bl	800285c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ce:	200f      	movs	r0, #15
 80025d0:	f000 f808 	bl	80025e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025d4:	f7ff fd1a 	bl	800200c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40022000 	.word	0x40022000

080025e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025ec:	4b12      	ldr	r3, [pc, #72]	@ (8002638 <HAL_InitTick+0x54>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4b12      	ldr	r3, [pc, #72]	@ (800263c <HAL_InitTick+0x58>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	4619      	mov	r1, r3
 80025f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80025fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002602:	4618      	mov	r0, r3
 8002604:	f000 f95f 	bl	80028c6 <HAL_SYSTICK_Config>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e00e      	b.n	8002630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b0f      	cmp	r3, #15
 8002616:	d80a      	bhi.n	800262e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002618:	2200      	movs	r2, #0
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002620:	f000 f927 	bl	8002872 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002624:	4a06      	ldr	r2, [pc, #24]	@ (8002640 <HAL_InitTick+0x5c>)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	e000      	b.n	8002630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
}
 8002630:	4618      	mov	r0, r3
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20000010 	.word	0x20000010
 800263c:	20000018 	.word	0x20000018
 8002640:	20000014 	.word	0x20000014

08002644 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002648:	4b05      	ldr	r3, [pc, #20]	@ (8002660 <HAL_IncTick+0x1c>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	461a      	mov	r2, r3
 800264e:	4b05      	ldr	r3, [pc, #20]	@ (8002664 <HAL_IncTick+0x20>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4413      	add	r3, r2
 8002654:	4a03      	ldr	r2, [pc, #12]	@ (8002664 <HAL_IncTick+0x20>)
 8002656:	6013      	str	r3, [r2, #0]
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr
 8002660:	20000018 	.word	0x20000018
 8002664:	20000b58 	.word	0x20000b58

08002668 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return uwTick;
 800266c:	4b02      	ldr	r3, [pc, #8]	@ (8002678 <HAL_GetTick+0x10>)
 800266e:	681b      	ldr	r3, [r3, #0]
}
 8002670:	4618      	mov	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr
 8002678:	20000b58 	.word	0x20000b58

0800267c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002684:	f7ff fff0 	bl	8002668 <HAL_GetTick>
 8002688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002694:	d005      	beq.n	80026a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002696:	4b0a      	ldr	r3, [pc, #40]	@ (80026c0 <HAL_Delay+0x44>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	461a      	mov	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4413      	add	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026a2:	bf00      	nop
 80026a4:	f7ff ffe0 	bl	8002668 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d8f7      	bhi.n	80026a4 <HAL_Delay+0x28>
  {
  }
}
 80026b4:	bf00      	nop
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	20000018 	.word	0x20000018

080026c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002708 <__NVIC_SetPriorityGrouping+0x44>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026e0:	4013      	ands	r3, r2
 80026e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026f6:	4a04      	ldr	r2, [pc, #16]	@ (8002708 <__NVIC_SetPriorityGrouping+0x44>)
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	60d3      	str	r3, [r2, #12]
}
 80026fc:	bf00      	nop
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002710:	4b04      	ldr	r3, [pc, #16]	@ (8002724 <__NVIC_GetPriorityGrouping+0x18>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	0a1b      	lsrs	r3, r3, #8
 8002716:	f003 0307 	and.w	r3, r3, #7
}
 800271a:	4618      	mov	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002736:	2b00      	cmp	r3, #0
 8002738:	db0b      	blt.n	8002752 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	f003 021f 	and.w	r2, r3, #31
 8002740:	4906      	ldr	r1, [pc, #24]	@ (800275c <__NVIC_EnableIRQ+0x34>)
 8002742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002746:	095b      	lsrs	r3, r3, #5
 8002748:	2001      	movs	r0, #1
 800274a:	fa00 f202 	lsl.w	r2, r0, r2
 800274e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr
 800275c:	e000e100 	.word	0xe000e100

08002760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	6039      	str	r1, [r7, #0]
 800276a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800276c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002770:	2b00      	cmp	r3, #0
 8002772:	db0a      	blt.n	800278a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	b2da      	uxtb	r2, r3
 8002778:	490c      	ldr	r1, [pc, #48]	@ (80027ac <__NVIC_SetPriority+0x4c>)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	0112      	lsls	r2, r2, #4
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	440b      	add	r3, r1
 8002784:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002788:	e00a      	b.n	80027a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	b2da      	uxtb	r2, r3
 800278e:	4908      	ldr	r1, [pc, #32]	@ (80027b0 <__NVIC_SetPriority+0x50>)
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	3b04      	subs	r3, #4
 8002798:	0112      	lsls	r2, r2, #4
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	440b      	add	r3, r1
 800279e:	761a      	strb	r2, [r3, #24]
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bc80      	pop	{r7}
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	e000e100 	.word	0xe000e100
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b089      	sub	sp, #36	@ 0x24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f1c3 0307 	rsb	r3, r3, #7
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	bf28      	it	cs
 80027d2:	2304      	movcs	r3, #4
 80027d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3304      	adds	r3, #4
 80027da:	2b06      	cmp	r3, #6
 80027dc:	d902      	bls.n	80027e4 <NVIC_EncodePriority+0x30>
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	3b03      	subs	r3, #3
 80027e2:	e000      	b.n	80027e6 <NVIC_EncodePriority+0x32>
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43da      	mvns	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	401a      	ands	r2, r3
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	fa01 f303 	lsl.w	r3, r1, r3
 8002806:	43d9      	mvns	r1, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800280c:	4313      	orrs	r3, r2
         );
}
 800280e:	4618      	mov	r0, r3
 8002810:	3724      	adds	r7, #36	@ 0x24
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr

08002818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3b01      	subs	r3, #1
 8002824:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002828:	d301      	bcc.n	800282e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800282a:	2301      	movs	r3, #1
 800282c:	e00f      	b.n	800284e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800282e:	4a0a      	ldr	r2, [pc, #40]	@ (8002858 <SysTick_Config+0x40>)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3b01      	subs	r3, #1
 8002834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002836:	210f      	movs	r1, #15
 8002838:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800283c:	f7ff ff90 	bl	8002760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002840:	4b05      	ldr	r3, [pc, #20]	@ (8002858 <SysTick_Config+0x40>)
 8002842:	2200      	movs	r2, #0
 8002844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002846:	4b04      	ldr	r3, [pc, #16]	@ (8002858 <SysTick_Config+0x40>)
 8002848:	2207      	movs	r2, #7
 800284a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	e000e010 	.word	0xe000e010

0800285c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff ff2d 	bl	80026c4 <__NVIC_SetPriorityGrouping>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002872:	b580      	push	{r7, lr}
 8002874:	b086      	sub	sp, #24
 8002876:	af00      	add	r7, sp, #0
 8002878:	4603      	mov	r3, r0
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
 800287e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002884:	f7ff ff42 	bl	800270c <__NVIC_GetPriorityGrouping>
 8002888:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	68b9      	ldr	r1, [r7, #8]
 800288e:	6978      	ldr	r0, [r7, #20]
 8002890:	f7ff ff90 	bl	80027b4 <NVIC_EncodePriority>
 8002894:	4602      	mov	r2, r0
 8002896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800289a:	4611      	mov	r1, r2
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ff5f 	bl	8002760 <__NVIC_SetPriority>
}
 80028a2:	bf00      	nop
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	4603      	mov	r3, r0
 80028b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff ff35 	bl	8002728 <__NVIC_EnableIRQ>
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff ffa2 	bl	8002818 <SysTick_Config>
 80028d4:	4603      	mov	r3, r0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e043      	b.n	800297e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	461a      	mov	r2, r3
 80028fc:	4b22      	ldr	r3, [pc, #136]	@ (8002988 <HAL_DMA_Init+0xa8>)
 80028fe:	4413      	add	r3, r2
 8002900:	4a22      	ldr	r2, [pc, #136]	@ (800298c <HAL_DMA_Init+0xac>)
 8002902:	fba2 2303 	umull	r2, r3, r2, r3
 8002906:	091b      	lsrs	r3, r3, #4
 8002908:	009a      	lsls	r2, r3, #2
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a1f      	ldr	r2, [pc, #124]	@ (8002990 <HAL_DMA_Init+0xb0>)
 8002912:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2202      	movs	r2, #2
 8002918:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800292a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800292e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002938:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002944:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002950:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4313      	orrs	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr
 8002988:	bffdfff8 	.word	0xbffdfff8
 800298c:	cccccccd 	.word	0xcccccccd
 8002990:	40020000 	.word	0x40020000

08002994 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
 80029a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029a2:	2300      	movs	r3, #0
 80029a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d101      	bne.n	80029b4 <HAL_DMA_Start_IT+0x20>
 80029b0:	2302      	movs	r3, #2
 80029b2:	e04b      	b.n	8002a4c <HAL_DMA_Start_IT+0xb8>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d13a      	bne.n	8002a3e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2202      	movs	r2, #2
 80029cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0201 	bic.w	r2, r2, #1
 80029e4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	68b9      	ldr	r1, [r7, #8]
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 f9eb 	bl	8002dc8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d008      	beq.n	8002a0c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f042 020e 	orr.w	r2, r2, #14
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	e00f      	b.n	8002a2c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0204 	bic.w	r2, r2, #4
 8002a1a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 020a 	orr.w	r2, r2, #10
 8002a2a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0201 	orr.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	e005      	b.n	8002a4a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a46:	2302      	movs	r3, #2
 8002a48:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d008      	beq.n	8002a7e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2204      	movs	r2, #4
 8002a70:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e020      	b.n	8002ac0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 020e 	bic.w	r2, r2, #14
 8002a8c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0201 	bic.w	r2, r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8002aac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr
	...

08002acc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d005      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2204      	movs	r2, #4
 8002ae8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	73fb      	strb	r3, [r7, #15]
 8002aee:	e051      	b.n	8002b94 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 020e 	bic.w	r2, r2, #14
 8002afe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0201 	bic.w	r2, r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a22      	ldr	r2, [pc, #136]	@ (8002ba0 <HAL_DMA_Abort_IT+0xd4>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d029      	beq.n	8002b6e <HAL_DMA_Abort_IT+0xa2>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a21      	ldr	r2, [pc, #132]	@ (8002ba4 <HAL_DMA_Abort_IT+0xd8>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d022      	beq.n	8002b6a <HAL_DMA_Abort_IT+0x9e>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a1f      	ldr	r2, [pc, #124]	@ (8002ba8 <HAL_DMA_Abort_IT+0xdc>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d01a      	beq.n	8002b64 <HAL_DMA_Abort_IT+0x98>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a1e      	ldr	r2, [pc, #120]	@ (8002bac <HAL_DMA_Abort_IT+0xe0>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d012      	beq.n	8002b5e <HAL_DMA_Abort_IT+0x92>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a1c      	ldr	r2, [pc, #112]	@ (8002bb0 <HAL_DMA_Abort_IT+0xe4>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d00a      	beq.n	8002b58 <HAL_DMA_Abort_IT+0x8c>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a1b      	ldr	r2, [pc, #108]	@ (8002bb4 <HAL_DMA_Abort_IT+0xe8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d102      	bne.n	8002b52 <HAL_DMA_Abort_IT+0x86>
 8002b4c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b50:	e00e      	b.n	8002b70 <HAL_DMA_Abort_IT+0xa4>
 8002b52:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b56:	e00b      	b.n	8002b70 <HAL_DMA_Abort_IT+0xa4>
 8002b58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b5c:	e008      	b.n	8002b70 <HAL_DMA_Abort_IT+0xa4>
 8002b5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b62:	e005      	b.n	8002b70 <HAL_DMA_Abort_IT+0xa4>
 8002b64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b68:	e002      	b.n	8002b70 <HAL_DMA_Abort_IT+0xa4>
 8002b6a:	2310      	movs	r3, #16
 8002b6c:	e000      	b.n	8002b70 <HAL_DMA_Abort_IT+0xa4>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	4a11      	ldr	r2, [pc, #68]	@ (8002bb8 <HAL_DMA_Abort_IT+0xec>)
 8002b72:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	4798      	blx	r3
    } 
  }
  return status;
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40020008 	.word	0x40020008
 8002ba4:	4002001c 	.word	0x4002001c
 8002ba8:	40020030 	.word	0x40020030
 8002bac:	40020044 	.word	0x40020044
 8002bb0:	40020058 	.word	0x40020058
 8002bb4:	4002006c 	.word	0x4002006c
 8002bb8:	40020000 	.word	0x40020000

08002bbc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd8:	2204      	movs	r2, #4
 8002bda:	409a      	lsls	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d04f      	beq.n	8002c84 <HAL_DMA_IRQHandler+0xc8>
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	f003 0304 	and.w	r3, r3, #4
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d04a      	beq.n	8002c84 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0320 	and.w	r3, r3, #32
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d107      	bne.n	8002c0c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0204 	bic.w	r2, r2, #4
 8002c0a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a66      	ldr	r2, [pc, #408]	@ (8002dac <HAL_DMA_IRQHandler+0x1f0>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d029      	beq.n	8002c6a <HAL_DMA_IRQHandler+0xae>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a65      	ldr	r2, [pc, #404]	@ (8002db0 <HAL_DMA_IRQHandler+0x1f4>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d022      	beq.n	8002c66 <HAL_DMA_IRQHandler+0xaa>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a63      	ldr	r2, [pc, #396]	@ (8002db4 <HAL_DMA_IRQHandler+0x1f8>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d01a      	beq.n	8002c60 <HAL_DMA_IRQHandler+0xa4>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a62      	ldr	r2, [pc, #392]	@ (8002db8 <HAL_DMA_IRQHandler+0x1fc>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d012      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x9e>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a60      	ldr	r2, [pc, #384]	@ (8002dbc <HAL_DMA_IRQHandler+0x200>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d00a      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x98>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a5f      	ldr	r2, [pc, #380]	@ (8002dc0 <HAL_DMA_IRQHandler+0x204>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d102      	bne.n	8002c4e <HAL_DMA_IRQHandler+0x92>
 8002c48:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002c4c:	e00e      	b.n	8002c6c <HAL_DMA_IRQHandler+0xb0>
 8002c4e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002c52:	e00b      	b.n	8002c6c <HAL_DMA_IRQHandler+0xb0>
 8002c54:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002c58:	e008      	b.n	8002c6c <HAL_DMA_IRQHandler+0xb0>
 8002c5a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002c5e:	e005      	b.n	8002c6c <HAL_DMA_IRQHandler+0xb0>
 8002c60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c64:	e002      	b.n	8002c6c <HAL_DMA_IRQHandler+0xb0>
 8002c66:	2340      	movs	r3, #64	@ 0x40
 8002c68:	e000      	b.n	8002c6c <HAL_DMA_IRQHandler+0xb0>
 8002c6a:	2304      	movs	r3, #4
 8002c6c:	4a55      	ldr	r2, [pc, #340]	@ (8002dc4 <HAL_DMA_IRQHandler+0x208>)
 8002c6e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 8094 	beq.w	8002da2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002c82:	e08e      	b.n	8002da2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c88:	2202      	movs	r2, #2
 8002c8a:	409a      	lsls	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d056      	beq.n	8002d42 <HAL_DMA_IRQHandler+0x186>
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d051      	beq.n	8002d42 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0320 	and.w	r3, r3, #32
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10b      	bne.n	8002cc4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 020a 	bic.w	r2, r2, #10
 8002cba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a38      	ldr	r2, [pc, #224]	@ (8002dac <HAL_DMA_IRQHandler+0x1f0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d029      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x166>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a37      	ldr	r2, [pc, #220]	@ (8002db0 <HAL_DMA_IRQHandler+0x1f4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d022      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x162>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a35      	ldr	r2, [pc, #212]	@ (8002db4 <HAL_DMA_IRQHandler+0x1f8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d01a      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x15c>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a34      	ldr	r2, [pc, #208]	@ (8002db8 <HAL_DMA_IRQHandler+0x1fc>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d012      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x156>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a32      	ldr	r2, [pc, #200]	@ (8002dbc <HAL_DMA_IRQHandler+0x200>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d00a      	beq.n	8002d0c <HAL_DMA_IRQHandler+0x150>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a31      	ldr	r2, [pc, #196]	@ (8002dc0 <HAL_DMA_IRQHandler+0x204>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d102      	bne.n	8002d06 <HAL_DMA_IRQHandler+0x14a>
 8002d00:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002d04:	e00e      	b.n	8002d24 <HAL_DMA_IRQHandler+0x168>
 8002d06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d0a:	e00b      	b.n	8002d24 <HAL_DMA_IRQHandler+0x168>
 8002d0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d10:	e008      	b.n	8002d24 <HAL_DMA_IRQHandler+0x168>
 8002d12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d16:	e005      	b.n	8002d24 <HAL_DMA_IRQHandler+0x168>
 8002d18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d1c:	e002      	b.n	8002d24 <HAL_DMA_IRQHandler+0x168>
 8002d1e:	2320      	movs	r3, #32
 8002d20:	e000      	b.n	8002d24 <HAL_DMA_IRQHandler+0x168>
 8002d22:	2302      	movs	r3, #2
 8002d24:	4a27      	ldr	r2, [pc, #156]	@ (8002dc4 <HAL_DMA_IRQHandler+0x208>)
 8002d26:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d034      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d40:	e02f      	b.n	8002da2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d46:	2208      	movs	r2, #8
 8002d48:	409a      	lsls	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d028      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x1e8>
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d023      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 020e 	bic.w	r2, r2, #14
 8002d6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d74:	2101      	movs	r1, #1
 8002d76:	fa01 f202 	lsl.w	r2, r1, r2
 8002d7a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d004      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	4798      	blx	r3
    }
  }
  return;
 8002da2:	bf00      	nop
 8002da4:	bf00      	nop
}
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40020008 	.word	0x40020008
 8002db0:	4002001c 	.word	0x4002001c
 8002db4:	40020030 	.word	0x40020030
 8002db8:	40020044 	.word	0x40020044
 8002dbc:	40020058 	.word	0x40020058
 8002dc0:	4002006c 	.word	0x4002006c
 8002dc4:	40020000 	.word	0x40020000

08002dc8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dde:	2101      	movs	r1, #1
 8002de0:	fa01 f202 	lsl.w	r2, r1, r2
 8002de4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b10      	cmp	r3, #16
 8002df4:	d108      	bne.n	8002e08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e06:	e007      	b.n	8002e18 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	60da      	str	r2, [r3, #12]
}
 8002e18:	bf00      	nop
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr
	...

08002e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b08b      	sub	sp, #44	@ 0x2c
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e32:	2300      	movs	r3, #0
 8002e34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e36:	e169      	b.n	800310c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e38:	2201      	movs	r2, #1
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	69fa      	ldr	r2, [r7, #28]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	f040 8158 	bne.w	8003106 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	4a9a      	ldr	r2, [pc, #616]	@ (80030c4 <HAL_GPIO_Init+0x2a0>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d05e      	beq.n	8002f1e <HAL_GPIO_Init+0xfa>
 8002e60:	4a98      	ldr	r2, [pc, #608]	@ (80030c4 <HAL_GPIO_Init+0x2a0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d875      	bhi.n	8002f52 <HAL_GPIO_Init+0x12e>
 8002e66:	4a98      	ldr	r2, [pc, #608]	@ (80030c8 <HAL_GPIO_Init+0x2a4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d058      	beq.n	8002f1e <HAL_GPIO_Init+0xfa>
 8002e6c:	4a96      	ldr	r2, [pc, #600]	@ (80030c8 <HAL_GPIO_Init+0x2a4>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d86f      	bhi.n	8002f52 <HAL_GPIO_Init+0x12e>
 8002e72:	4a96      	ldr	r2, [pc, #600]	@ (80030cc <HAL_GPIO_Init+0x2a8>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d052      	beq.n	8002f1e <HAL_GPIO_Init+0xfa>
 8002e78:	4a94      	ldr	r2, [pc, #592]	@ (80030cc <HAL_GPIO_Init+0x2a8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d869      	bhi.n	8002f52 <HAL_GPIO_Init+0x12e>
 8002e7e:	4a94      	ldr	r2, [pc, #592]	@ (80030d0 <HAL_GPIO_Init+0x2ac>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d04c      	beq.n	8002f1e <HAL_GPIO_Init+0xfa>
 8002e84:	4a92      	ldr	r2, [pc, #584]	@ (80030d0 <HAL_GPIO_Init+0x2ac>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d863      	bhi.n	8002f52 <HAL_GPIO_Init+0x12e>
 8002e8a:	4a92      	ldr	r2, [pc, #584]	@ (80030d4 <HAL_GPIO_Init+0x2b0>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d046      	beq.n	8002f1e <HAL_GPIO_Init+0xfa>
 8002e90:	4a90      	ldr	r2, [pc, #576]	@ (80030d4 <HAL_GPIO_Init+0x2b0>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d85d      	bhi.n	8002f52 <HAL_GPIO_Init+0x12e>
 8002e96:	2b12      	cmp	r3, #18
 8002e98:	d82a      	bhi.n	8002ef0 <HAL_GPIO_Init+0xcc>
 8002e9a:	2b12      	cmp	r3, #18
 8002e9c:	d859      	bhi.n	8002f52 <HAL_GPIO_Init+0x12e>
 8002e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8002ea4 <HAL_GPIO_Init+0x80>)
 8002ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea4:	08002f1f 	.word	0x08002f1f
 8002ea8:	08002ef9 	.word	0x08002ef9
 8002eac:	08002f0b 	.word	0x08002f0b
 8002eb0:	08002f4d 	.word	0x08002f4d
 8002eb4:	08002f53 	.word	0x08002f53
 8002eb8:	08002f53 	.word	0x08002f53
 8002ebc:	08002f53 	.word	0x08002f53
 8002ec0:	08002f53 	.word	0x08002f53
 8002ec4:	08002f53 	.word	0x08002f53
 8002ec8:	08002f53 	.word	0x08002f53
 8002ecc:	08002f53 	.word	0x08002f53
 8002ed0:	08002f53 	.word	0x08002f53
 8002ed4:	08002f53 	.word	0x08002f53
 8002ed8:	08002f53 	.word	0x08002f53
 8002edc:	08002f53 	.word	0x08002f53
 8002ee0:	08002f53 	.word	0x08002f53
 8002ee4:	08002f53 	.word	0x08002f53
 8002ee8:	08002f01 	.word	0x08002f01
 8002eec:	08002f15 	.word	0x08002f15
 8002ef0:	4a79      	ldr	r2, [pc, #484]	@ (80030d8 <HAL_GPIO_Init+0x2b4>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d013      	beq.n	8002f1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ef6:	e02c      	b.n	8002f52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	623b      	str	r3, [r7, #32]
          break;
 8002efe:	e029      	b.n	8002f54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	3304      	adds	r3, #4
 8002f06:	623b      	str	r3, [r7, #32]
          break;
 8002f08:	e024      	b.n	8002f54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	3308      	adds	r3, #8
 8002f10:	623b      	str	r3, [r7, #32]
          break;
 8002f12:	e01f      	b.n	8002f54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	330c      	adds	r3, #12
 8002f1a:	623b      	str	r3, [r7, #32]
          break;
 8002f1c:	e01a      	b.n	8002f54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d102      	bne.n	8002f2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f26:	2304      	movs	r3, #4
 8002f28:	623b      	str	r3, [r7, #32]
          break;
 8002f2a:	e013      	b.n	8002f54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d105      	bne.n	8002f40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f34:	2308      	movs	r3, #8
 8002f36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69fa      	ldr	r2, [r7, #28]
 8002f3c:	611a      	str	r2, [r3, #16]
          break;
 8002f3e:	e009      	b.n	8002f54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f40:	2308      	movs	r3, #8
 8002f42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69fa      	ldr	r2, [r7, #28]
 8002f48:	615a      	str	r2, [r3, #20]
          break;
 8002f4a:	e003      	b.n	8002f54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	623b      	str	r3, [r7, #32]
          break;
 8002f50:	e000      	b.n	8002f54 <HAL_GPIO_Init+0x130>
          break;
 8002f52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	2bff      	cmp	r3, #255	@ 0xff
 8002f58:	d801      	bhi.n	8002f5e <HAL_GPIO_Init+0x13a>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	e001      	b.n	8002f62 <HAL_GPIO_Init+0x13e>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	3304      	adds	r3, #4
 8002f62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	2bff      	cmp	r3, #255	@ 0xff
 8002f68:	d802      	bhi.n	8002f70 <HAL_GPIO_Init+0x14c>
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	e002      	b.n	8002f76 <HAL_GPIO_Init+0x152>
 8002f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f72:	3b08      	subs	r3, #8
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	210f      	movs	r1, #15
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	fa01 f303 	lsl.w	r3, r1, r3
 8002f84:	43db      	mvns	r3, r3
 8002f86:	401a      	ands	r2, r3
 8002f88:	6a39      	ldr	r1, [r7, #32]
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f90:	431a      	orrs	r2, r3
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 80b1 	beq.w	8003106 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fa4:	4b4d      	ldr	r3, [pc, #308]	@ (80030dc <HAL_GPIO_Init+0x2b8>)
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	4a4c      	ldr	r2, [pc, #304]	@ (80030dc <HAL_GPIO_Init+0x2b8>)
 8002faa:	f043 0301 	orr.w	r3, r3, #1
 8002fae:	6193      	str	r3, [r2, #24]
 8002fb0:	4b4a      	ldr	r3, [pc, #296]	@ (80030dc <HAL_GPIO_Init+0x2b8>)
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	60bb      	str	r3, [r7, #8]
 8002fba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002fbc:	4a48      	ldr	r2, [pc, #288]	@ (80030e0 <HAL_GPIO_Init+0x2bc>)
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc0:	089b      	lsrs	r3, r3, #2
 8002fc2:	3302      	adds	r3, #2
 8002fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	220f      	movs	r2, #15
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a40      	ldr	r2, [pc, #256]	@ (80030e4 <HAL_GPIO_Init+0x2c0>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d013      	beq.n	8003010 <HAL_GPIO_Init+0x1ec>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a3f      	ldr	r2, [pc, #252]	@ (80030e8 <HAL_GPIO_Init+0x2c4>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d00d      	beq.n	800300c <HAL_GPIO_Init+0x1e8>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a3e      	ldr	r2, [pc, #248]	@ (80030ec <HAL_GPIO_Init+0x2c8>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d007      	beq.n	8003008 <HAL_GPIO_Init+0x1e4>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a3d      	ldr	r2, [pc, #244]	@ (80030f0 <HAL_GPIO_Init+0x2cc>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d101      	bne.n	8003004 <HAL_GPIO_Init+0x1e0>
 8003000:	2303      	movs	r3, #3
 8003002:	e006      	b.n	8003012 <HAL_GPIO_Init+0x1ee>
 8003004:	2304      	movs	r3, #4
 8003006:	e004      	b.n	8003012 <HAL_GPIO_Init+0x1ee>
 8003008:	2302      	movs	r3, #2
 800300a:	e002      	b.n	8003012 <HAL_GPIO_Init+0x1ee>
 800300c:	2301      	movs	r3, #1
 800300e:	e000      	b.n	8003012 <HAL_GPIO_Init+0x1ee>
 8003010:	2300      	movs	r3, #0
 8003012:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003014:	f002 0203 	and.w	r2, r2, #3
 8003018:	0092      	lsls	r2, r2, #2
 800301a:	4093      	lsls	r3, r2
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	4313      	orrs	r3, r2
 8003020:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003022:	492f      	ldr	r1, [pc, #188]	@ (80030e0 <HAL_GPIO_Init+0x2bc>)
 8003024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003026:	089b      	lsrs	r3, r3, #2
 8003028:	3302      	adds	r3, #2
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d006      	beq.n	800304a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800303c:	4b2d      	ldr	r3, [pc, #180]	@ (80030f4 <HAL_GPIO_Init+0x2d0>)
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	492c      	ldr	r1, [pc, #176]	@ (80030f4 <HAL_GPIO_Init+0x2d0>)
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	4313      	orrs	r3, r2
 8003046:	608b      	str	r3, [r1, #8]
 8003048:	e006      	b.n	8003058 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800304a:	4b2a      	ldr	r3, [pc, #168]	@ (80030f4 <HAL_GPIO_Init+0x2d0>)
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	43db      	mvns	r3, r3
 8003052:	4928      	ldr	r1, [pc, #160]	@ (80030f4 <HAL_GPIO_Init+0x2d0>)
 8003054:	4013      	ands	r3, r2
 8003056:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d006      	beq.n	8003072 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003064:	4b23      	ldr	r3, [pc, #140]	@ (80030f4 <HAL_GPIO_Init+0x2d0>)
 8003066:	68da      	ldr	r2, [r3, #12]
 8003068:	4922      	ldr	r1, [pc, #136]	@ (80030f4 <HAL_GPIO_Init+0x2d0>)
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	4313      	orrs	r3, r2
 800306e:	60cb      	str	r3, [r1, #12]
 8003070:	e006      	b.n	8003080 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003072:	4b20      	ldr	r3, [pc, #128]	@ (80030f4 <HAL_GPIO_Init+0x2d0>)
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	43db      	mvns	r3, r3
 800307a:	491e      	ldr	r1, [pc, #120]	@ (80030f4 <HAL_GPIO_Init+0x2d0>)
 800307c:	4013      	ands	r3, r2
 800307e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d006      	beq.n	800309a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800308c:	4b19      	ldr	r3, [pc, #100]	@ (80030f4 <HAL_GPIO_Init+0x2d0>)
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	4918      	ldr	r1, [pc, #96]	@ (80030f4 <HAL_GPIO_Init+0x2d0>)
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	4313      	orrs	r3, r2
 8003096:	604b      	str	r3, [r1, #4]
 8003098:	e006      	b.n	80030a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800309a:	4b16      	ldr	r3, [pc, #88]	@ (80030f4 <HAL_GPIO_Init+0x2d0>)
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	43db      	mvns	r3, r3
 80030a2:	4914      	ldr	r1, [pc, #80]	@ (80030f4 <HAL_GPIO_Init+0x2d0>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d021      	beq.n	80030f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030b4:	4b0f      	ldr	r3, [pc, #60]	@ (80030f4 <HAL_GPIO_Init+0x2d0>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	490e      	ldr	r1, [pc, #56]	@ (80030f4 <HAL_GPIO_Init+0x2d0>)
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	4313      	orrs	r3, r2
 80030be:	600b      	str	r3, [r1, #0]
 80030c0:	e021      	b.n	8003106 <HAL_GPIO_Init+0x2e2>
 80030c2:	bf00      	nop
 80030c4:	10320000 	.word	0x10320000
 80030c8:	10310000 	.word	0x10310000
 80030cc:	10220000 	.word	0x10220000
 80030d0:	10210000 	.word	0x10210000
 80030d4:	10120000 	.word	0x10120000
 80030d8:	10110000 	.word	0x10110000
 80030dc:	40021000 	.word	0x40021000
 80030e0:	40010000 	.word	0x40010000
 80030e4:	40010800 	.word	0x40010800
 80030e8:	40010c00 	.word	0x40010c00
 80030ec:	40011000 	.word	0x40011000
 80030f0:	40011400 	.word	0x40011400
 80030f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003128 <HAL_GPIO_Init+0x304>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	43db      	mvns	r3, r3
 8003100:	4909      	ldr	r1, [pc, #36]	@ (8003128 <HAL_GPIO_Init+0x304>)
 8003102:	4013      	ands	r3, r2
 8003104:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003108:	3301      	adds	r3, #1
 800310a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003112:	fa22 f303 	lsr.w	r3, r2, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	f47f ae8e 	bne.w	8002e38 <HAL_GPIO_Init+0x14>
  }
}
 800311c:	bf00      	nop
 800311e:	bf00      	nop
 8003120:	372c      	adds	r7, #44	@ 0x2c
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr
 8003128:	40010400 	.word	0x40010400

0800312c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	460b      	mov	r3, r1
 8003136:	807b      	strh	r3, [r7, #2]
 8003138:	4613      	mov	r3, r2
 800313a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800313c:	787b      	ldrb	r3, [r7, #1]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003142:	887a      	ldrh	r2, [r7, #2]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003148:	e003      	b.n	8003152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800314a:	887b      	ldrh	r3, [r7, #2]
 800314c:	041a      	lsls	r2, r3, #16
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	611a      	str	r2, [r3, #16]
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr

0800315c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	460b      	mov	r3, r1
 8003166:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800316e:	887a      	ldrh	r2, [r7, #2]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4013      	ands	r3, r2
 8003174:	041a      	lsls	r2, r3, #16
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	43d9      	mvns	r1, r3
 800317a:	887b      	ldrh	r3, [r7, #2]
 800317c:	400b      	ands	r3, r1
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	611a      	str	r2, [r3, #16]
}
 8003184:	bf00      	nop
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr
	...

08003190 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e272      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 8087 	beq.w	80032be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031b0:	4b92      	ldr	r3, [pc, #584]	@ (80033fc <HAL_RCC_OscConfig+0x26c>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 030c 	and.w	r3, r3, #12
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d00c      	beq.n	80031d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031bc:	4b8f      	ldr	r3, [pc, #572]	@ (80033fc <HAL_RCC_OscConfig+0x26c>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 030c 	and.w	r3, r3, #12
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d112      	bne.n	80031ee <HAL_RCC_OscConfig+0x5e>
 80031c8:	4b8c      	ldr	r3, [pc, #560]	@ (80033fc <HAL_RCC_OscConfig+0x26c>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031d4:	d10b      	bne.n	80031ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d6:	4b89      	ldr	r3, [pc, #548]	@ (80033fc <HAL_RCC_OscConfig+0x26c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d06c      	beq.n	80032bc <HAL_RCC_OscConfig+0x12c>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d168      	bne.n	80032bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e24c      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031f6:	d106      	bne.n	8003206 <HAL_RCC_OscConfig+0x76>
 80031f8:	4b80      	ldr	r3, [pc, #512]	@ (80033fc <HAL_RCC_OscConfig+0x26c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a7f      	ldr	r2, [pc, #508]	@ (80033fc <HAL_RCC_OscConfig+0x26c>)
 80031fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	e02e      	b.n	8003264 <HAL_RCC_OscConfig+0xd4>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10c      	bne.n	8003228 <HAL_RCC_OscConfig+0x98>
 800320e:	4b7b      	ldr	r3, [pc, #492]	@ (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a7a      	ldr	r2, [pc, #488]	@ (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003214:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	4b78      	ldr	r3, [pc, #480]	@ (80033fc <HAL_RCC_OscConfig+0x26c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a77      	ldr	r2, [pc, #476]	@ (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003220:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	e01d      	b.n	8003264 <HAL_RCC_OscConfig+0xd4>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003230:	d10c      	bne.n	800324c <HAL_RCC_OscConfig+0xbc>
 8003232:	4b72      	ldr	r3, [pc, #456]	@ (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a71      	ldr	r2, [pc, #452]	@ (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003238:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	4b6f      	ldr	r3, [pc, #444]	@ (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a6e      	ldr	r2, [pc, #440]	@ (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	e00b      	b.n	8003264 <HAL_RCC_OscConfig+0xd4>
 800324c:	4b6b      	ldr	r3, [pc, #428]	@ (80033fc <HAL_RCC_OscConfig+0x26c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a6a      	ldr	r2, [pc, #424]	@ (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003252:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003256:	6013      	str	r3, [r2, #0]
 8003258:	4b68      	ldr	r3, [pc, #416]	@ (80033fc <HAL_RCC_OscConfig+0x26c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a67      	ldr	r2, [pc, #412]	@ (80033fc <HAL_RCC_OscConfig+0x26c>)
 800325e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003262:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d013      	beq.n	8003294 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7ff f9fc 	bl	8002668 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003274:	f7ff f9f8 	bl	8002668 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	@ 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e200      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003286:	4b5d      	ldr	r3, [pc, #372]	@ (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f0      	beq.n	8003274 <HAL_RCC_OscConfig+0xe4>
 8003292:	e014      	b.n	80032be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003294:	f7ff f9e8 	bl	8002668 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800329c:	f7ff f9e4 	bl	8002668 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b64      	cmp	r3, #100	@ 0x64
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e1ec      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ae:	4b53      	ldr	r3, [pc, #332]	@ (80033fc <HAL_RCC_OscConfig+0x26c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0x10c>
 80032ba:	e000      	b.n	80032be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d063      	beq.n	8003392 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032ca:	4b4c      	ldr	r3, [pc, #304]	@ (80033fc <HAL_RCC_OscConfig+0x26c>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f003 030c 	and.w	r3, r3, #12
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00b      	beq.n	80032ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032d6:	4b49      	ldr	r3, [pc, #292]	@ (80033fc <HAL_RCC_OscConfig+0x26c>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f003 030c 	and.w	r3, r3, #12
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d11c      	bne.n	800331c <HAL_RCC_OscConfig+0x18c>
 80032e2:	4b46      	ldr	r3, [pc, #280]	@ (80033fc <HAL_RCC_OscConfig+0x26c>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d116      	bne.n	800331c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ee:	4b43      	ldr	r3, [pc, #268]	@ (80033fc <HAL_RCC_OscConfig+0x26c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d005      	beq.n	8003306 <HAL_RCC_OscConfig+0x176>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d001      	beq.n	8003306 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e1c0      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003306:	4b3d      	ldr	r3, [pc, #244]	@ (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	4939      	ldr	r1, [pc, #228]	@ (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003316:	4313      	orrs	r3, r2
 8003318:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331a:	e03a      	b.n	8003392 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d020      	beq.n	8003366 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003324:	4b36      	ldr	r3, [pc, #216]	@ (8003400 <HAL_RCC_OscConfig+0x270>)
 8003326:	2201      	movs	r2, #1
 8003328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332a:	f7ff f99d 	bl	8002668 <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003332:	f7ff f999 	bl	8002668 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e1a1      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003344:	4b2d      	ldr	r3, [pc, #180]	@ (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0f0      	beq.n	8003332 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003350:	4b2a      	ldr	r3, [pc, #168]	@ (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	4927      	ldr	r1, [pc, #156]	@ (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003360:	4313      	orrs	r3, r2
 8003362:	600b      	str	r3, [r1, #0]
 8003364:	e015      	b.n	8003392 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003366:	4b26      	ldr	r3, [pc, #152]	@ (8003400 <HAL_RCC_OscConfig+0x270>)
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336c:	f7ff f97c 	bl	8002668 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003374:	f7ff f978 	bl	8002668 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e180      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003386:	4b1d      	ldr	r3, [pc, #116]	@ (80033fc <HAL_RCC_OscConfig+0x26c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b00      	cmp	r3, #0
 800339c:	d03a      	beq.n	8003414 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d019      	beq.n	80033da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033a6:	4b17      	ldr	r3, [pc, #92]	@ (8003404 <HAL_RCC_OscConfig+0x274>)
 80033a8:	2201      	movs	r2, #1
 80033aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ac:	f7ff f95c 	bl	8002668 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b4:	f7ff f958 	bl	8002668 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e160      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c6:	4b0d      	ldr	r3, [pc, #52]	@ (80033fc <HAL_RCC_OscConfig+0x26c>)
 80033c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033d2:	2001      	movs	r0, #1
 80033d4:	f000 face 	bl	8003974 <RCC_Delay>
 80033d8:	e01c      	b.n	8003414 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033da:	4b0a      	ldr	r3, [pc, #40]	@ (8003404 <HAL_RCC_OscConfig+0x274>)
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e0:	f7ff f942 	bl	8002668 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e6:	e00f      	b.n	8003408 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e8:	f7ff f93e 	bl	8002668 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d908      	bls.n	8003408 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e146      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>
 80033fa:	bf00      	nop
 80033fc:	40021000 	.word	0x40021000
 8003400:	42420000 	.word	0x42420000
 8003404:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003408:	4b92      	ldr	r3, [pc, #584]	@ (8003654 <HAL_RCC_OscConfig+0x4c4>)
 800340a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1e9      	bne.n	80033e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80a6 	beq.w	800356e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003422:	2300      	movs	r3, #0
 8003424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003426:	4b8b      	ldr	r3, [pc, #556]	@ (8003654 <HAL_RCC_OscConfig+0x4c4>)
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10d      	bne.n	800344e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003432:	4b88      	ldr	r3, [pc, #544]	@ (8003654 <HAL_RCC_OscConfig+0x4c4>)
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	4a87      	ldr	r2, [pc, #540]	@ (8003654 <HAL_RCC_OscConfig+0x4c4>)
 8003438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800343c:	61d3      	str	r3, [r2, #28]
 800343e:	4b85      	ldr	r3, [pc, #532]	@ (8003654 <HAL_RCC_OscConfig+0x4c4>)
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003446:	60bb      	str	r3, [r7, #8]
 8003448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800344a:	2301      	movs	r3, #1
 800344c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344e:	4b82      	ldr	r3, [pc, #520]	@ (8003658 <HAL_RCC_OscConfig+0x4c8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003456:	2b00      	cmp	r3, #0
 8003458:	d118      	bne.n	800348c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800345a:	4b7f      	ldr	r3, [pc, #508]	@ (8003658 <HAL_RCC_OscConfig+0x4c8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a7e      	ldr	r2, [pc, #504]	@ (8003658 <HAL_RCC_OscConfig+0x4c8>)
 8003460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003466:	f7ff f8ff 	bl	8002668 <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800346e:	f7ff f8fb 	bl	8002668 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b64      	cmp	r3, #100	@ 0x64
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e103      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003480:	4b75      	ldr	r3, [pc, #468]	@ (8003658 <HAL_RCC_OscConfig+0x4c8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0f0      	beq.n	800346e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d106      	bne.n	80034a2 <HAL_RCC_OscConfig+0x312>
 8003494:	4b6f      	ldr	r3, [pc, #444]	@ (8003654 <HAL_RCC_OscConfig+0x4c4>)
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	4a6e      	ldr	r2, [pc, #440]	@ (8003654 <HAL_RCC_OscConfig+0x4c4>)
 800349a:	f043 0301 	orr.w	r3, r3, #1
 800349e:	6213      	str	r3, [r2, #32]
 80034a0:	e02d      	b.n	80034fe <HAL_RCC_OscConfig+0x36e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10c      	bne.n	80034c4 <HAL_RCC_OscConfig+0x334>
 80034aa:	4b6a      	ldr	r3, [pc, #424]	@ (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	4a69      	ldr	r2, [pc, #420]	@ (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80034b0:	f023 0301 	bic.w	r3, r3, #1
 80034b4:	6213      	str	r3, [r2, #32]
 80034b6:	4b67      	ldr	r3, [pc, #412]	@ (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	4a66      	ldr	r2, [pc, #408]	@ (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80034bc:	f023 0304 	bic.w	r3, r3, #4
 80034c0:	6213      	str	r3, [r2, #32]
 80034c2:	e01c      	b.n	80034fe <HAL_RCC_OscConfig+0x36e>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	2b05      	cmp	r3, #5
 80034ca:	d10c      	bne.n	80034e6 <HAL_RCC_OscConfig+0x356>
 80034cc:	4b61      	ldr	r3, [pc, #388]	@ (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	4a60      	ldr	r2, [pc, #384]	@ (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80034d2:	f043 0304 	orr.w	r3, r3, #4
 80034d6:	6213      	str	r3, [r2, #32]
 80034d8:	4b5e      	ldr	r3, [pc, #376]	@ (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	4a5d      	ldr	r2, [pc, #372]	@ (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80034de:	f043 0301 	orr.w	r3, r3, #1
 80034e2:	6213      	str	r3, [r2, #32]
 80034e4:	e00b      	b.n	80034fe <HAL_RCC_OscConfig+0x36e>
 80034e6:	4b5b      	ldr	r3, [pc, #364]	@ (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	4a5a      	ldr	r2, [pc, #360]	@ (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80034ec:	f023 0301 	bic.w	r3, r3, #1
 80034f0:	6213      	str	r3, [r2, #32]
 80034f2:	4b58      	ldr	r3, [pc, #352]	@ (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	4a57      	ldr	r2, [pc, #348]	@ (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80034f8:	f023 0304 	bic.w	r3, r3, #4
 80034fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d015      	beq.n	8003532 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003506:	f7ff f8af 	bl	8002668 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800350c:	e00a      	b.n	8003524 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800350e:	f7ff f8ab 	bl	8002668 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	f241 3288 	movw	r2, #5000	@ 0x1388
 800351c:	4293      	cmp	r3, r2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e0b1      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003524:	4b4b      	ldr	r3, [pc, #300]	@ (8003654 <HAL_RCC_OscConfig+0x4c4>)
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0ee      	beq.n	800350e <HAL_RCC_OscConfig+0x37e>
 8003530:	e014      	b.n	800355c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003532:	f7ff f899 	bl	8002668 <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003538:	e00a      	b.n	8003550 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800353a:	f7ff f895 	bl	8002668 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003548:	4293      	cmp	r3, r2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e09b      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003550:	4b40      	ldr	r3, [pc, #256]	@ (8003654 <HAL_RCC_OscConfig+0x4c4>)
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1ee      	bne.n	800353a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800355c:	7dfb      	ldrb	r3, [r7, #23]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d105      	bne.n	800356e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003562:	4b3c      	ldr	r3, [pc, #240]	@ (8003654 <HAL_RCC_OscConfig+0x4c4>)
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	4a3b      	ldr	r2, [pc, #236]	@ (8003654 <HAL_RCC_OscConfig+0x4c4>)
 8003568:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800356c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 8087 	beq.w	8003686 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003578:	4b36      	ldr	r3, [pc, #216]	@ (8003654 <HAL_RCC_OscConfig+0x4c4>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 030c 	and.w	r3, r3, #12
 8003580:	2b08      	cmp	r3, #8
 8003582:	d061      	beq.n	8003648 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	2b02      	cmp	r3, #2
 800358a:	d146      	bne.n	800361a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800358c:	4b33      	ldr	r3, [pc, #204]	@ (800365c <HAL_RCC_OscConfig+0x4cc>)
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003592:	f7ff f869 	bl	8002668 <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800359a:	f7ff f865 	bl	8002668 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e06d      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035ac:	4b29      	ldr	r3, [pc, #164]	@ (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1f0      	bne.n	800359a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035c0:	d108      	bne.n	80035d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035c2:	4b24      	ldr	r3, [pc, #144]	@ (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	4921      	ldr	r1, [pc, #132]	@ (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035d4:	4b1f      	ldr	r3, [pc, #124]	@ (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a19      	ldr	r1, [r3, #32]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e4:	430b      	orrs	r3, r1
 80035e6:	491b      	ldr	r1, [pc, #108]	@ (8003654 <HAL_RCC_OscConfig+0x4c4>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035ec:	4b1b      	ldr	r3, [pc, #108]	@ (800365c <HAL_RCC_OscConfig+0x4cc>)
 80035ee:	2201      	movs	r2, #1
 80035f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f2:	f7ff f839 	bl	8002668 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035fa:	f7ff f835 	bl	8002668 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e03d      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800360c:	4b11      	ldr	r3, [pc, #68]	@ (8003654 <HAL_RCC_OscConfig+0x4c4>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0f0      	beq.n	80035fa <HAL_RCC_OscConfig+0x46a>
 8003618:	e035      	b.n	8003686 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800361a:	4b10      	ldr	r3, [pc, #64]	@ (800365c <HAL_RCC_OscConfig+0x4cc>)
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003620:	f7ff f822 	bl	8002668 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003628:	f7ff f81e 	bl	8002668 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e026      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800363a:	4b06      	ldr	r3, [pc, #24]	@ (8003654 <HAL_RCC_OscConfig+0x4c4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f0      	bne.n	8003628 <HAL_RCC_OscConfig+0x498>
 8003646:	e01e      	b.n	8003686 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d107      	bne.n	8003660 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e019      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>
 8003654:	40021000 	.word	0x40021000
 8003658:	40007000 	.word	0x40007000
 800365c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003660:	4b0b      	ldr	r3, [pc, #44]	@ (8003690 <HAL_RCC_OscConfig+0x500>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	429a      	cmp	r2, r3
 8003672:	d106      	bne.n	8003682 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800367e:	429a      	cmp	r2, r3
 8003680:	d001      	beq.n	8003686 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40021000 	.word	0x40021000

08003694 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e0d0      	b.n	800384a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003854 <HAL_RCC_ClockConfig+0x1c0>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d910      	bls.n	80036d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b6:	4b67      	ldr	r3, [pc, #412]	@ (8003854 <HAL_RCC_ClockConfig+0x1c0>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f023 0207 	bic.w	r2, r3, #7
 80036be:	4965      	ldr	r1, [pc, #404]	@ (8003854 <HAL_RCC_ClockConfig+0x1c0>)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c6:	4b63      	ldr	r3, [pc, #396]	@ (8003854 <HAL_RCC_ClockConfig+0x1c0>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d001      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e0b8      	b.n	800384a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d020      	beq.n	8003726 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036f0:	4b59      	ldr	r3, [pc, #356]	@ (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	4a58      	ldr	r2, [pc, #352]	@ (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 80036f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80036fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	2b00      	cmp	r3, #0
 8003706:	d005      	beq.n	8003714 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003708:	4b53      	ldr	r3, [pc, #332]	@ (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	4a52      	ldr	r2, [pc, #328]	@ (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 800370e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003712:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003714:	4b50      	ldr	r3, [pc, #320]	@ (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	494d      	ldr	r1, [pc, #308]	@ (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 8003722:	4313      	orrs	r3, r2
 8003724:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d040      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d107      	bne.n	800374a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373a:	4b47      	ldr	r3, [pc, #284]	@ (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d115      	bne.n	8003772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e07f      	b.n	800384a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d107      	bne.n	8003762 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003752:	4b41      	ldr	r3, [pc, #260]	@ (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d109      	bne.n	8003772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e073      	b.n	800384a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003762:	4b3d      	ldr	r3, [pc, #244]	@ (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e06b      	b.n	800384a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003772:	4b39      	ldr	r3, [pc, #228]	@ (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f023 0203 	bic.w	r2, r3, #3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	4936      	ldr	r1, [pc, #216]	@ (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 8003780:	4313      	orrs	r3, r2
 8003782:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003784:	f7fe ff70 	bl	8002668 <HAL_GetTick>
 8003788:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378a:	e00a      	b.n	80037a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800378c:	f7fe ff6c 	bl	8002668 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800379a:	4293      	cmp	r3, r2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e053      	b.n	800384a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f003 020c 	and.w	r2, r3, #12
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d1eb      	bne.n	800378c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037b4:	4b27      	ldr	r3, [pc, #156]	@ (8003854 <HAL_RCC_ClockConfig+0x1c0>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d210      	bcs.n	80037e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c2:	4b24      	ldr	r3, [pc, #144]	@ (8003854 <HAL_RCC_ClockConfig+0x1c0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f023 0207 	bic.w	r2, r3, #7
 80037ca:	4922      	ldr	r1, [pc, #136]	@ (8003854 <HAL_RCC_ClockConfig+0x1c0>)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d2:	4b20      	ldr	r3, [pc, #128]	@ (8003854 <HAL_RCC_ClockConfig+0x1c0>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d001      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e032      	b.n	800384a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d008      	beq.n	8003802 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f0:	4b19      	ldr	r3, [pc, #100]	@ (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	4916      	ldr	r1, [pc, #88]	@ (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b00      	cmp	r3, #0
 800380c:	d009      	beq.n	8003822 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800380e:	4b12      	ldr	r3, [pc, #72]	@ (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	490e      	ldr	r1, [pc, #56]	@ (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 800381e:	4313      	orrs	r3, r2
 8003820:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003822:	f000 f821 	bl	8003868 <HAL_RCC_GetSysClockFreq>
 8003826:	4602      	mov	r2, r0
 8003828:	4b0b      	ldr	r3, [pc, #44]	@ (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	091b      	lsrs	r3, r3, #4
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	490a      	ldr	r1, [pc, #40]	@ (800385c <HAL_RCC_ClockConfig+0x1c8>)
 8003834:	5ccb      	ldrb	r3, [r1, r3]
 8003836:	fa22 f303 	lsr.w	r3, r2, r3
 800383a:	4a09      	ldr	r2, [pc, #36]	@ (8003860 <HAL_RCC_ClockConfig+0x1cc>)
 800383c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800383e:	4b09      	ldr	r3, [pc, #36]	@ (8003864 <HAL_RCC_ClockConfig+0x1d0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f7fe fece 	bl	80025e4 <HAL_InitTick>

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40022000 	.word	0x40022000
 8003858:	40021000 	.word	0x40021000
 800385c:	0800569c 	.word	0x0800569c
 8003860:	20000010 	.word	0x20000010
 8003864:	20000014 	.word	0x20000014

08003868 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003868:	b480      	push	{r7}
 800386a:	b087      	sub	sp, #28
 800386c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	2300      	movs	r3, #0
 8003874:	60bb      	str	r3, [r7, #8]
 8003876:	2300      	movs	r3, #0
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	2300      	movs	r3, #0
 800387c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800387e:	2300      	movs	r3, #0
 8003880:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003882:	4b1e      	ldr	r3, [pc, #120]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x94>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f003 030c 	and.w	r3, r3, #12
 800388e:	2b04      	cmp	r3, #4
 8003890:	d002      	beq.n	8003898 <HAL_RCC_GetSysClockFreq+0x30>
 8003892:	2b08      	cmp	r3, #8
 8003894:	d003      	beq.n	800389e <HAL_RCC_GetSysClockFreq+0x36>
 8003896:	e027      	b.n	80038e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003898:	4b19      	ldr	r3, [pc, #100]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x98>)
 800389a:	613b      	str	r3, [r7, #16]
      break;
 800389c:	e027      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	0c9b      	lsrs	r3, r3, #18
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	4a17      	ldr	r2, [pc, #92]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x9c>)
 80038a8:	5cd3      	ldrb	r3, [r2, r3]
 80038aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d010      	beq.n	80038d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038b6:	4b11      	ldr	r3, [pc, #68]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x94>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	0c5b      	lsrs	r3, r3, #17
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	4a11      	ldr	r2, [pc, #68]	@ (8003908 <HAL_RCC_GetSysClockFreq+0xa0>)
 80038c2:	5cd3      	ldrb	r3, [r2, r3]
 80038c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x98>)
 80038ca:	fb03 f202 	mul.w	r2, r3, r2
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d4:	617b      	str	r3, [r7, #20]
 80038d6:	e004      	b.n	80038e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a0c      	ldr	r2, [pc, #48]	@ (800390c <HAL_RCC_GetSysClockFreq+0xa4>)
 80038dc:	fb02 f303 	mul.w	r3, r2, r3
 80038e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	613b      	str	r3, [r7, #16]
      break;
 80038e6:	e002      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038e8:	4b05      	ldr	r3, [pc, #20]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x98>)
 80038ea:	613b      	str	r3, [r7, #16]
      break;
 80038ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ee:	693b      	ldr	r3, [r7, #16]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	371c      	adds	r7, #28
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	40021000 	.word	0x40021000
 8003900:	007a1200 	.word	0x007a1200
 8003904:	080056b4 	.word	0x080056b4
 8003908:	080056c4 	.word	0x080056c4
 800390c:	003d0900 	.word	0x003d0900

08003910 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003914:	4b02      	ldr	r3, [pc, #8]	@ (8003920 <HAL_RCC_GetHCLKFreq+0x10>)
 8003916:	681b      	ldr	r3, [r3, #0]
}
 8003918:	4618      	mov	r0, r3
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr
 8003920:	20000010 	.word	0x20000010

08003924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003928:	f7ff fff2 	bl	8003910 <HAL_RCC_GetHCLKFreq>
 800392c:	4602      	mov	r2, r0
 800392e:	4b05      	ldr	r3, [pc, #20]	@ (8003944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	0a1b      	lsrs	r3, r3, #8
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	4903      	ldr	r1, [pc, #12]	@ (8003948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800393a:	5ccb      	ldrb	r3, [r1, r3]
 800393c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003940:	4618      	mov	r0, r3
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40021000 	.word	0x40021000
 8003948:	080056ac 	.word	0x080056ac

0800394c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003950:	f7ff ffde 	bl	8003910 <HAL_RCC_GetHCLKFreq>
 8003954:	4602      	mov	r2, r0
 8003956:	4b05      	ldr	r3, [pc, #20]	@ (800396c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	0adb      	lsrs	r3, r3, #11
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	4903      	ldr	r1, [pc, #12]	@ (8003970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003962:	5ccb      	ldrb	r3, [r1, r3]
 8003964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003968:	4618      	mov	r0, r3
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40021000 	.word	0x40021000
 8003970:	080056ac 	.word	0x080056ac

08003974 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800397c:	4b0a      	ldr	r3, [pc, #40]	@ (80039a8 <RCC_Delay+0x34>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a0a      	ldr	r2, [pc, #40]	@ (80039ac <RCC_Delay+0x38>)
 8003982:	fba2 2303 	umull	r2, r3, r2, r3
 8003986:	0a5b      	lsrs	r3, r3, #9
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	fb02 f303 	mul.w	r3, r2, r3
 800398e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003990:	bf00      	nop
  }
  while (Delay --);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	1e5a      	subs	r2, r3, #1
 8003996:	60fa      	str	r2, [r7, #12]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1f9      	bne.n	8003990 <RCC_Delay+0x1c>
}
 800399c:	bf00      	nop
 800399e:	bf00      	nop
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bc80      	pop	{r7}
 80039a6:	4770      	bx	lr
 80039a8:	20000010 	.word	0x20000010
 80039ac:	10624dd3 	.word	0x10624dd3

080039b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e041      	b.n	8003a46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d106      	bne.n	80039dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7fe fc9e 	bl	8002318 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3304      	adds	r3, #4
 80039ec:	4619      	mov	r1, r3
 80039ee:	4610      	mov	r0, r2
 80039f0:	f000 fa5c 	bl	8003eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d001      	beq.n	8003a68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e03a      	b.n	8003ade <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a18      	ldr	r2, [pc, #96]	@ (8003ae8 <HAL_TIM_Base_Start_IT+0x98>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d00e      	beq.n	8003aa8 <HAL_TIM_Base_Start_IT+0x58>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a92:	d009      	beq.n	8003aa8 <HAL_TIM_Base_Start_IT+0x58>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a14      	ldr	r2, [pc, #80]	@ (8003aec <HAL_TIM_Base_Start_IT+0x9c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d004      	beq.n	8003aa8 <HAL_TIM_Base_Start_IT+0x58>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a13      	ldr	r2, [pc, #76]	@ (8003af0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d111      	bne.n	8003acc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 0307 	and.w	r3, r3, #7
 8003ab2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2b06      	cmp	r3, #6
 8003ab8:	d010      	beq.n	8003adc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f042 0201 	orr.w	r2, r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aca:	e007      	b.n	8003adc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0201 	orr.w	r2, r2, #1
 8003ada:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr
 8003ae8:	40012c00 	.word	0x40012c00
 8003aec:	40000400 	.word	0x40000400
 8003af0:	40000800 	.word	0x40000800

08003af4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d020      	beq.n	8003b58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d01b      	beq.n	8003b58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f06f 0202 	mvn.w	r2, #2
 8003b28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f998 	bl	8003e74 <HAL_TIM_IC_CaptureCallback>
 8003b44:	e005      	b.n	8003b52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f98b 	bl	8003e62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f99a 	bl	8003e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d020      	beq.n	8003ba4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d01b      	beq.n	8003ba4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f06f 0204 	mvn.w	r2, #4
 8003b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2202      	movs	r2, #2
 8003b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f972 	bl	8003e74 <HAL_TIM_IC_CaptureCallback>
 8003b90:	e005      	b.n	8003b9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f965 	bl	8003e62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f974 	bl	8003e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d020      	beq.n	8003bf0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f003 0308 	and.w	r3, r3, #8
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d01b      	beq.n	8003bf0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f06f 0208 	mvn.w	r2, #8
 8003bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2204      	movs	r2, #4
 8003bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f94c 	bl	8003e74 <HAL_TIM_IC_CaptureCallback>
 8003bdc:	e005      	b.n	8003bea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f93f 	bl	8003e62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f94e 	bl	8003e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	f003 0310 	and.w	r3, r3, #16
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d020      	beq.n	8003c3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f003 0310 	and.w	r3, r3, #16
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d01b      	beq.n	8003c3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f06f 0210 	mvn.w	r2, #16
 8003c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2208      	movs	r2, #8
 8003c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f926 	bl	8003e74 <HAL_TIM_IC_CaptureCallback>
 8003c28:	e005      	b.n	8003c36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f919 	bl	8003e62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f928 	bl	8003e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00c      	beq.n	8003c60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d007      	beq.n	8003c60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f06f 0201 	mvn.w	r2, #1
 8003c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7fc fb82 	bl	8000364 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00c      	beq.n	8003c84 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d007      	beq.n	8003c84 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 fa7f 	bl	8004182 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00c      	beq.n	8003ca8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d007      	beq.n	8003ca8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f8f8 	bl	8003e98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00c      	beq.n	8003ccc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f003 0320 	and.w	r3, r3, #32
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d007      	beq.n	8003ccc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f06f 0220 	mvn.w	r2, #32
 8003cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 fa52 	bl	8004170 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ccc:	bf00      	nop
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_TIM_ConfigClockSource+0x1c>
 8003cec:	2302      	movs	r3, #2
 8003cee:	e0b4      	b.n	8003e5a <HAL_TIM_ConfigClockSource+0x186>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d28:	d03e      	beq.n	8003da8 <HAL_TIM_ConfigClockSource+0xd4>
 8003d2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d2e:	f200 8087 	bhi.w	8003e40 <HAL_TIM_ConfigClockSource+0x16c>
 8003d32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d36:	f000 8086 	beq.w	8003e46 <HAL_TIM_ConfigClockSource+0x172>
 8003d3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d3e:	d87f      	bhi.n	8003e40 <HAL_TIM_ConfigClockSource+0x16c>
 8003d40:	2b70      	cmp	r3, #112	@ 0x70
 8003d42:	d01a      	beq.n	8003d7a <HAL_TIM_ConfigClockSource+0xa6>
 8003d44:	2b70      	cmp	r3, #112	@ 0x70
 8003d46:	d87b      	bhi.n	8003e40 <HAL_TIM_ConfigClockSource+0x16c>
 8003d48:	2b60      	cmp	r3, #96	@ 0x60
 8003d4a:	d050      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x11a>
 8003d4c:	2b60      	cmp	r3, #96	@ 0x60
 8003d4e:	d877      	bhi.n	8003e40 <HAL_TIM_ConfigClockSource+0x16c>
 8003d50:	2b50      	cmp	r3, #80	@ 0x50
 8003d52:	d03c      	beq.n	8003dce <HAL_TIM_ConfigClockSource+0xfa>
 8003d54:	2b50      	cmp	r3, #80	@ 0x50
 8003d56:	d873      	bhi.n	8003e40 <HAL_TIM_ConfigClockSource+0x16c>
 8003d58:	2b40      	cmp	r3, #64	@ 0x40
 8003d5a:	d058      	beq.n	8003e0e <HAL_TIM_ConfigClockSource+0x13a>
 8003d5c:	2b40      	cmp	r3, #64	@ 0x40
 8003d5e:	d86f      	bhi.n	8003e40 <HAL_TIM_ConfigClockSource+0x16c>
 8003d60:	2b30      	cmp	r3, #48	@ 0x30
 8003d62:	d064      	beq.n	8003e2e <HAL_TIM_ConfigClockSource+0x15a>
 8003d64:	2b30      	cmp	r3, #48	@ 0x30
 8003d66:	d86b      	bhi.n	8003e40 <HAL_TIM_ConfigClockSource+0x16c>
 8003d68:	2b20      	cmp	r3, #32
 8003d6a:	d060      	beq.n	8003e2e <HAL_TIM_ConfigClockSource+0x15a>
 8003d6c:	2b20      	cmp	r3, #32
 8003d6e:	d867      	bhi.n	8003e40 <HAL_TIM_ConfigClockSource+0x16c>
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d05c      	beq.n	8003e2e <HAL_TIM_ConfigClockSource+0x15a>
 8003d74:	2b10      	cmp	r3, #16
 8003d76:	d05a      	beq.n	8003e2e <HAL_TIM_ConfigClockSource+0x15a>
 8003d78:	e062      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d8a:	f000 f974 	bl	8004076 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	609a      	str	r2, [r3, #8]
      break;
 8003da6:	e04f      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003db8:	f000 f95d 	bl	8004076 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689a      	ldr	r2, [r3, #8]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003dca:	609a      	str	r2, [r3, #8]
      break;
 8003dcc:	e03c      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dda:	461a      	mov	r2, r3
 8003ddc:	f000 f8d4 	bl	8003f88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2150      	movs	r1, #80	@ 0x50
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 f92b 	bl	8004042 <TIM_ITRx_SetConfig>
      break;
 8003dec:	e02c      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	f000 f8f2 	bl	8003fe4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2160      	movs	r1, #96	@ 0x60
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 f91b 	bl	8004042 <TIM_ITRx_SetConfig>
      break;
 8003e0c:	e01c      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	f000 f8b4 	bl	8003f88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2140      	movs	r1, #64	@ 0x40
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 f90b 	bl	8004042 <TIM_ITRx_SetConfig>
      break;
 8003e2c:	e00c      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4619      	mov	r1, r3
 8003e38:	4610      	mov	r0, r2
 8003e3a:	f000 f902 	bl	8004042 <TIM_ITRx_SetConfig>
      break;
 8003e3e:	e003      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	73fb      	strb	r3, [r7, #15]
      break;
 8003e44:	e000      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bc80      	pop	{r7}
 8003e72:	4770      	bx	lr

08003e74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bc80      	pop	{r7}
 8003e84:	4770      	bx	lr

08003e86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bc80      	pop	{r7}
 8003e96:	4770      	bx	lr

08003e98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bc80      	pop	{r7}
 8003ea8:	4770      	bx	lr
	...

08003eac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a2f      	ldr	r2, [pc, #188]	@ (8003f7c <TIM_Base_SetConfig+0xd0>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d00b      	beq.n	8003edc <TIM_Base_SetConfig+0x30>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eca:	d007      	beq.n	8003edc <TIM_Base_SetConfig+0x30>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a2c      	ldr	r2, [pc, #176]	@ (8003f80 <TIM_Base_SetConfig+0xd4>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d003      	beq.n	8003edc <TIM_Base_SetConfig+0x30>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a2b      	ldr	r2, [pc, #172]	@ (8003f84 <TIM_Base_SetConfig+0xd8>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d108      	bne.n	8003eee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ee2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a22      	ldr	r2, [pc, #136]	@ (8003f7c <TIM_Base_SetConfig+0xd0>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00b      	beq.n	8003f0e <TIM_Base_SetConfig+0x62>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003efc:	d007      	beq.n	8003f0e <TIM_Base_SetConfig+0x62>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a1f      	ldr	r2, [pc, #124]	@ (8003f80 <TIM_Base_SetConfig+0xd4>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d003      	beq.n	8003f0e <TIM_Base_SetConfig+0x62>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a1e      	ldr	r2, [pc, #120]	@ (8003f84 <TIM_Base_SetConfig+0xd8>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d108      	bne.n	8003f20 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a0d      	ldr	r2, [pc, #52]	@ (8003f7c <TIM_Base_SetConfig+0xd0>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d103      	bne.n	8003f54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	691a      	ldr	r2, [r3, #16]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d005      	beq.n	8003f72 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	f023 0201 	bic.w	r2, r3, #1
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	611a      	str	r2, [r3, #16]
  }
}
 8003f72:	bf00      	nop
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr
 8003f7c:	40012c00 	.word	0x40012c00
 8003f80:	40000400 	.word	0x40000400
 8003f84:	40000800 	.word	0x40000800

08003f88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	f023 0201 	bic.w	r2, r3, #1
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003fb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f023 030a 	bic.w	r3, r3, #10
 8003fc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	621a      	str	r2, [r3, #32]
}
 8003fda:	bf00      	nop
 8003fdc:	371c      	adds	r7, #28
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bc80      	pop	{r7}
 8003fe2:	4770      	bx	lr

08003fe4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	f023 0210 	bic.w	r2, r3, #16
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800400e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	031b      	lsls	r3, r3, #12
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004020:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	011b      	lsls	r3, r3, #4
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	4313      	orrs	r3, r2
 800402a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	621a      	str	r2, [r3, #32]
}
 8004038:	bf00      	nop
 800403a:	371c      	adds	r7, #28
 800403c:	46bd      	mov	sp, r7
 800403e:	bc80      	pop	{r7}
 8004040:	4770      	bx	lr

08004042 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004042:	b480      	push	{r7}
 8004044:	b085      	sub	sp, #20
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
 800404a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004058:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4313      	orrs	r3, r2
 8004060:	f043 0307 	orr.w	r3, r3, #7
 8004064:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	609a      	str	r2, [r3, #8]
}
 800406c:	bf00      	nop
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	bc80      	pop	{r7}
 8004074:	4770      	bx	lr

08004076 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004076:	b480      	push	{r7}
 8004078:	b087      	sub	sp, #28
 800407a:	af00      	add	r7, sp, #0
 800407c:	60f8      	str	r0, [r7, #12]
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	607a      	str	r2, [r7, #4]
 8004082:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004090:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	021a      	lsls	r2, r3, #8
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	431a      	orrs	r2, r3
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	4313      	orrs	r3, r2
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	609a      	str	r2, [r3, #8]
}
 80040aa:	bf00      	nop
 80040ac:	371c      	adds	r7, #28
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr

080040b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d101      	bne.n	80040cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040c8:	2302      	movs	r3, #2
 80040ca:	e046      	b.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a16      	ldr	r2, [pc, #88]	@ (8004164 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d00e      	beq.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004118:	d009      	beq.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a12      	ldr	r2, [pc, #72]	@ (8004168 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d004      	beq.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a10      	ldr	r2, [pc, #64]	@ (800416c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d10c      	bne.n	8004148 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004134:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	4313      	orrs	r3, r2
 800413e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr
 8004164:	40012c00 	.word	0x40012c00
 8004168:	40000400 	.word	0x40000400
 800416c:	40000800 	.word	0x40000800

08004170 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr

08004182 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr

08004194 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e042      	b.n	800422c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d106      	bne.n	80041c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7fe f92e 	bl	800241c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2224      	movs	r2, #36	@ 0x24
 80041c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68da      	ldr	r2, [r3, #12]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 ff2f 	bl	800503c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	691a      	ldr	r2, [r3, #16]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695a      	ldr	r2, [r3, #20]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800420c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b08c      	sub	sp, #48	@ 0x30
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	4613      	mov	r3, r2
 8004240:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b20      	cmp	r3, #32
 800424c:	d156      	bne.n	80042fc <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d002      	beq.n	800425a <HAL_UART_Transmit_DMA+0x26>
 8004254:	88fb      	ldrh	r3, [r7, #6]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e04f      	b.n	80042fe <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	88fa      	ldrh	r2, [r7, #6]
 8004268:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	88fa      	ldrh	r2, [r7, #6]
 800426e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2221      	movs	r2, #33	@ 0x21
 800427a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004282:	4a21      	ldr	r2, [pc, #132]	@ (8004308 <HAL_UART_Transmit_DMA+0xd4>)
 8004284:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800428a:	4a20      	ldr	r2, [pc, #128]	@ (800430c <HAL_UART_Transmit_DMA+0xd8>)
 800428c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004292:	4a1f      	ldr	r2, [pc, #124]	@ (8004310 <HAL_UART_Transmit_DMA+0xdc>)
 8004294:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800429a:	2200      	movs	r2, #0
 800429c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800429e:	f107 0308 	add.w	r3, r7, #8
 80042a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80042a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042aa:	6819      	ldr	r1, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3304      	adds	r3, #4
 80042b2:	461a      	mov	r2, r3
 80042b4:	88fb      	ldrh	r3, [r7, #6]
 80042b6:	f7fe fb6d 	bl	8002994 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80042c2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3314      	adds	r3, #20
 80042ca:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	e853 3f00 	ldrex	r3, [r3]
 80042d2:	617b      	str	r3, [r7, #20]
   return(result);
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3314      	adds	r3, #20
 80042e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80042e6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e8:	6a39      	ldr	r1, [r7, #32]
 80042ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ec:	e841 2300 	strex	r3, r2, [r1]
 80042f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1e5      	bne.n	80042c4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80042f8:	2300      	movs	r3, #0
 80042fa:	e000      	b.n	80042fe <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80042fc:	2302      	movs	r3, #2
  }
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3730      	adds	r7, #48	@ 0x30
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	080048d1 	.word	0x080048d1
 800430c:	0800496b 	.word	0x0800496b
 8004310:	08004aef 	.word	0x08004aef

08004314 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	4613      	mov	r3, r2
 8004320:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b20      	cmp	r3, #32
 800432c:	d112      	bne.n	8004354 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d002      	beq.n	800433a <HAL_UART_Receive_DMA+0x26>
 8004334:	88fb      	ldrh	r3, [r7, #6]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e00b      	b.n	8004356 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004344:	88fb      	ldrh	r3, [r7, #6]
 8004346:	461a      	mov	r2, r3
 8004348:	68b9      	ldr	r1, [r7, #8]
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f000 fc1a 	bl	8004b84 <UART_Start_Receive_DMA>
 8004350:	4603      	mov	r3, r0
 8004352:	e000      	b.n	8004356 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004354:	2302      	movs	r3, #2
  }
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b0ba      	sub	sp, #232	@ 0xe8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004386:	2300      	movs	r3, #0
 8004388:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800438c:	2300      	movs	r3, #0
 800438e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004396:	f003 030f 	and.w	r3, r3, #15
 800439a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800439e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10f      	bne.n	80043c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d009      	beq.n	80043c6 <HAL_UART_IRQHandler+0x66>
 80043b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043b6:	f003 0320 	and.w	r3, r3, #32
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 fd7e 	bl	8004ec0 <UART_Receive_IT>
      return;
 80043c4:	e25b      	b.n	800487e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80043c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 80de 	beq.w	800458c <HAL_UART_IRQHandler+0x22c>
 80043d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d106      	bne.n	80043ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 80d1 	beq.w	800458c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00b      	beq.n	800440e <HAL_UART_IRQHandler+0xae>
 80043f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d005      	beq.n	800440e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004406:	f043 0201 	orr.w	r2, r3, #1
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800440e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004412:	f003 0304 	and.w	r3, r3, #4
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00b      	beq.n	8004432 <HAL_UART_IRQHandler+0xd2>
 800441a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d005      	beq.n	8004432 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800442a:	f043 0202 	orr.w	r2, r3, #2
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00b      	beq.n	8004456 <HAL_UART_IRQHandler+0xf6>
 800443e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d005      	beq.n	8004456 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800444e:	f043 0204 	orr.w	r2, r3, #4
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	2b00      	cmp	r3, #0
 8004460:	d011      	beq.n	8004486 <HAL_UART_IRQHandler+0x126>
 8004462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004466:	f003 0320 	and.w	r3, r3, #32
 800446a:	2b00      	cmp	r3, #0
 800446c:	d105      	bne.n	800447a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800446e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	d005      	beq.n	8004486 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800447e:	f043 0208 	orr.w	r2, r3, #8
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 81f2 	beq.w	8004874 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004494:	f003 0320 	and.w	r3, r3, #32
 8004498:	2b00      	cmp	r3, #0
 800449a:	d008      	beq.n	80044ae <HAL_UART_IRQHandler+0x14e>
 800449c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044a0:	f003 0320 	and.w	r3, r3, #32
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 fd09 	bl	8004ec0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	bf14      	ite	ne
 80044bc:	2301      	movne	r3, #1
 80044be:	2300      	moveq	r3, #0
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d103      	bne.n	80044da <HAL_UART_IRQHandler+0x17a>
 80044d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d04f      	beq.n	800457a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 fc13 	bl	8004d06 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d041      	beq.n	8004572 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3314      	adds	r3, #20
 80044f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80044fc:	e853 3f00 	ldrex	r3, [r3]
 8004500:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004504:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004508:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800450c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	3314      	adds	r3, #20
 8004516:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800451a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800451e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004522:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004526:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800452a:	e841 2300 	strex	r3, r2, [r1]
 800452e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004532:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1d9      	bne.n	80044ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800453e:	2b00      	cmp	r3, #0
 8004540:	d013      	beq.n	800456a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004546:	4a7e      	ldr	r2, [pc, #504]	@ (8004740 <HAL_UART_IRQHandler+0x3e0>)
 8004548:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800454e:	4618      	mov	r0, r3
 8004550:	f7fe fabc 	bl	8002acc <HAL_DMA_Abort_IT>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d016      	beq.n	8004588 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800455e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004564:	4610      	mov	r0, r2
 8004566:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004568:	e00e      	b.n	8004588 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f99c 	bl	80048a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004570:	e00a      	b.n	8004588 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f998 	bl	80048a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004578:	e006      	b.n	8004588 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f994 	bl	80048a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004586:	e175      	b.n	8004874 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004588:	bf00      	nop
    return;
 800458a:	e173      	b.n	8004874 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004590:	2b01      	cmp	r3, #1
 8004592:	f040 814f 	bne.w	8004834 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800459a:	f003 0310 	and.w	r3, r3, #16
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f000 8148 	beq.w	8004834 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80045a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045a8:	f003 0310 	and.w	r3, r3, #16
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 8141 	beq.w	8004834 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045b2:	2300      	movs	r3, #0
 80045b4:	60bb      	str	r3, [r7, #8]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	60bb      	str	r3, [r7, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	60bb      	str	r3, [r7, #8]
 80045c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 80b6 	beq.w	8004744 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 8145 	beq.w	8004878 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80045f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80045f6:	429a      	cmp	r2, r3
 80045f8:	f080 813e 	bcs.w	8004878 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004602:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	2b20      	cmp	r3, #32
 800460c:	f000 8088 	beq.w	8004720 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	330c      	adds	r3, #12
 8004616:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800461e:	e853 3f00 	ldrex	r3, [r3]
 8004622:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004626:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800462a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800462e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	330c      	adds	r3, #12
 8004638:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800463c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004640:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004644:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004648:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800464c:	e841 2300 	strex	r3, r2, [r1]
 8004650:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004654:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1d9      	bne.n	8004610 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	3314      	adds	r3, #20
 8004662:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004664:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004666:	e853 3f00 	ldrex	r3, [r3]
 800466a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800466c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800466e:	f023 0301 	bic.w	r3, r3, #1
 8004672:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3314      	adds	r3, #20
 800467c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004680:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004684:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004686:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004688:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800468c:	e841 2300 	strex	r3, r2, [r1]
 8004690:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004692:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1e1      	bne.n	800465c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3314      	adds	r3, #20
 800469e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046a2:	e853 3f00 	ldrex	r3, [r3]
 80046a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80046a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	3314      	adds	r3, #20
 80046b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80046bc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80046be:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80046c2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80046c4:	e841 2300 	strex	r3, r2, [r1]
 80046c8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80046ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1e3      	bne.n	8004698 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2220      	movs	r2, #32
 80046d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	330c      	adds	r3, #12
 80046e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046e8:	e853 3f00 	ldrex	r3, [r3]
 80046ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80046ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046f0:	f023 0310 	bic.w	r3, r3, #16
 80046f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	330c      	adds	r3, #12
 80046fe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004702:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004704:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004706:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004708:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800470a:	e841 2300 	strex	r3, r2, [r1]
 800470e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004710:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1e3      	bne.n	80046de <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800471a:	4618      	mov	r0, r3
 800471c:	f7fe f99a 	bl	8002a54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800472e:	b29b      	uxth	r3, r3
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	b29b      	uxth	r3, r3
 8004734:	4619      	mov	r1, r3
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f8bf 	bl	80048ba <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800473c:	e09c      	b.n	8004878 <HAL_UART_IRQHandler+0x518>
 800473e:	bf00      	nop
 8004740:	08004dcb 	.word	0x08004dcb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800474c:	b29b      	uxth	r3, r3
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 808e 	beq.w	800487c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004760:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 8089 	beq.w	800487c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	330c      	adds	r3, #12
 8004770:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004774:	e853 3f00 	ldrex	r3, [r3]
 8004778:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800477a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800477c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004780:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	330c      	adds	r3, #12
 800478a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800478e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004790:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004792:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004794:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004796:	e841 2300 	strex	r3, r2, [r1]
 800479a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800479c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1e3      	bne.n	800476a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	3314      	adds	r3, #20
 80047a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ac:	e853 3f00 	ldrex	r3, [r3]
 80047b0:	623b      	str	r3, [r7, #32]
   return(result);
 80047b2:	6a3b      	ldr	r3, [r7, #32]
 80047b4:	f023 0301 	bic.w	r3, r3, #1
 80047b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3314      	adds	r3, #20
 80047c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80047c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80047c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047ce:	e841 2300 	strex	r3, r2, [r1]
 80047d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1e3      	bne.n	80047a2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2220      	movs	r2, #32
 80047de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	330c      	adds	r3, #12
 80047ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	e853 3f00 	ldrex	r3, [r3]
 80047f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f023 0310 	bic.w	r3, r3, #16
 80047fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	330c      	adds	r3, #12
 8004808:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800480c:	61fa      	str	r2, [r7, #28]
 800480e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004810:	69b9      	ldr	r1, [r7, #24]
 8004812:	69fa      	ldr	r2, [r7, #28]
 8004814:	e841 2300 	strex	r3, r2, [r1]
 8004818:	617b      	str	r3, [r7, #20]
   return(result);
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1e3      	bne.n	80047e8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004826:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800482a:	4619      	mov	r1, r3
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f844 	bl	80048ba <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004832:	e023      	b.n	800487c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800483c:	2b00      	cmp	r3, #0
 800483e:	d009      	beq.n	8004854 <HAL_UART_IRQHandler+0x4f4>
 8004840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004844:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 fad0 	bl	8004df2 <UART_Transmit_IT>
    return;
 8004852:	e014      	b.n	800487e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00e      	beq.n	800487e <HAL_UART_IRQHandler+0x51e>
 8004860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004868:	2b00      	cmp	r3, #0
 800486a:	d008      	beq.n	800487e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fb0f 	bl	8004e90 <UART_EndTransmit_IT>
    return;
 8004872:	e004      	b.n	800487e <HAL_UART_IRQHandler+0x51e>
    return;
 8004874:	bf00      	nop
 8004876:	e002      	b.n	800487e <HAL_UART_IRQHandler+0x51e>
      return;
 8004878:	bf00      	nop
 800487a:	e000      	b.n	800487e <HAL_UART_IRQHandler+0x51e>
      return;
 800487c:	bf00      	nop
  }
}
 800487e:	37e8      	adds	r7, #232	@ 0xe8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	bc80      	pop	{r7}
 8004894:	4770      	bx	lr

08004896 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bc80      	pop	{r7}
 80048a6:	4770      	bx	lr

080048a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bc80      	pop	{r7}
 80048b8:	4770      	bx	lr

080048ba <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
 80048c2:	460b      	mov	r3, r1
 80048c4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bc80      	pop	{r7}
 80048ce:	4770      	bx	lr

080048d0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b090      	sub	sp, #64	@ 0x40
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0320 	and.w	r3, r3, #32
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d137      	bne.n	800495c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80048ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048ee:	2200      	movs	r2, #0
 80048f0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80048f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3314      	adds	r3, #20
 80048f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fc:	e853 3f00 	ldrex	r3, [r3]
 8004900:	623b      	str	r3, [r7, #32]
   return(result);
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004908:	63bb      	str	r3, [r7, #56]	@ 0x38
 800490a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	3314      	adds	r3, #20
 8004910:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004912:	633a      	str	r2, [r7, #48]	@ 0x30
 8004914:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004916:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004918:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800491a:	e841 2300 	strex	r3, r2, [r1]
 800491e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1e5      	bne.n	80048f2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	330c      	adds	r3, #12
 800492c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	e853 3f00 	ldrex	r3, [r3]
 8004934:	60fb      	str	r3, [r7, #12]
   return(result);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800493c:	637b      	str	r3, [r7, #52]	@ 0x34
 800493e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	330c      	adds	r3, #12
 8004944:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004946:	61fa      	str	r2, [r7, #28]
 8004948:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494a:	69b9      	ldr	r1, [r7, #24]
 800494c:	69fa      	ldr	r2, [r7, #28]
 800494e:	e841 2300 	strex	r3, r2, [r1]
 8004952:	617b      	str	r3, [r7, #20]
   return(result);
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1e5      	bne.n	8004926 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800495a:	e002      	b.n	8004962 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800495c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800495e:	f7fc fe0b 	bl	8001578 <HAL_UART_TxCpltCallback>
}
 8004962:	bf00      	nop
 8004964:	3740      	adds	r7, #64	@ 0x40
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b084      	sub	sp, #16
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004976:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f7ff ff83 	bl	8004884 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800497e:	bf00      	nop
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b09c      	sub	sp, #112	@ 0x70
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004992:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0320 	and.w	r3, r3, #32
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d172      	bne.n	8004a88 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80049a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049a4:	2200      	movs	r2, #0
 80049a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	330c      	adds	r3, #12
 80049ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049b2:	e853 3f00 	ldrex	r3, [r3]
 80049b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80049b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049be:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	330c      	adds	r3, #12
 80049c6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80049c8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80049ca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80049ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80049d0:	e841 2300 	strex	r3, r2, [r1]
 80049d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80049d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1e5      	bne.n	80049a8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3314      	adds	r3, #20
 80049e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e6:	e853 3f00 	ldrex	r3, [r3]
 80049ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80049ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049ee:	f023 0301 	bic.w	r3, r3, #1
 80049f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80049f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3314      	adds	r3, #20
 80049fa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80049fc:	647a      	str	r2, [r7, #68]	@ 0x44
 80049fe:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a04:	e841 2300 	strex	r3, r2, [r1]
 8004a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1e5      	bne.n	80049dc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3314      	adds	r3, #20
 8004a16:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1a:	e853 3f00 	ldrex	r3, [r3]
 8004a1e:	623b      	str	r3, [r7, #32]
   return(result);
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a26:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	3314      	adds	r3, #20
 8004a2e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004a30:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a38:	e841 2300 	strex	r3, r2, [r1]
 8004a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1e5      	bne.n	8004a10 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a46:	2220      	movs	r2, #32
 8004a48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d119      	bne.n	8004a88 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	330c      	adds	r3, #12
 8004a5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	e853 3f00 	ldrex	r3, [r3]
 8004a62:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f023 0310 	bic.w	r3, r3, #16
 8004a6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	330c      	adds	r3, #12
 8004a72:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004a74:	61fa      	str	r2, [r7, #28]
 8004a76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a78:	69b9      	ldr	r1, [r7, #24]
 8004a7a:	69fa      	ldr	r2, [r7, #28]
 8004a7c:	e841 2300 	strex	r3, r2, [r1]
 8004a80:	617b      	str	r3, [r7, #20]
   return(result);
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1e5      	bne.n	8004a54 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d106      	bne.n	8004aa4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a98:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004a9e:	f7ff ff0c 	bl	80048ba <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004aa2:	e002      	b.n	8004aaa <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004aa4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004aa6:	f7fc fd7f 	bl	80015a8 <HAL_UART_RxCpltCallback>
}
 8004aaa:	bf00      	nop
 8004aac:	3770      	adds	r7, #112	@ 0x70
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b084      	sub	sp, #16
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d108      	bne.n	8004ae0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ad2:	085b      	lsrs	r3, r3, #1
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f7ff feee 	bl	80048ba <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ade:	e002      	b.n	8004ae6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f7ff fed8 	bl	8004896 <HAL_UART_RxHalfCpltCallback>
}
 8004ae6:	bf00      	nop
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b084      	sub	sp, #16
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	bf14      	ite	ne
 8004b0e:	2301      	movne	r3, #1
 8004b10:	2300      	moveq	r3, #0
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b21      	cmp	r3, #33	@ 0x21
 8004b20:	d108      	bne.n	8004b34 <UART_DMAError+0x46>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d005      	beq.n	8004b34 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004b2e:	68b8      	ldr	r0, [r7, #8]
 8004b30:	f000 f8c2 	bl	8004cb8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	bf14      	ite	ne
 8004b42:	2301      	movne	r3, #1
 8004b44:	2300      	moveq	r3, #0
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b22      	cmp	r3, #34	@ 0x22
 8004b54:	d108      	bne.n	8004b68 <UART_DMAError+0x7a>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d005      	beq.n	8004b68 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004b62:	68b8      	ldr	r0, [r7, #8]
 8004b64:	f000 f8cf 	bl	8004d06 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b6c:	f043 0210 	orr.w	r2, r3, #16
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b74:	68b8      	ldr	r0, [r7, #8]
 8004b76:	f7ff fe97 	bl	80048a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b7a:	bf00      	nop
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
	...

08004b84 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b098      	sub	sp, #96	@ 0x60
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	88fa      	ldrh	r2, [r7, #6]
 8004b9c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2222      	movs	r2, #34	@ 0x22
 8004ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb0:	4a3e      	ldr	r2, [pc, #248]	@ (8004cac <UART_Start_Receive_DMA+0x128>)
 8004bb2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb8:	4a3d      	ldr	r2, [pc, #244]	@ (8004cb0 <UART_Start_Receive_DMA+0x12c>)
 8004bba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc0:	4a3c      	ldr	r2, [pc, #240]	@ (8004cb4 <UART_Start_Receive_DMA+0x130>)
 8004bc2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc8:	2200      	movs	r2, #0
 8004bca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004bcc:	f107 0308 	add.w	r3, r7, #8
 8004bd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	3304      	adds	r3, #4
 8004bdc:	4619      	mov	r1, r3
 8004bde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	88fb      	ldrh	r3, [r7, #6]
 8004be4:	f7fd fed6 	bl	8002994 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004be8:	2300      	movs	r3, #0
 8004bea:	613b      	str	r3, [r7, #16]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	613b      	str	r3, [r7, #16]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	613b      	str	r3, [r7, #16]
 8004bfc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d019      	beq.n	8004c3a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	330c      	adds	r3, #12
 8004c0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c10:	e853 3f00 	ldrex	r3, [r3]
 8004c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	330c      	adds	r3, #12
 8004c24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c26:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004c28:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004c2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c2e:	e841 2300 	strex	r3, r2, [r1]
 8004c32:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004c34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1e5      	bne.n	8004c06 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	3314      	adds	r3, #20
 8004c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c44:	e853 3f00 	ldrex	r3, [r3]
 8004c48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c4c:	f043 0301 	orr.w	r3, r3, #1
 8004c50:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3314      	adds	r3, #20
 8004c58:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004c5a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004c5c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004c60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c62:	e841 2300 	strex	r3, r2, [r1]
 8004c66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1e5      	bne.n	8004c3a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3314      	adds	r3, #20
 8004c74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	e853 3f00 	ldrex	r3, [r3]
 8004c7c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c84:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	3314      	adds	r3, #20
 8004c8c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004c8e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c92:	6a39      	ldr	r1, [r7, #32]
 8004c94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c96:	e841 2300 	strex	r3, r2, [r1]
 8004c9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1e5      	bne.n	8004c6e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3760      	adds	r7, #96	@ 0x60
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	08004987 	.word	0x08004987
 8004cb0:	08004ab3 	.word	0x08004ab3
 8004cb4:	08004aef 	.word	0x08004aef

08004cb8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b089      	sub	sp, #36	@ 0x24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	330c      	adds	r3, #12
 8004cc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	e853 3f00 	ldrex	r3, [r3]
 8004cce:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004cd6:	61fb      	str	r3, [r7, #28]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	330c      	adds	r3, #12
 8004cde:	69fa      	ldr	r2, [r7, #28]
 8004ce0:	61ba      	str	r2, [r7, #24]
 8004ce2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce4:	6979      	ldr	r1, [r7, #20]
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	e841 2300 	strex	r3, r2, [r1]
 8004cec:	613b      	str	r3, [r7, #16]
   return(result);
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1e5      	bne.n	8004cc0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004cfc:	bf00      	nop
 8004cfe:	3724      	adds	r7, #36	@ 0x24
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bc80      	pop	{r7}
 8004d04:	4770      	bx	lr

08004d06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b095      	sub	sp, #84	@ 0x54
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	330c      	adds	r3, #12
 8004d14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d18:	e853 3f00 	ldrex	r3, [r3]
 8004d1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	330c      	adds	r3, #12
 8004d2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d2e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d36:	e841 2300 	strex	r3, r2, [r1]
 8004d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1e5      	bne.n	8004d0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	3314      	adds	r3, #20
 8004d48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	e853 3f00 	ldrex	r3, [r3]
 8004d50:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	f023 0301 	bic.w	r3, r3, #1
 8004d58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	3314      	adds	r3, #20
 8004d60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d6a:	e841 2300 	strex	r3, r2, [r1]
 8004d6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1e5      	bne.n	8004d42 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d119      	bne.n	8004db2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	330c      	adds	r3, #12
 8004d84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	e853 3f00 	ldrex	r3, [r3]
 8004d8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f023 0310 	bic.w	r3, r3, #16
 8004d94:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	330c      	adds	r3, #12
 8004d9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d9e:	61ba      	str	r2, [r7, #24]
 8004da0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da2:	6979      	ldr	r1, [r7, #20]
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	e841 2300 	strex	r3, r2, [r1]
 8004daa:	613b      	str	r3, [r7, #16]
   return(result);
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1e5      	bne.n	8004d7e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2220      	movs	r2, #32
 8004db6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004dc0:	bf00      	nop
 8004dc2:	3754      	adds	r7, #84	@ 0x54
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bc80      	pop	{r7}
 8004dc8:	4770      	bx	lr

08004dca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b084      	sub	sp, #16
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f7ff fd5f 	bl	80048a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dea:	bf00      	nop
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b085      	sub	sp, #20
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b21      	cmp	r3, #33	@ 0x21
 8004e04:	d13e      	bne.n	8004e84 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e0e:	d114      	bne.n	8004e3a <UART_Transmit_IT+0x48>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d110      	bne.n	8004e3a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e2c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	1c9a      	adds	r2, r3, #2
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	621a      	str	r2, [r3, #32]
 8004e38:	e008      	b.n	8004e4c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	1c59      	adds	r1, r3, #1
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6211      	str	r1, [r2, #32]
 8004e44:	781a      	ldrb	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	4619      	mov	r1, r3
 8004e5a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10f      	bne.n	8004e80 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	e000      	b.n	8004e86 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e84:	2302      	movs	r3, #2
  }
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bc80      	pop	{r7}
 8004e8e:	4770      	bx	lr

08004e90 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ea6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7fc fb61 	bl	8001578 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08c      	sub	sp, #48	@ 0x30
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b22      	cmp	r3, #34	@ 0x22
 8004ed2:	f040 80ae 	bne.w	8005032 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ede:	d117      	bne.n	8004f10 <UART_Receive_IT+0x50>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d113      	bne.n	8004f10 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f02:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f08:	1c9a      	adds	r2, r3, #2
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f0e:	e026      	b.n	8004f5e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004f16:	2300      	movs	r3, #0
 8004f18:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f22:	d007      	beq.n	8004f34 <UART_Receive_IT+0x74>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10a      	bne.n	8004f42 <UART_Receive_IT+0x82>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d106      	bne.n	8004f42 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f3e:	701a      	strb	r2, [r3, #0]
 8004f40:	e008      	b.n	8004f54 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f4e:	b2da      	uxtb	r2, r3
 8004f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f52:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f58:	1c5a      	adds	r2, r3, #1
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d15d      	bne.n	800502e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68da      	ldr	r2, [r3, #12]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0220 	bic.w	r2, r2, #32
 8004f80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68da      	ldr	r2, [r3, #12]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	695a      	ldr	r2, [r3, #20]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f022 0201 	bic.w	r2, r2, #1
 8004fa0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d135      	bne.n	8005024 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	330c      	adds	r3, #12
 8004fc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	e853 3f00 	ldrex	r3, [r3]
 8004fcc:	613b      	str	r3, [r7, #16]
   return(result);
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f023 0310 	bic.w	r3, r3, #16
 8004fd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	330c      	adds	r3, #12
 8004fdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fde:	623a      	str	r2, [r7, #32]
 8004fe0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe2:	69f9      	ldr	r1, [r7, #28]
 8004fe4:	6a3a      	ldr	r2, [r7, #32]
 8004fe6:	e841 2300 	strex	r3, r2, [r1]
 8004fea:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1e5      	bne.n	8004fbe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0310 	and.w	r3, r3, #16
 8004ffc:	2b10      	cmp	r3, #16
 8004ffe:	d10a      	bne.n	8005016 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005000:	2300      	movs	r3, #0
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	60fb      	str	r3, [r7, #12]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	60fb      	str	r3, [r7, #12]
 8005014:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800501a:	4619      	mov	r1, r3
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7ff fc4c 	bl	80048ba <HAL_UARTEx_RxEventCallback>
 8005022:	e002      	b.n	800502a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7fc fabf 	bl	80015a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800502a:	2300      	movs	r3, #0
 800502c:	e002      	b.n	8005034 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800502e:	2300      	movs	r3, #0
 8005030:	e000      	b.n	8005034 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005032:	2302      	movs	r3, #2
  }
}
 8005034:	4618      	mov	r0, r3
 8005036:	3730      	adds	r7, #48	@ 0x30
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68da      	ldr	r2, [r3, #12]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689a      	ldr	r2, [r3, #8]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	4313      	orrs	r3, r2
 800506a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005076:	f023 030c 	bic.w	r3, r3, #12
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	6812      	ldr	r2, [r2, #0]
 800507e:	68b9      	ldr	r1, [r7, #8]
 8005080:	430b      	orrs	r3, r1
 8005082:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	699a      	ldr	r2, [r3, #24]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a2c      	ldr	r2, [pc, #176]	@ (8005150 <UART_SetConfig+0x114>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d103      	bne.n	80050ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80050a4:	f7fe fc52 	bl	800394c <HAL_RCC_GetPCLK2Freq>
 80050a8:	60f8      	str	r0, [r7, #12]
 80050aa:	e002      	b.n	80050b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80050ac:	f7fe fc3a 	bl	8003924 <HAL_RCC_GetPCLK1Freq>
 80050b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	4613      	mov	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	009a      	lsls	r2, r3, #2
 80050bc:	441a      	add	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c8:	4a22      	ldr	r2, [pc, #136]	@ (8005154 <UART_SetConfig+0x118>)
 80050ca:	fba2 2303 	umull	r2, r3, r2, r3
 80050ce:	095b      	lsrs	r3, r3, #5
 80050d0:	0119      	lsls	r1, r3, #4
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4613      	mov	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	009a      	lsls	r2, r3, #2
 80050dc:	441a      	add	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80050e8:	4b1a      	ldr	r3, [pc, #104]	@ (8005154 <UART_SetConfig+0x118>)
 80050ea:	fba3 0302 	umull	r0, r3, r3, r2
 80050ee:	095b      	lsrs	r3, r3, #5
 80050f0:	2064      	movs	r0, #100	@ 0x64
 80050f2:	fb00 f303 	mul.w	r3, r0, r3
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	011b      	lsls	r3, r3, #4
 80050fa:	3332      	adds	r3, #50	@ 0x32
 80050fc:	4a15      	ldr	r2, [pc, #84]	@ (8005154 <UART_SetConfig+0x118>)
 80050fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005102:	095b      	lsrs	r3, r3, #5
 8005104:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005108:	4419      	add	r1, r3
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	4613      	mov	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4413      	add	r3, r2
 8005112:	009a      	lsls	r2, r3, #2
 8005114:	441a      	add	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005120:	4b0c      	ldr	r3, [pc, #48]	@ (8005154 <UART_SetConfig+0x118>)
 8005122:	fba3 0302 	umull	r0, r3, r3, r2
 8005126:	095b      	lsrs	r3, r3, #5
 8005128:	2064      	movs	r0, #100	@ 0x64
 800512a:	fb00 f303 	mul.w	r3, r0, r3
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	011b      	lsls	r3, r3, #4
 8005132:	3332      	adds	r3, #50	@ 0x32
 8005134:	4a07      	ldr	r2, [pc, #28]	@ (8005154 <UART_SetConfig+0x118>)
 8005136:	fba2 2303 	umull	r2, r3, r2, r3
 800513a:	095b      	lsrs	r3, r3, #5
 800513c:	f003 020f 	and.w	r2, r3, #15
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	440a      	add	r2, r1
 8005146:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005148:	bf00      	nop
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	40013800 	.word	0x40013800
 8005154:	51eb851f 	.word	0x51eb851f

08005158 <realloc>:
 8005158:	4b02      	ldr	r3, [pc, #8]	@ (8005164 <realloc+0xc>)
 800515a:	460a      	mov	r2, r1
 800515c:	4601      	mov	r1, r0
 800515e:	6818      	ldr	r0, [r3, #0]
 8005160:	f000 b802 	b.w	8005168 <_realloc_r>
 8005164:	2000001c 	.word	0x2000001c

08005168 <_realloc_r>:
 8005168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800516c:	4680      	mov	r8, r0
 800516e:	4615      	mov	r5, r2
 8005170:	460c      	mov	r4, r1
 8005172:	b921      	cbnz	r1, 800517e <_realloc_r+0x16>
 8005174:	4611      	mov	r1, r2
 8005176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800517a:	f000 b8cf 	b.w	800531c <_malloc_r>
 800517e:	b92a      	cbnz	r2, 800518c <_realloc_r+0x24>
 8005180:	f000 f862 	bl	8005248 <_free_r>
 8005184:	2400      	movs	r4, #0
 8005186:	4620      	mov	r0, r4
 8005188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800518c:	f000 f952 	bl	8005434 <_malloc_usable_size_r>
 8005190:	4285      	cmp	r5, r0
 8005192:	4606      	mov	r6, r0
 8005194:	d802      	bhi.n	800519c <_realloc_r+0x34>
 8005196:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800519a:	d8f4      	bhi.n	8005186 <_realloc_r+0x1e>
 800519c:	4629      	mov	r1, r5
 800519e:	4640      	mov	r0, r8
 80051a0:	f000 f8bc 	bl	800531c <_malloc_r>
 80051a4:	4607      	mov	r7, r0
 80051a6:	2800      	cmp	r0, #0
 80051a8:	d0ec      	beq.n	8005184 <_realloc_r+0x1c>
 80051aa:	42b5      	cmp	r5, r6
 80051ac:	462a      	mov	r2, r5
 80051ae:	4621      	mov	r1, r4
 80051b0:	bf28      	it	cs
 80051b2:	4632      	movcs	r2, r6
 80051b4:	f000 f83a 	bl	800522c <memcpy>
 80051b8:	4621      	mov	r1, r4
 80051ba:	4640      	mov	r0, r8
 80051bc:	f000 f844 	bl	8005248 <_free_r>
 80051c0:	463c      	mov	r4, r7
 80051c2:	e7e0      	b.n	8005186 <_realloc_r+0x1e>

080051c4 <memset>:
 80051c4:	4603      	mov	r3, r0
 80051c6:	4402      	add	r2, r0
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d100      	bne.n	80051ce <memset+0xa>
 80051cc:	4770      	bx	lr
 80051ce:	f803 1b01 	strb.w	r1, [r3], #1
 80051d2:	e7f9      	b.n	80051c8 <memset+0x4>

080051d4 <__errno>:
 80051d4:	4b01      	ldr	r3, [pc, #4]	@ (80051dc <__errno+0x8>)
 80051d6:	6818      	ldr	r0, [r3, #0]
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	2000001c 	.word	0x2000001c

080051e0 <__libc_init_array>:
 80051e0:	b570      	push	{r4, r5, r6, lr}
 80051e2:	2600      	movs	r6, #0
 80051e4:	4d0c      	ldr	r5, [pc, #48]	@ (8005218 <__libc_init_array+0x38>)
 80051e6:	4c0d      	ldr	r4, [pc, #52]	@ (800521c <__libc_init_array+0x3c>)
 80051e8:	1b64      	subs	r4, r4, r5
 80051ea:	10a4      	asrs	r4, r4, #2
 80051ec:	42a6      	cmp	r6, r4
 80051ee:	d109      	bne.n	8005204 <__libc_init_array+0x24>
 80051f0:	f000 f938 	bl	8005464 <_init>
 80051f4:	2600      	movs	r6, #0
 80051f6:	4d0a      	ldr	r5, [pc, #40]	@ (8005220 <__libc_init_array+0x40>)
 80051f8:	4c0a      	ldr	r4, [pc, #40]	@ (8005224 <__libc_init_array+0x44>)
 80051fa:	1b64      	subs	r4, r4, r5
 80051fc:	10a4      	asrs	r4, r4, #2
 80051fe:	42a6      	cmp	r6, r4
 8005200:	d105      	bne.n	800520e <__libc_init_array+0x2e>
 8005202:	bd70      	pop	{r4, r5, r6, pc}
 8005204:	f855 3b04 	ldr.w	r3, [r5], #4
 8005208:	4798      	blx	r3
 800520a:	3601      	adds	r6, #1
 800520c:	e7ee      	b.n	80051ec <__libc_init_array+0xc>
 800520e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005212:	4798      	blx	r3
 8005214:	3601      	adds	r6, #1
 8005216:	e7f2      	b.n	80051fe <__libc_init_array+0x1e>
 8005218:	080056d0 	.word	0x080056d0
 800521c:	080056d0 	.word	0x080056d0
 8005220:	080056d0 	.word	0x080056d0
 8005224:	080056d8 	.word	0x080056d8

08005228 <__retarget_lock_acquire_recursive>:
 8005228:	4770      	bx	lr

0800522a <__retarget_lock_release_recursive>:
 800522a:	4770      	bx	lr

0800522c <memcpy>:
 800522c:	440a      	add	r2, r1
 800522e:	4291      	cmp	r1, r2
 8005230:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005234:	d100      	bne.n	8005238 <memcpy+0xc>
 8005236:	4770      	bx	lr
 8005238:	b510      	push	{r4, lr}
 800523a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800523e:	4291      	cmp	r1, r2
 8005240:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005244:	d1f9      	bne.n	800523a <memcpy+0xe>
 8005246:	bd10      	pop	{r4, pc}

08005248 <_free_r>:
 8005248:	b538      	push	{r3, r4, r5, lr}
 800524a:	4605      	mov	r5, r0
 800524c:	2900      	cmp	r1, #0
 800524e:	d040      	beq.n	80052d2 <_free_r+0x8a>
 8005250:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005254:	1f0c      	subs	r4, r1, #4
 8005256:	2b00      	cmp	r3, #0
 8005258:	bfb8      	it	lt
 800525a:	18e4      	addlt	r4, r4, r3
 800525c:	f000 f8de 	bl	800541c <__malloc_lock>
 8005260:	4a1c      	ldr	r2, [pc, #112]	@ (80052d4 <_free_r+0x8c>)
 8005262:	6813      	ldr	r3, [r2, #0]
 8005264:	b933      	cbnz	r3, 8005274 <_free_r+0x2c>
 8005266:	6063      	str	r3, [r4, #4]
 8005268:	6014      	str	r4, [r2, #0]
 800526a:	4628      	mov	r0, r5
 800526c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005270:	f000 b8da 	b.w	8005428 <__malloc_unlock>
 8005274:	42a3      	cmp	r3, r4
 8005276:	d908      	bls.n	800528a <_free_r+0x42>
 8005278:	6820      	ldr	r0, [r4, #0]
 800527a:	1821      	adds	r1, r4, r0
 800527c:	428b      	cmp	r3, r1
 800527e:	bf01      	itttt	eq
 8005280:	6819      	ldreq	r1, [r3, #0]
 8005282:	685b      	ldreq	r3, [r3, #4]
 8005284:	1809      	addeq	r1, r1, r0
 8005286:	6021      	streq	r1, [r4, #0]
 8005288:	e7ed      	b.n	8005266 <_free_r+0x1e>
 800528a:	461a      	mov	r2, r3
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	b10b      	cbz	r3, 8005294 <_free_r+0x4c>
 8005290:	42a3      	cmp	r3, r4
 8005292:	d9fa      	bls.n	800528a <_free_r+0x42>
 8005294:	6811      	ldr	r1, [r2, #0]
 8005296:	1850      	adds	r0, r2, r1
 8005298:	42a0      	cmp	r0, r4
 800529a:	d10b      	bne.n	80052b4 <_free_r+0x6c>
 800529c:	6820      	ldr	r0, [r4, #0]
 800529e:	4401      	add	r1, r0
 80052a0:	1850      	adds	r0, r2, r1
 80052a2:	4283      	cmp	r3, r0
 80052a4:	6011      	str	r1, [r2, #0]
 80052a6:	d1e0      	bne.n	800526a <_free_r+0x22>
 80052a8:	6818      	ldr	r0, [r3, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	4408      	add	r0, r1
 80052ae:	6010      	str	r0, [r2, #0]
 80052b0:	6053      	str	r3, [r2, #4]
 80052b2:	e7da      	b.n	800526a <_free_r+0x22>
 80052b4:	d902      	bls.n	80052bc <_free_r+0x74>
 80052b6:	230c      	movs	r3, #12
 80052b8:	602b      	str	r3, [r5, #0]
 80052ba:	e7d6      	b.n	800526a <_free_r+0x22>
 80052bc:	6820      	ldr	r0, [r4, #0]
 80052be:	1821      	adds	r1, r4, r0
 80052c0:	428b      	cmp	r3, r1
 80052c2:	bf01      	itttt	eq
 80052c4:	6819      	ldreq	r1, [r3, #0]
 80052c6:	685b      	ldreq	r3, [r3, #4]
 80052c8:	1809      	addeq	r1, r1, r0
 80052ca:	6021      	streq	r1, [r4, #0]
 80052cc:	6063      	str	r3, [r4, #4]
 80052ce:	6054      	str	r4, [r2, #4]
 80052d0:	e7cb      	b.n	800526a <_free_r+0x22>
 80052d2:	bd38      	pop	{r3, r4, r5, pc}
 80052d4:	20000ca0 	.word	0x20000ca0

080052d8 <sbrk_aligned>:
 80052d8:	b570      	push	{r4, r5, r6, lr}
 80052da:	4e0f      	ldr	r6, [pc, #60]	@ (8005318 <sbrk_aligned+0x40>)
 80052dc:	460c      	mov	r4, r1
 80052de:	6831      	ldr	r1, [r6, #0]
 80052e0:	4605      	mov	r5, r0
 80052e2:	b911      	cbnz	r1, 80052ea <sbrk_aligned+0x12>
 80052e4:	f000 f8ae 	bl	8005444 <_sbrk_r>
 80052e8:	6030      	str	r0, [r6, #0]
 80052ea:	4621      	mov	r1, r4
 80052ec:	4628      	mov	r0, r5
 80052ee:	f000 f8a9 	bl	8005444 <_sbrk_r>
 80052f2:	1c43      	adds	r3, r0, #1
 80052f4:	d103      	bne.n	80052fe <sbrk_aligned+0x26>
 80052f6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80052fa:	4620      	mov	r0, r4
 80052fc:	bd70      	pop	{r4, r5, r6, pc}
 80052fe:	1cc4      	adds	r4, r0, #3
 8005300:	f024 0403 	bic.w	r4, r4, #3
 8005304:	42a0      	cmp	r0, r4
 8005306:	d0f8      	beq.n	80052fa <sbrk_aligned+0x22>
 8005308:	1a21      	subs	r1, r4, r0
 800530a:	4628      	mov	r0, r5
 800530c:	f000 f89a 	bl	8005444 <_sbrk_r>
 8005310:	3001      	adds	r0, #1
 8005312:	d1f2      	bne.n	80052fa <sbrk_aligned+0x22>
 8005314:	e7ef      	b.n	80052f6 <sbrk_aligned+0x1e>
 8005316:	bf00      	nop
 8005318:	20000c9c 	.word	0x20000c9c

0800531c <_malloc_r>:
 800531c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005320:	1ccd      	adds	r5, r1, #3
 8005322:	f025 0503 	bic.w	r5, r5, #3
 8005326:	3508      	adds	r5, #8
 8005328:	2d0c      	cmp	r5, #12
 800532a:	bf38      	it	cc
 800532c:	250c      	movcc	r5, #12
 800532e:	2d00      	cmp	r5, #0
 8005330:	4606      	mov	r6, r0
 8005332:	db01      	blt.n	8005338 <_malloc_r+0x1c>
 8005334:	42a9      	cmp	r1, r5
 8005336:	d904      	bls.n	8005342 <_malloc_r+0x26>
 8005338:	230c      	movs	r3, #12
 800533a:	6033      	str	r3, [r6, #0]
 800533c:	2000      	movs	r0, #0
 800533e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005342:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005418 <_malloc_r+0xfc>
 8005346:	f000 f869 	bl	800541c <__malloc_lock>
 800534a:	f8d8 3000 	ldr.w	r3, [r8]
 800534e:	461c      	mov	r4, r3
 8005350:	bb44      	cbnz	r4, 80053a4 <_malloc_r+0x88>
 8005352:	4629      	mov	r1, r5
 8005354:	4630      	mov	r0, r6
 8005356:	f7ff ffbf 	bl	80052d8 <sbrk_aligned>
 800535a:	1c43      	adds	r3, r0, #1
 800535c:	4604      	mov	r4, r0
 800535e:	d158      	bne.n	8005412 <_malloc_r+0xf6>
 8005360:	f8d8 4000 	ldr.w	r4, [r8]
 8005364:	4627      	mov	r7, r4
 8005366:	2f00      	cmp	r7, #0
 8005368:	d143      	bne.n	80053f2 <_malloc_r+0xd6>
 800536a:	2c00      	cmp	r4, #0
 800536c:	d04b      	beq.n	8005406 <_malloc_r+0xea>
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	4639      	mov	r1, r7
 8005372:	4630      	mov	r0, r6
 8005374:	eb04 0903 	add.w	r9, r4, r3
 8005378:	f000 f864 	bl	8005444 <_sbrk_r>
 800537c:	4581      	cmp	r9, r0
 800537e:	d142      	bne.n	8005406 <_malloc_r+0xea>
 8005380:	6821      	ldr	r1, [r4, #0]
 8005382:	4630      	mov	r0, r6
 8005384:	1a6d      	subs	r5, r5, r1
 8005386:	4629      	mov	r1, r5
 8005388:	f7ff ffa6 	bl	80052d8 <sbrk_aligned>
 800538c:	3001      	adds	r0, #1
 800538e:	d03a      	beq.n	8005406 <_malloc_r+0xea>
 8005390:	6823      	ldr	r3, [r4, #0]
 8005392:	442b      	add	r3, r5
 8005394:	6023      	str	r3, [r4, #0]
 8005396:	f8d8 3000 	ldr.w	r3, [r8]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	bb62      	cbnz	r2, 80053f8 <_malloc_r+0xdc>
 800539e:	f8c8 7000 	str.w	r7, [r8]
 80053a2:	e00f      	b.n	80053c4 <_malloc_r+0xa8>
 80053a4:	6822      	ldr	r2, [r4, #0]
 80053a6:	1b52      	subs	r2, r2, r5
 80053a8:	d420      	bmi.n	80053ec <_malloc_r+0xd0>
 80053aa:	2a0b      	cmp	r2, #11
 80053ac:	d917      	bls.n	80053de <_malloc_r+0xc2>
 80053ae:	1961      	adds	r1, r4, r5
 80053b0:	42a3      	cmp	r3, r4
 80053b2:	6025      	str	r5, [r4, #0]
 80053b4:	bf18      	it	ne
 80053b6:	6059      	strne	r1, [r3, #4]
 80053b8:	6863      	ldr	r3, [r4, #4]
 80053ba:	bf08      	it	eq
 80053bc:	f8c8 1000 	streq.w	r1, [r8]
 80053c0:	5162      	str	r2, [r4, r5]
 80053c2:	604b      	str	r3, [r1, #4]
 80053c4:	4630      	mov	r0, r6
 80053c6:	f000 f82f 	bl	8005428 <__malloc_unlock>
 80053ca:	f104 000b 	add.w	r0, r4, #11
 80053ce:	1d23      	adds	r3, r4, #4
 80053d0:	f020 0007 	bic.w	r0, r0, #7
 80053d4:	1ac2      	subs	r2, r0, r3
 80053d6:	bf1c      	itt	ne
 80053d8:	1a1b      	subne	r3, r3, r0
 80053da:	50a3      	strne	r3, [r4, r2]
 80053dc:	e7af      	b.n	800533e <_malloc_r+0x22>
 80053de:	6862      	ldr	r2, [r4, #4]
 80053e0:	42a3      	cmp	r3, r4
 80053e2:	bf0c      	ite	eq
 80053e4:	f8c8 2000 	streq.w	r2, [r8]
 80053e8:	605a      	strne	r2, [r3, #4]
 80053ea:	e7eb      	b.n	80053c4 <_malloc_r+0xa8>
 80053ec:	4623      	mov	r3, r4
 80053ee:	6864      	ldr	r4, [r4, #4]
 80053f0:	e7ae      	b.n	8005350 <_malloc_r+0x34>
 80053f2:	463c      	mov	r4, r7
 80053f4:	687f      	ldr	r7, [r7, #4]
 80053f6:	e7b6      	b.n	8005366 <_malloc_r+0x4a>
 80053f8:	461a      	mov	r2, r3
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	42a3      	cmp	r3, r4
 80053fe:	d1fb      	bne.n	80053f8 <_malloc_r+0xdc>
 8005400:	2300      	movs	r3, #0
 8005402:	6053      	str	r3, [r2, #4]
 8005404:	e7de      	b.n	80053c4 <_malloc_r+0xa8>
 8005406:	230c      	movs	r3, #12
 8005408:	4630      	mov	r0, r6
 800540a:	6033      	str	r3, [r6, #0]
 800540c:	f000 f80c 	bl	8005428 <__malloc_unlock>
 8005410:	e794      	b.n	800533c <_malloc_r+0x20>
 8005412:	6005      	str	r5, [r0, #0]
 8005414:	e7d6      	b.n	80053c4 <_malloc_r+0xa8>
 8005416:	bf00      	nop
 8005418:	20000ca0 	.word	0x20000ca0

0800541c <__malloc_lock>:
 800541c:	4801      	ldr	r0, [pc, #4]	@ (8005424 <__malloc_lock+0x8>)
 800541e:	f7ff bf03 	b.w	8005228 <__retarget_lock_acquire_recursive>
 8005422:	bf00      	nop
 8005424:	20000c98 	.word	0x20000c98

08005428 <__malloc_unlock>:
 8005428:	4801      	ldr	r0, [pc, #4]	@ (8005430 <__malloc_unlock+0x8>)
 800542a:	f7ff befe 	b.w	800522a <__retarget_lock_release_recursive>
 800542e:	bf00      	nop
 8005430:	20000c98 	.word	0x20000c98

08005434 <_malloc_usable_size_r>:
 8005434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005438:	1f18      	subs	r0, r3, #4
 800543a:	2b00      	cmp	r3, #0
 800543c:	bfbc      	itt	lt
 800543e:	580b      	ldrlt	r3, [r1, r0]
 8005440:	18c0      	addlt	r0, r0, r3
 8005442:	4770      	bx	lr

08005444 <_sbrk_r>:
 8005444:	b538      	push	{r3, r4, r5, lr}
 8005446:	2300      	movs	r3, #0
 8005448:	4d05      	ldr	r5, [pc, #20]	@ (8005460 <_sbrk_r+0x1c>)
 800544a:	4604      	mov	r4, r0
 800544c:	4608      	mov	r0, r1
 800544e:	602b      	str	r3, [r5, #0]
 8005450:	f7fc fe8a 	bl	8002168 <_sbrk>
 8005454:	1c43      	adds	r3, r0, #1
 8005456:	d102      	bne.n	800545e <_sbrk_r+0x1a>
 8005458:	682b      	ldr	r3, [r5, #0]
 800545a:	b103      	cbz	r3, 800545e <_sbrk_r+0x1a>
 800545c:	6023      	str	r3, [r4, #0]
 800545e:	bd38      	pop	{r3, r4, r5, pc}
 8005460:	20000c94 	.word	0x20000c94

08005464 <_init>:
 8005464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005466:	bf00      	nop
 8005468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800546a:	bc08      	pop	{r3}
 800546c:	469e      	mov	lr, r3
 800546e:	4770      	bx	lr

08005470 <_fini>:
 8005470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005472:	bf00      	nop
 8005474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005476:	bc08      	pop	{r3}
 8005478:	469e      	mov	lr, r3
 800547a:	4770      	bx	lr
