
ros_test5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052bc  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08005454  08005454  00006454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800569c  0800569c  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  0800569c  0800569c  0000669c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056a4  080056a4  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080056a4  080056a4  000066a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056ac  080056ac  000066ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080056b0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bd0  2000005c  0800570c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c2c  0800570c  00007c2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eef0  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024c9  00000000  00000000  00015f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  00018448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000738  00000000  00000000  00018dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b8e  00000000  00000000  00019500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c554  00000000  00000000  0003008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b5df  00000000  00000000  0003c5e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7bc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000291c  00000000  00000000  000c7c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000ca520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000005c 	.word	0x2000005c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800543c 	.word	0x0800543c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	0800543c 	.word	0x0800543c

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001fc:	f000 b96a 	b.w	80004d4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	460c      	mov	r4, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14e      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000224:	4694      	mov	ip, r2
 8000226:	458c      	cmp	ip, r1
 8000228:	4686      	mov	lr, r0
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	d962      	bls.n	80002f6 <__udivmoddi4+0xde>
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0320 	rsb	r3, r2, #32
 8000236:	4091      	lsls	r1, r2
 8000238:	fa20 f303 	lsr.w	r3, r0, r3
 800023c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000240:	4319      	orrs	r1, r3
 8000242:	fa00 fe02 	lsl.w	lr, r0, r2
 8000246:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024a:	fa1f f68c 	uxth.w	r6, ip
 800024e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000252:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000256:	fb07 1114 	mls	r1, r7, r4, r1
 800025a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025e:	fb04 f106 	mul.w	r1, r4, r6
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800026e:	f080 8112 	bcs.w	8000496 <__udivmoddi4+0x27e>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 810f 	bls.w	8000496 <__udivmoddi4+0x27e>
 8000278:	3c02      	subs	r4, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a59      	subs	r1, r3, r1
 800027e:	fa1f f38e 	uxth.w	r3, lr
 8000282:	fbb1 f0f7 	udiv	r0, r1, r7
 8000286:	fb07 1110 	mls	r1, r7, r0, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb00 f606 	mul.w	r6, r0, r6
 8000292:	429e      	cmp	r6, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x94>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800029e:	f080 80fc 	bcs.w	800049a <__udivmoddi4+0x282>
 80002a2:	429e      	cmp	r6, r3
 80002a4:	f240 80f9 	bls.w	800049a <__udivmoddi4+0x282>
 80002a8:	4463      	add	r3, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	1b9b      	subs	r3, r3, r6
 80002ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa6>
 80002b6:	40d3      	lsrs	r3, r2
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xba>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb4>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa6>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x150>
 80002da:	42a3      	cmp	r3, r4
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xcc>
 80002de:	4290      	cmp	r0, r2
 80002e0:	f0c0 80f0 	bcc.w	80004c4 <__udivmoddi4+0x2ac>
 80002e4:	1a86      	subs	r6, r0, r2
 80002e6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	2d00      	cmp	r5, #0
 80002ee:	d0e6      	beq.n	80002be <__udivmoddi4+0xa6>
 80002f0:	e9c5 6300 	strd	r6, r3, [r5]
 80002f4:	e7e3      	b.n	80002be <__udivmoddi4+0xa6>
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x204>
 80002fc:	eba1 040c 	sub.w	r4, r1, ip
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	fa1f f78c 	uxth.w	r7, ip
 8000308:	2101      	movs	r1, #1
 800030a:	fbb4 f6f8 	udiv	r6, r4, r8
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	fb08 4416 	mls	r4, r8, r6, r4
 8000316:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031a:	fb07 f006 	mul.w	r0, r7, r6
 800031e:	4298      	cmp	r0, r3
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x11c>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x11a>
 800032c:	4298      	cmp	r0, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 8000332:	4626      	mov	r6, r4
 8000334:	1a1c      	subs	r4, r3, r0
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb4 f0f8 	udiv	r0, r4, r8
 800033e:	fb08 4410 	mls	r4, r8, r0, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb00 f707 	mul.w	r7, r0, r7
 800034a:	429f      	cmp	r7, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x148>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x146>
 8000358:	429f      	cmp	r7, r3
 800035a:	f200 80b0 	bhi.w	80004be <__udivmoddi4+0x2a6>
 800035e:	4620      	mov	r0, r4
 8000360:	1bdb      	subs	r3, r3, r7
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x9c>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa20 fc06 	lsr.w	ip, r0, r6
 8000378:	fa04 f301 	lsl.w	r3, r4, r1
 800037c:	ea43 030c 	orr.w	r3, r3, ip
 8000380:	40f4      	lsrs	r4, r6
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	0c38      	lsrs	r0, r7, #16
 8000388:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800038c:	fbb4 fef0 	udiv	lr, r4, r0
 8000390:	fa1f fc87 	uxth.w	ip, r7
 8000394:	fb00 441e 	mls	r4, r0, lr, r4
 8000398:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800039c:	fb0e f90c 	mul.w	r9, lr, ip
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90a      	bls.n	80003be <__udivmoddi4+0x1a6>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ae:	f080 8084 	bcs.w	80004ba <__udivmoddi4+0x2a2>
 80003b2:	45a1      	cmp	r9, r4
 80003b4:	f240 8081 	bls.w	80004ba <__udivmoddi4+0x2a2>
 80003b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003bc:	443c      	add	r4, r7
 80003be:	eba4 0409 	sub.w	r4, r4, r9
 80003c2:	fa1f f983 	uxth.w	r9, r3
 80003c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ca:	fb00 4413 	mls	r4, r0, r3, r4
 80003ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1d2>
 80003da:	193c      	adds	r4, r7, r4
 80003dc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e0:	d267      	bcs.n	80004b2 <__udivmoddi4+0x29a>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0x29a>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ee:	fba0 9302 	umull	r9, r3, r0, r2
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	429c      	cmp	r4, r3
 80003f8:	46ce      	mov	lr, r9
 80003fa:	469c      	mov	ip, r3
 80003fc:	d351      	bcc.n	80004a2 <__udivmoddi4+0x28a>
 80003fe:	d04e      	beq.n	800049e <__udivmoddi4+0x286>
 8000400:	b155      	cbz	r5, 8000418 <__udivmoddi4+0x200>
 8000402:	ebb8 030e 	subs.w	r3, r8, lr
 8000406:	eb64 040c 	sbc.w	r4, r4, ip
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	40cb      	lsrs	r3, r1
 8000410:	431e      	orrs	r6, r3
 8000412:	40cc      	lsrs	r4, r1
 8000414:	e9c5 6400 	strd	r6, r4, [r5]
 8000418:	2100      	movs	r1, #0
 800041a:	e750      	b.n	80002be <__udivmoddi4+0xa6>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f103 	lsr.w	r1, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa24 f303 	lsr.w	r3, r4, r3
 800042c:	4094      	lsls	r4, r2
 800042e:	430c      	orrs	r4, r1
 8000430:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000434:	fa00 fe02 	lsl.w	lr, r0, r2
 8000438:	fa1f f78c 	uxth.w	r7, ip
 800043c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000440:	fb08 3110 	mls	r1, r8, r0, r3
 8000444:	0c23      	lsrs	r3, r4, #16
 8000446:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044a:	fb00 f107 	mul.w	r1, r0, r7
 800044e:	4299      	cmp	r1, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x24c>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800045a:	d22c      	bcs.n	80004b6 <__udivmoddi4+0x29e>
 800045c:	4299      	cmp	r1, r3
 800045e:	d92a      	bls.n	80004b6 <__udivmoddi4+0x29e>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a5b      	subs	r3, r3, r1
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb3 f1f8 	udiv	r1, r3, r8
 800046c:	fb08 3311 	mls	r3, r8, r1, r3
 8000470:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000474:	fb01 f307 	mul.w	r3, r1, r7
 8000478:	42a3      	cmp	r3, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x276>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000484:	d213      	bcs.n	80004ae <__udivmoddi4+0x296>
 8000486:	42a3      	cmp	r3, r4
 8000488:	d911      	bls.n	80004ae <__udivmoddi4+0x296>
 800048a:	3902      	subs	r1, #2
 800048c:	4464      	add	r4, ip
 800048e:	1ae4      	subs	r4, r4, r3
 8000490:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000494:	e739      	b.n	800030a <__udivmoddi4+0xf2>
 8000496:	4604      	mov	r4, r0
 8000498:	e6f0      	b.n	800027c <__udivmoddi4+0x64>
 800049a:	4608      	mov	r0, r1
 800049c:	e706      	b.n	80002ac <__udivmoddi4+0x94>
 800049e:	45c8      	cmp	r8, r9
 80004a0:	d2ae      	bcs.n	8000400 <__udivmoddi4+0x1e8>
 80004a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004aa:	3801      	subs	r0, #1
 80004ac:	e7a8      	b.n	8000400 <__udivmoddi4+0x1e8>
 80004ae:	4631      	mov	r1, r6
 80004b0:	e7ed      	b.n	800048e <__udivmoddi4+0x276>
 80004b2:	4603      	mov	r3, r0
 80004b4:	e799      	b.n	80003ea <__udivmoddi4+0x1d2>
 80004b6:	4630      	mov	r0, r6
 80004b8:	e7d4      	b.n	8000464 <__udivmoddi4+0x24c>
 80004ba:	46d6      	mov	lr, sl
 80004bc:	e77f      	b.n	80003be <__udivmoddi4+0x1a6>
 80004be:	4463      	add	r3, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e74d      	b.n	8000360 <__udivmoddi4+0x148>
 80004c4:	4606      	mov	r6, r0
 80004c6:	4623      	mov	r3, r4
 80004c8:	4608      	mov	r0, r1
 80004ca:	e70f      	b.n	80002ec <__udivmoddi4+0xd4>
 80004cc:	3e02      	subs	r6, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	e730      	b.n	8000334 <__udivmoddi4+0x11c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	0a5a      	lsrs	r2, r3, #9
 80004e8:	490f      	ldr	r1, [pc, #60]	@ (8000528 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80004ea:	fba1 1202 	umull	r1, r2, r1, r2
 80004ee:	09d2      	lsrs	r2, r2, #7
 80004f0:	490e      	ldr	r1, [pc, #56]	@ (800052c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80004f2:	fb01 f202 	mul.w	r2, r1, r2
 80004f6:	1a9b      	subs	r3, r3, r2
 80004f8:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	0a5b      	lsrs	r3, r3, #9
 8000500:	4a09      	ldr	r2, [pc, #36]	@ (8000528 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000502:	fba2 2303 	umull	r2, r3, r2, r3
 8000506:	09db      	lsrs	r3, r3, #7
 8000508:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	441a      	add	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	68fa      	ldr	r2, [r7, #12]
 800051a:	601a      	str	r2, [r3, #0]
}
 800051c:	bf00      	nop
 800051e:	3714      	adds	r7, #20
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	00044b83 	.word	0x00044b83
 800052c:	3b9aca00 	.word	0x3b9aca00

08000530 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	4b10      	ldr	r3, [pc, #64]	@ (800057c <MX_DMA_Init+0x4c>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053e:	4a0f      	ldr	r2, [pc, #60]	@ (800057c <MX_DMA_Init+0x4c>)
 8000540:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000544:	6313      	str	r3, [r2, #48]	@ 0x30
 8000546:	4b0d      	ldr	r3, [pc, #52]	@ (800057c <MX_DMA_Init+0x4c>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000552:	2200      	movs	r2, #0
 8000554:	2100      	movs	r1, #0
 8000556:	2010      	movs	r0, #16
 8000558:	f002 fa03 	bl	8002962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800055c:	2010      	movs	r0, #16
 800055e:	f002 fa1c 	bl	800299a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	2100      	movs	r1, #0
 8000566:	2011      	movs	r0, #17
 8000568:	f002 f9fb 	bl	8002962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800056c:	2011      	movs	r0, #17
 800056e:	f002 fa14 	bl	800299a <HAL_NVIC_EnableIRQ>

}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40023800 	.word	0x40023800

08000580 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	4b10      	ldr	r3, [pc, #64]	@ (80005cc <MX_GPIO_Init+0x4c>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	4a0f      	ldr	r2, [pc, #60]	@ (80005cc <MX_GPIO_Init+0x4c>)
 8000590:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000594:	6313      	str	r3, [r2, #48]	@ 0x30
 8000596:	4b0d      	ldr	r3, [pc, #52]	@ (80005cc <MX_GPIO_Init+0x4c>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	4b09      	ldr	r3, [pc, #36]	@ (80005cc <MX_GPIO_Init+0x4c>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	4a08      	ldr	r2, [pc, #32]	@ (80005cc <MX_GPIO_Init+0x4c>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b2:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <MX_GPIO_Init+0x4c>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	40023800 	.word	0x40023800

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint32_t currentTick = HAL_GetTick();
 80005d6:	f002 f8dd 	bl	8002794 <HAL_GetTick>
 80005da:	6078      	str	r0, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f002 f874 	bl	80026c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f816 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f7ff ffcc 	bl	8000580 <MX_GPIO_Init>
  MX_DMA_Init();
 80005e8:	f7ff ffa2 	bl	8000530 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005ec:	f001 ff62 	bl	80024b4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  setup();
 80005f0:	f001 f982 	bl	80018f8 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GetTick()-currentTick >= 10)
 80005f4:	f002 f8ce 	bl	8002794 <HAL_GetTick>
 80005f8:	4602      	mov	r2, r0
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	2b09      	cmp	r3, #9
 8000600:	d9f8      	bls.n	80005f4 <main+0x24>
	  {
		  loop();
 8000602:	f001 f989 	bl	8001918 <loop>
		  currentTick = HAL_GetTick();
 8000606:	f002 f8c5 	bl	8002794 <HAL_GetTick>
 800060a:	6078      	str	r0, [r7, #4]
	  if(HAL_GetTick()-currentTick >= 10)
 800060c:	e7f2      	b.n	80005f4 <main+0x24>
	...

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	@ 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	2230      	movs	r2, #48	@ 0x30
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f004 fdba 	bl	8005198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	4b27      	ldr	r3, [pc, #156]	@ (80006d8 <SystemClock_Config+0xc8>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063c:	4a26      	ldr	r2, [pc, #152]	@ (80006d8 <SystemClock_Config+0xc8>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	@ 0x40
 8000644:	4b24      	ldr	r3, [pc, #144]	@ (80006d8 <SystemClock_Config+0xc8>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b21      	ldr	r3, [pc, #132]	@ (80006dc <SystemClock_Config+0xcc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a20      	ldr	r2, [pc, #128]	@ (80006dc <SystemClock_Config+0xcc>)
 800065a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b1e      	ldr	r3, [pc, #120]	@ (80006dc <SystemClock_Config+0xcc>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066c:	2301      	movs	r3, #1
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000670:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000674:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800067e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000680:	230c      	movs	r3, #12
 8000682:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000684:	2360      	movs	r3, #96	@ 0x60
 8000686:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	4618      	mov	r0, r3
 8000696:	f002 ff21 	bl	80034dc <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a0:	f000 f81e 	bl	80006e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2302      	movs	r3, #2
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	2103      	movs	r1, #3
 80006c0:	4618      	mov	r0, r3
 80006c2:	f003 f983 	bl	80039cc <HAL_RCC_ClockConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006cc:	f000 f808 	bl	80006e0 <Error_Handler>
  }
}
 80006d0:	bf00      	nop
 80006d2:	3750      	adds	r7, #80	@ 0x50
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e4:	b672      	cpsid	i
}
 80006e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <Error_Handler+0x8>

080006ec <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2200      	movs	r2, #0
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4618      	mov	r0, r3
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
	...

08000710 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	4a04      	ldr	r2, [pc, #16]	@ (800072c <_ZN3ros3MsgC1Ev+0x1c>)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4618      	mov	r0, r3
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	0800566c 	.word	0x0800566c

08000730 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
      data()
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ffe8 	bl	8000710 <_ZN3ros3MsgC1Ev>
 8000740:	4a06      	ldr	r2, [pc, #24]	@ (800075c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	3304      	adds	r3, #4
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ffce 	bl	80006ec <_ZN3ros4TimeC1Ev>
    {
    }
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4618      	mov	r0, r3
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	08005654 	.word	0x08005654

08000760 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6859      	ldr	r1, [r3, #4]
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	683a      	ldr	r2, [r7, #0]
 8000776:	4413      	add	r3, r2
 8000778:	b2ca      	uxtb	r2, r1
 800077a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	0a19      	lsrs	r1, r3, #8
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	3301      	adds	r3, #1
 8000786:	683a      	ldr	r2, [r7, #0]
 8000788:	4413      	add	r3, r2
 800078a:	b2ca      	uxtb	r2, r1
 800078c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	0c19      	lsrs	r1, r3, #16
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	3302      	adds	r3, #2
 8000798:	683a      	ldr	r2, [r7, #0]
 800079a:	4413      	add	r3, r2
 800079c:	b2ca      	uxtb	r2, r1
 800079e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	0e19      	lsrs	r1, r3, #24
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	3303      	adds	r3, #3
 80007aa:	683a      	ldr	r2, [r7, #0]
 80007ac:	4413      	add	r3, r2
 80007ae:	b2ca      	uxtb	r2, r1
 80007b0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	3304      	adds	r3, #4
 80007b6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	6899      	ldr	r1, [r3, #8]
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	683a      	ldr	r2, [r7, #0]
 80007c0:	4413      	add	r3, r2
 80007c2:	b2ca      	uxtb	r2, r1
 80007c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	689b      	ldr	r3, [r3, #8]
 80007ca:	0a19      	lsrs	r1, r3, #8
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	3301      	adds	r3, #1
 80007d0:	683a      	ldr	r2, [r7, #0]
 80007d2:	4413      	add	r3, r2
 80007d4:	b2ca      	uxtb	r2, r1
 80007d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	0c19      	lsrs	r1, r3, #16
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	3302      	adds	r3, #2
 80007e2:	683a      	ldr	r2, [r7, #0]
 80007e4:	4413      	add	r3, r2
 80007e6:	b2ca      	uxtb	r2, r1
 80007e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	689b      	ldr	r3, [r3, #8]
 80007ee:	0e19      	lsrs	r1, r3, #24
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	3303      	adds	r3, #3
 80007f4:	683a      	ldr	r2, [r7, #0]
 80007f6:	4413      	add	r3, r2
 80007f8:	b2ca      	uxtb	r2, r1
 80007fa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	3304      	adds	r3, #4
 8000800:	60fb      	str	r3, [r7, #12]
      return offset;
 8000802:	68fb      	ldr	r3, [r7, #12]
    }
 8000804:	4618      	mov	r0, r3
 8000806:	3714      	adds	r7, #20
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	683a      	ldr	r2, [r7, #0]
 8000822:	4413      	add	r3, r2
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	461a      	mov	r2, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	685a      	ldr	r2, [r3, #4]
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	3301      	adds	r3, #1
 8000834:	6839      	ldr	r1, [r7, #0]
 8000836:	440b      	add	r3, r1
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	021b      	lsls	r3, r3, #8
 800083c:	431a      	orrs	r2, r3
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	685a      	ldr	r2, [r3, #4]
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	3302      	adds	r3, #2
 800084a:	6839      	ldr	r1, [r7, #0]
 800084c:	440b      	add	r3, r1
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	041b      	lsls	r3, r3, #16
 8000852:	431a      	orrs	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	685a      	ldr	r2, [r3, #4]
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	3303      	adds	r3, #3
 8000860:	6839      	ldr	r1, [r7, #0]
 8000862:	440b      	add	r3, r1
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	061b      	lsls	r3, r3, #24
 8000868:	431a      	orrs	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3304      	adds	r3, #4
 8000872:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	683a      	ldr	r2, [r7, #0]
 8000878:	4413      	add	r3, r2
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	461a      	mov	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	689a      	ldr	r2, [r3, #8]
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	3301      	adds	r3, #1
 800088a:	6839      	ldr	r1, [r7, #0]
 800088c:	440b      	add	r3, r1
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	021b      	lsls	r3, r3, #8
 8000892:	431a      	orrs	r2, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	689a      	ldr	r2, [r3, #8]
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	3302      	adds	r3, #2
 80008a0:	6839      	ldr	r1, [r7, #0]
 80008a2:	440b      	add	r3, r1
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	041b      	lsls	r3, r3, #16
 80008a8:	431a      	orrs	r2, r3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	689a      	ldr	r2, [r3, #8]
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	3303      	adds	r3, #3
 80008b6:	6839      	ldr	r1, [r7, #0]
 80008b8:	440b      	add	r3, r1
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	061b      	lsls	r3, r3, #24
 80008be:	431a      	orrs	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	3304      	adds	r3, #4
 80008c8:	60fb      	str	r3, [r7, #12]
     return offset;
 80008ca:	68fb      	ldr	r3, [r7, #12]
    }
 80008cc:	4618      	mov	r0, r3
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	4b03      	ldr	r3, [pc, #12]	@ (80008f0 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80008e2:	4618      	mov	r0, r3
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	08005454 	.word	0x08005454

080008f4 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	4b03      	ldr	r3, [pc, #12]	@ (800090c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80008fe:	4618      	mov	r0, r3
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	08005464 	.word	0x08005464

08000910 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fef8 	bl	8000710 <_ZN3ros3MsgC1Ev>
 8000920:	4a0b      	ldr	r2, [pc, #44]	@ (8000950 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2200      	movs	r2, #0
 800092a:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a09      	ldr	r2, [pc, #36]	@ (8000954 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000930:	609a      	str	r2, [r3, #8]
      message_type(""),
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a07      	ldr	r2, [pc, #28]	@ (8000954 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000936:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a06      	ldr	r2, [pc, #24]	@ (8000954 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800093c:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2200      	movs	r2, #0
 8000942:	615a      	str	r2, [r3, #20]
    {
    }
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4618      	mov	r0, r3
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	0800563c 	.word	0x0800563c
 8000954:	08005488 	.word	0x08005488

08000958 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000958:	b580      	push	{r7, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	8899      	ldrh	r1, [r3, #4]
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	683a      	ldr	r2, [r7, #0]
 800096e:	4413      	add	r3, r2
 8000970:	b2ca      	uxtb	r2, r1
 8000972:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	889b      	ldrh	r3, [r3, #4]
 8000978:	0a1b      	lsrs	r3, r3, #8
 800097a:	b299      	uxth	r1, r3
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	3301      	adds	r3, #1
 8000980:	683a      	ldr	r2, [r7, #0]
 8000982:	4413      	add	r3, r2
 8000984:	b2ca      	uxtb	r2, r1
 8000986:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	3302      	adds	r3, #2
 800098c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff fc20 	bl	80001d8 <strlen>
 8000998:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	683a      	ldr	r2, [r7, #0]
 800099e:	4413      	add	r3, r2
 80009a0:	69b9      	ldr	r1, [r7, #24]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 ffce 	bl	8001944 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	3304      	adds	r3, #4
 80009ac:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	683a      	ldr	r2, [r7, #0]
 80009b2:	18d0      	adds	r0, r2, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	689b      	ldr	r3, [r3, #8]
 80009b8:	69ba      	ldr	r2, [r7, #24]
 80009ba:	4619      	mov	r1, r3
 80009bc:	f004 fc20 	bl	8005200 <memcpy>
      offset += length_topic_name;
 80009c0:	69fa      	ldr	r2, [r7, #28]
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	4413      	add	r3, r2
 80009c6:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fc03 	bl	80001d8 <strlen>
 80009d2:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	683a      	ldr	r2, [r7, #0]
 80009d8:	4413      	add	r3, r2
 80009da:	6979      	ldr	r1, [r7, #20]
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 ffb1 	bl	8001944 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	3304      	adds	r3, #4
 80009e6:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	683a      	ldr	r2, [r7, #0]
 80009ec:	18d0      	adds	r0, r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	68db      	ldr	r3, [r3, #12]
 80009f2:	697a      	ldr	r2, [r7, #20]
 80009f4:	4619      	mov	r1, r3
 80009f6:	f004 fc03 	bl	8005200 <memcpy>
      offset += length_message_type;
 80009fa:	69fa      	ldr	r2, [r7, #28]
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	4413      	add	r3, r2
 8000a00:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	691b      	ldr	r3, [r3, #16]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fbe6 	bl	80001d8 <strlen>
 8000a0c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	683a      	ldr	r2, [r7, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	6939      	ldr	r1, [r7, #16]
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 ff94 	bl	8001944 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	3304      	adds	r3, #4
 8000a20:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	683a      	ldr	r2, [r7, #0]
 8000a26:	18d0      	adds	r0, r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	691b      	ldr	r3, [r3, #16]
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4619      	mov	r1, r3
 8000a30:	f004 fbe6 	bl	8005200 <memcpy>
      offset += length_md5sum;
 8000a34:	69fa      	ldr	r2, [r7, #28]
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	4413      	add	r3, r2
 8000a3a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	695b      	ldr	r3, [r3, #20]
 8000a40:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000a42:	68f9      	ldr	r1, [r7, #12]
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	683a      	ldr	r2, [r7, #0]
 8000a48:	4413      	add	r3, r2
 8000a4a:	b2ca      	uxtb	r2, r1
 8000a4c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	0a19      	lsrs	r1, r3, #8
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	3301      	adds	r3, #1
 8000a56:	683a      	ldr	r2, [r7, #0]
 8000a58:	4413      	add	r3, r2
 8000a5a:	b2ca      	uxtb	r2, r1
 8000a5c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	0c19      	lsrs	r1, r3, #16
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3302      	adds	r3, #2
 8000a66:	683a      	ldr	r2, [r7, #0]
 8000a68:	4413      	add	r3, r2
 8000a6a:	b2ca      	uxtb	r2, r1
 8000a6c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	0e19      	lsrs	r1, r3, #24
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3303      	adds	r3, #3
 8000a76:	683a      	ldr	r2, [r7, #0]
 8000a78:	4413      	add	r3, r2
 8000a7a:	b2ca      	uxtb	r2, r1
 8000a7c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	3304      	adds	r3, #4
 8000a82:	61fb      	str	r3, [r7, #28]
      return offset;
 8000a84:	69fb      	ldr	r3, [r7, #28]
    }
 8000a86:	4618      	mov	r0, r3
 8000a88:	3720      	adds	r7, #32
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b08a      	sub	sp, #40	@ 0x28
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	683a      	ldr	r2, [r7, #0]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	889b      	ldrh	r3, [r3, #4]
 8000aae:	b21a      	sxth	r2, r3
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	6839      	ldr	r1, [r7, #0]
 8000ab6:	440b      	add	r3, r1
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	021b      	lsls	r3, r3, #8
 8000abc:	b21b      	sxth	r3, r3
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	b21b      	sxth	r3, r3
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	3302      	adds	r3, #2
 8000acc:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	683a      	ldr	r2, [r7, #0]
 8000ad2:	441a      	add	r2, r3
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4611      	mov	r1, r2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 ff51 	bl	8001982 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	3304      	adds	r3, #4
 8000ae4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000aea:	e00b      	b.n	8000b04 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8000aec:	683a      	ldr	r2, [r7, #0]
 8000aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af0:	441a      	add	r2, r3
 8000af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af4:	3b01      	subs	r3, #1
 8000af6:	6839      	ldr	r1, [r7, #0]
 8000af8:	440b      	add	r3, r1
 8000afa:	7812      	ldrb	r2, [r2, #0]
 8000afc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b00:	3301      	adds	r3, #1
 8000b02:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b04:	69ba      	ldr	r2, [r7, #24]
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	4413      	add	r3, r2
 8000b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d3ed      	bcc.n	8000aec <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000b10:	69ba      	ldr	r2, [r7, #24]
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	4413      	add	r3, r2
 8000b16:	3b01      	subs	r3, #1
 8000b18:	683a      	ldr	r2, [r7, #0]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	683a      	ldr	r2, [r7, #0]
 8000b26:	441a      	add	r2, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000b2c:	69ba      	ldr	r2, [r7, #24]
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	4413      	add	r3, r2
 8000b32:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	683a      	ldr	r2, [r7, #0]
 8000b38:	441a      	add	r2, r3
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	4611      	mov	r1, r2
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 ff1e 	bl	8001982 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	3304      	adds	r3, #4
 8000b4a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	623b      	str	r3, [r7, #32]
 8000b50:	e00b      	b.n	8000b6a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8000b52:	683a      	ldr	r2, [r7, #0]
 8000b54:	6a3b      	ldr	r3, [r7, #32]
 8000b56:	441a      	add	r2, r3
 8000b58:	6a3b      	ldr	r3, [r7, #32]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	6839      	ldr	r1, [r7, #0]
 8000b5e:	440b      	add	r3, r1
 8000b60:	7812      	ldrb	r2, [r2, #0]
 8000b62:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000b64:	6a3b      	ldr	r3, [r7, #32]
 8000b66:	3301      	adds	r3, #1
 8000b68:	623b      	str	r3, [r7, #32]
 8000b6a:	69ba      	ldr	r2, [r7, #24]
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	4413      	add	r3, r2
 8000b70:	6a3a      	ldr	r2, [r7, #32]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d3ed      	bcc.n	8000b52 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000b76:	69ba      	ldr	r2, [r7, #24]
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	683a      	ldr	r2, [r7, #0]
 8000b80:	4413      	add	r3, r2
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	683a      	ldr	r2, [r7, #0]
 8000b8c:	441a      	add	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000b92:	69ba      	ldr	r2, [r7, #24]
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	4413      	add	r3, r2
 8000b98:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000b9a:	69bb      	ldr	r3, [r7, #24]
 8000b9c:	683a      	ldr	r2, [r7, #0]
 8000b9e:	441a      	add	r2, r3
 8000ba0:	f107 030c 	add.w	r3, r7, #12
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 feeb 	bl	8001982 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	3304      	adds	r3, #4
 8000bb0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	61fb      	str	r3, [r7, #28]
 8000bb6:	e00b      	b.n	8000bd0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8000bb8:	683a      	ldr	r2, [r7, #0]
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	441a      	add	r2, r3
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	6839      	ldr	r1, [r7, #0]
 8000bc4:	440b      	add	r3, r1
 8000bc6:	7812      	ldrb	r2, [r2, #0]
 8000bc8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	61fb      	str	r3, [r7, #28]
 8000bd0:	69ba      	ldr	r2, [r7, #24]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	69fa      	ldr	r2, [r7, #28]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d3ed      	bcc.n	8000bb8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000bdc:	69ba      	ldr	r2, [r7, #24]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	4413      	add	r3, r2
 8000be2:	3b01      	subs	r3, #1
 8000be4:	683a      	ldr	r2, [r7, #0]
 8000be6:	4413      	add	r3, r2
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	683a      	ldr	r2, [r7, #0]
 8000bf2:	441a      	add	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	69ba      	ldr	r2, [r7, #24]
 8000c08:	6839      	ldr	r1, [r7, #0]
 8000c0a:	440a      	add	r2, r1
 8000c0c:	7812      	ldrb	r2, [r2, #0]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	3301      	adds	r3, #1
 8000c18:	6839      	ldr	r1, [r7, #0]
 8000c1a:	440b      	add	r3, r1
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	021b      	lsls	r3, r3, #8
 8000c20:	4313      	orrs	r3, r2
 8000c22:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000c24:	68ba      	ldr	r2, [r7, #8]
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	3302      	adds	r3, #2
 8000c2a:	6839      	ldr	r1, [r7, #0]
 8000c2c:	440b      	add	r3, r1
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	041b      	lsls	r3, r3, #16
 8000c32:	4313      	orrs	r3, r2
 8000c34:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	3303      	adds	r3, #3
 8000c3c:	6839      	ldr	r1, [r7, #0]
 8000c3e:	440b      	add	r3, r1
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	061b      	lsls	r3, r3, #24
 8000c44:	4313      	orrs	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000c48:	68ba      	ldr	r2, [r7, #8]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	3304      	adds	r3, #4
 8000c52:	61bb      	str	r3, [r7, #24]
     return offset;
 8000c54:	69bb      	ldr	r3, [r7, #24]
    }
 8000c56:	4618      	mov	r0, r3
 8000c58:	3728      	adds	r7, #40	@ 0x28
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	4b03      	ldr	r3, [pc, #12]	@ (8000c78 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	0800548c 	.word	0x0800548c

08000c7c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	4b03      	ldr	r3, [pc, #12]	@ (8000c94 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000c86:	4618      	mov	r0, r3
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	080054a8 	.word	0x080054a8

08000c98 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fd34 	bl	8000710 <_ZN3ros3MsgC1Ev>
 8000ca8:	4a06      	ldr	r2, [pc, #24]	@ (8000cc4 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	601a      	str	r2, [r3, #0]
      level(0),
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	711a      	strb	r2, [r3, #4]
      msg("")
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a04      	ldr	r2, [pc, #16]	@ (8000cc8 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000cb8:	609a      	str	r2, [r3, #8]
    {
    }
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	08005624 	.word	0x08005624
 8000cc8:	08005488 	.word	0x08005488

08000ccc <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	683a      	ldr	r2, [r7, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	7912      	ldrb	r2, [r2, #4]
 8000ce4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fa71 	bl	80001d8 <strlen>
 8000cf6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	683a      	ldr	r2, [r7, #0]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	68b9      	ldr	r1, [r7, #8]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 fe1f 	bl	8001944 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	683a      	ldr	r2, [r7, #0]
 8000d10:	18d0      	adds	r0, r2, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f004 fa71 	bl	8005200 <memcpy>
      offset += length_msg;
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	4413      	add	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]
      return offset;
 8000d26:	68fb      	ldr	r3, [r7, #12]
    }
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	683a      	ldr	r2, [r7, #0]
 8000d42:	4413      	add	r3, r2
 8000d44:	781a      	ldrb	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	683a      	ldr	r2, [r7, #0]
 8000d54:	441a      	add	r2, r3
 8000d56:	f107 030c 	add.w	r3, r7, #12
 8000d5a:	4611      	mov	r1, r2
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f000 fe10 	bl	8001982 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	3304      	adds	r3, #4
 8000d66:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	e00b      	b.n	8000d86 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8000d6e:	683a      	ldr	r2, [r7, #0]
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	441a      	add	r2, r3
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	6839      	ldr	r1, [r7, #0]
 8000d7a:	440b      	add	r3, r1
 8000d7c:	7812      	ldrb	r2, [r2, #0]
 8000d7e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	3301      	adds	r3, #1
 8000d84:	617b      	str	r3, [r7, #20]
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d3ed      	bcc.n	8000d6e <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	4413      	add	r3, r2
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	683a      	ldr	r2, [r7, #0]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	3b01      	subs	r3, #1
 8000da6:	683a      	ldr	r2, [r7, #0]
 8000da8:	441a      	add	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	4413      	add	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
     return offset;
 8000db6:	693b      	ldr	r3, [r7, #16]
    }
 8000db8:	4618      	mov	r0, r3
 8000dba:	3718      	adds	r7, #24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	4b03      	ldr	r3, [pc, #12]	@ (8000dd8 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	080054cc 	.word	0x080054cc

08000ddc <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	4b03      	ldr	r3, [pc, #12]	@ (8000df4 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	080054e0 	.word	0x080054e0

08000df8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fc84 	bl	8000710 <_ZN3ros3MsgC1Ev>
 8000e08:	4a11      	ldr	r2, [pc, #68]	@ (8000e50 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2200      	movs	r2, #0
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f04f 0200 	mov.w	r2, #0
 8000e2c:	615a      	str	r2, [r3, #20]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	61da      	str	r2, [r3, #28]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	621a      	str	r2, [r3, #32]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	0800560c 	.word	0x0800560c

08000e54 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	@ 0x28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6859      	ldr	r1, [r3, #4]
 8000e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	b2ca      	uxtb	r2, r1
 8000e6e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	0a19      	lsrs	r1, r3, #8
 8000e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e78:	3301      	adds	r3, #1
 8000e7a:	683a      	ldr	r2, [r7, #0]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	b2ca      	uxtb	r2, r1
 8000e80:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	0c19      	lsrs	r1, r3, #16
 8000e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e8a:	3302      	adds	r3, #2
 8000e8c:	683a      	ldr	r2, [r7, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	b2ca      	uxtb	r2, r1
 8000e92:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	0e19      	lsrs	r1, r3, #24
 8000e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e9c:	3303      	adds	r3, #3
 8000e9e:	683a      	ldr	r2, [r7, #0]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	b2ca      	uxtb	r2, r1
 8000ea4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000eac:	2300      	movs	r3, #0
 8000eae:	623b      	str	r3, [r7, #32]
 8000eb0:	e02a      	b.n	8000f08 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	68da      	ldr	r2, [r3, #12]
 8000eb6:	6a3b      	ldr	r3, [r7, #32]
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	4413      	add	r3, r2
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000ec0:	6939      	ldr	r1, [r7, #16]
 8000ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec4:	683a      	ldr	r2, [r7, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	b2ca      	uxtb	r2, r1
 8000eca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	0a19      	lsrs	r1, r3, #8
 8000ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	683a      	ldr	r2, [r7, #0]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	b2ca      	uxtb	r2, r1
 8000eda:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	0c19      	lsrs	r1, r3, #16
 8000ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee2:	3302      	adds	r3, #2
 8000ee4:	683a      	ldr	r2, [r7, #0]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	b2ca      	uxtb	r2, r1
 8000eea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	0e19      	lsrs	r1, r3, #24
 8000ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef2:	3303      	adds	r3, #3
 8000ef4:	683a      	ldr	r2, [r7, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	b2ca      	uxtb	r2, r1
 8000efa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000efe:	3304      	adds	r3, #4
 8000f00:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000f02:	6a3b      	ldr	r3, [r7, #32]
 8000f04:	3301      	adds	r3, #1
 8000f06:	623b      	str	r3, [r7, #32]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	6a3a      	ldr	r2, [r7, #32]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d3cf      	bcc.n	8000eb2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6919      	ldr	r1, [r3, #16]
 8000f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f18:	683a      	ldr	r2, [r7, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	b2ca      	uxtb	r2, r1
 8000f1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	691b      	ldr	r3, [r3, #16]
 8000f24:	0a19      	lsrs	r1, r3, #8
 8000f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f28:	3301      	adds	r3, #1
 8000f2a:	683a      	ldr	r2, [r7, #0]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	b2ca      	uxtb	r2, r1
 8000f30:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	691b      	ldr	r3, [r3, #16]
 8000f36:	0c19      	lsrs	r1, r3, #16
 8000f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f3a:	3302      	adds	r3, #2
 8000f3c:	683a      	ldr	r2, [r7, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	b2ca      	uxtb	r2, r1
 8000f42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	691b      	ldr	r3, [r3, #16]
 8000f48:	0e19      	lsrs	r1, r3, #24
 8000f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f4c:	3303      	adds	r3, #3
 8000f4e:	683a      	ldr	r2, [r7, #0]
 8000f50:	4413      	add	r3, r2
 8000f52:	b2ca      	uxtb	r2, r1
 8000f54:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f58:	3304      	adds	r3, #4
 8000f5a:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
 8000f60:	e02a      	b.n	8000fb8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	699a      	ldr	r2, [r3, #24]
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000f70:	68f9      	ldr	r1, [r7, #12]
 8000f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f74:	683a      	ldr	r2, [r7, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	b2ca      	uxtb	r2, r1
 8000f7a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	0a19      	lsrs	r1, r3, #8
 8000f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f82:	3301      	adds	r3, #1
 8000f84:	683a      	ldr	r2, [r7, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	b2ca      	uxtb	r2, r1
 8000f8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	0c19      	lsrs	r1, r3, #16
 8000f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f92:	3302      	adds	r3, #2
 8000f94:	683a      	ldr	r2, [r7, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	b2ca      	uxtb	r2, r1
 8000f9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	0e19      	lsrs	r1, r3, #24
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa2:	3303      	adds	r3, #3
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	b2ca      	uxtb	r2, r1
 8000faa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fae:	3304      	adds	r3, #4
 8000fb0:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	61fb      	str	r3, [r7, #28]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	69fa      	ldr	r2, [r7, #28]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d3cf      	bcc.n	8000f62 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69d9      	ldr	r1, [r3, #28]
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	b2ca      	uxtb	r2, r1
 8000fce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	69db      	ldr	r3, [r3, #28]
 8000fd4:	0a19      	lsrs	r1, r3, #8
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd8:	3301      	adds	r3, #1
 8000fda:	683a      	ldr	r2, [r7, #0]
 8000fdc:	4413      	add	r3, r2
 8000fde:	b2ca      	uxtb	r2, r1
 8000fe0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	0c19      	lsrs	r1, r3, #16
 8000fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fea:	3302      	adds	r3, #2
 8000fec:	683a      	ldr	r2, [r7, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	b2ca      	uxtb	r2, r1
 8000ff2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69db      	ldr	r3, [r3, #28]
 8000ff8:	0e19      	lsrs	r1, r3, #24
 8000ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ffc:	3303      	adds	r3, #3
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	4413      	add	r3, r2
 8001002:	b2ca      	uxtb	r2, r1
 8001004:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001008:	3304      	adds	r3, #4
 800100a:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800100c:	2300      	movs	r3, #0
 800100e:	61bb      	str	r3, [r7, #24]
 8001010:	e027      	b.n	8001062 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff f8da 	bl	80001d8 <strlen>
 8001024:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	4413      	add	r3, r2
 800102c:	6979      	ldr	r1, [r7, #20]
 800102e:	4618      	mov	r0, r3
 8001030:	f000 fc88 	bl	8001944 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001036:	3304      	adds	r3, #4
 8001038:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800103a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	18d0      	adds	r0, r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4413      	add	r3, r2
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	4619      	mov	r1, r3
 8001050:	f004 f8d6 	bl	8005200 <memcpy>
      offset += length_stringsi;
 8001054:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	4413      	add	r3, r2
 800105a:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	3301      	adds	r3, #1
 8001060:	61bb      	str	r3, [r7, #24]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	429a      	cmp	r2, r3
 800106a:	d3d2      	bcc.n	8001012 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 800106c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800106e:	4618      	mov	r0, r3
 8001070:	3728      	adds	r7, #40	@ 0x28
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001076:	b580      	push	{r7, lr}
 8001078:	b08e      	sub	sp, #56	@ 0x38
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001086:	683a      	ldr	r2, [r7, #0]
 8001088:	4413      	add	r3, r2
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800108e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001090:	3301      	adds	r3, #1
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	4413      	add	r3, r2
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	6a3a      	ldr	r2, [r7, #32]
 800109c:	4313      	orrs	r3, r2
 800109e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80010a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010a2:	3302      	adds	r3, #2
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	041b      	lsls	r3, r3, #16
 80010ac:	6a3a      	ldr	r2, [r7, #32]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80010b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010b4:	3303      	adds	r3, #3
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	4413      	add	r3, r2
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	061b      	lsls	r3, r3, #24
 80010be:	6a3a      	ldr	r2, [r7, #32]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80010c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010c6:	3304      	adds	r3, #4
 80010c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	6a3a      	ldr	r2, [r7, #32]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d90a      	bls.n	80010ea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68da      	ldr	r2, [r3, #12]
 80010d8:	6a3b      	ldr	r3, [r7, #32]
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4619      	mov	r1, r3
 80010de:	4610      	mov	r0, r2
 80010e0:	f004 f824 	bl	800512c <realloc>
 80010e4:	4602      	mov	r2, r0
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a3a      	ldr	r2, [r7, #32]
 80010ee:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80010f0:	2300      	movs	r3, #0
 80010f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80010f4:	e035      	b.n	8001162 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80010fe:	6839      	ldr	r1, [r7, #0]
 8001100:	440a      	add	r2, r1
 8001102:	7812      	ldrb	r2, [r2, #0]
 8001104:	4313      	orrs	r3, r2
 8001106:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001108:	697a      	ldr	r2, [r7, #20]
 800110a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800110c:	3301      	adds	r3, #1
 800110e:	6839      	ldr	r1, [r7, #0]
 8001110:	440b      	add	r3, r1
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	021b      	lsls	r3, r3, #8
 8001116:	4313      	orrs	r3, r2
 8001118:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800111e:	3302      	adds	r3, #2
 8001120:	6839      	ldr	r1, [r7, #0]
 8001122:	440b      	add	r3, r1
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	041b      	lsls	r3, r3, #16
 8001128:	4313      	orrs	r3, r2
 800112a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800112c:	697a      	ldr	r2, [r7, #20]
 800112e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001130:	3303      	adds	r3, #3
 8001132:	6839      	ldr	r1, [r7, #0]
 8001134:	440b      	add	r3, r1
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	061b      	lsls	r3, r3, #24
 800113a:	4313      	orrs	r3, r2
 800113c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001146:	3304      	adds	r3, #4
 8001148:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	68da      	ldr	r2, [r3, #12]
 800114e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	3208      	adds	r2, #8
 8001158:	6812      	ldr	r2, [r2, #0]
 800115a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 800115c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800115e:	3301      	adds	r3, #1
 8001160:	633b      	str	r3, [r7, #48]	@ 0x30
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001168:	429a      	cmp	r2, r3
 800116a:	d3c4      	bcc.n	80010f6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800116c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800116e:	683a      	ldr	r2, [r7, #0]
 8001170:	4413      	add	r3, r2
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001178:	3301      	adds	r3, #1
 800117a:	683a      	ldr	r2, [r7, #0]
 800117c:	4413      	add	r3, r2
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	69fa      	ldr	r2, [r7, #28]
 8001184:	4313      	orrs	r3, r2
 8001186:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800118a:	3302      	adds	r3, #2
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	4413      	add	r3, r2
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	041b      	lsls	r3, r3, #16
 8001194:	69fa      	ldr	r2, [r7, #28]
 8001196:	4313      	orrs	r3, r2
 8001198:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800119a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800119c:	3303      	adds	r3, #3
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	4413      	add	r3, r2
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	061b      	lsls	r3, r3, #24
 80011a6:	69fa      	ldr	r2, [r7, #28]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80011ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011ae:	3304      	adds	r3, #4
 80011b0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	69fa      	ldr	r2, [r7, #28]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d90a      	bls.n	80011d2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	699a      	ldr	r2, [r3, #24]
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4619      	mov	r1, r3
 80011c6:	4610      	mov	r0, r2
 80011c8:	f003 ffb0 	bl	800512c <realloc>
 80011cc:	4602      	mov	r2, r0
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69fa      	ldr	r2, [r7, #28]
 80011d6:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80011d8:	2300      	movs	r3, #0
 80011da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011dc:	e035      	b.n	800124a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80011e6:	6839      	ldr	r1, [r7, #0]
 80011e8:	440a      	add	r2, r1
 80011ea:	7812      	ldrb	r2, [r2, #0]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011f4:	3301      	adds	r3, #1
 80011f6:	6839      	ldr	r1, [r7, #0]
 80011f8:	440b      	add	r3, r1
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	021b      	lsls	r3, r3, #8
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001206:	3302      	adds	r3, #2
 8001208:	6839      	ldr	r1, [r7, #0]
 800120a:	440b      	add	r3, r1
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	041b      	lsls	r3, r3, #16
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001218:	3303      	adds	r3, #3
 800121a:	6839      	ldr	r1, [r7, #0]
 800121c:	440b      	add	r3, r1
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	061b      	lsls	r3, r3, #24
 8001222:	4313      	orrs	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800122c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800122e:	3304      	adds	r3, #4
 8001230:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	699a      	ldr	r2, [r3, #24]
 8001236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4413      	add	r3, r2
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	3214      	adds	r2, #20
 8001240:	6812      	ldr	r2, [r2, #0]
 8001242:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001246:	3301      	adds	r3, #1
 8001248:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001250:	429a      	cmp	r2, r3
 8001252:	d3c4      	bcc.n	80011de <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	4413      	add	r3, r2
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800125e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001260:	3301      	adds	r3, #1
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	4413      	add	r3, r2
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	021b      	lsls	r3, r3, #8
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001272:	3302      	adds	r3, #2
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	4413      	add	r3, r2
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	041b      	lsls	r3, r3, #16
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001284:	3303      	adds	r3, #3
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	4413      	add	r3, r2
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	061b      	lsls	r3, r3, #24
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001296:	3304      	adds	r3, #4
 8001298:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d90a      	bls.n	80012ba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4619      	mov	r1, r3
 80012ae:	4610      	mov	r0, r2
 80012b0:	f003 ff3c 	bl	800512c <realloc>
 80012b4:	4602      	mov	r2, r0
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80012c0:	2300      	movs	r3, #0
 80012c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012c4:	e03e      	b.n	8001344 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80012c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	441a      	add	r2, r3
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	4611      	mov	r1, r2
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 fb55 	bl	8001982 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80012d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012da:	3304      	adds	r3, #4
 80012dc:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80012de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80012e2:	e00b      	b.n	80012fc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e8:	441a      	add	r2, r3
 80012ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ec:	3b01      	subs	r3, #1
 80012ee:	6839      	ldr	r1, [r7, #0]
 80012f0:	440b      	add	r3, r1
 80012f2:	7812      	ldrb	r2, [r2, #0]
 80012f4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80012f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f8:	3301      	adds	r3, #1
 80012fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80012fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	4413      	add	r3, r2
 8001302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001304:	429a      	cmp	r2, r3
 8001306:	d3ed      	bcc.n	80012e4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001308:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	4413      	add	r3, r2
 800130e:	3b01      	subs	r3, #1
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	4413      	add	r3, r2
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800131a:	3b01      	subs	r3, #1
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	441a      	add	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001324:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4413      	add	r3, r2
 800132a:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	3220      	adds	r2, #32
 800133a:	6812      	ldr	r2, [r2, #0]
 800133c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800133e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001340:	3301      	adds	r3, #1
 8001342:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800134a:	429a      	cmp	r2, r3
 800134c:	d3bb      	bcc.n	80012c6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 800134e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8001350:	4618      	mov	r0, r3
 8001352:	3738      	adds	r7, #56	@ 0x38
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	4b03      	ldr	r3, [pc, #12]	@ (8001370 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001362:	4618      	mov	r0, r3
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	080055a8 	.word	0x080055a8

08001374 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	4b03      	ldr	r3, [pc, #12]	@ (800138c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	08005504 	.word	0x08005504

08001390 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
 800139c:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	68ba      	ldr	r2, [r7, #8]
 80013a2:	601a      	str	r2, [r3, #0]
    msg_(msg),
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	611a      	str	r2, [r3, #16]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4618      	mov	r0, r3
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68d8      	ldr	r0, [r3, #12]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	6891      	ldr	r1, [r2, #8]
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	4798      	blx	r3
 80013dc:	4603      	mov	r3, r0
  };
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80013e6:	b480      	push	{r7}
 80013e8:	b083      	sub	sp, #12
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	691b      	ldr	r3, [r3, #16]
  }
 80013f2:	4618      	mov	r0, r3
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a0a      	ldr	r2, [pc, #40]	@ (8001458 <_ZN13STM32HardwareC1Ev+0x34>)
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
    }
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	200009d8 	.word	0x200009d8

0800145c <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f000 f804 	bl	8001472 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6818      	ldr	r0, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3304      	adds	r3, #4
 8001482:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001486:	4619      	mov	r1, r3
 8001488:	f002 fd40 	bl	8003f0c <HAL_UART_Receive_DMA>
    }
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
      int c = -1;
 800149c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014a0:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f8d3 4204 	ldr.w	r4, [r3, #516]	@ 0x204
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ffa8 	bl	80013fe <_ZN13STM32Hardware10getRdmaIndEv>
 80014ae:	4603      	mov	r3, r0
 80014b0:	429c      	cmp	r4, r3
 80014b2:	bf14      	ite	ne
 80014b4:	2301      	movne	r3, #1
 80014b6:	2300      	moveq	r3, #0
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d012      	beq.n	80014e4 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80014c4:	1c59      	adds	r1, r3, #1
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	f8c2 1204 	str.w	r1, [r2, #516]	@ 0x204
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	4413      	add	r3, r2
 80014d0:	791b      	ldrb	r3, [r3, #4]
 80014d2:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80014da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      return c;
 80014e4:	68fb      	ldr	r3, [r7, #12]
    }
 80014e6:	4618      	mov	r0, r3
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd90      	pop	{r4, r7, pc}
	...

080014f0 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b20      	cmp	r3, #32
 8001504:	d108      	bne.n	8001518 <_ZN13STM32Hardware5flushEv+0x28>
 8001506:	4b28      	ldr	r3, [pc, #160]	@ (80015a8 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	f083 0301 	eor.w	r3, r3, #1
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <_ZN13STM32Hardware5flushEv+0x28>
 8001514:	2301      	movs	r3, #1
 8001516:	e000      	b.n	800151a <_ZN13STM32Hardware5flushEv+0x2a>
 8001518:	2300      	movs	r3, #0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d03f      	beq.n	800159e <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 800151e:	4b22      	ldr	r3, [pc, #136]	@ (80015a8 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001520:	2201      	movs	r2, #1
 8001522:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001530:	429a      	cmp	r2, r3
 8001532:	d031      	beq.n	8001598 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001540:	429a      	cmp	r2, r3
 8001542:	d20a      	bcs.n	800155a <_ZN13STM32Hardware5flushEv+0x6a>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800154a:	b29a      	uxth	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001552:	b29b      	uxth	r3, r3
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	b29b      	uxth	r3, r3
 8001558:	e006      	b.n	8001568 <_ZN13STM32Hardware5flushEv+0x78>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001560:	b29b      	uxth	r3, r3
 8001562:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001566:	b29b      	uxth	r3, r3
 8001568:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6818      	ldr	r0, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001574:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	4413      	add	r3, r2
 800157c:	89fa      	ldrh	r2, [r7, #14]
 800157e:	4619      	mov	r1, r3
 8001580:	f002 fc54 	bl	8003e2c <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800158a:	89fb      	ldrh	r3, [r7, #14]
 800158c:	4413      	add	r3, r2
 800158e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
        }
        mutex = false;
 8001598:	4b03      	ldr	r3, [pc, #12]	@ (80015a8 <_ZN13STM32Hardware5flushEv+0xb8>)
 800159a:	2200      	movs	r2, #0
 800159c:	701a      	strb	r2, [r3, #0]
      }
    }
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000078 	.word	0x20000078

080015ac <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
      int n = length;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015c2:	bfa8      	it	ge
 80015c4:	f44f 7300 	movge.w	r3, #512	@ 0x200
 80015c8:	617b      	str	r3, [r7, #20]

      int n_tail = n <= (int)(tbuflen - twind) ? n : (int)(tbuflen - twind);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80015d0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80015d4:	461a      	mov	r2, r3
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	4293      	cmp	r3, r2
 80015da:	bfa8      	it	ge
 80015dc:	4613      	movge	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80015e6:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	4413      	add	r3, r2
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	68b9      	ldr	r1, [r7, #8]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 fe04 	bl	8005200 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	4413      	add	r3, r2
 8001602:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

      if(n != n_tail){
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	429a      	cmp	r2, r3
 8001612:	d00b      	beq.n	800162c <_ZN13STM32Hardware5writeEPhi+0x80>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f503 7002 	add.w	r0, r3, #520	@ 0x208
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	68ba      	ldr	r2, [r7, #8]
 800161e:	18d1      	adds	r1, r2, r3
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	461a      	mov	r2, r3
 8001628:	f003 fdea 	bl	8005200 <memcpy>
      }

      flush();
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	f7ff ff5f 	bl	80014f0 <_ZN13STM32Hardware5flushEv>
    }
 8001632:	bf00      	nop
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
 8001642:	f001 f8a7 	bl	8002794 <HAL_GetTick>
 8001646:	4603      	mov	r3, r0
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
      data(0)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff f858 	bl	8000710 <_ZN3ros3MsgC1Ev>
 8001660:	4a05      	ldr	r2, [pc, #20]	@ (8001678 <_ZN8std_msgs7Float32C1Ev+0x28>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	605a      	str	r2, [r3, #4]
    {
    }
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	080055e0 	.word	0x080055e0

0800167c <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8001690:	68b9      	ldr	r1, [r7, #8]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	4413      	add	r3, r2
 8001698:	b2ca      	uxtb	r2, r1
 800169a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	0a19      	lsrs	r1, r3, #8
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	3301      	adds	r3, #1
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	4413      	add	r3, r2
 80016a8:	b2ca      	uxtb	r2, r1
 80016aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	0c19      	lsrs	r1, r3, #16
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	3302      	adds	r3, #2
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	4413      	add	r3, r2
 80016b8:	b2ca      	uxtb	r2, r1
 80016ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	0e19      	lsrs	r1, r3, #24
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	3303      	adds	r3, #3
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	4413      	add	r3, r2
 80016c8:	b2ca      	uxtb	r2, r1
 80016ca:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	3304      	adds	r3, #4
 80016d0:	60fb      	str	r3, [r7, #12]
      return offset;
 80016d2:	68fb      	ldr	r3, [r7, #12]
    }
 80016d4:	4618      	mov	r0, r3
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	6839      	ldr	r1, [r7, #0]
 80016f8:	440a      	add	r2, r1
 80016fa:	7812      	ldrb	r2, [r2, #0]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001700:	68ba      	ldr	r2, [r7, #8]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	3301      	adds	r3, #1
 8001706:	6839      	ldr	r1, [r7, #0]
 8001708:	440b      	add	r3, r1
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	021b      	lsls	r3, r3, #8
 800170e:	4313      	orrs	r3, r2
 8001710:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	3302      	adds	r3, #2
 8001718:	6839      	ldr	r1, [r7, #0]
 800171a:	440b      	add	r3, r1
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	041b      	lsls	r3, r3, #16
 8001720:	4313      	orrs	r3, r2
 8001722:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001724:	68ba      	ldr	r2, [r7, #8]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	3303      	adds	r3, #3
 800172a:	6839      	ldr	r1, [r7, #0]
 800172c:	440b      	add	r3, r1
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	061b      	lsls	r3, r3, #24
 8001732:	4313      	orrs	r3, r2
 8001734:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	3304      	adds	r3, #4
 8001740:	60fb      	str	r3, [r7, #12]
     return offset;
 8001742:	68fb      	ldr	r3, [r7, #12]
    }
 8001744:	4618      	mov	r0, r3
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <_ZN8std_msgs7Float327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32"; };
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	4b03      	ldr	r3, [pc, #12]	@ (8001768 <_ZN8std_msgs7Float327getTypeEv+0x18>)
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	08005528 	.word	0x08005528

0800176c <_ZN8std_msgs7Float326getMD5Ev>:
    virtual const char * getMD5() override { return "73fcbf46b49191e672908e50842a83d4"; };
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	4b03      	ldr	r3, [pc, #12]	@ (8001784 <_ZN8std_msgs7Float326getMD5Ev+0x18>)
 8001776:	4618      	mov	r0, r3
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	0800553c 	.word	0x0800553c

08001788 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	4a04      	ldr	r2, [pc, #16]	@ (80017a4 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4618      	mov	r0, r3
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	080055f8 	.word	0x080055f8

080017a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff ffe8 	bl	8001788 <_ZN3ros15NodeHandleBase_C1Ev>
 80017b8:	4a36      	ldr	r2, [pc, #216]	@ (8001894 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3304      	adds	r3, #4
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fe2e 	bl	8001424 <_ZN13STM32HardwareC1Ev>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 80017ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017f2:	2100      	movs	r1, #0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f003 fccf 	bl	8005198 <memset>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8001800:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001804:	2100      	movs	r1, #0
 8001806:	4618      	mov	r0, r3
 8001808:	f003 fcc6 	bl	8005198 <memset>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f603 0324 	addw	r3, r3, #2084	@ 0x824
 8001812:	2264      	movs	r2, #100	@ 0x64
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f003 fcbe 	bl	8005198 <memset>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 8001822:	2264      	movs	r2, #100	@ 0x64
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f003 fcb6 	bl	8005198 <memset>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f603 1314 	addw	r3, r3, #2324	@ 0x914
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fab8 	bl	8000df8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	080055cc 	.word	0x080055cc

08001898 <HAL_UART_TxCpltCallback>:
std_msgs::Float32 float_msg;  // Tipe pesan ROS untuk data float
ros::Publisher pub("float_data", &float_msg);  // Publisher dengan topik "float_data"


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a07      	ldr	r2, [pc, #28]	@ (80018c0 <HAL_UART_TxCpltCallback+0x28>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d106      	bne.n	80018b6 <HAL_UART_TxCpltCallback+0x1e>
	{
		nh.getHardware()->flush();
 80018a8:	4806      	ldr	r0, [pc, #24]	@ (80018c4 <HAL_UART_TxCpltCallback+0x2c>)
 80018aa:	f000 f890 	bl	80019ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fe1d 	bl	80014f0 <_ZN13STM32Hardware5flushEv>
	}
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200009d8 	.word	0x200009d8
 80018c4:	2000007c 	.word	0x2000007c

080018c8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a07      	ldr	r2, [pc, #28]	@ (80018f0 <HAL_UART_RxCpltCallback+0x28>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d106      	bne.n	80018e6 <HAL_UART_RxCpltCallback+0x1e>
	{
		nh.getHardware()->reset_rbuf();
 80018d8:	4806      	ldr	r0, [pc, #24]	@ (80018f4 <HAL_UART_RxCpltCallback+0x2c>)
 80018da:	f000 f878 	bl	80019ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80018de:	4603      	mov	r3, r0
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fdc6 	bl	8001472 <_ZN13STM32Hardware10reset_rbufEv>
	}
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200009d8 	.word	0x200009d8
 80018f4:	2000007c 	.word	0x2000007c

080018f8 <setup>:

void setup(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	nh.initNode();  // Inisialisasi node ROS
 80018fc:	4804      	ldr	r0, [pc, #16]	@ (8001910 <setup+0x18>)
 80018fe:	f000 f872 	bl	80019e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(pub);  // Advertise topik
 8001902:	4904      	ldr	r1, [pc, #16]	@ (8001914 <setup+0x1c>)
 8001904:	4802      	ldr	r0, [pc, #8]	@ (8001910 <setup+0x18>)
 8001906:	f000 f88b 	bl	8001a20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	2000007c 	.word	0x2000007c
 8001914:	200009c0 	.word	0x200009c0

08001918 <loop>:

void loop(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0

	float_msg.data = 10.;  // Mengisi pesan dengan nilai float
 800191c:	4b05      	ldr	r3, [pc, #20]	@ (8001934 <loop+0x1c>)
 800191e:	4a06      	ldr	r2, [pc, #24]	@ (8001938 <loop+0x20>)
 8001920:	605a      	str	r2, [r3, #4]
  pub.publish(&float_msg);  // Mengirim pesan ke ROS
 8001922:	4904      	ldr	r1, [pc, #16]	@ (8001934 <loop+0x1c>)
 8001924:	4805      	ldr	r0, [pc, #20]	@ (800193c <loop+0x24>)
 8001926:	f7ff fd4a 	bl	80013be <_ZN3ros9Publisher7publishEPKNS_3MsgE>

  nh.spinOnce();  // Memproses komunikasi ROS;
 800192a:	4805      	ldr	r0, [pc, #20]	@ (8001940 <loop+0x28>)
 800192c:	f000 f8a8 	bl	8001a80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}
 8001934:	200009b8 	.word	0x200009b8
 8001938:	41200000 	.word	0x41200000
 800193c:	200009c0 	.word	0x200009c0
 8001940:	2000007c 	.word	0x2000007c

08001944 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	e00c      	b.n	800196e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	fa22 f103 	lsr.w	r1, r2, r3
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4413      	add	r3, r2
 8001964:	b2ca      	uxtb	r2, r1
 8001966:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	3301      	adds	r3, #1
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2b03      	cmp	r3, #3
 8001972:	d9ef      	bls.n	8001954 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8001974:	bf00      	nop
 8001976:	bf00      	nop
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001982:	b480      	push	{r7}
 8001984:	b085      	sub	sp, #20
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
 800198a:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	e010      	b.n	80019ba <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6839      	ldr	r1, [r7, #0]
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	440a      	add	r2, r1
 80019a2:	7812      	ldrb	r2, [r2, #0]
 80019a4:	4611      	mov	r1, r2
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	00d2      	lsls	r2, r2, #3
 80019aa:	fa01 f202 	lsl.w	r2, r1, r2
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	3301      	adds	r3, #1
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2b03      	cmp	r3, #3
 80019be:	d9eb      	bls.n	8001998 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3304      	adds	r3, #4
  }
 80019da:	4618      	mov	r0, r3
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3304      	adds	r3, #4
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fd32 	bl	800145c <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
    bytes_ = 0;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
    index_ = 0;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
    topic_ = 0;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
  };
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	e01d      	b.n	8001a6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d111      	bne.n	8001a66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	60da      	str	r2, [r3, #12]
        return true;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e006      	b.n	8001a74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2b18      	cmp	r3, #24
 8001a70:	ddde      	ble.n	8001a30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8001a72:	2300      	movs	r3, #0
  }
 8001a74:	4618      	mov	r0, r3
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3304      	adds	r3, #4
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff fdd4 	bl	800163a <_ZN13STM32Hardware4timeEv>
 8001a92:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f8d3 3908 	ldr.w	r3, [r3, #2312]	@ 0x908
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d903      	bls.n	8001aae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
    if (mode_ != MODE_FIRST_FF)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d009      	beq.n	8001acc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d903      	bls.n	8001acc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
      if (spin_timeout_ > 0)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d014      	beq.n	8001b00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fdad 	bl	800163a <_ZN13STM32Hardware4timeEv>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	1ad2      	subs	r2, r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8001aec:	429a      	cmp	r2, r3
 8001aee:	bf8c      	ite	hi
 8001af0:	2301      	movhi	r3, #1
 8001af2:	2300      	movls	r3, #0
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d002      	beq.n	8001b00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8001afa:	f06f 0301 	mvn.w	r3, #1
 8001afe:	e194      	b.n	8001e2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3304      	adds	r3, #4
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fcc5 	bl	8001494 <_ZN13STM32Hardware4readEv>
 8001b0a:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f2c0 8174 	blt.w	8001dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	@ 0x8fc
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	441a      	add	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001b2a:	2b07      	cmp	r3, #7
 8001b2c:	d11e      	bne.n	8001b6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 8001b34:	1c59      	adds	r1, r3, #1
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	f8c2 18f8 	str.w	r1, [r2, #2296]	@ 0x8f8
 8001b3c:	68ba      	ldr	r2, [r7, #8]
 8001b3e:	b2d1      	uxtb	r1, r2
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	4413      	add	r3, r2
 8001b44:	460a      	mov	r2, r1
 8001b46:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
        bytes_--;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8001b50:	1e5a      	subs	r2, r3, #1
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1b4      	bne.n	8001acc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2208      	movs	r2, #8
 8001b66:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8001b6a:	e7af      	b.n	8001acc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d128      	bne.n	8001bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	2bff      	cmp	r3, #255	@ 0xff
 8001b7a:	d10d      	bne.n	8001b98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f103 0214 	add.w	r2, r3, #20
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 8001b96:	e799      	b.n	8001acc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fd4c 	bl	800163a <_ZN13STM32Hardware4timeEv>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bac:	4293      	cmp	r3, r2
 8001bae:	bf8c      	ite	hi
 8001bb0:	2301      	movhi	r3, #1
 8001bb2:	2300      	movls	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d088      	beq.n	8001acc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
          return SPIN_TIMEOUT;
 8001bc2:	f06f 0301 	mvn.w	r3, #1
 8001bc6:	e130      	b.n	8001e2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d118      	bne.n	8001c04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2bfe      	cmp	r3, #254	@ 0xfe
 8001bd6:	d107      	bne.n	8001be8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001bde:	1c5a      	adds	r2, r3, #1
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8001be6:	e771      	b.n	8001acc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          if (configured_ == false)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f47f af68 	bne.w	8001acc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f918 	bl	8001e32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8001c02:	e763      	b.n	8001acc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d113      	bne.n	8001c36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68ba      	ldr	r2, [r7, #8]
 8001c12:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        index_ = 0;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
        mode_++;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001c24:	1c5a      	adds	r2, r3, #1
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 8001c34:	e74a      	b.n	8001acc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	d110      	bne.n	8001c62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	@ 0x8f0
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	021b      	lsls	r3, r3, #8
 8001c4a:	441a      	add	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        mode_++;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8001c60:	e734      	b.n	8001acc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d116      	bne.n	8001c9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 8001c72:	425a      	negs	r2, r3
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	bf58      	it	pl
 8001c7a:	4253      	negpl	r3, r2
 8001c7c:	2bff      	cmp	r3, #255	@ 0xff
 8001c7e:	d107      	bne.n	8001c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8001c8e:	e71d      	b.n	8001acc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8001c98:	e718      	b.n	8001acc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001ca0:	2b05      	cmp	r3, #5
 8001ca2:	d10f      	bne.n	8001cc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_++;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001cb2:	1c5a      	adds	r2, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 8001cc2:	e703      	b.n	8001acc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001cca:	2b06      	cmp	r3, #6
 8001ccc:	d117      	bne.n	8001cfe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	@ 0x8f4
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	021b      	lsls	r3, r3, #8
 8001cd8:	441a      	add	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_ = MODE_MESSAGE;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2207      	movs	r2, #7
 8001ce4:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if (bytes_ == 0)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f47f aeec 	bne.w	8001acc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2208      	movs	r2, #8
 8001cf8:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8001cfc:	e6e6      	b.n	8001acc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	f47f aee1 	bne.w	8001acc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if ((checksum_ % 256) == 255)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 8001d18:	425a      	negs	r2, r3
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	bf58      	it	pl
 8001d20:	4253      	negpl	r3, r2
 8001d22:	2bff      	cmp	r3, #255	@ 0xff
 8001d24:	f47f aed2 	bne.w	8001acc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d110      	bne.n	8001d54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f87d 	bl	8001e32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f898 	bl	8001e6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
            last_sync_receive_time = c_time;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
            return SPIN_ERR;
 8001d4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d52:	e06a      	b.n	8001e2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8001d5a:	2b0a      	cmp	r3, #10
 8001d5c:	d107      	bne.n	8001d6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8001d64:	4619      	mov	r1, r3
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f960 	bl	800202c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8001d6c:	e6ae      	b.n	8001acc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8001d74:	2b06      	cmp	r3, #6
 8001d76:	d10e      	bne.n	8001d96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f603 1214 	addw	r2, r3, #2324	@ 0x914
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8001d84:	4619      	mov	r1, r3
 8001d86:	4610      	mov	r0, r2
 8001d88:	f7ff f975 	bl	8001076 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 8001d94:	e69a      	b.n	8001acc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8001d9c:	2b0b      	cmp	r3, #11
 8001d9e:	d104      	bne.n	8001daa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 8001da8:	e690      	b.n	8001acc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8001db0:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f43f ae84 	beq.w	8001acc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8001dca:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001dd4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8001dde:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	f202 4224 	addw	r2, r2, #1060	@ 0x424
 8001df6:	4611      	mov	r1, r2
 8001df8:	4798      	blx	r3
    while (true)
 8001dfa:	e667      	b.n	8001acc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8001dfc:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00f      	beq.n	8001e28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d906      	bls.n	8001e28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f809 	bl	8001e32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
    return SPIN_OK;
 8001e28:	2300      	movs	r3, #0
  }
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8001e3a:	f107 030c 	add.w	r3, r7, #12
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe fc76 	bl	8000730 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f107 020c 	add.w	r2, r7, #12
 8001e4e:	210a      	movs	r1, #10
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	4798      	blx	r3
    rt_time = hardware_.time();
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3304      	adds	r3, #4
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff fbee 	bl	800163a <_ZN13STM32Hardware4timeEv>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
  }
 8001e66:	bf00      	nop
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8001e6e:	b590      	push	{r4, r7, lr}
 8001e70:	b08b      	sub	sp, #44	@ 0x2c
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8001e76:	f107 030c 	add.w	r3, r7, #12
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fd48 	bl	8000910 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001e80:	2300      	movs	r3, #0
 8001e82:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e84:	e062      	b.n	8001f4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d056      	beq.n	8001f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb0:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec2:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	6859      	ldr	r1, [r3, #4]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed2:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	3308      	adds	r3, #8
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4608      	mov	r0, r1
 8001ee6:	4798      	blx	r3
 8001ee8:	4603      	mov	r3, r0
 8001eea:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef0:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	6859      	ldr	r1, [r3, #4]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f00:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	330c      	adds	r3, #12
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4608      	mov	r0, r1
 8001f14:	4798      	blx	r3
 8001f16:	4603      	mov	r3, r0
 8001f18:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8001f1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f1e:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681c      	ldr	r4, [r3, #0]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fa56 	bl	80013e6 <_ZN3ros9Publisher15getEndpointTypeEv>
 8001f3a:	4601      	mov	r1, r0
 8001f3c:	f107 030c 	add.w	r3, r7, #12
 8001f40:	461a      	mov	r2, r3
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f48:	3301      	adds	r3, #1
 8001f4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4e:	2b18      	cmp	r3, #24
 8001f50:	dd99      	ble.n	8001e86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001f52:	2300      	movs	r3, #0
 8001f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f56:	e05e      	b.n	8002016 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f5c:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d053      	beq.n	8002010 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f6c:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f7e:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f8e:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001f92:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f9a:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	3308      	adds	r3, #8
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4608      	mov	r0, r1
 8001faa:	4798      	blx	r3
 8001fac:	4603      	mov	r3, r0
 8001fae:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fb4:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001fb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fc0:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	330c      	adds	r3, #12
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4608      	mov	r0, r1
 8001fd0:	4798      	blx	r3
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8001fd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fda:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681c      	ldr	r4, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fe6:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001fea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ff2:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4608      	mov	r0, r1
 8002002:	4798      	blx	r3
 8002004:	4601      	mov	r1, r0
 8002006:	f107 030c 	add.w	r3, r7, #12
 800200a:	461a      	mov	r2, r3
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002012:	3301      	adds	r3, #1
 8002014:	627b      	str	r3, [r7, #36]	@ 0x24
 8002016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002018:	2b18      	cmp	r3, #24
 800201a:	dd9d      	ble.n	8001f58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
  }
 8002024:	bf00      	nop
 8002026:	372c      	adds	r7, #44	@ 0x2c
 8002028:	46bd      	mov	sp, r7
 800202a:	bd90      	pop	{r4, r7, pc}

0800202c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8002036:	f107 0308 	add.w	r3, r7, #8
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe fb78 	bl	8000730 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3304      	adds	r3, #4
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff faf8 	bl	800163a <_ZN13STM32Hardware4timeEv>
 800204a:	4602      	mov	r2, r0
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8002056:	f107 0308 	add.w	r3, r7, #8
 800205a:	6839      	ldr	r1, [r7, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe fbd7 	bl	8000810 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	4915      	ldr	r1, [pc, #84]	@ (80020bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002068:	fba1 1303 	umull	r1, r3, r1, r3
 800206c:	099b      	lsrs	r3, r3, #6
 800206e:	4413      	add	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8002072:	6939      	ldr	r1, [r7, #16]
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	4b11      	ldr	r3, [pc, #68]	@ (80020bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002078:	fba3 0302 	umull	r0, r3, r3, r2
 800207c:	099b      	lsrs	r3, r3, #6
 800207e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002082:	fb00 f303 	mul.w	r3, r0, r3
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	4a0d      	ldr	r2, [pc, #52]	@ (80020c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800208a:	fb02 f303 	mul.w	r3, r2, r3
 800208e:	440b      	add	r3, r1
 8002090:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8002092:	f107 0308 	add.w	r3, r7, #8
 8002096:	3304      	adds	r3, #4
 8002098:	4619      	mov	r1, r3
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f8a6 	bl	80021ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3304      	adds	r3, #4
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff fac8 	bl	800163a <_ZN13STM32Hardware4timeEv>
 80020aa:	4602      	mov	r2, r0
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
  }
 80020b2:	bf00      	nop
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	10624dd3 	.word	0x10624dd3
 80020c0:	000f4240 	.word	0x000f4240

080020c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b088      	sub	sp, #32
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	2b63      	cmp	r3, #99	@ 0x63
 80020d4:	dd09      	ble.n	80020ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 80020dc:	f083 0301 	eor.w	r3, r3, #1
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	e079      	b.n	80021de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	f202 6224 	addw	r2, r2, #1572	@ 0x624
 80020f6:	3207      	adds	r2, #7
 80020f8:	4611      	mov	r1, r2
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	4798      	blx	r3
 80020fe:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	22ff      	movs	r2, #255	@ 0xff
 8002104:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624
    message_out[1] = PROTOCOL_VER;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	22fe      	movs	r2, #254	@ 0xfe
 800210c:	f883 2625 	strb.w	r2, [r3, #1573]	@ 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	b2da      	uxtb	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f883 2626 	strb.w	r2, [r3, #1574]	@ 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	b29b      	uxth	r3, r3
 800211e:	0a1b      	lsrs	r3, r3, #8
 8002120:	b29b      	uxth	r3, r3
 8002122:	b2da      	uxtb	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f883 2627 	strb.w	r2, [r3, #1575]	@ 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f893 2626 	ldrb.w	r2, [r3, #1574]	@ 0x626
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f893 3627 	ldrb.w	r3, [r3, #1575]	@ 0x627
 8002136:	4413      	add	r3, r2
 8002138:	b2db      	uxtb	r3, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	b2da      	uxtb	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f883 2628 	strb.w	r2, [r3, #1576]	@ 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f883 2629 	strb.w	r2, [r3, #1577]	@ 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	b21b      	sxth	r3, r3
 8002152:	121b      	asrs	r3, r3, #8
 8002154:	b21b      	sxth	r3, r3
 8002156:	b2da      	uxtb	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f883 262a 	strb.w	r2, [r3, #1578]	@ 0x62a

    /* calculate checksum */
    int chk = 0;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002162:	2305      	movs	r3, #5
 8002164:	61bb      	str	r3, [r7, #24]
 8002166:	e00c      	b.n	8002182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	4413      	add	r3, r2
 800216e:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	4413      	add	r3, r2
 800217a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	3301      	adds	r3, #1
 8002180:	61bb      	str	r3, [r7, #24]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	3306      	adds	r3, #6
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	429a      	cmp	r2, r3
 800218a:	dded      	ble.n	8002168 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	3307      	adds	r3, #7
 8002190:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	425a      	negs	r2, r3
 8002196:	b2db      	uxtb	r3, r3
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	bf58      	it	pl
 800219c:	4253      	negpl	r3, r2
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	1c59      	adds	r1, r3, #1
 80021a4:	6179      	str	r1, [r7, #20]
 80021a6:	43d2      	mvns	r2, r2
 80021a8:	b2d1      	uxtb	r1, r2
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	4413      	add	r3, r2
 80021ae:	460a      	mov	r2, r1
 80021b0:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624

    if (l <= OUTPUT_SIZE)
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021ba:	dc0a      	bgt.n	80021d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	1d18      	adds	r0, r3, #4
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4619      	mov	r1, r3
 80021ca:	f7ff f9ef 	bl	80015ac <_ZN13STM32Hardware5writeEPhi>
      return l;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	e005      	b.n	80021de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80021d2:	4905      	ldr	r1, [pc, #20]	@ (80021e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 f849 	bl	800226c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80021da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
  }
 80021de:	4618      	mov	r0, r3
 80021e0:	3720      	adds	r7, #32
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	08005560 	.word	0x08005560

080021ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3304      	adds	r3, #4
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff fa1d 	bl	800163a <_ZN13STM32Hardware4timeEv>
 8002200:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	4915      	ldr	r1, [pc, #84]	@ (8002260 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 800220a:	fba1 1303 	umull	r1, r3, r1, r3
 800220e:	099b      	lsrs	r3, r3, #6
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	1e5a      	subs	r2, r3, #1
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	6859      	ldr	r1, [r3, #4]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	4b0f      	ldr	r3, [pc, #60]	@ (8002260 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8002222:	fba3 0302 	umull	r0, r3, r3, r2
 8002226:	099b      	lsrs	r3, r3, #6
 8002228:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800222c:	fb00 f303 	mul.w	r3, r0, r3
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	4a0c      	ldr	r2, [pc, #48]	@ (8002264 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8002234:	fb02 f303 	mul.w	r3, r2, r3
 8002238:	1aca      	subs	r2, r1, r3
 800223a:	4b0b      	ldr	r3, [pc, #44]	@ (8002268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 800223c:	4413      	add	r3, r2
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	f8c2 341c 	str.w	r3, [r2, #1052]	@ 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f503 6283 	add.w	r2, r3, #1048	@ 0x418
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002250:	4619      	mov	r1, r3
 8002252:	4610      	mov	r0, r2
 8002254:	f7fe f940 	bl	80004d8 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8002258:	bf00      	nop
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	10624dd3 	.word	0x10624dd3
 8002264:	000f4240 	.word	0x000f4240
 8002268:	3b9aca00 	.word	0x3b9aca00

0800226c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	2103      	movs	r1, #3
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f804 	bl	8002288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8002280:	bf00      	nop
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8002288:	b580      	push	{r7, lr}
 800228a:	b088      	sub	sp, #32
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	460b      	mov	r3, r1
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8002296:	f107 0314 	add.w	r3, r7, #20
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe fcfc 	bl	8000c98 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80022a0:	7afb      	ldrb	r3, [r7, #11]
 80022a2:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f107 0214 	add.w	r2, r7, #20
 80022b2:	2107      	movs	r1, #7
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	4798      	blx	r3
  }
 80022b8:	bf00      	nop
 80022ba:	3720      	adds	r7, #32
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <_Z41__static_initialization_and_destruction_0ii>:
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d110      	bne.n	80022f2 <_Z41__static_initialization_and_destruction_0ii+0x32>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d10b      	bne.n	80022f2 <_Z41__static_initialization_and_destruction_0ii+0x32>
ros::NodeHandle nh;
 80022da:	4808      	ldr	r0, [pc, #32]	@ (80022fc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80022dc:	f7ff fa64 	bl	80017a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Float32 float_msg;  // Tipe pesan ROS untuk data float
 80022e0:	4807      	ldr	r0, [pc, #28]	@ (8002300 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80022e2:	f7ff f9b5 	bl	8001650 <_ZN8std_msgs7Float32C1Ev>
ros::Publisher pub("float_data", &float_msg);  // Publisher dengan topik "float_data"
 80022e6:	2300      	movs	r3, #0
 80022e8:	4a05      	ldr	r2, [pc, #20]	@ (8002300 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80022ea:	4906      	ldr	r1, [pc, #24]	@ (8002304 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80022ec:	4806      	ldr	r0, [pc, #24]	@ (8002308 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80022ee:	f7ff f84f 	bl	8001390 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	2000007c 	.word	0x2000007c
 8002300:	200009b8 	.word	0x200009b8
 8002304:	0800559c 	.word	0x0800559c
 8002308:	200009c0 	.word	0x200009c0

0800230c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
    return configured_;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
  };
 800231a:	4618      	mov	r0, r3
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <_GLOBAL__sub_I_nh>:
 8002326:	b580      	push	{r7, lr}
 8002328:	af00      	add	r7, sp, #0
 800232a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800232e:	2001      	movs	r0, #1
 8002330:	f7ff ffc6 	bl	80022c0 <_Z41__static_initialization_and_destruction_0ii>
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	607b      	str	r3, [r7, #4]
 8002342:	4b10      	ldr	r3, [pc, #64]	@ (8002384 <HAL_MspInit+0x4c>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002346:	4a0f      	ldr	r2, [pc, #60]	@ (8002384 <HAL_MspInit+0x4c>)
 8002348:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800234c:	6453      	str	r3, [r2, #68]	@ 0x44
 800234e:	4b0d      	ldr	r3, [pc, #52]	@ (8002384 <HAL_MspInit+0x4c>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002352:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002356:	607b      	str	r3, [r7, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	603b      	str	r3, [r7, #0]
 800235e:	4b09      	ldr	r3, [pc, #36]	@ (8002384 <HAL_MspInit+0x4c>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	4a08      	ldr	r2, [pc, #32]	@ (8002384 <HAL_MspInit+0x4c>)
 8002364:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002368:	6413      	str	r3, [r2, #64]	@ 0x40
 800236a:	4b06      	ldr	r3, [pc, #24]	@ (8002384 <HAL_MspInit+0x4c>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002372:	603b      	str	r3, [r7, #0]
 8002374:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800

08002388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800238c:	bf00      	nop
 800238e:	e7fd      	b.n	800238c <NMI_Handler+0x4>

08002390 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002394:	bf00      	nop
 8002396:	e7fd      	b.n	8002394 <HardFault_Handler+0x4>

08002398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800239c:	bf00      	nop
 800239e:	e7fd      	b.n	800239c <MemManage_Handler+0x4>

080023a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023a4:	bf00      	nop
 80023a6:	e7fd      	b.n	80023a4 <BusFault_Handler+0x4>

080023a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023ac:	bf00      	nop
 80023ae:	e7fd      	b.n	80023ac <UsageFault_Handler+0x4>

080023b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023be:	b480      	push	{r7}
 80023c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023de:	f000 f9c5 	bl	800276c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80023ec:	4802      	ldr	r0, [pc, #8]	@ (80023f8 <DMA1_Stream5_IRQHandler+0x10>)
 80023ee:	f000 fc87 	bl	8002d00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000a20 	.word	0x20000a20

080023fc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002400:	4802      	ldr	r0, [pc, #8]	@ (800240c <DMA1_Stream6_IRQHandler+0x10>)
 8002402:	f000 fc7d 	bl	8002d00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000a80 	.word	0x20000a80

08002410 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002414:	4802      	ldr	r0, [pc, #8]	@ (8002420 <USART2_IRQHandler+0x10>)
 8002416:	f001 fd9f 	bl	8003f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	200009d8 	.word	0x200009d8

08002424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800242c:	4a14      	ldr	r2, [pc, #80]	@ (8002480 <_sbrk+0x5c>)
 800242e:	4b15      	ldr	r3, [pc, #84]	@ (8002484 <_sbrk+0x60>)
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002438:	4b13      	ldr	r3, [pc, #76]	@ (8002488 <_sbrk+0x64>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d102      	bne.n	8002446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002440:	4b11      	ldr	r3, [pc, #68]	@ (8002488 <_sbrk+0x64>)
 8002442:	4a12      	ldr	r2, [pc, #72]	@ (800248c <_sbrk+0x68>)
 8002444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002446:	4b10      	ldr	r3, [pc, #64]	@ (8002488 <_sbrk+0x64>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	429a      	cmp	r2, r3
 8002452:	d207      	bcs.n	8002464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002454:	f002 fea8 	bl	80051a8 <__errno>
 8002458:	4603      	mov	r3, r0
 800245a:	220c      	movs	r2, #12
 800245c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800245e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002462:	e009      	b.n	8002478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002464:	4b08      	ldr	r3, [pc, #32]	@ (8002488 <_sbrk+0x64>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800246a:	4b07      	ldr	r3, [pc, #28]	@ (8002488 <_sbrk+0x64>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4413      	add	r3, r2
 8002472:	4a05      	ldr	r2, [pc, #20]	@ (8002488 <_sbrk+0x64>)
 8002474:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002476:	68fb      	ldr	r3, [r7, #12]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20020000 	.word	0x20020000
 8002484:	00000400 	.word	0x00000400
 8002488:	200009d4 	.word	0x200009d4
 800248c:	20000c30 	.word	0x20000c30

08002490 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002494:	4b06      	ldr	r3, [pc, #24]	@ (80024b0 <SystemInit+0x20>)
 8002496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800249a:	4a05      	ldr	r2, [pc, #20]	@ (80024b0 <SystemInit+0x20>)
 800249c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024b8:	4b11      	ldr	r3, [pc, #68]	@ (8002500 <MX_USART2_UART_Init+0x4c>)
 80024ba:	4a12      	ldr	r2, [pc, #72]	@ (8002504 <MX_USART2_UART_Init+0x50>)
 80024bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80024be:	4b10      	ldr	r3, [pc, #64]	@ (8002500 <MX_USART2_UART_Init+0x4c>)
 80024c0:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80024c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002500 <MX_USART2_UART_Init+0x4c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002500 <MX_USART2_UART_Init+0x4c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002500 <MX_USART2_UART_Init+0x4c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024d8:	4b09      	ldr	r3, [pc, #36]	@ (8002500 <MX_USART2_UART_Init+0x4c>)
 80024da:	220c      	movs	r2, #12
 80024dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024de:	4b08      	ldr	r3, [pc, #32]	@ (8002500 <MX_USART2_UART_Init+0x4c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e4:	4b06      	ldr	r3, [pc, #24]	@ (8002500 <MX_USART2_UART_Init+0x4c>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024ea:	4805      	ldr	r0, [pc, #20]	@ (8002500 <MX_USART2_UART_Init+0x4c>)
 80024ec:	f001 fc4e 	bl	8003d8c <HAL_UART_Init>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80024f6:	f7fe f8f3 	bl	80006e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	200009d8 	.word	0x200009d8
 8002504:	40004400 	.word	0x40004400

08002508 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b08a      	sub	sp, #40	@ 0x28
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002510:	f107 0314 	add.w	r3, r7, #20
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	60da      	str	r2, [r3, #12]
 800251e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a4c      	ldr	r2, [pc, #304]	@ (8002658 <HAL_UART_MspInit+0x150>)
 8002526:	4293      	cmp	r3, r2
 8002528:	f040 8091 	bne.w	800264e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800252c:	2300      	movs	r3, #0
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	4b4a      	ldr	r3, [pc, #296]	@ (800265c <HAL_UART_MspInit+0x154>)
 8002532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002534:	4a49      	ldr	r2, [pc, #292]	@ (800265c <HAL_UART_MspInit+0x154>)
 8002536:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800253a:	6413      	str	r3, [r2, #64]	@ 0x40
 800253c:	4b47      	ldr	r3, [pc, #284]	@ (800265c <HAL_UART_MspInit+0x154>)
 800253e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002548:	2300      	movs	r3, #0
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	4b43      	ldr	r3, [pc, #268]	@ (800265c <HAL_UART_MspInit+0x154>)
 800254e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002550:	4a42      	ldr	r2, [pc, #264]	@ (800265c <HAL_UART_MspInit+0x154>)
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	6313      	str	r3, [r2, #48]	@ 0x30
 8002558:	4b40      	ldr	r3, [pc, #256]	@ (800265c <HAL_UART_MspInit+0x154>)
 800255a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002564:	230c      	movs	r3, #12
 8002566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002568:	2302      	movs	r3, #2
 800256a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002570:	2303      	movs	r3, #3
 8002572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002574:	2307      	movs	r3, #7
 8002576:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002578:	f107 0314 	add.w	r3, r7, #20
 800257c:	4619      	mov	r1, r3
 800257e:	4838      	ldr	r0, [pc, #224]	@ (8002660 <HAL_UART_MspInit+0x158>)
 8002580:	f000 fe28 	bl	80031d4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002584:	4b37      	ldr	r3, [pc, #220]	@ (8002664 <HAL_UART_MspInit+0x15c>)
 8002586:	4a38      	ldr	r2, [pc, #224]	@ (8002668 <HAL_UART_MspInit+0x160>)
 8002588:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800258a:	4b36      	ldr	r3, [pc, #216]	@ (8002664 <HAL_UART_MspInit+0x15c>)
 800258c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002590:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002592:	4b34      	ldr	r3, [pc, #208]	@ (8002664 <HAL_UART_MspInit+0x15c>)
 8002594:	2200      	movs	r2, #0
 8002596:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002598:	4b32      	ldr	r3, [pc, #200]	@ (8002664 <HAL_UART_MspInit+0x15c>)
 800259a:	2200      	movs	r2, #0
 800259c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800259e:	4b31      	ldr	r3, [pc, #196]	@ (8002664 <HAL_UART_MspInit+0x15c>)
 80025a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025a4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002664 <HAL_UART_MspInit+0x15c>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002664 <HAL_UART_MspInit+0x15c>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80025b2:	4b2c      	ldr	r3, [pc, #176]	@ (8002664 <HAL_UART_MspInit+0x15c>)
 80025b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025b8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002664 <HAL_UART_MspInit+0x15c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025c0:	4b28      	ldr	r3, [pc, #160]	@ (8002664 <HAL_UART_MspInit+0x15c>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80025c6:	4827      	ldr	r0, [pc, #156]	@ (8002664 <HAL_UART_MspInit+0x15c>)
 80025c8:	f000 fa02 	bl	80029d0 <HAL_DMA_Init>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80025d2:	f7fe f885 	bl	80006e0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a22      	ldr	r2, [pc, #136]	@ (8002664 <HAL_UART_MspInit+0x15c>)
 80025da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80025dc:	4a21      	ldr	r2, [pc, #132]	@ (8002664 <HAL_UART_MspInit+0x15c>)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80025e2:	4b22      	ldr	r3, [pc, #136]	@ (800266c <HAL_UART_MspInit+0x164>)
 80025e4:	4a22      	ldr	r2, [pc, #136]	@ (8002670 <HAL_UART_MspInit+0x168>)
 80025e6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80025e8:	4b20      	ldr	r3, [pc, #128]	@ (800266c <HAL_UART_MspInit+0x164>)
 80025ea:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80025ee:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025f0:	4b1e      	ldr	r3, [pc, #120]	@ (800266c <HAL_UART_MspInit+0x164>)
 80025f2:	2240      	movs	r2, #64	@ 0x40
 80025f4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025f6:	4b1d      	ldr	r3, [pc, #116]	@ (800266c <HAL_UART_MspInit+0x164>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025fc:	4b1b      	ldr	r3, [pc, #108]	@ (800266c <HAL_UART_MspInit+0x164>)
 80025fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002602:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002604:	4b19      	ldr	r3, [pc, #100]	@ (800266c <HAL_UART_MspInit+0x164>)
 8002606:	2200      	movs	r2, #0
 8002608:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800260a:	4b18      	ldr	r3, [pc, #96]	@ (800266c <HAL_UART_MspInit+0x164>)
 800260c:	2200      	movs	r2, #0
 800260e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002610:	4b16      	ldr	r3, [pc, #88]	@ (800266c <HAL_UART_MspInit+0x164>)
 8002612:	2200      	movs	r2, #0
 8002614:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002616:	4b15      	ldr	r3, [pc, #84]	@ (800266c <HAL_UART_MspInit+0x164>)
 8002618:	2200      	movs	r2, #0
 800261a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800261c:	4b13      	ldr	r3, [pc, #76]	@ (800266c <HAL_UART_MspInit+0x164>)
 800261e:	2200      	movs	r2, #0
 8002620:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002622:	4812      	ldr	r0, [pc, #72]	@ (800266c <HAL_UART_MspInit+0x164>)
 8002624:	f000 f9d4 	bl	80029d0 <HAL_DMA_Init>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800262e:	f7fe f857 	bl	80006e0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a0d      	ldr	r2, [pc, #52]	@ (800266c <HAL_UART_MspInit+0x164>)
 8002636:	639a      	str	r2, [r3, #56]	@ 0x38
 8002638:	4a0c      	ldr	r2, [pc, #48]	@ (800266c <HAL_UART_MspInit+0x164>)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800263e:	2200      	movs	r2, #0
 8002640:	2100      	movs	r1, #0
 8002642:	2026      	movs	r0, #38	@ 0x26
 8002644:	f000 f98d 	bl	8002962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002648:	2026      	movs	r0, #38	@ 0x26
 800264a:	f000 f9a6 	bl	800299a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800264e:	bf00      	nop
 8002650:	3728      	adds	r7, #40	@ 0x28
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40004400 	.word	0x40004400
 800265c:	40023800 	.word	0x40023800
 8002660:	40020000 	.word	0x40020000
 8002664:	20000a20 	.word	0x20000a20
 8002668:	40026088 	.word	0x40026088
 800266c:	20000a80 	.word	0x20000a80
 8002670:	400260a0 	.word	0x400260a0

08002674 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002674:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002678:	f7ff ff0a 	bl	8002490 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800267c:	480c      	ldr	r0, [pc, #48]	@ (80026b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800267e:	490d      	ldr	r1, [pc, #52]	@ (80026b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002680:	4a0d      	ldr	r2, [pc, #52]	@ (80026b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002684:	e002      	b.n	800268c <LoopCopyDataInit>

08002686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800268a:	3304      	adds	r3, #4

0800268c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800268c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800268e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002690:	d3f9      	bcc.n	8002686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002692:	4a0a      	ldr	r2, [pc, #40]	@ (80026bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002694:	4c0a      	ldr	r4, [pc, #40]	@ (80026c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002698:	e001      	b.n	800269e <LoopFillZerobss>

0800269a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800269a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800269c:	3204      	adds	r2, #4

0800269e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800269e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026a0:	d3fb      	bcc.n	800269a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026a2:	f002 fd87 	bl	80051b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026a6:	f7fd ff93 	bl	80005d0 <main>
  bx  lr    
 80026aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026b4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80026b8:	080056b0 	.word	0x080056b0
  ldr r2, =_sbss
 80026bc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80026c0:	20000c2c 	.word	0x20000c2c

080026c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026c4:	e7fe      	b.n	80026c4 <ADC_IRQHandler>
	...

080026c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002708 <HAL_Init+0x40>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002708 <HAL_Init+0x40>)
 80026d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002708 <HAL_Init+0x40>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002708 <HAL_Init+0x40>)
 80026de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026e4:	4b08      	ldr	r3, [pc, #32]	@ (8002708 <HAL_Init+0x40>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a07      	ldr	r2, [pc, #28]	@ (8002708 <HAL_Init+0x40>)
 80026ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026f0:	2003      	movs	r0, #3
 80026f2:	f000 f92b 	bl	800294c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026f6:	200f      	movs	r0, #15
 80026f8:	f000 f808 	bl	800270c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026fc:	f7ff fe1c 	bl	8002338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40023c00 	.word	0x40023c00

0800270c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002714:	4b12      	ldr	r3, [pc, #72]	@ (8002760 <HAL_InitTick+0x54>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	4b12      	ldr	r3, [pc, #72]	@ (8002764 <HAL_InitTick+0x58>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	4619      	mov	r1, r3
 800271e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002722:	fbb3 f3f1 	udiv	r3, r3, r1
 8002726:	fbb2 f3f3 	udiv	r3, r2, r3
 800272a:	4618      	mov	r0, r3
 800272c:	f000 f943 	bl	80029b6 <HAL_SYSTICK_Config>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e00e      	b.n	8002758 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b0f      	cmp	r3, #15
 800273e:	d80a      	bhi.n	8002756 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002740:	2200      	movs	r2, #0
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002748:	f000 f90b 	bl	8002962 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800274c:	4a06      	ldr	r2, [pc, #24]	@ (8002768 <HAL_InitTick+0x5c>)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	e000      	b.n	8002758 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
}
 8002758:	4618      	mov	r0, r3
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20000000 	.word	0x20000000
 8002764:	20000008 	.word	0x20000008
 8002768:	20000004 	.word	0x20000004

0800276c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002770:	4b06      	ldr	r3, [pc, #24]	@ (800278c <HAL_IncTick+0x20>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	461a      	mov	r2, r3
 8002776:	4b06      	ldr	r3, [pc, #24]	@ (8002790 <HAL_IncTick+0x24>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4413      	add	r3, r2
 800277c:	4a04      	ldr	r2, [pc, #16]	@ (8002790 <HAL_IncTick+0x24>)
 800277e:	6013      	str	r3, [r2, #0]
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	20000008 	.word	0x20000008
 8002790:	20000ae0 	.word	0x20000ae0

08002794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return uwTick;
 8002798:	4b03      	ldr	r3, [pc, #12]	@ (80027a8 <HAL_GetTick+0x14>)
 800279a:	681b      	ldr	r3, [r3, #0]
}
 800279c:	4618      	mov	r0, r3
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	20000ae0 	.word	0x20000ae0

080027ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027bc:	4b0c      	ldr	r3, [pc, #48]	@ (80027f0 <__NVIC_SetPriorityGrouping+0x44>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027c8:	4013      	ands	r3, r2
 80027ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027de:	4a04      	ldr	r2, [pc, #16]	@ (80027f0 <__NVIC_SetPriorityGrouping+0x44>)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	60d3      	str	r3, [r2, #12]
}
 80027e4:	bf00      	nop
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027f8:	4b04      	ldr	r3, [pc, #16]	@ (800280c <__NVIC_GetPriorityGrouping+0x18>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	0a1b      	lsrs	r3, r3, #8
 80027fe:	f003 0307 	and.w	r3, r3, #7
}
 8002802:	4618      	mov	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800281a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281e:	2b00      	cmp	r3, #0
 8002820:	db0b      	blt.n	800283a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002822:	79fb      	ldrb	r3, [r7, #7]
 8002824:	f003 021f 	and.w	r2, r3, #31
 8002828:	4907      	ldr	r1, [pc, #28]	@ (8002848 <__NVIC_EnableIRQ+0x38>)
 800282a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282e:	095b      	lsrs	r3, r3, #5
 8002830:	2001      	movs	r0, #1
 8002832:	fa00 f202 	lsl.w	r2, r0, r2
 8002836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	e000e100 	.word	0xe000e100

0800284c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	4603      	mov	r3, r0
 8002854:	6039      	str	r1, [r7, #0]
 8002856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285c:	2b00      	cmp	r3, #0
 800285e:	db0a      	blt.n	8002876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	b2da      	uxtb	r2, r3
 8002864:	490c      	ldr	r1, [pc, #48]	@ (8002898 <__NVIC_SetPriority+0x4c>)
 8002866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286a:	0112      	lsls	r2, r2, #4
 800286c:	b2d2      	uxtb	r2, r2
 800286e:	440b      	add	r3, r1
 8002870:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002874:	e00a      	b.n	800288c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	b2da      	uxtb	r2, r3
 800287a:	4908      	ldr	r1, [pc, #32]	@ (800289c <__NVIC_SetPriority+0x50>)
 800287c:	79fb      	ldrb	r3, [r7, #7]
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	3b04      	subs	r3, #4
 8002884:	0112      	lsls	r2, r2, #4
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	440b      	add	r3, r1
 800288a:	761a      	strb	r2, [r3, #24]
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	e000e100 	.word	0xe000e100
 800289c:	e000ed00 	.word	0xe000ed00

080028a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b089      	sub	sp, #36	@ 0x24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f1c3 0307 	rsb	r3, r3, #7
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	bf28      	it	cs
 80028be:	2304      	movcs	r3, #4
 80028c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3304      	adds	r3, #4
 80028c6:	2b06      	cmp	r3, #6
 80028c8:	d902      	bls.n	80028d0 <NVIC_EncodePriority+0x30>
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	3b03      	subs	r3, #3
 80028ce:	e000      	b.n	80028d2 <NVIC_EncodePriority+0x32>
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43da      	mvns	r2, r3
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	401a      	ands	r2, r3
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	fa01 f303 	lsl.w	r3, r1, r3
 80028f2:	43d9      	mvns	r1, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f8:	4313      	orrs	r3, r2
         );
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3724      	adds	r7, #36	@ 0x24
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
	...

08002908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3b01      	subs	r3, #1
 8002914:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002918:	d301      	bcc.n	800291e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800291a:	2301      	movs	r3, #1
 800291c:	e00f      	b.n	800293e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800291e:	4a0a      	ldr	r2, [pc, #40]	@ (8002948 <SysTick_Config+0x40>)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3b01      	subs	r3, #1
 8002924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002926:	210f      	movs	r1, #15
 8002928:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800292c:	f7ff ff8e 	bl	800284c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002930:	4b05      	ldr	r3, [pc, #20]	@ (8002948 <SysTick_Config+0x40>)
 8002932:	2200      	movs	r2, #0
 8002934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002936:	4b04      	ldr	r3, [pc, #16]	@ (8002948 <SysTick_Config+0x40>)
 8002938:	2207      	movs	r2, #7
 800293a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	e000e010 	.word	0xe000e010

0800294c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f7ff ff29 	bl	80027ac <__NVIC_SetPriorityGrouping>
}
 800295a:	bf00      	nop
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002962:	b580      	push	{r7, lr}
 8002964:	b086      	sub	sp, #24
 8002966:	af00      	add	r7, sp, #0
 8002968:	4603      	mov	r3, r0
 800296a:	60b9      	str	r1, [r7, #8]
 800296c:	607a      	str	r2, [r7, #4]
 800296e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002974:	f7ff ff3e 	bl	80027f4 <__NVIC_GetPriorityGrouping>
 8002978:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	68b9      	ldr	r1, [r7, #8]
 800297e:	6978      	ldr	r0, [r7, #20]
 8002980:	f7ff ff8e 	bl	80028a0 <NVIC_EncodePriority>
 8002984:	4602      	mov	r2, r0
 8002986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800298a:	4611      	mov	r1, r2
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff ff5d 	bl	800284c <__NVIC_SetPriority>
}
 8002992:	bf00      	nop
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	4603      	mov	r3, r0
 80029a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff ff31 	bl	8002810 <__NVIC_EnableIRQ>
}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7ff ffa2 	bl	8002908 <SysTick_Config>
 80029c4:	4603      	mov	r3, r0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029dc:	f7ff feda 	bl	8002794 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e099      	b.n	8002b20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2202      	movs	r2, #2
 80029f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 0201 	bic.w	r2, r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a0c:	e00f      	b.n	8002a2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a0e:	f7ff fec1 	bl	8002794 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b05      	cmp	r3, #5
 8002a1a:	d908      	bls.n	8002a2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2203      	movs	r2, #3
 8002a26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e078      	b.n	8002b20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1e8      	bne.n	8002a0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	4b38      	ldr	r3, [pc, #224]	@ (8002b28 <HAL_DMA_Init+0x158>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a84:	2b04      	cmp	r3, #4
 8002a86:	d107      	bne.n	8002a98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a90:	4313      	orrs	r3, r2
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f023 0307 	bic.w	r3, r3, #7
 8002aae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d117      	bne.n	8002af2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00e      	beq.n	8002af2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 fb01 	bl	80030dc <DMA_CheckFifoParam>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d008      	beq.n	8002af2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2240      	movs	r2, #64	@ 0x40
 8002ae4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002aee:	2301      	movs	r3, #1
 8002af0:	e016      	b.n	8002b20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 fab8 	bl	8003070 <DMA_CalcBaseAndBitshift>
 8002b00:	4603      	mov	r3, r0
 8002b02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b08:	223f      	movs	r2, #63	@ 0x3f
 8002b0a:	409a      	lsls	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	f010803f 	.word	0xf010803f

08002b2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
 8002b38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d101      	bne.n	8002b52 <HAL_DMA_Start_IT+0x26>
 8002b4e:	2302      	movs	r3, #2
 8002b50:	e040      	b.n	8002bd4 <HAL_DMA_Start_IT+0xa8>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d12f      	bne.n	8002bc6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2202      	movs	r2, #2
 8002b6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	68b9      	ldr	r1, [r7, #8]
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 fa4a 	bl	8003014 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b84:	223f      	movs	r2, #63	@ 0x3f
 8002b86:	409a      	lsls	r2, r3
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0216 	orr.w	r2, r2, #22
 8002b9a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d007      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0208 	orr.w	r2, r2, #8
 8002bb2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0201 	orr.w	r2, r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	e005      	b.n	8002bd2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002bea:	f7ff fdd3 	bl	8002794 <HAL_GetTick>
 8002bee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d008      	beq.n	8002c0e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2280      	movs	r2, #128	@ 0x80
 8002c00:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e052      	b.n	8002cb4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0216 	bic.w	r2, r2, #22
 8002c1c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	695a      	ldr	r2, [r3, #20]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c2c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d103      	bne.n	8002c3e <HAL_DMA_Abort+0x62>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d007      	beq.n	8002c4e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0208 	bic.w	r2, r2, #8
 8002c4c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0201 	bic.w	r2, r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c5e:	e013      	b.n	8002c88 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c60:	f7ff fd98 	bl	8002794 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b05      	cmp	r3, #5
 8002c6c:	d90c      	bls.n	8002c88 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2220      	movs	r2, #32
 8002c72:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2203      	movs	r2, #3
 8002c78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e015      	b.n	8002cb4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1e4      	bne.n	8002c60 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c9a:	223f      	movs	r2, #63	@ 0x3f
 8002c9c:	409a      	lsls	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d004      	beq.n	8002cda <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2280      	movs	r2, #128	@ 0x80
 8002cd4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e00c      	b.n	8002cf4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2205      	movs	r2, #5
 8002cde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0201 	bic.w	r2, r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d0c:	4b8e      	ldr	r3, [pc, #568]	@ (8002f48 <HAL_DMA_IRQHandler+0x248>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a8e      	ldr	r2, [pc, #568]	@ (8002f4c <HAL_DMA_IRQHandler+0x24c>)
 8002d12:	fba2 2303 	umull	r2, r3, r2, r3
 8002d16:	0a9b      	lsrs	r3, r3, #10
 8002d18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d2a:	2208      	movs	r2, #8
 8002d2c:	409a      	lsls	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	4013      	ands	r3, r2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d01a      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d013      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0204 	bic.w	r2, r2, #4
 8002d52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d58:	2208      	movs	r2, #8
 8002d5a:	409a      	lsls	r2, r3
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d64:	f043 0201 	orr.w	r2, r3, #1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d70:	2201      	movs	r2, #1
 8002d72:	409a      	lsls	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d012      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00b      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d8e:	2201      	movs	r2, #1
 8002d90:	409a      	lsls	r2, r3
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d9a:	f043 0202 	orr.w	r2, r3, #2
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da6:	2204      	movs	r2, #4
 8002da8:	409a      	lsls	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	4013      	ands	r3, r2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d012      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00b      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc4:	2204      	movs	r2, #4
 8002dc6:	409a      	lsls	r2, r3
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd0:	f043 0204 	orr.w	r2, r3, #4
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ddc:	2210      	movs	r2, #16
 8002dde:	409a      	lsls	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4013      	ands	r3, r2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d043      	beq.n	8002e70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d03c      	beq.n	8002e70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dfa:	2210      	movs	r2, #16
 8002dfc:	409a      	lsls	r2, r3
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d018      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d108      	bne.n	8002e30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d024      	beq.n	8002e70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	4798      	blx	r3
 8002e2e:	e01f      	b.n	8002e70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d01b      	beq.n	8002e70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	4798      	blx	r3
 8002e40:	e016      	b.n	8002e70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d107      	bne.n	8002e60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0208 	bic.w	r2, r2, #8
 8002e5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e74:	2220      	movs	r2, #32
 8002e76:	409a      	lsls	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 808f 	beq.w	8002fa0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0310 	and.w	r3, r3, #16
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 8087 	beq.w	8002fa0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e96:	2220      	movs	r2, #32
 8002e98:	409a      	lsls	r2, r3
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b05      	cmp	r3, #5
 8002ea8:	d136      	bne.n	8002f18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0216 	bic.w	r2, r2, #22
 8002eb8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695a      	ldr	r2, [r3, #20]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ec8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d103      	bne.n	8002eda <HAL_DMA_IRQHandler+0x1da>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d007      	beq.n	8002eea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0208 	bic.w	r2, r2, #8
 8002ee8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eee:	223f      	movs	r2, #63	@ 0x3f
 8002ef0:	409a      	lsls	r2, r3
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d07e      	beq.n	800300c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	4798      	blx	r3
        }
        return;
 8002f16:	e079      	b.n	800300c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d01d      	beq.n	8002f62 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10d      	bne.n	8002f50 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d031      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	4798      	blx	r3
 8002f44:	e02c      	b.n	8002fa0 <HAL_DMA_IRQHandler+0x2a0>
 8002f46:	bf00      	nop
 8002f48:	20000000 	.word	0x20000000
 8002f4c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d023      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	4798      	blx	r3
 8002f60:	e01e      	b.n	8002fa0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10f      	bne.n	8002f90 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0210 	bic.w	r2, r2, #16
 8002f7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d032      	beq.n	800300e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d022      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2205      	movs	r2, #5
 8002fb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0201 	bic.w	r2, r2, #1
 8002fca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	60bb      	str	r3, [r7, #8]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d307      	bcc.n	8002fe8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f2      	bne.n	8002fcc <HAL_DMA_IRQHandler+0x2cc>
 8002fe6:	e000      	b.n	8002fea <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002fe8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d005      	beq.n	800300e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	4798      	blx	r3
 800300a:	e000      	b.n	800300e <HAL_DMA_IRQHandler+0x30e>
        return;
 800300c:	bf00      	nop
    }
  }
}
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
 8003020:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003030:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	2b40      	cmp	r3, #64	@ 0x40
 8003040:	d108      	bne.n	8003054 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003052:	e007      	b.n	8003064 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	60da      	str	r2, [r3, #12]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	b2db      	uxtb	r3, r3
 800307e:	3b10      	subs	r3, #16
 8003080:	4a14      	ldr	r2, [pc, #80]	@ (80030d4 <DMA_CalcBaseAndBitshift+0x64>)
 8003082:	fba2 2303 	umull	r2, r3, r2, r3
 8003086:	091b      	lsrs	r3, r3, #4
 8003088:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800308a:	4a13      	ldr	r2, [pc, #76]	@ (80030d8 <DMA_CalcBaseAndBitshift+0x68>)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4413      	add	r3, r2
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	461a      	mov	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2b03      	cmp	r3, #3
 800309c:	d909      	bls.n	80030b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80030a6:	f023 0303 	bic.w	r3, r3, #3
 80030aa:	1d1a      	adds	r2, r3, #4
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	659a      	str	r2, [r3, #88]	@ 0x58
 80030b0:	e007      	b.n	80030c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80030ba:	f023 0303 	bic.w	r3, r3, #3
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	aaaaaaab 	.word	0xaaaaaaab
 80030d8:	08005694 	.word	0x08005694

080030dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030e4:	2300      	movs	r3, #0
 80030e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d11f      	bne.n	8003136 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2b03      	cmp	r3, #3
 80030fa:	d856      	bhi.n	80031aa <DMA_CheckFifoParam+0xce>
 80030fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003104 <DMA_CheckFifoParam+0x28>)
 80030fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003102:	bf00      	nop
 8003104:	08003115 	.word	0x08003115
 8003108:	08003127 	.word	0x08003127
 800310c:	08003115 	.word	0x08003115
 8003110:	080031ab 	.word	0x080031ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003118:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d046      	beq.n	80031ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003124:	e043      	b.n	80031ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800312a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800312e:	d140      	bne.n	80031b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003134:	e03d      	b.n	80031b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800313e:	d121      	bne.n	8003184 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2b03      	cmp	r3, #3
 8003144:	d837      	bhi.n	80031b6 <DMA_CheckFifoParam+0xda>
 8003146:	a201      	add	r2, pc, #4	@ (adr r2, 800314c <DMA_CheckFifoParam+0x70>)
 8003148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314c:	0800315d 	.word	0x0800315d
 8003150:	08003163 	.word	0x08003163
 8003154:	0800315d 	.word	0x0800315d
 8003158:	08003175 	.word	0x08003175
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
      break;
 8003160:	e030      	b.n	80031c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003166:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d025      	beq.n	80031ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003172:	e022      	b.n	80031ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003178:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800317c:	d11f      	bne.n	80031be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003182:	e01c      	b.n	80031be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	2b02      	cmp	r3, #2
 8003188:	d903      	bls.n	8003192 <DMA_CheckFifoParam+0xb6>
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2b03      	cmp	r3, #3
 800318e:	d003      	beq.n	8003198 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003190:	e018      	b.n	80031c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	73fb      	strb	r3, [r7, #15]
      break;
 8003196:	e015      	b.n	80031c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00e      	beq.n	80031c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	73fb      	strb	r3, [r7, #15]
      break;
 80031a8:	e00b      	b.n	80031c2 <DMA_CheckFifoParam+0xe6>
      break;
 80031aa:	bf00      	nop
 80031ac:	e00a      	b.n	80031c4 <DMA_CheckFifoParam+0xe8>
      break;
 80031ae:	bf00      	nop
 80031b0:	e008      	b.n	80031c4 <DMA_CheckFifoParam+0xe8>
      break;
 80031b2:	bf00      	nop
 80031b4:	e006      	b.n	80031c4 <DMA_CheckFifoParam+0xe8>
      break;
 80031b6:	bf00      	nop
 80031b8:	e004      	b.n	80031c4 <DMA_CheckFifoParam+0xe8>
      break;
 80031ba:	bf00      	nop
 80031bc:	e002      	b.n	80031c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80031be:	bf00      	nop
 80031c0:	e000      	b.n	80031c4 <DMA_CheckFifoParam+0xe8>
      break;
 80031c2:	bf00      	nop
    }
  } 
  
  return status; 
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop

080031d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b089      	sub	sp, #36	@ 0x24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031de:	2300      	movs	r3, #0
 80031e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ea:	2300      	movs	r3, #0
 80031ec:	61fb      	str	r3, [r7, #28]
 80031ee:	e159      	b.n	80034a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031f0:	2201      	movs	r2, #1
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	4013      	ands	r3, r2
 8003202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	429a      	cmp	r2, r3
 800320a:	f040 8148 	bne.w	800349e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	2b01      	cmp	r3, #1
 8003218:	d005      	beq.n	8003226 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003222:	2b02      	cmp	r3, #2
 8003224:	d130      	bne.n	8003288 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	2203      	movs	r2, #3
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	43db      	mvns	r3, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4013      	ands	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4313      	orrs	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800325c:	2201      	movs	r2, #1
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	43db      	mvns	r3, r3
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4013      	ands	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	091b      	lsrs	r3, r3, #4
 8003272:	f003 0201 	and.w	r2, r3, #1
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4313      	orrs	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 0303 	and.w	r3, r3, #3
 8003290:	2b03      	cmp	r3, #3
 8003292:	d017      	beq.n	80032c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	2203      	movs	r2, #3
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	4013      	ands	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 0303 	and.w	r3, r3, #3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d123      	bne.n	8003318 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	08da      	lsrs	r2, r3, #3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3208      	adds	r2, #8
 80032d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	220f      	movs	r2, #15
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4013      	ands	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	691a      	ldr	r2, [r3, #16]
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4313      	orrs	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	08da      	lsrs	r2, r3, #3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3208      	adds	r2, #8
 8003312:	69b9      	ldr	r1, [r7, #24]
 8003314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	2203      	movs	r2, #3
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	43db      	mvns	r3, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4013      	ands	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f003 0203 	and.w	r2, r3, #3
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	4313      	orrs	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 80a2 	beq.w	800349e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	4b57      	ldr	r3, [pc, #348]	@ (80034bc <HAL_GPIO_Init+0x2e8>)
 8003360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003362:	4a56      	ldr	r2, [pc, #344]	@ (80034bc <HAL_GPIO_Init+0x2e8>)
 8003364:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003368:	6453      	str	r3, [r2, #68]	@ 0x44
 800336a:	4b54      	ldr	r3, [pc, #336]	@ (80034bc <HAL_GPIO_Init+0x2e8>)
 800336c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003376:	4a52      	ldr	r2, [pc, #328]	@ (80034c0 <HAL_GPIO_Init+0x2ec>)
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	089b      	lsrs	r3, r3, #2
 800337c:	3302      	adds	r3, #2
 800337e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	220f      	movs	r2, #15
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43db      	mvns	r3, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4013      	ands	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a49      	ldr	r2, [pc, #292]	@ (80034c4 <HAL_GPIO_Init+0x2f0>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d019      	beq.n	80033d6 <HAL_GPIO_Init+0x202>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a48      	ldr	r2, [pc, #288]	@ (80034c8 <HAL_GPIO_Init+0x2f4>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d013      	beq.n	80033d2 <HAL_GPIO_Init+0x1fe>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a47      	ldr	r2, [pc, #284]	@ (80034cc <HAL_GPIO_Init+0x2f8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d00d      	beq.n	80033ce <HAL_GPIO_Init+0x1fa>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a46      	ldr	r2, [pc, #280]	@ (80034d0 <HAL_GPIO_Init+0x2fc>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d007      	beq.n	80033ca <HAL_GPIO_Init+0x1f6>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a45      	ldr	r2, [pc, #276]	@ (80034d4 <HAL_GPIO_Init+0x300>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d101      	bne.n	80033c6 <HAL_GPIO_Init+0x1f2>
 80033c2:	2304      	movs	r3, #4
 80033c4:	e008      	b.n	80033d8 <HAL_GPIO_Init+0x204>
 80033c6:	2307      	movs	r3, #7
 80033c8:	e006      	b.n	80033d8 <HAL_GPIO_Init+0x204>
 80033ca:	2303      	movs	r3, #3
 80033cc:	e004      	b.n	80033d8 <HAL_GPIO_Init+0x204>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e002      	b.n	80033d8 <HAL_GPIO_Init+0x204>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <HAL_GPIO_Init+0x204>
 80033d6:	2300      	movs	r3, #0
 80033d8:	69fa      	ldr	r2, [r7, #28]
 80033da:	f002 0203 	and.w	r2, r2, #3
 80033de:	0092      	lsls	r2, r2, #2
 80033e0:	4093      	lsls	r3, r2
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033e8:	4935      	ldr	r1, [pc, #212]	@ (80034c0 <HAL_GPIO_Init+0x2ec>)
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	089b      	lsrs	r3, r3, #2
 80033ee:	3302      	adds	r3, #2
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033f6:	4b38      	ldr	r3, [pc, #224]	@ (80034d8 <HAL_GPIO_Init+0x304>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	43db      	mvns	r3, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4013      	ands	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800341a:	4a2f      	ldr	r2, [pc, #188]	@ (80034d8 <HAL_GPIO_Init+0x304>)
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003420:	4b2d      	ldr	r3, [pc, #180]	@ (80034d8 <HAL_GPIO_Init+0x304>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003444:	4a24      	ldr	r2, [pc, #144]	@ (80034d8 <HAL_GPIO_Init+0x304>)
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800344a:	4b23      	ldr	r3, [pc, #140]	@ (80034d8 <HAL_GPIO_Init+0x304>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	43db      	mvns	r3, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4013      	ands	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800346e:	4a1a      	ldr	r2, [pc, #104]	@ (80034d8 <HAL_GPIO_Init+0x304>)
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003474:	4b18      	ldr	r3, [pc, #96]	@ (80034d8 <HAL_GPIO_Init+0x304>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	43db      	mvns	r3, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4013      	ands	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003498:	4a0f      	ldr	r2, [pc, #60]	@ (80034d8 <HAL_GPIO_Init+0x304>)
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	3301      	adds	r3, #1
 80034a2:	61fb      	str	r3, [r7, #28]
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	2b0f      	cmp	r3, #15
 80034a8:	f67f aea2 	bls.w	80031f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034ac:	bf00      	nop
 80034ae:	bf00      	nop
 80034b0:	3724      	adds	r7, #36	@ 0x24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40023800 	.word	0x40023800
 80034c0:	40013800 	.word	0x40013800
 80034c4:	40020000 	.word	0x40020000
 80034c8:	40020400 	.word	0x40020400
 80034cc:	40020800 	.word	0x40020800
 80034d0:	40020c00 	.word	0x40020c00
 80034d4:	40021000 	.word	0x40021000
 80034d8:	40013c00 	.word	0x40013c00

080034dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e267      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d075      	beq.n	80035e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034fa:	4b88      	ldr	r3, [pc, #544]	@ (800371c <HAL_RCC_OscConfig+0x240>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 030c 	and.w	r3, r3, #12
 8003502:	2b04      	cmp	r3, #4
 8003504:	d00c      	beq.n	8003520 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003506:	4b85      	ldr	r3, [pc, #532]	@ (800371c <HAL_RCC_OscConfig+0x240>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800350e:	2b08      	cmp	r3, #8
 8003510:	d112      	bne.n	8003538 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003512:	4b82      	ldr	r3, [pc, #520]	@ (800371c <HAL_RCC_OscConfig+0x240>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800351a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800351e:	d10b      	bne.n	8003538 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003520:	4b7e      	ldr	r3, [pc, #504]	@ (800371c <HAL_RCC_OscConfig+0x240>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d05b      	beq.n	80035e4 <HAL_RCC_OscConfig+0x108>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d157      	bne.n	80035e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e242      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003540:	d106      	bne.n	8003550 <HAL_RCC_OscConfig+0x74>
 8003542:	4b76      	ldr	r3, [pc, #472]	@ (800371c <HAL_RCC_OscConfig+0x240>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a75      	ldr	r2, [pc, #468]	@ (800371c <HAL_RCC_OscConfig+0x240>)
 8003548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	e01d      	b.n	800358c <HAL_RCC_OscConfig+0xb0>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003558:	d10c      	bne.n	8003574 <HAL_RCC_OscConfig+0x98>
 800355a:	4b70      	ldr	r3, [pc, #448]	@ (800371c <HAL_RCC_OscConfig+0x240>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a6f      	ldr	r2, [pc, #444]	@ (800371c <HAL_RCC_OscConfig+0x240>)
 8003560:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	4b6d      	ldr	r3, [pc, #436]	@ (800371c <HAL_RCC_OscConfig+0x240>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a6c      	ldr	r2, [pc, #432]	@ (800371c <HAL_RCC_OscConfig+0x240>)
 800356c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	e00b      	b.n	800358c <HAL_RCC_OscConfig+0xb0>
 8003574:	4b69      	ldr	r3, [pc, #420]	@ (800371c <HAL_RCC_OscConfig+0x240>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a68      	ldr	r2, [pc, #416]	@ (800371c <HAL_RCC_OscConfig+0x240>)
 800357a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800357e:	6013      	str	r3, [r2, #0]
 8003580:	4b66      	ldr	r3, [pc, #408]	@ (800371c <HAL_RCC_OscConfig+0x240>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a65      	ldr	r2, [pc, #404]	@ (800371c <HAL_RCC_OscConfig+0x240>)
 8003586:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800358a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d013      	beq.n	80035bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003594:	f7ff f8fe 	bl	8002794 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800359c:	f7ff f8fa 	bl	8002794 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b64      	cmp	r3, #100	@ 0x64
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e207      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ae:	4b5b      	ldr	r3, [pc, #364]	@ (800371c <HAL_RCC_OscConfig+0x240>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0f0      	beq.n	800359c <HAL_RCC_OscConfig+0xc0>
 80035ba:	e014      	b.n	80035e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035bc:	f7ff f8ea 	bl	8002794 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c4:	f7ff f8e6 	bl	8002794 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b64      	cmp	r3, #100	@ 0x64
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e1f3      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d6:	4b51      	ldr	r3, [pc, #324]	@ (800371c <HAL_RCC_OscConfig+0x240>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f0      	bne.n	80035c4 <HAL_RCC_OscConfig+0xe8>
 80035e2:	e000      	b.n	80035e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d063      	beq.n	80036ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035f2:	4b4a      	ldr	r3, [pc, #296]	@ (800371c <HAL_RCC_OscConfig+0x240>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 030c 	and.w	r3, r3, #12
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00b      	beq.n	8003616 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035fe:	4b47      	ldr	r3, [pc, #284]	@ (800371c <HAL_RCC_OscConfig+0x240>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003606:	2b08      	cmp	r3, #8
 8003608:	d11c      	bne.n	8003644 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800360a:	4b44      	ldr	r3, [pc, #272]	@ (800371c <HAL_RCC_OscConfig+0x240>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d116      	bne.n	8003644 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003616:	4b41      	ldr	r3, [pc, #260]	@ (800371c <HAL_RCC_OscConfig+0x240>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d005      	beq.n	800362e <HAL_RCC_OscConfig+0x152>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d001      	beq.n	800362e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e1c7      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362e:	4b3b      	ldr	r3, [pc, #236]	@ (800371c <HAL_RCC_OscConfig+0x240>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	4937      	ldr	r1, [pc, #220]	@ (800371c <HAL_RCC_OscConfig+0x240>)
 800363e:	4313      	orrs	r3, r2
 8003640:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003642:	e03a      	b.n	80036ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d020      	beq.n	800368e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800364c:	4b34      	ldr	r3, [pc, #208]	@ (8003720 <HAL_RCC_OscConfig+0x244>)
 800364e:	2201      	movs	r2, #1
 8003650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003652:	f7ff f89f 	bl	8002794 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800365a:	f7ff f89b 	bl	8002794 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e1a8      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800366c:	4b2b      	ldr	r3, [pc, #172]	@ (800371c <HAL_RCC_OscConfig+0x240>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0f0      	beq.n	800365a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003678:	4b28      	ldr	r3, [pc, #160]	@ (800371c <HAL_RCC_OscConfig+0x240>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	4925      	ldr	r1, [pc, #148]	@ (800371c <HAL_RCC_OscConfig+0x240>)
 8003688:	4313      	orrs	r3, r2
 800368a:	600b      	str	r3, [r1, #0]
 800368c:	e015      	b.n	80036ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800368e:	4b24      	ldr	r3, [pc, #144]	@ (8003720 <HAL_RCC_OscConfig+0x244>)
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003694:	f7ff f87e 	bl	8002794 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800369c:	f7ff f87a 	bl	8002794 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e187      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ae:	4b1b      	ldr	r3, [pc, #108]	@ (800371c <HAL_RCC_OscConfig+0x240>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d036      	beq.n	8003734 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d016      	beq.n	80036fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ce:	4b15      	ldr	r3, [pc, #84]	@ (8003724 <HAL_RCC_OscConfig+0x248>)
 80036d0:	2201      	movs	r2, #1
 80036d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d4:	f7ff f85e 	bl	8002794 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036dc:	f7ff f85a 	bl	8002794 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e167      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ee:	4b0b      	ldr	r3, [pc, #44]	@ (800371c <HAL_RCC_OscConfig+0x240>)
 80036f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0f0      	beq.n	80036dc <HAL_RCC_OscConfig+0x200>
 80036fa:	e01b      	b.n	8003734 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036fc:	4b09      	ldr	r3, [pc, #36]	@ (8003724 <HAL_RCC_OscConfig+0x248>)
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003702:	f7ff f847 	bl	8002794 <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003708:	e00e      	b.n	8003728 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800370a:	f7ff f843 	bl	8002794 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d907      	bls.n	8003728 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e150      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
 800371c:	40023800 	.word	0x40023800
 8003720:	42470000 	.word	0x42470000
 8003724:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003728:	4b88      	ldr	r3, [pc, #544]	@ (800394c <HAL_RCC_OscConfig+0x470>)
 800372a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1ea      	bne.n	800370a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 8097 	beq.w	8003870 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003742:	2300      	movs	r3, #0
 8003744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003746:	4b81      	ldr	r3, [pc, #516]	@ (800394c <HAL_RCC_OscConfig+0x470>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10f      	bne.n	8003772 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003752:	2300      	movs	r3, #0
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	4b7d      	ldr	r3, [pc, #500]	@ (800394c <HAL_RCC_OscConfig+0x470>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375a:	4a7c      	ldr	r2, [pc, #496]	@ (800394c <HAL_RCC_OscConfig+0x470>)
 800375c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003760:	6413      	str	r3, [r2, #64]	@ 0x40
 8003762:	4b7a      	ldr	r3, [pc, #488]	@ (800394c <HAL_RCC_OscConfig+0x470>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800376a:	60bb      	str	r3, [r7, #8]
 800376c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800376e:	2301      	movs	r3, #1
 8003770:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003772:	4b77      	ldr	r3, [pc, #476]	@ (8003950 <HAL_RCC_OscConfig+0x474>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d118      	bne.n	80037b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800377e:	4b74      	ldr	r3, [pc, #464]	@ (8003950 <HAL_RCC_OscConfig+0x474>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a73      	ldr	r2, [pc, #460]	@ (8003950 <HAL_RCC_OscConfig+0x474>)
 8003784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800378a:	f7ff f803 	bl	8002794 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003792:	f7fe ffff 	bl	8002794 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e10c      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a4:	4b6a      	ldr	r3, [pc, #424]	@ (8003950 <HAL_RCC_OscConfig+0x474>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f0      	beq.n	8003792 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d106      	bne.n	80037c6 <HAL_RCC_OscConfig+0x2ea>
 80037b8:	4b64      	ldr	r3, [pc, #400]	@ (800394c <HAL_RCC_OscConfig+0x470>)
 80037ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037bc:	4a63      	ldr	r2, [pc, #396]	@ (800394c <HAL_RCC_OscConfig+0x470>)
 80037be:	f043 0301 	orr.w	r3, r3, #1
 80037c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80037c4:	e01c      	b.n	8003800 <HAL_RCC_OscConfig+0x324>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2b05      	cmp	r3, #5
 80037cc:	d10c      	bne.n	80037e8 <HAL_RCC_OscConfig+0x30c>
 80037ce:	4b5f      	ldr	r3, [pc, #380]	@ (800394c <HAL_RCC_OscConfig+0x470>)
 80037d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d2:	4a5e      	ldr	r2, [pc, #376]	@ (800394c <HAL_RCC_OscConfig+0x470>)
 80037d4:	f043 0304 	orr.w	r3, r3, #4
 80037d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80037da:	4b5c      	ldr	r3, [pc, #368]	@ (800394c <HAL_RCC_OscConfig+0x470>)
 80037dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037de:	4a5b      	ldr	r2, [pc, #364]	@ (800394c <HAL_RCC_OscConfig+0x470>)
 80037e0:	f043 0301 	orr.w	r3, r3, #1
 80037e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80037e6:	e00b      	b.n	8003800 <HAL_RCC_OscConfig+0x324>
 80037e8:	4b58      	ldr	r3, [pc, #352]	@ (800394c <HAL_RCC_OscConfig+0x470>)
 80037ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ec:	4a57      	ldr	r2, [pc, #348]	@ (800394c <HAL_RCC_OscConfig+0x470>)
 80037ee:	f023 0301 	bic.w	r3, r3, #1
 80037f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80037f4:	4b55      	ldr	r3, [pc, #340]	@ (800394c <HAL_RCC_OscConfig+0x470>)
 80037f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f8:	4a54      	ldr	r2, [pc, #336]	@ (800394c <HAL_RCC_OscConfig+0x470>)
 80037fa:	f023 0304 	bic.w	r3, r3, #4
 80037fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d015      	beq.n	8003834 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003808:	f7fe ffc4 	bl	8002794 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380e:	e00a      	b.n	8003826 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003810:	f7fe ffc0 	bl	8002794 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800381e:	4293      	cmp	r3, r2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e0cb      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003826:	4b49      	ldr	r3, [pc, #292]	@ (800394c <HAL_RCC_OscConfig+0x470>)
 8003828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0ee      	beq.n	8003810 <HAL_RCC_OscConfig+0x334>
 8003832:	e014      	b.n	800385e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003834:	f7fe ffae 	bl	8002794 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800383a:	e00a      	b.n	8003852 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800383c:	f7fe ffaa 	bl	8002794 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800384a:	4293      	cmp	r3, r2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e0b5      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003852:	4b3e      	ldr	r3, [pc, #248]	@ (800394c <HAL_RCC_OscConfig+0x470>)
 8003854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1ee      	bne.n	800383c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800385e:	7dfb      	ldrb	r3, [r7, #23]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d105      	bne.n	8003870 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003864:	4b39      	ldr	r3, [pc, #228]	@ (800394c <HAL_RCC_OscConfig+0x470>)
 8003866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003868:	4a38      	ldr	r2, [pc, #224]	@ (800394c <HAL_RCC_OscConfig+0x470>)
 800386a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800386e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 80a1 	beq.w	80039bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800387a:	4b34      	ldr	r3, [pc, #208]	@ (800394c <HAL_RCC_OscConfig+0x470>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 030c 	and.w	r3, r3, #12
 8003882:	2b08      	cmp	r3, #8
 8003884:	d05c      	beq.n	8003940 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	2b02      	cmp	r3, #2
 800388c:	d141      	bne.n	8003912 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800388e:	4b31      	ldr	r3, [pc, #196]	@ (8003954 <HAL_RCC_OscConfig+0x478>)
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003894:	f7fe ff7e 	bl	8002794 <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800389c:	f7fe ff7a 	bl	8002794 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e087      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ae:	4b27      	ldr	r3, [pc, #156]	@ (800394c <HAL_RCC_OscConfig+0x470>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1f0      	bne.n	800389c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69da      	ldr	r2, [r3, #28]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c8:	019b      	lsls	r3, r3, #6
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d0:	085b      	lsrs	r3, r3, #1
 80038d2:	3b01      	subs	r3, #1
 80038d4:	041b      	lsls	r3, r3, #16
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038dc:	061b      	lsls	r3, r3, #24
 80038de:	491b      	ldr	r1, [pc, #108]	@ (800394c <HAL_RCC_OscConfig+0x470>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003954 <HAL_RCC_OscConfig+0x478>)
 80038e6:	2201      	movs	r2, #1
 80038e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ea:	f7fe ff53 	bl	8002794 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f2:	f7fe ff4f 	bl	8002794 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e05c      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003904:	4b11      	ldr	r3, [pc, #68]	@ (800394c <HAL_RCC_OscConfig+0x470>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0f0      	beq.n	80038f2 <HAL_RCC_OscConfig+0x416>
 8003910:	e054      	b.n	80039bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003912:	4b10      	ldr	r3, [pc, #64]	@ (8003954 <HAL_RCC_OscConfig+0x478>)
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003918:	f7fe ff3c 	bl	8002794 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003920:	f7fe ff38 	bl	8002794 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e045      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003932:	4b06      	ldr	r3, [pc, #24]	@ (800394c <HAL_RCC_OscConfig+0x470>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x444>
 800393e:	e03d      	b.n	80039bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d107      	bne.n	8003958 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e038      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
 800394c:	40023800 	.word	0x40023800
 8003950:	40007000 	.word	0x40007000
 8003954:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003958:	4b1b      	ldr	r3, [pc, #108]	@ (80039c8 <HAL_RCC_OscConfig+0x4ec>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d028      	beq.n	80039b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003970:	429a      	cmp	r2, r3
 8003972:	d121      	bne.n	80039b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397e:	429a      	cmp	r2, r3
 8003980:	d11a      	bne.n	80039b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003988:	4013      	ands	r3, r2
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800398e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003990:	4293      	cmp	r3, r2
 8003992:	d111      	bne.n	80039b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800399e:	085b      	lsrs	r3, r3, #1
 80039a0:	3b01      	subs	r3, #1
 80039a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d107      	bne.n	80039b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d001      	beq.n	80039bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e000      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40023800 	.word	0x40023800

080039cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e0cc      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039e0:	4b68      	ldr	r3, [pc, #416]	@ (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d90c      	bls.n	8003a08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ee:	4b65      	ldr	r3, [pc, #404]	@ (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f6:	4b63      	ldr	r3, [pc, #396]	@ (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d001      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e0b8      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d020      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a20:	4b59      	ldr	r3, [pc, #356]	@ (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	4a58      	ldr	r2, [pc, #352]	@ (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a38:	4b53      	ldr	r3, [pc, #332]	@ (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	4a52      	ldr	r2, [pc, #328]	@ (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a44:	4b50      	ldr	r3, [pc, #320]	@ (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	494d      	ldr	r1, [pc, #308]	@ (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d044      	beq.n	8003aec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d107      	bne.n	8003a7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6a:	4b47      	ldr	r3, [pc, #284]	@ (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d119      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e07f      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d003      	beq.n	8003a8a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a86:	2b03      	cmp	r3, #3
 8003a88:	d107      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a8a:	4b3f      	ldr	r3, [pc, #252]	@ (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d109      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e06f      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a9a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e067      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aaa:	4b37      	ldr	r3, [pc, #220]	@ (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f023 0203 	bic.w	r2, r3, #3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	4934      	ldr	r1, [pc, #208]	@ (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003abc:	f7fe fe6a 	bl	8002794 <HAL_GetTick>
 8003ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac2:	e00a      	b.n	8003ada <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac4:	f7fe fe66 	bl	8002794 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e04f      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ada:	4b2b      	ldr	r3, [pc, #172]	@ (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 020c 	and.w	r2, r3, #12
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d1eb      	bne.n	8003ac4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003aec:	4b25      	ldr	r3, [pc, #148]	@ (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d20c      	bcs.n	8003b14 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003afa:	4b22      	ldr	r3, [pc, #136]	@ (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b02:	4b20      	ldr	r3, [pc, #128]	@ (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d001      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e032      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b20:	4b19      	ldr	r3, [pc, #100]	@ (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	4916      	ldr	r1, [pc, #88]	@ (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d009      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b3e:	4b12      	ldr	r3, [pc, #72]	@ (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	490e      	ldr	r1, [pc, #56]	@ (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b52:	f000 f821 	bl	8003b98 <HAL_RCC_GetSysClockFreq>
 8003b56:	4602      	mov	r2, r0
 8003b58:	4b0b      	ldr	r3, [pc, #44]	@ (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	091b      	lsrs	r3, r3, #4
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	490a      	ldr	r1, [pc, #40]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c0>)
 8003b64:	5ccb      	ldrb	r3, [r1, r3]
 8003b66:	fa22 f303 	lsr.w	r3, r2, r3
 8003b6a:	4a09      	ldr	r2, [pc, #36]	@ (8003b90 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b6e:	4b09      	ldr	r3, [pc, #36]	@ (8003b94 <HAL_RCC_ClockConfig+0x1c8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fe fdca 	bl	800270c <HAL_InitTick>

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40023c00 	.word	0x40023c00
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	0800567c 	.word	0x0800567c
 8003b90:	20000000 	.word	0x20000000
 8003b94:	20000004 	.word	0x20000004

08003b98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b9c:	b090      	sub	sp, #64	@ 0x40
 8003b9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bb0:	4b59      	ldr	r3, [pc, #356]	@ (8003d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 030c 	and.w	r3, r3, #12
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d00d      	beq.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x40>
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	f200 80a1 	bhi.w	8003d04 <HAL_RCC_GetSysClockFreq+0x16c>
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <HAL_RCC_GetSysClockFreq+0x34>
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d003      	beq.n	8003bd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bca:	e09b      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bcc:	4b53      	ldr	r3, [pc, #332]	@ (8003d1c <HAL_RCC_GetSysClockFreq+0x184>)
 8003bce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003bd0:	e09b      	b.n	8003d0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bd2:	4b53      	ldr	r3, [pc, #332]	@ (8003d20 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bd4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003bd6:	e098      	b.n	8003d0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bd8:	4b4f      	ldr	r3, [pc, #316]	@ (8003d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003be0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003be2:	4b4d      	ldr	r3, [pc, #308]	@ (8003d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d028      	beq.n	8003c40 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bee:	4b4a      	ldr	r3, [pc, #296]	@ (8003d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	099b      	lsrs	r3, r3, #6
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	623b      	str	r3, [r7, #32]
 8003bf8:	627a      	str	r2, [r7, #36]	@ 0x24
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c00:	2100      	movs	r1, #0
 8003c02:	4b47      	ldr	r3, [pc, #284]	@ (8003d20 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c04:	fb03 f201 	mul.w	r2, r3, r1
 8003c08:	2300      	movs	r3, #0
 8003c0a:	fb00 f303 	mul.w	r3, r0, r3
 8003c0e:	4413      	add	r3, r2
 8003c10:	4a43      	ldr	r2, [pc, #268]	@ (8003d20 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c12:	fba0 1202 	umull	r1, r2, r0, r2
 8003c16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c18:	460a      	mov	r2, r1
 8003c1a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003c1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c1e:	4413      	add	r3, r2
 8003c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c24:	2200      	movs	r2, #0
 8003c26:	61bb      	str	r3, [r7, #24]
 8003c28:	61fa      	str	r2, [r7, #28]
 8003c2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003c32:	f7fc fad9 	bl	80001e8 <__aeabi_uldivmod>
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c3e:	e053      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c40:	4b35      	ldr	r3, [pc, #212]	@ (8003d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	099b      	lsrs	r3, r3, #6
 8003c46:	2200      	movs	r2, #0
 8003c48:	613b      	str	r3, [r7, #16]
 8003c4a:	617a      	str	r2, [r7, #20]
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c52:	f04f 0b00 	mov.w	fp, #0
 8003c56:	4652      	mov	r2, sl
 8003c58:	465b      	mov	r3, fp
 8003c5a:	f04f 0000 	mov.w	r0, #0
 8003c5e:	f04f 0100 	mov.w	r1, #0
 8003c62:	0159      	lsls	r1, r3, #5
 8003c64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c68:	0150      	lsls	r0, r2, #5
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	ebb2 080a 	subs.w	r8, r2, sl
 8003c72:	eb63 090b 	sbc.w	r9, r3, fp
 8003c76:	f04f 0200 	mov.w	r2, #0
 8003c7a:	f04f 0300 	mov.w	r3, #0
 8003c7e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c82:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c86:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c8a:	ebb2 0408 	subs.w	r4, r2, r8
 8003c8e:	eb63 0509 	sbc.w	r5, r3, r9
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	f04f 0300 	mov.w	r3, #0
 8003c9a:	00eb      	lsls	r3, r5, #3
 8003c9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ca0:	00e2      	lsls	r2, r4, #3
 8003ca2:	4614      	mov	r4, r2
 8003ca4:	461d      	mov	r5, r3
 8003ca6:	eb14 030a 	adds.w	r3, r4, sl
 8003caa:	603b      	str	r3, [r7, #0]
 8003cac:	eb45 030b 	adc.w	r3, r5, fp
 8003cb0:	607b      	str	r3, [r7, #4]
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cbe:	4629      	mov	r1, r5
 8003cc0:	028b      	lsls	r3, r1, #10
 8003cc2:	4621      	mov	r1, r4
 8003cc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cc8:	4621      	mov	r1, r4
 8003cca:	028a      	lsls	r2, r1, #10
 8003ccc:	4610      	mov	r0, r2
 8003cce:	4619      	mov	r1, r3
 8003cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	60bb      	str	r3, [r7, #8]
 8003cd6:	60fa      	str	r2, [r7, #12]
 8003cd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cdc:	f7fc fa84 	bl	80001e8 <__aeabi_uldivmod>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8003d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	0c1b      	lsrs	r3, r3, #16
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003cf8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d00:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d02:	e002      	b.n	8003d0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d04:	4b05      	ldr	r3, [pc, #20]	@ (8003d1c <HAL_RCC_GetSysClockFreq+0x184>)
 8003d06:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3740      	adds	r7, #64	@ 0x40
 8003d10:	46bd      	mov	sp, r7
 8003d12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d16:	bf00      	nop
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	00f42400 	.word	0x00f42400
 8003d20:	017d7840 	.word	0x017d7840

08003d24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d28:	4b03      	ldr	r3, [pc, #12]	@ (8003d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	20000000 	.word	0x20000000

08003d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d40:	f7ff fff0 	bl	8003d24 <HAL_RCC_GetHCLKFreq>
 8003d44:	4602      	mov	r2, r0
 8003d46:	4b05      	ldr	r3, [pc, #20]	@ (8003d5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	0a9b      	lsrs	r3, r3, #10
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	4903      	ldr	r1, [pc, #12]	@ (8003d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d52:	5ccb      	ldrb	r3, [r1, r3]
 8003d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	0800568c 	.word	0x0800568c

08003d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d68:	f7ff ffdc 	bl	8003d24 <HAL_RCC_GetHCLKFreq>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	4b05      	ldr	r3, [pc, #20]	@ (8003d84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	0b5b      	lsrs	r3, r3, #13
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	4903      	ldr	r1, [pc, #12]	@ (8003d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d7a:	5ccb      	ldrb	r3, [r1, r3]
 8003d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40023800 	.word	0x40023800
 8003d88:	0800568c 	.word	0x0800568c

08003d8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e042      	b.n	8003e24 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d106      	bne.n	8003db8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7fe fba8 	bl	8002508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2224      	movs	r2, #36	@ 0x24
 8003dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68da      	ldr	r2, [r3, #12]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 ff37 	bl	8004c44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	691a      	ldr	r2, [r3, #16]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003de4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695a      	ldr	r2, [r3, #20]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003df4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68da      	ldr	r2, [r3, #12]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08c      	sub	sp, #48	@ 0x30
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	4613      	mov	r3, r2
 8003e38:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b20      	cmp	r3, #32
 8003e44:	d156      	bne.n	8003ef4 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <HAL_UART_Transmit_DMA+0x26>
 8003e4c:	88fb      	ldrh	r3, [r7, #6]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e04f      	b.n	8003ef6 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	88fa      	ldrh	r2, [r7, #6]
 8003e60:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	88fa      	ldrh	r2, [r7, #6]
 8003e66:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2221      	movs	r2, #33	@ 0x21
 8003e72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e7a:	4a21      	ldr	r2, [pc, #132]	@ (8003f00 <HAL_UART_Transmit_DMA+0xd4>)
 8003e7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e82:	4a20      	ldr	r2, [pc, #128]	@ (8003f04 <HAL_UART_Transmit_DMA+0xd8>)
 8003e84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e8a:	4a1f      	ldr	r2, [pc, #124]	@ (8003f08 <HAL_UART_Transmit_DMA+0xdc>)
 8003e8c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e92:	2200      	movs	r2, #0
 8003e94:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003e96:	f107 0308 	add.w	r3, r7, #8
 8003e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ea2:	6819      	ldr	r1, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	461a      	mov	r2, r3
 8003eac:	88fb      	ldrh	r3, [r7, #6]
 8003eae:	f7fe fe3d 	bl	8002b2c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003eba:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	3314      	adds	r3, #20
 8003ec2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	e853 3f00 	ldrex	r3, [r3]
 8003eca:	617b      	str	r3, [r7, #20]
   return(result);
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3314      	adds	r3, #20
 8003eda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003edc:	627a      	str	r2, [r7, #36]	@ 0x24
 8003ede:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee0:	6a39      	ldr	r1, [r7, #32]
 8003ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ee4:	e841 2300 	strex	r3, r2, [r1]
 8003ee8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1e5      	bne.n	8003ebc <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	e000      	b.n	8003ef6 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003ef4:	2302      	movs	r3, #2
  }
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3730      	adds	r7, #48	@ 0x30
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	080044d1 	.word	0x080044d1
 8003f04:	0800456b 	.word	0x0800456b
 8003f08:	080046ef 	.word	0x080046ef

08003f0c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	4613      	mov	r3, r2
 8003f18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b20      	cmp	r3, #32
 8003f24:	d112      	bne.n	8003f4c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d002      	beq.n	8003f32 <HAL_UART_Receive_DMA+0x26>
 8003f2c:	88fb      	ldrh	r3, [r7, #6]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e00b      	b.n	8003f4e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003f3c:	88fb      	ldrh	r3, [r7, #6]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	68b9      	ldr	r1, [r7, #8]
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 fc1e 	bl	8004784 <UART_Start_Receive_DMA>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	e000      	b.n	8003f4e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003f4c:	2302      	movs	r3, #2
  }
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
	...

08003f58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b0ba      	sub	sp, #232	@ 0xe8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003f96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10f      	bne.n	8003fbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fa2:	f003 0320 	and.w	r3, r3, #32
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d009      	beq.n	8003fbe <HAL_UART_IRQHandler+0x66>
 8003faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fae:	f003 0320 	and.w	r3, r3, #32
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 fd85 	bl	8004ac6 <UART_Receive_IT>
      return;
 8003fbc:	e25b      	b.n	8004476 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003fbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 80de 	beq.w	8004184 <HAL_UART_IRQHandler+0x22c>
 8003fc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d106      	bne.n	8003fe2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fd8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 80d1 	beq.w	8004184 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00b      	beq.n	8004006 <HAL_UART_IRQHandler+0xae>
 8003fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d005      	beq.n	8004006 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffe:	f043 0201 	orr.w	r2, r3, #1
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800400a:	f003 0304 	and.w	r3, r3, #4
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00b      	beq.n	800402a <HAL_UART_IRQHandler+0xd2>
 8004012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d005      	beq.n	800402a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004022:	f043 0202 	orr.w	r2, r3, #2
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800402a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00b      	beq.n	800404e <HAL_UART_IRQHandler+0xf6>
 8004036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d005      	beq.n	800404e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004046:	f043 0204 	orr.w	r2, r3, #4
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800404e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b00      	cmp	r3, #0
 8004058:	d011      	beq.n	800407e <HAL_UART_IRQHandler+0x126>
 800405a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800405e:	f003 0320 	and.w	r3, r3, #32
 8004062:	2b00      	cmp	r3, #0
 8004064:	d105      	bne.n	8004072 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d005      	beq.n	800407e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004076:	f043 0208 	orr.w	r2, r3, #8
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 81f2 	beq.w	800446c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800408c:	f003 0320 	and.w	r3, r3, #32
 8004090:	2b00      	cmp	r3, #0
 8004092:	d008      	beq.n	80040a6 <HAL_UART_IRQHandler+0x14e>
 8004094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004098:	f003 0320 	and.w	r3, r3, #32
 800409c:	2b00      	cmp	r3, #0
 800409e:	d002      	beq.n	80040a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 fd10 	bl	8004ac6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b0:	2b40      	cmp	r3, #64	@ 0x40
 80040b2:	bf0c      	ite	eq
 80040b4:	2301      	moveq	r3, #1
 80040b6:	2300      	movne	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d103      	bne.n	80040d2 <HAL_UART_IRQHandler+0x17a>
 80040ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d04f      	beq.n	8004172 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 fc18 	bl	8004908 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e2:	2b40      	cmp	r3, #64	@ 0x40
 80040e4:	d141      	bne.n	800416a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	3314      	adds	r3, #20
 80040ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040f4:	e853 3f00 	ldrex	r3, [r3]
 80040f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80040fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004100:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004104:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	3314      	adds	r3, #20
 800410e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004112:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004116:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800411e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004122:	e841 2300 	strex	r3, r2, [r1]
 8004126:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800412a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1d9      	bne.n	80040e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004136:	2b00      	cmp	r3, #0
 8004138:	d013      	beq.n	8004162 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800413e:	4a7e      	ldr	r2, [pc, #504]	@ (8004338 <HAL_UART_IRQHandler+0x3e0>)
 8004140:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004146:	4618      	mov	r0, r3
 8004148:	f7fe fdb8 	bl	8002cbc <HAL_DMA_Abort_IT>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d016      	beq.n	8004180 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004156:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800415c:	4610      	mov	r0, r2
 800415e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004160:	e00e      	b.n	8004180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f99e 	bl	80044a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004168:	e00a      	b.n	8004180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f99a 	bl	80044a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004170:	e006      	b.n	8004180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f996 	bl	80044a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800417e:	e175      	b.n	800446c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004180:	bf00      	nop
    return;
 8004182:	e173      	b.n	800446c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004188:	2b01      	cmp	r3, #1
 800418a:	f040 814f 	bne.w	800442c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800418e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004192:	f003 0310 	and.w	r3, r3, #16
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 8148 	beq.w	800442c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800419c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041a0:	f003 0310 	and.w	r3, r3, #16
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 8141 	beq.w	800442c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041aa:	2300      	movs	r3, #0
 80041ac:	60bb      	str	r3, [r7, #8]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	60bb      	str	r3, [r7, #8]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	60bb      	str	r3, [r7, #8]
 80041be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ca:	2b40      	cmp	r3, #64	@ 0x40
 80041cc:	f040 80b6 	bne.w	800433c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 8145 	beq.w	8004470 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041ee:	429a      	cmp	r2, r3
 80041f0:	f080 813e 	bcs.w	8004470 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004206:	f000 8088 	beq.w	800431a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	330c      	adds	r3, #12
 8004210:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004214:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004218:	e853 3f00 	ldrex	r3, [r3]
 800421c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004220:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004224:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004228:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	330c      	adds	r3, #12
 8004232:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004236:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800423a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004242:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004246:	e841 2300 	strex	r3, r2, [r1]
 800424a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800424e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1d9      	bne.n	800420a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	3314      	adds	r3, #20
 800425c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004260:	e853 3f00 	ldrex	r3, [r3]
 8004264:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004266:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004268:	f023 0301 	bic.w	r3, r3, #1
 800426c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	3314      	adds	r3, #20
 8004276:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800427a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800427e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004280:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004282:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004286:	e841 2300 	strex	r3, r2, [r1]
 800428a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800428c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1e1      	bne.n	8004256 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	3314      	adds	r3, #20
 8004298:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800429c:	e853 3f00 	ldrex	r3, [r3]
 80042a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80042a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3314      	adds	r3, #20
 80042b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80042b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80042b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80042bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80042be:	e841 2300 	strex	r3, r2, [r1]
 80042c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80042c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1e3      	bne.n	8004292 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	330c      	adds	r3, #12
 80042de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042e2:	e853 3f00 	ldrex	r3, [r3]
 80042e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80042e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042ea:	f023 0310 	bic.w	r3, r3, #16
 80042ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	330c      	adds	r3, #12
 80042f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80042fc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80042fe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004300:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004302:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004304:	e841 2300 	strex	r3, r2, [r1]
 8004308:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800430a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1e3      	bne.n	80042d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004314:	4618      	mov	r0, r3
 8004316:	f7fe fc61 	bl	8002bdc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2202      	movs	r2, #2
 800431e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004328:	b29b      	uxth	r3, r3
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	b29b      	uxth	r3, r3
 800432e:	4619      	mov	r1, r3
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f8c1 	bl	80044b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004336:	e09b      	b.n	8004470 <HAL_UART_IRQHandler+0x518>
 8004338:	080049cf 	.word	0x080049cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004344:	b29b      	uxth	r3, r3
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004350:	b29b      	uxth	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 808e 	beq.w	8004474 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004358:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 8089 	beq.w	8004474 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	330c      	adds	r3, #12
 8004368:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800436c:	e853 3f00 	ldrex	r3, [r3]
 8004370:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004374:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004378:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	330c      	adds	r3, #12
 8004382:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004386:	647a      	str	r2, [r7, #68]	@ 0x44
 8004388:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800438c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800438e:	e841 2300 	strex	r3, r2, [r1]
 8004392:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004394:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1e3      	bne.n	8004362 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	3314      	adds	r3, #20
 80043a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a4:	e853 3f00 	ldrex	r3, [r3]
 80043a8:	623b      	str	r3, [r7, #32]
   return(result);
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	f023 0301 	bic.w	r3, r3, #1
 80043b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3314      	adds	r3, #20
 80043ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80043be:	633a      	str	r2, [r7, #48]	@ 0x30
 80043c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043c6:	e841 2300 	strex	r3, r2, [r1]
 80043ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1e3      	bne.n	800439a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	330c      	adds	r3, #12
 80043e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	e853 3f00 	ldrex	r3, [r3]
 80043ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0310 	bic.w	r3, r3, #16
 80043f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	330c      	adds	r3, #12
 8004400:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004404:	61fa      	str	r2, [r7, #28]
 8004406:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004408:	69b9      	ldr	r1, [r7, #24]
 800440a:	69fa      	ldr	r2, [r7, #28]
 800440c:	e841 2300 	strex	r3, r2, [r1]
 8004410:	617b      	str	r3, [r7, #20]
   return(result);
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1e3      	bne.n	80043e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2202      	movs	r2, #2
 800441c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800441e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004422:	4619      	mov	r1, r3
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f847 	bl	80044b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800442a:	e023      	b.n	8004474 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800442c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004430:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004434:	2b00      	cmp	r3, #0
 8004436:	d009      	beq.n	800444c <HAL_UART_IRQHandler+0x4f4>
 8004438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800443c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 fad6 	bl	80049f6 <UART_Transmit_IT>
    return;
 800444a:	e014      	b.n	8004476 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800444c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00e      	beq.n	8004476 <HAL_UART_IRQHandler+0x51e>
 8004458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800445c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004460:	2b00      	cmp	r3, #0
 8004462:	d008      	beq.n	8004476 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 fb16 	bl	8004a96 <UART_EndTransmit_IT>
    return;
 800446a:	e004      	b.n	8004476 <HAL_UART_IRQHandler+0x51e>
    return;
 800446c:	bf00      	nop
 800446e:	e002      	b.n	8004476 <HAL_UART_IRQHandler+0x51e>
      return;
 8004470:	bf00      	nop
 8004472:	e000      	b.n	8004476 <HAL_UART_IRQHandler+0x51e>
      return;
 8004474:	bf00      	nop
  }
}
 8004476:	37e8      	adds	r7, #232	@ 0xe8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b090      	sub	sp, #64	@ 0x40
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d137      	bne.n	800455c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80044ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044ee:	2200      	movs	r2, #0
 80044f0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80044f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3314      	adds	r3, #20
 80044f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fc:	e853 3f00 	ldrex	r3, [r3]
 8004500:	623b      	str	r3, [r7, #32]
   return(result);
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004508:	63bb      	str	r3, [r7, #56]	@ 0x38
 800450a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3314      	adds	r3, #20
 8004510:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004512:	633a      	str	r2, [r7, #48]	@ 0x30
 8004514:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004516:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004518:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800451a:	e841 2300 	strex	r3, r2, [r1]
 800451e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1e5      	bne.n	80044f2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	330c      	adds	r3, #12
 800452c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	e853 3f00 	ldrex	r3, [r3]
 8004534:	60fb      	str	r3, [r7, #12]
   return(result);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800453c:	637b      	str	r3, [r7, #52]	@ 0x34
 800453e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	330c      	adds	r3, #12
 8004544:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004546:	61fa      	str	r2, [r7, #28]
 8004548:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454a:	69b9      	ldr	r1, [r7, #24]
 800454c:	69fa      	ldr	r2, [r7, #28]
 800454e:	e841 2300 	strex	r3, r2, [r1]
 8004552:	617b      	str	r3, [r7, #20]
   return(result);
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1e5      	bne.n	8004526 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800455a:	e002      	b.n	8004562 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800455c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800455e:	f7fd f99b 	bl	8001898 <HAL_UART_TxCpltCallback>
}
 8004562:	bf00      	nop
 8004564:	3740      	adds	r7, #64	@ 0x40
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b084      	sub	sp, #16
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004576:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f7ff ff7f 	bl	800447c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800457e:	bf00      	nop
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b09c      	sub	sp, #112	@ 0x70
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004592:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d172      	bne.n	8004688 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80045a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045a4:	2200      	movs	r2, #0
 80045a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	330c      	adds	r3, #12
 80045ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045b2:	e853 3f00 	ldrex	r3, [r3]
 80045b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80045b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045be:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	330c      	adds	r3, #12
 80045c6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80045c8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80045ca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80045ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045d0:	e841 2300 	strex	r3, r2, [r1]
 80045d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80045d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1e5      	bne.n	80045a8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3314      	adds	r3, #20
 80045e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045e6:	e853 3f00 	ldrex	r3, [r3]
 80045ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ee:	f023 0301 	bic.w	r3, r3, #1
 80045f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80045f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3314      	adds	r3, #20
 80045fa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80045fc:	647a      	str	r2, [r7, #68]	@ 0x44
 80045fe:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004600:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004602:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004604:	e841 2300 	strex	r3, r2, [r1]
 8004608:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800460a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1e5      	bne.n	80045dc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004610:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3314      	adds	r3, #20
 8004616:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461a:	e853 3f00 	ldrex	r3, [r3]
 800461e:	623b      	str	r3, [r7, #32]
   return(result);
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004626:	663b      	str	r3, [r7, #96]	@ 0x60
 8004628:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	3314      	adds	r3, #20
 800462e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004630:	633a      	str	r2, [r7, #48]	@ 0x30
 8004632:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004634:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004636:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004638:	e841 2300 	strex	r3, r2, [r1]
 800463c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800463e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1e5      	bne.n	8004610 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004644:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004646:	2220      	movs	r2, #32
 8004648:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800464c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800464e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004650:	2b01      	cmp	r3, #1
 8004652:	d119      	bne.n	8004688 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004654:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	330c      	adds	r3, #12
 800465a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	e853 3f00 	ldrex	r3, [r3]
 8004662:	60fb      	str	r3, [r7, #12]
   return(result);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f023 0310 	bic.w	r3, r3, #16
 800466a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800466c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	330c      	adds	r3, #12
 8004672:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004674:	61fa      	str	r2, [r7, #28]
 8004676:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004678:	69b9      	ldr	r1, [r7, #24]
 800467a:	69fa      	ldr	r2, [r7, #28]
 800467c:	e841 2300 	strex	r3, r2, [r1]
 8004680:	617b      	str	r3, [r7, #20]
   return(result);
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1e5      	bne.n	8004654 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004688:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800468a:	2200      	movs	r2, #0
 800468c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800468e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004692:	2b01      	cmp	r3, #1
 8004694:	d106      	bne.n	80046a4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004696:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004698:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800469a:	4619      	mov	r1, r3
 800469c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800469e:	f7ff ff0b 	bl	80044b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80046a2:	e002      	b.n	80046aa <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80046a4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80046a6:	f7fd f90f 	bl	80018c8 <HAL_UART_RxCpltCallback>
}
 80046aa:	bf00      	nop
 80046ac:	3770      	adds	r7, #112	@ 0x70
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b084      	sub	sp, #16
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046be:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2201      	movs	r2, #1
 80046c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d108      	bne.n	80046e0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80046d2:	085b      	lsrs	r3, r3, #1
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	4619      	mov	r1, r3
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f7ff feed 	bl	80044b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80046de:	e002      	b.n	80046e6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f7ff fed5 	bl	8004490 <HAL_UART_RxHalfCpltCallback>
}
 80046e6:	bf00      	nop
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b084      	sub	sp, #16
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046fe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800470a:	2b80      	cmp	r3, #128	@ 0x80
 800470c:	bf0c      	ite	eq
 800470e:	2301      	moveq	r3, #1
 8004710:	2300      	movne	r3, #0
 8004712:	b2db      	uxtb	r3, r3
 8004714:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b21      	cmp	r3, #33	@ 0x21
 8004720:	d108      	bne.n	8004734 <UART_DMAError+0x46>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d005      	beq.n	8004734 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	2200      	movs	r2, #0
 800472c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800472e:	68b8      	ldr	r0, [r7, #8]
 8004730:	f000 f8c2 	bl	80048b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800473e:	2b40      	cmp	r3, #64	@ 0x40
 8004740:	bf0c      	ite	eq
 8004742:	2301      	moveq	r3, #1
 8004744:	2300      	movne	r3, #0
 8004746:	b2db      	uxtb	r3, r3
 8004748:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b22      	cmp	r3, #34	@ 0x22
 8004754:	d108      	bne.n	8004768 <UART_DMAError+0x7a>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d005      	beq.n	8004768 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2200      	movs	r2, #0
 8004760:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004762:	68b8      	ldr	r0, [r7, #8]
 8004764:	f000 f8d0 	bl	8004908 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800476c:	f043 0210 	orr.w	r2, r3, #16
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004774:	68b8      	ldr	r0, [r7, #8]
 8004776:	f7ff fe95 	bl	80044a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800477a:	bf00      	nop
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
	...

08004784 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b098      	sub	sp, #96	@ 0x60
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	4613      	mov	r3, r2
 8004790:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	88fa      	ldrh	r2, [r7, #6]
 800479c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2222      	movs	r2, #34	@ 0x22
 80047a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b0:	4a3e      	ldr	r2, [pc, #248]	@ (80048ac <UART_Start_Receive_DMA+0x128>)
 80047b2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b8:	4a3d      	ldr	r2, [pc, #244]	@ (80048b0 <UART_Start_Receive_DMA+0x12c>)
 80047ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c0:	4a3c      	ldr	r2, [pc, #240]	@ (80048b4 <UART_Start_Receive_DMA+0x130>)
 80047c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c8:	2200      	movs	r2, #0
 80047ca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80047cc:	f107 0308 	add.w	r3, r7, #8
 80047d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	3304      	adds	r3, #4
 80047dc:	4619      	mov	r1, r3
 80047de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	88fb      	ldrh	r3, [r7, #6]
 80047e4:	f7fe f9a2 	bl	8002b2c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80047e8:	2300      	movs	r3, #0
 80047ea:	613b      	str	r3, [r7, #16]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	613b      	str	r3, [r7, #16]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	613b      	str	r3, [r7, #16]
 80047fc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d019      	beq.n	800483a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	330c      	adds	r3, #12
 800480c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004810:	e853 3f00 	ldrex	r3, [r3]
 8004814:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004818:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800481c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	330c      	adds	r3, #12
 8004824:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004826:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004828:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800482c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800482e:	e841 2300 	strex	r3, r2, [r1]
 8004832:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1e5      	bne.n	8004806 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3314      	adds	r3, #20
 8004840:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004844:	e853 3f00 	ldrex	r3, [r3]
 8004848:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800484a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800484c:	f043 0301 	orr.w	r3, r3, #1
 8004850:	657b      	str	r3, [r7, #84]	@ 0x54
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	3314      	adds	r3, #20
 8004858:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800485a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800485c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004860:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004862:	e841 2300 	strex	r3, r2, [r1]
 8004866:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1e5      	bne.n	800483a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3314      	adds	r3, #20
 8004874:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	e853 3f00 	ldrex	r3, [r3]
 800487c:	617b      	str	r3, [r7, #20]
   return(result);
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004884:	653b      	str	r3, [r7, #80]	@ 0x50
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	3314      	adds	r3, #20
 800488c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800488e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004890:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004892:	6a39      	ldr	r1, [r7, #32]
 8004894:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004896:	e841 2300 	strex	r3, r2, [r1]
 800489a:	61fb      	str	r3, [r7, #28]
   return(result);
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1e5      	bne.n	800486e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3760      	adds	r7, #96	@ 0x60
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	08004587 	.word	0x08004587
 80048b0:	080046b3 	.word	0x080046b3
 80048b4:	080046ef 	.word	0x080046ef

080048b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b089      	sub	sp, #36	@ 0x24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	330c      	adds	r3, #12
 80048c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	e853 3f00 	ldrex	r3, [r3]
 80048ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80048d6:	61fb      	str	r3, [r7, #28]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	330c      	adds	r3, #12
 80048de:	69fa      	ldr	r2, [r7, #28]
 80048e0:	61ba      	str	r2, [r7, #24]
 80048e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e4:	6979      	ldr	r1, [r7, #20]
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	e841 2300 	strex	r3, r2, [r1]
 80048ec:	613b      	str	r3, [r7, #16]
   return(result);
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1e5      	bne.n	80048c0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2220      	movs	r2, #32
 80048f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80048fc:	bf00      	nop
 80048fe:	3724      	adds	r7, #36	@ 0x24
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004908:	b480      	push	{r7}
 800490a:	b095      	sub	sp, #84	@ 0x54
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	330c      	adds	r3, #12
 8004916:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800491a:	e853 3f00 	ldrex	r3, [r3]
 800491e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004922:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004926:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	330c      	adds	r3, #12
 800492e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004930:	643a      	str	r2, [r7, #64]	@ 0x40
 8004932:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004934:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004936:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004938:	e841 2300 	strex	r3, r2, [r1]
 800493c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800493e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1e5      	bne.n	8004910 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3314      	adds	r3, #20
 800494a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	e853 3f00 	ldrex	r3, [r3]
 8004952:	61fb      	str	r3, [r7, #28]
   return(result);
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	f023 0301 	bic.w	r3, r3, #1
 800495a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3314      	adds	r3, #20
 8004962:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004964:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004966:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004968:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800496a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800496c:	e841 2300 	strex	r3, r2, [r1]
 8004970:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1e5      	bne.n	8004944 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497c:	2b01      	cmp	r3, #1
 800497e:	d119      	bne.n	80049b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	330c      	adds	r3, #12
 8004986:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	e853 3f00 	ldrex	r3, [r3]
 800498e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	f023 0310 	bic.w	r3, r3, #16
 8004996:	647b      	str	r3, [r7, #68]	@ 0x44
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	330c      	adds	r3, #12
 800499e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049a0:	61ba      	str	r2, [r7, #24]
 80049a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a4:	6979      	ldr	r1, [r7, #20]
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	e841 2300 	strex	r3, r2, [r1]
 80049ac:	613b      	str	r3, [r7, #16]
   return(result);
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1e5      	bne.n	8004980 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2220      	movs	r2, #32
 80049b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80049c2:	bf00      	nop
 80049c4:	3754      	adds	r7, #84	@ 0x54
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b084      	sub	sp, #16
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f7ff fd5b 	bl	80044a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049ee:	bf00      	nop
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b085      	sub	sp, #20
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b21      	cmp	r3, #33	@ 0x21
 8004a08:	d13e      	bne.n	8004a88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a12:	d114      	bne.n	8004a3e <UART_Transmit_IT+0x48>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d110      	bne.n	8004a3e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	461a      	mov	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	1c9a      	adds	r2, r3, #2
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	621a      	str	r2, [r3, #32]
 8004a3c:	e008      	b.n	8004a50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	1c59      	adds	r1, r3, #1
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6211      	str	r1, [r2, #32]
 8004a48:	781a      	ldrb	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	3b01      	subs	r3, #1
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10f      	bne.n	8004a84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68da      	ldr	r2, [r3, #12]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	e000      	b.n	8004a8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a88:	2302      	movs	r3, #2
  }
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b082      	sub	sp, #8
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68da      	ldr	r2, [r3, #12]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004aac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7fc feee 	bl	8001898 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b08c      	sub	sp, #48	@ 0x30
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b22      	cmp	r3, #34	@ 0x22
 8004ad8:	f040 80ae 	bne.w	8004c38 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ae4:	d117      	bne.n	8004b16 <UART_Receive_IT+0x50>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d113      	bne.n	8004b16 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004aee:	2300      	movs	r3, #0
 8004af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0e:	1c9a      	adds	r2, r3, #2
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b14:	e026      	b.n	8004b64 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b28:	d007      	beq.n	8004b3a <UART_Receive_IT+0x74>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10a      	bne.n	8004b48 <UART_Receive_IT+0x82>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d106      	bne.n	8004b48 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b44:	701a      	strb	r2, [r3, #0]
 8004b46:	e008      	b.n	8004b5a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b54:	b2da      	uxtb	r2, r3
 8004b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b58:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b5e:	1c5a      	adds	r2, r3, #1
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	4619      	mov	r1, r3
 8004b72:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d15d      	bne.n	8004c34 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0220 	bic.w	r2, r2, #32
 8004b86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68da      	ldr	r2, [r3, #12]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	695a      	ldr	r2, [r3, #20]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0201 	bic.w	r2, r2, #1
 8004ba6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2220      	movs	r2, #32
 8004bac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d135      	bne.n	8004c2a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	330c      	adds	r3, #12
 8004bca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	e853 3f00 	ldrex	r3, [r3]
 8004bd2:	613b      	str	r3, [r7, #16]
   return(result);
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	f023 0310 	bic.w	r3, r3, #16
 8004bda:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	330c      	adds	r3, #12
 8004be2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004be4:	623a      	str	r2, [r7, #32]
 8004be6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be8:	69f9      	ldr	r1, [r7, #28]
 8004bea:	6a3a      	ldr	r2, [r7, #32]
 8004bec:	e841 2300 	strex	r3, r2, [r1]
 8004bf0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1e5      	bne.n	8004bc4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0310 	and.w	r3, r3, #16
 8004c02:	2b10      	cmp	r3, #16
 8004c04:	d10a      	bne.n	8004c1c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c06:	2300      	movs	r3, #0
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c20:	4619      	mov	r1, r3
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7ff fc48 	bl	80044b8 <HAL_UARTEx_RxEventCallback>
 8004c28:	e002      	b.n	8004c30 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7fc fe4c 	bl	80018c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c30:	2300      	movs	r3, #0
 8004c32:	e002      	b.n	8004c3a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004c34:	2300      	movs	r3, #0
 8004c36:	e000      	b.n	8004c3a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004c38:	2302      	movs	r3, #2
  }
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3730      	adds	r7, #48	@ 0x30
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
	...

08004c44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c48:	b0c0      	sub	sp, #256	@ 0x100
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c60:	68d9      	ldr	r1, [r3, #12]
 8004c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	ea40 0301 	orr.w	r3, r0, r1
 8004c6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c72:	689a      	ldr	r2, [r3, #8]
 8004c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	431a      	orrs	r2, r3
 8004c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004c9c:	f021 010c 	bic.w	r1, r1, #12
 8004ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004caa:	430b      	orrs	r3, r1
 8004cac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cbe:	6999      	ldr	r1, [r3, #24]
 8004cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	ea40 0301 	orr.w	r3, r0, r1
 8004cca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	4b8f      	ldr	r3, [pc, #572]	@ (8004f10 <UART_SetConfig+0x2cc>)
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d005      	beq.n	8004ce4 <UART_SetConfig+0xa0>
 8004cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	4b8d      	ldr	r3, [pc, #564]	@ (8004f14 <UART_SetConfig+0x2d0>)
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d104      	bne.n	8004cee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ce4:	f7ff f83e 	bl	8003d64 <HAL_RCC_GetPCLK2Freq>
 8004ce8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004cec:	e003      	b.n	8004cf6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cee:	f7ff f825 	bl	8003d3c <HAL_RCC_GetPCLK1Freq>
 8004cf2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cfa:	69db      	ldr	r3, [r3, #28]
 8004cfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d00:	f040 810c 	bne.w	8004f1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004d12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004d16:	4622      	mov	r2, r4
 8004d18:	462b      	mov	r3, r5
 8004d1a:	1891      	adds	r1, r2, r2
 8004d1c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004d1e:	415b      	adcs	r3, r3
 8004d20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d26:	4621      	mov	r1, r4
 8004d28:	eb12 0801 	adds.w	r8, r2, r1
 8004d2c:	4629      	mov	r1, r5
 8004d2e:	eb43 0901 	adc.w	r9, r3, r1
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	f04f 0300 	mov.w	r3, #0
 8004d3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d46:	4690      	mov	r8, r2
 8004d48:	4699      	mov	r9, r3
 8004d4a:	4623      	mov	r3, r4
 8004d4c:	eb18 0303 	adds.w	r3, r8, r3
 8004d50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d54:	462b      	mov	r3, r5
 8004d56:	eb49 0303 	adc.w	r3, r9, r3
 8004d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d6a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004d6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004d72:	460b      	mov	r3, r1
 8004d74:	18db      	adds	r3, r3, r3
 8004d76:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d78:	4613      	mov	r3, r2
 8004d7a:	eb42 0303 	adc.w	r3, r2, r3
 8004d7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004d84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004d88:	f7fb fa2e 	bl	80001e8 <__aeabi_uldivmod>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	4b61      	ldr	r3, [pc, #388]	@ (8004f18 <UART_SetConfig+0x2d4>)
 8004d92:	fba3 2302 	umull	r2, r3, r3, r2
 8004d96:	095b      	lsrs	r3, r3, #5
 8004d98:	011c      	lsls	r4, r3, #4
 8004d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004da4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004da8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004dac:	4642      	mov	r2, r8
 8004dae:	464b      	mov	r3, r9
 8004db0:	1891      	adds	r1, r2, r2
 8004db2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004db4:	415b      	adcs	r3, r3
 8004db6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004db8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004dbc:	4641      	mov	r1, r8
 8004dbe:	eb12 0a01 	adds.w	sl, r2, r1
 8004dc2:	4649      	mov	r1, r9
 8004dc4:	eb43 0b01 	adc.w	fp, r3, r1
 8004dc8:	f04f 0200 	mov.w	r2, #0
 8004dcc:	f04f 0300 	mov.w	r3, #0
 8004dd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004dd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004dd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ddc:	4692      	mov	sl, r2
 8004dde:	469b      	mov	fp, r3
 8004de0:	4643      	mov	r3, r8
 8004de2:	eb1a 0303 	adds.w	r3, sl, r3
 8004de6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004dea:	464b      	mov	r3, r9
 8004dec:	eb4b 0303 	adc.w	r3, fp, r3
 8004df0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004e04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004e08:	460b      	mov	r3, r1
 8004e0a:	18db      	adds	r3, r3, r3
 8004e0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e0e:	4613      	mov	r3, r2
 8004e10:	eb42 0303 	adc.w	r3, r2, r3
 8004e14:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004e1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004e1e:	f7fb f9e3 	bl	80001e8 <__aeabi_uldivmod>
 8004e22:	4602      	mov	r2, r0
 8004e24:	460b      	mov	r3, r1
 8004e26:	4611      	mov	r1, r2
 8004e28:	4b3b      	ldr	r3, [pc, #236]	@ (8004f18 <UART_SetConfig+0x2d4>)
 8004e2a:	fba3 2301 	umull	r2, r3, r3, r1
 8004e2e:	095b      	lsrs	r3, r3, #5
 8004e30:	2264      	movs	r2, #100	@ 0x64
 8004e32:	fb02 f303 	mul.w	r3, r2, r3
 8004e36:	1acb      	subs	r3, r1, r3
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004e3e:	4b36      	ldr	r3, [pc, #216]	@ (8004f18 <UART_SetConfig+0x2d4>)
 8004e40:	fba3 2302 	umull	r2, r3, r3, r2
 8004e44:	095b      	lsrs	r3, r3, #5
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004e4c:	441c      	add	r4, r3
 8004e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e52:	2200      	movs	r2, #0
 8004e54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004e5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004e60:	4642      	mov	r2, r8
 8004e62:	464b      	mov	r3, r9
 8004e64:	1891      	adds	r1, r2, r2
 8004e66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004e68:	415b      	adcs	r3, r3
 8004e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004e70:	4641      	mov	r1, r8
 8004e72:	1851      	adds	r1, r2, r1
 8004e74:	6339      	str	r1, [r7, #48]	@ 0x30
 8004e76:	4649      	mov	r1, r9
 8004e78:	414b      	adcs	r3, r1
 8004e7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e7c:	f04f 0200 	mov.w	r2, #0
 8004e80:	f04f 0300 	mov.w	r3, #0
 8004e84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004e88:	4659      	mov	r1, fp
 8004e8a:	00cb      	lsls	r3, r1, #3
 8004e8c:	4651      	mov	r1, sl
 8004e8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e92:	4651      	mov	r1, sl
 8004e94:	00ca      	lsls	r2, r1, #3
 8004e96:	4610      	mov	r0, r2
 8004e98:	4619      	mov	r1, r3
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	4642      	mov	r2, r8
 8004e9e:	189b      	adds	r3, r3, r2
 8004ea0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ea4:	464b      	mov	r3, r9
 8004ea6:	460a      	mov	r2, r1
 8004ea8:	eb42 0303 	adc.w	r3, r2, r3
 8004eac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004ebc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004ec0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	18db      	adds	r3, r3, r3
 8004ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004eca:	4613      	mov	r3, r2
 8004ecc:	eb42 0303 	adc.w	r3, r2, r3
 8004ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ed2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ed6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004eda:	f7fb f985 	bl	80001e8 <__aeabi_uldivmod>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8004f18 <UART_SetConfig+0x2d4>)
 8004ee4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ee8:	095b      	lsrs	r3, r3, #5
 8004eea:	2164      	movs	r1, #100	@ 0x64
 8004eec:	fb01 f303 	mul.w	r3, r1, r3
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	3332      	adds	r3, #50	@ 0x32
 8004ef6:	4a08      	ldr	r2, [pc, #32]	@ (8004f18 <UART_SetConfig+0x2d4>)
 8004ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8004efc:	095b      	lsrs	r3, r3, #5
 8004efe:	f003 0207 	and.w	r2, r3, #7
 8004f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4422      	add	r2, r4
 8004f0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f0c:	e106      	b.n	800511c <UART_SetConfig+0x4d8>
 8004f0e:	bf00      	nop
 8004f10:	40011000 	.word	0x40011000
 8004f14:	40011400 	.word	0x40011400
 8004f18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f20:	2200      	movs	r2, #0
 8004f22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f26:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004f2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004f2e:	4642      	mov	r2, r8
 8004f30:	464b      	mov	r3, r9
 8004f32:	1891      	adds	r1, r2, r2
 8004f34:	6239      	str	r1, [r7, #32]
 8004f36:	415b      	adcs	r3, r3
 8004f38:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f3e:	4641      	mov	r1, r8
 8004f40:	1854      	adds	r4, r2, r1
 8004f42:	4649      	mov	r1, r9
 8004f44:	eb43 0501 	adc.w	r5, r3, r1
 8004f48:	f04f 0200 	mov.w	r2, #0
 8004f4c:	f04f 0300 	mov.w	r3, #0
 8004f50:	00eb      	lsls	r3, r5, #3
 8004f52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f56:	00e2      	lsls	r2, r4, #3
 8004f58:	4614      	mov	r4, r2
 8004f5a:	461d      	mov	r5, r3
 8004f5c:	4643      	mov	r3, r8
 8004f5e:	18e3      	adds	r3, r4, r3
 8004f60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f64:	464b      	mov	r3, r9
 8004f66:	eb45 0303 	adc.w	r3, r5, r3
 8004f6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f7e:	f04f 0200 	mov.w	r2, #0
 8004f82:	f04f 0300 	mov.w	r3, #0
 8004f86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004f8a:	4629      	mov	r1, r5
 8004f8c:	008b      	lsls	r3, r1, #2
 8004f8e:	4621      	mov	r1, r4
 8004f90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f94:	4621      	mov	r1, r4
 8004f96:	008a      	lsls	r2, r1, #2
 8004f98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004f9c:	f7fb f924 	bl	80001e8 <__aeabi_uldivmod>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	4b60      	ldr	r3, [pc, #384]	@ (8005128 <UART_SetConfig+0x4e4>)
 8004fa6:	fba3 2302 	umull	r2, r3, r3, r2
 8004faa:	095b      	lsrs	r3, r3, #5
 8004fac:	011c      	lsls	r4, r3, #4
 8004fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004fb8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004fbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004fc0:	4642      	mov	r2, r8
 8004fc2:	464b      	mov	r3, r9
 8004fc4:	1891      	adds	r1, r2, r2
 8004fc6:	61b9      	str	r1, [r7, #24]
 8004fc8:	415b      	adcs	r3, r3
 8004fca:	61fb      	str	r3, [r7, #28]
 8004fcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fd0:	4641      	mov	r1, r8
 8004fd2:	1851      	adds	r1, r2, r1
 8004fd4:	6139      	str	r1, [r7, #16]
 8004fd6:	4649      	mov	r1, r9
 8004fd8:	414b      	adcs	r3, r1
 8004fda:	617b      	str	r3, [r7, #20]
 8004fdc:	f04f 0200 	mov.w	r2, #0
 8004fe0:	f04f 0300 	mov.w	r3, #0
 8004fe4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fe8:	4659      	mov	r1, fp
 8004fea:	00cb      	lsls	r3, r1, #3
 8004fec:	4651      	mov	r1, sl
 8004fee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ff2:	4651      	mov	r1, sl
 8004ff4:	00ca      	lsls	r2, r1, #3
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	4642      	mov	r2, r8
 8004ffe:	189b      	adds	r3, r3, r2
 8005000:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005004:	464b      	mov	r3, r9
 8005006:	460a      	mov	r2, r1
 8005008:	eb42 0303 	adc.w	r3, r2, r3
 800500c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	67bb      	str	r3, [r7, #120]	@ 0x78
 800501a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800501c:	f04f 0200 	mov.w	r2, #0
 8005020:	f04f 0300 	mov.w	r3, #0
 8005024:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005028:	4649      	mov	r1, r9
 800502a:	008b      	lsls	r3, r1, #2
 800502c:	4641      	mov	r1, r8
 800502e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005032:	4641      	mov	r1, r8
 8005034:	008a      	lsls	r2, r1, #2
 8005036:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800503a:	f7fb f8d5 	bl	80001e8 <__aeabi_uldivmod>
 800503e:	4602      	mov	r2, r0
 8005040:	460b      	mov	r3, r1
 8005042:	4611      	mov	r1, r2
 8005044:	4b38      	ldr	r3, [pc, #224]	@ (8005128 <UART_SetConfig+0x4e4>)
 8005046:	fba3 2301 	umull	r2, r3, r3, r1
 800504a:	095b      	lsrs	r3, r3, #5
 800504c:	2264      	movs	r2, #100	@ 0x64
 800504e:	fb02 f303 	mul.w	r3, r2, r3
 8005052:	1acb      	subs	r3, r1, r3
 8005054:	011b      	lsls	r3, r3, #4
 8005056:	3332      	adds	r3, #50	@ 0x32
 8005058:	4a33      	ldr	r2, [pc, #204]	@ (8005128 <UART_SetConfig+0x4e4>)
 800505a:	fba2 2303 	umull	r2, r3, r2, r3
 800505e:	095b      	lsrs	r3, r3, #5
 8005060:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005064:	441c      	add	r4, r3
 8005066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800506a:	2200      	movs	r2, #0
 800506c:	673b      	str	r3, [r7, #112]	@ 0x70
 800506e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005070:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005074:	4642      	mov	r2, r8
 8005076:	464b      	mov	r3, r9
 8005078:	1891      	adds	r1, r2, r2
 800507a:	60b9      	str	r1, [r7, #8]
 800507c:	415b      	adcs	r3, r3
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005084:	4641      	mov	r1, r8
 8005086:	1851      	adds	r1, r2, r1
 8005088:	6039      	str	r1, [r7, #0]
 800508a:	4649      	mov	r1, r9
 800508c:	414b      	adcs	r3, r1
 800508e:	607b      	str	r3, [r7, #4]
 8005090:	f04f 0200 	mov.w	r2, #0
 8005094:	f04f 0300 	mov.w	r3, #0
 8005098:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800509c:	4659      	mov	r1, fp
 800509e:	00cb      	lsls	r3, r1, #3
 80050a0:	4651      	mov	r1, sl
 80050a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050a6:	4651      	mov	r1, sl
 80050a8:	00ca      	lsls	r2, r1, #3
 80050aa:	4610      	mov	r0, r2
 80050ac:	4619      	mov	r1, r3
 80050ae:	4603      	mov	r3, r0
 80050b0:	4642      	mov	r2, r8
 80050b2:	189b      	adds	r3, r3, r2
 80050b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050b6:	464b      	mov	r3, r9
 80050b8:	460a      	mov	r2, r1
 80050ba:	eb42 0303 	adc.w	r3, r2, r3
 80050be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80050ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80050cc:	f04f 0200 	mov.w	r2, #0
 80050d0:	f04f 0300 	mov.w	r3, #0
 80050d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80050d8:	4649      	mov	r1, r9
 80050da:	008b      	lsls	r3, r1, #2
 80050dc:	4641      	mov	r1, r8
 80050de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050e2:	4641      	mov	r1, r8
 80050e4:	008a      	lsls	r2, r1, #2
 80050e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80050ea:	f7fb f87d 	bl	80001e8 <__aeabi_uldivmod>
 80050ee:	4602      	mov	r2, r0
 80050f0:	460b      	mov	r3, r1
 80050f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005128 <UART_SetConfig+0x4e4>)
 80050f4:	fba3 1302 	umull	r1, r3, r3, r2
 80050f8:	095b      	lsrs	r3, r3, #5
 80050fa:	2164      	movs	r1, #100	@ 0x64
 80050fc:	fb01 f303 	mul.w	r3, r1, r3
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	011b      	lsls	r3, r3, #4
 8005104:	3332      	adds	r3, #50	@ 0x32
 8005106:	4a08      	ldr	r2, [pc, #32]	@ (8005128 <UART_SetConfig+0x4e4>)
 8005108:	fba2 2303 	umull	r2, r3, r2, r3
 800510c:	095b      	lsrs	r3, r3, #5
 800510e:	f003 020f 	and.w	r2, r3, #15
 8005112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4422      	add	r2, r4
 800511a:	609a      	str	r2, [r3, #8]
}
 800511c:	bf00      	nop
 800511e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005122:	46bd      	mov	sp, r7
 8005124:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005128:	51eb851f 	.word	0x51eb851f

0800512c <realloc>:
 800512c:	4b02      	ldr	r3, [pc, #8]	@ (8005138 <realloc+0xc>)
 800512e:	460a      	mov	r2, r1
 8005130:	4601      	mov	r1, r0
 8005132:	6818      	ldr	r0, [r3, #0]
 8005134:	f000 b802 	b.w	800513c <_realloc_r>
 8005138:	2000000c 	.word	0x2000000c

0800513c <_realloc_r>:
 800513c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005140:	4680      	mov	r8, r0
 8005142:	4615      	mov	r5, r2
 8005144:	460c      	mov	r4, r1
 8005146:	b921      	cbnz	r1, 8005152 <_realloc_r+0x16>
 8005148:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800514c:	4611      	mov	r1, r2
 800514e:	f000 b8d1 	b.w	80052f4 <_malloc_r>
 8005152:	b92a      	cbnz	r2, 8005160 <_realloc_r+0x24>
 8005154:	f000 f862 	bl	800521c <_free_r>
 8005158:	2400      	movs	r4, #0
 800515a:	4620      	mov	r0, r4
 800515c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005160:	f000 f954 	bl	800540c <_malloc_usable_size_r>
 8005164:	4285      	cmp	r5, r0
 8005166:	4606      	mov	r6, r0
 8005168:	d802      	bhi.n	8005170 <_realloc_r+0x34>
 800516a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800516e:	d8f4      	bhi.n	800515a <_realloc_r+0x1e>
 8005170:	4629      	mov	r1, r5
 8005172:	4640      	mov	r0, r8
 8005174:	f000 f8be 	bl	80052f4 <_malloc_r>
 8005178:	4607      	mov	r7, r0
 800517a:	2800      	cmp	r0, #0
 800517c:	d0ec      	beq.n	8005158 <_realloc_r+0x1c>
 800517e:	42b5      	cmp	r5, r6
 8005180:	462a      	mov	r2, r5
 8005182:	4621      	mov	r1, r4
 8005184:	bf28      	it	cs
 8005186:	4632      	movcs	r2, r6
 8005188:	f000 f83a 	bl	8005200 <memcpy>
 800518c:	4621      	mov	r1, r4
 800518e:	4640      	mov	r0, r8
 8005190:	f000 f844 	bl	800521c <_free_r>
 8005194:	463c      	mov	r4, r7
 8005196:	e7e0      	b.n	800515a <_realloc_r+0x1e>

08005198 <memset>:
 8005198:	4402      	add	r2, r0
 800519a:	4603      	mov	r3, r0
 800519c:	4293      	cmp	r3, r2
 800519e:	d100      	bne.n	80051a2 <memset+0xa>
 80051a0:	4770      	bx	lr
 80051a2:	f803 1b01 	strb.w	r1, [r3], #1
 80051a6:	e7f9      	b.n	800519c <memset+0x4>

080051a8 <__errno>:
 80051a8:	4b01      	ldr	r3, [pc, #4]	@ (80051b0 <__errno+0x8>)
 80051aa:	6818      	ldr	r0, [r3, #0]
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	2000000c 	.word	0x2000000c

080051b4 <__libc_init_array>:
 80051b4:	b570      	push	{r4, r5, r6, lr}
 80051b6:	4d0d      	ldr	r5, [pc, #52]	@ (80051ec <__libc_init_array+0x38>)
 80051b8:	4c0d      	ldr	r4, [pc, #52]	@ (80051f0 <__libc_init_array+0x3c>)
 80051ba:	1b64      	subs	r4, r4, r5
 80051bc:	10a4      	asrs	r4, r4, #2
 80051be:	2600      	movs	r6, #0
 80051c0:	42a6      	cmp	r6, r4
 80051c2:	d109      	bne.n	80051d8 <__libc_init_array+0x24>
 80051c4:	4d0b      	ldr	r5, [pc, #44]	@ (80051f4 <__libc_init_array+0x40>)
 80051c6:	4c0c      	ldr	r4, [pc, #48]	@ (80051f8 <__libc_init_array+0x44>)
 80051c8:	f000 f938 	bl	800543c <_init>
 80051cc:	1b64      	subs	r4, r4, r5
 80051ce:	10a4      	asrs	r4, r4, #2
 80051d0:	2600      	movs	r6, #0
 80051d2:	42a6      	cmp	r6, r4
 80051d4:	d105      	bne.n	80051e2 <__libc_init_array+0x2e>
 80051d6:	bd70      	pop	{r4, r5, r6, pc}
 80051d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80051dc:	4798      	blx	r3
 80051de:	3601      	adds	r6, #1
 80051e0:	e7ee      	b.n	80051c0 <__libc_init_array+0xc>
 80051e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80051e6:	4798      	blx	r3
 80051e8:	3601      	adds	r6, #1
 80051ea:	e7f2      	b.n	80051d2 <__libc_init_array+0x1e>
 80051ec:	080056a4 	.word	0x080056a4
 80051f0:	080056a4 	.word	0x080056a4
 80051f4:	080056a4 	.word	0x080056a4
 80051f8:	080056ac 	.word	0x080056ac

080051fc <__retarget_lock_acquire_recursive>:
 80051fc:	4770      	bx	lr

080051fe <__retarget_lock_release_recursive>:
 80051fe:	4770      	bx	lr

08005200 <memcpy>:
 8005200:	440a      	add	r2, r1
 8005202:	4291      	cmp	r1, r2
 8005204:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005208:	d100      	bne.n	800520c <memcpy+0xc>
 800520a:	4770      	bx	lr
 800520c:	b510      	push	{r4, lr}
 800520e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005212:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005216:	4291      	cmp	r1, r2
 8005218:	d1f9      	bne.n	800520e <memcpy+0xe>
 800521a:	bd10      	pop	{r4, pc}

0800521c <_free_r>:
 800521c:	b538      	push	{r3, r4, r5, lr}
 800521e:	4605      	mov	r5, r0
 8005220:	2900      	cmp	r1, #0
 8005222:	d041      	beq.n	80052a8 <_free_r+0x8c>
 8005224:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005228:	1f0c      	subs	r4, r1, #4
 800522a:	2b00      	cmp	r3, #0
 800522c:	bfb8      	it	lt
 800522e:	18e4      	addlt	r4, r4, r3
 8005230:	f000 f8e0 	bl	80053f4 <__malloc_lock>
 8005234:	4a1d      	ldr	r2, [pc, #116]	@ (80052ac <_free_r+0x90>)
 8005236:	6813      	ldr	r3, [r2, #0]
 8005238:	b933      	cbnz	r3, 8005248 <_free_r+0x2c>
 800523a:	6063      	str	r3, [r4, #4]
 800523c:	6014      	str	r4, [r2, #0]
 800523e:	4628      	mov	r0, r5
 8005240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005244:	f000 b8dc 	b.w	8005400 <__malloc_unlock>
 8005248:	42a3      	cmp	r3, r4
 800524a:	d908      	bls.n	800525e <_free_r+0x42>
 800524c:	6820      	ldr	r0, [r4, #0]
 800524e:	1821      	adds	r1, r4, r0
 8005250:	428b      	cmp	r3, r1
 8005252:	bf01      	itttt	eq
 8005254:	6819      	ldreq	r1, [r3, #0]
 8005256:	685b      	ldreq	r3, [r3, #4]
 8005258:	1809      	addeq	r1, r1, r0
 800525a:	6021      	streq	r1, [r4, #0]
 800525c:	e7ed      	b.n	800523a <_free_r+0x1e>
 800525e:	461a      	mov	r2, r3
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	b10b      	cbz	r3, 8005268 <_free_r+0x4c>
 8005264:	42a3      	cmp	r3, r4
 8005266:	d9fa      	bls.n	800525e <_free_r+0x42>
 8005268:	6811      	ldr	r1, [r2, #0]
 800526a:	1850      	adds	r0, r2, r1
 800526c:	42a0      	cmp	r0, r4
 800526e:	d10b      	bne.n	8005288 <_free_r+0x6c>
 8005270:	6820      	ldr	r0, [r4, #0]
 8005272:	4401      	add	r1, r0
 8005274:	1850      	adds	r0, r2, r1
 8005276:	4283      	cmp	r3, r0
 8005278:	6011      	str	r1, [r2, #0]
 800527a:	d1e0      	bne.n	800523e <_free_r+0x22>
 800527c:	6818      	ldr	r0, [r3, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	6053      	str	r3, [r2, #4]
 8005282:	4408      	add	r0, r1
 8005284:	6010      	str	r0, [r2, #0]
 8005286:	e7da      	b.n	800523e <_free_r+0x22>
 8005288:	d902      	bls.n	8005290 <_free_r+0x74>
 800528a:	230c      	movs	r3, #12
 800528c:	602b      	str	r3, [r5, #0]
 800528e:	e7d6      	b.n	800523e <_free_r+0x22>
 8005290:	6820      	ldr	r0, [r4, #0]
 8005292:	1821      	adds	r1, r4, r0
 8005294:	428b      	cmp	r3, r1
 8005296:	bf04      	itt	eq
 8005298:	6819      	ldreq	r1, [r3, #0]
 800529a:	685b      	ldreq	r3, [r3, #4]
 800529c:	6063      	str	r3, [r4, #4]
 800529e:	bf04      	itt	eq
 80052a0:	1809      	addeq	r1, r1, r0
 80052a2:	6021      	streq	r1, [r4, #0]
 80052a4:	6054      	str	r4, [r2, #4]
 80052a6:	e7ca      	b.n	800523e <_free_r+0x22>
 80052a8:	bd38      	pop	{r3, r4, r5, pc}
 80052aa:	bf00      	nop
 80052ac:	20000c28 	.word	0x20000c28

080052b0 <sbrk_aligned>:
 80052b0:	b570      	push	{r4, r5, r6, lr}
 80052b2:	4e0f      	ldr	r6, [pc, #60]	@ (80052f0 <sbrk_aligned+0x40>)
 80052b4:	460c      	mov	r4, r1
 80052b6:	6831      	ldr	r1, [r6, #0]
 80052b8:	4605      	mov	r5, r0
 80052ba:	b911      	cbnz	r1, 80052c2 <sbrk_aligned+0x12>
 80052bc:	f000 f8ae 	bl	800541c <_sbrk_r>
 80052c0:	6030      	str	r0, [r6, #0]
 80052c2:	4621      	mov	r1, r4
 80052c4:	4628      	mov	r0, r5
 80052c6:	f000 f8a9 	bl	800541c <_sbrk_r>
 80052ca:	1c43      	adds	r3, r0, #1
 80052cc:	d103      	bne.n	80052d6 <sbrk_aligned+0x26>
 80052ce:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80052d2:	4620      	mov	r0, r4
 80052d4:	bd70      	pop	{r4, r5, r6, pc}
 80052d6:	1cc4      	adds	r4, r0, #3
 80052d8:	f024 0403 	bic.w	r4, r4, #3
 80052dc:	42a0      	cmp	r0, r4
 80052de:	d0f8      	beq.n	80052d2 <sbrk_aligned+0x22>
 80052e0:	1a21      	subs	r1, r4, r0
 80052e2:	4628      	mov	r0, r5
 80052e4:	f000 f89a 	bl	800541c <_sbrk_r>
 80052e8:	3001      	adds	r0, #1
 80052ea:	d1f2      	bne.n	80052d2 <sbrk_aligned+0x22>
 80052ec:	e7ef      	b.n	80052ce <sbrk_aligned+0x1e>
 80052ee:	bf00      	nop
 80052f0:	20000c24 	.word	0x20000c24

080052f4 <_malloc_r>:
 80052f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052f8:	1ccd      	adds	r5, r1, #3
 80052fa:	f025 0503 	bic.w	r5, r5, #3
 80052fe:	3508      	adds	r5, #8
 8005300:	2d0c      	cmp	r5, #12
 8005302:	bf38      	it	cc
 8005304:	250c      	movcc	r5, #12
 8005306:	2d00      	cmp	r5, #0
 8005308:	4606      	mov	r6, r0
 800530a:	db01      	blt.n	8005310 <_malloc_r+0x1c>
 800530c:	42a9      	cmp	r1, r5
 800530e:	d904      	bls.n	800531a <_malloc_r+0x26>
 8005310:	230c      	movs	r3, #12
 8005312:	6033      	str	r3, [r6, #0]
 8005314:	2000      	movs	r0, #0
 8005316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800531a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80053f0 <_malloc_r+0xfc>
 800531e:	f000 f869 	bl	80053f4 <__malloc_lock>
 8005322:	f8d8 3000 	ldr.w	r3, [r8]
 8005326:	461c      	mov	r4, r3
 8005328:	bb44      	cbnz	r4, 800537c <_malloc_r+0x88>
 800532a:	4629      	mov	r1, r5
 800532c:	4630      	mov	r0, r6
 800532e:	f7ff ffbf 	bl	80052b0 <sbrk_aligned>
 8005332:	1c43      	adds	r3, r0, #1
 8005334:	4604      	mov	r4, r0
 8005336:	d158      	bne.n	80053ea <_malloc_r+0xf6>
 8005338:	f8d8 4000 	ldr.w	r4, [r8]
 800533c:	4627      	mov	r7, r4
 800533e:	2f00      	cmp	r7, #0
 8005340:	d143      	bne.n	80053ca <_malloc_r+0xd6>
 8005342:	2c00      	cmp	r4, #0
 8005344:	d04b      	beq.n	80053de <_malloc_r+0xea>
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	4639      	mov	r1, r7
 800534a:	4630      	mov	r0, r6
 800534c:	eb04 0903 	add.w	r9, r4, r3
 8005350:	f000 f864 	bl	800541c <_sbrk_r>
 8005354:	4581      	cmp	r9, r0
 8005356:	d142      	bne.n	80053de <_malloc_r+0xea>
 8005358:	6821      	ldr	r1, [r4, #0]
 800535a:	1a6d      	subs	r5, r5, r1
 800535c:	4629      	mov	r1, r5
 800535e:	4630      	mov	r0, r6
 8005360:	f7ff ffa6 	bl	80052b0 <sbrk_aligned>
 8005364:	3001      	adds	r0, #1
 8005366:	d03a      	beq.n	80053de <_malloc_r+0xea>
 8005368:	6823      	ldr	r3, [r4, #0]
 800536a:	442b      	add	r3, r5
 800536c:	6023      	str	r3, [r4, #0]
 800536e:	f8d8 3000 	ldr.w	r3, [r8]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	bb62      	cbnz	r2, 80053d0 <_malloc_r+0xdc>
 8005376:	f8c8 7000 	str.w	r7, [r8]
 800537a:	e00f      	b.n	800539c <_malloc_r+0xa8>
 800537c:	6822      	ldr	r2, [r4, #0]
 800537e:	1b52      	subs	r2, r2, r5
 8005380:	d420      	bmi.n	80053c4 <_malloc_r+0xd0>
 8005382:	2a0b      	cmp	r2, #11
 8005384:	d917      	bls.n	80053b6 <_malloc_r+0xc2>
 8005386:	1961      	adds	r1, r4, r5
 8005388:	42a3      	cmp	r3, r4
 800538a:	6025      	str	r5, [r4, #0]
 800538c:	bf18      	it	ne
 800538e:	6059      	strne	r1, [r3, #4]
 8005390:	6863      	ldr	r3, [r4, #4]
 8005392:	bf08      	it	eq
 8005394:	f8c8 1000 	streq.w	r1, [r8]
 8005398:	5162      	str	r2, [r4, r5]
 800539a:	604b      	str	r3, [r1, #4]
 800539c:	4630      	mov	r0, r6
 800539e:	f000 f82f 	bl	8005400 <__malloc_unlock>
 80053a2:	f104 000b 	add.w	r0, r4, #11
 80053a6:	1d23      	adds	r3, r4, #4
 80053a8:	f020 0007 	bic.w	r0, r0, #7
 80053ac:	1ac2      	subs	r2, r0, r3
 80053ae:	bf1c      	itt	ne
 80053b0:	1a1b      	subne	r3, r3, r0
 80053b2:	50a3      	strne	r3, [r4, r2]
 80053b4:	e7af      	b.n	8005316 <_malloc_r+0x22>
 80053b6:	6862      	ldr	r2, [r4, #4]
 80053b8:	42a3      	cmp	r3, r4
 80053ba:	bf0c      	ite	eq
 80053bc:	f8c8 2000 	streq.w	r2, [r8]
 80053c0:	605a      	strne	r2, [r3, #4]
 80053c2:	e7eb      	b.n	800539c <_malloc_r+0xa8>
 80053c4:	4623      	mov	r3, r4
 80053c6:	6864      	ldr	r4, [r4, #4]
 80053c8:	e7ae      	b.n	8005328 <_malloc_r+0x34>
 80053ca:	463c      	mov	r4, r7
 80053cc:	687f      	ldr	r7, [r7, #4]
 80053ce:	e7b6      	b.n	800533e <_malloc_r+0x4a>
 80053d0:	461a      	mov	r2, r3
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	42a3      	cmp	r3, r4
 80053d6:	d1fb      	bne.n	80053d0 <_malloc_r+0xdc>
 80053d8:	2300      	movs	r3, #0
 80053da:	6053      	str	r3, [r2, #4]
 80053dc:	e7de      	b.n	800539c <_malloc_r+0xa8>
 80053de:	230c      	movs	r3, #12
 80053e0:	6033      	str	r3, [r6, #0]
 80053e2:	4630      	mov	r0, r6
 80053e4:	f000 f80c 	bl	8005400 <__malloc_unlock>
 80053e8:	e794      	b.n	8005314 <_malloc_r+0x20>
 80053ea:	6005      	str	r5, [r0, #0]
 80053ec:	e7d6      	b.n	800539c <_malloc_r+0xa8>
 80053ee:	bf00      	nop
 80053f0:	20000c28 	.word	0x20000c28

080053f4 <__malloc_lock>:
 80053f4:	4801      	ldr	r0, [pc, #4]	@ (80053fc <__malloc_lock+0x8>)
 80053f6:	f7ff bf01 	b.w	80051fc <__retarget_lock_acquire_recursive>
 80053fa:	bf00      	nop
 80053fc:	20000c20 	.word	0x20000c20

08005400 <__malloc_unlock>:
 8005400:	4801      	ldr	r0, [pc, #4]	@ (8005408 <__malloc_unlock+0x8>)
 8005402:	f7ff befc 	b.w	80051fe <__retarget_lock_release_recursive>
 8005406:	bf00      	nop
 8005408:	20000c20 	.word	0x20000c20

0800540c <_malloc_usable_size_r>:
 800540c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005410:	1f18      	subs	r0, r3, #4
 8005412:	2b00      	cmp	r3, #0
 8005414:	bfbc      	itt	lt
 8005416:	580b      	ldrlt	r3, [r1, r0]
 8005418:	18c0      	addlt	r0, r0, r3
 800541a:	4770      	bx	lr

0800541c <_sbrk_r>:
 800541c:	b538      	push	{r3, r4, r5, lr}
 800541e:	4d06      	ldr	r5, [pc, #24]	@ (8005438 <_sbrk_r+0x1c>)
 8005420:	2300      	movs	r3, #0
 8005422:	4604      	mov	r4, r0
 8005424:	4608      	mov	r0, r1
 8005426:	602b      	str	r3, [r5, #0]
 8005428:	f7fc fffc 	bl	8002424 <_sbrk>
 800542c:	1c43      	adds	r3, r0, #1
 800542e:	d102      	bne.n	8005436 <_sbrk_r+0x1a>
 8005430:	682b      	ldr	r3, [r5, #0]
 8005432:	b103      	cbz	r3, 8005436 <_sbrk_r+0x1a>
 8005434:	6023      	str	r3, [r4, #0]
 8005436:	bd38      	pop	{r3, r4, r5, pc}
 8005438:	20000c1c 	.word	0x20000c1c

0800543c <_init>:
 800543c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800543e:	bf00      	nop
 8005440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005442:	bc08      	pop	{r3}
 8005444:	469e      	mov	lr, r3
 8005446:	4770      	bx	lr

08005448 <_fini>:
 8005448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800544a:	bf00      	nop
 800544c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800544e:	bc08      	pop	{r3}
 8005450:	469e      	mov	lr, r3
 8005452:	4770      	bx	lr
