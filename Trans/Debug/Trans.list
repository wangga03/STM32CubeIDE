
Trans.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003970  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003a7c  08003a7c  00004a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ae0  08003ae0  00005078  2**0
                  CONTENTS
  4 .ARM          00000000  08003ae0  08003ae0  00005078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ae0  08003ae0  00005078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ae0  08003ae0  00004ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ae4  08003ae4  00004ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08003ae8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000078  08003b60  00005078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08003b60  00005328  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf6e  00000000  00000000  000050a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c67  00000000  00000000  0001100f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  00012c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000987  00000000  00000000  000138a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a0b  00000000  00000000  00014227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d04b  00000000  00000000  0002bc32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a431  00000000  00000000  00038c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c30ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037dc  00000000  00000000  000c30f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000c68d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a64 	.word	0x08003a64

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08003a64 	.word	0x08003a64

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fba6 	bl	80008a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f810 	bl	8000178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8ea 	bl	8000330 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f8c2 	bl	80002e4 <MX_DMA_Init>
  MX_TIM1_Init();
 8000160:	f000 f846 	bl	80001f0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000164:	f000 f894 	bl	8000290 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000168:	4802      	ldr	r0, [pc, #8]	@ (8000174 <main+0x28>)
 800016a:	f001 fda7 	bl	8001cbc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800016e:	bf00      	nop
 8000170:	e7fd      	b.n	800016e <main+0x22>
 8000172:	bf00      	nop
 8000174:	200000c0 	.word	0x200000c0

08000178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b090      	sub	sp, #64	@ 0x40
 800017c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017e:	f107 0318 	add.w	r3, r7, #24
 8000182:	2228      	movs	r2, #40	@ 0x28
 8000184:	2100      	movs	r1, #0
 8000186:	4618      	mov	r0, r3
 8000188:	f002 ffdc 	bl	8003144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018c:	1d3b      	adds	r3, r7, #4
 800018e:	2200      	movs	r2, #0
 8000190:	601a      	str	r2, [r3, #0]
 8000192:	605a      	str	r2, [r3, #4]
 8000194:	609a      	str	r2, [r3, #8]
 8000196:	60da      	str	r2, [r3, #12]
 8000198:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800019a:	2302      	movs	r3, #2
 800019c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800019e:	2301      	movs	r3, #1
 80001a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001a2:	2310      	movs	r3, #16
 80001a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001a6:	2300      	movs	r3, #0
 80001a8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001aa:	f107 0318 	add.w	r3, r7, #24
 80001ae:	4618      	mov	r0, r3
 80001b0:	f001 f924 	bl	80013fc <HAL_RCC_OscConfig>
 80001b4:	4603      	mov	r3, r0
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d001      	beq.n	80001be <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001ba:	f000 f97d 	bl	80004b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001be:	230f      	movs	r3, #15
 80001c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001c2:	2300      	movs	r3, #0
 80001c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001c6:	2300      	movs	r3, #0
 80001c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001ca:	2300      	movs	r3, #0
 80001cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ce:	2300      	movs	r3, #0
 80001d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001d2:	1d3b      	adds	r3, r7, #4
 80001d4:	2100      	movs	r1, #0
 80001d6:	4618      	mov	r0, r3
 80001d8:	f001 fb92 	bl	8001900 <HAL_RCC_ClockConfig>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d001      	beq.n	80001e6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001e2:	f000 f969 	bl	80004b8 <Error_Handler>
  }
}
 80001e6:	bf00      	nop
 80001e8:	3740      	adds	r7, #64	@ 0x40
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
	...

080001f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b086      	sub	sp, #24
 80001f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80001f6:	f107 0308 	add.w	r3, r7, #8
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	609a      	str	r2, [r3, #8]
 8000202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000204:	463b      	mov	r3, r7
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800020c:	4b1e      	ldr	r3, [pc, #120]	@ (8000288 <MX_TIM1_Init+0x98>)
 800020e:	4a1f      	ldr	r2, [pc, #124]	@ (800028c <MX_TIM1_Init+0x9c>)
 8000210:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000212:	4b1d      	ldr	r3, [pc, #116]	@ (8000288 <MX_TIM1_Init+0x98>)
 8000214:	2247      	movs	r2, #71	@ 0x47
 8000216:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000218:	4b1b      	ldr	r3, [pc, #108]	@ (8000288 <MX_TIM1_Init+0x98>)
 800021a:	2200      	movs	r2, #0
 800021c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800021e:	4b1a      	ldr	r3, [pc, #104]	@ (8000288 <MX_TIM1_Init+0x98>)
 8000220:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000224:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000226:	4b18      	ldr	r3, [pc, #96]	@ (8000288 <MX_TIM1_Init+0x98>)
 8000228:	2200      	movs	r2, #0
 800022a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800022c:	4b16      	ldr	r3, [pc, #88]	@ (8000288 <MX_TIM1_Init+0x98>)
 800022e:	2200      	movs	r2, #0
 8000230:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000232:	4b15      	ldr	r3, [pc, #84]	@ (8000288 <MX_TIM1_Init+0x98>)
 8000234:	2200      	movs	r2, #0
 8000236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000238:	4813      	ldr	r0, [pc, #76]	@ (8000288 <MX_TIM1_Init+0x98>)
 800023a:	f001 fcef 	bl	8001c1c <HAL_TIM_Base_Init>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000244:	f000 f938 	bl	80004b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000248:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800024c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800024e:	f107 0308 	add.w	r3, r7, #8
 8000252:	4619      	mov	r1, r3
 8000254:	480c      	ldr	r0, [pc, #48]	@ (8000288 <MX_TIM1_Init+0x98>)
 8000256:	f001 fe8b 	bl	8001f70 <HAL_TIM_ConfigClockSource>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000260:	f000 f92a 	bl	80004b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000264:	2300      	movs	r3, #0
 8000266:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000268:	2300      	movs	r3, #0
 800026a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800026c:	463b      	mov	r3, r7
 800026e:	4619      	mov	r1, r3
 8000270:	4805      	ldr	r0, [pc, #20]	@ (8000288 <MX_TIM1_Init+0x98>)
 8000272:	f002 f861 	bl	8002338 <HAL_TIMEx_MasterConfigSynchronization>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800027c:	f000 f91c 	bl	80004b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000280:	bf00      	nop
 8000282:	3718      	adds	r7, #24
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	200000c0 	.word	0x200000c0
 800028c:	40012c00 	.word	0x40012c00

08000290 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000294:	4b11      	ldr	r3, [pc, #68]	@ (80002dc <MX_USART1_UART_Init+0x4c>)
 8000296:	4a12      	ldr	r2, [pc, #72]	@ (80002e0 <MX_USART1_UART_Init+0x50>)
 8000298:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800029a:	4b10      	ldr	r3, [pc, #64]	@ (80002dc <MX_USART1_UART_Init+0x4c>)
 800029c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002a2:	4b0e      	ldr	r3, [pc, #56]	@ (80002dc <MX_USART1_UART_Init+0x4c>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002a8:	4b0c      	ldr	r3, [pc, #48]	@ (80002dc <MX_USART1_UART_Init+0x4c>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002ae:	4b0b      	ldr	r3, [pc, #44]	@ (80002dc <MX_USART1_UART_Init+0x4c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002b4:	4b09      	ldr	r3, [pc, #36]	@ (80002dc <MX_USART1_UART_Init+0x4c>)
 80002b6:	220c      	movs	r2, #12
 80002b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ba:	4b08      	ldr	r3, [pc, #32]	@ (80002dc <MX_USART1_UART_Init+0x4c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002c0:	4b06      	ldr	r3, [pc, #24]	@ (80002dc <MX_USART1_UART_Init+0x4c>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002c6:	4805      	ldr	r0, [pc, #20]	@ (80002dc <MX_USART1_UART_Init+0x4c>)
 80002c8:	f002 f8a6 	bl	8002418 <HAL_UART_Init>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002d2:	f000 f8f1 	bl	80004b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	20000108 	.word	0x20000108
 80002e0:	40013800 	.word	0x40013800

080002e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002ea:	4b10      	ldr	r3, [pc, #64]	@ (800032c <MX_DMA_Init+0x48>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	4a0f      	ldr	r2, [pc, #60]	@ (800032c <MX_DMA_Init+0x48>)
 80002f0:	f043 0301 	orr.w	r3, r3, #1
 80002f4:	6153      	str	r3, [r2, #20]
 80002f6:	4b0d      	ldr	r3, [pc, #52]	@ (800032c <MX_DMA_Init+0x48>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	f003 0301 	and.w	r3, r3, #1
 80002fe:	607b      	str	r3, [r7, #4]
 8000300:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000302:	2200      	movs	r2, #0
 8000304:	2100      	movs	r1, #0
 8000306:	200e      	movs	r0, #14
 8000308:	f000 fc03 	bl	8000b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800030c:	200e      	movs	r0, #14
 800030e:	f000 fc1c 	bl	8000b4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000312:	2200      	movs	r2, #0
 8000314:	2100      	movs	r1, #0
 8000316:	200f      	movs	r0, #15
 8000318:	f000 fbfb 	bl	8000b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800031c:	200f      	movs	r0, #15
 800031e:	f000 fc14 	bl	8000b4a <HAL_NVIC_EnableIRQ>

}
 8000322:	bf00      	nop
 8000324:	3708      	adds	r7, #8
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40021000 	.word	0x40021000

08000330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b088      	sub	sp, #32
 8000334:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000336:	f107 0310 	add.w	r3, r7, #16
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
 8000340:	609a      	str	r2, [r3, #8]
 8000342:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000344:	4b1e      	ldr	r3, [pc, #120]	@ (80003c0 <MX_GPIO_Init+0x90>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	4a1d      	ldr	r2, [pc, #116]	@ (80003c0 <MX_GPIO_Init+0x90>)
 800034a:	f043 0310 	orr.w	r3, r3, #16
 800034e:	6193      	str	r3, [r2, #24]
 8000350:	4b1b      	ldr	r3, [pc, #108]	@ (80003c0 <MX_GPIO_Init+0x90>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	f003 0310 	and.w	r3, r3, #16
 8000358:	60fb      	str	r3, [r7, #12]
 800035a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800035c:	4b18      	ldr	r3, [pc, #96]	@ (80003c0 <MX_GPIO_Init+0x90>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	4a17      	ldr	r2, [pc, #92]	@ (80003c0 <MX_GPIO_Init+0x90>)
 8000362:	f043 0320 	orr.w	r3, r3, #32
 8000366:	6193      	str	r3, [r2, #24]
 8000368:	4b15      	ldr	r3, [pc, #84]	@ (80003c0 <MX_GPIO_Init+0x90>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	f003 0320 	and.w	r3, r3, #32
 8000370:	60bb      	str	r3, [r7, #8]
 8000372:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000374:	4b12      	ldr	r3, [pc, #72]	@ (80003c0 <MX_GPIO_Init+0x90>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a11      	ldr	r2, [pc, #68]	@ (80003c0 <MX_GPIO_Init+0x90>)
 800037a:	f043 0304 	orr.w	r3, r3, #4
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	4b0f      	ldr	r3, [pc, #60]	@ (80003c0 <MX_GPIO_Init+0x90>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f003 0304 	and.w	r3, r3, #4
 8000388:	607b      	str	r3, [r7, #4]
 800038a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800038c:	2200      	movs	r2, #0
 800038e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000392:	480c      	ldr	r0, [pc, #48]	@ (80003c4 <MX_GPIO_Init+0x94>)
 8000394:	f001 f81a 	bl	80013cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000398:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800039c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039e:	2301      	movs	r3, #1
 80003a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a2:	2300      	movs	r3, #0
 80003a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a6:	2302      	movs	r3, #2
 80003a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003aa:	f107 0310 	add.w	r3, r7, #16
 80003ae:	4619      	mov	r1, r3
 80003b0:	4804      	ldr	r0, [pc, #16]	@ (80003c4 <MX_GPIO_Init+0x94>)
 80003b2:	f000 fe87 	bl	80010c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003b6:	bf00      	nop
 80003b8:	3720      	adds	r7, #32
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	40021000 	.word	0x40021000
 80003c4:	40011000 	.word	0x40011000

080003c8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	if(htim == &htim1){
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a2c      	ldr	r2, [pc, #176]	@ (8000484 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d150      	bne.n	800047a <HAL_TIM_PeriodElapsedCallback+0xb2>
		timer++;
 80003d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000488 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	3301      	adds	r3, #1
 80003de:	4a2a      	ldr	r2, [pc, #168]	@ (8000488 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80003e0:	6013      	str	r3, [r2, #0]
		if(timer == 200){
 80003e2:	4b29      	ldr	r3, [pc, #164]	@ (8000488 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	2bc8      	cmp	r3, #200	@ 0xc8
 80003e8:	d147      	bne.n	800047a <HAL_TIM_PeriodElapsedCallback+0xb2>
			timer = 0;
 80003ea:	4b27      	ldr	r3, [pc, #156]	@ (8000488 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, (counter % 2));
 80003f0:	4b26      	ldr	r3, [pc, #152]	@ (800048c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	f003 0301 	and.w	r3, r3, #1
 80003fa:	bfb8      	it	lt
 80003fc:	425b      	neglt	r3, r3
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	461a      	mov	r2, r3
 8000402:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000406:	4822      	ldr	r0, [pc, #136]	@ (8000490 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000408:	f000 ffe0 	bl	80013cc <HAL_GPIO_WritePin>
			x++;
 800040c:	4b21      	ldr	r3, [pc, #132]	@ (8000494 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	3301      	adds	r3, #1
 8000412:	4a20      	ldr	r2, [pc, #128]	@ (8000494 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000414:	6013      	str	r3, [r2, #0]
			y++;
 8000416:	4b20      	ldr	r3, [pc, #128]	@ (8000498 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	3301      	adds	r3, #1
 800041c:	4a1e      	ldr	r2, [pc, #120]	@ (8000498 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800041e:	6013      	str	r3, [r2, #0]
			z++;
 8000420:	4b1e      	ldr	r3, [pc, #120]	@ (800049c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	3301      	adds	r3, #1
 8000426:	4a1d      	ldr	r2, [pc, #116]	@ (800049c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000428:	6013      	str	r3, [r2, #0]
			sprintf(strX, "%d", x);
 800042a:	4b1a      	ldr	r3, [pc, #104]	@ (8000494 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	461a      	mov	r2, r3
 8000430:	491b      	ldr	r1, [pc, #108]	@ (80004a0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000432:	481c      	ldr	r0, [pc, #112]	@ (80004a4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000434:	f002 fe66 	bl	8003104 <siprintf>
			sprintf(strY, "%d", y);
 8000438:	4b17      	ldr	r3, [pc, #92]	@ (8000498 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	461a      	mov	r2, r3
 800043e:	4918      	ldr	r1, [pc, #96]	@ (80004a0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000440:	4819      	ldr	r0, [pc, #100]	@ (80004a8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000442:	f002 fe5f 	bl	8003104 <siprintf>
			sprintf(strZ, "%d", z);
 8000446:	4b15      	ldr	r3, [pc, #84]	@ (800049c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	461a      	mov	r2, r3
 800044c:	4914      	ldr	r1, [pc, #80]	@ (80004a0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800044e:	4817      	ldr	r0, [pc, #92]	@ (80004ac <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000450:	f002 fe58 	bl	8003104 <siprintf>
			memcpy(&data[3], &x , sizeof(int));
 8000454:	4b0f      	ldr	r3, [pc, #60]	@ (8000494 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a15      	ldr	r2, [pc, #84]	@ (80004b0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800045a:	f8c2 3003 	str.w	r3, [r2, #3]
			memcpy(&data[4], &y , sizeof(int));
 800045e:	4b0e      	ldr	r3, [pc, #56]	@ (8000498 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a13      	ldr	r2, [pc, #76]	@ (80004b0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000464:	6053      	str	r3, [r2, #4]
			memcpy(&data[5], &z , sizeof(int));
 8000466:	4b0d      	ldr	r3, [pc, #52]	@ (800049c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a11      	ldr	r2, [pc, #68]	@ (80004b0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800046c:	f8c2 3005 	str.w	r3, [r2, #5]

			HAL_UART_Transmit_DMA(&huart1,(uint8_t*)data, sizeof(data));
 8000470:	220f      	movs	r2, #15
 8000472:	490f      	ldr	r1, [pc, #60]	@ (80004b0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000474:	480f      	ldr	r0, [pc, #60]	@ (80004b4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000476:	f002 f81f 	bl	80024b8 <HAL_UART_Transmit_DMA>
		}


//		HAL_UART_Transmit(&huart1, "aaaa", 5, 1000);
	}
}
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	200000c0 	.word	0x200000c0
 8000488:	200000bc 	.word	0x200000bc
 800048c:	200000b8 	.word	0x200000b8
 8000490:	40011000 	.word	0x40011000
 8000494:	20000010 	.word	0x20000010
 8000498:	20000014 	.word	0x20000014
 800049c:	20000018 	.word	0x20000018
 80004a0:	08003a7c 	.word	0x08003a7c
 80004a4:	20000094 	.word	0x20000094
 80004a8:	200000a0 	.word	0x200000a0
 80004ac:	200000ac 	.word	0x200000ac
 80004b0:	20000000 	.word	0x20000000
 80004b4:	20000108 	.word	0x20000108

080004b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004bc:	b672      	cpsid	i
}
 80004be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c0:	bf00      	nop
 80004c2:	e7fd      	b.n	80004c0 <Error_Handler+0x8>

080004c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ca:	4b15      	ldr	r3, [pc, #84]	@ (8000520 <HAL_MspInit+0x5c>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	4a14      	ldr	r2, [pc, #80]	@ (8000520 <HAL_MspInit+0x5c>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	6193      	str	r3, [r2, #24]
 80004d6:	4b12      	ldr	r3, [pc, #72]	@ (8000520 <HAL_MspInit+0x5c>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000520 <HAL_MspInit+0x5c>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000520 <HAL_MspInit+0x5c>)
 80004e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004ec:	61d3      	str	r3, [r2, #28]
 80004ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000520 <HAL_MspInit+0x5c>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000524 <HAL_MspInit+0x60>)
 80004fc:	685b      	ldr	r3, [r3, #4]
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	4a04      	ldr	r2, [pc, #16]	@ (8000524 <HAL_MspInit+0x60>)
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000516:	bf00      	nop
 8000518:	3714      	adds	r7, #20
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr
 8000520:	40021000 	.word	0x40021000
 8000524:	40010000 	.word	0x40010000

08000528 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a19      	ldr	r2, [pc, #100]	@ (800059c <HAL_TIM_Base_MspInit+0x74>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d12b      	bne.n	8000592 <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800053a:	4b19      	ldr	r3, [pc, #100]	@ (80005a0 <HAL_TIM_Base_MspInit+0x78>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	4a18      	ldr	r2, [pc, #96]	@ (80005a0 <HAL_TIM_Base_MspInit+0x78>)
 8000540:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000544:	6193      	str	r3, [r2, #24]
 8000546:	4b16      	ldr	r3, [pc, #88]	@ (80005a0 <HAL_TIM_Base_MspInit+0x78>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8000552:	2200      	movs	r2, #0
 8000554:	2100      	movs	r1, #0
 8000556:	2018      	movs	r0, #24
 8000558:	f000 fadb 	bl	8000b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800055c:	2018      	movs	r0, #24
 800055e:	f000 faf4 	bl	8000b4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	2100      	movs	r1, #0
 8000566:	2019      	movs	r0, #25
 8000568:	f000 fad3 	bl	8000b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800056c:	2019      	movs	r0, #25
 800056e:	f000 faec 	bl	8000b4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	2100      	movs	r1, #0
 8000576:	201a      	movs	r0, #26
 8000578:	f000 facb 	bl	8000b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800057c:	201a      	movs	r0, #26
 800057e:	f000 fae4 	bl	8000b4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2100      	movs	r1, #0
 8000586:	201b      	movs	r0, #27
 8000588:	f000 fac3 	bl	8000b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800058c:	201b      	movs	r0, #27
 800058e:	f000 fadc 	bl	8000b4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000592:	bf00      	nop
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40012c00 	.word	0x40012c00
 80005a0:	40021000 	.word	0x40021000

080005a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a47      	ldr	r2, [pc, #284]	@ (80006dc <HAL_UART_MspInit+0x138>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	f040 8086 	bne.w	80006d2 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005c6:	4b46      	ldr	r3, [pc, #280]	@ (80006e0 <HAL_UART_MspInit+0x13c>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	4a45      	ldr	r2, [pc, #276]	@ (80006e0 <HAL_UART_MspInit+0x13c>)
 80005cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005d0:	6193      	str	r3, [r2, #24]
 80005d2:	4b43      	ldr	r3, [pc, #268]	@ (80006e0 <HAL_UART_MspInit+0x13c>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	4b40      	ldr	r3, [pc, #256]	@ (80006e0 <HAL_UART_MspInit+0x13c>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	4a3f      	ldr	r2, [pc, #252]	@ (80006e0 <HAL_UART_MspInit+0x13c>)
 80005e4:	f043 0304 	orr.w	r3, r3, #4
 80005e8:	6193      	str	r3, [r2, #24]
 80005ea:	4b3d      	ldr	r3, [pc, #244]	@ (80006e0 <HAL_UART_MspInit+0x13c>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	f003 0304 	and.w	r3, r3, #4
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80005fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fc:	2302      	movs	r3, #2
 80005fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000600:	2303      	movs	r3, #3
 8000602:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000604:	f107 0310 	add.w	r3, r7, #16
 8000608:	4619      	mov	r1, r3
 800060a:	4836      	ldr	r0, [pc, #216]	@ (80006e4 <HAL_UART_MspInit+0x140>)
 800060c:	f000 fd5a 	bl	80010c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000610:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000614:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061e:	f107 0310 	add.w	r3, r7, #16
 8000622:	4619      	mov	r1, r3
 8000624:	482f      	ldr	r0, [pc, #188]	@ (80006e4 <HAL_UART_MspInit+0x140>)
 8000626:	f000 fd4d 	bl	80010c4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800062a:	4b2f      	ldr	r3, [pc, #188]	@ (80006e8 <HAL_UART_MspInit+0x144>)
 800062c:	4a2f      	ldr	r2, [pc, #188]	@ (80006ec <HAL_UART_MspInit+0x148>)
 800062e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000630:	4b2d      	ldr	r3, [pc, #180]	@ (80006e8 <HAL_UART_MspInit+0x144>)
 8000632:	2200      	movs	r2, #0
 8000634:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000636:	4b2c      	ldr	r3, [pc, #176]	@ (80006e8 <HAL_UART_MspInit+0x144>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800063c:	4b2a      	ldr	r3, [pc, #168]	@ (80006e8 <HAL_UART_MspInit+0x144>)
 800063e:	2280      	movs	r2, #128	@ 0x80
 8000640:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000642:	4b29      	ldr	r3, [pc, #164]	@ (80006e8 <HAL_UART_MspInit+0x144>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000648:	4b27      	ldr	r3, [pc, #156]	@ (80006e8 <HAL_UART_MspInit+0x144>)
 800064a:	2200      	movs	r2, #0
 800064c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800064e:	4b26      	ldr	r3, [pc, #152]	@ (80006e8 <HAL_UART_MspInit+0x144>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000654:	4b24      	ldr	r3, [pc, #144]	@ (80006e8 <HAL_UART_MspInit+0x144>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800065a:	4823      	ldr	r0, [pc, #140]	@ (80006e8 <HAL_UART_MspInit+0x144>)
 800065c:	f000 fa90 	bl	8000b80 <HAL_DMA_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8000666:	f7ff ff27 	bl	80004b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4a1e      	ldr	r2, [pc, #120]	@ (80006e8 <HAL_UART_MspInit+0x144>)
 800066e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000670:	4a1d      	ldr	r2, [pc, #116]	@ (80006e8 <HAL_UART_MspInit+0x144>)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000676:	4b1e      	ldr	r3, [pc, #120]	@ (80006f0 <HAL_UART_MspInit+0x14c>)
 8000678:	4a1e      	ldr	r2, [pc, #120]	@ (80006f4 <HAL_UART_MspInit+0x150>)
 800067a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800067c:	4b1c      	ldr	r3, [pc, #112]	@ (80006f0 <HAL_UART_MspInit+0x14c>)
 800067e:	2210      	movs	r2, #16
 8000680:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000682:	4b1b      	ldr	r3, [pc, #108]	@ (80006f0 <HAL_UART_MspInit+0x14c>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000688:	4b19      	ldr	r3, [pc, #100]	@ (80006f0 <HAL_UART_MspInit+0x14c>)
 800068a:	2280      	movs	r2, #128	@ 0x80
 800068c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800068e:	4b18      	ldr	r3, [pc, #96]	@ (80006f0 <HAL_UART_MspInit+0x14c>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000694:	4b16      	ldr	r3, [pc, #88]	@ (80006f0 <HAL_UART_MspInit+0x14c>)
 8000696:	2200      	movs	r2, #0
 8000698:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800069a:	4b15      	ldr	r3, [pc, #84]	@ (80006f0 <HAL_UART_MspInit+0x14c>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80006a0:	4b13      	ldr	r3, [pc, #76]	@ (80006f0 <HAL_UART_MspInit+0x14c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80006a6:	4812      	ldr	r0, [pc, #72]	@ (80006f0 <HAL_UART_MspInit+0x14c>)
 80006a8:	f000 fa6a 	bl	8000b80 <HAL_DMA_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80006b2:	f7ff ff01 	bl	80004b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4a0d      	ldr	r2, [pc, #52]	@ (80006f0 <HAL_UART_MspInit+0x14c>)
 80006ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80006bc:	4a0c      	ldr	r2, [pc, #48]	@ (80006f0 <HAL_UART_MspInit+0x14c>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2100      	movs	r1, #0
 80006c6:	2025      	movs	r0, #37	@ 0x25
 80006c8:	f000 fa23 	bl	8000b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006cc:	2025      	movs	r0, #37	@ 0x25
 80006ce:	f000 fa3c 	bl	8000b4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006d2:	bf00      	nop
 80006d4:	3720      	adds	r7, #32
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40013800 	.word	0x40013800
 80006e0:	40021000 	.word	0x40021000
 80006e4:	40010800 	.word	0x40010800
 80006e8:	20000150 	.word	0x20000150
 80006ec:	40020058 	.word	0x40020058
 80006f0:	20000194 	.word	0x20000194
 80006f4:	40020044 	.word	0x40020044

080006f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <NMI_Handler+0x4>

08000700 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <HardFault_Handler+0x4>

08000708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <MemManage_Handler+0x4>

08000710 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000714:	bf00      	nop
 8000716:	e7fd      	b.n	8000714 <BusFault_Handler+0x4>

08000718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800071c:	bf00      	nop
 800071e:	e7fd      	b.n	800071c <UsageFault_Handler+0x4>

08000720 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr

0800072c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr

08000744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000748:	f000 f8f0 	bl	800092c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000754:	4802      	ldr	r0, [pc, #8]	@ (8000760 <DMA1_Channel4_IRQHandler+0x10>)
 8000756:	f000 fb81 	bl	8000e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000194 	.word	0x20000194

08000764 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000768:	4802      	ldr	r0, [pc, #8]	@ (8000774 <DMA1_Channel5_IRQHandler+0x10>)
 800076a:	f000 fb77 	bl	8000e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000150 	.word	0x20000150

08000778 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800077c:	4802      	ldr	r0, [pc, #8]	@ (8000788 <TIM1_BRK_IRQHandler+0x10>)
 800077e:	f001 faef 	bl	8001d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200000c0 	.word	0x200000c0

0800078c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000790:	4802      	ldr	r0, [pc, #8]	@ (800079c <TIM1_UP_IRQHandler+0x10>)
 8000792:	f001 fae5 	bl	8001d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200000c0 	.word	0x200000c0

080007a0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007a4:	4802      	ldr	r0, [pc, #8]	@ (80007b0 <TIM1_TRG_COM_IRQHandler+0x10>)
 80007a6:	f001 fadb 	bl	8001d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000c0 	.word	0x200000c0

080007b4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007b8:	4802      	ldr	r0, [pc, #8]	@ (80007c4 <TIM1_CC_IRQHandler+0x10>)
 80007ba:	f001 fad1 	bl	8001d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000c0 	.word	0x200000c0

080007c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007cc:	4802      	ldr	r0, [pc, #8]	@ (80007d8 <USART1_IRQHandler+0x10>)
 80007ce:	f001 fee3 	bl	8002598 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000108 	.word	0x20000108

080007dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007e4:	4a14      	ldr	r2, [pc, #80]	@ (8000838 <_sbrk+0x5c>)
 80007e6:	4b15      	ldr	r3, [pc, #84]	@ (800083c <_sbrk+0x60>)
 80007e8:	1ad3      	subs	r3, r2, r3
 80007ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007f0:	4b13      	ldr	r3, [pc, #76]	@ (8000840 <_sbrk+0x64>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d102      	bne.n	80007fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007f8:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <_sbrk+0x64>)
 80007fa:	4a12      	ldr	r2, [pc, #72]	@ (8000844 <_sbrk+0x68>)
 80007fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007fe:	4b10      	ldr	r3, [pc, #64]	@ (8000840 <_sbrk+0x64>)
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4413      	add	r3, r2
 8000806:	693a      	ldr	r2, [r7, #16]
 8000808:	429a      	cmp	r2, r3
 800080a:	d207      	bcs.n	800081c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800080c:	f002 fca2 	bl	8003154 <__errno>
 8000810:	4603      	mov	r3, r0
 8000812:	220c      	movs	r2, #12
 8000814:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000816:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800081a:	e009      	b.n	8000830 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800081c:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <_sbrk+0x64>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000822:	4b07      	ldr	r3, [pc, #28]	@ (8000840 <_sbrk+0x64>)
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4413      	add	r3, r2
 800082a:	4a05      	ldr	r2, [pc, #20]	@ (8000840 <_sbrk+0x64>)
 800082c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800082e:	68fb      	ldr	r3, [r7, #12]
}
 8000830:	4618      	mov	r0, r3
 8000832:	3718      	adds	r7, #24
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20005000 	.word	0x20005000
 800083c:	00000400 	.word	0x00000400
 8000840:	200001d8 	.word	0x200001d8
 8000844:	20000328 	.word	0x20000328

08000848 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr

08000854 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000854:	f7ff fff8 	bl	8000848 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000858:	480b      	ldr	r0, [pc, #44]	@ (8000888 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800085a:	490c      	ldr	r1, [pc, #48]	@ (800088c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800085c:	4a0c      	ldr	r2, [pc, #48]	@ (8000890 <LoopFillZerobss+0x16>)
  movs r3, #0
 800085e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000860:	e002      	b.n	8000868 <LoopCopyDataInit>

08000862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000866:	3304      	adds	r3, #4

08000868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800086a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800086c:	d3f9      	bcc.n	8000862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800086e:	4a09      	ldr	r2, [pc, #36]	@ (8000894 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000870:	4c09      	ldr	r4, [pc, #36]	@ (8000898 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000874:	e001      	b.n	800087a <LoopFillZerobss>

08000876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000878:	3204      	adds	r2, #4

0800087a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800087a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800087c:	d3fb      	bcc.n	8000876 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800087e:	f002 fc6f 	bl	8003160 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000882:	f7ff fc63 	bl	800014c <main>
  bx lr
 8000886:	4770      	bx	lr
  ldr r0, =_sdata
 8000888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800088c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000890:	08003ae8 	.word	0x08003ae8
  ldr r2, =_sbss
 8000894:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000898:	20000328 	.word	0x20000328

0800089c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800089c:	e7fe      	b.n	800089c <ADC1_2_IRQHandler>
	...

080008a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a4:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <HAL_Init+0x28>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a07      	ldr	r2, [pc, #28]	@ (80008c8 <HAL_Init+0x28>)
 80008aa:	f043 0310 	orr.w	r3, r3, #16
 80008ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b0:	2003      	movs	r0, #3
 80008b2:	f000 f923 	bl	8000afc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008b6:	200f      	movs	r0, #15
 80008b8:	f000 f808 	bl	80008cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008bc:	f7ff fe02 	bl	80004c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40022000 	.word	0x40022000

080008cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d4:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <HAL_InitTick+0x54>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <HAL_InitTick+0x58>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	4619      	mov	r1, r3
 80008de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 f93b 	bl	8000b66 <HAL_SYSTICK_Config>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e00e      	b.n	8000918 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2b0f      	cmp	r3, #15
 80008fe:	d80a      	bhi.n	8000916 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000900:	2200      	movs	r2, #0
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000908:	f000 f903 	bl	8000b12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800090c:	4a06      	ldr	r2, [pc, #24]	@ (8000928 <HAL_InitTick+0x5c>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000912:	2300      	movs	r3, #0
 8000914:	e000      	b.n	8000918 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
}
 8000918:	4618      	mov	r0, r3
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	2000001c 	.word	0x2000001c
 8000924:	20000024 	.word	0x20000024
 8000928:	20000020 	.word	0x20000020

0800092c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000930:	4b05      	ldr	r3, [pc, #20]	@ (8000948 <HAL_IncTick+0x1c>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	461a      	mov	r2, r3
 8000936:	4b05      	ldr	r3, [pc, #20]	@ (800094c <HAL_IncTick+0x20>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4413      	add	r3, r2
 800093c:	4a03      	ldr	r2, [pc, #12]	@ (800094c <HAL_IncTick+0x20>)
 800093e:	6013      	str	r3, [r2, #0]
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr
 8000948:	20000024 	.word	0x20000024
 800094c:	200001dc 	.word	0x200001dc

08000950 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return uwTick;
 8000954:	4b02      	ldr	r3, [pc, #8]	@ (8000960 <HAL_GetTick+0x10>)
 8000956:	681b      	ldr	r3, [r3, #0]
}
 8000958:	4618      	mov	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	200001dc 	.word	0x200001dc

08000964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000974:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800097a:	68ba      	ldr	r2, [r7, #8]
 800097c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000980:	4013      	ands	r3, r2
 8000982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800098c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000996:	4a04      	ldr	r2, [pc, #16]	@ (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	60d3      	str	r3, [r2, #12]
}
 800099c:	bf00      	nop
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b0:	4b04      	ldr	r3, [pc, #16]	@ (80009c4 <__NVIC_GetPriorityGrouping+0x18>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	0a1b      	lsrs	r3, r3, #8
 80009b6:	f003 0307 	and.w	r3, r3, #7
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	db0b      	blt.n	80009f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	f003 021f 	and.w	r2, r3, #31
 80009e0:	4906      	ldr	r1, [pc, #24]	@ (80009fc <__NVIC_EnableIRQ+0x34>)
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	095b      	lsrs	r3, r3, #5
 80009e8:	2001      	movs	r0, #1
 80009ea:	fa00 f202 	lsl.w	r2, r0, r2
 80009ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr
 80009fc:	e000e100 	.word	0xe000e100

08000a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	6039      	str	r1, [r7, #0]
 8000a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	db0a      	blt.n	8000a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	490c      	ldr	r1, [pc, #48]	@ (8000a4c <__NVIC_SetPriority+0x4c>)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	0112      	lsls	r2, r2, #4
 8000a20:	b2d2      	uxtb	r2, r2
 8000a22:	440b      	add	r3, r1
 8000a24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a28:	e00a      	b.n	8000a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4908      	ldr	r1, [pc, #32]	@ (8000a50 <__NVIC_SetPriority+0x50>)
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	f003 030f 	and.w	r3, r3, #15
 8000a36:	3b04      	subs	r3, #4
 8000a38:	0112      	lsls	r2, r2, #4
 8000a3a:	b2d2      	uxtb	r2, r2
 8000a3c:	440b      	add	r3, r1
 8000a3e:	761a      	strb	r2, [r3, #24]
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000e100 	.word	0xe000e100
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b089      	sub	sp, #36	@ 0x24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	f1c3 0307 	rsb	r3, r3, #7
 8000a6e:	2b04      	cmp	r3, #4
 8000a70:	bf28      	it	cs
 8000a72:	2304      	movcs	r3, #4
 8000a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3304      	adds	r3, #4
 8000a7a:	2b06      	cmp	r3, #6
 8000a7c:	d902      	bls.n	8000a84 <NVIC_EncodePriority+0x30>
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	3b03      	subs	r3, #3
 8000a82:	e000      	b.n	8000a86 <NVIC_EncodePriority+0x32>
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43da      	mvns	r2, r3
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	401a      	ands	r2, r3
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa6:	43d9      	mvns	r1, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aac:	4313      	orrs	r3, r2
         );
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3724      	adds	r7, #36	@ 0x24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ac8:	d301      	bcc.n	8000ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aca:	2301      	movs	r3, #1
 8000acc:	e00f      	b.n	8000aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ace:	4a0a      	ldr	r2, [pc, #40]	@ (8000af8 <SysTick_Config+0x40>)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ad6:	210f      	movs	r1, #15
 8000ad8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000adc:	f7ff ff90 	bl	8000a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae0:	4b05      	ldr	r3, [pc, #20]	@ (8000af8 <SysTick_Config+0x40>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ae6:	4b04      	ldr	r3, [pc, #16]	@ (8000af8 <SysTick_Config+0x40>)
 8000ae8:	2207      	movs	r2, #7
 8000aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	e000e010 	.word	0xe000e010

08000afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f7ff ff2d 	bl	8000964 <__NVIC_SetPriorityGrouping>
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b086      	sub	sp, #24
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	4603      	mov	r3, r0
 8000b1a:	60b9      	str	r1, [r7, #8]
 8000b1c:	607a      	str	r2, [r7, #4]
 8000b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b24:	f7ff ff42 	bl	80009ac <__NVIC_GetPriorityGrouping>
 8000b28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	68b9      	ldr	r1, [r7, #8]
 8000b2e:	6978      	ldr	r0, [r7, #20]
 8000b30:	f7ff ff90 	bl	8000a54 <NVIC_EncodePriority>
 8000b34:	4602      	mov	r2, r0
 8000b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ff5f 	bl	8000a00 <__NVIC_SetPriority>
}
 8000b42:	bf00      	nop
 8000b44:	3718      	adds	r7, #24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	4603      	mov	r3, r0
 8000b52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff ff35 	bl	80009c8 <__NVIC_EnableIRQ>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b082      	sub	sp, #8
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f7ff ffa2 	bl	8000ab8 <SysTick_Config>
 8000b74:	4603      	mov	r3, r0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d101      	bne.n	8000b96 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e043      	b.n	8000c1e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	4b22      	ldr	r3, [pc, #136]	@ (8000c28 <HAL_DMA_Init+0xa8>)
 8000b9e:	4413      	add	r3, r2
 8000ba0:	4a22      	ldr	r2, [pc, #136]	@ (8000c2c <HAL_DMA_Init+0xac>)
 8000ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba6:	091b      	lsrs	r3, r3, #4
 8000ba8:	009a      	lsls	r2, r3, #2
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a1f      	ldr	r2, [pc, #124]	@ (8000c30 <HAL_DMA_Init+0xb0>)
 8000bb2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2202      	movs	r2, #2
 8000bb8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000bca:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000bce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000bd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	68db      	ldr	r3, [r3, #12]
 8000bde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bf0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	69db      	ldr	r3, [r3, #28]
 8000bf6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000bf8:	68fa      	ldr	r2, [r7, #12]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2201      	movs	r2, #1
 8000c10:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2200      	movs	r2, #0
 8000c18:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr
 8000c28:	bffdfff8 	.word	0xbffdfff8
 8000c2c:	cccccccd 	.word	0xcccccccd
 8000c30:	40020000 	.word	0x40020000

08000c34 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
 8000c40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c42:	2300      	movs	r3, #0
 8000c44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d101      	bne.n	8000c54 <HAL_DMA_Start_IT+0x20>
 8000c50:	2302      	movs	r3, #2
 8000c52:	e04b      	b.n	8000cec <HAL_DMA_Start_IT+0xb8>
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	2201      	movs	r2, #1
 8000c58:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d13a      	bne.n	8000cde <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	2202      	movs	r2, #2
 8000c6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	2200      	movs	r2, #0
 8000c74:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f022 0201 	bic.w	r2, r2, #1
 8000c84:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	68b9      	ldr	r1, [r7, #8]
 8000c8c:	68f8      	ldr	r0, [r7, #12]
 8000c8e:	f000 f9eb 	bl	8001068 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d008      	beq.n	8000cac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f042 020e 	orr.w	r2, r2, #14
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	e00f      	b.n	8000ccc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f022 0204 	bic.w	r2, r2, #4
 8000cba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f042 020a 	orr.w	r2, r2, #10
 8000cca:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f042 0201 	orr.w	r2, r2, #1
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	e005      	b.n	8000cea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d008      	beq.n	8000d1e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2204      	movs	r2, #4
 8000d10:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2200      	movs	r2, #0
 8000d16:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e020      	b.n	8000d60 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f022 020e 	bic.w	r2, r2, #14
 8000d2c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f022 0201 	bic.w	r2, r2, #1
 8000d3c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d46:	2101      	movs	r1, #1
 8000d48:	fa01 f202 	lsl.w	r2, r1, r2
 8000d4c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2201      	movs	r2, #1
 8000d52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
	...

08000d6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d74:	2300      	movs	r3, #0
 8000d76:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d005      	beq.n	8000d90 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2204      	movs	r2, #4
 8000d88:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	73fb      	strb	r3, [r7, #15]
 8000d8e:	e051      	b.n	8000e34 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f022 020e 	bic.w	r2, r2, #14
 8000d9e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f022 0201 	bic.w	r2, r2, #1
 8000dae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a22      	ldr	r2, [pc, #136]	@ (8000e40 <HAL_DMA_Abort_IT+0xd4>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d029      	beq.n	8000e0e <HAL_DMA_Abort_IT+0xa2>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a21      	ldr	r2, [pc, #132]	@ (8000e44 <HAL_DMA_Abort_IT+0xd8>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d022      	beq.n	8000e0a <HAL_DMA_Abort_IT+0x9e>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a1f      	ldr	r2, [pc, #124]	@ (8000e48 <HAL_DMA_Abort_IT+0xdc>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d01a      	beq.n	8000e04 <HAL_DMA_Abort_IT+0x98>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8000e4c <HAL_DMA_Abort_IT+0xe0>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d012      	beq.n	8000dfe <HAL_DMA_Abort_IT+0x92>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a1c      	ldr	r2, [pc, #112]	@ (8000e50 <HAL_DMA_Abort_IT+0xe4>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d00a      	beq.n	8000df8 <HAL_DMA_Abort_IT+0x8c>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a1b      	ldr	r2, [pc, #108]	@ (8000e54 <HAL_DMA_Abort_IT+0xe8>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d102      	bne.n	8000df2 <HAL_DMA_Abort_IT+0x86>
 8000dec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000df0:	e00e      	b.n	8000e10 <HAL_DMA_Abort_IT+0xa4>
 8000df2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000df6:	e00b      	b.n	8000e10 <HAL_DMA_Abort_IT+0xa4>
 8000df8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dfc:	e008      	b.n	8000e10 <HAL_DMA_Abort_IT+0xa4>
 8000dfe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e02:	e005      	b.n	8000e10 <HAL_DMA_Abort_IT+0xa4>
 8000e04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e08:	e002      	b.n	8000e10 <HAL_DMA_Abort_IT+0xa4>
 8000e0a:	2310      	movs	r3, #16
 8000e0c:	e000      	b.n	8000e10 <HAL_DMA_Abort_IT+0xa4>
 8000e0e:	2301      	movs	r3, #1
 8000e10:	4a11      	ldr	r2, [pc, #68]	@ (8000e58 <HAL_DMA_Abort_IT+0xec>)
 8000e12:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2201      	movs	r2, #1
 8000e18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d003      	beq.n	8000e34 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	4798      	blx	r3
    } 
  }
  return status;
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40020008 	.word	0x40020008
 8000e44:	4002001c 	.word	0x4002001c
 8000e48:	40020030 	.word	0x40020030
 8000e4c:	40020044 	.word	0x40020044
 8000e50:	40020058 	.word	0x40020058
 8000e54:	4002006c 	.word	0x4002006c
 8000e58:	40020000 	.word	0x40020000

08000e5c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e78:	2204      	movs	r2, #4
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d04f      	beq.n	8000f24 <HAL_DMA_IRQHandler+0xc8>
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	f003 0304 	and.w	r3, r3, #4
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d04a      	beq.n	8000f24 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 0320 	and.w	r3, r3, #32
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d107      	bne.n	8000eac <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f022 0204 	bic.w	r2, r2, #4
 8000eaa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a66      	ldr	r2, [pc, #408]	@ (800104c <HAL_DMA_IRQHandler+0x1f0>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d029      	beq.n	8000f0a <HAL_DMA_IRQHandler+0xae>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a65      	ldr	r2, [pc, #404]	@ (8001050 <HAL_DMA_IRQHandler+0x1f4>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d022      	beq.n	8000f06 <HAL_DMA_IRQHandler+0xaa>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a63      	ldr	r2, [pc, #396]	@ (8001054 <HAL_DMA_IRQHandler+0x1f8>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d01a      	beq.n	8000f00 <HAL_DMA_IRQHandler+0xa4>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a62      	ldr	r2, [pc, #392]	@ (8001058 <HAL_DMA_IRQHandler+0x1fc>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d012      	beq.n	8000efa <HAL_DMA_IRQHandler+0x9e>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a60      	ldr	r2, [pc, #384]	@ (800105c <HAL_DMA_IRQHandler+0x200>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d00a      	beq.n	8000ef4 <HAL_DMA_IRQHandler+0x98>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a5f      	ldr	r2, [pc, #380]	@ (8001060 <HAL_DMA_IRQHandler+0x204>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d102      	bne.n	8000eee <HAL_DMA_IRQHandler+0x92>
 8000ee8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000eec:	e00e      	b.n	8000f0c <HAL_DMA_IRQHandler+0xb0>
 8000eee:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000ef2:	e00b      	b.n	8000f0c <HAL_DMA_IRQHandler+0xb0>
 8000ef4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000ef8:	e008      	b.n	8000f0c <HAL_DMA_IRQHandler+0xb0>
 8000efa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000efe:	e005      	b.n	8000f0c <HAL_DMA_IRQHandler+0xb0>
 8000f00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f04:	e002      	b.n	8000f0c <HAL_DMA_IRQHandler+0xb0>
 8000f06:	2340      	movs	r3, #64	@ 0x40
 8000f08:	e000      	b.n	8000f0c <HAL_DMA_IRQHandler+0xb0>
 8000f0a:	2304      	movs	r3, #4
 8000f0c:	4a55      	ldr	r2, [pc, #340]	@ (8001064 <HAL_DMA_IRQHandler+0x208>)
 8000f0e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	f000 8094 	beq.w	8001042 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f22:	e08e      	b.n	8001042 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f28:	2202      	movs	r2, #2
 8000f2a:	409a      	lsls	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d056      	beq.n	8000fe2 <HAL_DMA_IRQHandler+0x186>
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d051      	beq.n	8000fe2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f003 0320 	and.w	r3, r3, #32
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d10b      	bne.n	8000f64 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f022 020a 	bic.w	r2, r2, #10
 8000f5a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a38      	ldr	r2, [pc, #224]	@ (800104c <HAL_DMA_IRQHandler+0x1f0>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d029      	beq.n	8000fc2 <HAL_DMA_IRQHandler+0x166>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a37      	ldr	r2, [pc, #220]	@ (8001050 <HAL_DMA_IRQHandler+0x1f4>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d022      	beq.n	8000fbe <HAL_DMA_IRQHandler+0x162>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a35      	ldr	r2, [pc, #212]	@ (8001054 <HAL_DMA_IRQHandler+0x1f8>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d01a      	beq.n	8000fb8 <HAL_DMA_IRQHandler+0x15c>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a34      	ldr	r2, [pc, #208]	@ (8001058 <HAL_DMA_IRQHandler+0x1fc>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d012      	beq.n	8000fb2 <HAL_DMA_IRQHandler+0x156>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a32      	ldr	r2, [pc, #200]	@ (800105c <HAL_DMA_IRQHandler+0x200>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d00a      	beq.n	8000fac <HAL_DMA_IRQHandler+0x150>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a31      	ldr	r2, [pc, #196]	@ (8001060 <HAL_DMA_IRQHandler+0x204>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d102      	bne.n	8000fa6 <HAL_DMA_IRQHandler+0x14a>
 8000fa0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000fa4:	e00e      	b.n	8000fc4 <HAL_DMA_IRQHandler+0x168>
 8000fa6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000faa:	e00b      	b.n	8000fc4 <HAL_DMA_IRQHandler+0x168>
 8000fac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fb0:	e008      	b.n	8000fc4 <HAL_DMA_IRQHandler+0x168>
 8000fb2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fb6:	e005      	b.n	8000fc4 <HAL_DMA_IRQHandler+0x168>
 8000fb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fbc:	e002      	b.n	8000fc4 <HAL_DMA_IRQHandler+0x168>
 8000fbe:	2320      	movs	r3, #32
 8000fc0:	e000      	b.n	8000fc4 <HAL_DMA_IRQHandler+0x168>
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	4a27      	ldr	r2, [pc, #156]	@ (8001064 <HAL_DMA_IRQHandler+0x208>)
 8000fc6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d034      	beq.n	8001042 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000fe0:	e02f      	b.n	8001042 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe6:	2208      	movs	r2, #8
 8000fe8:	409a      	lsls	r2, r3
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	4013      	ands	r3, r2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d028      	beq.n	8001044 <HAL_DMA_IRQHandler+0x1e8>
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	f003 0308 	and.w	r3, r3, #8
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d023      	beq.n	8001044 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f022 020e 	bic.w	r2, r2, #14
 800100a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001014:	2101      	movs	r1, #1
 8001016:	fa01 f202 	lsl.w	r2, r1, r2
 800101a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2201      	movs	r2, #1
 8001020:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2201      	movs	r2, #1
 8001026:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	2b00      	cmp	r3, #0
 8001038:	d004      	beq.n	8001044 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	4798      	blx	r3
    }
  }
  return;
 8001042:	bf00      	nop
 8001044:	bf00      	nop
}
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40020008 	.word	0x40020008
 8001050:	4002001c 	.word	0x4002001c
 8001054:	40020030 	.word	0x40020030
 8001058:	40020044 	.word	0x40020044
 800105c:	40020058 	.word	0x40020058
 8001060:	4002006c 	.word	0x4002006c
 8001064:	40020000 	.word	0x40020000

08001068 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800107e:	2101      	movs	r1, #1
 8001080:	fa01 f202 	lsl.w	r2, r1, r2
 8001084:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	2b10      	cmp	r3, #16
 8001094:	d108      	bne.n	80010a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80010a6:	e007      	b.n	80010b8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	68ba      	ldr	r2, [r7, #8]
 80010ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	60da      	str	r2, [r3, #12]
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr
	...

080010c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b08b      	sub	sp, #44	@ 0x2c
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ce:	2300      	movs	r3, #0
 80010d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010d2:	2300      	movs	r3, #0
 80010d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010d6:	e169      	b.n	80013ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010d8:	2201      	movs	r2, #1
 80010da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	69fa      	ldr	r2, [r7, #28]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	f040 8158 	bne.w	80013a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	4a9a      	ldr	r2, [pc, #616]	@ (8001364 <HAL_GPIO_Init+0x2a0>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d05e      	beq.n	80011be <HAL_GPIO_Init+0xfa>
 8001100:	4a98      	ldr	r2, [pc, #608]	@ (8001364 <HAL_GPIO_Init+0x2a0>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d875      	bhi.n	80011f2 <HAL_GPIO_Init+0x12e>
 8001106:	4a98      	ldr	r2, [pc, #608]	@ (8001368 <HAL_GPIO_Init+0x2a4>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d058      	beq.n	80011be <HAL_GPIO_Init+0xfa>
 800110c:	4a96      	ldr	r2, [pc, #600]	@ (8001368 <HAL_GPIO_Init+0x2a4>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d86f      	bhi.n	80011f2 <HAL_GPIO_Init+0x12e>
 8001112:	4a96      	ldr	r2, [pc, #600]	@ (800136c <HAL_GPIO_Init+0x2a8>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d052      	beq.n	80011be <HAL_GPIO_Init+0xfa>
 8001118:	4a94      	ldr	r2, [pc, #592]	@ (800136c <HAL_GPIO_Init+0x2a8>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d869      	bhi.n	80011f2 <HAL_GPIO_Init+0x12e>
 800111e:	4a94      	ldr	r2, [pc, #592]	@ (8001370 <HAL_GPIO_Init+0x2ac>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d04c      	beq.n	80011be <HAL_GPIO_Init+0xfa>
 8001124:	4a92      	ldr	r2, [pc, #584]	@ (8001370 <HAL_GPIO_Init+0x2ac>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d863      	bhi.n	80011f2 <HAL_GPIO_Init+0x12e>
 800112a:	4a92      	ldr	r2, [pc, #584]	@ (8001374 <HAL_GPIO_Init+0x2b0>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d046      	beq.n	80011be <HAL_GPIO_Init+0xfa>
 8001130:	4a90      	ldr	r2, [pc, #576]	@ (8001374 <HAL_GPIO_Init+0x2b0>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d85d      	bhi.n	80011f2 <HAL_GPIO_Init+0x12e>
 8001136:	2b12      	cmp	r3, #18
 8001138:	d82a      	bhi.n	8001190 <HAL_GPIO_Init+0xcc>
 800113a:	2b12      	cmp	r3, #18
 800113c:	d859      	bhi.n	80011f2 <HAL_GPIO_Init+0x12e>
 800113e:	a201      	add	r2, pc, #4	@ (adr r2, 8001144 <HAL_GPIO_Init+0x80>)
 8001140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001144:	080011bf 	.word	0x080011bf
 8001148:	08001199 	.word	0x08001199
 800114c:	080011ab 	.word	0x080011ab
 8001150:	080011ed 	.word	0x080011ed
 8001154:	080011f3 	.word	0x080011f3
 8001158:	080011f3 	.word	0x080011f3
 800115c:	080011f3 	.word	0x080011f3
 8001160:	080011f3 	.word	0x080011f3
 8001164:	080011f3 	.word	0x080011f3
 8001168:	080011f3 	.word	0x080011f3
 800116c:	080011f3 	.word	0x080011f3
 8001170:	080011f3 	.word	0x080011f3
 8001174:	080011f3 	.word	0x080011f3
 8001178:	080011f3 	.word	0x080011f3
 800117c:	080011f3 	.word	0x080011f3
 8001180:	080011f3 	.word	0x080011f3
 8001184:	080011f3 	.word	0x080011f3
 8001188:	080011a1 	.word	0x080011a1
 800118c:	080011b5 	.word	0x080011b5
 8001190:	4a79      	ldr	r2, [pc, #484]	@ (8001378 <HAL_GPIO_Init+0x2b4>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d013      	beq.n	80011be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001196:	e02c      	b.n	80011f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	623b      	str	r3, [r7, #32]
          break;
 800119e:	e029      	b.n	80011f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	3304      	adds	r3, #4
 80011a6:	623b      	str	r3, [r7, #32]
          break;
 80011a8:	e024      	b.n	80011f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	3308      	adds	r3, #8
 80011b0:	623b      	str	r3, [r7, #32]
          break;
 80011b2:	e01f      	b.n	80011f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	330c      	adds	r3, #12
 80011ba:	623b      	str	r3, [r7, #32]
          break;
 80011bc:	e01a      	b.n	80011f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d102      	bne.n	80011cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011c6:	2304      	movs	r3, #4
 80011c8:	623b      	str	r3, [r7, #32]
          break;
 80011ca:	e013      	b.n	80011f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d105      	bne.n	80011e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011d4:	2308      	movs	r3, #8
 80011d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	69fa      	ldr	r2, [r7, #28]
 80011dc:	611a      	str	r2, [r3, #16]
          break;
 80011de:	e009      	b.n	80011f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011e0:	2308      	movs	r3, #8
 80011e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	69fa      	ldr	r2, [r7, #28]
 80011e8:	615a      	str	r2, [r3, #20]
          break;
 80011ea:	e003      	b.n	80011f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
          break;
 80011f0:	e000      	b.n	80011f4 <HAL_GPIO_Init+0x130>
          break;
 80011f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	2bff      	cmp	r3, #255	@ 0xff
 80011f8:	d801      	bhi.n	80011fe <HAL_GPIO_Init+0x13a>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	e001      	b.n	8001202 <HAL_GPIO_Init+0x13e>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3304      	adds	r3, #4
 8001202:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	2bff      	cmp	r3, #255	@ 0xff
 8001208:	d802      	bhi.n	8001210 <HAL_GPIO_Init+0x14c>
 800120a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	e002      	b.n	8001216 <HAL_GPIO_Init+0x152>
 8001210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001212:	3b08      	subs	r3, #8
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	210f      	movs	r1, #15
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	fa01 f303 	lsl.w	r3, r1, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	401a      	ands	r2, r3
 8001228:	6a39      	ldr	r1, [r7, #32]
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	fa01 f303 	lsl.w	r3, r1, r3
 8001230:	431a      	orrs	r2, r3
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800123e:	2b00      	cmp	r3, #0
 8001240:	f000 80b1 	beq.w	80013a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001244:	4b4d      	ldr	r3, [pc, #308]	@ (800137c <HAL_GPIO_Init+0x2b8>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	4a4c      	ldr	r2, [pc, #304]	@ (800137c <HAL_GPIO_Init+0x2b8>)
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	6193      	str	r3, [r2, #24]
 8001250:	4b4a      	ldr	r3, [pc, #296]	@ (800137c <HAL_GPIO_Init+0x2b8>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800125c:	4a48      	ldr	r2, [pc, #288]	@ (8001380 <HAL_GPIO_Init+0x2bc>)
 800125e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001260:	089b      	lsrs	r3, r3, #2
 8001262:	3302      	adds	r3, #2
 8001264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001268:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800126a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	220f      	movs	r2, #15
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	4013      	ands	r3, r2
 800127e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a40      	ldr	r2, [pc, #256]	@ (8001384 <HAL_GPIO_Init+0x2c0>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d013      	beq.n	80012b0 <HAL_GPIO_Init+0x1ec>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a3f      	ldr	r2, [pc, #252]	@ (8001388 <HAL_GPIO_Init+0x2c4>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d00d      	beq.n	80012ac <HAL_GPIO_Init+0x1e8>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a3e      	ldr	r2, [pc, #248]	@ (800138c <HAL_GPIO_Init+0x2c8>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d007      	beq.n	80012a8 <HAL_GPIO_Init+0x1e4>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a3d      	ldr	r2, [pc, #244]	@ (8001390 <HAL_GPIO_Init+0x2cc>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d101      	bne.n	80012a4 <HAL_GPIO_Init+0x1e0>
 80012a0:	2303      	movs	r3, #3
 80012a2:	e006      	b.n	80012b2 <HAL_GPIO_Init+0x1ee>
 80012a4:	2304      	movs	r3, #4
 80012a6:	e004      	b.n	80012b2 <HAL_GPIO_Init+0x1ee>
 80012a8:	2302      	movs	r3, #2
 80012aa:	e002      	b.n	80012b2 <HAL_GPIO_Init+0x1ee>
 80012ac:	2301      	movs	r3, #1
 80012ae:	e000      	b.n	80012b2 <HAL_GPIO_Init+0x1ee>
 80012b0:	2300      	movs	r3, #0
 80012b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012b4:	f002 0203 	and.w	r2, r2, #3
 80012b8:	0092      	lsls	r2, r2, #2
 80012ba:	4093      	lsls	r3, r2
 80012bc:	68fa      	ldr	r2, [r7, #12]
 80012be:	4313      	orrs	r3, r2
 80012c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012c2:	492f      	ldr	r1, [pc, #188]	@ (8001380 <HAL_GPIO_Init+0x2bc>)
 80012c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c6:	089b      	lsrs	r3, r3, #2
 80012c8:	3302      	adds	r3, #2
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d006      	beq.n	80012ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001394 <HAL_GPIO_Init+0x2d0>)
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	492c      	ldr	r1, [pc, #176]	@ (8001394 <HAL_GPIO_Init+0x2d0>)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	608b      	str	r3, [r1, #8]
 80012e8:	e006      	b.n	80012f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001394 <HAL_GPIO_Init+0x2d0>)
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	4928      	ldr	r1, [pc, #160]	@ (8001394 <HAL_GPIO_Init+0x2d0>)
 80012f4:	4013      	ands	r3, r2
 80012f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d006      	beq.n	8001312 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001304:	4b23      	ldr	r3, [pc, #140]	@ (8001394 <HAL_GPIO_Init+0x2d0>)
 8001306:	68da      	ldr	r2, [r3, #12]
 8001308:	4922      	ldr	r1, [pc, #136]	@ (8001394 <HAL_GPIO_Init+0x2d0>)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	4313      	orrs	r3, r2
 800130e:	60cb      	str	r3, [r1, #12]
 8001310:	e006      	b.n	8001320 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001312:	4b20      	ldr	r3, [pc, #128]	@ (8001394 <HAL_GPIO_Init+0x2d0>)
 8001314:	68da      	ldr	r2, [r3, #12]
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	43db      	mvns	r3, r3
 800131a:	491e      	ldr	r1, [pc, #120]	@ (8001394 <HAL_GPIO_Init+0x2d0>)
 800131c:	4013      	ands	r3, r2
 800131e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d006      	beq.n	800133a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800132c:	4b19      	ldr	r3, [pc, #100]	@ (8001394 <HAL_GPIO_Init+0x2d0>)
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	4918      	ldr	r1, [pc, #96]	@ (8001394 <HAL_GPIO_Init+0x2d0>)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	4313      	orrs	r3, r2
 8001336:	604b      	str	r3, [r1, #4]
 8001338:	e006      	b.n	8001348 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800133a:	4b16      	ldr	r3, [pc, #88]	@ (8001394 <HAL_GPIO_Init+0x2d0>)
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	43db      	mvns	r3, r3
 8001342:	4914      	ldr	r1, [pc, #80]	@ (8001394 <HAL_GPIO_Init+0x2d0>)
 8001344:	4013      	ands	r3, r2
 8001346:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d021      	beq.n	8001398 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001354:	4b0f      	ldr	r3, [pc, #60]	@ (8001394 <HAL_GPIO_Init+0x2d0>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	490e      	ldr	r1, [pc, #56]	@ (8001394 <HAL_GPIO_Init+0x2d0>)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	4313      	orrs	r3, r2
 800135e:	600b      	str	r3, [r1, #0]
 8001360:	e021      	b.n	80013a6 <HAL_GPIO_Init+0x2e2>
 8001362:	bf00      	nop
 8001364:	10320000 	.word	0x10320000
 8001368:	10310000 	.word	0x10310000
 800136c:	10220000 	.word	0x10220000
 8001370:	10210000 	.word	0x10210000
 8001374:	10120000 	.word	0x10120000
 8001378:	10110000 	.word	0x10110000
 800137c:	40021000 	.word	0x40021000
 8001380:	40010000 	.word	0x40010000
 8001384:	40010800 	.word	0x40010800
 8001388:	40010c00 	.word	0x40010c00
 800138c:	40011000 	.word	0x40011000
 8001390:	40011400 	.word	0x40011400
 8001394:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001398:	4b0b      	ldr	r3, [pc, #44]	@ (80013c8 <HAL_GPIO_Init+0x304>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	43db      	mvns	r3, r3
 80013a0:	4909      	ldr	r1, [pc, #36]	@ (80013c8 <HAL_GPIO_Init+0x304>)
 80013a2:	4013      	ands	r3, r2
 80013a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a8:	3301      	adds	r3, #1
 80013aa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b2:	fa22 f303 	lsr.w	r3, r2, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f47f ae8e 	bne.w	80010d8 <HAL_GPIO_Init+0x14>
  }
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	372c      	adds	r7, #44	@ 0x2c
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	40010400 	.word	0x40010400

080013cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	807b      	strh	r3, [r7, #2]
 80013d8:	4613      	mov	r3, r2
 80013da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013dc:	787b      	ldrb	r3, [r7, #1]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013e2:	887a      	ldrh	r2, [r7, #2]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013e8:	e003      	b.n	80013f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013ea:	887b      	ldrh	r3, [r7, #2]
 80013ec:	041a      	lsls	r2, r3, #16
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	611a      	str	r2, [r3, #16]
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr

080013fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e272      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	f000 8087 	beq.w	800152a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800141c:	4b92      	ldr	r3, [pc, #584]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 030c 	and.w	r3, r3, #12
 8001424:	2b04      	cmp	r3, #4
 8001426:	d00c      	beq.n	8001442 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001428:	4b8f      	ldr	r3, [pc, #572]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 030c 	and.w	r3, r3, #12
 8001430:	2b08      	cmp	r3, #8
 8001432:	d112      	bne.n	800145a <HAL_RCC_OscConfig+0x5e>
 8001434:	4b8c      	ldr	r3, [pc, #560]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800143c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001440:	d10b      	bne.n	800145a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001442:	4b89      	ldr	r3, [pc, #548]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d06c      	beq.n	8001528 <HAL_RCC_OscConfig+0x12c>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d168      	bne.n	8001528 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e24c      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001462:	d106      	bne.n	8001472 <HAL_RCC_OscConfig+0x76>
 8001464:	4b80      	ldr	r3, [pc, #512]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a7f      	ldr	r2, [pc, #508]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 800146a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	e02e      	b.n	80014d0 <HAL_RCC_OscConfig+0xd4>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10c      	bne.n	8001494 <HAL_RCC_OscConfig+0x98>
 800147a:	4b7b      	ldr	r3, [pc, #492]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a7a      	ldr	r2, [pc, #488]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001480:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	4b78      	ldr	r3, [pc, #480]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a77      	ldr	r2, [pc, #476]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 800148c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	e01d      	b.n	80014d0 <HAL_RCC_OscConfig+0xd4>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800149c:	d10c      	bne.n	80014b8 <HAL_RCC_OscConfig+0xbc>
 800149e:	4b72      	ldr	r3, [pc, #456]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a71      	ldr	r2, [pc, #452]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	4b6f      	ldr	r3, [pc, #444]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a6e      	ldr	r2, [pc, #440]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	e00b      	b.n	80014d0 <HAL_RCC_OscConfig+0xd4>
 80014b8:	4b6b      	ldr	r3, [pc, #428]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a6a      	ldr	r2, [pc, #424]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	4b68      	ldr	r3, [pc, #416]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a67      	ldr	r2, [pc, #412]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d013      	beq.n	8001500 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fa3a 	bl	8000950 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e0:	f7ff fa36 	bl	8000950 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b64      	cmp	r3, #100	@ 0x64
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e200      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f2:	4b5d      	ldr	r3, [pc, #372]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0xe4>
 80014fe:	e014      	b.n	800152a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff fa26 	bl	8000950 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001508:	f7ff fa22 	bl	8000950 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b64      	cmp	r3, #100	@ 0x64
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e1ec      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151a:	4b53      	ldr	r3, [pc, #332]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0x10c>
 8001526:	e000      	b.n	800152a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d063      	beq.n	80015fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001536:	4b4c      	ldr	r3, [pc, #304]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 030c 	and.w	r3, r3, #12
 800153e:	2b00      	cmp	r3, #0
 8001540:	d00b      	beq.n	800155a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001542:	4b49      	ldr	r3, [pc, #292]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 030c 	and.w	r3, r3, #12
 800154a:	2b08      	cmp	r3, #8
 800154c:	d11c      	bne.n	8001588 <HAL_RCC_OscConfig+0x18c>
 800154e:	4b46      	ldr	r3, [pc, #280]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d116      	bne.n	8001588 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155a:	4b43      	ldr	r3, [pc, #268]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d005      	beq.n	8001572 <HAL_RCC_OscConfig+0x176>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d001      	beq.n	8001572 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e1c0      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001572:	4b3d      	ldr	r3, [pc, #244]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4939      	ldr	r1, [pc, #228]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001582:	4313      	orrs	r3, r2
 8001584:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001586:	e03a      	b.n	80015fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d020      	beq.n	80015d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001590:	4b36      	ldr	r3, [pc, #216]	@ (800166c <HAL_RCC_OscConfig+0x270>)
 8001592:	2201      	movs	r2, #1
 8001594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001596:	f7ff f9db 	bl	8000950 <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800159e:	f7ff f9d7 	bl	8000950 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e1a1      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	4927      	ldr	r1, [pc, #156]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	600b      	str	r3, [r1, #0]
 80015d0:	e015      	b.n	80015fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d2:	4b26      	ldr	r3, [pc, #152]	@ (800166c <HAL_RCC_OscConfig+0x270>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff f9ba 	bl	8000950 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e0:	f7ff f9b6 	bl	8000950 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e180      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b00      	cmp	r3, #0
 8001608:	d03a      	beq.n	8001680 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d019      	beq.n	8001646 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001612:	4b17      	ldr	r3, [pc, #92]	@ (8001670 <HAL_RCC_OscConfig+0x274>)
 8001614:	2201      	movs	r2, #1
 8001616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001618:	f7ff f99a 	bl	8000950 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001620:	f7ff f996 	bl	8000950 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e160      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001632:	4b0d      	ldr	r3, [pc, #52]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800163e:	2001      	movs	r0, #1
 8001640:	f000 face 	bl	8001be0 <RCC_Delay>
 8001644:	e01c      	b.n	8001680 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001646:	4b0a      	ldr	r3, [pc, #40]	@ (8001670 <HAL_RCC_OscConfig+0x274>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164c:	f7ff f980 	bl	8000950 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001652:	e00f      	b.n	8001674 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001654:	f7ff f97c 	bl	8000950 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d908      	bls.n	8001674 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e146      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
 8001666:	bf00      	nop
 8001668:	40021000 	.word	0x40021000
 800166c:	42420000 	.word	0x42420000
 8001670:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001674:	4b92      	ldr	r3, [pc, #584]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1e9      	bne.n	8001654 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 80a6 	beq.w	80017da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001692:	4b8b      	ldr	r3, [pc, #556]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10d      	bne.n	80016ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800169e:	4b88      	ldr	r3, [pc, #544]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	4a87      	ldr	r2, [pc, #540]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a8:	61d3      	str	r3, [r2, #28]
 80016aa:	4b85      	ldr	r3, [pc, #532]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016b6:	2301      	movs	r3, #1
 80016b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ba:	4b82      	ldr	r3, [pc, #520]	@ (80018c4 <HAL_RCC_OscConfig+0x4c8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d118      	bne.n	80016f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c6:	4b7f      	ldr	r3, [pc, #508]	@ (80018c4 <HAL_RCC_OscConfig+0x4c8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a7e      	ldr	r2, [pc, #504]	@ (80018c4 <HAL_RCC_OscConfig+0x4c8>)
 80016cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d2:	f7ff f93d 	bl	8000950 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016da:	f7ff f939 	bl	8000950 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b64      	cmp	r3, #100	@ 0x64
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e103      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ec:	4b75      	ldr	r3, [pc, #468]	@ (80018c4 <HAL_RCC_OscConfig+0x4c8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d106      	bne.n	800170e <HAL_RCC_OscConfig+0x312>
 8001700:	4b6f      	ldr	r3, [pc, #444]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	4a6e      	ldr	r2, [pc, #440]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	6213      	str	r3, [r2, #32]
 800170c:	e02d      	b.n	800176a <HAL_RCC_OscConfig+0x36e>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10c      	bne.n	8001730 <HAL_RCC_OscConfig+0x334>
 8001716:	4b6a      	ldr	r3, [pc, #424]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	4a69      	ldr	r2, [pc, #420]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 800171c:	f023 0301 	bic.w	r3, r3, #1
 8001720:	6213      	str	r3, [r2, #32]
 8001722:	4b67      	ldr	r3, [pc, #412]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	4a66      	ldr	r2, [pc, #408]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001728:	f023 0304 	bic.w	r3, r3, #4
 800172c:	6213      	str	r3, [r2, #32]
 800172e:	e01c      	b.n	800176a <HAL_RCC_OscConfig+0x36e>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	2b05      	cmp	r3, #5
 8001736:	d10c      	bne.n	8001752 <HAL_RCC_OscConfig+0x356>
 8001738:	4b61      	ldr	r3, [pc, #388]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	4a60      	ldr	r2, [pc, #384]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 800173e:	f043 0304 	orr.w	r3, r3, #4
 8001742:	6213      	str	r3, [r2, #32]
 8001744:	4b5e      	ldr	r3, [pc, #376]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	4a5d      	ldr	r2, [pc, #372]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6213      	str	r3, [r2, #32]
 8001750:	e00b      	b.n	800176a <HAL_RCC_OscConfig+0x36e>
 8001752:	4b5b      	ldr	r3, [pc, #364]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	4a5a      	ldr	r2, [pc, #360]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001758:	f023 0301 	bic.w	r3, r3, #1
 800175c:	6213      	str	r3, [r2, #32]
 800175e:	4b58      	ldr	r3, [pc, #352]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	4a57      	ldr	r2, [pc, #348]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001764:	f023 0304 	bic.w	r3, r3, #4
 8001768:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d015      	beq.n	800179e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001772:	f7ff f8ed 	bl	8000950 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001778:	e00a      	b.n	8001790 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800177a:	f7ff f8e9 	bl	8000950 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001788:	4293      	cmp	r3, r2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e0b1      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001790:	4b4b      	ldr	r3, [pc, #300]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0ee      	beq.n	800177a <HAL_RCC_OscConfig+0x37e>
 800179c:	e014      	b.n	80017c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179e:	f7ff f8d7 	bl	8000950 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a4:	e00a      	b.n	80017bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a6:	f7ff f8d3 	bl	8000950 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e09b      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017bc:	4b40      	ldr	r3, [pc, #256]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1ee      	bne.n	80017a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017c8:	7dfb      	ldrb	r3, [r7, #23]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d105      	bne.n	80017da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ce:	4b3c      	ldr	r3, [pc, #240]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	4a3b      	ldr	r2, [pc, #236]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 80017d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 8087 	beq.w	80018f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017e4:	4b36      	ldr	r3, [pc, #216]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 030c 	and.w	r3, r3, #12
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	d061      	beq.n	80018b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d146      	bne.n	8001886 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f8:	4b33      	ldr	r3, [pc, #204]	@ (80018c8 <HAL_RCC_OscConfig+0x4cc>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fe:	f7ff f8a7 	bl	8000950 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001806:	f7ff f8a3 	bl	8000950 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e06d      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001818:	4b29      	ldr	r3, [pc, #164]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1f0      	bne.n	8001806 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800182c:	d108      	bne.n	8001840 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800182e:	4b24      	ldr	r3, [pc, #144]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	4921      	ldr	r1, [pc, #132]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 800183c:	4313      	orrs	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001840:	4b1f      	ldr	r3, [pc, #124]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a19      	ldr	r1, [r3, #32]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001850:	430b      	orrs	r3, r1
 8001852:	491b      	ldr	r1, [pc, #108]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001854:	4313      	orrs	r3, r2
 8001856:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001858:	4b1b      	ldr	r3, [pc, #108]	@ (80018c8 <HAL_RCC_OscConfig+0x4cc>)
 800185a:	2201      	movs	r2, #1
 800185c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185e:	f7ff f877 	bl	8000950 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001866:	f7ff f873 	bl	8000950 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e03d      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001878:	4b11      	ldr	r3, [pc, #68]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0f0      	beq.n	8001866 <HAL_RCC_OscConfig+0x46a>
 8001884:	e035      	b.n	80018f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001886:	4b10      	ldr	r3, [pc, #64]	@ (80018c8 <HAL_RCC_OscConfig+0x4cc>)
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188c:	f7ff f860 	bl	8000950 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001894:	f7ff f85c 	bl	8000950 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e026      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a6:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x498>
 80018b2:	e01e      	b.n	80018f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69db      	ldr	r3, [r3, #28]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d107      	bne.n	80018cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e019      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40007000 	.word	0x40007000
 80018c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018cc:	4b0b      	ldr	r3, [pc, #44]	@ (80018fc <HAL_RCC_OscConfig+0x500>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d106      	bne.n	80018ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d001      	beq.n	80018f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e000      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40021000 	.word	0x40021000

08001900 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e0d0      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001914:	4b6a      	ldr	r3, [pc, #424]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d910      	bls.n	8001944 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001922:	4b67      	ldr	r3, [pc, #412]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f023 0207 	bic.w	r2, r3, #7
 800192a:	4965      	ldr	r1, [pc, #404]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c0>)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	4313      	orrs	r3, r2
 8001930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001932:	4b63      	ldr	r3, [pc, #396]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	429a      	cmp	r2, r3
 800193e:	d001      	beq.n	8001944 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e0b8      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d020      	beq.n	8001992 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	d005      	beq.n	8001968 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800195c:	4b59      	ldr	r3, [pc, #356]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	4a58      	ldr	r2, [pc, #352]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001962:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001966:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001974:	4b53      	ldr	r3, [pc, #332]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	4a52      	ldr	r2, [pc, #328]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 800197a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800197e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001980:	4b50      	ldr	r3, [pc, #320]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	494d      	ldr	r1, [pc, #308]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 800198e:	4313      	orrs	r3, r2
 8001990:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d040      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d107      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a6:	4b47      	ldr	r3, [pc, #284]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d115      	bne.n	80019de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e07f      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d107      	bne.n	80019ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019be:	4b41      	ldr	r3, [pc, #260]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d109      	bne.n	80019de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e073      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ce:	4b3d      	ldr	r3, [pc, #244]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e06b      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019de:	4b39      	ldr	r3, [pc, #228]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f023 0203 	bic.w	r2, r3, #3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	4936      	ldr	r1, [pc, #216]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019f0:	f7fe ffae 	bl	8000950 <HAL_GetTick>
 80019f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f6:	e00a      	b.n	8001a0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f8:	f7fe ffaa 	bl	8000950 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e053      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 020c 	and.w	r2, r3, #12
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d1eb      	bne.n	80019f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a20:	4b27      	ldr	r3, [pc, #156]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d210      	bcs.n	8001a50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2e:	4b24      	ldr	r3, [pc, #144]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f023 0207 	bic.w	r2, r3, #7
 8001a36:	4922      	ldr	r1, [pc, #136]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3e:	4b20      	ldr	r3, [pc, #128]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e032      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d008      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a5c:	4b19      	ldr	r3, [pc, #100]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	4916      	ldr	r1, [pc, #88]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d009      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a7a:	4b12      	ldr	r3, [pc, #72]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	490e      	ldr	r1, [pc, #56]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a8e:	f000 f821 	bl	8001ad4 <HAL_RCC_GetSysClockFreq>
 8001a92:	4602      	mov	r2, r0
 8001a94:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	091b      	lsrs	r3, r3, #4
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	490a      	ldr	r1, [pc, #40]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8001aa0:	5ccb      	ldrb	r3, [r1, r3]
 8001aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa6:	4a09      	ldr	r2, [pc, #36]	@ (8001acc <HAL_RCC_ClockConfig+0x1cc>)
 8001aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001aaa:	4b09      	ldr	r3, [pc, #36]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1d0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe ff0c 	bl	80008cc <HAL_InitTick>

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40022000 	.word	0x40022000
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	08003a80 	.word	0x08003a80
 8001acc:	2000001c 	.word	0x2000001c
 8001ad0:	20000020 	.word	0x20000020

08001ad4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b087      	sub	sp, #28
 8001ad8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001aee:	4b1e      	ldr	r3, [pc, #120]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x94>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 030c 	and.w	r3, r3, #12
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d002      	beq.n	8001b04 <HAL_RCC_GetSysClockFreq+0x30>
 8001afe:	2b08      	cmp	r3, #8
 8001b00:	d003      	beq.n	8001b0a <HAL_RCC_GetSysClockFreq+0x36>
 8001b02:	e027      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b04:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0x98>)
 8001b06:	613b      	str	r3, [r7, #16]
      break;
 8001b08:	e027      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	0c9b      	lsrs	r3, r3, #18
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	4a17      	ldr	r2, [pc, #92]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b14:	5cd3      	ldrb	r3, [r2, r3]
 8001b16:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d010      	beq.n	8001b44 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b22:	4b11      	ldr	r3, [pc, #68]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	0c5b      	lsrs	r3, r3, #17
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	4a11      	ldr	r2, [pc, #68]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b2e:	5cd3      	ldrb	r3, [r2, r3]
 8001b30:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a0d      	ldr	r2, [pc, #52]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0x98>)
 8001b36:	fb03 f202 	mul.w	r2, r3, r2
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	e004      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a0c      	ldr	r2, [pc, #48]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b48:	fb02 f303 	mul.w	r3, r2, r3
 8001b4c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	613b      	str	r3, [r7, #16]
      break;
 8001b52:	e002      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b54:	4b05      	ldr	r3, [pc, #20]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0x98>)
 8001b56:	613b      	str	r3, [r7, #16]
      break;
 8001b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b5a:	693b      	ldr	r3, [r7, #16]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	371c      	adds	r7, #28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	007a1200 	.word	0x007a1200
 8001b70:	08003a98 	.word	0x08003a98
 8001b74:	08003aa8 	.word	0x08003aa8
 8001b78:	003d0900 	.word	0x003d0900

08001b7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b80:	4b02      	ldr	r3, [pc, #8]	@ (8001b8c <HAL_RCC_GetHCLKFreq+0x10>)
 8001b82:	681b      	ldr	r3, [r3, #0]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr
 8001b8c:	2000001c 	.word	0x2000001c

08001b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b94:	f7ff fff2 	bl	8001b7c <HAL_RCC_GetHCLKFreq>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	4b05      	ldr	r3, [pc, #20]	@ (8001bb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	0a1b      	lsrs	r3, r3, #8
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	4903      	ldr	r1, [pc, #12]	@ (8001bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ba6:	5ccb      	ldrb	r3, [r1, r3]
 8001ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	08003a90 	.word	0x08003a90

08001bb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bbc:	f7ff ffde 	bl	8001b7c <HAL_RCC_GetHCLKFreq>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	4b05      	ldr	r3, [pc, #20]	@ (8001bd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	0adb      	lsrs	r3, r3, #11
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	4903      	ldr	r1, [pc, #12]	@ (8001bdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bce:	5ccb      	ldrb	r3, [r1, r3]
 8001bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	08003a90 	.word	0x08003a90

08001be0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001be8:	4b0a      	ldr	r3, [pc, #40]	@ (8001c14 <RCC_Delay+0x34>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0a      	ldr	r2, [pc, #40]	@ (8001c18 <RCC_Delay+0x38>)
 8001bee:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf2:	0a5b      	lsrs	r3, r3, #9
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	fb02 f303 	mul.w	r3, r2, r3
 8001bfa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bfc:	bf00      	nop
  }
  while (Delay --);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	1e5a      	subs	r2, r3, #1
 8001c02:	60fa      	str	r2, [r7, #12]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1f9      	bne.n	8001bfc <RCC_Delay+0x1c>
}
 8001c08:	bf00      	nop
 8001c0a:	bf00      	nop
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr
 8001c14:	2000001c 	.word	0x2000001c
 8001c18:	10624dd3 	.word	0x10624dd3

08001c1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e041      	b.n	8001cb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d106      	bne.n	8001c48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7fe fc70 	bl	8000528 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3304      	adds	r3, #4
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	f000 fa74 	bl	8002148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
	...

08001cbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d001      	beq.n	8001cd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e03a      	b.n	8001d4a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0201 	orr.w	r2, r2, #1
 8001cea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a18      	ldr	r2, [pc, #96]	@ (8001d54 <HAL_TIM_Base_Start_IT+0x98>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d00e      	beq.n	8001d14 <HAL_TIM_Base_Start_IT+0x58>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cfe:	d009      	beq.n	8001d14 <HAL_TIM_Base_Start_IT+0x58>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a14      	ldr	r2, [pc, #80]	@ (8001d58 <HAL_TIM_Base_Start_IT+0x9c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d004      	beq.n	8001d14 <HAL_TIM_Base_Start_IT+0x58>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a13      	ldr	r2, [pc, #76]	@ (8001d5c <HAL_TIM_Base_Start_IT+0xa0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d111      	bne.n	8001d38 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2b06      	cmp	r3, #6
 8001d24:	d010      	beq.n	8001d48 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f042 0201 	orr.w	r2, r2, #1
 8001d34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d36:	e007      	b.n	8001d48 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr
 8001d54:	40012c00 	.word	0x40012c00
 8001d58:	40000400 	.word	0x40000400
 8001d5c:	40000800 	.word	0x40000800

08001d60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d122      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d11b      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f06f 0202 	mvn.w	r2, #2
 8001d8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f9b4 	bl	8002110 <HAL_TIM_IC_CaptureCallback>
 8001da8:	e005      	b.n	8001db6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f9a7 	bl	80020fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f9b6 	bl	8002122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d122      	bne.n	8001e10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	d11b      	bne.n	8001e10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0204 	mvn.w	r2, #4
 8001de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2202      	movs	r2, #2
 8001de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f98a 	bl	8002110 <HAL_TIM_IC_CaptureCallback>
 8001dfc:	e005      	b.n	8001e0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f97d 	bl	80020fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f98c 	bl	8002122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d122      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d11b      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f06f 0208 	mvn.w	r2, #8
 8001e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2204      	movs	r2, #4
 8001e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f960 	bl	8002110 <HAL_TIM_IC_CaptureCallback>
 8001e50:	e005      	b.n	8001e5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f953 	bl	80020fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f962 	bl	8002122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0310 	and.w	r3, r3, #16
 8001e6e:	2b10      	cmp	r3, #16
 8001e70:	d122      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0310 	and.w	r3, r3, #16
 8001e7c:	2b10      	cmp	r3, #16
 8001e7e:	d11b      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0210 	mvn.w	r2, #16
 8001e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2208      	movs	r2, #8
 8001e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f936 	bl	8002110 <HAL_TIM_IC_CaptureCallback>
 8001ea4:	e005      	b.n	8001eb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f929 	bl	80020fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f938 	bl	8002122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d10e      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d107      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0201 	mvn.w	r2, #1
 8001edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7fe fa72 	bl	80003c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eee:	2b80      	cmp	r3, #128	@ 0x80
 8001ef0:	d10e      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001efc:	2b80      	cmp	r3, #128	@ 0x80
 8001efe:	d107      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 fa7b 	bl	8002406 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f1a:	2b40      	cmp	r3, #64	@ 0x40
 8001f1c:	d10e      	bne.n	8001f3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f28:	2b40      	cmp	r3, #64	@ 0x40
 8001f2a:	d107      	bne.n	8001f3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f8fc 	bl	8002134 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	f003 0320 	and.w	r3, r3, #32
 8001f46:	2b20      	cmp	r3, #32
 8001f48:	d10e      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f003 0320 	and.w	r3, r3, #32
 8001f54:	2b20      	cmp	r3, #32
 8001f56:	d107      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f06f 0220 	mvn.w	r2, #32
 8001f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 fa46 	bl	80023f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <HAL_TIM_ConfigClockSource+0x1c>
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e0b4      	b.n	80020f6 <HAL_TIM_ConfigClockSource+0x186>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2202      	movs	r2, #2
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001faa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001fb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68ba      	ldr	r2, [r7, #8]
 8001fba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fc4:	d03e      	beq.n	8002044 <HAL_TIM_ConfigClockSource+0xd4>
 8001fc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fca:	f200 8087 	bhi.w	80020dc <HAL_TIM_ConfigClockSource+0x16c>
 8001fce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fd2:	f000 8086 	beq.w	80020e2 <HAL_TIM_ConfigClockSource+0x172>
 8001fd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fda:	d87f      	bhi.n	80020dc <HAL_TIM_ConfigClockSource+0x16c>
 8001fdc:	2b70      	cmp	r3, #112	@ 0x70
 8001fde:	d01a      	beq.n	8002016 <HAL_TIM_ConfigClockSource+0xa6>
 8001fe0:	2b70      	cmp	r3, #112	@ 0x70
 8001fe2:	d87b      	bhi.n	80020dc <HAL_TIM_ConfigClockSource+0x16c>
 8001fe4:	2b60      	cmp	r3, #96	@ 0x60
 8001fe6:	d050      	beq.n	800208a <HAL_TIM_ConfigClockSource+0x11a>
 8001fe8:	2b60      	cmp	r3, #96	@ 0x60
 8001fea:	d877      	bhi.n	80020dc <HAL_TIM_ConfigClockSource+0x16c>
 8001fec:	2b50      	cmp	r3, #80	@ 0x50
 8001fee:	d03c      	beq.n	800206a <HAL_TIM_ConfigClockSource+0xfa>
 8001ff0:	2b50      	cmp	r3, #80	@ 0x50
 8001ff2:	d873      	bhi.n	80020dc <HAL_TIM_ConfigClockSource+0x16c>
 8001ff4:	2b40      	cmp	r3, #64	@ 0x40
 8001ff6:	d058      	beq.n	80020aa <HAL_TIM_ConfigClockSource+0x13a>
 8001ff8:	2b40      	cmp	r3, #64	@ 0x40
 8001ffa:	d86f      	bhi.n	80020dc <HAL_TIM_ConfigClockSource+0x16c>
 8001ffc:	2b30      	cmp	r3, #48	@ 0x30
 8001ffe:	d064      	beq.n	80020ca <HAL_TIM_ConfigClockSource+0x15a>
 8002000:	2b30      	cmp	r3, #48	@ 0x30
 8002002:	d86b      	bhi.n	80020dc <HAL_TIM_ConfigClockSource+0x16c>
 8002004:	2b20      	cmp	r3, #32
 8002006:	d060      	beq.n	80020ca <HAL_TIM_ConfigClockSource+0x15a>
 8002008:	2b20      	cmp	r3, #32
 800200a:	d867      	bhi.n	80020dc <HAL_TIM_ConfigClockSource+0x16c>
 800200c:	2b00      	cmp	r3, #0
 800200e:	d05c      	beq.n	80020ca <HAL_TIM_ConfigClockSource+0x15a>
 8002010:	2b10      	cmp	r3, #16
 8002012:	d05a      	beq.n	80020ca <HAL_TIM_ConfigClockSource+0x15a>
 8002014:	e062      	b.n	80020dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002026:	f000 f968 	bl	80022fa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002038:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	609a      	str	r2, [r3, #8]
      break;
 8002042:	e04f      	b.n	80020e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002054:	f000 f951 	bl	80022fa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002066:	609a      	str	r2, [r3, #8]
      break;
 8002068:	e03c      	b.n	80020e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002076:	461a      	mov	r2, r3
 8002078:	f000 f8c8 	bl	800220c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2150      	movs	r1, #80	@ 0x50
 8002082:	4618      	mov	r0, r3
 8002084:	f000 f91f 	bl	80022c6 <TIM_ITRx_SetConfig>
      break;
 8002088:	e02c      	b.n	80020e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002096:	461a      	mov	r2, r3
 8002098:	f000 f8e6 	bl	8002268 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2160      	movs	r1, #96	@ 0x60
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 f90f 	bl	80022c6 <TIM_ITRx_SetConfig>
      break;
 80020a8:	e01c      	b.n	80020e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020b6:	461a      	mov	r2, r3
 80020b8:	f000 f8a8 	bl	800220c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2140      	movs	r1, #64	@ 0x40
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 f8ff 	bl	80022c6 <TIM_ITRx_SetConfig>
      break;
 80020c8:	e00c      	b.n	80020e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4619      	mov	r1, r3
 80020d4:	4610      	mov	r0, r2
 80020d6:	f000 f8f6 	bl	80022c6 <TIM_ITRx_SetConfig>
      break;
 80020da:	e003      	b.n	80020e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	73fb      	strb	r3, [r7, #15]
      break;
 80020e0:	e000      	b.n	80020e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80020e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr

08002110 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr

08002122 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr
	...

08002148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a29      	ldr	r2, [pc, #164]	@ (8002200 <TIM_Base_SetConfig+0xb8>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d00b      	beq.n	8002178 <TIM_Base_SetConfig+0x30>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002166:	d007      	beq.n	8002178 <TIM_Base_SetConfig+0x30>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a26      	ldr	r2, [pc, #152]	@ (8002204 <TIM_Base_SetConfig+0xbc>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d003      	beq.n	8002178 <TIM_Base_SetConfig+0x30>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a25      	ldr	r2, [pc, #148]	@ (8002208 <TIM_Base_SetConfig+0xc0>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d108      	bne.n	800218a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800217e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	4313      	orrs	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a1c      	ldr	r2, [pc, #112]	@ (8002200 <TIM_Base_SetConfig+0xb8>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00b      	beq.n	80021aa <TIM_Base_SetConfig+0x62>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002198:	d007      	beq.n	80021aa <TIM_Base_SetConfig+0x62>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a19      	ldr	r2, [pc, #100]	@ (8002204 <TIM_Base_SetConfig+0xbc>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d003      	beq.n	80021aa <TIM_Base_SetConfig+0x62>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a18      	ldr	r2, [pc, #96]	@ (8002208 <TIM_Base_SetConfig+0xc0>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d108      	bne.n	80021bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a07      	ldr	r2, [pc, #28]	@ (8002200 <TIM_Base_SetConfig+0xb8>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d103      	bne.n	80021f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	691a      	ldr	r2, [r3, #16]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	615a      	str	r2, [r3, #20]
}
 80021f6:	bf00      	nop
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	40012c00 	.word	0x40012c00
 8002204:	40000400 	.word	0x40000400
 8002208:	40000800 	.word	0x40000800

0800220c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800220c:	b480      	push	{r7}
 800220e:	b087      	sub	sp, #28
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	f023 0201 	bic.w	r2, r3, #1
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	4313      	orrs	r3, r2
 8002240:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f023 030a 	bic.w	r3, r3, #10
 8002248:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	4313      	orrs	r3, r2
 8002250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	621a      	str	r2, [r3, #32]
}
 800225e:	bf00      	nop
 8002260:	371c      	adds	r7, #28
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr

08002268 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002268:	b480      	push	{r7}
 800226a:	b087      	sub	sp, #28
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	f023 0210 	bic.w	r2, r3, #16
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	031b      	lsls	r3, r3, #12
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4313      	orrs	r3, r2
 800229c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80022a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	621a      	str	r2, [r3, #32]
}
 80022bc:	bf00      	nop
 80022be:	371c      	adds	r7, #28
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr

080022c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b085      	sub	sp, #20
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	f043 0307 	orr.w	r3, r3, #7
 80022e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	609a      	str	r2, [r3, #8]
}
 80022f0:	bf00      	nop
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr

080022fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b087      	sub	sp, #28
 80022fe:	af00      	add	r7, sp, #0
 8002300:	60f8      	str	r0, [r7, #12]
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	607a      	str	r2, [r7, #4]
 8002306:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002314:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	021a      	lsls	r2, r3, #8
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	431a      	orrs	r2, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	4313      	orrs	r3, r2
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	4313      	orrs	r3, r2
 8002326:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	609a      	str	r2, [r3, #8]
}
 800232e:	bf00      	nop
 8002330:	371c      	adds	r7, #28
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr

08002338 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800234c:	2302      	movs	r3, #2
 800234e:	e046      	b.n	80023de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2202      	movs	r2, #2
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002376:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	4313      	orrs	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a16      	ldr	r2, [pc, #88]	@ (80023e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d00e      	beq.n	80023b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800239c:	d009      	beq.n	80023b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a12      	ldr	r2, [pc, #72]	@ (80023ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d004      	beq.n	80023b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a10      	ldr	r2, [pc, #64]	@ (80023f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d10c      	bne.n	80023cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	40012c00 	.word	0x40012c00
 80023ec:	40000400 	.word	0x40000400
 80023f0:	40000800 	.word	0x40000800

080023f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr

08002406 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr

08002418 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e042      	b.n	80024b0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d106      	bne.n	8002444 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7fe f8b0 	bl	80005a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2224      	movs	r2, #36	@ 0x24
 8002448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800245a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 fdc3 	bl	8002fe8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	691a      	ldr	r2, [r3, #16]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002470:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	695a      	ldr	r2, [r3, #20]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002480:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002490:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2220      	movs	r2, #32
 800249c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2220      	movs	r2, #32
 80024a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08c      	sub	sp, #48	@ 0x30
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	4613      	mov	r3, r2
 80024c4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b20      	cmp	r3, #32
 80024d0:	d156      	bne.n	8002580 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <HAL_UART_Transmit_DMA+0x26>
 80024d8:	88fb      	ldrh	r3, [r7, #6]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e04f      	b.n	8002582 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	88fa      	ldrh	r2, [r7, #6]
 80024ec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	88fa      	ldrh	r2, [r7, #6]
 80024f2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2221      	movs	r2, #33	@ 0x21
 80024fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002506:	4a21      	ldr	r2, [pc, #132]	@ (800258c <HAL_UART_Transmit_DMA+0xd4>)
 8002508:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800250e:	4a20      	ldr	r2, [pc, #128]	@ (8002590 <HAL_UART_Transmit_DMA+0xd8>)
 8002510:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002516:	4a1f      	ldr	r2, [pc, #124]	@ (8002594 <HAL_UART_Transmit_DMA+0xdc>)
 8002518:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800251e:	2200      	movs	r2, #0
 8002520:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8002522:	f107 0308 	add.w	r3, r7, #8
 8002526:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800252c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800252e:	6819      	ldr	r1, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	3304      	adds	r3, #4
 8002536:	461a      	mov	r2, r3
 8002538:	88fb      	ldrh	r3, [r7, #6]
 800253a:	f7fe fb7b 	bl	8000c34 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002546:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	3314      	adds	r3, #20
 800254e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	e853 3f00 	ldrex	r3, [r3]
 8002556:	617b      	str	r3, [r7, #20]
   return(result);
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800255e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	3314      	adds	r3, #20
 8002566:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002568:	627a      	str	r2, [r7, #36]	@ 0x24
 800256a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800256c:	6a39      	ldr	r1, [r7, #32]
 800256e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002570:	e841 2300 	strex	r3, r2, [r1]
 8002574:	61fb      	str	r3, [r7, #28]
   return(result);
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1e5      	bne.n	8002548 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800257c:	2300      	movs	r3, #0
 800257e:	e000      	b.n	8002582 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002580:	2302      	movs	r3, #2
  }
}
 8002582:	4618      	mov	r0, r3
 8002584:	3730      	adds	r7, #48	@ 0x30
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	08002b1b 	.word	0x08002b1b
 8002590:	08002bb5 	.word	0x08002bb5
 8002594:	08002bd1 	.word	0x08002bd1

08002598 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b0ba      	sub	sp, #232	@ 0xe8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80025be:	2300      	movs	r3, #0
 80025c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80025ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80025d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10f      	bne.n	80025fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025e2:	f003 0320 	and.w	r3, r3, #32
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d009      	beq.n	80025fe <HAL_UART_IRQHandler+0x66>
 80025ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025ee:	f003 0320 	and.w	r3, r3, #32
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 fc38 	bl	8002e6c <UART_Receive_IT>
      return;
 80025fc:	e25b      	b.n	8002ab6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80025fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 80de 	beq.w	80027c4 <HAL_UART_IRQHandler+0x22c>
 8002608:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b00      	cmp	r3, #0
 8002612:	d106      	bne.n	8002622 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002618:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 80d1 	beq.w	80027c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00b      	beq.n	8002646 <HAL_UART_IRQHandler+0xae>
 800262e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002636:	2b00      	cmp	r3, #0
 8002638:	d005      	beq.n	8002646 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263e:	f043 0201 	orr.w	r2, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00b      	beq.n	800266a <HAL_UART_IRQHandler+0xd2>
 8002652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d005      	beq.n	800266a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002662:	f043 0202 	orr.w	r2, r3, #2
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800266a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00b      	beq.n	800268e <HAL_UART_IRQHandler+0xf6>
 8002676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d005      	beq.n	800268e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002686:	f043 0204 	orr.w	r2, r3, #4
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800268e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d011      	beq.n	80026be <HAL_UART_IRQHandler+0x126>
 800269a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800269e:	f003 0320 	and.w	r3, r3, #32
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d105      	bne.n	80026b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80026a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d005      	beq.n	80026be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b6:	f043 0208 	orr.w	r2, r3, #8
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 81f2 	beq.w	8002aac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026cc:	f003 0320 	and.w	r3, r3, #32
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d008      	beq.n	80026e6 <HAL_UART_IRQHandler+0x14e>
 80026d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026d8:	f003 0320 	and.w	r3, r3, #32
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 fbc3 	bl	8002e6c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	bf14      	ite	ne
 80026f4:	2301      	movne	r3, #1
 80026f6:	2300      	moveq	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d103      	bne.n	8002712 <HAL_UART_IRQHandler+0x17a>
 800270a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800270e:	2b00      	cmp	r3, #0
 8002710:	d04f      	beq.n	80027b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 facd 	bl	8002cb2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002722:	2b00      	cmp	r3, #0
 8002724:	d041      	beq.n	80027aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	3314      	adds	r3, #20
 800272c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002730:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002734:	e853 3f00 	ldrex	r3, [r3]
 8002738:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800273c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002740:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002744:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	3314      	adds	r3, #20
 800274e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002752:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002756:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800275a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800275e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002762:	e841 2300 	strex	r3, r2, [r1]
 8002766:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800276a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1d9      	bne.n	8002726 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002776:	2b00      	cmp	r3, #0
 8002778:	d013      	beq.n	80027a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800277e:	4a7e      	ldr	r2, [pc, #504]	@ (8002978 <HAL_UART_IRQHandler+0x3e0>)
 8002780:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002786:	4618      	mov	r0, r3
 8002788:	f7fe faf0 	bl	8000d6c <HAL_DMA_Abort_IT>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d016      	beq.n	80027c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800279c:	4610      	mov	r0, r2
 800279e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027a0:	e00e      	b.n	80027c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f9a5 	bl	8002af2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027a8:	e00a      	b.n	80027c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f9a1 	bl	8002af2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027b0:	e006      	b.n	80027c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f99d 	bl	8002af2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80027be:	e175      	b.n	8002aac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027c0:	bf00      	nop
    return;
 80027c2:	e173      	b.n	8002aac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	f040 814f 	bne.w	8002a6c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80027ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027d2:	f003 0310 	and.w	r3, r3, #16
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 8148 	beq.w	8002a6c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80027dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027e0:	f003 0310 	and.w	r3, r3, #16
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 8141 	beq.w	8002a6c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027ea:	2300      	movs	r3, #0
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 80b6 	beq.w	800297c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800281c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 8145 	beq.w	8002ab0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800282a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800282e:	429a      	cmp	r2, r3
 8002830:	f080 813e 	bcs.w	8002ab0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800283a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	2b20      	cmp	r3, #32
 8002844:	f000 8088 	beq.w	8002958 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	330c      	adds	r3, #12
 800284e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002852:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002856:	e853 3f00 	ldrex	r3, [r3]
 800285a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800285e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002862:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002866:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	330c      	adds	r3, #12
 8002870:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002874:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002878:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002880:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002884:	e841 2300 	strex	r3, r2, [r1]
 8002888:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800288c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1d9      	bne.n	8002848 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	3314      	adds	r3, #20
 800289a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800289c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800289e:	e853 3f00 	ldrex	r3, [r3]
 80028a2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80028a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028a6:	f023 0301 	bic.w	r3, r3, #1
 80028aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	3314      	adds	r3, #20
 80028b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80028b8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80028bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028be:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80028c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80028c4:	e841 2300 	strex	r3, r2, [r1]
 80028c8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80028ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1e1      	bne.n	8002894 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	3314      	adds	r3, #20
 80028d6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028da:	e853 3f00 	ldrex	r3, [r3]
 80028de:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80028e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	3314      	adds	r3, #20
 80028f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80028f4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80028f6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80028fa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80028fc:	e841 2300 	strex	r3, r2, [r1]
 8002900:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002902:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1e3      	bne.n	80028d0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	330c      	adds	r3, #12
 800291c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800291e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002920:	e853 3f00 	ldrex	r3, [r3]
 8002924:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002926:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002928:	f023 0310 	bic.w	r3, r3, #16
 800292c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	330c      	adds	r3, #12
 8002936:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800293a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800293c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800293e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002940:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002942:	e841 2300 	strex	r3, r2, [r1]
 8002946:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002948:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1e3      	bne.n	8002916 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002952:	4618      	mov	r0, r3
 8002954:	f7fe f9ce 	bl	8000cf4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002966:	b29b      	uxth	r3, r3
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	b29b      	uxth	r3, r3
 800296c:	4619      	mov	r1, r3
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f8c8 	bl	8002b04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002974:	e09c      	b.n	8002ab0 <HAL_UART_IRQHandler+0x518>
 8002976:	bf00      	nop
 8002978:	08002d77 	.word	0x08002d77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002984:	b29b      	uxth	r3, r3
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002990:	b29b      	uxth	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 808e 	beq.w	8002ab4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002998:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 8089 	beq.w	8002ab4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	330c      	adds	r3, #12
 80029a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029ac:	e853 3f00 	ldrex	r3, [r3]
 80029b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80029b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80029b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	330c      	adds	r3, #12
 80029c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80029c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80029c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80029cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029ce:	e841 2300 	strex	r3, r2, [r1]
 80029d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80029d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1e3      	bne.n	80029a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	3314      	adds	r3, #20
 80029e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e4:	e853 3f00 	ldrex	r3, [r3]
 80029e8:	623b      	str	r3, [r7, #32]
   return(result);
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	f023 0301 	bic.w	r3, r3, #1
 80029f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	3314      	adds	r3, #20
 80029fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80029fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8002a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a06:	e841 2300 	strex	r3, r2, [r1]
 8002a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1e3      	bne.n	80029da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2220      	movs	r2, #32
 8002a16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	330c      	adds	r3, #12
 8002a26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	e853 3f00 	ldrex	r3, [r3]
 8002a2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f023 0310 	bic.w	r3, r3, #16
 8002a36:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	330c      	adds	r3, #12
 8002a40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002a44:	61fa      	str	r2, [r7, #28]
 8002a46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a48:	69b9      	ldr	r1, [r7, #24]
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	e841 2300 	strex	r3, r2, [r1]
 8002a50:	617b      	str	r3, [r7, #20]
   return(result);
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1e3      	bne.n	8002a20 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002a62:	4619      	mov	r1, r3
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f84d 	bl	8002b04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a6a:	e023      	b.n	8002ab4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d009      	beq.n	8002a8c <HAL_UART_IRQHandler+0x4f4>
 8002a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f98a 	bl	8002d9e <UART_Transmit_IT>
    return;
 8002a8a:	e014      	b.n	8002ab6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00e      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x51e>
 8002a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d008      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f9c9 	bl	8002e3c <UART_EndTransmit_IT>
    return;
 8002aaa:	e004      	b.n	8002ab6 <HAL_UART_IRQHandler+0x51e>
    return;
 8002aac:	bf00      	nop
 8002aae:	e002      	b.n	8002ab6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002ab0:	bf00      	nop
 8002ab2:	e000      	b.n	8002ab6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002ab4:	bf00      	nop
  }
}
 8002ab6:	37e8      	adds	r7, #232	@ 0xe8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr

08002ace <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr

08002ae0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bc80      	pop	{r7}
 8002af0:	4770      	bx	lr

08002af2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr

08002b1a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b090      	sub	sp, #64	@ 0x40
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0320 	and.w	r3, r3, #32
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d137      	bne.n	8002ba6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8002b36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b38:	2200      	movs	r2, #0
 8002b3a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002b3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	3314      	adds	r3, #20
 8002b42:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b46:	e853 3f00 	ldrex	r3, [r3]
 8002b4a:	623b      	str	r3, [r7, #32]
   return(result);
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	3314      	adds	r3, #20
 8002b5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002b5c:	633a      	str	r2, [r7, #48]	@ 0x30
 8002b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b64:	e841 2300 	strex	r3, r2, [r1]
 8002b68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1e5      	bne.n	8002b3c <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002b70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	330c      	adds	r3, #12
 8002b76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	e853 3f00 	ldrex	r3, [r3]
 8002b7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b86:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	330c      	adds	r3, #12
 8002b8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b90:	61fa      	str	r2, [r7, #28]
 8002b92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b94:	69b9      	ldr	r1, [r7, #24]
 8002b96:	69fa      	ldr	r2, [r7, #28]
 8002b98:	e841 2300 	strex	r3, r2, [r1]
 8002b9c:	617b      	str	r3, [r7, #20]
   return(result);
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1e5      	bne.n	8002b70 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002ba4:	e002      	b.n	8002bac <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8002ba6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002ba8:	f7ff ff88 	bl	8002abc <HAL_UART_TxCpltCallback>
}
 8002bac:	bf00      	nop
 8002bae:	3740      	adds	r7, #64	@ 0x40
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f7ff ff83 	bl	8002ace <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bc8:	bf00      	nop
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	bf14      	ite	ne
 8002bf0:	2301      	movne	r3, #1
 8002bf2:	2300      	moveq	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b21      	cmp	r3, #33	@ 0x21
 8002c02:	d108      	bne.n	8002c16 <UART_DMAError+0x46>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d005      	beq.n	8002c16 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8002c10:	68b8      	ldr	r0, [r7, #8]
 8002c12:	f000 f827 	bl	8002c64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	bf14      	ite	ne
 8002c24:	2301      	movne	r3, #1
 8002c26:	2300      	moveq	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b22      	cmp	r3, #34	@ 0x22
 8002c36:	d108      	bne.n	8002c4a <UART_DMAError+0x7a>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d005      	beq.n	8002c4a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2200      	movs	r2, #0
 8002c42:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8002c44:	68b8      	ldr	r0, [r7, #8]
 8002c46:	f000 f834 	bl	8002cb2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c4e:	f043 0210 	orr.w	r2, r3, #16
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c56:	68b8      	ldr	r0, [r7, #8]
 8002c58:	f7ff ff4b 	bl	8002af2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c5c:	bf00      	nop
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b089      	sub	sp, #36	@ 0x24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	330c      	adds	r3, #12
 8002c72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	e853 3f00 	ldrex	r3, [r3]
 8002c7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002c82:	61fb      	str	r3, [r7, #28]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	330c      	adds	r3, #12
 8002c8a:	69fa      	ldr	r2, [r7, #28]
 8002c8c:	61ba      	str	r2, [r7, #24]
 8002c8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c90:	6979      	ldr	r1, [r7, #20]
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	e841 2300 	strex	r3, r2, [r1]
 8002c98:	613b      	str	r3, [r7, #16]
   return(result);
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1e5      	bne.n	8002c6c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8002ca8:	bf00      	nop
 8002caa:	3724      	adds	r7, #36	@ 0x24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr

08002cb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b095      	sub	sp, #84	@ 0x54
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	330c      	adds	r3, #12
 8002cc0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cc4:	e853 3f00 	ldrex	r3, [r3]
 8002cc8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ccc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002cd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	330c      	adds	r3, #12
 8002cd8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cda:	643a      	str	r2, [r7, #64]	@ 0x40
 8002cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cde:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ce0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ce2:	e841 2300 	strex	r3, r2, [r1]
 8002ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1e5      	bne.n	8002cba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	3314      	adds	r3, #20
 8002cf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	e853 3f00 	ldrex	r3, [r3]
 8002cfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	f023 0301 	bic.w	r3, r3, #1
 8002d04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	3314      	adds	r3, #20
 8002d0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d16:	e841 2300 	strex	r3, r2, [r1]
 8002d1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1e5      	bne.n	8002cee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d119      	bne.n	8002d5e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	330c      	adds	r3, #12
 8002d30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	e853 3f00 	ldrex	r3, [r3]
 8002d38:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	f023 0310 	bic.w	r3, r3, #16
 8002d40:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	330c      	adds	r3, #12
 8002d48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d4a:	61ba      	str	r2, [r7, #24]
 8002d4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4e:	6979      	ldr	r1, [r7, #20]
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	e841 2300 	strex	r3, r2, [r1]
 8002d56:	613b      	str	r3, [r7, #16]
   return(result);
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1e5      	bne.n	8002d2a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2220      	movs	r2, #32
 8002d62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002d6c:	bf00      	nop
 8002d6e:	3754      	adds	r7, #84	@ 0x54
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr

08002d76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b084      	sub	sp, #16
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f7ff feae 	bl	8002af2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d96:	bf00      	nop
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b085      	sub	sp, #20
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b21      	cmp	r3, #33	@ 0x21
 8002db0:	d13e      	bne.n	8002e30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dba:	d114      	bne.n	8002de6 <UART_Transmit_IT+0x48>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d110      	bne.n	8002de6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dd8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	1c9a      	adds	r2, r3, #2
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	621a      	str	r2, [r3, #32]
 8002de4:	e008      	b.n	8002df8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	1c59      	adds	r1, r3, #1
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6211      	str	r1, [r2, #32]
 8002df0:	781a      	ldrb	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	4619      	mov	r1, r3
 8002e06:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10f      	bne.n	8002e2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	e000      	b.n	8002e32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e30:	2302      	movs	r3, #2
  }
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr

08002e3c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e52:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff fe2d 	bl	8002abc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08c      	sub	sp, #48	@ 0x30
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b22      	cmp	r3, #34	@ 0x22
 8002e7e:	f040 80ae 	bne.w	8002fde <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e8a:	d117      	bne.n	8002ebc <UART_Receive_IT+0x50>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d113      	bne.n	8002ebc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb4:	1c9a      	adds	r2, r3, #2
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002eba:	e026      	b.n	8002f0a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ece:	d007      	beq.n	8002ee0 <UART_Receive_IT+0x74>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10a      	bne.n	8002eee <UART_Receive_IT+0x82>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d106      	bne.n	8002eee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eea:	701a      	strb	r2, [r3, #0]
 8002eec:	e008      	b.n	8002f00 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002efe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	4619      	mov	r1, r3
 8002f18:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d15d      	bne.n	8002fda <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0220 	bic.w	r2, r2, #32
 8002f2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695a      	ldr	r2, [r3, #20]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0201 	bic.w	r2, r2, #1
 8002f4c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2220      	movs	r2, #32
 8002f52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d135      	bne.n	8002fd0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	330c      	adds	r3, #12
 8002f70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	e853 3f00 	ldrex	r3, [r3]
 8002f78:	613b      	str	r3, [r7, #16]
   return(result);
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	f023 0310 	bic.w	r3, r3, #16
 8002f80:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	330c      	adds	r3, #12
 8002f88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f8a:	623a      	str	r2, [r7, #32]
 8002f8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8e:	69f9      	ldr	r1, [r7, #28]
 8002f90:	6a3a      	ldr	r2, [r7, #32]
 8002f92:	e841 2300 	strex	r3, r2, [r1]
 8002f96:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1e5      	bne.n	8002f6a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0310 	and.w	r3, r3, #16
 8002fa8:	2b10      	cmp	r3, #16
 8002faa:	d10a      	bne.n	8002fc2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fac:	2300      	movs	r3, #0
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7ff fd9b 	bl	8002b04 <HAL_UARTEx_RxEventCallback>
 8002fce:	e002      	b.n	8002fd6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff fd85 	bl	8002ae0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	e002      	b.n	8002fe0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	e000      	b.n	8002fe0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002fde:	2302      	movs	r3, #2
  }
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3730      	adds	r7, #48	@ 0x30
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	4313      	orrs	r3, r2
 8003016:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003022:	f023 030c 	bic.w	r3, r3, #12
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	430b      	orrs	r3, r1
 800302e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	699a      	ldr	r2, [r3, #24]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a2c      	ldr	r2, [pc, #176]	@ (80030fc <UART_SetConfig+0x114>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d103      	bne.n	8003058 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003050:	f7fe fdb2 	bl	8001bb8 <HAL_RCC_GetPCLK2Freq>
 8003054:	60f8      	str	r0, [r7, #12]
 8003056:	e002      	b.n	800305e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003058:	f7fe fd9a 	bl	8001b90 <HAL_RCC_GetPCLK1Freq>
 800305c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	009a      	lsls	r2, r3, #2
 8003068:	441a      	add	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	fbb2 f3f3 	udiv	r3, r2, r3
 8003074:	4a22      	ldr	r2, [pc, #136]	@ (8003100 <UART_SetConfig+0x118>)
 8003076:	fba2 2303 	umull	r2, r3, r2, r3
 800307a:	095b      	lsrs	r3, r3, #5
 800307c:	0119      	lsls	r1, r3, #4
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	009a      	lsls	r2, r3, #2
 8003088:	441a      	add	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	fbb2 f2f3 	udiv	r2, r2, r3
 8003094:	4b1a      	ldr	r3, [pc, #104]	@ (8003100 <UART_SetConfig+0x118>)
 8003096:	fba3 0302 	umull	r0, r3, r3, r2
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	2064      	movs	r0, #100	@ 0x64
 800309e:	fb00 f303 	mul.w	r3, r0, r3
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	3332      	adds	r3, #50	@ 0x32
 80030a8:	4a15      	ldr	r2, [pc, #84]	@ (8003100 <UART_SetConfig+0x118>)
 80030aa:	fba2 2303 	umull	r2, r3, r2, r3
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030b4:	4419      	add	r1, r3
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	009a      	lsls	r2, r3, #2
 80030c0:	441a      	add	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80030cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003100 <UART_SetConfig+0x118>)
 80030ce:	fba3 0302 	umull	r0, r3, r3, r2
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	2064      	movs	r0, #100	@ 0x64
 80030d6:	fb00 f303 	mul.w	r3, r0, r3
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	3332      	adds	r3, #50	@ 0x32
 80030e0:	4a07      	ldr	r2, [pc, #28]	@ (8003100 <UART_SetConfig+0x118>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	095b      	lsrs	r3, r3, #5
 80030e8:	f003 020f 	and.w	r2, r3, #15
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	440a      	add	r2, r1
 80030f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80030f4:	bf00      	nop
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40013800 	.word	0x40013800
 8003100:	51eb851f 	.word	0x51eb851f

08003104 <siprintf>:
 8003104:	b40e      	push	{r1, r2, r3}
 8003106:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800310a:	b500      	push	{lr}
 800310c:	b09c      	sub	sp, #112	@ 0x70
 800310e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003110:	9002      	str	r0, [sp, #8]
 8003112:	9006      	str	r0, [sp, #24]
 8003114:	9107      	str	r1, [sp, #28]
 8003116:	9104      	str	r1, [sp, #16]
 8003118:	4808      	ldr	r0, [pc, #32]	@ (800313c <siprintf+0x38>)
 800311a:	4909      	ldr	r1, [pc, #36]	@ (8003140 <siprintf+0x3c>)
 800311c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003120:	9105      	str	r1, [sp, #20]
 8003122:	6800      	ldr	r0, [r0, #0]
 8003124:	a902      	add	r1, sp, #8
 8003126:	9301      	str	r3, [sp, #4]
 8003128:	f000 f992 	bl	8003450 <_svfiprintf_r>
 800312c:	2200      	movs	r2, #0
 800312e:	9b02      	ldr	r3, [sp, #8]
 8003130:	701a      	strb	r2, [r3, #0]
 8003132:	b01c      	add	sp, #112	@ 0x70
 8003134:	f85d eb04 	ldr.w	lr, [sp], #4
 8003138:	b003      	add	sp, #12
 800313a:	4770      	bx	lr
 800313c:	20000028 	.word	0x20000028
 8003140:	ffff0208 	.word	0xffff0208

08003144 <memset>:
 8003144:	4603      	mov	r3, r0
 8003146:	4402      	add	r2, r0
 8003148:	4293      	cmp	r3, r2
 800314a:	d100      	bne.n	800314e <memset+0xa>
 800314c:	4770      	bx	lr
 800314e:	f803 1b01 	strb.w	r1, [r3], #1
 8003152:	e7f9      	b.n	8003148 <memset+0x4>

08003154 <__errno>:
 8003154:	4b01      	ldr	r3, [pc, #4]	@ (800315c <__errno+0x8>)
 8003156:	6818      	ldr	r0, [r3, #0]
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	20000028 	.word	0x20000028

08003160 <__libc_init_array>:
 8003160:	b570      	push	{r4, r5, r6, lr}
 8003162:	2600      	movs	r6, #0
 8003164:	4d0c      	ldr	r5, [pc, #48]	@ (8003198 <__libc_init_array+0x38>)
 8003166:	4c0d      	ldr	r4, [pc, #52]	@ (800319c <__libc_init_array+0x3c>)
 8003168:	1b64      	subs	r4, r4, r5
 800316a:	10a4      	asrs	r4, r4, #2
 800316c:	42a6      	cmp	r6, r4
 800316e:	d109      	bne.n	8003184 <__libc_init_array+0x24>
 8003170:	f000 fc78 	bl	8003a64 <_init>
 8003174:	2600      	movs	r6, #0
 8003176:	4d0a      	ldr	r5, [pc, #40]	@ (80031a0 <__libc_init_array+0x40>)
 8003178:	4c0a      	ldr	r4, [pc, #40]	@ (80031a4 <__libc_init_array+0x44>)
 800317a:	1b64      	subs	r4, r4, r5
 800317c:	10a4      	asrs	r4, r4, #2
 800317e:	42a6      	cmp	r6, r4
 8003180:	d105      	bne.n	800318e <__libc_init_array+0x2e>
 8003182:	bd70      	pop	{r4, r5, r6, pc}
 8003184:	f855 3b04 	ldr.w	r3, [r5], #4
 8003188:	4798      	blx	r3
 800318a:	3601      	adds	r6, #1
 800318c:	e7ee      	b.n	800316c <__libc_init_array+0xc>
 800318e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003192:	4798      	blx	r3
 8003194:	3601      	adds	r6, #1
 8003196:	e7f2      	b.n	800317e <__libc_init_array+0x1e>
 8003198:	08003ae0 	.word	0x08003ae0
 800319c:	08003ae0 	.word	0x08003ae0
 80031a0:	08003ae0 	.word	0x08003ae0
 80031a4:	08003ae4 	.word	0x08003ae4

080031a8 <__retarget_lock_acquire_recursive>:
 80031a8:	4770      	bx	lr

080031aa <__retarget_lock_release_recursive>:
 80031aa:	4770      	bx	lr

080031ac <_free_r>:
 80031ac:	b538      	push	{r3, r4, r5, lr}
 80031ae:	4605      	mov	r5, r0
 80031b0:	2900      	cmp	r1, #0
 80031b2:	d040      	beq.n	8003236 <_free_r+0x8a>
 80031b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031b8:	1f0c      	subs	r4, r1, #4
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	bfb8      	it	lt
 80031be:	18e4      	addlt	r4, r4, r3
 80031c0:	f000 f8de 	bl	8003380 <__malloc_lock>
 80031c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003238 <_free_r+0x8c>)
 80031c6:	6813      	ldr	r3, [r2, #0]
 80031c8:	b933      	cbnz	r3, 80031d8 <_free_r+0x2c>
 80031ca:	6063      	str	r3, [r4, #4]
 80031cc:	6014      	str	r4, [r2, #0]
 80031ce:	4628      	mov	r0, r5
 80031d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031d4:	f000 b8da 	b.w	800338c <__malloc_unlock>
 80031d8:	42a3      	cmp	r3, r4
 80031da:	d908      	bls.n	80031ee <_free_r+0x42>
 80031dc:	6820      	ldr	r0, [r4, #0]
 80031de:	1821      	adds	r1, r4, r0
 80031e0:	428b      	cmp	r3, r1
 80031e2:	bf01      	itttt	eq
 80031e4:	6819      	ldreq	r1, [r3, #0]
 80031e6:	685b      	ldreq	r3, [r3, #4]
 80031e8:	1809      	addeq	r1, r1, r0
 80031ea:	6021      	streq	r1, [r4, #0]
 80031ec:	e7ed      	b.n	80031ca <_free_r+0x1e>
 80031ee:	461a      	mov	r2, r3
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	b10b      	cbz	r3, 80031f8 <_free_r+0x4c>
 80031f4:	42a3      	cmp	r3, r4
 80031f6:	d9fa      	bls.n	80031ee <_free_r+0x42>
 80031f8:	6811      	ldr	r1, [r2, #0]
 80031fa:	1850      	adds	r0, r2, r1
 80031fc:	42a0      	cmp	r0, r4
 80031fe:	d10b      	bne.n	8003218 <_free_r+0x6c>
 8003200:	6820      	ldr	r0, [r4, #0]
 8003202:	4401      	add	r1, r0
 8003204:	1850      	adds	r0, r2, r1
 8003206:	4283      	cmp	r3, r0
 8003208:	6011      	str	r1, [r2, #0]
 800320a:	d1e0      	bne.n	80031ce <_free_r+0x22>
 800320c:	6818      	ldr	r0, [r3, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	4408      	add	r0, r1
 8003212:	6010      	str	r0, [r2, #0]
 8003214:	6053      	str	r3, [r2, #4]
 8003216:	e7da      	b.n	80031ce <_free_r+0x22>
 8003218:	d902      	bls.n	8003220 <_free_r+0x74>
 800321a:	230c      	movs	r3, #12
 800321c:	602b      	str	r3, [r5, #0]
 800321e:	e7d6      	b.n	80031ce <_free_r+0x22>
 8003220:	6820      	ldr	r0, [r4, #0]
 8003222:	1821      	adds	r1, r4, r0
 8003224:	428b      	cmp	r3, r1
 8003226:	bf01      	itttt	eq
 8003228:	6819      	ldreq	r1, [r3, #0]
 800322a:	685b      	ldreq	r3, [r3, #4]
 800322c:	1809      	addeq	r1, r1, r0
 800322e:	6021      	streq	r1, [r4, #0]
 8003230:	6063      	str	r3, [r4, #4]
 8003232:	6054      	str	r4, [r2, #4]
 8003234:	e7cb      	b.n	80031ce <_free_r+0x22>
 8003236:	bd38      	pop	{r3, r4, r5, pc}
 8003238:	20000324 	.word	0x20000324

0800323c <sbrk_aligned>:
 800323c:	b570      	push	{r4, r5, r6, lr}
 800323e:	4e0f      	ldr	r6, [pc, #60]	@ (800327c <sbrk_aligned+0x40>)
 8003240:	460c      	mov	r4, r1
 8003242:	6831      	ldr	r1, [r6, #0]
 8003244:	4605      	mov	r5, r0
 8003246:	b911      	cbnz	r1, 800324e <sbrk_aligned+0x12>
 8003248:	f000 fbaa 	bl	80039a0 <_sbrk_r>
 800324c:	6030      	str	r0, [r6, #0]
 800324e:	4621      	mov	r1, r4
 8003250:	4628      	mov	r0, r5
 8003252:	f000 fba5 	bl	80039a0 <_sbrk_r>
 8003256:	1c43      	adds	r3, r0, #1
 8003258:	d103      	bne.n	8003262 <sbrk_aligned+0x26>
 800325a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800325e:	4620      	mov	r0, r4
 8003260:	bd70      	pop	{r4, r5, r6, pc}
 8003262:	1cc4      	adds	r4, r0, #3
 8003264:	f024 0403 	bic.w	r4, r4, #3
 8003268:	42a0      	cmp	r0, r4
 800326a:	d0f8      	beq.n	800325e <sbrk_aligned+0x22>
 800326c:	1a21      	subs	r1, r4, r0
 800326e:	4628      	mov	r0, r5
 8003270:	f000 fb96 	bl	80039a0 <_sbrk_r>
 8003274:	3001      	adds	r0, #1
 8003276:	d1f2      	bne.n	800325e <sbrk_aligned+0x22>
 8003278:	e7ef      	b.n	800325a <sbrk_aligned+0x1e>
 800327a:	bf00      	nop
 800327c:	20000320 	.word	0x20000320

08003280 <_malloc_r>:
 8003280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003284:	1ccd      	adds	r5, r1, #3
 8003286:	f025 0503 	bic.w	r5, r5, #3
 800328a:	3508      	adds	r5, #8
 800328c:	2d0c      	cmp	r5, #12
 800328e:	bf38      	it	cc
 8003290:	250c      	movcc	r5, #12
 8003292:	2d00      	cmp	r5, #0
 8003294:	4606      	mov	r6, r0
 8003296:	db01      	blt.n	800329c <_malloc_r+0x1c>
 8003298:	42a9      	cmp	r1, r5
 800329a:	d904      	bls.n	80032a6 <_malloc_r+0x26>
 800329c:	230c      	movs	r3, #12
 800329e:	6033      	str	r3, [r6, #0]
 80032a0:	2000      	movs	r0, #0
 80032a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800337c <_malloc_r+0xfc>
 80032aa:	f000 f869 	bl	8003380 <__malloc_lock>
 80032ae:	f8d8 3000 	ldr.w	r3, [r8]
 80032b2:	461c      	mov	r4, r3
 80032b4:	bb44      	cbnz	r4, 8003308 <_malloc_r+0x88>
 80032b6:	4629      	mov	r1, r5
 80032b8:	4630      	mov	r0, r6
 80032ba:	f7ff ffbf 	bl	800323c <sbrk_aligned>
 80032be:	1c43      	adds	r3, r0, #1
 80032c0:	4604      	mov	r4, r0
 80032c2:	d158      	bne.n	8003376 <_malloc_r+0xf6>
 80032c4:	f8d8 4000 	ldr.w	r4, [r8]
 80032c8:	4627      	mov	r7, r4
 80032ca:	2f00      	cmp	r7, #0
 80032cc:	d143      	bne.n	8003356 <_malloc_r+0xd6>
 80032ce:	2c00      	cmp	r4, #0
 80032d0:	d04b      	beq.n	800336a <_malloc_r+0xea>
 80032d2:	6823      	ldr	r3, [r4, #0]
 80032d4:	4639      	mov	r1, r7
 80032d6:	4630      	mov	r0, r6
 80032d8:	eb04 0903 	add.w	r9, r4, r3
 80032dc:	f000 fb60 	bl	80039a0 <_sbrk_r>
 80032e0:	4581      	cmp	r9, r0
 80032e2:	d142      	bne.n	800336a <_malloc_r+0xea>
 80032e4:	6821      	ldr	r1, [r4, #0]
 80032e6:	4630      	mov	r0, r6
 80032e8:	1a6d      	subs	r5, r5, r1
 80032ea:	4629      	mov	r1, r5
 80032ec:	f7ff ffa6 	bl	800323c <sbrk_aligned>
 80032f0:	3001      	adds	r0, #1
 80032f2:	d03a      	beq.n	800336a <_malloc_r+0xea>
 80032f4:	6823      	ldr	r3, [r4, #0]
 80032f6:	442b      	add	r3, r5
 80032f8:	6023      	str	r3, [r4, #0]
 80032fa:	f8d8 3000 	ldr.w	r3, [r8]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	bb62      	cbnz	r2, 800335c <_malloc_r+0xdc>
 8003302:	f8c8 7000 	str.w	r7, [r8]
 8003306:	e00f      	b.n	8003328 <_malloc_r+0xa8>
 8003308:	6822      	ldr	r2, [r4, #0]
 800330a:	1b52      	subs	r2, r2, r5
 800330c:	d420      	bmi.n	8003350 <_malloc_r+0xd0>
 800330e:	2a0b      	cmp	r2, #11
 8003310:	d917      	bls.n	8003342 <_malloc_r+0xc2>
 8003312:	1961      	adds	r1, r4, r5
 8003314:	42a3      	cmp	r3, r4
 8003316:	6025      	str	r5, [r4, #0]
 8003318:	bf18      	it	ne
 800331a:	6059      	strne	r1, [r3, #4]
 800331c:	6863      	ldr	r3, [r4, #4]
 800331e:	bf08      	it	eq
 8003320:	f8c8 1000 	streq.w	r1, [r8]
 8003324:	5162      	str	r2, [r4, r5]
 8003326:	604b      	str	r3, [r1, #4]
 8003328:	4630      	mov	r0, r6
 800332a:	f000 f82f 	bl	800338c <__malloc_unlock>
 800332e:	f104 000b 	add.w	r0, r4, #11
 8003332:	1d23      	adds	r3, r4, #4
 8003334:	f020 0007 	bic.w	r0, r0, #7
 8003338:	1ac2      	subs	r2, r0, r3
 800333a:	bf1c      	itt	ne
 800333c:	1a1b      	subne	r3, r3, r0
 800333e:	50a3      	strne	r3, [r4, r2]
 8003340:	e7af      	b.n	80032a2 <_malloc_r+0x22>
 8003342:	6862      	ldr	r2, [r4, #4]
 8003344:	42a3      	cmp	r3, r4
 8003346:	bf0c      	ite	eq
 8003348:	f8c8 2000 	streq.w	r2, [r8]
 800334c:	605a      	strne	r2, [r3, #4]
 800334e:	e7eb      	b.n	8003328 <_malloc_r+0xa8>
 8003350:	4623      	mov	r3, r4
 8003352:	6864      	ldr	r4, [r4, #4]
 8003354:	e7ae      	b.n	80032b4 <_malloc_r+0x34>
 8003356:	463c      	mov	r4, r7
 8003358:	687f      	ldr	r7, [r7, #4]
 800335a:	e7b6      	b.n	80032ca <_malloc_r+0x4a>
 800335c:	461a      	mov	r2, r3
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	42a3      	cmp	r3, r4
 8003362:	d1fb      	bne.n	800335c <_malloc_r+0xdc>
 8003364:	2300      	movs	r3, #0
 8003366:	6053      	str	r3, [r2, #4]
 8003368:	e7de      	b.n	8003328 <_malloc_r+0xa8>
 800336a:	230c      	movs	r3, #12
 800336c:	4630      	mov	r0, r6
 800336e:	6033      	str	r3, [r6, #0]
 8003370:	f000 f80c 	bl	800338c <__malloc_unlock>
 8003374:	e794      	b.n	80032a0 <_malloc_r+0x20>
 8003376:	6005      	str	r5, [r0, #0]
 8003378:	e7d6      	b.n	8003328 <_malloc_r+0xa8>
 800337a:	bf00      	nop
 800337c:	20000324 	.word	0x20000324

08003380 <__malloc_lock>:
 8003380:	4801      	ldr	r0, [pc, #4]	@ (8003388 <__malloc_lock+0x8>)
 8003382:	f7ff bf11 	b.w	80031a8 <__retarget_lock_acquire_recursive>
 8003386:	bf00      	nop
 8003388:	2000031c 	.word	0x2000031c

0800338c <__malloc_unlock>:
 800338c:	4801      	ldr	r0, [pc, #4]	@ (8003394 <__malloc_unlock+0x8>)
 800338e:	f7ff bf0c 	b.w	80031aa <__retarget_lock_release_recursive>
 8003392:	bf00      	nop
 8003394:	2000031c 	.word	0x2000031c

08003398 <__ssputs_r>:
 8003398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800339c:	461f      	mov	r7, r3
 800339e:	688e      	ldr	r6, [r1, #8]
 80033a0:	4682      	mov	sl, r0
 80033a2:	42be      	cmp	r6, r7
 80033a4:	460c      	mov	r4, r1
 80033a6:	4690      	mov	r8, r2
 80033a8:	680b      	ldr	r3, [r1, #0]
 80033aa:	d82d      	bhi.n	8003408 <__ssputs_r+0x70>
 80033ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80033b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80033b4:	d026      	beq.n	8003404 <__ssputs_r+0x6c>
 80033b6:	6965      	ldr	r5, [r4, #20]
 80033b8:	6909      	ldr	r1, [r1, #16]
 80033ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033be:	eba3 0901 	sub.w	r9, r3, r1
 80033c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80033c6:	1c7b      	adds	r3, r7, #1
 80033c8:	444b      	add	r3, r9
 80033ca:	106d      	asrs	r5, r5, #1
 80033cc:	429d      	cmp	r5, r3
 80033ce:	bf38      	it	cc
 80033d0:	461d      	movcc	r5, r3
 80033d2:	0553      	lsls	r3, r2, #21
 80033d4:	d527      	bpl.n	8003426 <__ssputs_r+0x8e>
 80033d6:	4629      	mov	r1, r5
 80033d8:	f7ff ff52 	bl	8003280 <_malloc_r>
 80033dc:	4606      	mov	r6, r0
 80033de:	b360      	cbz	r0, 800343a <__ssputs_r+0xa2>
 80033e0:	464a      	mov	r2, r9
 80033e2:	6921      	ldr	r1, [r4, #16]
 80033e4:	f000 fafa 	bl	80039dc <memcpy>
 80033e8:	89a3      	ldrh	r3, [r4, #12]
 80033ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80033ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033f2:	81a3      	strh	r3, [r4, #12]
 80033f4:	6126      	str	r6, [r4, #16]
 80033f6:	444e      	add	r6, r9
 80033f8:	6026      	str	r6, [r4, #0]
 80033fa:	463e      	mov	r6, r7
 80033fc:	6165      	str	r5, [r4, #20]
 80033fe:	eba5 0509 	sub.w	r5, r5, r9
 8003402:	60a5      	str	r5, [r4, #8]
 8003404:	42be      	cmp	r6, r7
 8003406:	d900      	bls.n	800340a <__ssputs_r+0x72>
 8003408:	463e      	mov	r6, r7
 800340a:	4632      	mov	r2, r6
 800340c:	4641      	mov	r1, r8
 800340e:	6820      	ldr	r0, [r4, #0]
 8003410:	f000 faac 	bl	800396c <memmove>
 8003414:	2000      	movs	r0, #0
 8003416:	68a3      	ldr	r3, [r4, #8]
 8003418:	1b9b      	subs	r3, r3, r6
 800341a:	60a3      	str	r3, [r4, #8]
 800341c:	6823      	ldr	r3, [r4, #0]
 800341e:	4433      	add	r3, r6
 8003420:	6023      	str	r3, [r4, #0]
 8003422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003426:	462a      	mov	r2, r5
 8003428:	f000 fae6 	bl	80039f8 <_realloc_r>
 800342c:	4606      	mov	r6, r0
 800342e:	2800      	cmp	r0, #0
 8003430:	d1e0      	bne.n	80033f4 <__ssputs_r+0x5c>
 8003432:	4650      	mov	r0, sl
 8003434:	6921      	ldr	r1, [r4, #16]
 8003436:	f7ff feb9 	bl	80031ac <_free_r>
 800343a:	230c      	movs	r3, #12
 800343c:	f8ca 3000 	str.w	r3, [sl]
 8003440:	89a3      	ldrh	r3, [r4, #12]
 8003442:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003446:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800344a:	81a3      	strh	r3, [r4, #12]
 800344c:	e7e9      	b.n	8003422 <__ssputs_r+0x8a>
	...

08003450 <_svfiprintf_r>:
 8003450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003454:	4698      	mov	r8, r3
 8003456:	898b      	ldrh	r3, [r1, #12]
 8003458:	4607      	mov	r7, r0
 800345a:	061b      	lsls	r3, r3, #24
 800345c:	460d      	mov	r5, r1
 800345e:	4614      	mov	r4, r2
 8003460:	b09d      	sub	sp, #116	@ 0x74
 8003462:	d510      	bpl.n	8003486 <_svfiprintf_r+0x36>
 8003464:	690b      	ldr	r3, [r1, #16]
 8003466:	b973      	cbnz	r3, 8003486 <_svfiprintf_r+0x36>
 8003468:	2140      	movs	r1, #64	@ 0x40
 800346a:	f7ff ff09 	bl	8003280 <_malloc_r>
 800346e:	6028      	str	r0, [r5, #0]
 8003470:	6128      	str	r0, [r5, #16]
 8003472:	b930      	cbnz	r0, 8003482 <_svfiprintf_r+0x32>
 8003474:	230c      	movs	r3, #12
 8003476:	603b      	str	r3, [r7, #0]
 8003478:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800347c:	b01d      	add	sp, #116	@ 0x74
 800347e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003482:	2340      	movs	r3, #64	@ 0x40
 8003484:	616b      	str	r3, [r5, #20]
 8003486:	2300      	movs	r3, #0
 8003488:	9309      	str	r3, [sp, #36]	@ 0x24
 800348a:	2320      	movs	r3, #32
 800348c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003490:	2330      	movs	r3, #48	@ 0x30
 8003492:	f04f 0901 	mov.w	r9, #1
 8003496:	f8cd 800c 	str.w	r8, [sp, #12]
 800349a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003634 <_svfiprintf_r+0x1e4>
 800349e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80034a2:	4623      	mov	r3, r4
 80034a4:	469a      	mov	sl, r3
 80034a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034aa:	b10a      	cbz	r2, 80034b0 <_svfiprintf_r+0x60>
 80034ac:	2a25      	cmp	r2, #37	@ 0x25
 80034ae:	d1f9      	bne.n	80034a4 <_svfiprintf_r+0x54>
 80034b0:	ebba 0b04 	subs.w	fp, sl, r4
 80034b4:	d00b      	beq.n	80034ce <_svfiprintf_r+0x7e>
 80034b6:	465b      	mov	r3, fp
 80034b8:	4622      	mov	r2, r4
 80034ba:	4629      	mov	r1, r5
 80034bc:	4638      	mov	r0, r7
 80034be:	f7ff ff6b 	bl	8003398 <__ssputs_r>
 80034c2:	3001      	adds	r0, #1
 80034c4:	f000 80a7 	beq.w	8003616 <_svfiprintf_r+0x1c6>
 80034c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80034ca:	445a      	add	r2, fp
 80034cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80034ce:	f89a 3000 	ldrb.w	r3, [sl]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 809f 	beq.w	8003616 <_svfiprintf_r+0x1c6>
 80034d8:	2300      	movs	r3, #0
 80034da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80034de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034e2:	f10a 0a01 	add.w	sl, sl, #1
 80034e6:	9304      	str	r3, [sp, #16]
 80034e8:	9307      	str	r3, [sp, #28]
 80034ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80034ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80034f0:	4654      	mov	r4, sl
 80034f2:	2205      	movs	r2, #5
 80034f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034f8:	484e      	ldr	r0, [pc, #312]	@ (8003634 <_svfiprintf_r+0x1e4>)
 80034fa:	f000 fa61 	bl	80039c0 <memchr>
 80034fe:	9a04      	ldr	r2, [sp, #16]
 8003500:	b9d8      	cbnz	r0, 800353a <_svfiprintf_r+0xea>
 8003502:	06d0      	lsls	r0, r2, #27
 8003504:	bf44      	itt	mi
 8003506:	2320      	movmi	r3, #32
 8003508:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800350c:	0711      	lsls	r1, r2, #28
 800350e:	bf44      	itt	mi
 8003510:	232b      	movmi	r3, #43	@ 0x2b
 8003512:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003516:	f89a 3000 	ldrb.w	r3, [sl]
 800351a:	2b2a      	cmp	r3, #42	@ 0x2a
 800351c:	d015      	beq.n	800354a <_svfiprintf_r+0xfa>
 800351e:	4654      	mov	r4, sl
 8003520:	2000      	movs	r0, #0
 8003522:	f04f 0c0a 	mov.w	ip, #10
 8003526:	9a07      	ldr	r2, [sp, #28]
 8003528:	4621      	mov	r1, r4
 800352a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800352e:	3b30      	subs	r3, #48	@ 0x30
 8003530:	2b09      	cmp	r3, #9
 8003532:	d94b      	bls.n	80035cc <_svfiprintf_r+0x17c>
 8003534:	b1b0      	cbz	r0, 8003564 <_svfiprintf_r+0x114>
 8003536:	9207      	str	r2, [sp, #28]
 8003538:	e014      	b.n	8003564 <_svfiprintf_r+0x114>
 800353a:	eba0 0308 	sub.w	r3, r0, r8
 800353e:	fa09 f303 	lsl.w	r3, r9, r3
 8003542:	4313      	orrs	r3, r2
 8003544:	46a2      	mov	sl, r4
 8003546:	9304      	str	r3, [sp, #16]
 8003548:	e7d2      	b.n	80034f0 <_svfiprintf_r+0xa0>
 800354a:	9b03      	ldr	r3, [sp, #12]
 800354c:	1d19      	adds	r1, r3, #4
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	9103      	str	r1, [sp, #12]
 8003552:	2b00      	cmp	r3, #0
 8003554:	bfbb      	ittet	lt
 8003556:	425b      	neglt	r3, r3
 8003558:	f042 0202 	orrlt.w	r2, r2, #2
 800355c:	9307      	strge	r3, [sp, #28]
 800355e:	9307      	strlt	r3, [sp, #28]
 8003560:	bfb8      	it	lt
 8003562:	9204      	strlt	r2, [sp, #16]
 8003564:	7823      	ldrb	r3, [r4, #0]
 8003566:	2b2e      	cmp	r3, #46	@ 0x2e
 8003568:	d10a      	bne.n	8003580 <_svfiprintf_r+0x130>
 800356a:	7863      	ldrb	r3, [r4, #1]
 800356c:	2b2a      	cmp	r3, #42	@ 0x2a
 800356e:	d132      	bne.n	80035d6 <_svfiprintf_r+0x186>
 8003570:	9b03      	ldr	r3, [sp, #12]
 8003572:	3402      	adds	r4, #2
 8003574:	1d1a      	adds	r2, r3, #4
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	9203      	str	r2, [sp, #12]
 800357a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800357e:	9305      	str	r3, [sp, #20]
 8003580:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003638 <_svfiprintf_r+0x1e8>
 8003584:	2203      	movs	r2, #3
 8003586:	4650      	mov	r0, sl
 8003588:	7821      	ldrb	r1, [r4, #0]
 800358a:	f000 fa19 	bl	80039c0 <memchr>
 800358e:	b138      	cbz	r0, 80035a0 <_svfiprintf_r+0x150>
 8003590:	2240      	movs	r2, #64	@ 0x40
 8003592:	9b04      	ldr	r3, [sp, #16]
 8003594:	eba0 000a 	sub.w	r0, r0, sl
 8003598:	4082      	lsls	r2, r0
 800359a:	4313      	orrs	r3, r2
 800359c:	3401      	adds	r4, #1
 800359e:	9304      	str	r3, [sp, #16]
 80035a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035a4:	2206      	movs	r2, #6
 80035a6:	4825      	ldr	r0, [pc, #148]	@ (800363c <_svfiprintf_r+0x1ec>)
 80035a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80035ac:	f000 fa08 	bl	80039c0 <memchr>
 80035b0:	2800      	cmp	r0, #0
 80035b2:	d036      	beq.n	8003622 <_svfiprintf_r+0x1d2>
 80035b4:	4b22      	ldr	r3, [pc, #136]	@ (8003640 <_svfiprintf_r+0x1f0>)
 80035b6:	bb1b      	cbnz	r3, 8003600 <_svfiprintf_r+0x1b0>
 80035b8:	9b03      	ldr	r3, [sp, #12]
 80035ba:	3307      	adds	r3, #7
 80035bc:	f023 0307 	bic.w	r3, r3, #7
 80035c0:	3308      	adds	r3, #8
 80035c2:	9303      	str	r3, [sp, #12]
 80035c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80035c6:	4433      	add	r3, r6
 80035c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80035ca:	e76a      	b.n	80034a2 <_svfiprintf_r+0x52>
 80035cc:	460c      	mov	r4, r1
 80035ce:	2001      	movs	r0, #1
 80035d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80035d4:	e7a8      	b.n	8003528 <_svfiprintf_r+0xd8>
 80035d6:	2300      	movs	r3, #0
 80035d8:	f04f 0c0a 	mov.w	ip, #10
 80035dc:	4619      	mov	r1, r3
 80035de:	3401      	adds	r4, #1
 80035e0:	9305      	str	r3, [sp, #20]
 80035e2:	4620      	mov	r0, r4
 80035e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035e8:	3a30      	subs	r2, #48	@ 0x30
 80035ea:	2a09      	cmp	r2, #9
 80035ec:	d903      	bls.n	80035f6 <_svfiprintf_r+0x1a6>
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0c6      	beq.n	8003580 <_svfiprintf_r+0x130>
 80035f2:	9105      	str	r1, [sp, #20]
 80035f4:	e7c4      	b.n	8003580 <_svfiprintf_r+0x130>
 80035f6:	4604      	mov	r4, r0
 80035f8:	2301      	movs	r3, #1
 80035fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80035fe:	e7f0      	b.n	80035e2 <_svfiprintf_r+0x192>
 8003600:	ab03      	add	r3, sp, #12
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	462a      	mov	r2, r5
 8003606:	4638      	mov	r0, r7
 8003608:	4b0e      	ldr	r3, [pc, #56]	@ (8003644 <_svfiprintf_r+0x1f4>)
 800360a:	a904      	add	r1, sp, #16
 800360c:	f3af 8000 	nop.w
 8003610:	1c42      	adds	r2, r0, #1
 8003612:	4606      	mov	r6, r0
 8003614:	d1d6      	bne.n	80035c4 <_svfiprintf_r+0x174>
 8003616:	89ab      	ldrh	r3, [r5, #12]
 8003618:	065b      	lsls	r3, r3, #25
 800361a:	f53f af2d 	bmi.w	8003478 <_svfiprintf_r+0x28>
 800361e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003620:	e72c      	b.n	800347c <_svfiprintf_r+0x2c>
 8003622:	ab03      	add	r3, sp, #12
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	462a      	mov	r2, r5
 8003628:	4638      	mov	r0, r7
 800362a:	4b06      	ldr	r3, [pc, #24]	@ (8003644 <_svfiprintf_r+0x1f4>)
 800362c:	a904      	add	r1, sp, #16
 800362e:	f000 f87d 	bl	800372c <_printf_i>
 8003632:	e7ed      	b.n	8003610 <_svfiprintf_r+0x1c0>
 8003634:	08003aaa 	.word	0x08003aaa
 8003638:	08003ab0 	.word	0x08003ab0
 800363c:	08003ab4 	.word	0x08003ab4
 8003640:	00000000 	.word	0x00000000
 8003644:	08003399 	.word	0x08003399

08003648 <_printf_common>:
 8003648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800364c:	4616      	mov	r6, r2
 800364e:	4698      	mov	r8, r3
 8003650:	688a      	ldr	r2, [r1, #8]
 8003652:	690b      	ldr	r3, [r1, #16]
 8003654:	4607      	mov	r7, r0
 8003656:	4293      	cmp	r3, r2
 8003658:	bfb8      	it	lt
 800365a:	4613      	movlt	r3, r2
 800365c:	6033      	str	r3, [r6, #0]
 800365e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003662:	460c      	mov	r4, r1
 8003664:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003668:	b10a      	cbz	r2, 800366e <_printf_common+0x26>
 800366a:	3301      	adds	r3, #1
 800366c:	6033      	str	r3, [r6, #0]
 800366e:	6823      	ldr	r3, [r4, #0]
 8003670:	0699      	lsls	r1, r3, #26
 8003672:	bf42      	ittt	mi
 8003674:	6833      	ldrmi	r3, [r6, #0]
 8003676:	3302      	addmi	r3, #2
 8003678:	6033      	strmi	r3, [r6, #0]
 800367a:	6825      	ldr	r5, [r4, #0]
 800367c:	f015 0506 	ands.w	r5, r5, #6
 8003680:	d106      	bne.n	8003690 <_printf_common+0x48>
 8003682:	f104 0a19 	add.w	sl, r4, #25
 8003686:	68e3      	ldr	r3, [r4, #12]
 8003688:	6832      	ldr	r2, [r6, #0]
 800368a:	1a9b      	subs	r3, r3, r2
 800368c:	42ab      	cmp	r3, r5
 800368e:	dc2b      	bgt.n	80036e8 <_printf_common+0xa0>
 8003690:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003694:	6822      	ldr	r2, [r4, #0]
 8003696:	3b00      	subs	r3, #0
 8003698:	bf18      	it	ne
 800369a:	2301      	movne	r3, #1
 800369c:	0692      	lsls	r2, r2, #26
 800369e:	d430      	bmi.n	8003702 <_printf_common+0xba>
 80036a0:	4641      	mov	r1, r8
 80036a2:	4638      	mov	r0, r7
 80036a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80036a8:	47c8      	blx	r9
 80036aa:	3001      	adds	r0, #1
 80036ac:	d023      	beq.n	80036f6 <_printf_common+0xae>
 80036ae:	6823      	ldr	r3, [r4, #0]
 80036b0:	6922      	ldr	r2, [r4, #16]
 80036b2:	f003 0306 	and.w	r3, r3, #6
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	bf14      	ite	ne
 80036ba:	2500      	movne	r5, #0
 80036bc:	6833      	ldreq	r3, [r6, #0]
 80036be:	f04f 0600 	mov.w	r6, #0
 80036c2:	bf08      	it	eq
 80036c4:	68e5      	ldreq	r5, [r4, #12]
 80036c6:	f104 041a 	add.w	r4, r4, #26
 80036ca:	bf08      	it	eq
 80036cc:	1aed      	subeq	r5, r5, r3
 80036ce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80036d2:	bf08      	it	eq
 80036d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036d8:	4293      	cmp	r3, r2
 80036da:	bfc4      	itt	gt
 80036dc:	1a9b      	subgt	r3, r3, r2
 80036de:	18ed      	addgt	r5, r5, r3
 80036e0:	42b5      	cmp	r5, r6
 80036e2:	d11a      	bne.n	800371a <_printf_common+0xd2>
 80036e4:	2000      	movs	r0, #0
 80036e6:	e008      	b.n	80036fa <_printf_common+0xb2>
 80036e8:	2301      	movs	r3, #1
 80036ea:	4652      	mov	r2, sl
 80036ec:	4641      	mov	r1, r8
 80036ee:	4638      	mov	r0, r7
 80036f0:	47c8      	blx	r9
 80036f2:	3001      	adds	r0, #1
 80036f4:	d103      	bne.n	80036fe <_printf_common+0xb6>
 80036f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80036fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036fe:	3501      	adds	r5, #1
 8003700:	e7c1      	b.n	8003686 <_printf_common+0x3e>
 8003702:	2030      	movs	r0, #48	@ 0x30
 8003704:	18e1      	adds	r1, r4, r3
 8003706:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003710:	4422      	add	r2, r4
 8003712:	3302      	adds	r3, #2
 8003714:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003718:	e7c2      	b.n	80036a0 <_printf_common+0x58>
 800371a:	2301      	movs	r3, #1
 800371c:	4622      	mov	r2, r4
 800371e:	4641      	mov	r1, r8
 8003720:	4638      	mov	r0, r7
 8003722:	47c8      	blx	r9
 8003724:	3001      	adds	r0, #1
 8003726:	d0e6      	beq.n	80036f6 <_printf_common+0xae>
 8003728:	3601      	adds	r6, #1
 800372a:	e7d9      	b.n	80036e0 <_printf_common+0x98>

0800372c <_printf_i>:
 800372c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003730:	7e0f      	ldrb	r7, [r1, #24]
 8003732:	4691      	mov	r9, r2
 8003734:	2f78      	cmp	r7, #120	@ 0x78
 8003736:	4680      	mov	r8, r0
 8003738:	460c      	mov	r4, r1
 800373a:	469a      	mov	sl, r3
 800373c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800373e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003742:	d807      	bhi.n	8003754 <_printf_i+0x28>
 8003744:	2f62      	cmp	r7, #98	@ 0x62
 8003746:	d80a      	bhi.n	800375e <_printf_i+0x32>
 8003748:	2f00      	cmp	r7, #0
 800374a:	f000 80d3 	beq.w	80038f4 <_printf_i+0x1c8>
 800374e:	2f58      	cmp	r7, #88	@ 0x58
 8003750:	f000 80ba 	beq.w	80038c8 <_printf_i+0x19c>
 8003754:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003758:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800375c:	e03a      	b.n	80037d4 <_printf_i+0xa8>
 800375e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003762:	2b15      	cmp	r3, #21
 8003764:	d8f6      	bhi.n	8003754 <_printf_i+0x28>
 8003766:	a101      	add	r1, pc, #4	@ (adr r1, 800376c <_printf_i+0x40>)
 8003768:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800376c:	080037c5 	.word	0x080037c5
 8003770:	080037d9 	.word	0x080037d9
 8003774:	08003755 	.word	0x08003755
 8003778:	08003755 	.word	0x08003755
 800377c:	08003755 	.word	0x08003755
 8003780:	08003755 	.word	0x08003755
 8003784:	080037d9 	.word	0x080037d9
 8003788:	08003755 	.word	0x08003755
 800378c:	08003755 	.word	0x08003755
 8003790:	08003755 	.word	0x08003755
 8003794:	08003755 	.word	0x08003755
 8003798:	080038db 	.word	0x080038db
 800379c:	08003803 	.word	0x08003803
 80037a0:	08003895 	.word	0x08003895
 80037a4:	08003755 	.word	0x08003755
 80037a8:	08003755 	.word	0x08003755
 80037ac:	080038fd 	.word	0x080038fd
 80037b0:	08003755 	.word	0x08003755
 80037b4:	08003803 	.word	0x08003803
 80037b8:	08003755 	.word	0x08003755
 80037bc:	08003755 	.word	0x08003755
 80037c0:	0800389d 	.word	0x0800389d
 80037c4:	6833      	ldr	r3, [r6, #0]
 80037c6:	1d1a      	adds	r2, r3, #4
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6032      	str	r2, [r6, #0]
 80037cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80037d4:	2301      	movs	r3, #1
 80037d6:	e09e      	b.n	8003916 <_printf_i+0x1ea>
 80037d8:	6833      	ldr	r3, [r6, #0]
 80037da:	6820      	ldr	r0, [r4, #0]
 80037dc:	1d19      	adds	r1, r3, #4
 80037de:	6031      	str	r1, [r6, #0]
 80037e0:	0606      	lsls	r6, r0, #24
 80037e2:	d501      	bpl.n	80037e8 <_printf_i+0xbc>
 80037e4:	681d      	ldr	r5, [r3, #0]
 80037e6:	e003      	b.n	80037f0 <_printf_i+0xc4>
 80037e8:	0645      	lsls	r5, r0, #25
 80037ea:	d5fb      	bpl.n	80037e4 <_printf_i+0xb8>
 80037ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80037f0:	2d00      	cmp	r5, #0
 80037f2:	da03      	bge.n	80037fc <_printf_i+0xd0>
 80037f4:	232d      	movs	r3, #45	@ 0x2d
 80037f6:	426d      	negs	r5, r5
 80037f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037fc:	230a      	movs	r3, #10
 80037fe:	4859      	ldr	r0, [pc, #356]	@ (8003964 <_printf_i+0x238>)
 8003800:	e011      	b.n	8003826 <_printf_i+0xfa>
 8003802:	6821      	ldr	r1, [r4, #0]
 8003804:	6833      	ldr	r3, [r6, #0]
 8003806:	0608      	lsls	r0, r1, #24
 8003808:	f853 5b04 	ldr.w	r5, [r3], #4
 800380c:	d402      	bmi.n	8003814 <_printf_i+0xe8>
 800380e:	0649      	lsls	r1, r1, #25
 8003810:	bf48      	it	mi
 8003812:	b2ad      	uxthmi	r5, r5
 8003814:	2f6f      	cmp	r7, #111	@ 0x6f
 8003816:	6033      	str	r3, [r6, #0]
 8003818:	bf14      	ite	ne
 800381a:	230a      	movne	r3, #10
 800381c:	2308      	moveq	r3, #8
 800381e:	4851      	ldr	r0, [pc, #324]	@ (8003964 <_printf_i+0x238>)
 8003820:	2100      	movs	r1, #0
 8003822:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003826:	6866      	ldr	r6, [r4, #4]
 8003828:	2e00      	cmp	r6, #0
 800382a:	bfa8      	it	ge
 800382c:	6821      	ldrge	r1, [r4, #0]
 800382e:	60a6      	str	r6, [r4, #8]
 8003830:	bfa4      	itt	ge
 8003832:	f021 0104 	bicge.w	r1, r1, #4
 8003836:	6021      	strge	r1, [r4, #0]
 8003838:	b90d      	cbnz	r5, 800383e <_printf_i+0x112>
 800383a:	2e00      	cmp	r6, #0
 800383c:	d04b      	beq.n	80038d6 <_printf_i+0x1aa>
 800383e:	4616      	mov	r6, r2
 8003840:	fbb5 f1f3 	udiv	r1, r5, r3
 8003844:	fb03 5711 	mls	r7, r3, r1, r5
 8003848:	5dc7      	ldrb	r7, [r0, r7]
 800384a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800384e:	462f      	mov	r7, r5
 8003850:	42bb      	cmp	r3, r7
 8003852:	460d      	mov	r5, r1
 8003854:	d9f4      	bls.n	8003840 <_printf_i+0x114>
 8003856:	2b08      	cmp	r3, #8
 8003858:	d10b      	bne.n	8003872 <_printf_i+0x146>
 800385a:	6823      	ldr	r3, [r4, #0]
 800385c:	07df      	lsls	r7, r3, #31
 800385e:	d508      	bpl.n	8003872 <_printf_i+0x146>
 8003860:	6923      	ldr	r3, [r4, #16]
 8003862:	6861      	ldr	r1, [r4, #4]
 8003864:	4299      	cmp	r1, r3
 8003866:	bfde      	ittt	le
 8003868:	2330      	movle	r3, #48	@ 0x30
 800386a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800386e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003872:	1b92      	subs	r2, r2, r6
 8003874:	6122      	str	r2, [r4, #16]
 8003876:	464b      	mov	r3, r9
 8003878:	4621      	mov	r1, r4
 800387a:	4640      	mov	r0, r8
 800387c:	f8cd a000 	str.w	sl, [sp]
 8003880:	aa03      	add	r2, sp, #12
 8003882:	f7ff fee1 	bl	8003648 <_printf_common>
 8003886:	3001      	adds	r0, #1
 8003888:	d14a      	bne.n	8003920 <_printf_i+0x1f4>
 800388a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800388e:	b004      	add	sp, #16
 8003890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003894:	6823      	ldr	r3, [r4, #0]
 8003896:	f043 0320 	orr.w	r3, r3, #32
 800389a:	6023      	str	r3, [r4, #0]
 800389c:	2778      	movs	r7, #120	@ 0x78
 800389e:	4832      	ldr	r0, [pc, #200]	@ (8003968 <_printf_i+0x23c>)
 80038a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80038a4:	6823      	ldr	r3, [r4, #0]
 80038a6:	6831      	ldr	r1, [r6, #0]
 80038a8:	061f      	lsls	r7, r3, #24
 80038aa:	f851 5b04 	ldr.w	r5, [r1], #4
 80038ae:	d402      	bmi.n	80038b6 <_printf_i+0x18a>
 80038b0:	065f      	lsls	r7, r3, #25
 80038b2:	bf48      	it	mi
 80038b4:	b2ad      	uxthmi	r5, r5
 80038b6:	6031      	str	r1, [r6, #0]
 80038b8:	07d9      	lsls	r1, r3, #31
 80038ba:	bf44      	itt	mi
 80038bc:	f043 0320 	orrmi.w	r3, r3, #32
 80038c0:	6023      	strmi	r3, [r4, #0]
 80038c2:	b11d      	cbz	r5, 80038cc <_printf_i+0x1a0>
 80038c4:	2310      	movs	r3, #16
 80038c6:	e7ab      	b.n	8003820 <_printf_i+0xf4>
 80038c8:	4826      	ldr	r0, [pc, #152]	@ (8003964 <_printf_i+0x238>)
 80038ca:	e7e9      	b.n	80038a0 <_printf_i+0x174>
 80038cc:	6823      	ldr	r3, [r4, #0]
 80038ce:	f023 0320 	bic.w	r3, r3, #32
 80038d2:	6023      	str	r3, [r4, #0]
 80038d4:	e7f6      	b.n	80038c4 <_printf_i+0x198>
 80038d6:	4616      	mov	r6, r2
 80038d8:	e7bd      	b.n	8003856 <_printf_i+0x12a>
 80038da:	6833      	ldr	r3, [r6, #0]
 80038dc:	6825      	ldr	r5, [r4, #0]
 80038de:	1d18      	adds	r0, r3, #4
 80038e0:	6961      	ldr	r1, [r4, #20]
 80038e2:	6030      	str	r0, [r6, #0]
 80038e4:	062e      	lsls	r6, r5, #24
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	d501      	bpl.n	80038ee <_printf_i+0x1c2>
 80038ea:	6019      	str	r1, [r3, #0]
 80038ec:	e002      	b.n	80038f4 <_printf_i+0x1c8>
 80038ee:	0668      	lsls	r0, r5, #25
 80038f0:	d5fb      	bpl.n	80038ea <_printf_i+0x1be>
 80038f2:	8019      	strh	r1, [r3, #0]
 80038f4:	2300      	movs	r3, #0
 80038f6:	4616      	mov	r6, r2
 80038f8:	6123      	str	r3, [r4, #16]
 80038fa:	e7bc      	b.n	8003876 <_printf_i+0x14a>
 80038fc:	6833      	ldr	r3, [r6, #0]
 80038fe:	2100      	movs	r1, #0
 8003900:	1d1a      	adds	r2, r3, #4
 8003902:	6032      	str	r2, [r6, #0]
 8003904:	681e      	ldr	r6, [r3, #0]
 8003906:	6862      	ldr	r2, [r4, #4]
 8003908:	4630      	mov	r0, r6
 800390a:	f000 f859 	bl	80039c0 <memchr>
 800390e:	b108      	cbz	r0, 8003914 <_printf_i+0x1e8>
 8003910:	1b80      	subs	r0, r0, r6
 8003912:	6060      	str	r0, [r4, #4]
 8003914:	6863      	ldr	r3, [r4, #4]
 8003916:	6123      	str	r3, [r4, #16]
 8003918:	2300      	movs	r3, #0
 800391a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800391e:	e7aa      	b.n	8003876 <_printf_i+0x14a>
 8003920:	4632      	mov	r2, r6
 8003922:	4649      	mov	r1, r9
 8003924:	4640      	mov	r0, r8
 8003926:	6923      	ldr	r3, [r4, #16]
 8003928:	47d0      	blx	sl
 800392a:	3001      	adds	r0, #1
 800392c:	d0ad      	beq.n	800388a <_printf_i+0x15e>
 800392e:	6823      	ldr	r3, [r4, #0]
 8003930:	079b      	lsls	r3, r3, #30
 8003932:	d413      	bmi.n	800395c <_printf_i+0x230>
 8003934:	68e0      	ldr	r0, [r4, #12]
 8003936:	9b03      	ldr	r3, [sp, #12]
 8003938:	4298      	cmp	r0, r3
 800393a:	bfb8      	it	lt
 800393c:	4618      	movlt	r0, r3
 800393e:	e7a6      	b.n	800388e <_printf_i+0x162>
 8003940:	2301      	movs	r3, #1
 8003942:	4632      	mov	r2, r6
 8003944:	4649      	mov	r1, r9
 8003946:	4640      	mov	r0, r8
 8003948:	47d0      	blx	sl
 800394a:	3001      	adds	r0, #1
 800394c:	d09d      	beq.n	800388a <_printf_i+0x15e>
 800394e:	3501      	adds	r5, #1
 8003950:	68e3      	ldr	r3, [r4, #12]
 8003952:	9903      	ldr	r1, [sp, #12]
 8003954:	1a5b      	subs	r3, r3, r1
 8003956:	42ab      	cmp	r3, r5
 8003958:	dcf2      	bgt.n	8003940 <_printf_i+0x214>
 800395a:	e7eb      	b.n	8003934 <_printf_i+0x208>
 800395c:	2500      	movs	r5, #0
 800395e:	f104 0619 	add.w	r6, r4, #25
 8003962:	e7f5      	b.n	8003950 <_printf_i+0x224>
 8003964:	08003abb 	.word	0x08003abb
 8003968:	08003acc 	.word	0x08003acc

0800396c <memmove>:
 800396c:	4288      	cmp	r0, r1
 800396e:	b510      	push	{r4, lr}
 8003970:	eb01 0402 	add.w	r4, r1, r2
 8003974:	d902      	bls.n	800397c <memmove+0x10>
 8003976:	4284      	cmp	r4, r0
 8003978:	4623      	mov	r3, r4
 800397a:	d807      	bhi.n	800398c <memmove+0x20>
 800397c:	1e43      	subs	r3, r0, #1
 800397e:	42a1      	cmp	r1, r4
 8003980:	d008      	beq.n	8003994 <memmove+0x28>
 8003982:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003986:	f803 2f01 	strb.w	r2, [r3, #1]!
 800398a:	e7f8      	b.n	800397e <memmove+0x12>
 800398c:	4601      	mov	r1, r0
 800398e:	4402      	add	r2, r0
 8003990:	428a      	cmp	r2, r1
 8003992:	d100      	bne.n	8003996 <memmove+0x2a>
 8003994:	bd10      	pop	{r4, pc}
 8003996:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800399a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800399e:	e7f7      	b.n	8003990 <memmove+0x24>

080039a0 <_sbrk_r>:
 80039a0:	b538      	push	{r3, r4, r5, lr}
 80039a2:	2300      	movs	r3, #0
 80039a4:	4d05      	ldr	r5, [pc, #20]	@ (80039bc <_sbrk_r+0x1c>)
 80039a6:	4604      	mov	r4, r0
 80039a8:	4608      	mov	r0, r1
 80039aa:	602b      	str	r3, [r5, #0]
 80039ac:	f7fc ff16 	bl	80007dc <_sbrk>
 80039b0:	1c43      	adds	r3, r0, #1
 80039b2:	d102      	bne.n	80039ba <_sbrk_r+0x1a>
 80039b4:	682b      	ldr	r3, [r5, #0]
 80039b6:	b103      	cbz	r3, 80039ba <_sbrk_r+0x1a>
 80039b8:	6023      	str	r3, [r4, #0]
 80039ba:	bd38      	pop	{r3, r4, r5, pc}
 80039bc:	20000318 	.word	0x20000318

080039c0 <memchr>:
 80039c0:	4603      	mov	r3, r0
 80039c2:	b510      	push	{r4, lr}
 80039c4:	b2c9      	uxtb	r1, r1
 80039c6:	4402      	add	r2, r0
 80039c8:	4293      	cmp	r3, r2
 80039ca:	4618      	mov	r0, r3
 80039cc:	d101      	bne.n	80039d2 <memchr+0x12>
 80039ce:	2000      	movs	r0, #0
 80039d0:	e003      	b.n	80039da <memchr+0x1a>
 80039d2:	7804      	ldrb	r4, [r0, #0]
 80039d4:	3301      	adds	r3, #1
 80039d6:	428c      	cmp	r4, r1
 80039d8:	d1f6      	bne.n	80039c8 <memchr+0x8>
 80039da:	bd10      	pop	{r4, pc}

080039dc <memcpy>:
 80039dc:	440a      	add	r2, r1
 80039de:	4291      	cmp	r1, r2
 80039e0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80039e4:	d100      	bne.n	80039e8 <memcpy+0xc>
 80039e6:	4770      	bx	lr
 80039e8:	b510      	push	{r4, lr}
 80039ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039ee:	4291      	cmp	r1, r2
 80039f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039f4:	d1f9      	bne.n	80039ea <memcpy+0xe>
 80039f6:	bd10      	pop	{r4, pc}

080039f8 <_realloc_r>:
 80039f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039fc:	4680      	mov	r8, r0
 80039fe:	4615      	mov	r5, r2
 8003a00:	460c      	mov	r4, r1
 8003a02:	b921      	cbnz	r1, 8003a0e <_realloc_r+0x16>
 8003a04:	4611      	mov	r1, r2
 8003a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a0a:	f7ff bc39 	b.w	8003280 <_malloc_r>
 8003a0e:	b92a      	cbnz	r2, 8003a1c <_realloc_r+0x24>
 8003a10:	f7ff fbcc 	bl	80031ac <_free_r>
 8003a14:	2400      	movs	r4, #0
 8003a16:	4620      	mov	r0, r4
 8003a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a1c:	f000 f81a 	bl	8003a54 <_malloc_usable_size_r>
 8003a20:	4285      	cmp	r5, r0
 8003a22:	4606      	mov	r6, r0
 8003a24:	d802      	bhi.n	8003a2c <_realloc_r+0x34>
 8003a26:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003a2a:	d8f4      	bhi.n	8003a16 <_realloc_r+0x1e>
 8003a2c:	4629      	mov	r1, r5
 8003a2e:	4640      	mov	r0, r8
 8003a30:	f7ff fc26 	bl	8003280 <_malloc_r>
 8003a34:	4607      	mov	r7, r0
 8003a36:	2800      	cmp	r0, #0
 8003a38:	d0ec      	beq.n	8003a14 <_realloc_r+0x1c>
 8003a3a:	42b5      	cmp	r5, r6
 8003a3c:	462a      	mov	r2, r5
 8003a3e:	4621      	mov	r1, r4
 8003a40:	bf28      	it	cs
 8003a42:	4632      	movcs	r2, r6
 8003a44:	f7ff ffca 	bl	80039dc <memcpy>
 8003a48:	4621      	mov	r1, r4
 8003a4a:	4640      	mov	r0, r8
 8003a4c:	f7ff fbae 	bl	80031ac <_free_r>
 8003a50:	463c      	mov	r4, r7
 8003a52:	e7e0      	b.n	8003a16 <_realloc_r+0x1e>

08003a54 <_malloc_usable_size_r>:
 8003a54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a58:	1f18      	subs	r0, r3, #4
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	bfbc      	itt	lt
 8003a5e:	580b      	ldrlt	r3, [r1, r0]
 8003a60:	18c0      	addlt	r0, r0, r3
 8003a62:	4770      	bx	lr

08003a64 <_init>:
 8003a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a66:	bf00      	nop
 8003a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a6a:	bc08      	pop	{r3}
 8003a6c:	469e      	mov	lr, r3
 8003a6e:	4770      	bx	lr

08003a70 <_fini>:
 8003a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a72:	bf00      	nop
 8003a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a76:	bc08      	pop	{r3}
 8003a78:	469e      	mov	lr, r3
 8003a7a:	4770      	bx	lr
