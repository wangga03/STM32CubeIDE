// Generated by gencpp from file krsbi2025/ObjectDetection.msg
// DO NOT EDIT!


#ifndef KRSBI2025_MESSAGE_OBJECTDETECTION_H
#define KRSBI2025_MESSAGE_OBJECTDETECTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <krsbi2025/BoundingBox.h>

namespace krsbi2025
{
template <class ContainerAllocator>
struct ObjectDetection_
{
  typedef ObjectDetection_<ContainerAllocator> Type;

  ObjectDetection_()
    : bounding_boxes()  {
    }
  ObjectDetection_(const ContainerAllocator& _alloc)
    : bounding_boxes(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::krsbi2025::BoundingBox_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::krsbi2025::BoundingBox_<ContainerAllocator> >> _bounding_boxes_type;
  _bounding_boxes_type bounding_boxes;





  typedef boost::shared_ptr< ::krsbi2025::ObjectDetection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::krsbi2025::ObjectDetection_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectDetection_

typedef ::krsbi2025::ObjectDetection_<std::allocator<void> > ObjectDetection;

typedef boost::shared_ptr< ::krsbi2025::ObjectDetection > ObjectDetectionPtr;
typedef boost::shared_ptr< ::krsbi2025::ObjectDetection const> ObjectDetectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::krsbi2025::ObjectDetection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::krsbi2025::ObjectDetection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::krsbi2025::ObjectDetection_<ContainerAllocator1> & lhs, const ::krsbi2025::ObjectDetection_<ContainerAllocator2> & rhs)
{
  return lhs.bounding_boxes == rhs.bounding_boxes;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::krsbi2025::ObjectDetection_<ContainerAllocator1> & lhs, const ::krsbi2025::ObjectDetection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace krsbi2025

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::krsbi2025::ObjectDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::krsbi2025::ObjectDetection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::krsbi2025::ObjectDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::krsbi2025::ObjectDetection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::krsbi2025::ObjectDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::krsbi2025::ObjectDetection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::krsbi2025::ObjectDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "40ad3b92e9c42aa93297fa5d037336cf";
  }

  static const char* value(const ::krsbi2025::ObjectDetection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x40ad3b92e9c42aa9ULL;
  static const uint64_t static_value2 = 0x3297fa5d037336cfULL;
};

template<class ContainerAllocator>
struct DataType< ::krsbi2025::ObjectDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "krsbi2025/ObjectDetection";
  }

  static const char* value(const ::krsbi2025::ObjectDetection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::krsbi2025::ObjectDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "BoundingBox[] bounding_boxes\n"
"================================================================================\n"
"MSG: krsbi2025/BoundingBox\n"
"string class_name\n"
"float32 probability\n"
"int16 x_min\n"
"int16 y_min\n"
"int16 x_max\n"
"int16 y_max\n"
;
  }

  static const char* value(const ::krsbi2025::ObjectDetection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::krsbi2025::ObjectDetection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bounding_boxes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectDetection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::krsbi2025::ObjectDetection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::krsbi2025::ObjectDetection_<ContainerAllocator>& v)
  {
    s << indent << "bounding_boxes[]" << std::endl;
    for (size_t i = 0; i < v.bounding_boxes.size(); ++i)
    {
      s << indent << "  bounding_boxes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::krsbi2025::BoundingBox_<ContainerAllocator> >::stream(s, indent + "    ", v.bounding_boxes[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KRSBI2025_MESSAGE_OBJECTDETECTION_H
