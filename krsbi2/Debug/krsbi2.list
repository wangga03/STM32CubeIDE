
krsbi2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1bc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  0800a360  0800a360  0000b360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a904  0800a904  0000c084  2**0
                  CONTENTS
  4 .ARM          00000008  0800a904  0800a904  0000b904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a90c  0800a90c  0000c084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a90c  0800a90c  0000b90c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a914  0800a914  0000b914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  0800a918  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d60  20000084  0800a99c  0000c084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000de4  0800a99c  0000cde4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000195bd  00000000  00000000  0000c0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036f6  00000000  00000000  00025671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  00028d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fd5  00000000  00000000  0002a1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e35  00000000  00000000  0002b175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017add  00000000  00000000  00044faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a1a6  00000000  00000000  0005ca87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f6c2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000618c  00000000  00000000  000f6c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000fcdfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a344 	.word	0x0800a344

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	0800a344 	.word	0x0800a344

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2f>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b70:	bf24      	itt	cs
 8000b72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b7a:	d90d      	bls.n	8000b98 <__aeabi_d2f+0x30>
 8000b7c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b88:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b9c:	d121      	bne.n	8000be2 <__aeabi_d2f+0x7a>
 8000b9e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ba2:	bfbc      	itt	lt
 8000ba4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	4770      	bxlt	lr
 8000baa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb2:	f1c2 0218 	rsb	r2, r2, #24
 8000bb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	f040 0001 	orrne.w	r0, r0, #1
 8000bc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd4:	ea40 000c 	orr.w	r0, r0, ip
 8000bd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be0:	e7cc      	b.n	8000b7c <__aeabi_d2f+0x14>
 8000be2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000be6:	d107      	bne.n	8000bf8 <__aeabi_d2f+0x90>
 8000be8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bec:	bf1e      	ittt	ne
 8000bee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bf2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bf6:	4770      	bxne	lr
 8000bf8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bfc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c1c:	f000 b96a 	b.w	8000ef4 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	460c      	mov	r4, r1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d14e      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c44:	4694      	mov	ip, r2
 8000c46:	458c      	cmp	ip, r1
 8000c48:	4686      	mov	lr, r0
 8000c4a:	fab2 f282 	clz	r2, r2
 8000c4e:	d962      	bls.n	8000d16 <__udivmoddi4+0xde>
 8000c50:	b14a      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c52:	f1c2 0320 	rsb	r3, r2, #32
 8000c56:	4091      	lsls	r1, r2
 8000c58:	fa20 f303 	lsr.w	r3, r0, r3
 8000c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c60:	4319      	orrs	r1, r3
 8000c62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6a:	fa1f f68c 	uxth.w	r6, ip
 8000c6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c76:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb04 f106 	mul.w	r1, r4, r6
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c8e:	f080 8112 	bcs.w	8000eb6 <__udivmoddi4+0x27e>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 810f 	bls.w	8000eb6 <__udivmoddi4+0x27e>
 8000c98:	3c02      	subs	r4, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a59      	subs	r1, r3, r1
 8000c9e:	fa1f f38e 	uxth.w	r3, lr
 8000ca2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca6:	fb07 1110 	mls	r1, r7, r0, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb00 f606 	mul.w	r6, r0, r6
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x94>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cbe:	f080 80fc 	bcs.w	8000eba <__udivmoddi4+0x282>
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	f240 80f9 	bls.w	8000eba <__udivmoddi4+0x282>
 8000cc8:	4463      	add	r3, ip
 8000cca:	3802      	subs	r0, #2
 8000ccc:	1b9b      	subs	r3, r3, r6
 8000cce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	b11d      	cbz	r5, 8000cde <__udivmoddi4+0xa6>
 8000cd6:	40d3      	lsrs	r3, r2
 8000cd8:	2200      	movs	r2, #0
 8000cda:	e9c5 3200 	strd	r3, r2, [r5]
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d905      	bls.n	8000cf2 <__udivmoddi4+0xba>
 8000ce6:	b10d      	cbz	r5, 8000cec <__udivmoddi4+0xb4>
 8000ce8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e7f5      	b.n	8000cde <__udivmoddi4+0xa6>
 8000cf2:	fab3 f183 	clz	r1, r3
 8000cf6:	2900      	cmp	r1, #0
 8000cf8:	d146      	bne.n	8000d88 <__udivmoddi4+0x150>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d302      	bcc.n	8000d04 <__udivmoddi4+0xcc>
 8000cfe:	4290      	cmp	r0, r2
 8000d00:	f0c0 80f0 	bcc.w	8000ee4 <__udivmoddi4+0x2ac>
 8000d04:	1a86      	subs	r6, r0, r2
 8000d06:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	d0e6      	beq.n	8000cde <__udivmoddi4+0xa6>
 8000d10:	e9c5 6300 	strd	r6, r3, [r5]
 8000d14:	e7e3      	b.n	8000cde <__udivmoddi4+0xa6>
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x204>
 8000d1c:	eba1 040c 	sub.w	r4, r1, ip
 8000d20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d24:	fa1f f78c 	uxth.w	r7, ip
 8000d28:	2101      	movs	r1, #1
 8000d2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d32:	fb08 4416 	mls	r4, r8, r6, r4
 8000d36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3a:	fb07 f006 	mul.w	r0, r7, r6
 8000d3e:	4298      	cmp	r0, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x11c>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x11a>
 8000d4c:	4298      	cmp	r0, r3
 8000d4e:	f200 80cd 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d52:	4626      	mov	r6, r4
 8000d54:	1a1c      	subs	r4, r3, r0
 8000d56:	fa1f f38e 	uxth.w	r3, lr
 8000d5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d66:	fb00 f707 	mul.w	r7, r0, r7
 8000d6a:	429f      	cmp	r7, r3
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x148>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x146>
 8000d78:	429f      	cmp	r7, r3
 8000d7a:	f200 80b0 	bhi.w	8000ede <__udivmoddi4+0x2a6>
 8000d7e:	4620      	mov	r0, r4
 8000d80:	1bdb      	subs	r3, r3, r7
 8000d82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d86:	e7a5      	b.n	8000cd4 <__udivmoddi4+0x9c>
 8000d88:	f1c1 0620 	rsb	r6, r1, #32
 8000d8c:	408b      	lsls	r3, r1
 8000d8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d92:	431f      	orrs	r7, r3
 8000d94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d98:	fa04 f301 	lsl.w	r3, r4, r1
 8000d9c:	ea43 030c 	orr.w	r3, r3, ip
 8000da0:	40f4      	lsrs	r4, r6
 8000da2:	fa00 f801 	lsl.w	r8, r0, r1
 8000da6:	0c38      	lsrs	r0, r7, #16
 8000da8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dac:	fbb4 fef0 	udiv	lr, r4, r0
 8000db0:	fa1f fc87 	uxth.w	ip, r7
 8000db4:	fb00 441e 	mls	r4, r0, lr, r4
 8000db8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dbc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc0:	45a1      	cmp	r9, r4
 8000dc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc6:	d90a      	bls.n	8000dde <__udivmoddi4+0x1a6>
 8000dc8:	193c      	adds	r4, r7, r4
 8000dca:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dce:	f080 8084 	bcs.w	8000eda <__udivmoddi4+0x2a2>
 8000dd2:	45a1      	cmp	r9, r4
 8000dd4:	f240 8081 	bls.w	8000eda <__udivmoddi4+0x2a2>
 8000dd8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ddc:	443c      	add	r4, r7
 8000dde:	eba4 0409 	sub.w	r4, r4, r9
 8000de2:	fa1f f983 	uxth.w	r9, r3
 8000de6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dea:	fb00 4413 	mls	r4, r0, r3, r4
 8000dee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df6:	45a4      	cmp	ip, r4
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x1d2>
 8000dfa:	193c      	adds	r4, r7, r4
 8000dfc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e00:	d267      	bcs.n	8000ed2 <__udivmoddi4+0x29a>
 8000e02:	45a4      	cmp	ip, r4
 8000e04:	d965      	bls.n	8000ed2 <__udivmoddi4+0x29a>
 8000e06:	3b02      	subs	r3, #2
 8000e08:	443c      	add	r4, r7
 8000e0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e12:	eba4 040c 	sub.w	r4, r4, ip
 8000e16:	429c      	cmp	r4, r3
 8000e18:	46ce      	mov	lr, r9
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	d351      	bcc.n	8000ec2 <__udivmoddi4+0x28a>
 8000e1e:	d04e      	beq.n	8000ebe <__udivmoddi4+0x286>
 8000e20:	b155      	cbz	r5, 8000e38 <__udivmoddi4+0x200>
 8000e22:	ebb8 030e 	subs.w	r3, r8, lr
 8000e26:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e2e:	40cb      	lsrs	r3, r1
 8000e30:	431e      	orrs	r6, r3
 8000e32:	40cc      	lsrs	r4, r1
 8000e34:	e9c5 6400 	strd	r6, r4, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	e750      	b.n	8000cde <__udivmoddi4+0xa6>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f103 	lsr.w	r1, r0, r3
 8000e44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e48:	fa24 f303 	lsr.w	r3, r4, r3
 8000e4c:	4094      	lsls	r4, r2
 8000e4e:	430c      	orrs	r4, r1
 8000e50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e58:	fa1f f78c 	uxth.w	r7, ip
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3110 	mls	r1, r8, r0, r3
 8000e64:	0c23      	lsrs	r3, r4, #16
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb00 f107 	mul.w	r1, r0, r7
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x24c>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e7a:	d22c      	bcs.n	8000ed6 <__udivmoddi4+0x29e>
 8000e7c:	4299      	cmp	r1, r3
 8000e7e:	d92a      	bls.n	8000ed6 <__udivmoddi4+0x29e>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4463      	add	r3, ip
 8000e84:	1a5b      	subs	r3, r3, r1
 8000e86:	b2a4      	uxth	r4, r4
 8000e88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e94:	fb01 f307 	mul.w	r3, r1, r7
 8000e98:	42a3      	cmp	r3, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x276>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ea4:	d213      	bcs.n	8000ece <__udivmoddi4+0x296>
 8000ea6:	42a3      	cmp	r3, r4
 8000ea8:	d911      	bls.n	8000ece <__udivmoddi4+0x296>
 8000eaa:	3902      	subs	r1, #2
 8000eac:	4464      	add	r4, ip
 8000eae:	1ae4      	subs	r4, r4, r3
 8000eb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb4:	e739      	b.n	8000d2a <__udivmoddi4+0xf2>
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	e6f0      	b.n	8000c9c <__udivmoddi4+0x64>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e706      	b.n	8000ccc <__udivmoddi4+0x94>
 8000ebe:	45c8      	cmp	r8, r9
 8000ec0:	d2ae      	bcs.n	8000e20 <__udivmoddi4+0x1e8>
 8000ec2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ec6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eca:	3801      	subs	r0, #1
 8000ecc:	e7a8      	b.n	8000e20 <__udivmoddi4+0x1e8>
 8000ece:	4631      	mov	r1, r6
 8000ed0:	e7ed      	b.n	8000eae <__udivmoddi4+0x276>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	e799      	b.n	8000e0a <__udivmoddi4+0x1d2>
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	e7d4      	b.n	8000e84 <__udivmoddi4+0x24c>
 8000eda:	46d6      	mov	lr, sl
 8000edc:	e77f      	b.n	8000dde <__udivmoddi4+0x1a6>
 8000ede:	4463      	add	r3, ip
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	e74d      	b.n	8000d80 <__udivmoddi4+0x148>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	4608      	mov	r0, r1
 8000eea:	e70f      	b.n	8000d0c <__udivmoddi4+0xd4>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	4463      	add	r3, ip
 8000ef0:	e730      	b.n	8000d54 <__udivmoddi4+0x11c>
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	0a5a      	lsrs	r2, r3, #9
 8000f08:	490f      	ldr	r1, [pc, #60]	@ (8000f48 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000f0a:	fba1 1202 	umull	r1, r2, r1, r2
 8000f0e:	09d2      	lsrs	r2, r2, #7
 8000f10:	490e      	ldr	r1, [pc, #56]	@ (8000f4c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000f12:	fb01 f202 	mul.w	r2, r1, r2
 8000f16:	1a9b      	subs	r3, r3, r2
 8000f18:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	0a5b      	lsrs	r3, r3, #9
 8000f20:	4a09      	ldr	r2, [pc, #36]	@ (8000f48 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000f22:	fba2 2303 	umull	r2, r3, r2, r3
 8000f26:	09db      	lsrs	r3, r3, #7
 8000f28:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	441a      	add	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	601a      	str	r2, [r3, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	00044b83 	.word	0x00044b83
 8000f4c:	3b9aca00 	.word	0x3b9aca00

08000f50 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	2007      	movs	r0, #7
 8000f60:	f000 fb16 	bl	8001590 <bno055_writeData>
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	203d      	movs	r0, #61	@ 0x3d
 8000f7c:	f000 fb08 	bl	8001590 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d103      	bne.n	8000f8e <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000f86:	2013      	movs	r0, #19
 8000f88:	f000 faf6 	bl	8001578 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000f8c:	e002      	b.n	8000f94 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000f8e:	2007      	movs	r0, #7
 8000f90:	f000 faf2 	bl	8001578 <bno055_delay>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f7ff ffe3 	bl	8000f6c <bno055_setOperationMode>
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000faa:	b580      	push	{r7, lr}
 8000fac:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000fae:	200c      	movs	r0, #12
 8000fb0:	f7ff ffdc 	bl	8000f6c <bno055_setOperationMode>
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000fbc:	2120      	movs	r1, #32
 8000fbe:	203f      	movs	r0, #63	@ 0x3f
 8000fc0:	f000 fae6 	bl	8001590 <bno055_writeData>
  bno055_delay(700);
 8000fc4:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8000fc8:	f000 fad6 	bl	8001578 <bno055_delay>
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
  bno055_reset();
 8000fd6:	f7ff ffef 	bl	8000fb8 <bno055_reset>

  uint8_t id = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000fde:	1dfb      	adds	r3, r7, #7
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f000 fbbf 	bl	8001768 <bno055_readData>
  if (id != BNO055_ID) {
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	2ba0      	cmp	r3, #160	@ 0xa0
 8000fee:	d004      	beq.n	8000ffa <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4809      	ldr	r0, [pc, #36]	@ (800101c <bno055_setup+0x4c>)
 8000ff6:	f008 fac3 	bl	8009580 <iprintf>
  }
  bno055_setPage(0);
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f7ff ffa8 	bl	8000f50 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8001000:	2100      	movs	r1, #0
 8001002:	203f      	movs	r0, #63	@ 0x3f
 8001004:	f000 fac4 	bl	8001590 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8001008:	f7ff ffc8 	bl	8000f9c <bno055_setOperationModeConfig>
  bno055_delay(10);
 800100c:	200a      	movs	r0, #10
 800100e:	f000 fab3 	bl	8001578 <bno055_delay>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	0800a360 	.word	0x0800a360

08001020 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8001020:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001024:	b09e      	sub	sp, #120	@ 0x78
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 800102e:	2000      	movs	r0, #0
 8001030:	f7ff ff8e 	bl	8000f50 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8001034:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001038:	2b20      	cmp	r3, #32
 800103a:	d108      	bne.n	800104e <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 800103c:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001040:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001044:	2208      	movs	r2, #8
 8001046:	4618      	mov	r0, r3
 8001048:	f000 fb8e 	bl	8001768 <bno055_readData>
 800104c:	e007      	b.n	800105e <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 800104e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001052:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001056:	2206      	movs	r2, #6
 8001058:	4618      	mov	r0, r3
 800105a:	f000 fb85 	bl	8001768 <bno055_readData>

  double scale = 1;
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	4b8b      	ldr	r3, [pc, #556]	@ (8001290 <bno055_getVector+0x270>)
 8001064:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8001068:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800106c:	2b0e      	cmp	r3, #14
 800106e:	d109      	bne.n	8001084 <bno055_getVector+0x64>
    scale = magScale;
 8001070:	4b88      	ldr	r3, [pc, #544]	@ (8001294 <bno055_getVector+0x274>)
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fa4d 	bl	8000514 <__aeabi_ui2d>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001082:	e03e      	b.n	8001102 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8001084:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001088:	2b08      	cmp	r3, #8
 800108a:	d007      	beq.n	800109c <bno055_getVector+0x7c>
 800108c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001090:	2b28      	cmp	r3, #40	@ 0x28
 8001092:	d003      	beq.n	800109c <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8001094:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001098:	2b2e      	cmp	r3, #46	@ 0x2e
 800109a:	d109      	bne.n	80010b0 <bno055_getVector+0x90>
    scale = accelScale;
 800109c:	4b7e      	ldr	r3, [pc, #504]	@ (8001298 <bno055_getVector+0x278>)
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fa37 	bl	8000514 <__aeabi_ui2d>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 80010ae:	e028      	b.n	8001102 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 80010b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80010b4:	2b14      	cmp	r3, #20
 80010b6:	d109      	bne.n	80010cc <bno055_getVector+0xac>
    scale = angularRateScale;
 80010b8:	4b78      	ldr	r3, [pc, #480]	@ (800129c <bno055_getVector+0x27c>)
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fa29 	bl	8000514 <__aeabi_ui2d>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 80010ca:	e01a      	b.n	8001102 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 80010cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80010d0:	2b1a      	cmp	r3, #26
 80010d2:	d109      	bne.n	80010e8 <bno055_getVector+0xc8>
    scale = eulerScale;
 80010d4:	4b72      	ldr	r3, [pc, #456]	@ (80012a0 <bno055_getVector+0x280>)
 80010d6:	881b      	ldrh	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fa1b 	bl	8000514 <__aeabi_ui2d>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 80010e6:	e00c      	b.n	8001102 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 80010e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80010ec:	2b20      	cmp	r3, #32
 80010ee:	d108      	bne.n	8001102 <bno055_getVector+0xe2>
    scale = quaScale;
 80010f0:	4b6c      	ldr	r3, [pc, #432]	@ (80012a4 <bno055_getVector+0x284>)
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fa0d 	bl	8000514 <__aeabi_ui2d>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8001102:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001106:	2220      	movs	r2, #32
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f008 fb80 	bl	8009810 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001110:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001114:	2b20      	cmp	r3, #32
 8001116:	d150      	bne.n	80011ba <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001118:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800111c:	021b      	lsls	r3, r3, #8
 800111e:	b21a      	sxth	r2, r3
 8001120:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001124:	b21b      	sxth	r3, r3
 8001126:	4313      	orrs	r3, r2
 8001128:	b21b      	sxth	r3, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fa02 	bl	8000534 <__aeabi_i2d>
 8001130:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001134:	f7ff fb92 	bl	800085c <__aeabi_ddiv>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001140:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	b21a      	sxth	r2, r3
 8001148:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800114c:	b21b      	sxth	r3, r3
 800114e:	4313      	orrs	r3, r2
 8001150:	b21b      	sxth	r3, r3
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff f9ee 	bl	8000534 <__aeabi_i2d>
 8001158:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800115c:	f7ff fb7e 	bl	800085c <__aeabi_ddiv>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001168:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	b21a      	sxth	r2, r3
 8001170:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001174:	b21b      	sxth	r3, r3
 8001176:	4313      	orrs	r3, r2
 8001178:	b21b      	sxth	r3, r3
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f9da 	bl	8000534 <__aeabi_i2d>
 8001180:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001184:	f7ff fb6a 	bl	800085c <__aeabi_ddiv>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8001190:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001194:	021b      	lsls	r3, r3, #8
 8001196:	b21a      	sxth	r2, r3
 8001198:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800119c:	b21b      	sxth	r3, r3
 800119e:	4313      	orrs	r3, r2
 80011a0:	b21b      	sxth	r3, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f9c6 	bl	8000534 <__aeabi_i2d>
 80011a8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80011ac:	f7ff fb56 	bl	800085c <__aeabi_ddiv>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 80011b8:	e03b      	b.n	8001232 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80011ba:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	b21a      	sxth	r2, r3
 80011c2:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80011c6:	b21b      	sxth	r3, r3
 80011c8:	4313      	orrs	r3, r2
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f9b1 	bl	8000534 <__aeabi_i2d>
 80011d2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80011d6:	f7ff fb41 	bl	800085c <__aeabi_ddiv>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80011e2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	b21a      	sxth	r2, r3
 80011ea:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80011ee:	b21b      	sxth	r3, r3
 80011f0:	4313      	orrs	r3, r2
 80011f2:	b21b      	sxth	r3, r3
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff f99d 	bl	8000534 <__aeabi_i2d>
 80011fa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80011fe:	f7ff fb2d 	bl	800085c <__aeabi_ddiv>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800120a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	b21a      	sxth	r2, r3
 8001212:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001216:	b21b      	sxth	r3, r3
 8001218:	4313      	orrs	r3, r2
 800121a:	b21b      	sxth	r3, r3
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff f989 	bl	8000534 <__aeabi_i2d>
 8001222:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001226:	f7ff fb19 	bl	800085c <__aeabi_ddiv>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 8001232:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8001236:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 800123a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800123c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800123e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001242:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001246:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800124a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800124e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001252:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001256:	ec49 8b14 	vmov	d4, r8, r9
 800125a:	ec45 4b15 	vmov	d5, r4, r5
 800125e:	ec41 0b16 	vmov	d6, r0, r1
 8001262:	ec43 2b17 	vmov	d7, r2, r3
}
 8001266:	eeb0 0a44 	vmov.f32	s0, s8
 800126a:	eef0 0a64 	vmov.f32	s1, s9
 800126e:	eeb0 1a45 	vmov.f32	s2, s10
 8001272:	eef0 1a65 	vmov.f32	s3, s11
 8001276:	eeb0 2a46 	vmov.f32	s4, s12
 800127a:	eef0 2a66 	vmov.f32	s5, s13
 800127e:	eeb0 3a47 	vmov.f32	s6, s14
 8001282:	eef0 3a67 	vmov.f32	s7, s15
 8001286:	3778      	adds	r7, #120	@ 0x78
 8001288:	46bd      	mov	sp, r7
 800128a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800128e:	bf00      	nop
 8001290:	3ff00000 	.word	0x3ff00000
 8001294:	20000006 	.word	0x20000006
 8001298:	20000000 	.word	0x20000000
 800129c:	20000002 	.word	0x20000002
 80012a0:	20000004 	.word	0x20000004
 80012a4:	20000008 	.word	0x20000008

080012a8 <bno055_getVectorQuaternion>:
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
}
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 80012a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012ac:	b090      	sub	sp, #64	@ 0x40
 80012ae:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 80012b0:	2020      	movs	r0, #32
 80012b2:	f7ff feb5 	bl	8001020 <bno055_getVector>
 80012b6:	eeb0 4a40 	vmov.f32	s8, s0
 80012ba:	eef0 4a60 	vmov.f32	s9, s1
 80012be:	eeb0 5a41 	vmov.f32	s10, s2
 80012c2:	eef0 5a61 	vmov.f32	s11, s3
 80012c6:	eeb0 6a42 	vmov.f32	s12, s4
 80012ca:	eef0 6a62 	vmov.f32	s13, s5
 80012ce:	eeb0 7a43 	vmov.f32	s14, s6
 80012d2:	eef0 7a63 	vmov.f32	s15, s7
 80012d6:	ed87 4b08 	vstr	d4, [r7, #32]
 80012da:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 80012de:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 80012e2:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 80012e6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80012ea:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80012ee:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80012f2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80012f6:	ec49 8b14 	vmov	d4, r8, r9
 80012fa:	ec45 4b15 	vmov	d5, r4, r5
 80012fe:	ec41 0b16 	vmov	d6, r0, r1
 8001302:	ec43 2b17 	vmov	d7, r2, r3
}
 8001306:	eeb0 0a44 	vmov.f32	s0, s8
 800130a:	eef0 0a64 	vmov.f32	s1, s9
 800130e:	eeb0 1a45 	vmov.f32	s2, s10
 8001312:	eef0 1a65 	vmov.f32	s3, s11
 8001316:	eeb0 2a46 	vmov.f32	s4, s12
 800131a:	eef0 2a66 	vmov.f32	s5, s13
 800131e:	eeb0 3a47 	vmov.f32	s6, s14
 8001322:	eef0 3a67 	vmov.f32	s7, s15
 8001326:	3740      	adds	r7, #64	@ 0x40
 8001328:	46bd      	mov	sp, r7
 800132a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001330 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	4b10      	ldr	r3, [pc, #64]	@ (800137c <MX_DMA_Init+0x4c>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	4a0f      	ldr	r2, [pc, #60]	@ (800137c <MX_DMA_Init+0x4c>)
 8001340:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001344:	6313      	str	r3, [r2, #48]	@ 0x30
 8001346:	4b0d      	ldr	r3, [pc, #52]	@ (800137c <MX_DMA_Init+0x4c>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2100      	movs	r1, #0
 8001356:	2010      	movs	r0, #16
 8001358:	f003 f98f 	bl	800467a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800135c:	2010      	movs	r0, #16
 800135e:	f003 f9a8 	bl	80046b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2100      	movs	r1, #0
 8001366:	2011      	movs	r0, #17
 8001368:	f003 f987 	bl	800467a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800136c:	2011      	movs	r0, #17
 800136e:	f003 f9a0 	bl	80046b2 <HAL_NVIC_EnableIRQ>

}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800

08001380 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	@ 0x28
 8001384:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
 8001394:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	4b31      	ldr	r3, [pc, #196]	@ (8001460 <MX_GPIO_Init+0xe0>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	4a30      	ldr	r2, [pc, #192]	@ (8001460 <MX_GPIO_Init+0xe0>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001460 <MX_GPIO_Init+0xe0>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001460 <MX_GPIO_Init+0xe0>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	4a29      	ldr	r2, [pc, #164]	@ (8001460 <MX_GPIO_Init+0xe0>)
 80013bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c2:	4b27      	ldr	r3, [pc, #156]	@ (8001460 <MX_GPIO_Init+0xe0>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	4b23      	ldr	r3, [pc, #140]	@ (8001460 <MX_GPIO_Init+0xe0>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	4a22      	ldr	r2, [pc, #136]	@ (8001460 <MX_GPIO_Init+0xe0>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013de:	4b20      	ldr	r3, [pc, #128]	@ (8001460 <MX_GPIO_Init+0xe0>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001460 <MX_GPIO_Init+0xe0>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001460 <MX_GPIO_Init+0xe0>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fa:	4b19      	ldr	r3, [pc, #100]	@ (8001460 <MX_GPIO_Init+0xe0>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800140c:	4815      	ldr	r0, [pc, #84]	@ (8001464 <MX_GPIO_Init+0xe4>)
 800140e:	f003 fef1 	bl	80051f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KICKER_GPIO_Port, KICKER_Pin, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	2120      	movs	r1, #32
 8001416:	4814      	ldr	r0, [pc, #80]	@ (8001468 <MX_GPIO_Init+0xe8>)
 8001418:	f003 feec 	bl	80051f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_Pin;
 800141c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001422:	2311      	movs	r3, #17
 8001424:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	4619      	mov	r1, r3
 8001434:	480b      	ldr	r0, [pc, #44]	@ (8001464 <MX_GPIO_Init+0xe4>)
 8001436:	f003 fd59 	bl	8004eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KICKER_Pin;
 800143a:	2320      	movs	r3, #32
 800143c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143e:	2301      	movs	r3, #1
 8001440:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KICKER_GPIO_Port, &GPIO_InitStruct);
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	4619      	mov	r1, r3
 8001450:	4805      	ldr	r0, [pc, #20]	@ (8001468 <MX_GPIO_Init+0xe8>)
 8001452:	f003 fd4b 	bl	8004eec <HAL_GPIO_Init>

}
 8001456:	bf00      	nop
 8001458:	3728      	adds	r7, #40	@ 0x28
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800
 8001464:	40020800 	.word	0x40020800
 8001468:	40020400 	.word	0x40020400

0800146c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001470:	4b12      	ldr	r3, [pc, #72]	@ (80014bc <MX_I2C1_Init+0x50>)
 8001472:	4a13      	ldr	r2, [pc, #76]	@ (80014c0 <MX_I2C1_Init+0x54>)
 8001474:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001476:	4b11      	ldr	r3, [pc, #68]	@ (80014bc <MX_I2C1_Init+0x50>)
 8001478:	4a12      	ldr	r2, [pc, #72]	@ (80014c4 <MX_I2C1_Init+0x58>)
 800147a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800147c:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <MX_I2C1_Init+0x50>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <MX_I2C1_Init+0x50>)
 8001484:	2200      	movs	r2, #0
 8001486:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001488:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <MX_I2C1_Init+0x50>)
 800148a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800148e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001490:	4b0a      	ldr	r3, [pc, #40]	@ (80014bc <MX_I2C1_Init+0x50>)
 8001492:	2200      	movs	r2, #0
 8001494:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001496:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <MX_I2C1_Init+0x50>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800149c:	4b07      	ldr	r3, [pc, #28]	@ (80014bc <MX_I2C1_Init+0x50>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014a2:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <MX_I2C1_Init+0x50>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014a8:	4804      	ldr	r0, [pc, #16]	@ (80014bc <MX_I2C1_Init+0x50>)
 80014aa:	f003 febd 	bl	8005228 <HAL_I2C_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014b4:	f000 fc0a 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	200000a0 	.word	0x200000a0
 80014c0:	40005400 	.word	0x40005400
 80014c4:	000186a0 	.word	0x000186a0

080014c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	@ 0x28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a19      	ldr	r2, [pc, #100]	@ (800154c <HAL_I2C_MspInit+0x84>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d12b      	bne.n	8001542 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	4b18      	ldr	r3, [pc, #96]	@ (8001550 <HAL_I2C_MspInit+0x88>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	4a17      	ldr	r2, [pc, #92]	@ (8001550 <HAL_I2C_MspInit+0x88>)
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fa:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <HAL_I2C_MspInit+0x88>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001506:	23c0      	movs	r3, #192	@ 0xc0
 8001508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800150a:	2312      	movs	r3, #18
 800150c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001512:	2303      	movs	r3, #3
 8001514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001516:	2304      	movs	r3, #4
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4619      	mov	r1, r3
 8001520:	480c      	ldr	r0, [pc, #48]	@ (8001554 <HAL_I2C_MspInit+0x8c>)
 8001522:	f003 fce3 	bl	8004eec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b09      	ldr	r3, [pc, #36]	@ (8001550 <HAL_I2C_MspInit+0x88>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152e:	4a08      	ldr	r2, [pc, #32]	@ (8001550 <HAL_I2C_MspInit+0x88>)
 8001530:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001534:	6413      	str	r3, [r2, #64]	@ 0x40
 8001536:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <HAL_I2C_MspInit+0x88>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001542:	bf00      	nop
 8001544:	3728      	adds	r7, #40	@ 0x28
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40005400 	.word	0x40005400
 8001550:	40023800 	.word	0x40023800
 8001554:	40020400 	.word	0x40020400

08001558 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001560:	4a04      	ldr	r2, [pc, #16]	@ (8001574 <bno055_assignI2C+0x1c>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6013      	str	r3, [r2, #0]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	200000f4 	.word	0x200000f4

08001578 <bno055_delay>:

void bno055_delay(int time) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4618      	mov	r0, r3
 8001584:	f002 ff7a 	bl	800447c <HAL_Delay>
#endif
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b088      	sub	sp, #32
 8001594:	af02      	add	r7, sp, #8
 8001596:	4603      	mov	r3, r0
 8001598:	460a      	mov	r2, r1
 800159a:	71fb      	strb	r3, [r7, #7]
 800159c:	4613      	mov	r3, r2
 800159e:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	733b      	strb	r3, [r7, #12]
 80015a4:	79bb      	ldrb	r3, [r7, #6]
 80015a6:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 80015a8:	4b5a      	ldr	r3, [pc, #360]	@ (8001714 <bno055_writeData+0x184>)
 80015aa:	6818      	ldr	r0, [r3, #0]
 80015ac:	f107 020c 	add.w	r2, r7, #12
 80015b0:	230a      	movs	r3, #10
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2302      	movs	r3, #2
 80015b6:	2150      	movs	r1, #80	@ 0x50
 80015b8:	f003 ff7a 	bl	80054b0 <HAL_I2C_Master_Transmit>
 80015bc:	4603      	mov	r3, r0
 80015be:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 80015c0:	7dfb      	ldrb	r3, [r7, #23]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f000 80a0 	beq.w	8001708 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 80015c8:	7dfb      	ldrb	r3, [r7, #23]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d103      	bne.n	80015d6 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80015ce:	4852      	ldr	r0, [pc, #328]	@ (8001718 <bno055_writeData+0x188>)
 80015d0:	f008 f83e 	bl	8009650 <puts>
 80015d4:	e012      	b.n	80015fc <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 80015d6:	7dfb      	ldrb	r3, [r7, #23]
 80015d8:	2b03      	cmp	r3, #3
 80015da:	d103      	bne.n	80015e4 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 80015dc:	484f      	ldr	r0, [pc, #316]	@ (800171c <bno055_writeData+0x18c>)
 80015de:	f008 f837 	bl	8009650 <puts>
 80015e2:	e00b      	b.n	80015fc <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 80015e4:	7dfb      	ldrb	r3, [r7, #23]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d103      	bne.n	80015f2 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 80015ea:	484d      	ldr	r0, [pc, #308]	@ (8001720 <bno055_writeData+0x190>)
 80015ec:	f008 f830 	bl	8009650 <puts>
 80015f0:	e004      	b.n	80015fc <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 80015f2:	7dfb      	ldrb	r3, [r7, #23]
 80015f4:	4619      	mov	r1, r3
 80015f6:	484b      	ldr	r0, [pc, #300]	@ (8001724 <bno055_writeData+0x194>)
 80015f8:	f007 ffc2 	bl	8009580 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 80015fc:	4b45      	ldr	r3, [pc, #276]	@ (8001714 <bno055_writeData+0x184>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f004 fa93 	bl	8005b2c <HAL_I2C_GetError>
 8001606:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d07e      	beq.n	800170c <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d103      	bne.n	800161c <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001614:	4844      	ldr	r0, [pc, #272]	@ (8001728 <bno055_writeData+0x198>)
 8001616:	f008 f81b 	bl	8009650 <puts>
 800161a:	e021      	b.n	8001660 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	2b02      	cmp	r3, #2
 8001620:	d103      	bne.n	800162a <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8001622:	4842      	ldr	r0, [pc, #264]	@ (800172c <bno055_writeData+0x19c>)
 8001624:	f008 f814 	bl	8009650 <puts>
 8001628:	e01a      	b.n	8001660 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	2b04      	cmp	r3, #4
 800162e:	d103      	bne.n	8001638 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001630:	483f      	ldr	r0, [pc, #252]	@ (8001730 <bno055_writeData+0x1a0>)
 8001632:	f008 f80d 	bl	8009650 <puts>
 8001636:	e013      	b.n	8001660 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	2b08      	cmp	r3, #8
 800163c:	d103      	bne.n	8001646 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 800163e:	483d      	ldr	r0, [pc, #244]	@ (8001734 <bno055_writeData+0x1a4>)
 8001640:	f008 f806 	bl	8009650 <puts>
 8001644:	e00c      	b.n	8001660 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	2b10      	cmp	r3, #16
 800164a:	d103      	bne.n	8001654 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 800164c:	483a      	ldr	r0, [pc, #232]	@ (8001738 <bno055_writeData+0x1a8>)
 800164e:	f007 ffff 	bl	8009650 <puts>
 8001652:	e005      	b.n	8001660 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	2b20      	cmp	r3, #32
 8001658:	d102      	bne.n	8001660 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 800165a:	4838      	ldr	r0, [pc, #224]	@ (800173c <bno055_writeData+0x1ac>)
 800165c:	f007 fff8 	bl	8009650 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001660:	4b2c      	ldr	r3, [pc, #176]	@ (8001714 <bno055_writeData+0x184>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f004 fa53 	bl	8005b10 <HAL_I2C_GetState>
 800166a:	4603      	mov	r3, r0
 800166c:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d103      	bne.n	800167c <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001674:	4832      	ldr	r0, [pc, #200]	@ (8001740 <bno055_writeData+0x1b0>)
 8001676:	f007 ffeb 	bl	8009650 <puts>
 800167a:	e048      	b.n	800170e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	2b20      	cmp	r3, #32
 8001680:	d103      	bne.n	800168a <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001682:	482f      	ldr	r0, [pc, #188]	@ (8001740 <bno055_writeData+0x1b0>)
 8001684:	f007 ffe4 	bl	8009650 <puts>
 8001688:	e041      	b.n	800170e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	2b24      	cmp	r3, #36	@ 0x24
 800168e:	d103      	bne.n	8001698 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001690:	482c      	ldr	r0, [pc, #176]	@ (8001744 <bno055_writeData+0x1b4>)
 8001692:	f007 ffdd 	bl	8009650 <puts>
 8001696:	e03a      	b.n	800170e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	2b21      	cmp	r3, #33	@ 0x21
 800169c:	d103      	bne.n	80016a6 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 800169e:	482a      	ldr	r0, [pc, #168]	@ (8001748 <bno055_writeData+0x1b8>)
 80016a0:	f007 ffd6 	bl	8009650 <puts>
 80016a4:	e033      	b.n	800170e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	2b22      	cmp	r3, #34	@ 0x22
 80016aa:	d103      	bne.n	80016b4 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80016ac:	4827      	ldr	r0, [pc, #156]	@ (800174c <bno055_writeData+0x1bc>)
 80016ae:	f007 ffcf 	bl	8009650 <puts>
 80016b2:	e02c      	b.n	800170e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	2b28      	cmp	r3, #40	@ 0x28
 80016b8:	d103      	bne.n	80016c2 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 80016ba:	4825      	ldr	r0, [pc, #148]	@ (8001750 <bno055_writeData+0x1c0>)
 80016bc:	f007 ffc8 	bl	8009650 <puts>
 80016c0:	e025      	b.n	800170e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
 80016c4:	2b29      	cmp	r3, #41	@ 0x29
 80016c6:	d103      	bne.n	80016d0 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80016c8:	4822      	ldr	r0, [pc, #136]	@ (8001754 <bno055_writeData+0x1c4>)
 80016ca:	f007 ffc1 	bl	8009650 <puts>
 80016ce:	e01e      	b.n	800170e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80016d4:	d103      	bne.n	80016de <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 80016d6:	4820      	ldr	r0, [pc, #128]	@ (8001758 <bno055_writeData+0x1c8>)
 80016d8:	f007 ffba 	bl	8009650 <puts>
 80016dc:	e017      	b.n	800170e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	2b60      	cmp	r3, #96	@ 0x60
 80016e2:	d103      	bne.n	80016ec <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 80016e4:	481d      	ldr	r0, [pc, #116]	@ (800175c <bno055_writeData+0x1cc>)
 80016e6:	f007 ffb3 	bl	8009650 <puts>
 80016ea:	e010      	b.n	800170e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	2ba0      	cmp	r3, #160	@ 0xa0
 80016f0:	d103      	bne.n	80016fa <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 80016f2:	481b      	ldr	r0, [pc, #108]	@ (8001760 <bno055_writeData+0x1d0>)
 80016f4:	f007 ffac 	bl	8009650 <puts>
 80016f8:	e009      	b.n	800170e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	2be0      	cmp	r3, #224	@ 0xe0
 80016fe:	d106      	bne.n	800170e <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001700:	4818      	ldr	r0, [pc, #96]	@ (8001764 <bno055_writeData+0x1d4>)
 8001702:	f007 ffa5 	bl	8009650 <puts>
 8001706:	e002      	b.n	800170e <bno055_writeData+0x17e>
    return;
 8001708:	bf00      	nop
 800170a:	e000      	b.n	800170e <bno055_writeData+0x17e>
    return;
 800170c:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	200000f4 	.word	0x200000f4
 8001718:	0800a39c 	.word	0x0800a39c
 800171c:	0800a3c0 	.word	0x0800a3c0
 8001720:	0800a3e8 	.word	0x0800a3e8
 8001724:	0800a40c 	.word	0x0800a40c
 8001728:	0800a424 	.word	0x0800a424
 800172c:	0800a438 	.word	0x0800a438
 8001730:	0800a44c 	.word	0x0800a44c
 8001734:	0800a460 	.word	0x0800a460
 8001738:	0800a474 	.word	0x0800a474
 800173c:	0800a488 	.word	0x0800a488
 8001740:	0800a4a0 	.word	0x0800a4a0
 8001744:	0800a4b8 	.word	0x0800a4b8
 8001748:	0800a4cc 	.word	0x0800a4cc
 800174c:	0800a4e4 	.word	0x0800a4e4
 8001750:	0800a4fc 	.word	0x0800a4fc
 8001754:	0800a514 	.word	0x0800a514
 8001758:	0800a534 	.word	0x0800a534
 800175c:	0800a554 	.word	0x0800a554
 8001760:	0800a56c 	.word	0x0800a56c
 8001764:	0800a584 	.word	0x0800a584

08001768 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af02      	add	r7, sp, #8
 800176e:	4603      	mov	r3, r0
 8001770:	6039      	str	r1, [r7, #0]
 8001772:	71fb      	strb	r3, [r7, #7]
 8001774:	4613      	mov	r3, r2
 8001776:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001778:	4b0b      	ldr	r3, [pc, #44]	@ (80017a8 <bno055_readData+0x40>)
 800177a:	6818      	ldr	r0, [r3, #0]
 800177c:	1dfa      	adds	r2, r7, #7
 800177e:	2364      	movs	r3, #100	@ 0x64
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	2301      	movs	r3, #1
 8001784:	2150      	movs	r1, #80	@ 0x50
 8001786:	f003 fe93 	bl	80054b0 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 800178a:	4b07      	ldr	r3, [pc, #28]	@ (80017a8 <bno055_readData+0x40>)
 800178c:	6818      	ldr	r0, [r3, #0]
 800178e:	79bb      	ldrb	r3, [r7, #6]
 8001790:	b29b      	uxth	r3, r3
 8001792:	2264      	movs	r2, #100	@ 0x64
 8001794:	9200      	str	r2, [sp, #0]
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	2150      	movs	r1, #80	@ 0x50
 800179a:	f003 ff87 	bl	80056ac <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200000f4 	.word	0x200000f4

080017ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	uint32_t currenTick = HAL_GetTick();
 80017b2:	f002 fe57 	bl	8004464 <HAL_GetTick>
 80017b6:	6078      	str	r0, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017b8:	f002 fdee 	bl	8004398 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017bc:	f000 f82c 	bl	8001818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c0:	f7ff fdde 	bl	8001380 <MX_GPIO_Init>
  MX_DMA_Init();
 80017c4:	f7ff fdb4 	bl	8001330 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80017c8:	f002 fcdc 	bl	8004184 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80017cc:	f002 fb28 	bl	8003e20 <MX_TIM1_Init>
  MX_I2C1_Init();
 80017d0:	f7ff fe4c 	bl	800146c <MX_I2C1_Init>
  MX_TIM2_Init();
 80017d4:	f002 fb74 	bl	8003ec0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80017d8:	f002 fbc6 	bl	8003f68 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Base_Start_IT(&htim1);
 80017dc:	480c      	ldr	r0, [pc, #48]	@ (8001810 <main+0x64>)
 80017de:	f005 f9df 	bl	8006ba0 <HAL_TIM_Base_Start_IT>
  bno055_assignI2C(&hi2c1);
 80017e2:	480c      	ldr	r0, [pc, #48]	@ (8001814 <main+0x68>)
 80017e4:	f7ff feb8 	bl	8001558 <bno055_assignI2C>
  bno055_setup();
 80017e8:	f7ff fbf2 	bl	8000fd0 <bno055_setup>
  bno055_setOperationModeNDOF();
 80017ec:	f7ff fbdd 	bl	8000faa <bno055_setOperationModeNDOF>
  setup();
 80017f0:	f001 fbf2 	bl	8002fd8 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GetTick()-currenTick>100){
 80017f4:	f002 fe36 	bl	8004464 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b64      	cmp	r3, #100	@ 0x64
 8001800:	d9f8      	bls.n	80017f4 <main+0x48>

			loop();
 8001802:	f001 fbff 	bl	8003004 <loop>
			currenTick = HAL_GetTick();
 8001806:	f002 fe2d 	bl	8004464 <HAL_GetTick>
 800180a:	6078      	str	r0, [r7, #4]
	  if(HAL_GetTick()-currenTick>100){
 800180c:	e7f2      	b.n	80017f4 <main+0x48>
 800180e:	bf00      	nop
 8001810:	20000ab4 	.word	0x20000ab4
 8001814:	200000a0 	.word	0x200000a0

08001818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b094      	sub	sp, #80	@ 0x50
 800181c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800181e:	f107 0320 	add.w	r3, r7, #32
 8001822:	2230      	movs	r2, #48	@ 0x30
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f007 fff2 	bl	8009810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800182c:	f107 030c 	add.w	r3, r7, #12
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800183c:	2300      	movs	r3, #0
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	4b27      	ldr	r3, [pc, #156]	@ (80018e0 <SystemClock_Config+0xc8>)
 8001842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001844:	4a26      	ldr	r2, [pc, #152]	@ (80018e0 <SystemClock_Config+0xc8>)
 8001846:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800184a:	6413      	str	r3, [r2, #64]	@ 0x40
 800184c:	4b24      	ldr	r3, [pc, #144]	@ (80018e0 <SystemClock_Config+0xc8>)
 800184e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001850:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001858:	2300      	movs	r3, #0
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	4b21      	ldr	r3, [pc, #132]	@ (80018e4 <SystemClock_Config+0xcc>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a20      	ldr	r2, [pc, #128]	@ (80018e4 <SystemClock_Config+0xcc>)
 8001862:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	4b1e      	ldr	r3, [pc, #120]	@ (80018e4 <SystemClock_Config+0xcc>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001874:	2301      	movs	r3, #1
 8001876:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001878:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800187c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800187e:	2302      	movs	r3, #2
 8001880:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001882:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001886:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001888:	230c      	movs	r3, #12
 800188a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800188c:	2360      	movs	r3, #96	@ 0x60
 800188e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001890:	2302      	movs	r3, #2
 8001892:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001894:	2304      	movs	r3, #4
 8001896:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001898:	f107 0320 	add.w	r3, r7, #32
 800189c:	4618      	mov	r0, r3
 800189e:	f004 fcd7 	bl	8006250 <HAL_RCC_OscConfig>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018a8:	f000 fa10 	bl	8001ccc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ac:	230f      	movs	r3, #15
 80018ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018b0:	2302      	movs	r3, #2
 80018b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018c2:	f107 030c 	add.w	r3, r7, #12
 80018c6:	2103      	movs	r1, #3
 80018c8:	4618      	mov	r0, r3
 80018ca:	f004 ff39 	bl	8006740 <HAL_RCC_ClockConfig>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80018d4:	f000 f9fa 	bl	8001ccc <Error_Handler>
  }
}
 80018d8:	bf00      	nop
 80018da:	3750      	adds	r7, #80	@ 0x50
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40007000 	.word	0x40007000

080018e8 <HAL_TIM_PeriodElapsedCallback>:

short counterBNO = 0;
float pitch, roll, yaw;
float x, y, z, w;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	@ 0x28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	if(htim == &htim1){
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a6d      	ldr	r2, [pc, #436]	@ (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	f040 80cf 	bne.w	8001a98 <HAL_TIM_PeriodElapsedCallback+0x1b0>
		if(counterBNO == 10){
 80018fa:	4b6c      	ldr	r3, [pc, #432]	@ (8001aac <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80018fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001900:	2b0a      	cmp	r3, #10
 8001902:	f040 80c0 	bne.w	8001a86 <HAL_TIM_PeriodElapsedCallback+0x19e>
			bno055_vector_t v = bno055_getVectorQuaternion();
 8001906:	f7ff fccf 	bl	80012a8 <bno055_getVectorQuaternion>
 800190a:	eeb0 4a40 	vmov.f32	s8, s0
 800190e:	eef0 4a60 	vmov.f32	s9, s1
 8001912:	eeb0 5a41 	vmov.f32	s10, s2
 8001916:	eef0 5a61 	vmov.f32	s11, s3
 800191a:	eeb0 6a42 	vmov.f32	s12, s4
 800191e:	eef0 6a62 	vmov.f32	s13, s5
 8001922:	eeb0 7a43 	vmov.f32	s14, s6
 8001926:	eef0 7a63 	vmov.f32	s15, s7
 800192a:	ed87 4b02 	vstr	d4, [r7, #8]
 800192e:	ed87 5b04 	vstr	d5, [r7, #16]
 8001932:	ed87 6b06 	vstr	d6, [r7, #24]
 8001936:	ed87 7b08 	vstr	d7, [r7, #32]
			x = v.x;
 800193a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800193e:	4610      	mov	r0, r2
 8001940:	4619      	mov	r1, r3
 8001942:	f7ff f911 	bl	8000b68 <__aeabi_d2f>
 8001946:	4603      	mov	r3, r0
 8001948:	4a59      	ldr	r2, [pc, #356]	@ (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800194a:	6013      	str	r3, [r2, #0]
			y = v.y;
 800194c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001950:	4610      	mov	r0, r2
 8001952:	4619      	mov	r1, r3
 8001954:	f7ff f908 	bl	8000b68 <__aeabi_d2f>
 8001958:	4603      	mov	r3, r0
 800195a:	4a56      	ldr	r2, [pc, #344]	@ (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800195c:	6013      	str	r3, [r2, #0]
			z = v.z;
 800195e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001962:	4610      	mov	r0, r2
 8001964:	4619      	mov	r1, r3
 8001966:	f7ff f8ff 	bl	8000b68 <__aeabi_d2f>
 800196a:	4603      	mov	r3, r0
 800196c:	4a52      	ldr	r2, [pc, #328]	@ (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800196e:	6013      	str	r3, [r2, #0]
			w = v.w;
 8001970:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001974:	4610      	mov	r0, r2
 8001976:	4619      	mov	r1, r3
 8001978:	f7ff f8f6 	bl	8000b68 <__aeabi_d2f>
 800197c:	4603      	mov	r3, r0
 800197e:	4a4f      	ldr	r2, [pc, #316]	@ (8001abc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001980:	6013      	str	r3, [r2, #0]

			quaternionToEuler(x, y, z, w, &roll, &pitch, &yaw);
 8001982:	4b4b      	ldr	r3, [pc, #300]	@ (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001984:	edd3 7a00 	vldr	s15, [r3]
 8001988:	4b4a      	ldr	r3, [pc, #296]	@ (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800198a:	ed93 7a00 	vldr	s14, [r3]
 800198e:	4b4a      	ldr	r3, [pc, #296]	@ (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001990:	edd3 6a00 	vldr	s13, [r3]
 8001994:	4b49      	ldr	r3, [pc, #292]	@ (8001abc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001996:	ed93 6a00 	vldr	s12, [r3]
 800199a:	4a49      	ldr	r2, [pc, #292]	@ (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800199c:	4949      	ldr	r1, [pc, #292]	@ (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800199e:	484a      	ldr	r0, [pc, #296]	@ (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80019a0:	eef0 1a46 	vmov.f32	s3, s12
 80019a4:	eeb0 1a66 	vmov.f32	s2, s13
 80019a8:	eef0 0a47 	vmov.f32	s1, s14
 80019ac:	eeb0 0a67 	vmov.f32	s0, s15
 80019b0:	f000 f896 	bl	8001ae0 <quaternionToEuler>
//			void (*quaternion)(float, float, float, float, float, float) = &quaternionToEuler;
//			(*quaternion)(x, y, z, w, &roll, &pitch, &yaw);

			bno.pitch = pitch*180/pi;
 80019b4:	4b43      	ldr	r3, [pc, #268]	@ (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80019b6:	edd3 7a00 	vldr	s15, [r3]
 80019ba:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8001acc <HAL_TIM_PeriodElapsedCallback+0x1e4>
 80019be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019c2:	ee17 0a90 	vmov	r0, s15
 80019c6:	f7fe fdc7 	bl	8000558 <__aeabi_f2d>
 80019ca:	a335      	add	r3, pc, #212	@ (adr r3, 8001aa0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80019cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d0:	f7fe ff44 	bl	800085c <__aeabi_ddiv>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	f7ff f8c4 	bl	8000b68 <__aeabi_d2f>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4a3b      	ldr	r2, [pc, #236]	@ (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80019e4:	6153      	str	r3, [r2, #20]
			bno.roll = roll*180/pi;
 80019e6:	4b38      	ldr	r3, [pc, #224]	@ (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80019e8:	edd3 7a00 	vldr	s15, [r3]
 80019ec:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8001acc <HAL_TIM_PeriodElapsedCallback+0x1e4>
 80019f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019f4:	ee17 0a90 	vmov	r0, s15
 80019f8:	f7fe fdae 	bl	8000558 <__aeabi_f2d>
 80019fc:	a328      	add	r3, pc, #160	@ (adr r3, 8001aa0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80019fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a02:	f7fe ff2b 	bl	800085c <__aeabi_ddiv>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f7ff f8ab 	bl	8000b68 <__aeabi_d2f>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4a2e      	ldr	r2, [pc, #184]	@ (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001a16:	6113      	str	r3, [r2, #16]
			bno.yaw = yaw*180/pi;
 8001a18:	4b29      	ldr	r3, [pc, #164]	@ (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001a1a:	edd3 7a00 	vldr	s15, [r3]
 8001a1e:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001acc <HAL_TIM_PeriodElapsedCallback+0x1e4>
 8001a22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a26:	ee17 0a90 	vmov	r0, s15
 8001a2a:	f7fe fd95 	bl	8000558 <__aeabi_f2d>
 8001a2e:	a31c      	add	r3, pc, #112	@ (adr r3, 8001aa0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a34:	f7fe ff12 	bl	800085c <__aeabi_ddiv>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f7ff f892 	bl	8000b68 <__aeabi_d2f>
 8001a44:	4603      	mov	r3, r0
 8001a46:	4a22      	ldr	r2, [pc, #136]	@ (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001a48:	6193      	str	r3, [r2, #24]

			if(state == true) {
 8001a4a:	4b22      	ldr	r3, [pc, #136]	@ (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00b      	beq.n	8001a6a <HAL_TIM_PeriodElapsedCallback+0x182>
				HAL_GPIO_WritePin(KICKER_GPIO_Port, KICKER_Pin, RESET);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2120      	movs	r1, #32
 8001a56:	4820      	ldr	r0, [pc, #128]	@ (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001a58:	f003 fbcc 	bl	80051f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, RESET);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a62:	481e      	ldr	r0, [pc, #120]	@ (8001adc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001a64:	f003 fbc6 	bl	80051f4 <HAL_GPIO_WritePin>
 8001a68:	e00a      	b.n	8001a80 <HAL_TIM_PeriodElapsedCallback+0x198>
			}
			else {
				HAL_GPIO_WritePin(KICKER_GPIO_Port, KICKER_Pin, SET);
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	2120      	movs	r1, #32
 8001a6e:	481a      	ldr	r0, [pc, #104]	@ (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001a70:	f003 fbc0 	bl	80051f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, SET);
 8001a74:	2201      	movs	r2, #1
 8001a76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a7a:	4818      	ldr	r0, [pc, #96]	@ (8001adc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001a7c:	f003 fbba 	bl	80051f4 <HAL_GPIO_WritePin>
			}
			counterBNO = 0;
 8001a80:	4b0a      	ldr	r3, [pc, #40]	@ (8001aac <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	801a      	strh	r2, [r3, #0]
		}

		counterBNO++;
 8001a86:	4b09      	ldr	r3, [pc, #36]	@ (8001aac <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001a88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	3301      	adds	r3, #1
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	b21a      	sxth	r2, r3
 8001a94:	4b05      	ldr	r3, [pc, #20]	@ (8001aac <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001a96:	801a      	strh	r2, [r3, #0]

	}
}
 8001a98:	bf00      	nop
 8001a9a:	3728      	adds	r7, #40	@ 0x28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	54442d18 	.word	0x54442d18
 8001aa4:	400921fb 	.word	0x400921fb
 8001aa8:	20000ab4 	.word	0x20000ab4
 8001aac:	200000f8 	.word	0x200000f8
 8001ab0:	20000108 	.word	0x20000108
 8001ab4:	2000010c 	.word	0x2000010c
 8001ab8:	20000110 	.word	0x20000110
 8001abc:	20000114 	.word	0x20000114
 8001ac0:	20000104 	.word	0x20000104
 8001ac4:	200000fc 	.word	0x200000fc
 8001ac8:	20000100 	.word	0x20000100
 8001acc:	43340000 	.word	0x43340000
 8001ad0:	2000011c 	.word	0x2000011c
 8001ad4:	20000138 	.word	0x20000138
 8001ad8:	40020400 	.word	0x40020400
 8001adc:	40020800 	.word	0x40020800

08001ae0 <quaternionToEuler>:


void quaternionToEuler(float x, float y, float z, float w, float *roll, float *pitch, float *yaw) {
 8001ae0:	b5b0      	push	{r4, r5, r7, lr}
 8001ae2:	b08e      	sub	sp, #56	@ 0x38
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	ed87 0a07 	vstr	s0, [r7, #28]
 8001aea:	edc7 0a06 	vstr	s1, [r7, #24]
 8001aee:	ed87 1a05 	vstr	s2, [r7, #20]
 8001af2:	edc7 1a04 	vstr	s3, [r7, #16]
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
    // Roll (x-axis rotation)
    float sinr_cosp = 2.0 * (w * x + y * z);
 8001afc:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b00:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b08:	edd7 6a06 	vldr	s13, [r7, #24]
 8001b0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b18:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b1c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    float cosr_cosp = 1.0 - 2.0 * (x * x + y * y);
 8001b20:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b24:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001b28:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b2c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b34:	ee17 0a90 	vmov	r0, s15
 8001b38:	f7fe fd0e 	bl	8000558 <__aeabi_f2d>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	f7fe fbac 	bl	800029c <__adddf3>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	f04f 0000 	mov.w	r0, #0
 8001b4c:	495e      	ldr	r1, [pc, #376]	@ (8001cc8 <quaternionToEuler+0x1e8>)
 8001b4e:	f7fe fba3 	bl	8000298 <__aeabi_dsub>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4610      	mov	r0, r2
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f7ff f805 	bl	8000b68 <__aeabi_d2f>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	633b      	str	r3, [r7, #48]	@ 0x30
    *roll = atan2(sinr_cosp, cosr_cosp);
 8001b62:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001b64:	f7fe fcf8 	bl	8000558 <__aeabi_f2d>
 8001b68:	4604      	mov	r4, r0
 8001b6a:	460d      	mov	r5, r1
 8001b6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001b6e:	f7fe fcf3 	bl	8000558 <__aeabi_f2d>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	ec43 2b11 	vmov	d1, r2, r3
 8001b7a:	ec45 4b10 	vmov	d0, r4, r5
 8001b7e:	f006 fea3 	bl	80088c8 <atan2>
 8001b82:	ec53 2b10 	vmov	r2, r3, d0
 8001b86:	4610      	mov	r0, r2
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f7fe ffed 	bl	8000b68 <__aeabi_d2f>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	601a      	str	r2, [r3, #0]

    // Pitch (y-axis rotation)
    float sinp = 2.0 * (w * y - z * x);
 8001b94:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b98:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba0:	edd7 6a05 	vldr	s13, [r7, #20]
 8001ba4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ba8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bb0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bb4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    if (fabs(sinp) >= 1)
 8001bb8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001bbc:	eef0 7ae7 	vabs.f32	s15, s15
 8001bc0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001bc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bcc:	db14      	blt.n	8001bf8 <quaternionToEuler+0x118>
        *pitch = copysign(M_PI / 2, sinp); // Use 90 degrees if out of range
 8001bce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001bd0:	f7fe fcc2 	bl	8000558 <__aeabi_f2d>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	ec43 2b11 	vmov	d1, r2, r3
 8001bdc:	ed9f 0b38 	vldr	d0, [pc, #224]	@ 8001cc0 <quaternionToEuler+0x1e0>
 8001be0:	f006 fe7c 	bl	80088dc <copysign>
 8001be4:	ec53 2b10 	vmov	r2, r3, d0
 8001be8:	4610      	mov	r0, r2
 8001bea:	4619      	mov	r1, r3
 8001bec:	f7fe ffbc 	bl	8000b68 <__aeabi_d2f>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	e011      	b.n	8001c1c <quaternionToEuler+0x13c>
    else
        *pitch = asin(sinp);
 8001bf8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001bfa:	f7fe fcad 	bl	8000558 <__aeabi_f2d>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	ec43 2b10 	vmov	d0, r2, r3
 8001c06:	f006 fe2b 	bl	8008860 <asin>
 8001c0a:	ec53 2b10 	vmov	r2, r3, d0
 8001c0e:	4610      	mov	r0, r2
 8001c10:	4619      	mov	r1, r3
 8001c12:	f7fe ffa9 	bl	8000b68 <__aeabi_d2f>
 8001c16:	4602      	mov	r2, r0
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	601a      	str	r2, [r3, #0]

    // Yaw (z-axis rotation)
    float siny_cosp = 2.0 * (w * z + x * y);
 8001c1c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c20:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c28:	edd7 6a07 	vldr	s13, [r7, #28]
 8001c2c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c38:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c3c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float cosy_cosp = 1.0 - 2.0 * (y * y + z * z);
 8001c40:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c44:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001c48:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c54:	ee17 0a90 	vmov	r0, s15
 8001c58:	f7fe fc7e 	bl	8000558 <__aeabi_f2d>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	f7fe fb1c 	bl	800029c <__adddf3>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	f04f 0000 	mov.w	r0, #0
 8001c6c:	4916      	ldr	r1, [pc, #88]	@ (8001cc8 <quaternionToEuler+0x1e8>)
 8001c6e:	f7fe fb13 	bl	8000298 <__aeabi_dsub>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f7fe ff75 	bl	8000b68 <__aeabi_d2f>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	627b      	str	r3, [r7, #36]	@ 0x24
    *yaw = atan2(siny_cosp, cosy_cosp);
 8001c82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001c84:	f7fe fc68 	bl	8000558 <__aeabi_f2d>
 8001c88:	4604      	mov	r4, r0
 8001c8a:	460d      	mov	r5, r1
 8001c8c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001c8e:	f7fe fc63 	bl	8000558 <__aeabi_f2d>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	ec43 2b11 	vmov	d1, r2, r3
 8001c9a:	ec45 4b10 	vmov	d0, r4, r5
 8001c9e:	f006 fe13 	bl	80088c8 <atan2>
 8001ca2:	ec53 2b10 	vmov	r2, r3, d0
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f7fe ff5d 	bl	8000b68 <__aeabi_d2f>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	601a      	str	r2, [r3, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	3738      	adds	r7, #56	@ 0x38
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bdb0      	pop	{r4, r5, r7, pc}
 8001cbc:	f3af 8000 	nop.w
 8001cc0:	54442d18 	.word	0x54442d18
 8001cc4:	3ff921fb 	.word	0x3ff921fb
 8001cc8:	3ff00000 	.word	0x3ff00000

08001ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd0:	b672      	cpsid	i
}
 8001cd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cd4:	bf00      	nop
 8001cd6:	e7fd      	b.n	8001cd4 <Error_Handler+0x8>

08001cd8 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
	...

08001cfc <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	4a04      	ldr	r2, [pc, #16]	@ (8001d18 <_ZN3ros3MsgC1Ev+0x1c>)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	0800a830 	.word	0x0800a830

08001d1c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
      data()
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff ffe8 	bl	8001cfc <_ZN3ros3MsgC1Ev>
 8001d2c:	4a06      	ldr	r2, [pc, #24]	@ (8001d48 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3304      	adds	r3, #4
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff ffce 	bl	8001cd8 <_ZN3ros4TimeC1Ev>
    {
    }
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	0800a818 	.word	0x0800a818

08001d4c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6859      	ldr	r1, [r3, #4]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	4413      	add	r3, r2
 8001d64:	b2ca      	uxtb	r2, r1
 8001d66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	0a19      	lsrs	r1, r3, #8
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	3301      	adds	r3, #1
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	4413      	add	r3, r2
 8001d76:	b2ca      	uxtb	r2, r1
 8001d78:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	0c19      	lsrs	r1, r3, #16
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	3302      	adds	r3, #2
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	4413      	add	r3, r2
 8001d88:	b2ca      	uxtb	r2, r1
 8001d8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	0e19      	lsrs	r1, r3, #24
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	3303      	adds	r3, #3
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	4413      	add	r3, r2
 8001d9a:	b2ca      	uxtb	r2, r1
 8001d9c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	3304      	adds	r3, #4
 8001da2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6899      	ldr	r1, [r3, #8]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	4413      	add	r3, r2
 8001dae:	b2ca      	uxtb	r2, r1
 8001db0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	0a19      	lsrs	r1, r3, #8
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	b2ca      	uxtb	r2, r1
 8001dc2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	0c19      	lsrs	r1, r3, #16
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	3302      	adds	r3, #2
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	b2ca      	uxtb	r2, r1
 8001dd4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	0e19      	lsrs	r1, r3, #24
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	3303      	adds	r3, #3
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	4413      	add	r3, r2
 8001de4:	b2ca      	uxtb	r2, r1
 8001de6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	3304      	adds	r3, #4
 8001dec:	60fb      	str	r3, [r7, #12]
      return offset;
 8001dee:	68fb      	ldr	r3, [r7, #12]
    }
 8001df0:	4618      	mov	r0, r3
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	4413      	add	r3, r2
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	461a      	mov	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	6839      	ldr	r1, [r7, #0]
 8001e22:	440b      	add	r3, r1
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	021b      	lsls	r3, r3, #8
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	3302      	adds	r3, #2
 8001e36:	6839      	ldr	r1, [r7, #0]
 8001e38:	440b      	add	r3, r1
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	041b      	lsls	r3, r3, #16
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	3303      	adds	r3, #3
 8001e4c:	6839      	ldr	r1, [r7, #0]
 8001e4e:	440b      	add	r3, r1
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	061b      	lsls	r3, r3, #24
 8001e54:	431a      	orrs	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	4413      	add	r3, r2
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689a      	ldr	r2, [r3, #8]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	3301      	adds	r3, #1
 8001e76:	6839      	ldr	r1, [r7, #0]
 8001e78:	440b      	add	r3, r1
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	021b      	lsls	r3, r3, #8
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	3302      	adds	r3, #2
 8001e8c:	6839      	ldr	r1, [r7, #0]
 8001e8e:	440b      	add	r3, r1
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	041b      	lsls	r3, r3, #16
 8001e94:	431a      	orrs	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	3303      	adds	r3, #3
 8001ea2:	6839      	ldr	r1, [r7, #0]
 8001ea4:	440b      	add	r3, r1
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	061b      	lsls	r3, r3, #24
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	60fb      	str	r3, [r7, #12]
     return offset;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
    }
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	4b03      	ldr	r3, [pc, #12]	@ (8001edc <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	0800a59c 	.word	0x0800a59c

08001ee0 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	4b03      	ldr	r3, [pc, #12]	@ (8001ef8 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	0800a5ac 	.word	0x0800a5ac

08001efc <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff fef8 	bl	8001cfc <_ZN3ros3MsgC1Ev>
 8001f0c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f3c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a09      	ldr	r2, [pc, #36]	@ (8001f40 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001f1c:	609a      	str	r2, [r3, #8]
      message_type(""),
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a07      	ldr	r2, [pc, #28]	@ (8001f40 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001f22:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a06      	ldr	r2, [pc, #24]	@ (8001f40 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001f28:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	615a      	str	r2, [r3, #20]
    {
    }
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	0800a800 	.word	0x0800a800
 8001f40:	0800a5d0 	.word	0x0800a5d0

08001f44 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	8899      	ldrh	r1, [r3, #4]
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	b2ca      	uxtb	r2, r1
 8001f5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	889b      	ldrh	r3, [r3, #4]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	b299      	uxth	r1, r3
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	4413      	add	r3, r2
 8001f70:	b2ca      	uxtb	r2, r1
 8001f72:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	3302      	adds	r3, #2
 8001f78:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe f92e 	bl	80001e0 <strlen>
 8001f84:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	69b9      	ldr	r1, [r7, #24]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f001 f850 	bl	8003034 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	3304      	adds	r3, #4
 8001f98:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	18d0      	adds	r0, r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f007 fcad 	bl	8009906 <memcpy>
      offset += length_topic_name;
 8001fac:	69fa      	ldr	r2, [r7, #28]
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe f911 	bl	80001e0 <strlen>
 8001fbe:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	6979      	ldr	r1, [r7, #20]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f001 f833 	bl	8003034 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	18d0      	adds	r0, r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f007 fc90 	bl	8009906 <memcpy>
      offset += length_message_type;
 8001fe6:	69fa      	ldr	r2, [r7, #28]
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	4413      	add	r3, r2
 8001fec:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe f8f4 	bl	80001e0 <strlen>
 8001ff8:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	4413      	add	r3, r2
 8002000:	6939      	ldr	r1, [r7, #16]
 8002002:	4618      	mov	r0, r3
 8002004:	f001 f816 	bl	8003034 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	3304      	adds	r3, #4
 800200c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	18d0      	adds	r0, r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4619      	mov	r1, r3
 800201c:	f007 fc73 	bl	8009906 <memcpy>
      offset += length_md5sum;
 8002020:	69fa      	ldr	r2, [r7, #28]
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4413      	add	r3, r2
 8002026:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800202e:	68f9      	ldr	r1, [r7, #12]
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	4413      	add	r3, r2
 8002036:	b2ca      	uxtb	r2, r1
 8002038:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	0a19      	lsrs	r1, r3, #8
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3301      	adds	r3, #1
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	4413      	add	r3, r2
 8002046:	b2ca      	uxtb	r2, r1
 8002048:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	0c19      	lsrs	r1, r3, #16
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3302      	adds	r3, #2
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	4413      	add	r3, r2
 8002056:	b2ca      	uxtb	r2, r1
 8002058:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	0e19      	lsrs	r1, r3, #24
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3303      	adds	r3, #3
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	4413      	add	r3, r2
 8002066:	b2ca      	uxtb	r2, r1
 8002068:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3304      	adds	r3, #4
 800206e:	61fb      	str	r3, [r7, #28]
      return offset;
 8002070:	69fb      	ldr	r3, [r7, #28]
    }
 8002072:	4618      	mov	r0, r3
 8002074:	3720      	adds	r7, #32
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800207a:	b580      	push	{r7, lr}
 800207c:	b08a      	sub	sp, #40	@ 0x28
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	4413      	add	r3, r2
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	889b      	ldrh	r3, [r3, #4]
 800209a:	b21a      	sxth	r2, r3
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	3301      	adds	r3, #1
 80020a0:	6839      	ldr	r1, [r7, #0]
 80020a2:	440b      	add	r3, r1
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	b21b      	sxth	r3, r3
 80020aa:	4313      	orrs	r3, r2
 80020ac:	b21b      	sxth	r3, r3
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	3302      	adds	r3, #2
 80020b8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	441a      	add	r2, r3
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	4611      	mov	r1, r2
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 ffd3 	bl	8003072 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	3304      	adds	r3, #4
 80020d0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80020d6:	e00b      	b.n	80020f0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020dc:	441a      	add	r2, r3
 80020de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e0:	3b01      	subs	r3, #1
 80020e2:	6839      	ldr	r1, [r7, #0]
 80020e4:	440b      	add	r3, r1
 80020e6:	7812      	ldrb	r2, [r2, #0]
 80020e8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80020ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ec:	3301      	adds	r3, #1
 80020ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	4413      	add	r3, r2
 80020f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d3ed      	bcc.n	80020d8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	4413      	add	r3, r2
 8002102:	3b01      	subs	r3, #1
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	4413      	add	r3, r2
 8002108:	2200      	movs	r2, #0
 800210a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	3b01      	subs	r3, #1
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	441a      	add	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	4413      	add	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	441a      	add	r2, r3
 8002126:	f107 0310 	add.w	r3, r7, #16
 800212a:	4611      	mov	r1, r2
 800212c:	4618      	mov	r0, r3
 800212e:	f000 ffa0 	bl	8003072 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	3304      	adds	r3, #4
 8002136:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	623b      	str	r3, [r7, #32]
 800213c:	e00b      	b.n	8002156 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	6a3b      	ldr	r3, [r7, #32]
 8002142:	441a      	add	r2, r3
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	3b01      	subs	r3, #1
 8002148:	6839      	ldr	r1, [r7, #0]
 800214a:	440b      	add	r3, r1
 800214c:	7812      	ldrb	r2, [r2, #0]
 800214e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	3301      	adds	r3, #1
 8002154:	623b      	str	r3, [r7, #32]
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4413      	add	r3, r2
 800215c:	6a3a      	ldr	r2, [r7, #32]
 800215e:	429a      	cmp	r2, r3
 8002160:	d3ed      	bcc.n	800213e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	4413      	add	r3, r2
 8002168:	3b01      	subs	r3, #1
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	4413      	add	r3, r2
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	3b01      	subs	r3, #1
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	441a      	add	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4413      	add	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	441a      	add	r2, r3
 800218c:	f107 030c 	add.w	r3, r7, #12
 8002190:	4611      	mov	r1, r2
 8002192:	4618      	mov	r0, r3
 8002194:	f000 ff6d 	bl	8003072 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	3304      	adds	r3, #4
 800219c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	e00b      	b.n	80021bc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	441a      	add	r2, r3
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3b01      	subs	r3, #1
 80021ae:	6839      	ldr	r1, [r7, #0]
 80021b0:	440b      	add	r3, r1
 80021b2:	7812      	ldrb	r2, [r2, #0]
 80021b4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3301      	adds	r3, #1
 80021ba:	61fb      	str	r3, [r7, #28]
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4413      	add	r3, r2
 80021c2:	69fa      	ldr	r2, [r7, #28]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d3ed      	bcc.n	80021a4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	4413      	add	r3, r2
 80021ce:	3b01      	subs	r3, #1
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	4413      	add	r3, r2
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	3b01      	subs	r3, #1
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	441a      	add	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	4413      	add	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	6839      	ldr	r1, [r7, #0]
 80021f6:	440a      	add	r2, r1
 80021f8:	7812      	ldrb	r2, [r2, #0]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	3301      	adds	r3, #1
 8002204:	6839      	ldr	r1, [r7, #0]
 8002206:	440b      	add	r3, r1
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	021b      	lsls	r3, r3, #8
 800220c:	4313      	orrs	r3, r2
 800220e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	3302      	adds	r3, #2
 8002216:	6839      	ldr	r1, [r7, #0]
 8002218:	440b      	add	r3, r1
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	041b      	lsls	r3, r3, #16
 800221e:	4313      	orrs	r3, r2
 8002220:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	3303      	adds	r3, #3
 8002228:	6839      	ldr	r1, [r7, #0]
 800222a:	440b      	add	r3, r1
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	061b      	lsls	r3, r3, #24
 8002230:	4313      	orrs	r3, r2
 8002232:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	3304      	adds	r3, #4
 800223e:	61bb      	str	r3, [r7, #24]
     return offset;
 8002240:	69bb      	ldr	r3, [r7, #24]
    }
 8002242:	4618      	mov	r0, r3
 8002244:	3728      	adds	r7, #40	@ 0x28
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	4b03      	ldr	r3, [pc, #12]	@ (8002264 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	0800a5d4 	.word	0x0800a5d4

08002268 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	4b03      	ldr	r3, [pc, #12]	@ (8002280 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002272:	4618      	mov	r0, r3
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	0800a5f0 	.word	0x0800a5f0

08002284 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff fd34 	bl	8001cfc <_ZN3ros3MsgC1Ev>
 8002294:	4a06      	ldr	r2, [pc, #24]	@ (80022b0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	601a      	str	r2, [r3, #0]
      level(0),
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	711a      	strb	r2, [r3, #4]
      msg("")
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a04      	ldr	r2, [pc, #16]	@ (80022b4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80022a4:	609a      	str	r2, [r3, #8]
    {
    }
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	0800a7e8 	.word	0x0800a7e8
 80022b4:	0800a5d0 	.word	0x0800a5d0

080022b8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	4413      	add	r3, r2
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	7912      	ldrb	r2, [r2, #4]
 80022d0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	3301      	adds	r3, #1
 80022d6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fd ff7f 	bl	80001e0 <strlen>
 80022e2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	4413      	add	r3, r2
 80022ea:	68b9      	ldr	r1, [r7, #8]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 fea1 	bl	8003034 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	3304      	adds	r3, #4
 80022f6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	18d0      	adds	r0, r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	4619      	mov	r1, r3
 8002306:	f007 fafe 	bl	8009906 <memcpy>
      offset += length_msg;
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	4413      	add	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]
      return offset;
 8002312:	68fb      	ldr	r3, [r7, #12]
    }
 8002314:	4618      	mov	r0, r3
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002326:	2300      	movs	r3, #0
 8002328:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	4413      	add	r3, r2
 8002330:	781a      	ldrb	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	3301      	adds	r3, #1
 800233a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	441a      	add	r2, r3
 8002342:	f107 030c 	add.w	r3, r7, #12
 8002346:	4611      	mov	r1, r2
 8002348:	4618      	mov	r0, r3
 800234a:	f000 fe92 	bl	8003072 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	3304      	adds	r3, #4
 8002352:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	e00b      	b.n	8002372 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	441a      	add	r2, r3
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	3b01      	subs	r3, #1
 8002364:	6839      	ldr	r1, [r7, #0]
 8002366:	440b      	add	r3, r1
 8002368:	7812      	ldrb	r2, [r2, #0]
 800236a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	3301      	adds	r3, #1
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4413      	add	r3, r2
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	429a      	cmp	r2, r3
 800237c:	d3ed      	bcc.n	800235a <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4413      	add	r3, r2
 8002384:	3b01      	subs	r3, #1
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	4413      	add	r3, r2
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	3b01      	subs	r3, #1
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	441a      	add	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4413      	add	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
     return offset;
 80023a2:	693b      	ldr	r3, [r7, #16]
    }
 80023a4:	4618      	mov	r0, r3
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	4b03      	ldr	r3, [pc, #12]	@ (80023c4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80023b6:	4618      	mov	r0, r3
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	0800a614 	.word	0x0800a614

080023c8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	4b03      	ldr	r3, [pc, #12]	@ (80023e0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	0800a628 	.word	0x0800a628

080023e4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff fc84 	bl	8001cfc <_ZN3ros3MsgC1Ev>
 80023f4:	4a11      	ldr	r2, [pc, #68]	@ (800243c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	605a      	str	r2, [r3, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	609a      	str	r2, [r3, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	611a      	str	r2, [r3, #16]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	615a      	str	r2, [r3, #20]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	61da      	str	r2, [r3, #28]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	621a      	str	r2, [r3, #32]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4618      	mov	r0, r3
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	0800a7d0 	.word	0x0800a7d0

08002440 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	@ 0x28
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6859      	ldr	r1, [r3, #4]
 8002452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	4413      	add	r3, r2
 8002458:	b2ca      	uxtb	r2, r1
 800245a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	0a19      	lsrs	r1, r3, #8
 8002462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002464:	3301      	adds	r3, #1
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	4413      	add	r3, r2
 800246a:	b2ca      	uxtb	r2, r1
 800246c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	0c19      	lsrs	r1, r3, #16
 8002474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002476:	3302      	adds	r3, #2
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	4413      	add	r3, r2
 800247c:	b2ca      	uxtb	r2, r1
 800247e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	0e19      	lsrs	r1, r3, #24
 8002486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002488:	3303      	adds	r3, #3
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	4413      	add	r3, r2
 800248e:	b2ca      	uxtb	r2, r1
 8002490:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002494:	3304      	adds	r3, #4
 8002496:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002498:	2300      	movs	r3, #0
 800249a:	623b      	str	r3, [r7, #32]
 800249c:	e02a      	b.n	80024f4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80024ac:	6939      	ldr	r1, [r7, #16]
 80024ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	4413      	add	r3, r2
 80024b4:	b2ca      	uxtb	r2, r1
 80024b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	0a19      	lsrs	r1, r3, #8
 80024bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024be:	3301      	adds	r3, #1
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	4413      	add	r3, r2
 80024c4:	b2ca      	uxtb	r2, r1
 80024c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	0c19      	lsrs	r1, r3, #16
 80024cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ce:	3302      	adds	r3, #2
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	4413      	add	r3, r2
 80024d4:	b2ca      	uxtb	r2, r1
 80024d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	0e19      	lsrs	r1, r3, #24
 80024dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024de:	3303      	adds	r3, #3
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	4413      	add	r3, r2
 80024e4:	b2ca      	uxtb	r2, r1
 80024e6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80024e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ea:	3304      	adds	r3, #4
 80024ec:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	3301      	adds	r3, #1
 80024f2:	623b      	str	r3, [r7, #32]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	6a3a      	ldr	r2, [r7, #32]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d3cf      	bcc.n	800249e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6919      	ldr	r1, [r3, #16]
 8002502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	4413      	add	r3, r2
 8002508:	b2ca      	uxtb	r2, r1
 800250a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	0a19      	lsrs	r1, r3, #8
 8002512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002514:	3301      	adds	r3, #1
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	4413      	add	r3, r2
 800251a:	b2ca      	uxtb	r2, r1
 800251c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	0c19      	lsrs	r1, r3, #16
 8002524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002526:	3302      	adds	r3, #2
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	4413      	add	r3, r2
 800252c:	b2ca      	uxtb	r2, r1
 800252e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	0e19      	lsrs	r1, r3, #24
 8002536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002538:	3303      	adds	r3, #3
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	4413      	add	r3, r2
 800253e:	b2ca      	uxtb	r2, r1
 8002540:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002544:	3304      	adds	r3, #4
 8002546:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002548:	2300      	movs	r3, #0
 800254a:	61fb      	str	r3, [r7, #28]
 800254c:	e02a      	b.n	80025a4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699a      	ldr	r2, [r3, #24]
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800255c:	68f9      	ldr	r1, [r7, #12]
 800255e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	4413      	add	r3, r2
 8002564:	b2ca      	uxtb	r2, r1
 8002566:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	0a19      	lsrs	r1, r3, #8
 800256c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256e:	3301      	adds	r3, #1
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	4413      	add	r3, r2
 8002574:	b2ca      	uxtb	r2, r1
 8002576:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	0c19      	lsrs	r1, r3, #16
 800257c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257e:	3302      	adds	r3, #2
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	4413      	add	r3, r2
 8002584:	b2ca      	uxtb	r2, r1
 8002586:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	0e19      	lsrs	r1, r3, #24
 800258c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258e:	3303      	adds	r3, #3
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	4413      	add	r3, r2
 8002594:	b2ca      	uxtb	r2, r1
 8002596:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259a:	3304      	adds	r3, #4
 800259c:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	3301      	adds	r3, #1
 80025a2:	61fb      	str	r3, [r7, #28]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	69fa      	ldr	r2, [r7, #28]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d3cf      	bcc.n	800254e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69d9      	ldr	r1, [r3, #28]
 80025b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	4413      	add	r3, r2
 80025b8:	b2ca      	uxtb	r2, r1
 80025ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	0a19      	lsrs	r1, r3, #8
 80025c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c4:	3301      	adds	r3, #1
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	4413      	add	r3, r2
 80025ca:	b2ca      	uxtb	r2, r1
 80025cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	0c19      	lsrs	r1, r3, #16
 80025d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d6:	3302      	adds	r3, #2
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	4413      	add	r3, r2
 80025dc:	b2ca      	uxtb	r2, r1
 80025de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	0e19      	lsrs	r1, r3, #24
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	3303      	adds	r3, #3
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	4413      	add	r3, r2
 80025ee:	b2ca      	uxtb	r2, r1
 80025f0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80025f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f4:	3304      	adds	r3, #4
 80025f6:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80025f8:	2300      	movs	r3, #0
 80025fa:	61bb      	str	r3, [r7, #24]
 80025fc:	e027      	b.n	800264e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7fd fde8 	bl	80001e0 <strlen>
 8002610:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	4413      	add	r3, r2
 8002618:	6979      	ldr	r1, [r7, #20]
 800261a:	4618      	mov	r0, r3
 800261c:	f000 fd0a 	bl	8003034 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002622:	3304      	adds	r3, #4
 8002624:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	18d0      	adds	r0, r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	4619      	mov	r1, r3
 800263c:	f007 f963 	bl	8009906 <memcpy>
      offset += length_stringsi;
 8002640:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	4413      	add	r3, r2
 8002646:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	3301      	adds	r3, #1
 800264c:	61bb      	str	r3, [r7, #24]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	429a      	cmp	r2, r3
 8002656:	d3d2      	bcc.n	80025fe <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8002658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800265a:	4618      	mov	r0, r3
 800265c:	3728      	adds	r7, #40	@ 0x28
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002662:	b580      	push	{r7, lr}
 8002664:	b08e      	sub	sp, #56	@ 0x38
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	4413      	add	r3, r2
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800267a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800267c:	3301      	adds	r3, #1
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	4413      	add	r3, r2
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	021b      	lsls	r3, r3, #8
 8002686:	6a3a      	ldr	r2, [r7, #32]
 8002688:	4313      	orrs	r3, r2
 800268a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800268c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800268e:	3302      	adds	r3, #2
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	4413      	add	r3, r2
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	041b      	lsls	r3, r3, #16
 8002698:	6a3a      	ldr	r2, [r7, #32]
 800269a:	4313      	orrs	r3, r2
 800269c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800269e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026a0:	3303      	adds	r3, #3
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	4413      	add	r3, r2
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	061b      	lsls	r3, r3, #24
 80026aa:	6a3a      	ldr	r2, [r7, #32]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80026b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026b2:	3304      	adds	r3, #4
 80026b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	6a3a      	ldr	r2, [r7, #32]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d90a      	bls.n	80026d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68da      	ldr	r2, [r3, #12]
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4619      	mov	r1, r3
 80026ca:	4610      	mov	r0, r2
 80026cc:	f006 fe60 	bl	8009390 <realloc>
 80026d0:	4602      	mov	r2, r0
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a3a      	ldr	r2, [r7, #32]
 80026da:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80026dc:	2300      	movs	r3, #0
 80026de:	633b      	str	r3, [r7, #48]	@ 0x30
 80026e0:	e035      	b.n	800274e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80026ea:	6839      	ldr	r1, [r7, #0]
 80026ec:	440a      	add	r2, r1
 80026ee:	7812      	ldrb	r2, [r2, #0]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026f8:	3301      	adds	r3, #1
 80026fa:	6839      	ldr	r1, [r7, #0]
 80026fc:	440b      	add	r3, r1
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	021b      	lsls	r3, r3, #8
 8002702:	4313      	orrs	r3, r2
 8002704:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800270a:	3302      	adds	r3, #2
 800270c:	6839      	ldr	r1, [r7, #0]
 800270e:	440b      	add	r3, r1
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	041b      	lsls	r3, r3, #16
 8002714:	4313      	orrs	r3, r2
 8002716:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800271c:	3303      	adds	r3, #3
 800271e:	6839      	ldr	r1, [r7, #0]
 8002720:	440b      	add	r3, r1
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	061b      	lsls	r3, r3, #24
 8002726:	4313      	orrs	r3, r2
 8002728:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002732:	3304      	adds	r3, #4
 8002734:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	3208      	adds	r2, #8
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800274a:	3301      	adds	r3, #1
 800274c:	633b      	str	r3, [r7, #48]	@ 0x30
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002754:	429a      	cmp	r2, r3
 8002756:	d3c4      	bcc.n	80026e2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	4413      	add	r3, r2
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002764:	3301      	adds	r3, #1
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	4413      	add	r3, r2
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	021b      	lsls	r3, r3, #8
 800276e:	69fa      	ldr	r2, [r7, #28]
 8002770:	4313      	orrs	r3, r2
 8002772:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002776:	3302      	adds	r3, #2
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	4413      	add	r3, r2
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	041b      	lsls	r3, r3, #16
 8002780:	69fa      	ldr	r2, [r7, #28]
 8002782:	4313      	orrs	r3, r2
 8002784:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002788:	3303      	adds	r3, #3
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	4413      	add	r3, r2
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	061b      	lsls	r3, r3, #24
 8002792:	69fa      	ldr	r2, [r7, #28]
 8002794:	4313      	orrs	r3, r2
 8002796:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800279a:	3304      	adds	r3, #4
 800279c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	69fa      	ldr	r2, [r7, #28]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d90a      	bls.n	80027be <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	699a      	ldr	r2, [r3, #24]
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4619      	mov	r1, r3
 80027b2:	4610      	mov	r0, r2
 80027b4:	f006 fdec 	bl	8009390 <realloc>
 80027b8:	4602      	mov	r2, r0
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69fa      	ldr	r2, [r7, #28]
 80027c2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80027c4:	2300      	movs	r3, #0
 80027c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027c8:	e035      	b.n	8002836 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80027d2:	6839      	ldr	r1, [r7, #0]
 80027d4:	440a      	add	r2, r1
 80027d6:	7812      	ldrb	r2, [r2, #0]
 80027d8:	4313      	orrs	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027e0:	3301      	adds	r3, #1
 80027e2:	6839      	ldr	r1, [r7, #0]
 80027e4:	440b      	add	r3, r1
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	021b      	lsls	r3, r3, #8
 80027ea:	4313      	orrs	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027f2:	3302      	adds	r3, #2
 80027f4:	6839      	ldr	r1, [r7, #0]
 80027f6:	440b      	add	r3, r1
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	041b      	lsls	r3, r3, #16
 80027fc:	4313      	orrs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002804:	3303      	adds	r3, #3
 8002806:	6839      	ldr	r1, [r7, #0]
 8002808:	440b      	add	r3, r1
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	061b      	lsls	r3, r3, #24
 800280e:	4313      	orrs	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800281a:	3304      	adds	r3, #4
 800281c:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699a      	ldr	r2, [r3, #24]
 8002822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	3214      	adds	r2, #20
 800282c:	6812      	ldr	r2, [r2, #0]
 800282e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002832:	3301      	adds	r3, #1
 8002834:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800283c:	429a      	cmp	r2, r3
 800283e:	d3c4      	bcc.n	80027ca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	4413      	add	r3, r2
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800284a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800284c:	3301      	adds	r3, #1
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	4413      	add	r3, r2
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	021b      	lsls	r3, r3, #8
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4313      	orrs	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800285c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800285e:	3302      	adds	r3, #2
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	4413      	add	r3, r2
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	041b      	lsls	r3, r3, #16
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4313      	orrs	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800286e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002870:	3303      	adds	r3, #3
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	4413      	add	r3, r2
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	061b      	lsls	r3, r3, #24
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002882:	3304      	adds	r3, #4
 8002884:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	429a      	cmp	r2, r3
 800288e:	d90a      	bls.n	80028a6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4619      	mov	r1, r3
 800289a:	4610      	mov	r0, r2
 800289c:	f006 fd78 	bl	8009390 <realloc>
 80028a0:	4602      	mov	r2, r0
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80028ac:	2300      	movs	r3, #0
 80028ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028b0:	e03e      	b.n	8002930 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80028b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	441a      	add	r2, r3
 80028b8:	f107 030c 	add.w	r3, r7, #12
 80028bc:	4611      	mov	r1, r2
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 fbd7 	bl	8003072 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80028c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028c6:	3304      	adds	r3, #4
 80028c8:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80028ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ce:	e00b      	b.n	80028e8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d4:	441a      	add	r2, r3
 80028d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d8:	3b01      	subs	r3, #1
 80028da:	6839      	ldr	r1, [r7, #0]
 80028dc:	440b      	add	r3, r1
 80028de:	7812      	ldrb	r2, [r2, #0]
 80028e0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80028e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e4:	3301      	adds	r3, #1
 80028e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80028e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4413      	add	r3, r2
 80028ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d3ed      	bcc.n	80028d0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80028f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	4413      	add	r3, r2
 80028fa:	3b01      	subs	r3, #1
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	4413      	add	r3, r2
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002906:	3b01      	subs	r3, #1
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	441a      	add	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002910:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	4413      	add	r3, r2
 8002916:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800291c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	3220      	adds	r2, #32
 8002926:	6812      	ldr	r2, [r2, #0]
 8002928:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800292a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800292c:	3301      	adds	r3, #1
 800292e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002936:	429a      	cmp	r2, r3
 8002938:	d3bb      	bcc.n	80028b2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 800293a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800293c:	4618      	mov	r0, r3
 800293e:	3738      	adds	r7, #56	@ 0x38
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	4b03      	ldr	r3, [pc, #12]	@ (800295c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800294e:	4618      	mov	r0, r3
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	0800a724 	.word	0x0800a724

08002960 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	4b03      	ldr	r3, [pc, #12]	@ (8002978 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800296a:	4618      	mov	r0, r3
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	0800a64c 	.word	0x0800a64c

0800297c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	611a      	str	r2, [r3, #16]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4618      	mov	r0, r3
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b082      	sub	sp, #8
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68d8      	ldr	r0, [r3, #12]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6891      	ldr	r1, [r2, #8]
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	4798      	blx	r3
 80029c8:	4603      	mov	r3, r0
  };
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
  }
 80029de:	4618      	mov	r0, r3
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8002a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a44 <_ZN13STM32HardwareC1Ev+0x34>)
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
    }
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	20000b8c 	.word	0x20000b8c

08002a48 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f804 	bl	8002a5e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6818      	ldr	r0, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a72:	4619      	mov	r1, r3
 8002a74:	f004 fde4 	bl	8007640 <HAL_UART_Receive_DMA>
    }
 8002a78:	bf00      	nop
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002a80:	b590      	push	{r4, r7, lr}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002a88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a8c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8d3 4204 	ldr.w	r4, [r3, #516]	@ 0x204
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff ffa8 	bl	80029ea <_ZN13STM32Hardware10getRdmaIndEv>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	429c      	cmp	r4, r3
 8002a9e:	bf14      	ite	ne
 8002aa0:	2301      	movne	r3, #1
 8002aa2:	2300      	moveq	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d012      	beq.n	8002ad0 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002ab0:	1c59      	adds	r1, r3, #1
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	f8c2 1204 	str.w	r1, [r2, #516]	@ 0x204
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	4413      	add	r3, r2
 8002abc:	791b      	ldrb	r3, [r3, #4]
 8002abe:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002ac6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      return c;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
    }
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd90      	pop	{r4, r7, pc}
	...

08002adc <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b20      	cmp	r3, #32
 8002af0:	d108      	bne.n	8002b04 <_ZN13STM32Hardware5flushEv+0x28>
 8002af2:	4b28      	ldr	r3, [pc, #160]	@ (8002b94 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	f083 0301 	eor.w	r3, r3, #1
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <_ZN13STM32Hardware5flushEv+0x28>
 8002b00:	2301      	movs	r3, #1
 8002b02:	e000      	b.n	8002b06 <_ZN13STM32Hardware5flushEv+0x2a>
 8002b04:	2300      	movs	r3, #0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d03f      	beq.n	8002b8a <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8002b0a:	4b22      	ldr	r3, [pc, #136]	@ (8002b94 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d031      	beq.n	8002b84 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d20a      	bcs.n	8002b46 <_ZN13STM32Hardware5flushEv+0x6a>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	e006      	b.n	8002b54 <_ZN13STM32Hardware5flushEv+0x78>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6818      	ldr	r0, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002b60:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	4413      	add	r3, r2
 8002b68:	89fa      	ldrh	r2, [r7, #14]
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	f004 fcf8 	bl	8007560 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8002b76:	89fb      	ldrh	r3, [r7, #14]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
        }
        mutex = false;
 8002b84:	4b03      	ldr	r3, [pc, #12]	@ (8002b94 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	701a      	strb	r2, [r3, #0]
      }
    }
 8002b8a:	bf00      	nop
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20000118 	.word	0x20000118

08002b98 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
      int n = length;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bae:	bfa8      	it	ge
 8002bb0:	f44f 7300 	movge.w	r3, #512	@ 0x200
 8002bb4:	617b      	str	r3, [r7, #20]

      int n_tail = n <= (int)(tbuflen - twind) ? n : (int)(tbuflen - twind);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002bbc:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	bfa8      	it	ge
 8002bc8:	4613      	movge	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002bd2:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	4413      	add	r3, r2
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	68b9      	ldr	r1, [r7, #8]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f006 fe91 	bl	8009906 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	4413      	add	r3, r2
 8002bee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

      if(n != n_tail){
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d00b      	beq.n	8002c18 <_ZN13STM32Hardware5writeEPhi+0x80>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f503 7002 	add.w	r0, r3, #520	@ 0x208
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	18d1      	adds	r1, r2, r3
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	461a      	mov	r2, r3
 8002c14:	f006 fe77 	bl	8009906 <memcpy>
      }

      flush();
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f7ff ff5f 	bl	8002adc <_ZN13STM32Hardware5flushEv>
    }
 8002c1e:	bf00      	nop
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b082      	sub	sp, #8
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	f001 fc19 	bl	8004464 <HAL_GetTick>
 8002c32:	4603      	mov	r3, r0
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <_ZN8std_msgs4BoolC1Ev>:
  {
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
      data(0)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff f858 	bl	8001cfc <_ZN3ros3MsgC1Ev>
 8002c4c:	4a05      	ldr	r2, [pc, #20]	@ (8002c64 <_ZN8std_msgs4BoolC1Ev+0x28>)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	711a      	strb	r2, [r3, #4]
    {
    }
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	0800a78c 	.word	0x0800a78c

08002c68 <_ZNK8std_msgs4Bool9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	791b      	ldrb	r3, [r3, #4]
 8002c7a:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	4413      	add	r3, r2
 8002c82:	7a3a      	ldrb	r2, [r7, #8]
 8002c84:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	60fb      	str	r3, [r7, #12]
      return offset;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
    }
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <_ZN8std_msgs4Bool11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002c9a:	b480      	push	{r7}
 8002c9c:	b085      	sub	sp, #20
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002cac:	7a3a      	ldrb	r2, [r7, #8]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6839      	ldr	r1, [r7, #0]
 8002cb2:	440b      	add	r3, r1
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8002cbc:	7a3a      	ldrb	r2, [r7, #8]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	60fb      	str	r3, [r7, #12]
     return offset;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
    }
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
	...

08002cd8 <_ZN8std_msgs4Bool7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Bool"; };
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	4b03      	ldr	r3, [pc, #12]	@ (8002cf0 <_ZN8std_msgs4Bool7getTypeEv+0x18>)
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	0800a670 	.word	0x0800a670

08002cf4 <_ZN8std_msgs4Bool6getMD5Ev>:
    virtual const char * getMD5() override { return "8b94c1b53db61fb6aed406028ad6332a"; };
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	4b03      	ldr	r3, [pc, #12]	@ (8002d0c <_ZN8std_msgs4Bool6getMD5Ev+0x18>)
 8002cfe:	4618      	mov	r0, r3
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	0800a680 	.word	0x0800a680

08002d10 <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
      data(0)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fe ffee 	bl	8001cfc <_ZN3ros3MsgC1Ev>
 8002d20:	4a05      	ldr	r2, [pc, #20]	@ (8002d38 <_ZN8std_msgs7Float32C1Ev+0x28>)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	605a      	str	r2, [r3, #4]
    {
    }
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4618      	mov	r0, r3
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	0800a774 	.word	0x0800a774

08002d3c <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002d50:	68b9      	ldr	r1, [r7, #8]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	4413      	add	r3, r2
 8002d58:	b2ca      	uxtb	r2, r1
 8002d5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	0a19      	lsrs	r1, r3, #8
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	3301      	adds	r3, #1
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	4413      	add	r3, r2
 8002d68:	b2ca      	uxtb	r2, r1
 8002d6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	0c19      	lsrs	r1, r3, #16
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	3302      	adds	r3, #2
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	4413      	add	r3, r2
 8002d78:	b2ca      	uxtb	r2, r1
 8002d7a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	0e19      	lsrs	r1, r3, #24
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	3303      	adds	r3, #3
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	4413      	add	r3, r2
 8002d88:	b2ca      	uxtb	r2, r1
 8002d8a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	3304      	adds	r3, #4
 8002d90:	60fb      	str	r3, [r7, #12]
      return offset;
 8002d92:	68fb      	ldr	r3, [r7, #12]
    }
 8002d94:	4618      	mov	r0, r3
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 8002dae:	2300      	movs	r3, #0
 8002db0:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	6839      	ldr	r1, [r7, #0]
 8002db8:	440a      	add	r2, r1
 8002dba:	7812      	ldrb	r2, [r2, #0]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	6839      	ldr	r1, [r7, #0]
 8002dc8:	440b      	add	r3, r1
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	021b      	lsls	r3, r3, #8
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	3302      	adds	r3, #2
 8002dd8:	6839      	ldr	r1, [r7, #0]
 8002dda:	440b      	add	r3, r1
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	041b      	lsls	r3, r3, #16
 8002de0:	4313      	orrs	r3, r2
 8002de2:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	3303      	adds	r3, #3
 8002dea:	6839      	ldr	r1, [r7, #0]
 8002dec:	440b      	add	r3, r1
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	061b      	lsls	r3, r3, #24
 8002df2:	4313      	orrs	r3, r2
 8002df4:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	3304      	adds	r3, #4
 8002e00:	60fb      	str	r3, [r7, #12]
     return offset;
 8002e02:	68fb      	ldr	r3, [r7, #12]
    }
 8002e04:	4618      	mov	r0, r3
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <_ZN8std_msgs7Float327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32"; };
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	4b03      	ldr	r3, [pc, #12]	@ (8002e28 <_ZN8std_msgs7Float327getTypeEv+0x18>)
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	0800a6a4 	.word	0x0800a6a4

08002e2c <_ZN8std_msgs7Float326getMD5Ev>:
    virtual const char * getMD5() override { return "73fcbf46b49191e672908e50842a83d4"; };
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	4b03      	ldr	r3, [pc, #12]	@ (8002e44 <_ZN8std_msgs7Float326getMD5Ev+0x18>)
 8002e36:	4618      	mov	r0, r3
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	0800a6b8 	.word	0x0800a6b8

08002e48 <_Z22kicker_status_callbackRKN8std_msgs4BoolE>:

}



void kicker_status_callback(const std_msgs::Bool &data){
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
	state = data.data;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	791a      	ldrb	r2, [r3, #4]
 8002e54:	4b03      	ldr	r3, [pc, #12]	@ (8002e64 <_Z22kicker_status_callbackRKN8std_msgs4BoolE+0x1c>)
 8002e56:	701a      	strb	r2, [r3, #0]
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	20000138 	.word	0x20000138

08002e68 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	4a04      	ldr	r2, [pc, #16]	@ (8002e84 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	0800a7bc 	.word	0x0800a7bc

08002e88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff ffe8 	bl	8002e68 <_ZN3ros15NodeHandleBase_C1Ev>
 8002e98:	4a36      	ldr	r2, [pc, #216]	@ (8002f74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff fdb4 	bl	8002a10 <_ZN13STM32HardwareC1Ev>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8002ece:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f006 fc9b 	bl	8009810 <memset>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8002ee0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f006 fc92 	bl	8009810 <memset>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f603 0324 	addw	r3, r3, #2084	@ 0x824
 8002ef2:	2264      	movs	r2, #100	@ 0x64
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f006 fc8a 	bl	8009810 <memset>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 8002f02:	2264      	movs	r2, #100	@ 0x64
 8002f04:	2100      	movs	r1, #0
 8002f06:	4618      	mov	r0, r3
 8002f08:	f006 fc82 	bl	8009810 <memset>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f603 1314 	addw	r3, r3, #2324	@ 0x914
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff fa3e 	bl	80023e4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	0800a760 	.word	0x0800a760

08002f78 <HAL_UART_TxCpltCallback>:

ros::Subscriber<std_msgs::Bool> kicker("Kicker", &kicker_status_callback);


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a07      	ldr	r2, [pc, #28]	@ (8002fa0 <HAL_UART_TxCpltCallback+0x28>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d106      	bne.n	8002f96 <HAL_UART_TxCpltCallback+0x1e>
	{
		nh.getHardware()->flush();
 8002f88:	4806      	ldr	r0, [pc, #24]	@ (8002fa4 <HAL_UART_TxCpltCallback+0x2c>)
 8002f8a:	f000 f8cd 	bl	8003128 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff fda3 	bl	8002adc <_ZN13STM32Hardware5flushEv>
	}
}
 8002f96:	bf00      	nop
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000b8c 	.word	0x20000b8c
 8002fa4:	2000013c 	.word	0x2000013c

08002fa8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a07      	ldr	r2, [pc, #28]	@ (8002fd0 <HAL_UART_RxCpltCallback+0x28>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d106      	bne.n	8002fc6 <HAL_UART_RxCpltCallback+0x1e>
	{
		nh.getHardware()->reset_rbuf();
 8002fb8:	4806      	ldr	r0, [pc, #24]	@ (8002fd4 <HAL_UART_RxCpltCallback+0x2c>)
 8002fba:	f000 f8b5 	bl	8003128 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff fd4c 	bl	8002a5e <_ZN13STM32Hardware10reset_rbufEv>
	}
}
 8002fc6:	bf00      	nop
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000b8c 	.word	0x20000b8c
 8002fd4:	2000013c 	.word	0x2000013c

08002fd8 <setup>:

void setup(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
	nh.initNode();  // Inisialisasi node ROS
 8002fdc:	4806      	ldr	r0, [pc, #24]	@ (8002ff8 <setup+0x20>)
 8002fde:	f000 f8af 	bl	8003140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.subscribe(kicker);
 8002fe2:	4906      	ldr	r1, [pc, #24]	@ (8002ffc <setup+0x24>)
 8002fe4:	4804      	ldr	r0, [pc, #16]	@ (8002ff8 <setup+0x20>)
 8002fe6:	f000 f8c8 	bl	800317a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
////	nh.subscribe(coordinate_target_subs);
//	nh.subscribe(robot_status_subs);
//	nh.subscribe(realsense_subs);
//	nh.advertise(pub);  // Advertise topik
	nh.advertise(bno_publish);
 8002fea:	4905      	ldr	r1, [pc, #20]	@ (8003000 <setup+0x28>)
 8002fec:	4802      	ldr	r0, [pc, #8]	@ (8002ff8 <setup+0x20>)
 8002fee:	f000 f8ef 	bl	80031d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	2000013c 	.word	0x2000013c
 8002ffc:	20000a94 	.word	0x20000a94
 8003000:	20000a80 	.word	0x20000a80

08003004 <loop>:

void loop(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
	bno_msg.data = bno.yaw;  // Mengisi pesan dengan nilai float
 8003008:	4b06      	ldr	r3, [pc, #24]	@ (8003024 <loop+0x20>)
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	4a06      	ldr	r2, [pc, #24]	@ (8003028 <loop+0x24>)
 800300e:	6053      	str	r3, [r2, #4]
	bno_publish.publish(&bno_msg);  // Mengirim pesan ke ROS
 8003010:	4905      	ldr	r1, [pc, #20]	@ (8003028 <loop+0x24>)
 8003012:	4806      	ldr	r0, [pc, #24]	@ (800302c <loop+0x28>)
 8003014:	f7ff fcc9 	bl	80029aa <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	nh.spinOnce();  // Memproses komunikasi ROS;
 8003018:	4805      	ldr	r0, [pc, #20]	@ (8003030 <loop+0x2c>)
 800301a:	f000 f909 	bl	8003230 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

}
 800301e:	bf00      	nop
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	2000011c 	.word	0x2000011c
 8003028:	20000a78 	.word	0x20000a78
 800302c:	20000a80 	.word	0x20000a80
 8003030:	2000013c 	.word	0x2000013c

08003034 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	e00c      	b.n	800305e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	fa22 f103 	lsr.w	r1, r2, r3
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4413      	add	r3, r2
 8003054:	b2ca      	uxtb	r2, r1
 8003056:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	3301      	adds	r3, #1
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2b03      	cmp	r3, #3
 8003062:	d9ef      	bls.n	8003044 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8003064:	bf00      	nop
 8003066:	bf00      	nop
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003072:	b480      	push	{r7}
 8003074:	b085      	sub	sp, #20
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	e010      	b.n	80030aa <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6839      	ldr	r1, [r7, #0]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	440a      	add	r2, r1
 8003092:	7812      	ldrb	r2, [r2, #0]
 8003094:	4611      	mov	r1, r2
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	00d2      	lsls	r2, r2, #3
 800309a:	fa01 f202 	lsl.w	r2, r1, r2
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	3301      	adds	r3, #1
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d9eb      	bls.n	8003088 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 80030b0:	bf00      	nop
 80030b2:	bf00      	nop
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
	...

080030c0 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	4a04      	ldr	r2, [pc, #16]	@ (80030dc <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4618      	mov	r0, r3
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	0800a7a4 	.word	0x0800a7a4

080030e0 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff ffe5 	bl	80030c0 <_ZN3ros11Subscriber_C1Ev>
 80030f6:	4a0b      	ldr	r2, [pc, #44]	@ (8003124 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei+0x44>)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	330c      	adds	r3, #12
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff fd9b 	bl	8002c3c <_ZN8std_msgs4BoolC1Ev>
    cb_(cb),
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	609a      	str	r2, [r3, #8]
  };
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	0800a748 	.word	0x0800a748

08003128 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3304      	adds	r3, #4
  }
 8003134:	4618      	mov	r0, r3
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3304      	adds	r3, #4
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fc7b 	bl	8002a48 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
    bytes_ = 0;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
    index_ = 0;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
    topic_ = 0;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
  };
 8003172:	bf00      	nop
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:
    }
    return false;
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 800317a:	b480      	push	{r7}
 800317c:	b085      	sub	sp, #20
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
 8003182:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003184:	2300      	movs	r3, #0
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	e018      	b.n	80031bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10d      	bne.n	80031b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x3c>
      {
        subscribers[i] = &s;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80031a2:	6839      	ldr	r1, [r7, #0]
 80031a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	605a      	str	r2, [r3, #4]
        return true;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e006      	b.n	80031c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	3301      	adds	r3, #1
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2b18      	cmp	r3, #24
 80031c0:	dde3      	ble.n	800318a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 80031c2:	2300      	movs	r3, #0
  }
 80031c4:	4618      	mov	r0, r3
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	e01d      	b.n	800321c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
      if (publishers[i] == 0) // empty slot
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d111      	bne.n	8003216 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
        publishers[i] = &p;
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	60da      	str	r2, [r3, #12]
        return true;
 8003212:	2301      	movs	r3, #1
 8003214:	e006      	b.n	8003224 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	3301      	adds	r3, #1
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2b18      	cmp	r3, #24
 8003220:	ddde      	ble.n	80031e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
    return false;
 8003222:	2300      	movs	r3, #0
  }
 8003224:	4618      	mov	r0, r3
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3304      	adds	r3, #4
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff fcf2 	bl	8002c26 <_ZN13STM32Hardware4timeEv>
 8003242:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f8d3 3908 	ldr.w	r3, [r3, #2312]	@ 0x908
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8003252:	4293      	cmp	r3, r2
 8003254:	d903      	bls.n	800325e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
    if (mode_ != MODE_FIRST_FF)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003264:	2b00      	cmp	r3, #0
 8003266:	d009      	beq.n	800327c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	429a      	cmp	r2, r3
 8003272:	d903      	bls.n	800327c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
      if (spin_timeout_ > 0)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8003282:	2b00      	cmp	r3, #0
 8003284:	d014      	beq.n	80032b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	3304      	adds	r3, #4
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff fccb 	bl	8002c26 <_ZN13STM32Hardware4timeEv>
 8003290:	4602      	mov	r2, r0
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1ad2      	subs	r2, r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 800329c:	429a      	cmp	r2, r3
 800329e:	bf8c      	ite	hi
 80032a0:	2301      	movhi	r3, #1
 80032a2:	2300      	movls	r3, #0
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 80032aa:	f06f 0301 	mvn.w	r3, #1
 80032ae:	e194      	b.n	80035da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3304      	adds	r3, #4
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff fbe3 	bl	8002a80 <_ZN13STM32Hardware4readEv>
 80032ba:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f2c0 8174 	blt.w	80035ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	@ 0x8fc
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	441a      	add	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80032da:	2b07      	cmp	r3, #7
 80032dc:	d11e      	bne.n	800331c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 80032e4:	1c59      	adds	r1, r3, #1
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	f8c2 18f8 	str.w	r1, [r2, #2296]	@ 0x8f8
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	b2d1      	uxtb	r1, r2
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	4413      	add	r3, r2
 80032f4:	460a      	mov	r2, r1
 80032f6:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
        bytes_--;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8003300:	1e5a      	subs	r2, r3, #1
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1b4      	bne.n	800327c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2208      	movs	r2, #8
 8003316:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 800331a:	e7af      	b.n	800327c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003322:	2b00      	cmp	r3, #0
 8003324:	d128      	bne.n	8003378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2bff      	cmp	r3, #255	@ 0xff
 800332a:	d10d      	bne.n	8003348 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f103 0214 	add.w	r2, r3, #20
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 8003346:	e799      	b.n	800327c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3304      	adds	r3, #4
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff fc6a 	bl	8002c26 <_ZN13STM32Hardware4timeEv>
 8003352:	4602      	mov	r2, r0
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	f241 3288 	movw	r2, #5000	@ 0x1388
 800335c:	4293      	cmp	r3, r2
 800335e:	bf8c      	ite	hi
 8003360:	2301      	movhi	r3, #1
 8003362:	2300      	movls	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d088      	beq.n	800327c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
          return SPIN_TIMEOUT;
 8003372:	f06f 0301 	mvn.w	r3, #1
 8003376:	e130      	b.n	80035da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800337e:	2b01      	cmp	r3, #1
 8003380:	d118      	bne.n	80033b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2bfe      	cmp	r3, #254	@ 0xfe
 8003386:	d107      	bne.n	8003398 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8003396:	e771      	b.n	800327c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          if (configured_ == false)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f47f af68 	bne.w	800327c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f918 	bl	80035e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80033b2:	e763      	b.n	800327c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d113      	bne.n	80033e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        index_ = 0;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
        mode_++;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 80033e4:	e74a      	b.n	800327c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80033ec:	2b03      	cmp	r3, #3
 80033ee:	d110      	bne.n	8003412 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	@ 0x8f0
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	021b      	lsls	r3, r3, #8
 80033fa:	441a      	add	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        mode_++;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8003410:	e734      	b.n	800327c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003418:	2b04      	cmp	r3, #4
 800341a:	d116      	bne.n	800344a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 8003422:	425a      	negs	r2, r3
 8003424:	b2db      	uxtb	r3, r3
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	bf58      	it	pl
 800342a:	4253      	negpl	r3, r2
 800342c:	2bff      	cmp	r3, #255	@ 0xff
 800342e:	d107      	bne.n	8003440 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 800343e:	e71d      	b.n	800327c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8003448:	e718      	b.n	800327c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003450:	2b05      	cmp	r3, #5
 8003452:	d10f      	bne.n	8003474 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_++;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 8003472:	e703      	b.n	800327c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800347a:	2b06      	cmp	r3, #6
 800347c:	d117      	bne.n	80034ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	@ 0x8f4
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	021b      	lsls	r3, r3, #8
 8003488:	441a      	add	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_ = MODE_MESSAGE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2207      	movs	r2, #7
 8003494:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if (bytes_ == 0)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f47f aeec 	bne.w	800327c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2208      	movs	r2, #8
 80034a8:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 80034ac:	e6e6      	b.n	800327c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	f47f aee1 	bne.w	800327c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if ((checksum_ % 256) == 255)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 80034c8:	425a      	negs	r2, r3
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	bf58      	it	pl
 80034d0:	4253      	negpl	r3, r2
 80034d2:	2bff      	cmp	r3, #255	@ 0xff
 80034d4:	f47f aed2 	bne.w	800327c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d110      	bne.n	8003504 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f87d 	bl	80035e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f898 	bl	800361e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
            last_sync_receive_time = c_time;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
            return SPIN_ERR;
 80034fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003502:	e06a      	b.n	80035da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 800350a:	2b0a      	cmp	r3, #10
 800350c:	d107      	bne.n	800351e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8003514:	4619      	mov	r1, r3
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f960 	bl	80037dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800351c:	e6ae      	b.n	800327c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8003524:	2b06      	cmp	r3, #6
 8003526:	d10e      	bne.n	8003546 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f603 1214 	addw	r2, r3, #2324	@ 0x914
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8003534:	4619      	mov	r1, r3
 8003536:	4610      	mov	r0, r2
 8003538:	f7ff f893 	bl	8002662 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 8003544:	e69a      	b.n	800327c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 800354c:	2b0b      	cmp	r3, #11
 800354e:	d104      	bne.n	800355a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 8003558:	e690      	b.n	800327c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8003560:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800356a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800356e:	2b00      	cmp	r3, #0
 8003570:	f43f ae84 	beq.w	800327c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 800357a:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003584:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 800358e:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	f202 4224 	addw	r2, r2, #1060	@ 0x424
 80035a6:	4611      	mov	r1, r2
 80035a8:	4798      	blx	r3
    while (true)
 80035aa:	e667      	b.n	800327c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80035ac:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00f      	beq.n	80035d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d906      	bls.n	80035d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f809 	bl	80035e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
    return SPIN_OK;
 80035d8:	2300      	movs	r3, #0
  }
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b086      	sub	sp, #24
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80035ea:	f107 030c 	add.w	r3, r7, #12
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fe fb94 	bl	8001d1c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f107 020c 	add.w	r2, r7, #12
 80035fe:	210a      	movs	r1, #10
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	4798      	blx	r3
    rt_time = hardware_.time();
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3304      	adds	r3, #4
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff fb0c 	bl	8002c26 <_ZN13STM32Hardware4timeEv>
 800360e:	4602      	mov	r2, r0
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
  }
 8003616:	bf00      	nop
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 800361e:	b590      	push	{r4, r7, lr}
 8003620:	b08b      	sub	sp, #44	@ 0x2c
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003626:	f107 030c 	add.w	r3, r7, #12
 800362a:	4618      	mov	r0, r3
 800362c:	f7fe fc66 	bl	8001efc <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003630:	2300      	movs	r3, #0
 8003632:	627b      	str	r3, [r7, #36]	@ 0x24
 8003634:	e062      	b.n	80036fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d056      	beq.n	80036f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	b29b      	uxth	r3, r3
 800365a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003660:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4413      	add	r3, r2
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003672:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	6859      	ldr	r1, [r3, #4]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003682:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	3308      	adds	r3, #8
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4608      	mov	r0, r1
 8003696:	4798      	blx	r3
 8003698:	4603      	mov	r3, r0
 800369a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a0:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4413      	add	r3, r2
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	6859      	ldr	r1, [r3, #4]
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b0:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	330c      	adds	r3, #12
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4608      	mov	r0, r1
 80036c4:	4798      	blx	r3
 80036c6:	4603      	mov	r3, r0
 80036c8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80036ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80036ce:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681c      	ldr	r4, [r3, #0]
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036da:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff f974 	bl	80029d2 <_ZN3ros9Publisher15getEndpointTypeEv>
 80036ea:	4601      	mov	r1, r0
 80036ec:	f107 030c 	add.w	r3, r7, #12
 80036f0:	461a      	mov	r2, r3
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80036f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f8:	3301      	adds	r3, #1
 80036fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80036fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fe:	2b18      	cmp	r3, #24
 8003700:	dd99      	ble.n	8003636 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003702:	2300      	movs	r3, #0
 8003704:	627b      	str	r3, [r7, #36]	@ 0x24
 8003706:	e05e      	b.n	80037c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800370c:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d053      	beq.n	80037c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800371c:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	b29b      	uxth	r3, r3
 8003728:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800372e:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800373e:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003742:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800374a:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800374e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	3308      	adds	r3, #8
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4608      	mov	r0, r1
 800375a:	4798      	blx	r3
 800375c:	4603      	mov	r3, r0
 800375e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003764:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003768:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003770:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	330c      	adds	r3, #12
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4608      	mov	r0, r1
 8003780:	4798      	blx	r3
 8003782:	4603      	mov	r3, r0
 8003784:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003786:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800378a:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681c      	ldr	r4, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003796:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800379a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037a2:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80037a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	3304      	adds	r3, #4
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4608      	mov	r0, r1
 80037b2:	4798      	blx	r3
 80037b4:	4601      	mov	r1, r0
 80037b6:	f107 030c 	add.w	r3, r7, #12
 80037ba:	461a      	mov	r2, r3
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80037c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c2:	3301      	adds	r3, #1
 80037c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80037c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c8:	2b18      	cmp	r3, #24
 80037ca:	dd9d      	ble.n	8003708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
  }
 80037d4:	bf00      	nop
 80037d6:	372c      	adds	r7, #44	@ 0x2c
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd90      	pop	{r4, r7, pc}

080037dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80037e6:	f107 0308 	add.w	r3, r7, #8
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fe fa96 	bl	8001d1c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3304      	adds	r3, #4
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff fa16 	bl	8002c26 <_ZN13STM32Hardware4timeEv>
 80037fa:	4602      	mov	r2, r0
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003806:	f107 0308 	add.w	r3, r7, #8
 800380a:	6839      	ldr	r1, [r7, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f7fe faf5 	bl	8001dfc <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	4915      	ldr	r1, [pc, #84]	@ (800386c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003818:	fba1 1303 	umull	r1, r3, r1, r3
 800381c:	099b      	lsrs	r3, r3, #6
 800381e:	4413      	add	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003822:	6939      	ldr	r1, [r7, #16]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	4b11      	ldr	r3, [pc, #68]	@ (800386c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003828:	fba3 0302 	umull	r0, r3, r3, r2
 800382c:	099b      	lsrs	r3, r3, #6
 800382e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003832:	fb00 f303 	mul.w	r3, r0, r3
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	4a0d      	ldr	r2, [pc, #52]	@ (8003870 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800383a:	fb02 f303 	mul.w	r3, r2, r3
 800383e:	440b      	add	r3, r1
 8003840:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003842:	f107 0308 	add.w	r3, r7, #8
 8003846:	3304      	adds	r3, #4
 8003848:	4619      	mov	r1, r3
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f8a6 	bl	800399c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3304      	adds	r3, #4
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff f9e6 	bl	8002c26 <_ZN13STM32Hardware4timeEv>
 800385a:	4602      	mov	r2, r0
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
  }
 8003862:	bf00      	nop
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	10624dd3 	.word	0x10624dd3
 8003870:	000f4240 	.word	0x000f4240

08003874 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8003874:	b580      	push	{r7, lr}
 8003876:	b088      	sub	sp, #32
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2b63      	cmp	r3, #99	@ 0x63
 8003884:	dd09      	ble.n	800389a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 800388c:	f083 0301 	eor.w	r3, r3, #1
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003896:	2300      	movs	r3, #0
 8003898:	e079      	b.n	800398e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	f202 6224 	addw	r2, r2, #1572	@ 0x624
 80038a6:	3207      	adds	r2, #7
 80038a8:	4611      	mov	r1, r2
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	4798      	blx	r3
 80038ae:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	22ff      	movs	r2, #255	@ 0xff
 80038b4:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624
    message_out[1] = PROTOCOL_VER;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	22fe      	movs	r2, #254	@ 0xfe
 80038bc:	f883 2625 	strb.w	r2, [r3, #1573]	@ 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f883 2626 	strb.w	r2, [r3, #1574]	@ 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	0a1b      	lsrs	r3, r3, #8
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f883 2627 	strb.w	r2, [r3, #1575]	@ 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f893 2626 	ldrb.w	r2, [r3, #1574]	@ 0x626
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f893 3627 	ldrb.w	r3, [r3, #1575]	@ 0x627
 80038e6:	4413      	add	r3, r2
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	43db      	mvns	r3, r3
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f883 2628 	strb.w	r2, [r3, #1576]	@ 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f883 2629 	strb.w	r2, [r3, #1577]	@ 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	b21b      	sxth	r3, r3
 8003902:	121b      	asrs	r3, r3, #8
 8003904:	b21b      	sxth	r3, r3
 8003906:	b2da      	uxtb	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f883 262a 	strb.w	r2, [r3, #1578]	@ 0x62a

    /* calculate checksum */
    int chk = 0;
 800390e:	2300      	movs	r3, #0
 8003910:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003912:	2305      	movs	r3, #5
 8003914:	61bb      	str	r3, [r7, #24]
 8003916:	e00c      	b.n	8003932 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	4413      	add	r3, r2
 800391e:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	461a      	mov	r2, r3
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	4413      	add	r3, r2
 800392a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	3301      	adds	r3, #1
 8003930:	61bb      	str	r3, [r7, #24]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	3306      	adds	r3, #6
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	429a      	cmp	r2, r3
 800393a:	dded      	ble.n	8003918 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	3307      	adds	r3, #7
 8003940:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	425a      	negs	r2, r3
 8003946:	b2db      	uxtb	r3, r3
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	bf58      	it	pl
 800394c:	4253      	negpl	r3, r2
 800394e:	b2da      	uxtb	r2, r3
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	1c59      	adds	r1, r3, #1
 8003954:	6179      	str	r1, [r7, #20]
 8003956:	43d2      	mvns	r2, r2
 8003958:	b2d1      	uxtb	r1, r2
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4413      	add	r3, r2
 800395e:	460a      	mov	r2, r1
 8003960:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624

    if (l <= OUTPUT_SIZE)
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800396a:	dc0a      	bgt.n	8003982 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	1d18      	adds	r0, r3, #4
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	4619      	mov	r1, r3
 800397a:	f7ff f90d 	bl	8002b98 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	e005      	b.n	800398e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003982:	4905      	ldr	r1, [pc, #20]	@ (8003998 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 f849 	bl	8003a1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800398a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
  }
 800398e:	4618      	mov	r0, r3
 8003990:	3720      	adds	r7, #32
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	0800a6dc 	.word	0x0800a6dc

0800399c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3304      	adds	r3, #4
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff f93b 	bl	8002c26 <_ZN13STM32Hardware4timeEv>
 80039b0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4915      	ldr	r1, [pc, #84]	@ (8003a10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80039ba:	fba1 1303 	umull	r1, r3, r1, r3
 80039be:	099b      	lsrs	r3, r3, #6
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	1e5a      	subs	r2, r3, #1
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	6859      	ldr	r1, [r3, #4]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003a10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80039d2:	fba3 0302 	umull	r0, r3, r3, r2
 80039d6:	099b      	lsrs	r3, r3, #6
 80039d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80039dc:	fb00 f303 	mul.w	r3, r0, r3
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	4a0c      	ldr	r2, [pc, #48]	@ (8003a14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 80039e4:	fb02 f303 	mul.w	r3, r2, r3
 80039e8:	1aca      	subs	r2, r1, r3
 80039ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003a18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 80039ec:	4413      	add	r3, r2
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	f8c2 341c 	str.w	r3, [r2, #1052]	@ 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f503 6283 	add.w	r2, r3, #1048	@ 0x418
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8003a00:	4619      	mov	r1, r3
 8003a02:	4610      	mov	r0, r2
 8003a04:	f7fd fa78 	bl	8000ef8 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003a08:	bf00      	nop
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	10624dd3 	.word	0x10624dd3
 8003a14:	000f4240 	.word	0x000f4240
 8003a18:	3b9aca00 	.word	0x3b9aca00

08003a1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	2103      	movs	r1, #3
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f804 	bl	8003a38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003a30:	bf00      	nop
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b088      	sub	sp, #32
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	460b      	mov	r3, r1
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003a46:	f107 0314 	add.w	r3, r7, #20
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fe fc1a 	bl	8002284 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003a50:	7afb      	ldrb	r3, [r7, #11]
 8003a52:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f107 0214 	add.w	r2, r7, #20
 8003a62:	2107      	movs	r1, #7
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	4798      	blx	r3
  }
 8003a68:	bf00      	nop
 8003a6a:	3720      	adds	r7, #32
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <_Z41__static_initialization_and_destruction_0ii>:
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d116      	bne.n	8003aae <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d111      	bne.n	8003aae <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 8003a8a:	480b      	ldr	r0, [pc, #44]	@ (8003ab8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003a8c:	f7ff f9fc 	bl	8002e88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Float32 bno_msg;  // Tipe pesan ROS untuk data float
 8003a90:	480a      	ldr	r0, [pc, #40]	@ (8003abc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003a92:	f7ff f93d 	bl	8002d10 <_ZN8std_msgs7Float32C1Ev>
ros::Publisher bno_publish("BNO", &bno_msg);
 8003a96:	2300      	movs	r3, #0
 8003a98:	4a08      	ldr	r2, [pc, #32]	@ (8003abc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003a9a:	4909      	ldr	r1, [pc, #36]	@ (8003ac0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003a9c:	4809      	ldr	r0, [pc, #36]	@ (8003ac4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8003a9e:	f7fe ff6d 	bl	800297c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Bool> kicker("Kicker", &kicker_status_callback);
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	4a08      	ldr	r2, [pc, #32]	@ (8003ac8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003aa6:	4909      	ldr	r1, [pc, #36]	@ (8003acc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003aa8:	4809      	ldr	r0, [pc, #36]	@ (8003ad0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003aaa:	f7ff fb19 	bl	80030e0 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
}
 8003aae:	bf00      	nop
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	2000013c 	.word	0x2000013c
 8003abc:	20000a78 	.word	0x20000a78
 8003ac0:	0800a718 	.word	0x0800a718
 8003ac4:	20000a80 	.word	0x20000a80
 8003ac8:	08002e49 	.word	0x08002e49
 8003acc:	0800a71c 	.word	0x0800a71c
 8003ad0:	20000a94 	.word	0x20000a94

08003ad4 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	330c      	adds	r3, #12
 8003ae2:	6839      	ldr	r1, [r7, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff f8d8 	bl	8002c9a <_ZN8std_msgs4Bool11deserializeEPh>
    this->cb_(msg);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	320c      	adds	r2, #12
 8003af2:	4610      	mov	r0, r2
 8003af4:	4798      	blx	r3
  }
 8003af6:	bf00      	nop
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <_ZN3ros10SubscriberIN8std_msgs4BoolEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	699b      	ldr	r3, [r3, #24]
  }
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b082      	sub	sp, #8
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	330c      	adds	r3, #12
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff f8d8 	bl	8002cd8 <_ZN8std_msgs4Bool7getTypeEv>
 8003b28:	4603      	mov	r3, r0
  }
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b082      	sub	sp, #8
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	330c      	adds	r3, #12
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff f8d8 	bl	8002cf4 <_ZN8std_msgs4Bool6getMD5Ev>
 8003b44:	4603      	mov	r3, r0
  }
 8003b46:	4618      	mov	r0, r3
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
    return configured_;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
  };
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <_GLOBAL__sub_I_bno>:
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003b70:	2001      	movs	r0, #1
 8003b72:	f7ff ff7d 	bl	8003a70 <_Z41__static_initialization_and_destruction_0ii>
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b7e:	2300      	movs	r3, #0
 8003b80:	607b      	str	r3, [r7, #4]
 8003b82:	4b10      	ldr	r3, [pc, #64]	@ (8003bc4 <HAL_MspInit+0x4c>)
 8003b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b86:	4a0f      	ldr	r2, [pc, #60]	@ (8003bc4 <HAL_MspInit+0x4c>)
 8003b88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003bc4 <HAL_MspInit+0x4c>)
 8003b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b96:	607b      	str	r3, [r7, #4]
 8003b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	603b      	str	r3, [r7, #0]
 8003b9e:	4b09      	ldr	r3, [pc, #36]	@ (8003bc4 <HAL_MspInit+0x4c>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba2:	4a08      	ldr	r2, [pc, #32]	@ (8003bc4 <HAL_MspInit+0x4c>)
 8003ba4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003baa:	4b06      	ldr	r3, [pc, #24]	@ (8003bc4 <HAL_MspInit+0x4c>)
 8003bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bb2:	603b      	str	r3, [r7, #0]
 8003bb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40023800 	.word	0x40023800

08003bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003bcc:	bf00      	nop
 8003bce:	e7fd      	b.n	8003bcc <NMI_Handler+0x4>

08003bd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bd4:	bf00      	nop
 8003bd6:	e7fd      	b.n	8003bd4 <HardFault_Handler+0x4>

08003bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bdc:	bf00      	nop
 8003bde:	e7fd      	b.n	8003bdc <MemManage_Handler+0x4>

08003be0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003be4:	bf00      	nop
 8003be6:	e7fd      	b.n	8003be4 <BusFault_Handler+0x4>

08003be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bec:	bf00      	nop
 8003bee:	e7fd      	b.n	8003bec <UsageFault_Handler+0x4>

08003bf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003bf4:	bf00      	nop
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c02:	bf00      	nop
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c10:	bf00      	nop
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c1e:	f000 fc0d 	bl	800443c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c22:	bf00      	nop
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003c2c:	4802      	ldr	r0, [pc, #8]	@ (8003c38 <DMA1_Stream5_IRQHandler+0x10>)
 8003c2e:	f000 fef3 	bl	8004a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003c32:	bf00      	nop
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	20000bd4 	.word	0x20000bd4

08003c3c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003c40:	4802      	ldr	r0, [pc, #8]	@ (8003c4c <DMA1_Stream6_IRQHandler+0x10>)
 8003c42:	f000 fee9 	bl	8004a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003c46:	bf00      	nop
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	20000c34 	.word	0x20000c34

08003c50 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c54:	4802      	ldr	r0, [pc, #8]	@ (8003c60 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8003c56:	f003 f8ab 	bl	8006db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003c5a:	bf00      	nop
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	20000ab4 	.word	0x20000ab4

08003c64 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c68:	4802      	ldr	r0, [pc, #8]	@ (8003c74 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003c6a:	f003 f8a1 	bl	8006db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003c6e:	bf00      	nop
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	20000ab4 	.word	0x20000ab4

08003c78 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c7c:	4802      	ldr	r0, [pc, #8]	@ (8003c88 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8003c7e:	f003 f897 	bl	8006db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003c82:	bf00      	nop
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20000ab4 	.word	0x20000ab4

08003c8c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c90:	4802      	ldr	r0, [pc, #8]	@ (8003c9c <TIM1_CC_IRQHandler+0x10>)
 8003c92:	f003 f88d 	bl	8006db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003c96:	bf00      	nop
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	20000ab4 	.word	0x20000ab4

08003ca0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003ca4:	4802      	ldr	r0, [pc, #8]	@ (8003cb0 <USART2_IRQHandler+0x10>)
 8003ca6:	f003 fcf1 	bl	800768c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003caa:	bf00      	nop
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20000b8c 	.word	0x20000b8c

08003cb4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	617b      	str	r3, [r7, #20]
 8003cc4:	e00a      	b.n	8003cdc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003cc6:	f3af 8000 	nop.w
 8003cca:	4601      	mov	r1, r0
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	60ba      	str	r2, [r7, #8]
 8003cd2:	b2ca      	uxtb	r2, r1
 8003cd4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	dbf0      	blt.n	8003cc6 <_read+0x12>
  }

  return len;
 8003ce4:	687b      	ldr	r3, [r7, #4]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3718      	adds	r7, #24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b086      	sub	sp, #24
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	e009      	b.n	8003d14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	60ba      	str	r2, [r7, #8]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	3301      	adds	r3, #1
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	dbf1      	blt.n	8003d00 <_write+0x12>
  }
  return len;
 8003d1c:	687b      	ldr	r3, [r7, #4]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <_close>:

int _close(int file)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b083      	sub	sp, #12
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
 8003d46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d4e:	605a      	str	r2, [r3, #4]
  return 0;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <_isatty>:

int _isatty(int file)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d66:	2301      	movs	r3, #1
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
	...

08003d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d98:	4a14      	ldr	r2, [pc, #80]	@ (8003dec <_sbrk+0x5c>)
 8003d9a:	4b15      	ldr	r3, [pc, #84]	@ (8003df0 <_sbrk+0x60>)
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003da4:	4b13      	ldr	r3, [pc, #76]	@ (8003df4 <_sbrk+0x64>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d102      	bne.n	8003db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003dac:	4b11      	ldr	r3, [pc, #68]	@ (8003df4 <_sbrk+0x64>)
 8003dae:	4a12      	ldr	r2, [pc, #72]	@ (8003df8 <_sbrk+0x68>)
 8003db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003db2:	4b10      	ldr	r3, [pc, #64]	@ (8003df4 <_sbrk+0x64>)
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4413      	add	r3, r2
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d207      	bcs.n	8003dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003dc0:	f005 fd74 	bl	80098ac <__errno>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	220c      	movs	r2, #12
 8003dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003dce:	e009      	b.n	8003de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003dd0:	4b08      	ldr	r3, [pc, #32]	@ (8003df4 <_sbrk+0x64>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003dd6:	4b07      	ldr	r3, [pc, #28]	@ (8003df4 <_sbrk+0x64>)
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4413      	add	r3, r2
 8003dde:	4a05      	ldr	r2, [pc, #20]	@ (8003df4 <_sbrk+0x64>)
 8003de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003de2:	68fb      	ldr	r3, [r7, #12]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3718      	adds	r7, #24
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	20020000 	.word	0x20020000
 8003df0:	00000400 	.word	0x00000400
 8003df4:	20000ab0 	.word	0x20000ab0
 8003df8:	20000de8 	.word	0x20000de8

08003dfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e00:	4b06      	ldr	r3, [pc, #24]	@ (8003e1c <SystemInit+0x20>)
 8003e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e06:	4a05      	ldr	r2, [pc, #20]	@ (8003e1c <SystemInit+0x20>)
 8003e08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003e0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e10:	bf00      	nop
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	e000ed00 	.word	0xe000ed00

08003e20 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e26:	f107 0308 	add.w	r3, r7, #8
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	605a      	str	r2, [r3, #4]
 8003e30:	609a      	str	r2, [r3, #8]
 8003e32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e34:	463b      	mov	r3, r7
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003e3c:	4b1e      	ldr	r3, [pc, #120]	@ (8003eb8 <MX_TIM1_Init+0x98>)
 8003e3e:	4a1f      	ldr	r2, [pc, #124]	@ (8003ebc <MX_TIM1_Init+0x9c>)
 8003e40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8003e42:	4b1d      	ldr	r3, [pc, #116]	@ (8003eb8 <MX_TIM1_Init+0x98>)
 8003e44:	2263      	movs	r2, #99	@ 0x63
 8003e46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e48:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb8 <MX_TIM1_Init+0x98>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8003e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8003eb8 <MX_TIM1_Init+0x98>)
 8003e50:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003e54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e56:	4b18      	ldr	r3, [pc, #96]	@ (8003eb8 <MX_TIM1_Init+0x98>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e5c:	4b16      	ldr	r3, [pc, #88]	@ (8003eb8 <MX_TIM1_Init+0x98>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e62:	4b15      	ldr	r3, [pc, #84]	@ (8003eb8 <MX_TIM1_Init+0x98>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003e68:	4813      	ldr	r0, [pc, #76]	@ (8003eb8 <MX_TIM1_Init+0x98>)
 8003e6a:	f002 fe49 	bl	8006b00 <HAL_TIM_Base_Init>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003e74:	f7fd ff2a 	bl	8001ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003e7e:	f107 0308 	add.w	r3, r7, #8
 8003e82:	4619      	mov	r1, r3
 8003e84:	480c      	ldr	r0, [pc, #48]	@ (8003eb8 <MX_TIM1_Init+0x98>)
 8003e86:	f003 f883 	bl	8006f90 <HAL_TIM_ConfigClockSource>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003e90:	f7fd ff1c 	bl	8001ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e94:	2300      	movs	r3, #0
 8003e96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003e9c:	463b      	mov	r3, r7
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	4805      	ldr	r0, [pc, #20]	@ (8003eb8 <MX_TIM1_Init+0x98>)
 8003ea2:	f003 fa8b 	bl	80073bc <HAL_TIMEx_MasterConfigSynchronization>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003eac:	f7fd ff0e 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003eb0:	bf00      	nop
 8003eb2:	3718      	adds	r7, #24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	20000ab4 	.word	0x20000ab4
 8003ebc:	40010000 	.word	0x40010000

08003ec0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08c      	sub	sp, #48	@ 0x30
 8003ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003ec6:	f107 030c 	add.w	r3, r7, #12
 8003eca:	2224      	movs	r2, #36	@ 0x24
 8003ecc:	2100      	movs	r1, #0
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f005 fc9e 	bl	8009810 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ed4:	1d3b      	adds	r3, r7, #4
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003edc:	4b21      	ldr	r3, [pc, #132]	@ (8003f64 <MX_TIM2_Init+0xa4>)
 8003ede:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003ee2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003ee4:	4b1f      	ldr	r3, [pc, #124]	@ (8003f64 <MX_TIM2_Init+0xa4>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003eea:	4b1e      	ldr	r3, [pc, #120]	@ (8003f64 <MX_TIM2_Init+0xa4>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8003f64 <MX_TIM2_Init+0xa4>)
 8003ef2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ef6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8003f64 <MX_TIM2_Init+0xa4>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003efe:	4b19      	ldr	r3, [pc, #100]	@ (8003f64 <MX_TIM2_Init+0xa4>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003f04:	2301      	movs	r3, #1
 8003f06:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f10:	2300      	movs	r3, #0
 8003f12:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003f14:	2300      	movs	r3, #0
 8003f16:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f20:	2300      	movs	r3, #0
 8003f22:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003f24:	2300      	movs	r3, #0
 8003f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003f28:	f107 030c 	add.w	r3, r7, #12
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	480d      	ldr	r0, [pc, #52]	@ (8003f64 <MX_TIM2_Init+0xa4>)
 8003f30:	f002 fe98 	bl	8006c64 <HAL_TIM_Encoder_Init>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003f3a:	f7fd fec7 	bl	8001ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f42:	2300      	movs	r3, #0
 8003f44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003f46:	1d3b      	adds	r3, r7, #4
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4806      	ldr	r0, [pc, #24]	@ (8003f64 <MX_TIM2_Init+0xa4>)
 8003f4c:	f003 fa36 	bl	80073bc <HAL_TIMEx_MasterConfigSynchronization>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003f56:	f7fd feb9 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003f5a:	bf00      	nop
 8003f5c:	3730      	adds	r7, #48	@ 0x30
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	20000afc 	.word	0x20000afc

08003f68 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b08c      	sub	sp, #48	@ 0x30
 8003f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003f6e:	f107 030c 	add.w	r3, r7, #12
 8003f72:	2224      	movs	r2, #36	@ 0x24
 8003f74:	2100      	movs	r1, #0
 8003f76:	4618      	mov	r0, r3
 8003f78:	f005 fc4a 	bl	8009810 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f7c:	1d3b      	adds	r3, r7, #4
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003f84:	4b20      	ldr	r3, [pc, #128]	@ (8004008 <MX_TIM3_Init+0xa0>)
 8003f86:	4a21      	ldr	r2, [pc, #132]	@ (800400c <MX_TIM3_Init+0xa4>)
 8003f88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003f8a:	4b1f      	ldr	r3, [pc, #124]	@ (8004008 <MX_TIM3_Init+0xa0>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f90:	4b1d      	ldr	r3, [pc, #116]	@ (8004008 <MX_TIM3_Init+0xa0>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003f96:	4b1c      	ldr	r3, [pc, #112]	@ (8004008 <MX_TIM3_Init+0xa0>)
 8003f98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f9c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8004008 <MX_TIM3_Init+0xa0>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fa4:	4b18      	ldr	r3, [pc, #96]	@ (8004008 <MX_TIM3_Init+0xa0>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003faa:	2301      	movs	r3, #1
 8003fac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003fce:	f107 030c 	add.w	r3, r7, #12
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	480c      	ldr	r0, [pc, #48]	@ (8004008 <MX_TIM3_Init+0xa0>)
 8003fd6:	f002 fe45 	bl	8006c64 <HAL_TIM_Encoder_Init>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003fe0:	f7fd fe74 	bl	8001ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003fec:	1d3b      	adds	r3, r7, #4
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4805      	ldr	r0, [pc, #20]	@ (8004008 <MX_TIM3_Init+0xa0>)
 8003ff2:	f003 f9e3 	bl	80073bc <HAL_TIMEx_MasterConfigSynchronization>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003ffc:	f7fd fe66 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004000:	bf00      	nop
 8004002:	3730      	adds	r7, #48	@ 0x30
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	20000b44 	.word	0x20000b44
 800400c:	40000400 	.word	0x40000400

08004010 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a1a      	ldr	r2, [pc, #104]	@ (8004088 <HAL_TIM_Base_MspInit+0x78>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d12d      	bne.n	800407e <HAL_TIM_Base_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004022:	2300      	movs	r3, #0
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	4b19      	ldr	r3, [pc, #100]	@ (800408c <HAL_TIM_Base_MspInit+0x7c>)
 8004028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402a:	4a18      	ldr	r2, [pc, #96]	@ (800408c <HAL_TIM_Base_MspInit+0x7c>)
 800402c:	f043 0301 	orr.w	r3, r3, #1
 8004030:	6453      	str	r3, [r2, #68]	@ 0x44
 8004032:	4b16      	ldr	r3, [pc, #88]	@ (800408c <HAL_TIM_Base_MspInit+0x7c>)
 8004034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	60fb      	str	r3, [r7, #12]
 800403c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800403e:	2200      	movs	r2, #0
 8004040:	2100      	movs	r1, #0
 8004042:	2018      	movs	r0, #24
 8004044:	f000 fb19 	bl	800467a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004048:	2018      	movs	r0, #24
 800404a:	f000 fb32 	bl	80046b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800404e:	2200      	movs	r2, #0
 8004050:	2100      	movs	r1, #0
 8004052:	2019      	movs	r0, #25
 8004054:	f000 fb11 	bl	800467a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004058:	2019      	movs	r0, #25
 800405a:	f000 fb2a 	bl	80046b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800405e:	2200      	movs	r2, #0
 8004060:	2100      	movs	r1, #0
 8004062:	201a      	movs	r0, #26
 8004064:	f000 fb09 	bl	800467a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004068:	201a      	movs	r0, #26
 800406a:	f000 fb22 	bl	80046b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800406e:	2200      	movs	r2, #0
 8004070:	2100      	movs	r1, #0
 8004072:	201b      	movs	r0, #27
 8004074:	f000 fb01 	bl	800467a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004078:	201b      	movs	r0, #27
 800407a:	f000 fb1a 	bl	80046b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800407e:	bf00      	nop
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	40010000 	.word	0x40010000
 800408c:	40023800 	.word	0x40023800

08004090 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b08c      	sub	sp, #48	@ 0x30
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004098:	f107 031c 	add.w	r3, r7, #28
 800409c:	2200      	movs	r2, #0
 800409e:	601a      	str	r2, [r3, #0]
 80040a0:	605a      	str	r2, [r3, #4]
 80040a2:	609a      	str	r2, [r3, #8]
 80040a4:	60da      	str	r2, [r3, #12]
 80040a6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040b0:	d12c      	bne.n	800410c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040b2:	2300      	movs	r3, #0
 80040b4:	61bb      	str	r3, [r7, #24]
 80040b6:	4b30      	ldr	r3, [pc, #192]	@ (8004178 <HAL_TIM_Encoder_MspInit+0xe8>)
 80040b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ba:	4a2f      	ldr	r2, [pc, #188]	@ (8004178 <HAL_TIM_Encoder_MspInit+0xe8>)
 80040bc:	f043 0301 	orr.w	r3, r3, #1
 80040c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80040c2:	4b2d      	ldr	r3, [pc, #180]	@ (8004178 <HAL_TIM_Encoder_MspInit+0xe8>)
 80040c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	61bb      	str	r3, [r7, #24]
 80040cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ce:	2300      	movs	r3, #0
 80040d0:	617b      	str	r3, [r7, #20]
 80040d2:	4b29      	ldr	r3, [pc, #164]	@ (8004178 <HAL_TIM_Encoder_MspInit+0xe8>)
 80040d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d6:	4a28      	ldr	r2, [pc, #160]	@ (8004178 <HAL_TIM_Encoder_MspInit+0xe8>)
 80040d8:	f043 0301 	orr.w	r3, r3, #1
 80040dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80040de:	4b26      	ldr	r3, [pc, #152]	@ (8004178 <HAL_TIM_Encoder_MspInit+0xe8>)
 80040e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	617b      	str	r3, [r7, #20]
 80040e8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80040ea:	2303      	movs	r3, #3
 80040ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ee:	2302      	movs	r3, #2
 80040f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040f6:	2300      	movs	r3, #0
 80040f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80040fa:	2301      	movs	r3, #1
 80040fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040fe:	f107 031c 	add.w	r3, r7, #28
 8004102:	4619      	mov	r1, r3
 8004104:	481d      	ldr	r0, [pc, #116]	@ (800417c <HAL_TIM_Encoder_MspInit+0xec>)
 8004106:	f000 fef1 	bl	8004eec <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800410a:	e030      	b.n	800416e <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM3)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a1b      	ldr	r2, [pc, #108]	@ (8004180 <HAL_TIM_Encoder_MspInit+0xf0>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d12b      	bne.n	800416e <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004116:	2300      	movs	r3, #0
 8004118:	613b      	str	r3, [r7, #16]
 800411a:	4b17      	ldr	r3, [pc, #92]	@ (8004178 <HAL_TIM_Encoder_MspInit+0xe8>)
 800411c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411e:	4a16      	ldr	r2, [pc, #88]	@ (8004178 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004120:	f043 0302 	orr.w	r3, r3, #2
 8004124:	6413      	str	r3, [r2, #64]	@ 0x40
 8004126:	4b14      	ldr	r3, [pc, #80]	@ (8004178 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	613b      	str	r3, [r7, #16]
 8004130:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	4b10      	ldr	r3, [pc, #64]	@ (8004178 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413a:	4a0f      	ldr	r2, [pc, #60]	@ (8004178 <HAL_TIM_Encoder_MspInit+0xe8>)
 800413c:	f043 0301 	orr.w	r3, r3, #1
 8004140:	6313      	str	r3, [r2, #48]	@ 0x30
 8004142:	4b0d      	ldr	r3, [pc, #52]	@ (8004178 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800414e:	23c0      	movs	r3, #192	@ 0xc0
 8004150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004152:	2302      	movs	r3, #2
 8004154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004156:	2300      	movs	r3, #0
 8004158:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800415a:	2300      	movs	r3, #0
 800415c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800415e:	2302      	movs	r3, #2
 8004160:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004162:	f107 031c 	add.w	r3, r7, #28
 8004166:	4619      	mov	r1, r3
 8004168:	4804      	ldr	r0, [pc, #16]	@ (800417c <HAL_TIM_Encoder_MspInit+0xec>)
 800416a:	f000 febf 	bl	8004eec <HAL_GPIO_Init>
}
 800416e:	bf00      	nop
 8004170:	3730      	adds	r7, #48	@ 0x30
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40023800 	.word	0x40023800
 800417c:	40020000 	.word	0x40020000
 8004180:	40000400 	.word	0x40000400

08004184 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004188:	4b11      	ldr	r3, [pc, #68]	@ (80041d0 <MX_USART2_UART_Init+0x4c>)
 800418a:	4a12      	ldr	r2, [pc, #72]	@ (80041d4 <MX_USART2_UART_Init+0x50>)
 800418c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57000;
 800418e:	4b10      	ldr	r3, [pc, #64]	@ (80041d0 <MX_USART2_UART_Init+0x4c>)
 8004190:	f64d 62a8 	movw	r2, #57000	@ 0xdea8
 8004194:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004196:	4b0e      	ldr	r3, [pc, #56]	@ (80041d0 <MX_USART2_UART_Init+0x4c>)
 8004198:	2200      	movs	r2, #0
 800419a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800419c:	4b0c      	ldr	r3, [pc, #48]	@ (80041d0 <MX_USART2_UART_Init+0x4c>)
 800419e:	2200      	movs	r2, #0
 80041a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80041a2:	4b0b      	ldr	r3, [pc, #44]	@ (80041d0 <MX_USART2_UART_Init+0x4c>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80041a8:	4b09      	ldr	r3, [pc, #36]	@ (80041d0 <MX_USART2_UART_Init+0x4c>)
 80041aa:	220c      	movs	r2, #12
 80041ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041ae:	4b08      	ldr	r3, [pc, #32]	@ (80041d0 <MX_USART2_UART_Init+0x4c>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80041b4:	4b06      	ldr	r3, [pc, #24]	@ (80041d0 <MX_USART2_UART_Init+0x4c>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80041ba:	4805      	ldr	r0, [pc, #20]	@ (80041d0 <MX_USART2_UART_Init+0x4c>)
 80041bc:	f003 f980 	bl	80074c0 <HAL_UART_Init>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80041c6:	f7fd fd81 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80041ca:	bf00      	nop
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	20000b8c 	.word	0x20000b8c
 80041d4:	40004400 	.word	0x40004400

080041d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b08a      	sub	sp, #40	@ 0x28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041e0:	f107 0314 	add.w	r3, r7, #20
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	605a      	str	r2, [r3, #4]
 80041ea:	609a      	str	r2, [r3, #8]
 80041ec:	60da      	str	r2, [r3, #12]
 80041ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a4c      	ldr	r2, [pc, #304]	@ (8004328 <HAL_UART_MspInit+0x150>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	f040 8091 	bne.w	800431e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80041fc:	2300      	movs	r3, #0
 80041fe:	613b      	str	r3, [r7, #16]
 8004200:	4b4a      	ldr	r3, [pc, #296]	@ (800432c <HAL_UART_MspInit+0x154>)
 8004202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004204:	4a49      	ldr	r2, [pc, #292]	@ (800432c <HAL_UART_MspInit+0x154>)
 8004206:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800420a:	6413      	str	r3, [r2, #64]	@ 0x40
 800420c:	4b47      	ldr	r3, [pc, #284]	@ (800432c <HAL_UART_MspInit+0x154>)
 800420e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004214:	613b      	str	r3, [r7, #16]
 8004216:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004218:	2300      	movs	r3, #0
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	4b43      	ldr	r3, [pc, #268]	@ (800432c <HAL_UART_MspInit+0x154>)
 800421e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004220:	4a42      	ldr	r2, [pc, #264]	@ (800432c <HAL_UART_MspInit+0x154>)
 8004222:	f043 0301 	orr.w	r3, r3, #1
 8004226:	6313      	str	r3, [r2, #48]	@ 0x30
 8004228:	4b40      	ldr	r3, [pc, #256]	@ (800432c <HAL_UART_MspInit+0x154>)
 800422a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004234:	230c      	movs	r3, #12
 8004236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004238:	2302      	movs	r3, #2
 800423a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800423c:	2300      	movs	r3, #0
 800423e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004240:	2303      	movs	r3, #3
 8004242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004244:	2307      	movs	r3, #7
 8004246:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004248:	f107 0314 	add.w	r3, r7, #20
 800424c:	4619      	mov	r1, r3
 800424e:	4838      	ldr	r0, [pc, #224]	@ (8004330 <HAL_UART_MspInit+0x158>)
 8004250:	f000 fe4c 	bl	8004eec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004254:	4b37      	ldr	r3, [pc, #220]	@ (8004334 <HAL_UART_MspInit+0x15c>)
 8004256:	4a38      	ldr	r2, [pc, #224]	@ (8004338 <HAL_UART_MspInit+0x160>)
 8004258:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800425a:	4b36      	ldr	r3, [pc, #216]	@ (8004334 <HAL_UART_MspInit+0x15c>)
 800425c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004260:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004262:	4b34      	ldr	r3, [pc, #208]	@ (8004334 <HAL_UART_MspInit+0x15c>)
 8004264:	2200      	movs	r2, #0
 8004266:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004268:	4b32      	ldr	r3, [pc, #200]	@ (8004334 <HAL_UART_MspInit+0x15c>)
 800426a:	2200      	movs	r2, #0
 800426c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800426e:	4b31      	ldr	r3, [pc, #196]	@ (8004334 <HAL_UART_MspInit+0x15c>)
 8004270:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004274:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004276:	4b2f      	ldr	r3, [pc, #188]	@ (8004334 <HAL_UART_MspInit+0x15c>)
 8004278:	2200      	movs	r2, #0
 800427a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800427c:	4b2d      	ldr	r3, [pc, #180]	@ (8004334 <HAL_UART_MspInit+0x15c>)
 800427e:	2200      	movs	r2, #0
 8004280:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004282:	4b2c      	ldr	r3, [pc, #176]	@ (8004334 <HAL_UART_MspInit+0x15c>)
 8004284:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004288:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800428a:	4b2a      	ldr	r3, [pc, #168]	@ (8004334 <HAL_UART_MspInit+0x15c>)
 800428c:	2200      	movs	r2, #0
 800428e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004290:	4b28      	ldr	r3, [pc, #160]	@ (8004334 <HAL_UART_MspInit+0x15c>)
 8004292:	2200      	movs	r2, #0
 8004294:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004296:	4827      	ldr	r0, [pc, #156]	@ (8004334 <HAL_UART_MspInit+0x15c>)
 8004298:	f000 fa26 	bl	80046e8 <HAL_DMA_Init>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80042a2:	f7fd fd13 	bl	8001ccc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a22      	ldr	r2, [pc, #136]	@ (8004334 <HAL_UART_MspInit+0x15c>)
 80042aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80042ac:	4a21      	ldr	r2, [pc, #132]	@ (8004334 <HAL_UART_MspInit+0x15c>)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80042b2:	4b22      	ldr	r3, [pc, #136]	@ (800433c <HAL_UART_MspInit+0x164>)
 80042b4:	4a22      	ldr	r2, [pc, #136]	@ (8004340 <HAL_UART_MspInit+0x168>)
 80042b6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80042b8:	4b20      	ldr	r3, [pc, #128]	@ (800433c <HAL_UART_MspInit+0x164>)
 80042ba:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80042be:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80042c0:	4b1e      	ldr	r3, [pc, #120]	@ (800433c <HAL_UART_MspInit+0x164>)
 80042c2:	2240      	movs	r2, #64	@ 0x40
 80042c4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042c6:	4b1d      	ldr	r3, [pc, #116]	@ (800433c <HAL_UART_MspInit+0x164>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80042cc:	4b1b      	ldr	r3, [pc, #108]	@ (800433c <HAL_UART_MspInit+0x164>)
 80042ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80042d2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042d4:	4b19      	ldr	r3, [pc, #100]	@ (800433c <HAL_UART_MspInit+0x164>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042da:	4b18      	ldr	r3, [pc, #96]	@ (800433c <HAL_UART_MspInit+0x164>)
 80042dc:	2200      	movs	r2, #0
 80042de:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80042e0:	4b16      	ldr	r3, [pc, #88]	@ (800433c <HAL_UART_MspInit+0x164>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80042e6:	4b15      	ldr	r3, [pc, #84]	@ (800433c <HAL_UART_MspInit+0x164>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80042ec:	4b13      	ldr	r3, [pc, #76]	@ (800433c <HAL_UART_MspInit+0x164>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80042f2:	4812      	ldr	r0, [pc, #72]	@ (800433c <HAL_UART_MspInit+0x164>)
 80042f4:	f000 f9f8 	bl	80046e8 <HAL_DMA_Init>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80042fe:	f7fd fce5 	bl	8001ccc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a0d      	ldr	r2, [pc, #52]	@ (800433c <HAL_UART_MspInit+0x164>)
 8004306:	639a      	str	r2, [r3, #56]	@ 0x38
 8004308:	4a0c      	ldr	r2, [pc, #48]	@ (800433c <HAL_UART_MspInit+0x164>)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800430e:	2200      	movs	r2, #0
 8004310:	2100      	movs	r1, #0
 8004312:	2026      	movs	r0, #38	@ 0x26
 8004314:	f000 f9b1 	bl	800467a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004318:	2026      	movs	r0, #38	@ 0x26
 800431a:	f000 f9ca 	bl	80046b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800431e:	bf00      	nop
 8004320:	3728      	adds	r7, #40	@ 0x28
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	40004400 	.word	0x40004400
 800432c:	40023800 	.word	0x40023800
 8004330:	40020000 	.word	0x40020000
 8004334:	20000bd4 	.word	0x20000bd4
 8004338:	40026088 	.word	0x40026088
 800433c:	20000c34 	.word	0x20000c34
 8004340:	400260a0 	.word	0x400260a0

08004344 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004344:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800437c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004348:	f7ff fd58 	bl	8003dfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800434c:	480c      	ldr	r0, [pc, #48]	@ (8004380 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800434e:	490d      	ldr	r1, [pc, #52]	@ (8004384 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004350:	4a0d      	ldr	r2, [pc, #52]	@ (8004388 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004354:	e002      	b.n	800435c <LoopCopyDataInit>

08004356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800435a:	3304      	adds	r3, #4

0800435c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800435c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800435e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004360:	d3f9      	bcc.n	8004356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004362:	4a0a      	ldr	r2, [pc, #40]	@ (800438c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004364:	4c0a      	ldr	r4, [pc, #40]	@ (8004390 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004368:	e001      	b.n	800436e <LoopFillZerobss>

0800436a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800436a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800436c:	3204      	adds	r2, #4

0800436e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800436e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004370:	d3fb      	bcc.n	800436a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004372:	f005 faa1 	bl	80098b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004376:	f7fd fa19 	bl	80017ac <main>
  bx  lr    
 800437a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800437c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004384:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8004388:	0800a918 	.word	0x0800a918
  ldr r2, =_sbss
 800438c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8004390:	20000de4 	.word	0x20000de4

08004394 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004394:	e7fe      	b.n	8004394 <ADC_IRQHandler>
	...

08004398 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800439c:	4b0e      	ldr	r3, [pc, #56]	@ (80043d8 <HAL_Init+0x40>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a0d      	ldr	r2, [pc, #52]	@ (80043d8 <HAL_Init+0x40>)
 80043a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043a8:	4b0b      	ldr	r3, [pc, #44]	@ (80043d8 <HAL_Init+0x40>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a0a      	ldr	r2, [pc, #40]	@ (80043d8 <HAL_Init+0x40>)
 80043ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80043b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043b4:	4b08      	ldr	r3, [pc, #32]	@ (80043d8 <HAL_Init+0x40>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a07      	ldr	r2, [pc, #28]	@ (80043d8 <HAL_Init+0x40>)
 80043ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043c0:	2003      	movs	r0, #3
 80043c2:	f000 f94f 	bl	8004664 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043c6:	200f      	movs	r0, #15
 80043c8:	f000 f808 	bl	80043dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043cc:	f7ff fbd4 	bl	8003b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	40023c00 	.word	0x40023c00

080043dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043e4:	4b12      	ldr	r3, [pc, #72]	@ (8004430 <HAL_InitTick+0x54>)
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	4b12      	ldr	r3, [pc, #72]	@ (8004434 <HAL_InitTick+0x58>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	4619      	mov	r1, r3
 80043ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80043f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 f967 	bl	80046ce <HAL_SYSTICK_Config>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e00e      	b.n	8004428 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b0f      	cmp	r3, #15
 800440e:	d80a      	bhi.n	8004426 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004410:	2200      	movs	r2, #0
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004418:	f000 f92f 	bl	800467a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800441c:	4a06      	ldr	r2, [pc, #24]	@ (8004438 <HAL_InitTick+0x5c>)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	e000      	b.n	8004428 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
}
 8004428:	4618      	mov	r0, r3
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	2000000c 	.word	0x2000000c
 8004434:	20000014 	.word	0x20000014
 8004438:	20000010 	.word	0x20000010

0800443c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004440:	4b06      	ldr	r3, [pc, #24]	@ (800445c <HAL_IncTick+0x20>)
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	461a      	mov	r2, r3
 8004446:	4b06      	ldr	r3, [pc, #24]	@ (8004460 <HAL_IncTick+0x24>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4413      	add	r3, r2
 800444c:	4a04      	ldr	r2, [pc, #16]	@ (8004460 <HAL_IncTick+0x24>)
 800444e:	6013      	str	r3, [r2, #0]
}
 8004450:	bf00      	nop
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	20000014 	.word	0x20000014
 8004460:	20000c94 	.word	0x20000c94

08004464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  return uwTick;
 8004468:	4b03      	ldr	r3, [pc, #12]	@ (8004478 <HAL_GetTick+0x14>)
 800446a:	681b      	ldr	r3, [r3, #0]
}
 800446c:	4618      	mov	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	20000c94 	.word	0x20000c94

0800447c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004484:	f7ff ffee 	bl	8004464 <HAL_GetTick>
 8004488:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004494:	d005      	beq.n	80044a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004496:	4b0a      	ldr	r3, [pc, #40]	@ (80044c0 <HAL_Delay+0x44>)
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	461a      	mov	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4413      	add	r3, r2
 80044a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80044a2:	bf00      	nop
 80044a4:	f7ff ffde 	bl	8004464 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d8f7      	bhi.n	80044a4 <HAL_Delay+0x28>
  {
  }
}
 80044b4:	bf00      	nop
 80044b6:	bf00      	nop
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	20000014 	.word	0x20000014

080044c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004508 <__NVIC_SetPriorityGrouping+0x44>)
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80044e0:	4013      	ands	r3, r2
 80044e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80044f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044f6:	4a04      	ldr	r2, [pc, #16]	@ (8004508 <__NVIC_SetPriorityGrouping+0x44>)
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	60d3      	str	r3, [r2, #12]
}
 80044fc:	bf00      	nop
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	e000ed00 	.word	0xe000ed00

0800450c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004510:	4b04      	ldr	r3, [pc, #16]	@ (8004524 <__NVIC_GetPriorityGrouping+0x18>)
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	0a1b      	lsrs	r3, r3, #8
 8004516:	f003 0307 	and.w	r3, r3, #7
}
 800451a:	4618      	mov	r0, r3
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	e000ed00 	.word	0xe000ed00

08004528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	4603      	mov	r3, r0
 8004530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004536:	2b00      	cmp	r3, #0
 8004538:	db0b      	blt.n	8004552 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800453a:	79fb      	ldrb	r3, [r7, #7]
 800453c:	f003 021f 	and.w	r2, r3, #31
 8004540:	4907      	ldr	r1, [pc, #28]	@ (8004560 <__NVIC_EnableIRQ+0x38>)
 8004542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004546:	095b      	lsrs	r3, r3, #5
 8004548:	2001      	movs	r0, #1
 800454a:	fa00 f202 	lsl.w	r2, r0, r2
 800454e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	e000e100 	.word	0xe000e100

08004564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	4603      	mov	r3, r0
 800456c:	6039      	str	r1, [r7, #0]
 800456e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004574:	2b00      	cmp	r3, #0
 8004576:	db0a      	blt.n	800458e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	b2da      	uxtb	r2, r3
 800457c:	490c      	ldr	r1, [pc, #48]	@ (80045b0 <__NVIC_SetPriority+0x4c>)
 800457e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004582:	0112      	lsls	r2, r2, #4
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	440b      	add	r3, r1
 8004588:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800458c:	e00a      	b.n	80045a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	b2da      	uxtb	r2, r3
 8004592:	4908      	ldr	r1, [pc, #32]	@ (80045b4 <__NVIC_SetPriority+0x50>)
 8004594:	79fb      	ldrb	r3, [r7, #7]
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	3b04      	subs	r3, #4
 800459c:	0112      	lsls	r2, r2, #4
 800459e:	b2d2      	uxtb	r2, r2
 80045a0:	440b      	add	r3, r1
 80045a2:	761a      	strb	r2, [r3, #24]
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	e000e100 	.word	0xe000e100
 80045b4:	e000ed00 	.word	0xe000ed00

080045b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b089      	sub	sp, #36	@ 0x24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f003 0307 	and.w	r3, r3, #7
 80045ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	f1c3 0307 	rsb	r3, r3, #7
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	bf28      	it	cs
 80045d6:	2304      	movcs	r3, #4
 80045d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	3304      	adds	r3, #4
 80045de:	2b06      	cmp	r3, #6
 80045e0:	d902      	bls.n	80045e8 <NVIC_EncodePriority+0x30>
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	3b03      	subs	r3, #3
 80045e6:	e000      	b.n	80045ea <NVIC_EncodePriority+0x32>
 80045e8:	2300      	movs	r3, #0
 80045ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	43da      	mvns	r2, r3
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	401a      	ands	r2, r3
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004600:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	fa01 f303 	lsl.w	r3, r1, r3
 800460a:	43d9      	mvns	r1, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004610:	4313      	orrs	r3, r2
         );
}
 8004612:	4618      	mov	r0, r3
 8004614:	3724      	adds	r7, #36	@ 0x24
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
	...

08004620 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3b01      	subs	r3, #1
 800462c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004630:	d301      	bcc.n	8004636 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004632:	2301      	movs	r3, #1
 8004634:	e00f      	b.n	8004656 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004636:	4a0a      	ldr	r2, [pc, #40]	@ (8004660 <SysTick_Config+0x40>)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3b01      	subs	r3, #1
 800463c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800463e:	210f      	movs	r1, #15
 8004640:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004644:	f7ff ff8e 	bl	8004564 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004648:	4b05      	ldr	r3, [pc, #20]	@ (8004660 <SysTick_Config+0x40>)
 800464a:	2200      	movs	r2, #0
 800464c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800464e:	4b04      	ldr	r3, [pc, #16]	@ (8004660 <SysTick_Config+0x40>)
 8004650:	2207      	movs	r2, #7
 8004652:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	e000e010 	.word	0xe000e010

08004664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f7ff ff29 	bl	80044c4 <__NVIC_SetPriorityGrouping>
}
 8004672:	bf00      	nop
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800467a:	b580      	push	{r7, lr}
 800467c:	b086      	sub	sp, #24
 800467e:	af00      	add	r7, sp, #0
 8004680:	4603      	mov	r3, r0
 8004682:	60b9      	str	r1, [r7, #8]
 8004684:	607a      	str	r2, [r7, #4]
 8004686:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004688:	2300      	movs	r3, #0
 800468a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800468c:	f7ff ff3e 	bl	800450c <__NVIC_GetPriorityGrouping>
 8004690:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	68b9      	ldr	r1, [r7, #8]
 8004696:	6978      	ldr	r0, [r7, #20]
 8004698:	f7ff ff8e 	bl	80045b8 <NVIC_EncodePriority>
 800469c:	4602      	mov	r2, r0
 800469e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046a2:	4611      	mov	r1, r2
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff ff5d 	bl	8004564 <__NVIC_SetPriority>
}
 80046aa:	bf00      	nop
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b082      	sub	sp, #8
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	4603      	mov	r3, r0
 80046ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff ff31 	bl	8004528 <__NVIC_EnableIRQ>
}
 80046c6:	bf00      	nop
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b082      	sub	sp, #8
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7ff ffa2 	bl	8004620 <SysTick_Config>
 80046dc:	4603      	mov	r3, r0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80046f4:	f7ff feb6 	bl	8004464 <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e099      	b.n	8004838 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0201 	bic.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004724:	e00f      	b.n	8004746 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004726:	f7ff fe9d 	bl	8004464 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b05      	cmp	r3, #5
 8004732:	d908      	bls.n	8004746 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2220      	movs	r2, #32
 8004738:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2203      	movs	r2, #3
 800473e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e078      	b.n	8004838 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1e8      	bne.n	8004726 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	4b38      	ldr	r3, [pc, #224]	@ (8004840 <HAL_DMA_Init+0x158>)
 8004760:	4013      	ands	r3, r2
 8004762:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004772:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800477e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800478a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	4313      	orrs	r3, r2
 8004796:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479c:	2b04      	cmp	r3, #4
 800479e:	d107      	bne.n	80047b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a8:	4313      	orrs	r3, r2
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	f023 0307 	bic.w	r3, r3, #7
 80047c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d117      	bne.n	800480a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00e      	beq.n	800480a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 fb01 	bl	8004df4 <DMA_CheckFifoParam>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d008      	beq.n	800480a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2240      	movs	r2, #64	@ 0x40
 80047fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004806:	2301      	movs	r3, #1
 8004808:	e016      	b.n	8004838 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 fab8 	bl	8004d88 <DMA_CalcBaseAndBitshift>
 8004818:	4603      	mov	r3, r0
 800481a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004820:	223f      	movs	r2, #63	@ 0x3f
 8004822:	409a      	lsls	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3718      	adds	r7, #24
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	f010803f 	.word	0xf010803f

08004844 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
 8004850:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004852:	2300      	movs	r3, #0
 8004854:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800485a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004862:	2b01      	cmp	r3, #1
 8004864:	d101      	bne.n	800486a <HAL_DMA_Start_IT+0x26>
 8004866:	2302      	movs	r3, #2
 8004868:	e040      	b.n	80048ec <HAL_DMA_Start_IT+0xa8>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b01      	cmp	r3, #1
 800487c:	d12f      	bne.n	80048de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2202      	movs	r2, #2
 8004882:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	68b9      	ldr	r1, [r7, #8]
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f000 fa4a 	bl	8004d2c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800489c:	223f      	movs	r2, #63	@ 0x3f
 800489e:	409a      	lsls	r2, r3
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0216 	orr.w	r2, r2, #22
 80048b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d007      	beq.n	80048cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0208 	orr.w	r2, r2, #8
 80048ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f042 0201 	orr.w	r2, r2, #1
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	e005      	b.n	80048ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80048e6:	2302      	movs	r3, #2
 80048e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80048ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3718      	adds	r7, #24
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004900:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004902:	f7ff fdaf 	bl	8004464 <HAL_GetTick>
 8004906:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d008      	beq.n	8004926 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2280      	movs	r2, #128	@ 0x80
 8004918:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e052      	b.n	80049cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 0216 	bic.w	r2, r2, #22
 8004934:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	695a      	ldr	r2, [r3, #20]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004944:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494a:	2b00      	cmp	r3, #0
 800494c:	d103      	bne.n	8004956 <HAL_DMA_Abort+0x62>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004952:	2b00      	cmp	r3, #0
 8004954:	d007      	beq.n	8004966 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0208 	bic.w	r2, r2, #8
 8004964:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f022 0201 	bic.w	r2, r2, #1
 8004974:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004976:	e013      	b.n	80049a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004978:	f7ff fd74 	bl	8004464 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b05      	cmp	r3, #5
 8004984:	d90c      	bls.n	80049a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2220      	movs	r2, #32
 800498a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2203      	movs	r2, #3
 8004990:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e015      	b.n	80049cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1e4      	bne.n	8004978 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049b2:	223f      	movs	r2, #63	@ 0x3f
 80049b4:	409a      	lsls	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d004      	beq.n	80049f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2280      	movs	r2, #128	@ 0x80
 80049ec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e00c      	b.n	8004a0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2205      	movs	r2, #5
 80049f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 0201 	bic.w	r2, r2, #1
 8004a08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a24:	4b8e      	ldr	r3, [pc, #568]	@ (8004c60 <HAL_DMA_IRQHandler+0x248>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a8e      	ldr	r2, [pc, #568]	@ (8004c64 <HAL_DMA_IRQHandler+0x24c>)
 8004a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2e:	0a9b      	lsrs	r3, r3, #10
 8004a30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a42:	2208      	movs	r2, #8
 8004a44:	409a      	lsls	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d01a      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d013      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0204 	bic.w	r2, r2, #4
 8004a6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a70:	2208      	movs	r2, #8
 8004a72:	409a      	lsls	r2, r3
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a7c:	f043 0201 	orr.w	r2, r3, #1
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a88:	2201      	movs	r2, #1
 8004a8a:	409a      	lsls	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d012      	beq.n	8004aba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00b      	beq.n	8004aba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	409a      	lsls	r2, r3
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ab2:	f043 0202 	orr.w	r2, r3, #2
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004abe:	2204      	movs	r2, #4
 8004ac0:	409a      	lsls	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d012      	beq.n	8004af0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00b      	beq.n	8004af0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004adc:	2204      	movs	r2, #4
 8004ade:	409a      	lsls	r2, r3
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ae8:	f043 0204 	orr.w	r2, r3, #4
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af4:	2210      	movs	r2, #16
 8004af6:	409a      	lsls	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4013      	ands	r3, r2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d043      	beq.n	8004b88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0308 	and.w	r3, r3, #8
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d03c      	beq.n	8004b88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b12:	2210      	movs	r2, #16
 8004b14:	409a      	lsls	r2, r3
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d018      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d108      	bne.n	8004b48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d024      	beq.n	8004b88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	4798      	blx	r3
 8004b46:	e01f      	b.n	8004b88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d01b      	beq.n	8004b88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	4798      	blx	r3
 8004b58:	e016      	b.n	8004b88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d107      	bne.n	8004b78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 0208 	bic.w	r2, r2, #8
 8004b76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d003      	beq.n	8004b88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	409a      	lsls	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4013      	ands	r3, r2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 808f 	beq.w	8004cb8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0310 	and.w	r3, r3, #16
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 8087 	beq.w	8004cb8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bae:	2220      	movs	r2, #32
 8004bb0:	409a      	lsls	r2, r3
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b05      	cmp	r3, #5
 8004bc0:	d136      	bne.n	8004c30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 0216 	bic.w	r2, r2, #22
 8004bd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	695a      	ldr	r2, [r3, #20]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004be0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d103      	bne.n	8004bf2 <HAL_DMA_IRQHandler+0x1da>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d007      	beq.n	8004c02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0208 	bic.w	r2, r2, #8
 8004c00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c06:	223f      	movs	r2, #63	@ 0x3f
 8004c08:	409a      	lsls	r2, r3
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d07e      	beq.n	8004d24 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	4798      	blx	r3
        }
        return;
 8004c2e:	e079      	b.n	8004d24 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d01d      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10d      	bne.n	8004c68 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d031      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	4798      	blx	r3
 8004c5c:	e02c      	b.n	8004cb8 <HAL_DMA_IRQHandler+0x2a0>
 8004c5e:	bf00      	nop
 8004c60:	2000000c 	.word	0x2000000c
 8004c64:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d023      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	4798      	blx	r3
 8004c78:	e01e      	b.n	8004cb8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10f      	bne.n	8004ca8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f022 0210 	bic.w	r2, r2, #16
 8004c96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d032      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d022      	beq.n	8004d12 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2205      	movs	r2, #5
 8004cd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0201 	bic.w	r2, r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	60bb      	str	r3, [r7, #8]
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d307      	bcc.n	8004d00 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1f2      	bne.n	8004ce4 <HAL_DMA_IRQHandler+0x2cc>
 8004cfe:	e000      	b.n	8004d02 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004d00:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d005      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	4798      	blx	r3
 8004d22:	e000      	b.n	8004d26 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004d24:	bf00      	nop
    }
  }
}
 8004d26:	3718      	adds	r7, #24
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
 8004d38:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004d48:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	2b40      	cmp	r3, #64	@ 0x40
 8004d58:	d108      	bne.n	8004d6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004d6a:	e007      	b.n	8004d7c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	60da      	str	r2, [r3, #12]
}
 8004d7c:	bf00      	nop
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	3b10      	subs	r3, #16
 8004d98:	4a14      	ldr	r2, [pc, #80]	@ (8004dec <DMA_CalcBaseAndBitshift+0x64>)
 8004d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9e:	091b      	lsrs	r3, r3, #4
 8004da0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004da2:	4a13      	ldr	r2, [pc, #76]	@ (8004df0 <DMA_CalcBaseAndBitshift+0x68>)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	4413      	add	r3, r2
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	461a      	mov	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2b03      	cmp	r3, #3
 8004db4:	d909      	bls.n	8004dca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004dbe:	f023 0303 	bic.w	r3, r3, #3
 8004dc2:	1d1a      	adds	r2, r3, #4
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	659a      	str	r2, [r3, #88]	@ 0x58
 8004dc8:	e007      	b.n	8004dda <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004dd2:	f023 0303 	bic.w	r3, r3, #3
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	aaaaaaab 	.word	0xaaaaaaab
 8004df0:	0800a858 	.word	0x0800a858

08004df4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d11f      	bne.n	8004e4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	2b03      	cmp	r3, #3
 8004e12:	d856      	bhi.n	8004ec2 <DMA_CheckFifoParam+0xce>
 8004e14:	a201      	add	r2, pc, #4	@ (adr r2, 8004e1c <DMA_CheckFifoParam+0x28>)
 8004e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1a:	bf00      	nop
 8004e1c:	08004e2d 	.word	0x08004e2d
 8004e20:	08004e3f 	.word	0x08004e3f
 8004e24:	08004e2d 	.word	0x08004e2d
 8004e28:	08004ec3 	.word	0x08004ec3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d046      	beq.n	8004ec6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e3c:	e043      	b.n	8004ec6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e42:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e46:	d140      	bne.n	8004eca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e4c:	e03d      	b.n	8004eca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e56:	d121      	bne.n	8004e9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	2b03      	cmp	r3, #3
 8004e5c:	d837      	bhi.n	8004ece <DMA_CheckFifoParam+0xda>
 8004e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e64 <DMA_CheckFifoParam+0x70>)
 8004e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e64:	08004e75 	.word	0x08004e75
 8004e68:	08004e7b 	.word	0x08004e7b
 8004e6c:	08004e75 	.word	0x08004e75
 8004e70:	08004e8d 	.word	0x08004e8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	73fb      	strb	r3, [r7, #15]
      break;
 8004e78:	e030      	b.n	8004edc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d025      	beq.n	8004ed2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e8a:	e022      	b.n	8004ed2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e90:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e94:	d11f      	bne.n	8004ed6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004e9a:	e01c      	b.n	8004ed6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d903      	bls.n	8004eaa <DMA_CheckFifoParam+0xb6>
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	2b03      	cmp	r3, #3
 8004ea6:	d003      	beq.n	8004eb0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ea8:	e018      	b.n	8004edc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	73fb      	strb	r3, [r7, #15]
      break;
 8004eae:	e015      	b.n	8004edc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00e      	beq.n	8004eda <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8004ec0:	e00b      	b.n	8004eda <DMA_CheckFifoParam+0xe6>
      break;
 8004ec2:	bf00      	nop
 8004ec4:	e00a      	b.n	8004edc <DMA_CheckFifoParam+0xe8>
      break;
 8004ec6:	bf00      	nop
 8004ec8:	e008      	b.n	8004edc <DMA_CheckFifoParam+0xe8>
      break;
 8004eca:	bf00      	nop
 8004ecc:	e006      	b.n	8004edc <DMA_CheckFifoParam+0xe8>
      break;
 8004ece:	bf00      	nop
 8004ed0:	e004      	b.n	8004edc <DMA_CheckFifoParam+0xe8>
      break;
 8004ed2:	bf00      	nop
 8004ed4:	e002      	b.n	8004edc <DMA_CheckFifoParam+0xe8>
      break;   
 8004ed6:	bf00      	nop
 8004ed8:	e000      	b.n	8004edc <DMA_CheckFifoParam+0xe8>
      break;
 8004eda:	bf00      	nop
    }
  } 
  
  return status; 
 8004edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop

08004eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b089      	sub	sp, #36	@ 0x24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f02:	2300      	movs	r3, #0
 8004f04:	61fb      	str	r3, [r7, #28]
 8004f06:	e159      	b.n	80051bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f08:	2201      	movs	r2, #1
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	f040 8148 	bne.w	80051b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f003 0303 	and.w	r3, r3, #3
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d005      	beq.n	8004f3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d130      	bne.n	8004fa0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	2203      	movs	r2, #3
 8004f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4e:	43db      	mvns	r3, r3
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	4013      	ands	r3, r2
 8004f54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	69ba      	ldr	r2, [r7, #24]
 8004f6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f74:	2201      	movs	r2, #1
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7c:	43db      	mvns	r3, r3
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	4013      	ands	r3, r2
 8004f82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	091b      	lsrs	r3, r3, #4
 8004f8a:	f003 0201 	and.w	r2, r3, #1
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	fa02 f303 	lsl.w	r3, r2, r3
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f003 0303 	and.w	r3, r3, #3
 8004fa8:	2b03      	cmp	r3, #3
 8004faa:	d017      	beq.n	8004fdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	2203      	movs	r2, #3
 8004fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbc:	43db      	mvns	r3, r3
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	689a      	ldr	r2, [r3, #8]
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f003 0303 	and.w	r3, r3, #3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d123      	bne.n	8005030 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	08da      	lsrs	r2, r3, #3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3208      	adds	r2, #8
 8004ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	f003 0307 	and.w	r3, r3, #7
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	220f      	movs	r2, #15
 8005000:	fa02 f303 	lsl.w	r3, r2, r3
 8005004:	43db      	mvns	r3, r3
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	4013      	ands	r3, r2
 800500a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	691a      	ldr	r2, [r3, #16]
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	f003 0307 	and.w	r3, r3, #7
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	fa02 f303 	lsl.w	r3, r2, r3
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	4313      	orrs	r3, r2
 8005020:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	08da      	lsrs	r2, r3, #3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	3208      	adds	r2, #8
 800502a:	69b9      	ldr	r1, [r7, #24]
 800502c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	2203      	movs	r2, #3
 800503c:	fa02 f303 	lsl.w	r3, r2, r3
 8005040:	43db      	mvns	r3, r3
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	4013      	ands	r3, r2
 8005046:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f003 0203 	and.w	r2, r3, #3
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	fa02 f303 	lsl.w	r3, r2, r3
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	4313      	orrs	r3, r2
 800505c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 80a2 	beq.w	80051b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005072:	2300      	movs	r3, #0
 8005074:	60fb      	str	r3, [r7, #12]
 8005076:	4b57      	ldr	r3, [pc, #348]	@ (80051d4 <HAL_GPIO_Init+0x2e8>)
 8005078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800507a:	4a56      	ldr	r2, [pc, #344]	@ (80051d4 <HAL_GPIO_Init+0x2e8>)
 800507c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005080:	6453      	str	r3, [r2, #68]	@ 0x44
 8005082:	4b54      	ldr	r3, [pc, #336]	@ (80051d4 <HAL_GPIO_Init+0x2e8>)
 8005084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005086:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800508e:	4a52      	ldr	r2, [pc, #328]	@ (80051d8 <HAL_GPIO_Init+0x2ec>)
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	089b      	lsrs	r3, r3, #2
 8005094:	3302      	adds	r3, #2
 8005096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800509a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	220f      	movs	r2, #15
 80050a6:	fa02 f303 	lsl.w	r3, r2, r3
 80050aa:	43db      	mvns	r3, r3
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	4013      	ands	r3, r2
 80050b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a49      	ldr	r2, [pc, #292]	@ (80051dc <HAL_GPIO_Init+0x2f0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d019      	beq.n	80050ee <HAL_GPIO_Init+0x202>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a48      	ldr	r2, [pc, #288]	@ (80051e0 <HAL_GPIO_Init+0x2f4>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d013      	beq.n	80050ea <HAL_GPIO_Init+0x1fe>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a47      	ldr	r2, [pc, #284]	@ (80051e4 <HAL_GPIO_Init+0x2f8>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d00d      	beq.n	80050e6 <HAL_GPIO_Init+0x1fa>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a46      	ldr	r2, [pc, #280]	@ (80051e8 <HAL_GPIO_Init+0x2fc>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d007      	beq.n	80050e2 <HAL_GPIO_Init+0x1f6>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a45      	ldr	r2, [pc, #276]	@ (80051ec <HAL_GPIO_Init+0x300>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d101      	bne.n	80050de <HAL_GPIO_Init+0x1f2>
 80050da:	2304      	movs	r3, #4
 80050dc:	e008      	b.n	80050f0 <HAL_GPIO_Init+0x204>
 80050de:	2307      	movs	r3, #7
 80050e0:	e006      	b.n	80050f0 <HAL_GPIO_Init+0x204>
 80050e2:	2303      	movs	r3, #3
 80050e4:	e004      	b.n	80050f0 <HAL_GPIO_Init+0x204>
 80050e6:	2302      	movs	r3, #2
 80050e8:	e002      	b.n	80050f0 <HAL_GPIO_Init+0x204>
 80050ea:	2301      	movs	r3, #1
 80050ec:	e000      	b.n	80050f0 <HAL_GPIO_Init+0x204>
 80050ee:	2300      	movs	r3, #0
 80050f0:	69fa      	ldr	r2, [r7, #28]
 80050f2:	f002 0203 	and.w	r2, r2, #3
 80050f6:	0092      	lsls	r2, r2, #2
 80050f8:	4093      	lsls	r3, r2
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005100:	4935      	ldr	r1, [pc, #212]	@ (80051d8 <HAL_GPIO_Init+0x2ec>)
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	089b      	lsrs	r3, r3, #2
 8005106:	3302      	adds	r3, #2
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800510e:	4b38      	ldr	r3, [pc, #224]	@ (80051f0 <HAL_GPIO_Init+0x304>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	43db      	mvns	r3, r3
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	4013      	ands	r3, r2
 800511c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005132:	4a2f      	ldr	r2, [pc, #188]	@ (80051f0 <HAL_GPIO_Init+0x304>)
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005138:	4b2d      	ldr	r3, [pc, #180]	@ (80051f0 <HAL_GPIO_Init+0x304>)
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	43db      	mvns	r3, r3
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	4013      	ands	r3, r2
 8005146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	4313      	orrs	r3, r2
 800515a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800515c:	4a24      	ldr	r2, [pc, #144]	@ (80051f0 <HAL_GPIO_Init+0x304>)
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005162:	4b23      	ldr	r3, [pc, #140]	@ (80051f0 <HAL_GPIO_Init+0x304>)
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	43db      	mvns	r3, r3
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	4013      	ands	r3, r2
 8005170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	4313      	orrs	r3, r2
 8005184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005186:	4a1a      	ldr	r2, [pc, #104]	@ (80051f0 <HAL_GPIO_Init+0x304>)
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800518c:	4b18      	ldr	r3, [pc, #96]	@ (80051f0 <HAL_GPIO_Init+0x304>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	43db      	mvns	r3, r3
 8005196:	69ba      	ldr	r2, [r7, #24]
 8005198:	4013      	ands	r3, r2
 800519a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d003      	beq.n	80051b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051b0:	4a0f      	ldr	r2, [pc, #60]	@ (80051f0 <HAL_GPIO_Init+0x304>)
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	3301      	adds	r3, #1
 80051ba:	61fb      	str	r3, [r7, #28]
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	2b0f      	cmp	r3, #15
 80051c0:	f67f aea2 	bls.w	8004f08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80051c4:	bf00      	nop
 80051c6:	bf00      	nop
 80051c8:	3724      	adds	r7, #36	@ 0x24
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40023800 	.word	0x40023800
 80051d8:	40013800 	.word	0x40013800
 80051dc:	40020000 	.word	0x40020000
 80051e0:	40020400 	.word	0x40020400
 80051e4:	40020800 	.word	0x40020800
 80051e8:	40020c00 	.word	0x40020c00
 80051ec:	40021000 	.word	0x40021000
 80051f0:	40013c00 	.word	0x40013c00

080051f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	460b      	mov	r3, r1
 80051fe:	807b      	strh	r3, [r7, #2]
 8005200:	4613      	mov	r3, r2
 8005202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005204:	787b      	ldrb	r3, [r7, #1]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800520a:	887a      	ldrh	r2, [r7, #2]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005210:	e003      	b.n	800521a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005212:	887b      	ldrh	r3, [r7, #2]
 8005214:	041a      	lsls	r2, r3, #16
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	619a      	str	r2, [r3, #24]
}
 800521a:	bf00      	nop
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
	...

08005228 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e12b      	b.n	8005492 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d106      	bne.n	8005254 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7fc f93a 	bl	80014c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2224      	movs	r2, #36	@ 0x24
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f022 0201 	bic.w	r2, r2, #1
 800526a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800527a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800528a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800528c:	f001 fc10 	bl	8006ab0 <HAL_RCC_GetPCLK1Freq>
 8005290:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	4a81      	ldr	r2, [pc, #516]	@ (800549c <HAL_I2C_Init+0x274>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d807      	bhi.n	80052ac <HAL_I2C_Init+0x84>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4a80      	ldr	r2, [pc, #512]	@ (80054a0 <HAL_I2C_Init+0x278>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	bf94      	ite	ls
 80052a4:	2301      	movls	r3, #1
 80052a6:	2300      	movhi	r3, #0
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	e006      	b.n	80052ba <HAL_I2C_Init+0x92>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4a7d      	ldr	r2, [pc, #500]	@ (80054a4 <HAL_I2C_Init+0x27c>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	bf94      	ite	ls
 80052b4:	2301      	movls	r3, #1
 80052b6:	2300      	movhi	r3, #0
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e0e7      	b.n	8005492 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	4a78      	ldr	r2, [pc, #480]	@ (80054a8 <HAL_I2C_Init+0x280>)
 80052c6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ca:	0c9b      	lsrs	r3, r3, #18
 80052cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	430a      	orrs	r2, r1
 80052e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	4a6a      	ldr	r2, [pc, #424]	@ (800549c <HAL_I2C_Init+0x274>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d802      	bhi.n	80052fc <HAL_I2C_Init+0xd4>
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	3301      	adds	r3, #1
 80052fa:	e009      	b.n	8005310 <HAL_I2C_Init+0xe8>
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005302:	fb02 f303 	mul.w	r3, r2, r3
 8005306:	4a69      	ldr	r2, [pc, #420]	@ (80054ac <HAL_I2C_Init+0x284>)
 8005308:	fba2 2303 	umull	r2, r3, r2, r3
 800530c:	099b      	lsrs	r3, r3, #6
 800530e:	3301      	adds	r3, #1
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	6812      	ldr	r2, [r2, #0]
 8005314:	430b      	orrs	r3, r1
 8005316:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005322:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	495c      	ldr	r1, [pc, #368]	@ (800549c <HAL_I2C_Init+0x274>)
 800532c:	428b      	cmp	r3, r1
 800532e:	d819      	bhi.n	8005364 <HAL_I2C_Init+0x13c>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	1e59      	subs	r1, r3, #1
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	fbb1 f3f3 	udiv	r3, r1, r3
 800533e:	1c59      	adds	r1, r3, #1
 8005340:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005344:	400b      	ands	r3, r1
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00a      	beq.n	8005360 <HAL_I2C_Init+0x138>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	1e59      	subs	r1, r3, #1
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	005b      	lsls	r3, r3, #1
 8005354:	fbb1 f3f3 	udiv	r3, r1, r3
 8005358:	3301      	adds	r3, #1
 800535a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800535e:	e051      	b.n	8005404 <HAL_I2C_Init+0x1dc>
 8005360:	2304      	movs	r3, #4
 8005362:	e04f      	b.n	8005404 <HAL_I2C_Init+0x1dc>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d111      	bne.n	8005390 <HAL_I2C_Init+0x168>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	1e58      	subs	r0, r3, #1
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6859      	ldr	r1, [r3, #4]
 8005374:	460b      	mov	r3, r1
 8005376:	005b      	lsls	r3, r3, #1
 8005378:	440b      	add	r3, r1
 800537a:	fbb0 f3f3 	udiv	r3, r0, r3
 800537e:	3301      	adds	r3, #1
 8005380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005384:	2b00      	cmp	r3, #0
 8005386:	bf0c      	ite	eq
 8005388:	2301      	moveq	r3, #1
 800538a:	2300      	movne	r3, #0
 800538c:	b2db      	uxtb	r3, r3
 800538e:	e012      	b.n	80053b6 <HAL_I2C_Init+0x18e>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	1e58      	subs	r0, r3, #1
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6859      	ldr	r1, [r3, #4]
 8005398:	460b      	mov	r3, r1
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	440b      	add	r3, r1
 800539e:	0099      	lsls	r1, r3, #2
 80053a0:	440b      	add	r3, r1
 80053a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80053a6:	3301      	adds	r3, #1
 80053a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	bf0c      	ite	eq
 80053b0:	2301      	moveq	r3, #1
 80053b2:	2300      	movne	r3, #0
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d001      	beq.n	80053be <HAL_I2C_Init+0x196>
 80053ba:	2301      	movs	r3, #1
 80053bc:	e022      	b.n	8005404 <HAL_I2C_Init+0x1dc>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10e      	bne.n	80053e4 <HAL_I2C_Init+0x1bc>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	1e58      	subs	r0, r3, #1
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6859      	ldr	r1, [r3, #4]
 80053ce:	460b      	mov	r3, r1
 80053d0:	005b      	lsls	r3, r3, #1
 80053d2:	440b      	add	r3, r1
 80053d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80053d8:	3301      	adds	r3, #1
 80053da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053e2:	e00f      	b.n	8005404 <HAL_I2C_Init+0x1dc>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	1e58      	subs	r0, r3, #1
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6859      	ldr	r1, [r3, #4]
 80053ec:	460b      	mov	r3, r1
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	440b      	add	r3, r1
 80053f2:	0099      	lsls	r1, r3, #2
 80053f4:	440b      	add	r3, r1
 80053f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80053fa:	3301      	adds	r3, #1
 80053fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005400:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005404:	6879      	ldr	r1, [r7, #4]
 8005406:	6809      	ldr	r1, [r1, #0]
 8005408:	4313      	orrs	r3, r2
 800540a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69da      	ldr	r2, [r3, #28]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	431a      	orrs	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005432:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	6911      	ldr	r1, [r2, #16]
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	68d2      	ldr	r2, [r2, #12]
 800543e:	4311      	orrs	r1, r2
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	6812      	ldr	r2, [r2, #0]
 8005444:	430b      	orrs	r3, r1
 8005446:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	695a      	ldr	r2, [r3, #20]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	431a      	orrs	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	430a      	orrs	r2, r1
 8005462:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f042 0201 	orr.w	r2, r2, #1
 8005472:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2220      	movs	r2, #32
 800547e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	000186a0 	.word	0x000186a0
 80054a0:	001e847f 	.word	0x001e847f
 80054a4:	003d08ff 	.word	0x003d08ff
 80054a8:	431bde83 	.word	0x431bde83
 80054ac:	10624dd3 	.word	0x10624dd3

080054b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b088      	sub	sp, #32
 80054b4:	af02      	add	r7, sp, #8
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	607a      	str	r2, [r7, #4]
 80054ba:	461a      	mov	r2, r3
 80054bc:	460b      	mov	r3, r1
 80054be:	817b      	strh	r3, [r7, #10]
 80054c0:	4613      	mov	r3, r2
 80054c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054c4:	f7fe ffce 	bl	8004464 <HAL_GetTick>
 80054c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b20      	cmp	r3, #32
 80054d4:	f040 80e0 	bne.w	8005698 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	2319      	movs	r3, #25
 80054de:	2201      	movs	r2, #1
 80054e0:	4970      	ldr	r1, [pc, #448]	@ (80056a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f000 fc7e 	bl	8005de4 <I2C_WaitOnFlagUntilTimeout>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80054ee:	2302      	movs	r3, #2
 80054f0:	e0d3      	b.n	800569a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d101      	bne.n	8005500 <HAL_I2C_Master_Transmit+0x50>
 80054fc:	2302      	movs	r3, #2
 80054fe:	e0cc      	b.n	800569a <HAL_I2C_Master_Transmit+0x1ea>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b01      	cmp	r3, #1
 8005514:	d007      	beq.n	8005526 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f042 0201 	orr.w	r2, r2, #1
 8005524:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005534:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2221      	movs	r2, #33	@ 0x21
 800553a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2210      	movs	r2, #16
 8005542:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	893a      	ldrh	r2, [r7, #8]
 8005556:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800555c:	b29a      	uxth	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4a50      	ldr	r2, [pc, #320]	@ (80056a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8005566:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005568:	8979      	ldrh	r1, [r7, #10]
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	6a3a      	ldr	r2, [r7, #32]
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f000 fae8 	bl	8005b44 <I2C_MasterRequestWrite>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e08d      	b.n	800569a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800557e:	2300      	movs	r3, #0
 8005580:	613b      	str	r3, [r7, #16]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	613b      	str	r3, [r7, #16]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	613b      	str	r3, [r7, #16]
 8005592:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005594:	e066      	b.n	8005664 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	6a39      	ldr	r1, [r7, #32]
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f000 fd3c 	bl	8006018 <I2C_WaitOnTXEFlagUntilTimeout>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00d      	beq.n	80055c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055aa:	2b04      	cmp	r3, #4
 80055ac:	d107      	bne.n	80055be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e06b      	b.n	800569a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c6:	781a      	ldrb	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d2:	1c5a      	adds	r2, r3, #1
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055dc:	b29b      	uxth	r3, r3
 80055de:	3b01      	subs	r3, #1
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055ea:	3b01      	subs	r3, #1
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	f003 0304 	and.w	r3, r3, #4
 80055fc:	2b04      	cmp	r3, #4
 80055fe:	d11b      	bne.n	8005638 <HAL_I2C_Master_Transmit+0x188>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005604:	2b00      	cmp	r3, #0
 8005606:	d017      	beq.n	8005638 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560c:	781a      	ldrb	r2, [r3, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005618:	1c5a      	adds	r2, r3, #1
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005622:	b29b      	uxth	r3, r3
 8005624:	3b01      	subs	r3, #1
 8005626:	b29a      	uxth	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005630:	3b01      	subs	r3, #1
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	6a39      	ldr	r1, [r7, #32]
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 fd33 	bl	80060a8 <I2C_WaitOnBTFFlagUntilTimeout>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00d      	beq.n	8005664 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564c:	2b04      	cmp	r3, #4
 800564e:	d107      	bne.n	8005660 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800565e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e01a      	b.n	800569a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005668:	2b00      	cmp	r3, #0
 800566a:	d194      	bne.n	8005596 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800567a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2220      	movs	r2, #32
 8005680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005694:	2300      	movs	r3, #0
 8005696:	e000      	b.n	800569a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005698:	2302      	movs	r3, #2
  }
}
 800569a:	4618      	mov	r0, r3
 800569c:	3718      	adds	r7, #24
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	00100002 	.word	0x00100002
 80056a8:	ffff0000 	.word	0xffff0000

080056ac <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b08c      	sub	sp, #48	@ 0x30
 80056b0:	af02      	add	r7, sp, #8
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	607a      	str	r2, [r7, #4]
 80056b6:	461a      	mov	r2, r3
 80056b8:	460b      	mov	r3, r1
 80056ba:	817b      	strh	r3, [r7, #10]
 80056bc:	4613      	mov	r3, r2
 80056be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056c0:	f7fe fed0 	bl	8004464 <HAL_GetTick>
 80056c4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b20      	cmp	r3, #32
 80056d0:	f040 8217 	bne.w	8005b02 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	2319      	movs	r3, #25
 80056da:	2201      	movs	r2, #1
 80056dc:	497c      	ldr	r1, [pc, #496]	@ (80058d0 <HAL_I2C_Master_Receive+0x224>)
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 fb80 	bl	8005de4 <I2C_WaitOnFlagUntilTimeout>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80056ea:	2302      	movs	r3, #2
 80056ec:	e20a      	b.n	8005b04 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d101      	bne.n	80056fc <HAL_I2C_Master_Receive+0x50>
 80056f8:	2302      	movs	r3, #2
 80056fa:	e203      	b.n	8005b04 <HAL_I2C_Master_Receive+0x458>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b01      	cmp	r3, #1
 8005710:	d007      	beq.n	8005722 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f042 0201 	orr.w	r2, r2, #1
 8005720:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005730:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2222      	movs	r2, #34	@ 0x22
 8005736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2210      	movs	r2, #16
 800573e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	893a      	ldrh	r2, [r7, #8]
 8005752:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005758:	b29a      	uxth	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	4a5c      	ldr	r2, [pc, #368]	@ (80058d4 <HAL_I2C_Master_Receive+0x228>)
 8005762:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005764:	8979      	ldrh	r1, [r7, #10]
 8005766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005768:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 fa6c 	bl	8005c48 <I2C_MasterRequestRead>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e1c4      	b.n	8005b04 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800577e:	2b00      	cmp	r3, #0
 8005780:	d113      	bne.n	80057aa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005782:	2300      	movs	r3, #0
 8005784:	623b      	str	r3, [r7, #32]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	623b      	str	r3, [r7, #32]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	623b      	str	r3, [r7, #32]
 8005796:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	e198      	b.n	8005adc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d11b      	bne.n	80057ea <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057c2:	2300      	movs	r3, #0
 80057c4:	61fb      	str	r3, [r7, #28]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	61fb      	str	r3, [r7, #28]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	61fb      	str	r3, [r7, #28]
 80057d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057e6:	601a      	str	r2, [r3, #0]
 80057e8:	e178      	b.n	8005adc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d11b      	bne.n	800582a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005800:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005810:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005812:	2300      	movs	r3, #0
 8005814:	61bb      	str	r3, [r7, #24]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	61bb      	str	r3, [r7, #24]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	61bb      	str	r3, [r7, #24]
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	e158      	b.n	8005adc <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005838:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800583a:	2300      	movs	r3, #0
 800583c:	617b      	str	r3, [r7, #20]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	617b      	str	r3, [r7, #20]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	617b      	str	r3, [r7, #20]
 800584e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005850:	e144      	b.n	8005adc <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005856:	2b03      	cmp	r3, #3
 8005858:	f200 80f1 	bhi.w	8005a3e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005860:	2b01      	cmp	r3, #1
 8005862:	d123      	bne.n	80058ac <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005864:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005866:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 fc65 	bl	8006138 <I2C_WaitOnRXNEFlagUntilTimeout>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e145      	b.n	8005b04 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	691a      	ldr	r2, [r3, #16]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005882:	b2d2      	uxtb	r2, r2
 8005884:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800588a:	1c5a      	adds	r2, r3, #1
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005894:	3b01      	subs	r3, #1
 8005896:	b29a      	uxth	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	3b01      	subs	r3, #1
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80058aa:	e117      	b.n	8005adc <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d14e      	bne.n	8005952 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ba:	2200      	movs	r2, #0
 80058bc:	4906      	ldr	r1, [pc, #24]	@ (80058d8 <HAL_I2C_Master_Receive+0x22c>)
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f000 fa90 	bl	8005de4 <I2C_WaitOnFlagUntilTimeout>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d008      	beq.n	80058dc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e11a      	b.n	8005b04 <HAL_I2C_Master_Receive+0x458>
 80058ce:	bf00      	nop
 80058d0:	00100002 	.word	0x00100002
 80058d4:	ffff0000 	.word	0xffff0000
 80058d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	691a      	ldr	r2, [r3, #16]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f6:	b2d2      	uxtb	r2, r2
 80058f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fe:	1c5a      	adds	r2, r3, #1
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005908:	3b01      	subs	r3, #1
 800590a:	b29a      	uxth	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005914:	b29b      	uxth	r3, r3
 8005916:	3b01      	subs	r3, #1
 8005918:	b29a      	uxth	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005928:	b2d2      	uxtb	r2, r2
 800592a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005930:	1c5a      	adds	r2, r3, #1
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800593a:	3b01      	subs	r3, #1
 800593c:	b29a      	uxth	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005946:	b29b      	uxth	r3, r3
 8005948:	3b01      	subs	r3, #1
 800594a:	b29a      	uxth	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005950:	e0c4      	b.n	8005adc <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005958:	2200      	movs	r2, #0
 800595a:	496c      	ldr	r1, [pc, #432]	@ (8005b0c <HAL_I2C_Master_Receive+0x460>)
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f000 fa41 	bl	8005de4 <I2C_WaitOnFlagUntilTimeout>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e0cb      	b.n	8005b04 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800597a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	691a      	ldr	r2, [r3, #16]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005986:	b2d2      	uxtb	r2, r2
 8005988:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005998:	3b01      	subs	r3, #1
 800599a:	b29a      	uxth	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	3b01      	subs	r3, #1
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b4:	2200      	movs	r2, #0
 80059b6:	4955      	ldr	r1, [pc, #340]	@ (8005b0c <HAL_I2C_Master_Receive+0x460>)
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f000 fa13 	bl	8005de4 <I2C_WaitOnFlagUntilTimeout>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e09d      	b.n	8005b04 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	691a      	ldr	r2, [r3, #16]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e2:	b2d2      	uxtb	r2, r2
 80059e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ea:	1c5a      	adds	r2, r3, #1
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059f4:	3b01      	subs	r3, #1
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	3b01      	subs	r3, #1
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	691a      	ldr	r2, [r3, #16]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a14:	b2d2      	uxtb	r2, r2
 8005a16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1c:	1c5a      	adds	r2, r3, #1
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a26:	3b01      	subs	r3, #1
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	3b01      	subs	r3, #1
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005a3c:	e04e      	b.n	8005adc <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a40:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f000 fb78 	bl	8006138 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e058      	b.n	8005b04 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	691a      	ldr	r2, [r3, #16]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5c:	b2d2      	uxtb	r2, r2
 8005a5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a64:	1c5a      	adds	r2, r3, #1
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	f003 0304 	and.w	r3, r3, #4
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	d124      	bne.n	8005adc <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a96:	2b03      	cmp	r3, #3
 8005a98:	d107      	bne.n	8005aaa <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005aa8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	691a      	ldr	r2, [r3, #16]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab4:	b2d2      	uxtb	r2, r2
 8005ab6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005abc:	1c5a      	adds	r2, r3, #1
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f47f aeb6 	bne.w	8005852 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2220      	movs	r2, #32
 8005aea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005afe:	2300      	movs	r3, #0
 8005b00:	e000      	b.n	8005b04 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005b02:	2302      	movs	r3, #2
  }
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3728      	adds	r7, #40	@ 0x28
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	00010004 	.word	0x00010004

08005b10 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b1e:	b2db      	uxtb	r3, r3
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b088      	sub	sp, #32
 8005b48:	af02      	add	r7, sp, #8
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	607a      	str	r2, [r7, #4]
 8005b4e:	603b      	str	r3, [r7, #0]
 8005b50:	460b      	mov	r3, r1
 8005b52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b58:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	d006      	beq.n	8005b6e <I2C_MasterRequestWrite+0x2a>
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d003      	beq.n	8005b6e <I2C_MasterRequestWrite+0x2a>
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005b6c:	d108      	bne.n	8005b80 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	e00b      	b.n	8005b98 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b84:	2b12      	cmp	r3, #18
 8005b86:	d107      	bne.n	8005b98 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f000 f91d 	bl	8005de4 <I2C_WaitOnFlagUntilTimeout>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00d      	beq.n	8005bcc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bbe:	d103      	bne.n	8005bc8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bc6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e035      	b.n	8005c38 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bd4:	d108      	bne.n	8005be8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005bd6:	897b      	ldrh	r3, [r7, #10]
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	461a      	mov	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005be4:	611a      	str	r2, [r3, #16]
 8005be6:	e01b      	b.n	8005c20 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005be8:	897b      	ldrh	r3, [r7, #10]
 8005bea:	11db      	asrs	r3, r3, #7
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	f003 0306 	and.w	r3, r3, #6
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	f063 030f 	orn	r3, r3, #15
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	490e      	ldr	r1, [pc, #56]	@ (8005c40 <I2C_MasterRequestWrite+0xfc>)
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f000 f966 	bl	8005ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d001      	beq.n	8005c16 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e010      	b.n	8005c38 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c16:	897b      	ldrh	r3, [r7, #10]
 8005c18:	b2da      	uxtb	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	4907      	ldr	r1, [pc, #28]	@ (8005c44 <I2C_MasterRequestWrite+0x100>)
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f000 f956 	bl	8005ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e000      	b.n	8005c38 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3718      	adds	r7, #24
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	00010008 	.word	0x00010008
 8005c44:	00010002 	.word	0x00010002

08005c48 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b088      	sub	sp, #32
 8005c4c:	af02      	add	r7, sp, #8
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	607a      	str	r2, [r7, #4]
 8005c52:	603b      	str	r3, [r7, #0]
 8005c54:	460b      	mov	r3, r1
 8005c56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c5c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005c6c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	d006      	beq.n	8005c82 <I2C_MasterRequestRead+0x3a>
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d003      	beq.n	8005c82 <I2C_MasterRequestRead+0x3a>
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005c80:	d108      	bne.n	8005c94 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c90:	601a      	str	r2, [r3, #0]
 8005c92:	e00b      	b.n	8005cac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c98:	2b11      	cmp	r3, #17
 8005c9a:	d107      	bne.n	8005cac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005caa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	9300      	str	r3, [sp, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 f893 	bl	8005de4 <I2C_WaitOnFlagUntilTimeout>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00d      	beq.n	8005ce0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cd2:	d103      	bne.n	8005cdc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cda:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e079      	b.n	8005dd4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ce8:	d108      	bne.n	8005cfc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005cea:	897b      	ldrh	r3, [r7, #10]
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	f043 0301 	orr.w	r3, r3, #1
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	611a      	str	r2, [r3, #16]
 8005cfa:	e05f      	b.n	8005dbc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005cfc:	897b      	ldrh	r3, [r7, #10]
 8005cfe:	11db      	asrs	r3, r3, #7
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	f003 0306 	and.w	r3, r3, #6
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	f063 030f 	orn	r3, r3, #15
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	4930      	ldr	r1, [pc, #192]	@ (8005ddc <I2C_MasterRequestRead+0x194>)
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f000 f8dc 	bl	8005ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e054      	b.n	8005dd4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005d2a:	897b      	ldrh	r3, [r7, #10]
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	4929      	ldr	r1, [pc, #164]	@ (8005de0 <I2C_MasterRequestRead+0x198>)
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f000 f8cc 	bl	8005ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d001      	beq.n	8005d4a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e044      	b.n	8005dd4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	613b      	str	r3, [r7, #16]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	613b      	str	r3, [r7, #16]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	613b      	str	r3, [r7, #16]
 8005d5e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d6e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	9300      	str	r3, [sp, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 f831 	bl	8005de4 <I2C_WaitOnFlagUntilTimeout>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00d      	beq.n	8005da4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d96:	d103      	bne.n	8005da0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d9e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e017      	b.n	8005dd4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005da4:	897b      	ldrh	r3, [r7, #10]
 8005da6:	11db      	asrs	r3, r3, #7
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	f003 0306 	and.w	r3, r3, #6
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	f063 030e 	orn	r3, r3, #14
 8005db4:	b2da      	uxtb	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	4907      	ldr	r1, [pc, #28]	@ (8005de0 <I2C_MasterRequestRead+0x198>)
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 f888 	bl	8005ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e000      	b.n	8005dd4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3718      	adds	r7, #24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	00010008 	.word	0x00010008
 8005de0:	00010002 	.word	0x00010002

08005de4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	603b      	str	r3, [r7, #0]
 8005df0:	4613      	mov	r3, r2
 8005df2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005df4:	e048      	b.n	8005e88 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005dfc:	d044      	beq.n	8005e88 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dfe:	f7fe fb31 	bl	8004464 <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d302      	bcc.n	8005e14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d139      	bne.n	8005e88 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	0c1b      	lsrs	r3, r3, #16
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d10d      	bne.n	8005e3a <I2C_WaitOnFlagUntilTimeout+0x56>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	43da      	mvns	r2, r3
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	4013      	ands	r3, r2
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	bf0c      	ite	eq
 8005e30:	2301      	moveq	r3, #1
 8005e32:	2300      	movne	r3, #0
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	461a      	mov	r2, r3
 8005e38:	e00c      	b.n	8005e54 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	43da      	mvns	r2, r3
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	4013      	ands	r3, r2
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	bf0c      	ite	eq
 8005e4c:	2301      	moveq	r3, #1
 8005e4e:	2300      	movne	r3, #0
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	461a      	mov	r2, r3
 8005e54:	79fb      	ldrb	r3, [r7, #7]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d116      	bne.n	8005e88 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2220      	movs	r2, #32
 8005e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e74:	f043 0220 	orr.w	r2, r3, #32
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e023      	b.n	8005ed0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	0c1b      	lsrs	r3, r3, #16
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d10d      	bne.n	8005eae <I2C_WaitOnFlagUntilTimeout+0xca>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	43da      	mvns	r2, r3
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	bf0c      	ite	eq
 8005ea4:	2301      	moveq	r3, #1
 8005ea6:	2300      	movne	r3, #0
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	461a      	mov	r2, r3
 8005eac:	e00c      	b.n	8005ec8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	43da      	mvns	r2, r3
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	4013      	ands	r3, r2
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	bf0c      	ite	eq
 8005ec0:	2301      	moveq	r3, #1
 8005ec2:	2300      	movne	r3, #0
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	79fb      	ldrb	r3, [r7, #7]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d093      	beq.n	8005df6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
 8005ee4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ee6:	e071      	b.n	8005fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ef6:	d123      	bne.n	8005f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f06:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005f10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2c:	f043 0204 	orr.w	r2, r3, #4
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e067      	b.n	8006010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f46:	d041      	beq.n	8005fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f48:	f7fe fa8c 	bl	8004464 <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d302      	bcc.n	8005f5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d136      	bne.n	8005fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	0c1b      	lsrs	r3, r3, #16
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d10c      	bne.n	8005f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	43da      	mvns	r2, r3
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	4013      	ands	r3, r2
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	bf14      	ite	ne
 8005f7a:	2301      	movne	r3, #1
 8005f7c:	2300      	moveq	r3, #0
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	e00b      	b.n	8005f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	43da      	mvns	r2, r3
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	bf14      	ite	ne
 8005f94:	2301      	movne	r3, #1
 8005f96:	2300      	moveq	r3, #0
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d016      	beq.n	8005fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2220      	movs	r2, #32
 8005fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb8:	f043 0220 	orr.w	r2, r3, #32
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e021      	b.n	8006010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	0c1b      	lsrs	r3, r3, #16
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d10c      	bne.n	8005ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	43da      	mvns	r2, r3
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	bf14      	ite	ne
 8005fe8:	2301      	movne	r3, #1
 8005fea:	2300      	moveq	r3, #0
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	e00b      	b.n	8006008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	43da      	mvns	r2, r3
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	bf14      	ite	ne
 8006002:	2301      	movne	r3, #1
 8006004:	2300      	moveq	r3, #0
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b00      	cmp	r3, #0
 800600a:	f47f af6d 	bne.w	8005ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006024:	e034      	b.n	8006090 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f000 f8e3 	bl	80061f2 <I2C_IsAcknowledgeFailed>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d001      	beq.n	8006036 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e034      	b.n	80060a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800603c:	d028      	beq.n	8006090 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800603e:	f7fe fa11 	bl	8004464 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	429a      	cmp	r2, r3
 800604c:	d302      	bcc.n	8006054 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d11d      	bne.n	8006090 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800605e:	2b80      	cmp	r3, #128	@ 0x80
 8006060:	d016      	beq.n	8006090 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2220      	movs	r2, #32
 800606c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800607c:	f043 0220 	orr.w	r2, r3, #32
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e007      	b.n	80060a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800609a:	2b80      	cmp	r3, #128	@ 0x80
 800609c:	d1c3      	bne.n	8006026 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80060b4:	e034      	b.n	8006120 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f000 f89b 	bl	80061f2 <I2C_IsAcknowledgeFailed>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e034      	b.n	8006130 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060cc:	d028      	beq.n	8006120 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ce:	f7fe f9c9 	bl	8004464 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d302      	bcc.n	80060e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d11d      	bne.n	8006120 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	f003 0304 	and.w	r3, r3, #4
 80060ee:	2b04      	cmp	r3, #4
 80060f0:	d016      	beq.n	8006120 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2220      	movs	r2, #32
 80060fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610c:	f043 0220 	orr.w	r2, r3, #32
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e007      	b.n	8006130 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	f003 0304 	and.w	r3, r3, #4
 800612a:	2b04      	cmp	r3, #4
 800612c:	d1c3      	bne.n	80060b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006144:	e049      	b.n	80061da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	f003 0310 	and.w	r3, r3, #16
 8006150:	2b10      	cmp	r3, #16
 8006152:	d119      	bne.n	8006188 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f06f 0210 	mvn.w	r2, #16
 800615c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2220      	movs	r2, #32
 8006168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e030      	b.n	80061ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006188:	f7fe f96c 	bl	8004464 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	429a      	cmp	r2, r3
 8006196:	d302      	bcc.n	800619e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d11d      	bne.n	80061da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	695b      	ldr	r3, [r3, #20]
 80061a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061a8:	2b40      	cmp	r3, #64	@ 0x40
 80061aa:	d016      	beq.n	80061da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2220      	movs	r2, #32
 80061b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c6:	f043 0220 	orr.w	r2, r3, #32
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e007      	b.n	80061ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061e4:	2b40      	cmp	r3, #64	@ 0x40
 80061e6:	d1ae      	bne.n	8006146 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006204:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006208:	d11b      	bne.n	8006242 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006212:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2220      	movs	r2, #32
 800621e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800622e:	f043 0204 	orr.w	r2, r3, #4
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e000      	b.n	8006244 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e267      	b.n	8006732 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	2b00      	cmp	r3, #0
 800626c:	d075      	beq.n	800635a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800626e:	4b88      	ldr	r3, [pc, #544]	@ (8006490 <HAL_RCC_OscConfig+0x240>)
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	f003 030c 	and.w	r3, r3, #12
 8006276:	2b04      	cmp	r3, #4
 8006278:	d00c      	beq.n	8006294 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800627a:	4b85      	ldr	r3, [pc, #532]	@ (8006490 <HAL_RCC_OscConfig+0x240>)
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006282:	2b08      	cmp	r3, #8
 8006284:	d112      	bne.n	80062ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006286:	4b82      	ldr	r3, [pc, #520]	@ (8006490 <HAL_RCC_OscConfig+0x240>)
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800628e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006292:	d10b      	bne.n	80062ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006294:	4b7e      	ldr	r3, [pc, #504]	@ (8006490 <HAL_RCC_OscConfig+0x240>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d05b      	beq.n	8006358 <HAL_RCC_OscConfig+0x108>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d157      	bne.n	8006358 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e242      	b.n	8006732 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062b4:	d106      	bne.n	80062c4 <HAL_RCC_OscConfig+0x74>
 80062b6:	4b76      	ldr	r3, [pc, #472]	@ (8006490 <HAL_RCC_OscConfig+0x240>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a75      	ldr	r2, [pc, #468]	@ (8006490 <HAL_RCC_OscConfig+0x240>)
 80062bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062c0:	6013      	str	r3, [r2, #0]
 80062c2:	e01d      	b.n	8006300 <HAL_RCC_OscConfig+0xb0>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062cc:	d10c      	bne.n	80062e8 <HAL_RCC_OscConfig+0x98>
 80062ce:	4b70      	ldr	r3, [pc, #448]	@ (8006490 <HAL_RCC_OscConfig+0x240>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a6f      	ldr	r2, [pc, #444]	@ (8006490 <HAL_RCC_OscConfig+0x240>)
 80062d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	4b6d      	ldr	r3, [pc, #436]	@ (8006490 <HAL_RCC_OscConfig+0x240>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a6c      	ldr	r2, [pc, #432]	@ (8006490 <HAL_RCC_OscConfig+0x240>)
 80062e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062e4:	6013      	str	r3, [r2, #0]
 80062e6:	e00b      	b.n	8006300 <HAL_RCC_OscConfig+0xb0>
 80062e8:	4b69      	ldr	r3, [pc, #420]	@ (8006490 <HAL_RCC_OscConfig+0x240>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a68      	ldr	r2, [pc, #416]	@ (8006490 <HAL_RCC_OscConfig+0x240>)
 80062ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062f2:	6013      	str	r3, [r2, #0]
 80062f4:	4b66      	ldr	r3, [pc, #408]	@ (8006490 <HAL_RCC_OscConfig+0x240>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a65      	ldr	r2, [pc, #404]	@ (8006490 <HAL_RCC_OscConfig+0x240>)
 80062fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d013      	beq.n	8006330 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006308:	f7fe f8ac 	bl	8004464 <HAL_GetTick>
 800630c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800630e:	e008      	b.n	8006322 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006310:	f7fe f8a8 	bl	8004464 <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	2b64      	cmp	r3, #100	@ 0x64
 800631c:	d901      	bls.n	8006322 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e207      	b.n	8006732 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006322:	4b5b      	ldr	r3, [pc, #364]	@ (8006490 <HAL_RCC_OscConfig+0x240>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d0f0      	beq.n	8006310 <HAL_RCC_OscConfig+0xc0>
 800632e:	e014      	b.n	800635a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006330:	f7fe f898 	bl	8004464 <HAL_GetTick>
 8006334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006336:	e008      	b.n	800634a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006338:	f7fe f894 	bl	8004464 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	2b64      	cmp	r3, #100	@ 0x64
 8006344:	d901      	bls.n	800634a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e1f3      	b.n	8006732 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800634a:	4b51      	ldr	r3, [pc, #324]	@ (8006490 <HAL_RCC_OscConfig+0x240>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1f0      	bne.n	8006338 <HAL_RCC_OscConfig+0xe8>
 8006356:	e000      	b.n	800635a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0302 	and.w	r3, r3, #2
 8006362:	2b00      	cmp	r3, #0
 8006364:	d063      	beq.n	800642e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006366:	4b4a      	ldr	r3, [pc, #296]	@ (8006490 <HAL_RCC_OscConfig+0x240>)
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f003 030c 	and.w	r3, r3, #12
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00b      	beq.n	800638a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006372:	4b47      	ldr	r3, [pc, #284]	@ (8006490 <HAL_RCC_OscConfig+0x240>)
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800637a:	2b08      	cmp	r3, #8
 800637c:	d11c      	bne.n	80063b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800637e:	4b44      	ldr	r3, [pc, #272]	@ (8006490 <HAL_RCC_OscConfig+0x240>)
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d116      	bne.n	80063b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800638a:	4b41      	ldr	r3, [pc, #260]	@ (8006490 <HAL_RCC_OscConfig+0x240>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d005      	beq.n	80063a2 <HAL_RCC_OscConfig+0x152>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d001      	beq.n	80063a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e1c7      	b.n	8006732 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063a2:	4b3b      	ldr	r3, [pc, #236]	@ (8006490 <HAL_RCC_OscConfig+0x240>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	00db      	lsls	r3, r3, #3
 80063b0:	4937      	ldr	r1, [pc, #220]	@ (8006490 <HAL_RCC_OscConfig+0x240>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063b6:	e03a      	b.n	800642e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d020      	beq.n	8006402 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063c0:	4b34      	ldr	r3, [pc, #208]	@ (8006494 <HAL_RCC_OscConfig+0x244>)
 80063c2:	2201      	movs	r2, #1
 80063c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063c6:	f7fe f84d 	bl	8004464 <HAL_GetTick>
 80063ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063cc:	e008      	b.n	80063e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063ce:	f7fe f849 	bl	8004464 <HAL_GetTick>
 80063d2:	4602      	mov	r2, r0
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d901      	bls.n	80063e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e1a8      	b.n	8006732 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063e0:	4b2b      	ldr	r3, [pc, #172]	@ (8006490 <HAL_RCC_OscConfig+0x240>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0302 	and.w	r3, r3, #2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d0f0      	beq.n	80063ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063ec:	4b28      	ldr	r3, [pc, #160]	@ (8006490 <HAL_RCC_OscConfig+0x240>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	00db      	lsls	r3, r3, #3
 80063fa:	4925      	ldr	r1, [pc, #148]	@ (8006490 <HAL_RCC_OscConfig+0x240>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	600b      	str	r3, [r1, #0]
 8006400:	e015      	b.n	800642e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006402:	4b24      	ldr	r3, [pc, #144]	@ (8006494 <HAL_RCC_OscConfig+0x244>)
 8006404:	2200      	movs	r2, #0
 8006406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006408:	f7fe f82c 	bl	8004464 <HAL_GetTick>
 800640c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800640e:	e008      	b.n	8006422 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006410:	f7fe f828 	bl	8004464 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	2b02      	cmp	r3, #2
 800641c:	d901      	bls.n	8006422 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e187      	b.n	8006732 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006422:	4b1b      	ldr	r3, [pc, #108]	@ (8006490 <HAL_RCC_OscConfig+0x240>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0302 	and.w	r3, r3, #2
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1f0      	bne.n	8006410 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0308 	and.w	r3, r3, #8
 8006436:	2b00      	cmp	r3, #0
 8006438:	d036      	beq.n	80064a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d016      	beq.n	8006470 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006442:	4b15      	ldr	r3, [pc, #84]	@ (8006498 <HAL_RCC_OscConfig+0x248>)
 8006444:	2201      	movs	r2, #1
 8006446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006448:	f7fe f80c 	bl	8004464 <HAL_GetTick>
 800644c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800644e:	e008      	b.n	8006462 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006450:	f7fe f808 	bl	8004464 <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	2b02      	cmp	r3, #2
 800645c:	d901      	bls.n	8006462 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e167      	b.n	8006732 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006462:	4b0b      	ldr	r3, [pc, #44]	@ (8006490 <HAL_RCC_OscConfig+0x240>)
 8006464:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d0f0      	beq.n	8006450 <HAL_RCC_OscConfig+0x200>
 800646e:	e01b      	b.n	80064a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006470:	4b09      	ldr	r3, [pc, #36]	@ (8006498 <HAL_RCC_OscConfig+0x248>)
 8006472:	2200      	movs	r2, #0
 8006474:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006476:	f7fd fff5 	bl	8004464 <HAL_GetTick>
 800647a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800647c:	e00e      	b.n	800649c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800647e:	f7fd fff1 	bl	8004464 <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	2b02      	cmp	r3, #2
 800648a:	d907      	bls.n	800649c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e150      	b.n	8006732 <HAL_RCC_OscConfig+0x4e2>
 8006490:	40023800 	.word	0x40023800
 8006494:	42470000 	.word	0x42470000
 8006498:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800649c:	4b88      	ldr	r3, [pc, #544]	@ (80066c0 <HAL_RCC_OscConfig+0x470>)
 800649e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1ea      	bne.n	800647e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0304 	and.w	r3, r3, #4
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f000 8097 	beq.w	80065e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064b6:	2300      	movs	r3, #0
 80064b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064ba:	4b81      	ldr	r3, [pc, #516]	@ (80066c0 <HAL_RCC_OscConfig+0x470>)
 80064bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10f      	bne.n	80064e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064c6:	2300      	movs	r3, #0
 80064c8:	60bb      	str	r3, [r7, #8]
 80064ca:	4b7d      	ldr	r3, [pc, #500]	@ (80066c0 <HAL_RCC_OscConfig+0x470>)
 80064cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ce:	4a7c      	ldr	r2, [pc, #496]	@ (80066c0 <HAL_RCC_OscConfig+0x470>)
 80064d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80064d6:	4b7a      	ldr	r3, [pc, #488]	@ (80066c0 <HAL_RCC_OscConfig+0x470>)
 80064d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064de:	60bb      	str	r3, [r7, #8]
 80064e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064e2:	2301      	movs	r3, #1
 80064e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064e6:	4b77      	ldr	r3, [pc, #476]	@ (80066c4 <HAL_RCC_OscConfig+0x474>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d118      	bne.n	8006524 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064f2:	4b74      	ldr	r3, [pc, #464]	@ (80066c4 <HAL_RCC_OscConfig+0x474>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a73      	ldr	r2, [pc, #460]	@ (80066c4 <HAL_RCC_OscConfig+0x474>)
 80064f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064fe:	f7fd ffb1 	bl	8004464 <HAL_GetTick>
 8006502:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006504:	e008      	b.n	8006518 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006506:	f7fd ffad 	bl	8004464 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	2b02      	cmp	r3, #2
 8006512:	d901      	bls.n	8006518 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e10c      	b.n	8006732 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006518:	4b6a      	ldr	r3, [pc, #424]	@ (80066c4 <HAL_RCC_OscConfig+0x474>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006520:	2b00      	cmp	r3, #0
 8006522:	d0f0      	beq.n	8006506 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	2b01      	cmp	r3, #1
 800652a:	d106      	bne.n	800653a <HAL_RCC_OscConfig+0x2ea>
 800652c:	4b64      	ldr	r3, [pc, #400]	@ (80066c0 <HAL_RCC_OscConfig+0x470>)
 800652e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006530:	4a63      	ldr	r2, [pc, #396]	@ (80066c0 <HAL_RCC_OscConfig+0x470>)
 8006532:	f043 0301 	orr.w	r3, r3, #1
 8006536:	6713      	str	r3, [r2, #112]	@ 0x70
 8006538:	e01c      	b.n	8006574 <HAL_RCC_OscConfig+0x324>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	2b05      	cmp	r3, #5
 8006540:	d10c      	bne.n	800655c <HAL_RCC_OscConfig+0x30c>
 8006542:	4b5f      	ldr	r3, [pc, #380]	@ (80066c0 <HAL_RCC_OscConfig+0x470>)
 8006544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006546:	4a5e      	ldr	r2, [pc, #376]	@ (80066c0 <HAL_RCC_OscConfig+0x470>)
 8006548:	f043 0304 	orr.w	r3, r3, #4
 800654c:	6713      	str	r3, [r2, #112]	@ 0x70
 800654e:	4b5c      	ldr	r3, [pc, #368]	@ (80066c0 <HAL_RCC_OscConfig+0x470>)
 8006550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006552:	4a5b      	ldr	r2, [pc, #364]	@ (80066c0 <HAL_RCC_OscConfig+0x470>)
 8006554:	f043 0301 	orr.w	r3, r3, #1
 8006558:	6713      	str	r3, [r2, #112]	@ 0x70
 800655a:	e00b      	b.n	8006574 <HAL_RCC_OscConfig+0x324>
 800655c:	4b58      	ldr	r3, [pc, #352]	@ (80066c0 <HAL_RCC_OscConfig+0x470>)
 800655e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006560:	4a57      	ldr	r2, [pc, #348]	@ (80066c0 <HAL_RCC_OscConfig+0x470>)
 8006562:	f023 0301 	bic.w	r3, r3, #1
 8006566:	6713      	str	r3, [r2, #112]	@ 0x70
 8006568:	4b55      	ldr	r3, [pc, #340]	@ (80066c0 <HAL_RCC_OscConfig+0x470>)
 800656a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800656c:	4a54      	ldr	r2, [pc, #336]	@ (80066c0 <HAL_RCC_OscConfig+0x470>)
 800656e:	f023 0304 	bic.w	r3, r3, #4
 8006572:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d015      	beq.n	80065a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800657c:	f7fd ff72 	bl	8004464 <HAL_GetTick>
 8006580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006582:	e00a      	b.n	800659a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006584:	f7fd ff6e 	bl	8004464 <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006592:	4293      	cmp	r3, r2
 8006594:	d901      	bls.n	800659a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e0cb      	b.n	8006732 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800659a:	4b49      	ldr	r3, [pc, #292]	@ (80066c0 <HAL_RCC_OscConfig+0x470>)
 800659c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800659e:	f003 0302 	and.w	r3, r3, #2
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d0ee      	beq.n	8006584 <HAL_RCC_OscConfig+0x334>
 80065a6:	e014      	b.n	80065d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065a8:	f7fd ff5c 	bl	8004464 <HAL_GetTick>
 80065ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065ae:	e00a      	b.n	80065c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065b0:	f7fd ff58 	bl	8004464 <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065be:	4293      	cmp	r3, r2
 80065c0:	d901      	bls.n	80065c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e0b5      	b.n	8006732 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065c6:	4b3e      	ldr	r3, [pc, #248]	@ (80066c0 <HAL_RCC_OscConfig+0x470>)
 80065c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1ee      	bne.n	80065b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80065d2:	7dfb      	ldrb	r3, [r7, #23]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d105      	bne.n	80065e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065d8:	4b39      	ldr	r3, [pc, #228]	@ (80066c0 <HAL_RCC_OscConfig+0x470>)
 80065da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065dc:	4a38      	ldr	r2, [pc, #224]	@ (80066c0 <HAL_RCC_OscConfig+0x470>)
 80065de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 80a1 	beq.w	8006730 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80065ee:	4b34      	ldr	r3, [pc, #208]	@ (80066c0 <HAL_RCC_OscConfig+0x470>)
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f003 030c 	and.w	r3, r3, #12
 80065f6:	2b08      	cmp	r3, #8
 80065f8:	d05c      	beq.n	80066b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d141      	bne.n	8006686 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006602:	4b31      	ldr	r3, [pc, #196]	@ (80066c8 <HAL_RCC_OscConfig+0x478>)
 8006604:	2200      	movs	r2, #0
 8006606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006608:	f7fd ff2c 	bl	8004464 <HAL_GetTick>
 800660c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800660e:	e008      	b.n	8006622 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006610:	f7fd ff28 	bl	8004464 <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	2b02      	cmp	r3, #2
 800661c:	d901      	bls.n	8006622 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e087      	b.n	8006732 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006622:	4b27      	ldr	r3, [pc, #156]	@ (80066c0 <HAL_RCC_OscConfig+0x470>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1f0      	bne.n	8006610 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	69da      	ldr	r2, [r3, #28]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	431a      	orrs	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800663c:	019b      	lsls	r3, r3, #6
 800663e:	431a      	orrs	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006644:	085b      	lsrs	r3, r3, #1
 8006646:	3b01      	subs	r3, #1
 8006648:	041b      	lsls	r3, r3, #16
 800664a:	431a      	orrs	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006650:	061b      	lsls	r3, r3, #24
 8006652:	491b      	ldr	r1, [pc, #108]	@ (80066c0 <HAL_RCC_OscConfig+0x470>)
 8006654:	4313      	orrs	r3, r2
 8006656:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006658:	4b1b      	ldr	r3, [pc, #108]	@ (80066c8 <HAL_RCC_OscConfig+0x478>)
 800665a:	2201      	movs	r2, #1
 800665c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800665e:	f7fd ff01 	bl	8004464 <HAL_GetTick>
 8006662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006664:	e008      	b.n	8006678 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006666:	f7fd fefd 	bl	8004464 <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	2b02      	cmp	r3, #2
 8006672:	d901      	bls.n	8006678 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e05c      	b.n	8006732 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006678:	4b11      	ldr	r3, [pc, #68]	@ (80066c0 <HAL_RCC_OscConfig+0x470>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d0f0      	beq.n	8006666 <HAL_RCC_OscConfig+0x416>
 8006684:	e054      	b.n	8006730 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006686:	4b10      	ldr	r3, [pc, #64]	@ (80066c8 <HAL_RCC_OscConfig+0x478>)
 8006688:	2200      	movs	r2, #0
 800668a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800668c:	f7fd feea 	bl	8004464 <HAL_GetTick>
 8006690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006692:	e008      	b.n	80066a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006694:	f7fd fee6 	bl	8004464 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d901      	bls.n	80066a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e045      	b.n	8006732 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066a6:	4b06      	ldr	r3, [pc, #24]	@ (80066c0 <HAL_RCC_OscConfig+0x470>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1f0      	bne.n	8006694 <HAL_RCC_OscConfig+0x444>
 80066b2:	e03d      	b.n	8006730 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d107      	bne.n	80066cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e038      	b.n	8006732 <HAL_RCC_OscConfig+0x4e2>
 80066c0:	40023800 	.word	0x40023800
 80066c4:	40007000 	.word	0x40007000
 80066c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80066cc:	4b1b      	ldr	r3, [pc, #108]	@ (800673c <HAL_RCC_OscConfig+0x4ec>)
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d028      	beq.n	800672c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d121      	bne.n	800672c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d11a      	bne.n	800672c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80066fc:	4013      	ands	r3, r2
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006702:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006704:	4293      	cmp	r3, r2
 8006706:	d111      	bne.n	800672c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006712:	085b      	lsrs	r3, r3, #1
 8006714:	3b01      	subs	r3, #1
 8006716:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006718:	429a      	cmp	r2, r3
 800671a:	d107      	bne.n	800672c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006726:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006728:	429a      	cmp	r2, r3
 800672a:	d001      	beq.n	8006730 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e000      	b.n	8006732 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3718      	adds	r7, #24
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	40023800 	.word	0x40023800

08006740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d101      	bne.n	8006754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e0cc      	b.n	80068ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006754:	4b68      	ldr	r3, [pc, #416]	@ (80068f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0307 	and.w	r3, r3, #7
 800675c:	683a      	ldr	r2, [r7, #0]
 800675e:	429a      	cmp	r2, r3
 8006760:	d90c      	bls.n	800677c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006762:	4b65      	ldr	r3, [pc, #404]	@ (80068f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006764:	683a      	ldr	r2, [r7, #0]
 8006766:	b2d2      	uxtb	r2, r2
 8006768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800676a:	4b63      	ldr	r3, [pc, #396]	@ (80068f8 <HAL_RCC_ClockConfig+0x1b8>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0307 	and.w	r3, r3, #7
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	429a      	cmp	r2, r3
 8006776:	d001      	beq.n	800677c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e0b8      	b.n	80068ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0302 	and.w	r3, r3, #2
 8006784:	2b00      	cmp	r3, #0
 8006786:	d020      	beq.n	80067ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0304 	and.w	r3, r3, #4
 8006790:	2b00      	cmp	r3, #0
 8006792:	d005      	beq.n	80067a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006794:	4b59      	ldr	r3, [pc, #356]	@ (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	4a58      	ldr	r2, [pc, #352]	@ (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 800679a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800679e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0308 	and.w	r3, r3, #8
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d005      	beq.n	80067b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067ac:	4b53      	ldr	r3, [pc, #332]	@ (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	4a52      	ldr	r2, [pc, #328]	@ (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 80067b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80067b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067b8:	4b50      	ldr	r3, [pc, #320]	@ (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	494d      	ldr	r1, [pc, #308]	@ (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d044      	beq.n	8006860 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d107      	bne.n	80067ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067de:	4b47      	ldr	r3, [pc, #284]	@ (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d119      	bne.n	800681e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e07f      	b.n	80068ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d003      	beq.n	80067fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067fa:	2b03      	cmp	r3, #3
 80067fc:	d107      	bne.n	800680e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067fe:	4b3f      	ldr	r3, [pc, #252]	@ (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d109      	bne.n	800681e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e06f      	b.n	80068ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800680e:	4b3b      	ldr	r3, [pc, #236]	@ (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e067      	b.n	80068ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800681e:	4b37      	ldr	r3, [pc, #220]	@ (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f023 0203 	bic.w	r2, r3, #3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	4934      	ldr	r1, [pc, #208]	@ (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 800682c:	4313      	orrs	r3, r2
 800682e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006830:	f7fd fe18 	bl	8004464 <HAL_GetTick>
 8006834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006836:	e00a      	b.n	800684e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006838:	f7fd fe14 	bl	8004464 <HAL_GetTick>
 800683c:	4602      	mov	r2, r0
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006846:	4293      	cmp	r3, r2
 8006848:	d901      	bls.n	800684e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e04f      	b.n	80068ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800684e:	4b2b      	ldr	r3, [pc, #172]	@ (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f003 020c 	and.w	r2, r3, #12
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	429a      	cmp	r2, r3
 800685e:	d1eb      	bne.n	8006838 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006860:	4b25      	ldr	r3, [pc, #148]	@ (80068f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0307 	and.w	r3, r3, #7
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	429a      	cmp	r2, r3
 800686c:	d20c      	bcs.n	8006888 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800686e:	4b22      	ldr	r3, [pc, #136]	@ (80068f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006870:	683a      	ldr	r2, [r7, #0]
 8006872:	b2d2      	uxtb	r2, r2
 8006874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006876:	4b20      	ldr	r3, [pc, #128]	@ (80068f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0307 	and.w	r3, r3, #7
 800687e:	683a      	ldr	r2, [r7, #0]
 8006880:	429a      	cmp	r2, r3
 8006882:	d001      	beq.n	8006888 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e032      	b.n	80068ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0304 	and.w	r3, r3, #4
 8006890:	2b00      	cmp	r3, #0
 8006892:	d008      	beq.n	80068a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006894:	4b19      	ldr	r3, [pc, #100]	@ (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	4916      	ldr	r1, [pc, #88]	@ (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 80068a2:	4313      	orrs	r3, r2
 80068a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0308 	and.w	r3, r3, #8
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d009      	beq.n	80068c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068b2:	4b12      	ldr	r3, [pc, #72]	@ (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	00db      	lsls	r3, r3, #3
 80068c0:	490e      	ldr	r1, [pc, #56]	@ (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 80068c2:	4313      	orrs	r3, r2
 80068c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80068c6:	f000 f821 	bl	800690c <HAL_RCC_GetSysClockFreq>
 80068ca:	4602      	mov	r2, r0
 80068cc:	4b0b      	ldr	r3, [pc, #44]	@ (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	091b      	lsrs	r3, r3, #4
 80068d2:	f003 030f 	and.w	r3, r3, #15
 80068d6:	490a      	ldr	r1, [pc, #40]	@ (8006900 <HAL_RCC_ClockConfig+0x1c0>)
 80068d8:	5ccb      	ldrb	r3, [r1, r3]
 80068da:	fa22 f303 	lsr.w	r3, r2, r3
 80068de:	4a09      	ldr	r2, [pc, #36]	@ (8006904 <HAL_RCC_ClockConfig+0x1c4>)
 80068e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80068e2:	4b09      	ldr	r3, [pc, #36]	@ (8006908 <HAL_RCC_ClockConfig+0x1c8>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fd fd78 	bl	80043dc <HAL_InitTick>

  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	40023c00 	.word	0x40023c00
 80068fc:	40023800 	.word	0x40023800
 8006900:	0800a840 	.word	0x0800a840
 8006904:	2000000c 	.word	0x2000000c
 8006908:	20000010 	.word	0x20000010

0800690c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800690c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006910:	b090      	sub	sp, #64	@ 0x40
 8006912:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006914:	2300      	movs	r3, #0
 8006916:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006918:	2300      	movs	r3, #0
 800691a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800691c:	2300      	movs	r3, #0
 800691e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006920:	2300      	movs	r3, #0
 8006922:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006924:	4b59      	ldr	r3, [pc, #356]	@ (8006a8c <HAL_RCC_GetSysClockFreq+0x180>)
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f003 030c 	and.w	r3, r3, #12
 800692c:	2b08      	cmp	r3, #8
 800692e:	d00d      	beq.n	800694c <HAL_RCC_GetSysClockFreq+0x40>
 8006930:	2b08      	cmp	r3, #8
 8006932:	f200 80a1 	bhi.w	8006a78 <HAL_RCC_GetSysClockFreq+0x16c>
 8006936:	2b00      	cmp	r3, #0
 8006938:	d002      	beq.n	8006940 <HAL_RCC_GetSysClockFreq+0x34>
 800693a:	2b04      	cmp	r3, #4
 800693c:	d003      	beq.n	8006946 <HAL_RCC_GetSysClockFreq+0x3a>
 800693e:	e09b      	b.n	8006a78 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006940:	4b53      	ldr	r3, [pc, #332]	@ (8006a90 <HAL_RCC_GetSysClockFreq+0x184>)
 8006942:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006944:	e09b      	b.n	8006a7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006946:	4b53      	ldr	r3, [pc, #332]	@ (8006a94 <HAL_RCC_GetSysClockFreq+0x188>)
 8006948:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800694a:	e098      	b.n	8006a7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800694c:	4b4f      	ldr	r3, [pc, #316]	@ (8006a8c <HAL_RCC_GetSysClockFreq+0x180>)
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006954:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006956:	4b4d      	ldr	r3, [pc, #308]	@ (8006a8c <HAL_RCC_GetSysClockFreq+0x180>)
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d028      	beq.n	80069b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006962:	4b4a      	ldr	r3, [pc, #296]	@ (8006a8c <HAL_RCC_GetSysClockFreq+0x180>)
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	099b      	lsrs	r3, r3, #6
 8006968:	2200      	movs	r2, #0
 800696a:	623b      	str	r3, [r7, #32]
 800696c:	627a      	str	r2, [r7, #36]	@ 0x24
 800696e:	6a3b      	ldr	r3, [r7, #32]
 8006970:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006974:	2100      	movs	r1, #0
 8006976:	4b47      	ldr	r3, [pc, #284]	@ (8006a94 <HAL_RCC_GetSysClockFreq+0x188>)
 8006978:	fb03 f201 	mul.w	r2, r3, r1
 800697c:	2300      	movs	r3, #0
 800697e:	fb00 f303 	mul.w	r3, r0, r3
 8006982:	4413      	add	r3, r2
 8006984:	4a43      	ldr	r2, [pc, #268]	@ (8006a94 <HAL_RCC_GetSysClockFreq+0x188>)
 8006986:	fba0 1202 	umull	r1, r2, r0, r2
 800698a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800698c:	460a      	mov	r2, r1
 800698e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006990:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006992:	4413      	add	r3, r2
 8006994:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006998:	2200      	movs	r2, #0
 800699a:	61bb      	str	r3, [r7, #24]
 800699c:	61fa      	str	r2, [r7, #28]
 800699e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80069a6:	f7fa f92f 	bl	8000c08 <__aeabi_uldivmod>
 80069aa:	4602      	mov	r2, r0
 80069ac:	460b      	mov	r3, r1
 80069ae:	4613      	mov	r3, r2
 80069b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069b2:	e053      	b.n	8006a5c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069b4:	4b35      	ldr	r3, [pc, #212]	@ (8006a8c <HAL_RCC_GetSysClockFreq+0x180>)
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	099b      	lsrs	r3, r3, #6
 80069ba:	2200      	movs	r2, #0
 80069bc:	613b      	str	r3, [r7, #16]
 80069be:	617a      	str	r2, [r7, #20]
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80069c6:	f04f 0b00 	mov.w	fp, #0
 80069ca:	4652      	mov	r2, sl
 80069cc:	465b      	mov	r3, fp
 80069ce:	f04f 0000 	mov.w	r0, #0
 80069d2:	f04f 0100 	mov.w	r1, #0
 80069d6:	0159      	lsls	r1, r3, #5
 80069d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069dc:	0150      	lsls	r0, r2, #5
 80069de:	4602      	mov	r2, r0
 80069e0:	460b      	mov	r3, r1
 80069e2:	ebb2 080a 	subs.w	r8, r2, sl
 80069e6:	eb63 090b 	sbc.w	r9, r3, fp
 80069ea:	f04f 0200 	mov.w	r2, #0
 80069ee:	f04f 0300 	mov.w	r3, #0
 80069f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80069f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80069fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80069fe:	ebb2 0408 	subs.w	r4, r2, r8
 8006a02:	eb63 0509 	sbc.w	r5, r3, r9
 8006a06:	f04f 0200 	mov.w	r2, #0
 8006a0a:	f04f 0300 	mov.w	r3, #0
 8006a0e:	00eb      	lsls	r3, r5, #3
 8006a10:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a14:	00e2      	lsls	r2, r4, #3
 8006a16:	4614      	mov	r4, r2
 8006a18:	461d      	mov	r5, r3
 8006a1a:	eb14 030a 	adds.w	r3, r4, sl
 8006a1e:	603b      	str	r3, [r7, #0]
 8006a20:	eb45 030b 	adc.w	r3, r5, fp
 8006a24:	607b      	str	r3, [r7, #4]
 8006a26:	f04f 0200 	mov.w	r2, #0
 8006a2a:	f04f 0300 	mov.w	r3, #0
 8006a2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a32:	4629      	mov	r1, r5
 8006a34:	028b      	lsls	r3, r1, #10
 8006a36:	4621      	mov	r1, r4
 8006a38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a3c:	4621      	mov	r1, r4
 8006a3e:	028a      	lsls	r2, r1, #10
 8006a40:	4610      	mov	r0, r2
 8006a42:	4619      	mov	r1, r3
 8006a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a46:	2200      	movs	r2, #0
 8006a48:	60bb      	str	r3, [r7, #8]
 8006a4a:	60fa      	str	r2, [r7, #12]
 8006a4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a50:	f7fa f8da 	bl	8000c08 <__aeabi_uldivmod>
 8006a54:	4602      	mov	r2, r0
 8006a56:	460b      	mov	r3, r1
 8006a58:	4613      	mov	r3, r2
 8006a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8006a8c <HAL_RCC_GetSysClockFreq+0x180>)
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	0c1b      	lsrs	r3, r3, #16
 8006a62:	f003 0303 	and.w	r3, r3, #3
 8006a66:	3301      	adds	r3, #1
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006a6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a74:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006a76:	e002      	b.n	8006a7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a78:	4b05      	ldr	r3, [pc, #20]	@ (8006a90 <HAL_RCC_GetSysClockFreq+0x184>)
 8006a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006a7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3740      	adds	r7, #64	@ 0x40
 8006a84:	46bd      	mov	sp, r7
 8006a86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a8a:	bf00      	nop
 8006a8c:	40023800 	.word	0x40023800
 8006a90:	00f42400 	.word	0x00f42400
 8006a94:	017d7840 	.word	0x017d7840

08006a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a9c:	4b03      	ldr	r3, [pc, #12]	@ (8006aac <HAL_RCC_GetHCLKFreq+0x14>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	2000000c 	.word	0x2000000c

08006ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ab4:	f7ff fff0 	bl	8006a98 <HAL_RCC_GetHCLKFreq>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	4b05      	ldr	r3, [pc, #20]	@ (8006ad0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	0a9b      	lsrs	r3, r3, #10
 8006ac0:	f003 0307 	and.w	r3, r3, #7
 8006ac4:	4903      	ldr	r1, [pc, #12]	@ (8006ad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ac6:	5ccb      	ldrb	r3, [r1, r3]
 8006ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	40023800 	.word	0x40023800
 8006ad4:	0800a850 	.word	0x0800a850

08006ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006adc:	f7ff ffdc 	bl	8006a98 <HAL_RCC_GetHCLKFreq>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	4b05      	ldr	r3, [pc, #20]	@ (8006af8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	0b5b      	lsrs	r3, r3, #13
 8006ae8:	f003 0307 	and.w	r3, r3, #7
 8006aec:	4903      	ldr	r1, [pc, #12]	@ (8006afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006aee:	5ccb      	ldrb	r3, [r1, r3]
 8006af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	40023800 	.word	0x40023800
 8006afc:	0800a850 	.word	0x0800a850

08006b00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d101      	bne.n	8006b12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e041      	b.n	8006b96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d106      	bne.n	8006b2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7fd fa72 	bl	8004010 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2202      	movs	r2, #2
 8006b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	3304      	adds	r3, #4
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	4610      	mov	r0, r2
 8006b40:	f000 fb16 	bl	8007170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3708      	adds	r7, #8
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
	...

08006ba0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d001      	beq.n	8006bb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e044      	b.n	8006c42 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68da      	ldr	r2, [r3, #12]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f042 0201 	orr.w	r2, r2, #1
 8006bce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a1e      	ldr	r2, [pc, #120]	@ (8006c50 <HAL_TIM_Base_Start_IT+0xb0>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d018      	beq.n	8006c0c <HAL_TIM_Base_Start_IT+0x6c>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006be2:	d013      	beq.n	8006c0c <HAL_TIM_Base_Start_IT+0x6c>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a1a      	ldr	r2, [pc, #104]	@ (8006c54 <HAL_TIM_Base_Start_IT+0xb4>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d00e      	beq.n	8006c0c <HAL_TIM_Base_Start_IT+0x6c>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a19      	ldr	r2, [pc, #100]	@ (8006c58 <HAL_TIM_Base_Start_IT+0xb8>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d009      	beq.n	8006c0c <HAL_TIM_Base_Start_IT+0x6c>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a17      	ldr	r2, [pc, #92]	@ (8006c5c <HAL_TIM_Base_Start_IT+0xbc>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d004      	beq.n	8006c0c <HAL_TIM_Base_Start_IT+0x6c>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a16      	ldr	r2, [pc, #88]	@ (8006c60 <HAL_TIM_Base_Start_IT+0xc0>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d111      	bne.n	8006c30 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f003 0307 	and.w	r3, r3, #7
 8006c16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2b06      	cmp	r3, #6
 8006c1c:	d010      	beq.n	8006c40 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f042 0201 	orr.w	r2, r2, #1
 8006c2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c2e:	e007      	b.n	8006c40 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f042 0201 	orr.w	r2, r2, #1
 8006c3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3714      	adds	r7, #20
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	40010000 	.word	0x40010000
 8006c54:	40000400 	.word	0x40000400
 8006c58:	40000800 	.word	0x40000800
 8006c5c:	40000c00 	.word	0x40000c00
 8006c60:	40014000 	.word	0x40014000

08006c64 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d101      	bne.n	8006c78 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e097      	b.n	8006da8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d106      	bne.n	8006c92 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7fd f9ff 	bl	8004090 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2202      	movs	r2, #2
 8006c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	6812      	ldr	r2, [r2, #0]
 8006ca4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ca8:	f023 0307 	bic.w	r3, r3, #7
 8006cac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	3304      	adds	r3, #4
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	4610      	mov	r0, r2
 8006cba:	f000 fa59 	bl	8007170 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	699b      	ldr	r3, [r3, #24]
 8006ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6a1b      	ldr	r3, [r3, #32]
 8006cd4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ce6:	f023 0303 	bic.w	r3, r3, #3
 8006cea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	689a      	ldr	r2, [r3, #8]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	021b      	lsls	r3, r3, #8
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006d04:	f023 030c 	bic.w	r3, r3, #12
 8006d08:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d10:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	68da      	ldr	r2, [r3, #12]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	021b      	lsls	r3, r3, #8
 8006d20:	4313      	orrs	r3, r2
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	011a      	lsls	r2, r3, #4
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	031b      	lsls	r3, r3, #12
 8006d34:	4313      	orrs	r3, r2
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006d42:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006d4a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	685a      	ldr	r2, [r3, #4]
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	695b      	ldr	r3, [r3, #20]
 8006d54:	011b      	lsls	r3, r3, #4
 8006d56:	4313      	orrs	r3, r2
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3718      	adds	r7, #24
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	f003 0302 	and.w	r3, r3, #2
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d020      	beq.n	8006e14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f003 0302 	and.w	r3, r3, #2
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d01b      	beq.n	8006e14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f06f 0202 	mvn.w	r2, #2
 8006de4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2201      	movs	r2, #1
 8006dea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	f003 0303 	and.w	r3, r3, #3
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d003      	beq.n	8006e02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f999 	bl	8007132 <HAL_TIM_IC_CaptureCallback>
 8006e00:	e005      	b.n	8006e0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f98b 	bl	800711e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f99c 	bl	8007146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	f003 0304 	and.w	r3, r3, #4
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d020      	beq.n	8006e60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f003 0304 	and.w	r3, r3, #4
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d01b      	beq.n	8006e60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f06f 0204 	mvn.w	r2, #4
 8006e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2202      	movs	r2, #2
 8006e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d003      	beq.n	8006e4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f973 	bl	8007132 <HAL_TIM_IC_CaptureCallback>
 8006e4c:	e005      	b.n	8006e5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f965 	bl	800711e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 f976 	bl	8007146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	f003 0308 	and.w	r3, r3, #8
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d020      	beq.n	8006eac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f003 0308 	and.w	r3, r3, #8
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d01b      	beq.n	8006eac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f06f 0208 	mvn.w	r2, #8
 8006e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2204      	movs	r2, #4
 8006e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	f003 0303 	and.w	r3, r3, #3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d003      	beq.n	8006e9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f94d 	bl	8007132 <HAL_TIM_IC_CaptureCallback>
 8006e98:	e005      	b.n	8006ea6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f93f 	bl	800711e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 f950 	bl	8007146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	f003 0310 	and.w	r3, r3, #16
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d020      	beq.n	8006ef8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f003 0310 	and.w	r3, r3, #16
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d01b      	beq.n	8006ef8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f06f 0210 	mvn.w	r2, #16
 8006ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2208      	movs	r2, #8
 8006ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	69db      	ldr	r3, [r3, #28]
 8006ed6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f927 	bl	8007132 <HAL_TIM_IC_CaptureCallback>
 8006ee4:	e005      	b.n	8006ef2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f919 	bl	800711e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f92a 	bl	8007146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00c      	beq.n	8006f1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f003 0301 	and.w	r3, r3, #1
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d007      	beq.n	8006f1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f06f 0201 	mvn.w	r2, #1
 8006f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7fa fce6 	bl	80018e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00c      	beq.n	8006f40 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d007      	beq.n	8006f40 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fab6 	bl	80074ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00c      	beq.n	8006f64 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d007      	beq.n	8006f64 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f8fb 	bl	800715a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	f003 0320 	and.w	r3, r3, #32
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00c      	beq.n	8006f88 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f003 0320 	and.w	r3, r3, #32
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d007      	beq.n	8006f88 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f06f 0220 	mvn.w	r2, #32
 8006f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 fa88 	bl	8007498 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f88:	bf00      	nop
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d101      	bne.n	8006fac <HAL_TIM_ConfigClockSource+0x1c>
 8006fa8:	2302      	movs	r3, #2
 8006faa:	e0b4      	b.n	8007116 <HAL_TIM_ConfigClockSource+0x186>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2202      	movs	r2, #2
 8006fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006fca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006fd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fe4:	d03e      	beq.n	8007064 <HAL_TIM_ConfigClockSource+0xd4>
 8006fe6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fea:	f200 8087 	bhi.w	80070fc <HAL_TIM_ConfigClockSource+0x16c>
 8006fee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ff2:	f000 8086 	beq.w	8007102 <HAL_TIM_ConfigClockSource+0x172>
 8006ff6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ffa:	d87f      	bhi.n	80070fc <HAL_TIM_ConfigClockSource+0x16c>
 8006ffc:	2b70      	cmp	r3, #112	@ 0x70
 8006ffe:	d01a      	beq.n	8007036 <HAL_TIM_ConfigClockSource+0xa6>
 8007000:	2b70      	cmp	r3, #112	@ 0x70
 8007002:	d87b      	bhi.n	80070fc <HAL_TIM_ConfigClockSource+0x16c>
 8007004:	2b60      	cmp	r3, #96	@ 0x60
 8007006:	d050      	beq.n	80070aa <HAL_TIM_ConfigClockSource+0x11a>
 8007008:	2b60      	cmp	r3, #96	@ 0x60
 800700a:	d877      	bhi.n	80070fc <HAL_TIM_ConfigClockSource+0x16c>
 800700c:	2b50      	cmp	r3, #80	@ 0x50
 800700e:	d03c      	beq.n	800708a <HAL_TIM_ConfigClockSource+0xfa>
 8007010:	2b50      	cmp	r3, #80	@ 0x50
 8007012:	d873      	bhi.n	80070fc <HAL_TIM_ConfigClockSource+0x16c>
 8007014:	2b40      	cmp	r3, #64	@ 0x40
 8007016:	d058      	beq.n	80070ca <HAL_TIM_ConfigClockSource+0x13a>
 8007018:	2b40      	cmp	r3, #64	@ 0x40
 800701a:	d86f      	bhi.n	80070fc <HAL_TIM_ConfigClockSource+0x16c>
 800701c:	2b30      	cmp	r3, #48	@ 0x30
 800701e:	d064      	beq.n	80070ea <HAL_TIM_ConfigClockSource+0x15a>
 8007020:	2b30      	cmp	r3, #48	@ 0x30
 8007022:	d86b      	bhi.n	80070fc <HAL_TIM_ConfigClockSource+0x16c>
 8007024:	2b20      	cmp	r3, #32
 8007026:	d060      	beq.n	80070ea <HAL_TIM_ConfigClockSource+0x15a>
 8007028:	2b20      	cmp	r3, #32
 800702a:	d867      	bhi.n	80070fc <HAL_TIM_ConfigClockSource+0x16c>
 800702c:	2b00      	cmp	r3, #0
 800702e:	d05c      	beq.n	80070ea <HAL_TIM_ConfigClockSource+0x15a>
 8007030:	2b10      	cmp	r3, #16
 8007032:	d05a      	beq.n	80070ea <HAL_TIM_ConfigClockSource+0x15a>
 8007034:	e062      	b.n	80070fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007046:	f000 f999 	bl	800737c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007058:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	609a      	str	r2, [r3, #8]
      break;
 8007062:	e04f      	b.n	8007104 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007074:	f000 f982 	bl	800737c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	689a      	ldr	r2, [r3, #8]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007086:	609a      	str	r2, [r3, #8]
      break;
 8007088:	e03c      	b.n	8007104 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007096:	461a      	mov	r2, r3
 8007098:	f000 f8f6 	bl	8007288 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2150      	movs	r1, #80	@ 0x50
 80070a2:	4618      	mov	r0, r3
 80070a4:	f000 f94f 	bl	8007346 <TIM_ITRx_SetConfig>
      break;
 80070a8:	e02c      	b.n	8007104 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80070b6:	461a      	mov	r2, r3
 80070b8:	f000 f915 	bl	80072e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2160      	movs	r1, #96	@ 0x60
 80070c2:	4618      	mov	r0, r3
 80070c4:	f000 f93f 	bl	8007346 <TIM_ITRx_SetConfig>
      break;
 80070c8:	e01c      	b.n	8007104 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070d6:	461a      	mov	r2, r3
 80070d8:	f000 f8d6 	bl	8007288 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2140      	movs	r1, #64	@ 0x40
 80070e2:	4618      	mov	r0, r3
 80070e4:	f000 f92f 	bl	8007346 <TIM_ITRx_SetConfig>
      break;
 80070e8:	e00c      	b.n	8007104 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4619      	mov	r1, r3
 80070f4:	4610      	mov	r0, r2
 80070f6:	f000 f926 	bl	8007346 <TIM_ITRx_SetConfig>
      break;
 80070fa:	e003      	b.n	8007104 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007100:	e000      	b.n	8007104 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007102:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007114:	7bfb      	ldrb	r3, [r7, #15]
}
 8007116:	4618      	mov	r0, r3
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800711e:	b480      	push	{r7}
 8007120:	b083      	sub	sp, #12
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007126:	bf00      	nop
 8007128:	370c      	adds	r7, #12
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr

08007132 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007132:	b480      	push	{r7}
 8007134:	b083      	sub	sp, #12
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800713a:	bf00      	nop
 800713c:	370c      	adds	r7, #12
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007146:	b480      	push	{r7}
 8007148:	b083      	sub	sp, #12
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800714e:	bf00      	nop
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800715a:	b480      	push	{r7}
 800715c:	b083      	sub	sp, #12
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007162:	bf00      	nop
 8007164:	370c      	adds	r7, #12
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
	...

08007170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007170:	b480      	push	{r7}
 8007172:	b085      	sub	sp, #20
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a3a      	ldr	r2, [pc, #232]	@ (800726c <TIM_Base_SetConfig+0xfc>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d00f      	beq.n	80071a8 <TIM_Base_SetConfig+0x38>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800718e:	d00b      	beq.n	80071a8 <TIM_Base_SetConfig+0x38>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a37      	ldr	r2, [pc, #220]	@ (8007270 <TIM_Base_SetConfig+0x100>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d007      	beq.n	80071a8 <TIM_Base_SetConfig+0x38>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a36      	ldr	r2, [pc, #216]	@ (8007274 <TIM_Base_SetConfig+0x104>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d003      	beq.n	80071a8 <TIM_Base_SetConfig+0x38>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a35      	ldr	r2, [pc, #212]	@ (8007278 <TIM_Base_SetConfig+0x108>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d108      	bne.n	80071ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a2b      	ldr	r2, [pc, #172]	@ (800726c <TIM_Base_SetConfig+0xfc>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d01b      	beq.n	80071fa <TIM_Base_SetConfig+0x8a>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071c8:	d017      	beq.n	80071fa <TIM_Base_SetConfig+0x8a>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a28      	ldr	r2, [pc, #160]	@ (8007270 <TIM_Base_SetConfig+0x100>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d013      	beq.n	80071fa <TIM_Base_SetConfig+0x8a>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a27      	ldr	r2, [pc, #156]	@ (8007274 <TIM_Base_SetConfig+0x104>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d00f      	beq.n	80071fa <TIM_Base_SetConfig+0x8a>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a26      	ldr	r2, [pc, #152]	@ (8007278 <TIM_Base_SetConfig+0x108>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d00b      	beq.n	80071fa <TIM_Base_SetConfig+0x8a>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a25      	ldr	r2, [pc, #148]	@ (800727c <TIM_Base_SetConfig+0x10c>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d007      	beq.n	80071fa <TIM_Base_SetConfig+0x8a>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a24      	ldr	r2, [pc, #144]	@ (8007280 <TIM_Base_SetConfig+0x110>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d003      	beq.n	80071fa <TIM_Base_SetConfig+0x8a>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a23      	ldr	r2, [pc, #140]	@ (8007284 <TIM_Base_SetConfig+0x114>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d108      	bne.n	800720c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	4313      	orrs	r3, r2
 800720a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	4313      	orrs	r3, r2
 8007218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	689a      	ldr	r2, [r3, #8]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a0e      	ldr	r2, [pc, #56]	@ (800726c <TIM_Base_SetConfig+0xfc>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d103      	bne.n	8007240 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	691a      	ldr	r2, [r3, #16]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	2b01      	cmp	r3, #1
 8007250:	d105      	bne.n	800725e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	f023 0201 	bic.w	r2, r3, #1
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	611a      	str	r2, [r3, #16]
  }
}
 800725e:	bf00      	nop
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	40010000 	.word	0x40010000
 8007270:	40000400 	.word	0x40000400
 8007274:	40000800 	.word	0x40000800
 8007278:	40000c00 	.word	0x40000c00
 800727c:	40014000 	.word	0x40014000
 8007280:	40014400 	.word	0x40014400
 8007284:	40014800 	.word	0x40014800

08007288 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007288:	b480      	push	{r7}
 800728a:	b087      	sub	sp, #28
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6a1b      	ldr	r3, [r3, #32]
 8007298:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6a1b      	ldr	r3, [r3, #32]
 800729e:	f023 0201 	bic.w	r2, r3, #1
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80072b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	011b      	lsls	r3, r3, #4
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	f023 030a 	bic.w	r3, r3, #10
 80072c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	693a      	ldr	r2, [r7, #16]
 80072d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	621a      	str	r2, [r3, #32]
}
 80072da:	bf00      	nop
 80072dc:	371c      	adds	r7, #28
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072e6:	b480      	push	{r7}
 80072e8:	b087      	sub	sp, #28
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	60f8      	str	r0, [r7, #12]
 80072ee:	60b9      	str	r1, [r7, #8]
 80072f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6a1b      	ldr	r3, [r3, #32]
 80072f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6a1b      	ldr	r3, [r3, #32]
 80072fc:	f023 0210 	bic.w	r2, r3, #16
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007310:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	031b      	lsls	r3, r3, #12
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	4313      	orrs	r3, r2
 800731a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007322:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	011b      	lsls	r3, r3, #4
 8007328:	697a      	ldr	r2, [r7, #20]
 800732a:	4313      	orrs	r3, r2
 800732c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	693a      	ldr	r2, [r7, #16]
 8007332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	697a      	ldr	r2, [r7, #20]
 8007338:	621a      	str	r2, [r3, #32]
}
 800733a:	bf00      	nop
 800733c:	371c      	adds	r7, #28
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007346:	b480      	push	{r7}
 8007348:	b085      	sub	sp, #20
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800735c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	4313      	orrs	r3, r2
 8007364:	f043 0307 	orr.w	r3, r3, #7
 8007368:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	609a      	str	r2, [r3, #8]
}
 8007370:	bf00      	nop
 8007372:	3714      	adds	r7, #20
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800737c:	b480      	push	{r7}
 800737e:	b087      	sub	sp, #28
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
 8007388:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007396:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	021a      	lsls	r2, r3, #8
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	431a      	orrs	r2, r3
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	697a      	ldr	r2, [r7, #20]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	609a      	str	r2, [r3, #8]
}
 80073b0:	bf00      	nop
 80073b2:	371c      	adds	r7, #28
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d101      	bne.n	80073d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073d0:	2302      	movs	r3, #2
 80073d2:	e050      	b.n	8007476 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2202      	movs	r2, #2
 80073e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	4313      	orrs	r3, r2
 8007404:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a1c      	ldr	r2, [pc, #112]	@ (8007484 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d018      	beq.n	800744a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007420:	d013      	beq.n	800744a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a18      	ldr	r2, [pc, #96]	@ (8007488 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d00e      	beq.n	800744a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a16      	ldr	r2, [pc, #88]	@ (800748c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d009      	beq.n	800744a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a15      	ldr	r2, [pc, #84]	@ (8007490 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d004      	beq.n	800744a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a13      	ldr	r2, [pc, #76]	@ (8007494 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d10c      	bne.n	8007464 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007450:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	68ba      	ldr	r2, [r7, #8]
 8007458:	4313      	orrs	r3, r2
 800745a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68ba      	ldr	r2, [r7, #8]
 8007462:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	40010000 	.word	0x40010000
 8007488:	40000400 	.word	0x40000400
 800748c:	40000800 	.word	0x40000800
 8007490:	40000c00 	.word	0x40000c00
 8007494:	40014000 	.word	0x40014000

08007498 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074b4:	bf00      	nop
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d101      	bne.n	80074d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e042      	b.n	8007558 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d106      	bne.n	80074ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f7fc fe76 	bl	80041d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2224      	movs	r2, #36	@ 0x24
 80074f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68da      	ldr	r2, [r3, #12]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007502:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 ff37 	bl	8008378 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	691a      	ldr	r2, [r3, #16]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007518:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	695a      	ldr	r2, [r3, #20]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007528:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68da      	ldr	r2, [r3, #12]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007538:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2220      	movs	r2, #32
 8007544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2220      	movs	r2, #32
 800754c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b08c      	sub	sp, #48	@ 0x30
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	4613      	mov	r3, r2
 800756c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b20      	cmp	r3, #32
 8007578:	d156      	bne.n	8007628 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d002      	beq.n	8007586 <HAL_UART_Transmit_DMA+0x26>
 8007580:	88fb      	ldrh	r3, [r7, #6]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d101      	bne.n	800758a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e04f      	b.n	800762a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	88fa      	ldrh	r2, [r7, #6]
 8007594:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	88fa      	ldrh	r2, [r7, #6]
 800759a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2221      	movs	r2, #33	@ 0x21
 80075a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ae:	4a21      	ldr	r2, [pc, #132]	@ (8007634 <HAL_UART_Transmit_DMA+0xd4>)
 80075b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075b6:	4a20      	ldr	r2, [pc, #128]	@ (8007638 <HAL_UART_Transmit_DMA+0xd8>)
 80075b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075be:	4a1f      	ldr	r2, [pc, #124]	@ (800763c <HAL_UART_Transmit_DMA+0xdc>)
 80075c0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075c6:	2200      	movs	r2, #0
 80075c8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80075ca:	f107 0308 	add.w	r3, r7, #8
 80075ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80075d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075d6:	6819      	ldr	r1, [r3, #0]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	3304      	adds	r3, #4
 80075de:	461a      	mov	r2, r3
 80075e0:	88fb      	ldrh	r3, [r7, #6]
 80075e2:	f7fd f92f 	bl	8004844 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80075ee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	3314      	adds	r3, #20
 80075f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	e853 3f00 	ldrex	r3, [r3]
 80075fe:	617b      	str	r3, [r7, #20]
   return(result);
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007606:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3314      	adds	r3, #20
 800760e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007610:	627a      	str	r2, [r7, #36]	@ 0x24
 8007612:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007614:	6a39      	ldr	r1, [r7, #32]
 8007616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007618:	e841 2300 	strex	r3, r2, [r1]
 800761c:	61fb      	str	r3, [r7, #28]
   return(result);
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1e5      	bne.n	80075f0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8007624:	2300      	movs	r3, #0
 8007626:	e000      	b.n	800762a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8007628:	2302      	movs	r3, #2
  }
}
 800762a:	4618      	mov	r0, r3
 800762c:	3730      	adds	r7, #48	@ 0x30
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	08007c05 	.word	0x08007c05
 8007638:	08007c9f 	.word	0x08007c9f
 800763c:	08007e23 	.word	0x08007e23

08007640 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	4613      	mov	r3, r2
 800764c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007654:	b2db      	uxtb	r3, r3
 8007656:	2b20      	cmp	r3, #32
 8007658:	d112      	bne.n	8007680 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d002      	beq.n	8007666 <HAL_UART_Receive_DMA+0x26>
 8007660:	88fb      	ldrh	r3, [r7, #6]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d101      	bne.n	800766a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e00b      	b.n	8007682 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007670:	88fb      	ldrh	r3, [r7, #6]
 8007672:	461a      	mov	r2, r3
 8007674:	68b9      	ldr	r1, [r7, #8]
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f000 fc1e 	bl	8007eb8 <UART_Start_Receive_DMA>
 800767c:	4603      	mov	r3, r0
 800767e:	e000      	b.n	8007682 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007680:	2302      	movs	r3, #2
  }
}
 8007682:	4618      	mov	r0, r3
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
	...

0800768c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b0ba      	sub	sp, #232	@ 0xe8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80076b2:	2300      	movs	r3, #0
 80076b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80076b8:	2300      	movs	r3, #0
 80076ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80076be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076c2:	f003 030f 	and.w	r3, r3, #15
 80076c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80076ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d10f      	bne.n	80076f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80076d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076d6:	f003 0320 	and.w	r3, r3, #32
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d009      	beq.n	80076f2 <HAL_UART_IRQHandler+0x66>
 80076de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076e2:	f003 0320 	and.w	r3, r3, #32
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d003      	beq.n	80076f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fd85 	bl	80081fa <UART_Receive_IT>
      return;
 80076f0:	e25b      	b.n	8007baa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80076f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f000 80de 	beq.w	80078b8 <HAL_UART_IRQHandler+0x22c>
 80076fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	2b00      	cmp	r3, #0
 8007706:	d106      	bne.n	8007716 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800770c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007710:	2b00      	cmp	r3, #0
 8007712:	f000 80d1 	beq.w	80078b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00b      	beq.n	800773a <HAL_UART_IRQHandler+0xae>
 8007722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800772a:	2b00      	cmp	r3, #0
 800772c:	d005      	beq.n	800773a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007732:	f043 0201 	orr.w	r2, r3, #1
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800773a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800773e:	f003 0304 	and.w	r3, r3, #4
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00b      	beq.n	800775e <HAL_UART_IRQHandler+0xd2>
 8007746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800774a:	f003 0301 	and.w	r3, r3, #1
 800774e:	2b00      	cmp	r3, #0
 8007750:	d005      	beq.n	800775e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007756:	f043 0202 	orr.w	r2, r3, #2
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800775e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007762:	f003 0302 	and.w	r3, r3, #2
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00b      	beq.n	8007782 <HAL_UART_IRQHandler+0xf6>
 800776a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800776e:	f003 0301 	and.w	r3, r3, #1
 8007772:	2b00      	cmp	r3, #0
 8007774:	d005      	beq.n	8007782 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800777a:	f043 0204 	orr.w	r2, r3, #4
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007786:	f003 0308 	and.w	r3, r3, #8
 800778a:	2b00      	cmp	r3, #0
 800778c:	d011      	beq.n	80077b2 <HAL_UART_IRQHandler+0x126>
 800778e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007792:	f003 0320 	and.w	r3, r3, #32
 8007796:	2b00      	cmp	r3, #0
 8007798:	d105      	bne.n	80077a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800779a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800779e:	f003 0301 	and.w	r3, r3, #1
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d005      	beq.n	80077b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077aa:	f043 0208 	orr.w	r2, r3, #8
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f000 81f2 	beq.w	8007ba0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077c0:	f003 0320 	and.w	r3, r3, #32
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d008      	beq.n	80077da <HAL_UART_IRQHandler+0x14e>
 80077c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077cc:	f003 0320 	and.w	r3, r3, #32
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d002      	beq.n	80077da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 fd10 	bl	80081fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	695b      	ldr	r3, [r3, #20]
 80077e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077e4:	2b40      	cmp	r3, #64	@ 0x40
 80077e6:	bf0c      	ite	eq
 80077e8:	2301      	moveq	r3, #1
 80077ea:	2300      	movne	r3, #0
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077f6:	f003 0308 	and.w	r3, r3, #8
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d103      	bne.n	8007806 <HAL_UART_IRQHandler+0x17a>
 80077fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007802:	2b00      	cmp	r3, #0
 8007804:	d04f      	beq.n	80078a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 fc18 	bl	800803c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007816:	2b40      	cmp	r3, #64	@ 0x40
 8007818:	d141      	bne.n	800789e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3314      	adds	r3, #20
 8007820:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007824:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007828:	e853 3f00 	ldrex	r3, [r3]
 800782c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007830:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007834:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007838:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	3314      	adds	r3, #20
 8007842:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007846:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800784a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007852:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007856:	e841 2300 	strex	r3, r2, [r1]
 800785a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800785e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1d9      	bne.n	800781a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800786a:	2b00      	cmp	r3, #0
 800786c:	d013      	beq.n	8007896 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007872:	4a7e      	ldr	r2, [pc, #504]	@ (8007a6c <HAL_UART_IRQHandler+0x3e0>)
 8007874:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800787a:	4618      	mov	r0, r3
 800787c:	f7fd f8aa 	bl	80049d4 <HAL_DMA_Abort_IT>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d016      	beq.n	80078b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800788a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007890:	4610      	mov	r0, r2
 8007892:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007894:	e00e      	b.n	80078b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f99e 	bl	8007bd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800789c:	e00a      	b.n	80078b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f99a 	bl	8007bd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078a4:	e006      	b.n	80078b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f996 	bl	8007bd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80078b2:	e175      	b.n	8007ba0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078b4:	bf00      	nop
    return;
 80078b6:	e173      	b.n	8007ba0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078bc:	2b01      	cmp	r3, #1
 80078be:	f040 814f 	bne.w	8007b60 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80078c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078c6:	f003 0310 	and.w	r3, r3, #16
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	f000 8148 	beq.w	8007b60 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80078d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078d4:	f003 0310 	and.w	r3, r3, #16
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f000 8141 	beq.w	8007b60 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078de:	2300      	movs	r3, #0
 80078e0:	60bb      	str	r3, [r7, #8]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	60bb      	str	r3, [r7, #8]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	60bb      	str	r3, [r7, #8]
 80078f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078fe:	2b40      	cmp	r3, #64	@ 0x40
 8007900:	f040 80b6 	bne.w	8007a70 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007910:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007914:	2b00      	cmp	r3, #0
 8007916:	f000 8145 	beq.w	8007ba4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800791e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007922:	429a      	cmp	r2, r3
 8007924:	f080 813e 	bcs.w	8007ba4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800792e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007934:	69db      	ldr	r3, [r3, #28]
 8007936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800793a:	f000 8088 	beq.w	8007a4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	330c      	adds	r3, #12
 8007944:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007948:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800794c:	e853 3f00 	ldrex	r3, [r3]
 8007950:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007954:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007958:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800795c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	330c      	adds	r3, #12
 8007966:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800796a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800796e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007972:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007976:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800797a:	e841 2300 	strex	r3, r2, [r1]
 800797e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007982:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1d9      	bne.n	800793e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	3314      	adds	r3, #20
 8007990:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007992:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007994:	e853 3f00 	ldrex	r3, [r3]
 8007998:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800799a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800799c:	f023 0301 	bic.w	r3, r3, #1
 80079a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	3314      	adds	r3, #20
 80079aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80079ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80079b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80079b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80079ba:	e841 2300 	strex	r3, r2, [r1]
 80079be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80079c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1e1      	bne.n	800798a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	3314      	adds	r3, #20
 80079cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079d0:	e853 3f00 	ldrex	r3, [r3]
 80079d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80079d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	3314      	adds	r3, #20
 80079e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80079ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80079ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80079f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80079f2:	e841 2300 	strex	r3, r2, [r1]
 80079f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80079f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1e3      	bne.n	80079c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2220      	movs	r2, #32
 8007a02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	330c      	adds	r3, #12
 8007a12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a16:	e853 3f00 	ldrex	r3, [r3]
 8007a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007a1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a1e:	f023 0310 	bic.w	r3, r3, #16
 8007a22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	330c      	adds	r3, #12
 8007a2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007a30:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007a32:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a34:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a38:	e841 2300 	strex	r3, r2, [r1]
 8007a3c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007a3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1e3      	bne.n	8007a0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7fc ff53 	bl	80048f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2202      	movs	r2, #2
 8007a52:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	1ad3      	subs	r3, r2, r3
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	4619      	mov	r1, r3
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 f8c1 	bl	8007bec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a6a:	e09b      	b.n	8007ba4 <HAL_UART_IRQHandler+0x518>
 8007a6c:	08008103 	.word	0x08008103
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f000 808e 	beq.w	8007ba8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007a8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f000 8089 	beq.w	8007ba8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	330c      	adds	r3, #12
 8007a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aa0:	e853 3f00 	ldrex	r3, [r3]
 8007aa4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aa8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007aac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	330c      	adds	r3, #12
 8007ab6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007aba:	647a      	str	r2, [r7, #68]	@ 0x44
 8007abc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ac0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ac2:	e841 2300 	strex	r3, r2, [r1]
 8007ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ac8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1e3      	bne.n	8007a96 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	3314      	adds	r3, #20
 8007ad4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad8:	e853 3f00 	ldrex	r3, [r3]
 8007adc:	623b      	str	r3, [r7, #32]
   return(result);
 8007ade:	6a3b      	ldr	r3, [r7, #32]
 8007ae0:	f023 0301 	bic.w	r3, r3, #1
 8007ae4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3314      	adds	r3, #20
 8007aee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007af2:	633a      	str	r2, [r7, #48]	@ 0x30
 8007af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007af8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007afa:	e841 2300 	strex	r3, r2, [r1]
 8007afe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1e3      	bne.n	8007ace <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2220      	movs	r2, #32
 8007b0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	330c      	adds	r3, #12
 8007b1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	e853 3f00 	ldrex	r3, [r3]
 8007b22:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f023 0310 	bic.w	r3, r3, #16
 8007b2a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	330c      	adds	r3, #12
 8007b34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007b38:	61fa      	str	r2, [r7, #28]
 8007b3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3c:	69b9      	ldr	r1, [r7, #24]
 8007b3e:	69fa      	ldr	r2, [r7, #28]
 8007b40:	e841 2300 	strex	r3, r2, [r1]
 8007b44:	617b      	str	r3, [r7, #20]
   return(result);
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1e3      	bne.n	8007b14 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2202      	movs	r2, #2
 8007b50:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007b56:	4619      	mov	r1, r3
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 f847 	bl	8007bec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b5e:	e023      	b.n	8007ba8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d009      	beq.n	8007b80 <HAL_UART_IRQHandler+0x4f4>
 8007b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d003      	beq.n	8007b80 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fad6 	bl	800812a <UART_Transmit_IT>
    return;
 8007b7e:	e014      	b.n	8007baa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00e      	beq.n	8007baa <HAL_UART_IRQHandler+0x51e>
 8007b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d008      	beq.n	8007baa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 fb16 	bl	80081ca <UART_EndTransmit_IT>
    return;
 8007b9e:	e004      	b.n	8007baa <HAL_UART_IRQHandler+0x51e>
    return;
 8007ba0:	bf00      	nop
 8007ba2:	e002      	b.n	8007baa <HAL_UART_IRQHandler+0x51e>
      return;
 8007ba4:	bf00      	nop
 8007ba6:	e000      	b.n	8007baa <HAL_UART_IRQHandler+0x51e>
      return;
 8007ba8:	bf00      	nop
  }
}
 8007baa:	37e8      	adds	r7, #232	@ 0xe8
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007bcc:	bf00      	nop
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007bf8:	bf00      	nop
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b090      	sub	sp, #64	@ 0x40
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d137      	bne.n	8007c90 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c22:	2200      	movs	r2, #0
 8007c24:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	3314      	adds	r3, #20
 8007c2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c30:	e853 3f00 	ldrex	r3, [r3]
 8007c34:	623b      	str	r3, [r7, #32]
   return(result);
 8007c36:	6a3b      	ldr	r3, [r7, #32]
 8007c38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	3314      	adds	r3, #20
 8007c44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c46:	633a      	str	r2, [r7, #48]	@ 0x30
 8007c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c4e:	e841 2300 	strex	r3, r2, [r1]
 8007c52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1e5      	bne.n	8007c26 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	330c      	adds	r3, #12
 8007c60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	e853 3f00 	ldrex	r3, [r3]
 8007c68:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c70:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	330c      	adds	r3, #12
 8007c78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c7a:	61fa      	str	r2, [r7, #28]
 8007c7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7e:	69b9      	ldr	r1, [r7, #24]
 8007c80:	69fa      	ldr	r2, [r7, #28]
 8007c82:	e841 2300 	strex	r3, r2, [r1]
 8007c86:	617b      	str	r3, [r7, #20]
   return(result);
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1e5      	bne.n	8007c5a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c8e:	e002      	b.n	8007c96 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007c90:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007c92:	f7fb f971 	bl	8002f78 <HAL_UART_TxCpltCallback>
}
 8007c96:	bf00      	nop
 8007c98:	3740      	adds	r7, #64	@ 0x40
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b084      	sub	sp, #16
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007caa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f7ff ff7f 	bl	8007bb0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cb2:	bf00      	nop
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b09c      	sub	sp, #112	@ 0x70
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cc6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d172      	bne.n	8007dbc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007cd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cd8:	2200      	movs	r2, #0
 8007cda:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	330c      	adds	r3, #12
 8007ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ce6:	e853 3f00 	ldrex	r3, [r3]
 8007cea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007cec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cf2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007cf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	330c      	adds	r3, #12
 8007cfa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007cfc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007cfe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d04:	e841 2300 	strex	r3, r2, [r1]
 8007d08:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1e5      	bne.n	8007cdc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	3314      	adds	r3, #20
 8007d16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d1a:	e853 3f00 	ldrex	r3, [r3]
 8007d1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d22:	f023 0301 	bic.w	r3, r3, #1
 8007d26:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	3314      	adds	r3, #20
 8007d2e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007d30:	647a      	str	r2, [r7, #68]	@ 0x44
 8007d32:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d38:	e841 2300 	strex	r3, r2, [r1]
 8007d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1e5      	bne.n	8007d10 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	3314      	adds	r3, #20
 8007d4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d4e:	e853 3f00 	ldrex	r3, [r3]
 8007d52:	623b      	str	r3, [r7, #32]
   return(result);
 8007d54:	6a3b      	ldr	r3, [r7, #32]
 8007d56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d5a:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	3314      	adds	r3, #20
 8007d62:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007d64:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d6c:	e841 2300 	strex	r3, r2, [r1]
 8007d70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1e5      	bne.n	8007d44 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007d78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d7a:	2220      	movs	r2, #32
 8007d7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d119      	bne.n	8007dbc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	330c      	adds	r3, #12
 8007d8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	e853 3f00 	ldrex	r3, [r3]
 8007d96:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f023 0310 	bic.w	r3, r3, #16
 8007d9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007da0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	330c      	adds	r3, #12
 8007da6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007da8:	61fa      	str	r2, [r7, #28]
 8007daa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dac:	69b9      	ldr	r1, [r7, #24]
 8007dae:	69fa      	ldr	r2, [r7, #28]
 8007db0:	e841 2300 	strex	r3, r2, [r1]
 8007db4:	617b      	str	r3, [r7, #20]
   return(result);
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1e5      	bne.n	8007d88 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d106      	bne.n	8007dd8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007dcc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007dce:	4619      	mov	r1, r3
 8007dd0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007dd2:	f7ff ff0b 	bl	8007bec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007dd6:	e002      	b.n	8007dde <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007dd8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007dda:	f7fb f8e5 	bl	8002fa8 <HAL_UART_RxCpltCallback>
}
 8007dde:	bf00      	nop
 8007de0:	3770      	adds	r7, #112	@ 0x70
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b084      	sub	sp, #16
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2201      	movs	r2, #1
 8007df8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d108      	bne.n	8007e14 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007e06:	085b      	lsrs	r3, r3, #1
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f7ff feed 	bl	8007bec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e12:	e002      	b.n	8007e1a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f7ff fed5 	bl	8007bc4 <HAL_UART_RxHalfCpltCallback>
}
 8007e1a:	bf00      	nop
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b084      	sub	sp, #16
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e32:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	695b      	ldr	r3, [r3, #20]
 8007e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e3e:	2b80      	cmp	r3, #128	@ 0x80
 8007e40:	bf0c      	ite	eq
 8007e42:	2301      	moveq	r3, #1
 8007e44:	2300      	movne	r3, #0
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	2b21      	cmp	r3, #33	@ 0x21
 8007e54:	d108      	bne.n	8007e68 <UART_DMAError+0x46>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d005      	beq.n	8007e68 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007e62:	68b8      	ldr	r0, [r7, #8]
 8007e64:	f000 f8c2 	bl	8007fec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e72:	2b40      	cmp	r3, #64	@ 0x40
 8007e74:	bf0c      	ite	eq
 8007e76:	2301      	moveq	r3, #1
 8007e78:	2300      	movne	r3, #0
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	2b22      	cmp	r3, #34	@ 0x22
 8007e88:	d108      	bne.n	8007e9c <UART_DMAError+0x7a>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d005      	beq.n	8007e9c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	2200      	movs	r2, #0
 8007e94:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007e96:	68b8      	ldr	r0, [r7, #8]
 8007e98:	f000 f8d0 	bl	800803c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ea0:	f043 0210 	orr.w	r2, r3, #16
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ea8:	68b8      	ldr	r0, [r7, #8]
 8007eaa:	f7ff fe95 	bl	8007bd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007eae:	bf00      	nop
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
	...

08007eb8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b098      	sub	sp, #96	@ 0x60
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007ec6:	68ba      	ldr	r2, [r7, #8]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	88fa      	ldrh	r2, [r7, #6]
 8007ed0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2222      	movs	r2, #34	@ 0x22
 8007edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ee4:	4a3e      	ldr	r2, [pc, #248]	@ (8007fe0 <UART_Start_Receive_DMA+0x128>)
 8007ee6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eec:	4a3d      	ldr	r2, [pc, #244]	@ (8007fe4 <UART_Start_Receive_DMA+0x12c>)
 8007eee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ef4:	4a3c      	ldr	r2, [pc, #240]	@ (8007fe8 <UART_Start_Receive_DMA+0x130>)
 8007ef6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007efc:	2200      	movs	r2, #0
 8007efe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007f00:	f107 0308 	add.w	r3, r7, #8
 8007f04:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	3304      	adds	r3, #4
 8007f10:	4619      	mov	r1, r3
 8007f12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	88fb      	ldrh	r3, [r7, #6]
 8007f18:	f7fc fc94 	bl	8004844 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	613b      	str	r3, [r7, #16]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	613b      	str	r3, [r7, #16]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	613b      	str	r3, [r7, #16]
 8007f30:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d019      	beq.n	8007f6e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	330c      	adds	r3, #12
 8007f40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f44:	e853 3f00 	ldrex	r3, [r3]
 8007f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	330c      	adds	r3, #12
 8007f58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f5a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007f5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007f60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007f62:	e841 2300 	strex	r3, r2, [r1]
 8007f66:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007f68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1e5      	bne.n	8007f3a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	3314      	adds	r3, #20
 8007f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f78:	e853 3f00 	ldrex	r3, [r3]
 8007f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f80:	f043 0301 	orr.w	r3, r3, #1
 8007f84:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	3314      	adds	r3, #20
 8007f8c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007f8e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007f90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f92:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007f94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f96:	e841 2300 	strex	r3, r2, [r1]
 8007f9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1e5      	bne.n	8007f6e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	3314      	adds	r3, #20
 8007fa8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	e853 3f00 	ldrex	r3, [r3]
 8007fb0:	617b      	str	r3, [r7, #20]
   return(result);
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fb8:	653b      	str	r3, [r7, #80]	@ 0x50
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	3314      	adds	r3, #20
 8007fc0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007fc2:	627a      	str	r2, [r7, #36]	@ 0x24
 8007fc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc6:	6a39      	ldr	r1, [r7, #32]
 8007fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fca:	e841 2300 	strex	r3, r2, [r1]
 8007fce:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1e5      	bne.n	8007fa2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3760      	adds	r7, #96	@ 0x60
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	08007cbb 	.word	0x08007cbb
 8007fe4:	08007de7 	.word	0x08007de7
 8007fe8:	08007e23 	.word	0x08007e23

08007fec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b089      	sub	sp, #36	@ 0x24
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	330c      	adds	r3, #12
 8007ffa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	e853 3f00 	ldrex	r3, [r3]
 8008002:	60bb      	str	r3, [r7, #8]
   return(result);
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800800a:	61fb      	str	r3, [r7, #28]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	330c      	adds	r3, #12
 8008012:	69fa      	ldr	r2, [r7, #28]
 8008014:	61ba      	str	r2, [r7, #24]
 8008016:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008018:	6979      	ldr	r1, [r7, #20]
 800801a:	69ba      	ldr	r2, [r7, #24]
 800801c:	e841 2300 	strex	r3, r2, [r1]
 8008020:	613b      	str	r3, [r7, #16]
   return(result);
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1e5      	bne.n	8007ff4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2220      	movs	r2, #32
 800802c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8008030:	bf00      	nop
 8008032:	3724      	adds	r7, #36	@ 0x24
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800803c:	b480      	push	{r7}
 800803e:	b095      	sub	sp, #84	@ 0x54
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	330c      	adds	r3, #12
 800804a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800804e:	e853 3f00 	ldrex	r3, [r3]
 8008052:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008056:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800805a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	330c      	adds	r3, #12
 8008062:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008064:	643a      	str	r2, [r7, #64]	@ 0x40
 8008066:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008068:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800806a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800806c:	e841 2300 	strex	r3, r2, [r1]
 8008070:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008074:	2b00      	cmp	r3, #0
 8008076:	d1e5      	bne.n	8008044 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	3314      	adds	r3, #20
 800807e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008080:	6a3b      	ldr	r3, [r7, #32]
 8008082:	e853 3f00 	ldrex	r3, [r3]
 8008086:	61fb      	str	r3, [r7, #28]
   return(result);
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	f023 0301 	bic.w	r3, r3, #1
 800808e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	3314      	adds	r3, #20
 8008096:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008098:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800809a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800809e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080a0:	e841 2300 	strex	r3, r2, [r1]
 80080a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80080a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d1e5      	bne.n	8008078 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d119      	bne.n	80080e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	330c      	adds	r3, #12
 80080ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	e853 3f00 	ldrex	r3, [r3]
 80080c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	f023 0310 	bic.w	r3, r3, #16
 80080ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	330c      	adds	r3, #12
 80080d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080d4:	61ba      	str	r2, [r7, #24]
 80080d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d8:	6979      	ldr	r1, [r7, #20]
 80080da:	69ba      	ldr	r2, [r7, #24]
 80080dc:	e841 2300 	strex	r3, r2, [r1]
 80080e0:	613b      	str	r3, [r7, #16]
   return(result);
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d1e5      	bne.n	80080b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2220      	movs	r2, #32
 80080ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80080f6:	bf00      	nop
 80080f8:	3754      	adds	r7, #84	@ 0x54
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr

08008102 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b084      	sub	sp, #16
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800810e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2200      	movs	r2, #0
 8008114:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2200      	movs	r2, #0
 800811a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800811c:	68f8      	ldr	r0, [r7, #12]
 800811e:	f7ff fd5b 	bl	8007bd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008122:	bf00      	nop
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800812a:	b480      	push	{r7}
 800812c:	b085      	sub	sp, #20
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008138:	b2db      	uxtb	r3, r3
 800813a:	2b21      	cmp	r3, #33	@ 0x21
 800813c:	d13e      	bne.n	80081bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008146:	d114      	bne.n	8008172 <UART_Transmit_IT+0x48>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d110      	bne.n	8008172 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a1b      	ldr	r3, [r3, #32]
 8008154:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	881b      	ldrh	r3, [r3, #0]
 800815a:	461a      	mov	r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008164:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a1b      	ldr	r3, [r3, #32]
 800816a:	1c9a      	adds	r2, r3, #2
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	621a      	str	r2, [r3, #32]
 8008170:	e008      	b.n	8008184 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a1b      	ldr	r3, [r3, #32]
 8008176:	1c59      	adds	r1, r3, #1
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	6211      	str	r1, [r2, #32]
 800817c:	781a      	ldrb	r2, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008188:	b29b      	uxth	r3, r3
 800818a:	3b01      	subs	r3, #1
 800818c:	b29b      	uxth	r3, r3
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	4619      	mov	r1, r3
 8008192:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10f      	bne.n	80081b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68da      	ldr	r2, [r3, #12]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80081a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	68da      	ldr	r2, [r3, #12]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	e000      	b.n	80081be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80081bc:	2302      	movs	r3, #2
  }
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3714      	adds	r7, #20
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr

080081ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b082      	sub	sp, #8
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68da      	ldr	r2, [r3, #12]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2220      	movs	r2, #32
 80081e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f7fa fec4 	bl	8002f78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b08c      	sub	sp, #48	@ 0x30
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008208:	b2db      	uxtb	r3, r3
 800820a:	2b22      	cmp	r3, #34	@ 0x22
 800820c:	f040 80ae 	bne.w	800836c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008218:	d117      	bne.n	800824a <UART_Receive_IT+0x50>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	691b      	ldr	r3, [r3, #16]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d113      	bne.n	800824a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008222:	2300      	movs	r3, #0
 8008224:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800822a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	b29b      	uxth	r3, r3
 8008234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008238:	b29a      	uxth	r2, r3
 800823a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800823c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008242:	1c9a      	adds	r2, r3, #2
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	629a      	str	r2, [r3, #40]	@ 0x28
 8008248:	e026      	b.n	8008298 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800824e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008250:	2300      	movs	r3, #0
 8008252:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800825c:	d007      	beq.n	800826e <UART_Receive_IT+0x74>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10a      	bne.n	800827c <UART_Receive_IT+0x82>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d106      	bne.n	800827c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	b2da      	uxtb	r2, r3
 8008276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008278:	701a      	strb	r2, [r3, #0]
 800827a:	e008      	b.n	800828e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	b2db      	uxtb	r3, r3
 8008284:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008288:	b2da      	uxtb	r2, r3
 800828a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800828c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008292:	1c5a      	adds	r2, r3, #1
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800829c:	b29b      	uxth	r3, r3
 800829e:	3b01      	subs	r3, #1
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	4619      	mov	r1, r3
 80082a6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d15d      	bne.n	8008368 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68da      	ldr	r2, [r3, #12]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f022 0220 	bic.w	r2, r2, #32
 80082ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68da      	ldr	r2, [r3, #12]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80082ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	695a      	ldr	r2, [r3, #20]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f022 0201 	bic.w	r2, r2, #1
 80082da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2220      	movs	r2, #32
 80082e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d135      	bne.n	800835e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	330c      	adds	r3, #12
 80082fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	e853 3f00 	ldrex	r3, [r3]
 8008306:	613b      	str	r3, [r7, #16]
   return(result);
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	f023 0310 	bic.w	r3, r3, #16
 800830e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	330c      	adds	r3, #12
 8008316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008318:	623a      	str	r2, [r7, #32]
 800831a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831c:	69f9      	ldr	r1, [r7, #28]
 800831e:	6a3a      	ldr	r2, [r7, #32]
 8008320:	e841 2300 	strex	r3, r2, [r1]
 8008324:	61bb      	str	r3, [r7, #24]
   return(result);
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1e5      	bne.n	80082f8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 0310 	and.w	r3, r3, #16
 8008336:	2b10      	cmp	r3, #16
 8008338:	d10a      	bne.n	8008350 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800833a:	2300      	movs	r3, #0
 800833c:	60fb      	str	r3, [r7, #12]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	60fb      	str	r3, [r7, #12]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	60fb      	str	r3, [r7, #12]
 800834e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008354:	4619      	mov	r1, r3
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f7ff fc48 	bl	8007bec <HAL_UARTEx_RxEventCallback>
 800835c:	e002      	b.n	8008364 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f7fa fe22 	bl	8002fa8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008364:	2300      	movs	r3, #0
 8008366:	e002      	b.n	800836e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008368:	2300      	movs	r3, #0
 800836a:	e000      	b.n	800836e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800836c:	2302      	movs	r3, #2
  }
}
 800836e:	4618      	mov	r0, r3
 8008370:	3730      	adds	r7, #48	@ 0x30
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
	...

08008378 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800837c:	b0c0      	sub	sp, #256	@ 0x100
 800837e:	af00      	add	r7, sp, #0
 8008380:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008394:	68d9      	ldr	r1, [r3, #12]
 8008396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	ea40 0301 	orr.w	r3, r0, r1
 80083a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80083a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083a6:	689a      	ldr	r2, [r3, #8]
 80083a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	431a      	orrs	r2, r3
 80083b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083b4:	695b      	ldr	r3, [r3, #20]
 80083b6:	431a      	orrs	r2, r3
 80083b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083bc:	69db      	ldr	r3, [r3, #28]
 80083be:	4313      	orrs	r3, r2
 80083c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80083c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	68db      	ldr	r3, [r3, #12]
 80083cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80083d0:	f021 010c 	bic.w	r1, r1, #12
 80083d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80083de:	430b      	orrs	r3, r1
 80083e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80083e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80083ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083f2:	6999      	ldr	r1, [r3, #24]
 80083f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	ea40 0301 	orr.w	r3, r0, r1
 80083fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	4b8f      	ldr	r3, [pc, #572]	@ (8008644 <UART_SetConfig+0x2cc>)
 8008408:	429a      	cmp	r2, r3
 800840a:	d005      	beq.n	8008418 <UART_SetConfig+0xa0>
 800840c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	4b8d      	ldr	r3, [pc, #564]	@ (8008648 <UART_SetConfig+0x2d0>)
 8008414:	429a      	cmp	r2, r3
 8008416:	d104      	bne.n	8008422 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008418:	f7fe fb5e 	bl	8006ad8 <HAL_RCC_GetPCLK2Freq>
 800841c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008420:	e003      	b.n	800842a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008422:	f7fe fb45 	bl	8006ab0 <HAL_RCC_GetPCLK1Freq>
 8008426:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800842a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800842e:	69db      	ldr	r3, [r3, #28]
 8008430:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008434:	f040 810c 	bne.w	8008650 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800843c:	2200      	movs	r2, #0
 800843e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008442:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008446:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800844a:	4622      	mov	r2, r4
 800844c:	462b      	mov	r3, r5
 800844e:	1891      	adds	r1, r2, r2
 8008450:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008452:	415b      	adcs	r3, r3
 8008454:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008456:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800845a:	4621      	mov	r1, r4
 800845c:	eb12 0801 	adds.w	r8, r2, r1
 8008460:	4629      	mov	r1, r5
 8008462:	eb43 0901 	adc.w	r9, r3, r1
 8008466:	f04f 0200 	mov.w	r2, #0
 800846a:	f04f 0300 	mov.w	r3, #0
 800846e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008472:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008476:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800847a:	4690      	mov	r8, r2
 800847c:	4699      	mov	r9, r3
 800847e:	4623      	mov	r3, r4
 8008480:	eb18 0303 	adds.w	r3, r8, r3
 8008484:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008488:	462b      	mov	r3, r5
 800848a:	eb49 0303 	adc.w	r3, r9, r3
 800848e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800849e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80084a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80084a6:	460b      	mov	r3, r1
 80084a8:	18db      	adds	r3, r3, r3
 80084aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80084ac:	4613      	mov	r3, r2
 80084ae:	eb42 0303 	adc.w	r3, r2, r3
 80084b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80084b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80084b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80084bc:	f7f8 fba4 	bl	8000c08 <__aeabi_uldivmod>
 80084c0:	4602      	mov	r2, r0
 80084c2:	460b      	mov	r3, r1
 80084c4:	4b61      	ldr	r3, [pc, #388]	@ (800864c <UART_SetConfig+0x2d4>)
 80084c6:	fba3 2302 	umull	r2, r3, r3, r2
 80084ca:	095b      	lsrs	r3, r3, #5
 80084cc:	011c      	lsls	r4, r3, #4
 80084ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80084d2:	2200      	movs	r2, #0
 80084d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80084d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80084dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80084e0:	4642      	mov	r2, r8
 80084e2:	464b      	mov	r3, r9
 80084e4:	1891      	adds	r1, r2, r2
 80084e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80084e8:	415b      	adcs	r3, r3
 80084ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80084f0:	4641      	mov	r1, r8
 80084f2:	eb12 0a01 	adds.w	sl, r2, r1
 80084f6:	4649      	mov	r1, r9
 80084f8:	eb43 0b01 	adc.w	fp, r3, r1
 80084fc:	f04f 0200 	mov.w	r2, #0
 8008500:	f04f 0300 	mov.w	r3, #0
 8008504:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008508:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800850c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008510:	4692      	mov	sl, r2
 8008512:	469b      	mov	fp, r3
 8008514:	4643      	mov	r3, r8
 8008516:	eb1a 0303 	adds.w	r3, sl, r3
 800851a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800851e:	464b      	mov	r3, r9
 8008520:	eb4b 0303 	adc.w	r3, fp, r3
 8008524:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008534:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008538:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800853c:	460b      	mov	r3, r1
 800853e:	18db      	adds	r3, r3, r3
 8008540:	643b      	str	r3, [r7, #64]	@ 0x40
 8008542:	4613      	mov	r3, r2
 8008544:	eb42 0303 	adc.w	r3, r2, r3
 8008548:	647b      	str	r3, [r7, #68]	@ 0x44
 800854a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800854e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008552:	f7f8 fb59 	bl	8000c08 <__aeabi_uldivmod>
 8008556:	4602      	mov	r2, r0
 8008558:	460b      	mov	r3, r1
 800855a:	4611      	mov	r1, r2
 800855c:	4b3b      	ldr	r3, [pc, #236]	@ (800864c <UART_SetConfig+0x2d4>)
 800855e:	fba3 2301 	umull	r2, r3, r3, r1
 8008562:	095b      	lsrs	r3, r3, #5
 8008564:	2264      	movs	r2, #100	@ 0x64
 8008566:	fb02 f303 	mul.w	r3, r2, r3
 800856a:	1acb      	subs	r3, r1, r3
 800856c:	00db      	lsls	r3, r3, #3
 800856e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008572:	4b36      	ldr	r3, [pc, #216]	@ (800864c <UART_SetConfig+0x2d4>)
 8008574:	fba3 2302 	umull	r2, r3, r3, r2
 8008578:	095b      	lsrs	r3, r3, #5
 800857a:	005b      	lsls	r3, r3, #1
 800857c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008580:	441c      	add	r4, r3
 8008582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008586:	2200      	movs	r2, #0
 8008588:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800858c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008590:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008594:	4642      	mov	r2, r8
 8008596:	464b      	mov	r3, r9
 8008598:	1891      	adds	r1, r2, r2
 800859a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800859c:	415b      	adcs	r3, r3
 800859e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80085a4:	4641      	mov	r1, r8
 80085a6:	1851      	adds	r1, r2, r1
 80085a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80085aa:	4649      	mov	r1, r9
 80085ac:	414b      	adcs	r3, r1
 80085ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80085b0:	f04f 0200 	mov.w	r2, #0
 80085b4:	f04f 0300 	mov.w	r3, #0
 80085b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80085bc:	4659      	mov	r1, fp
 80085be:	00cb      	lsls	r3, r1, #3
 80085c0:	4651      	mov	r1, sl
 80085c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085c6:	4651      	mov	r1, sl
 80085c8:	00ca      	lsls	r2, r1, #3
 80085ca:	4610      	mov	r0, r2
 80085cc:	4619      	mov	r1, r3
 80085ce:	4603      	mov	r3, r0
 80085d0:	4642      	mov	r2, r8
 80085d2:	189b      	adds	r3, r3, r2
 80085d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80085d8:	464b      	mov	r3, r9
 80085da:	460a      	mov	r2, r1
 80085dc:	eb42 0303 	adc.w	r3, r2, r3
 80085e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80085e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80085f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80085f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80085f8:	460b      	mov	r3, r1
 80085fa:	18db      	adds	r3, r3, r3
 80085fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085fe:	4613      	mov	r3, r2
 8008600:	eb42 0303 	adc.w	r3, r2, r3
 8008604:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008606:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800860a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800860e:	f7f8 fafb 	bl	8000c08 <__aeabi_uldivmod>
 8008612:	4602      	mov	r2, r0
 8008614:	460b      	mov	r3, r1
 8008616:	4b0d      	ldr	r3, [pc, #52]	@ (800864c <UART_SetConfig+0x2d4>)
 8008618:	fba3 1302 	umull	r1, r3, r3, r2
 800861c:	095b      	lsrs	r3, r3, #5
 800861e:	2164      	movs	r1, #100	@ 0x64
 8008620:	fb01 f303 	mul.w	r3, r1, r3
 8008624:	1ad3      	subs	r3, r2, r3
 8008626:	00db      	lsls	r3, r3, #3
 8008628:	3332      	adds	r3, #50	@ 0x32
 800862a:	4a08      	ldr	r2, [pc, #32]	@ (800864c <UART_SetConfig+0x2d4>)
 800862c:	fba2 2303 	umull	r2, r3, r2, r3
 8008630:	095b      	lsrs	r3, r3, #5
 8008632:	f003 0207 	and.w	r2, r3, #7
 8008636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4422      	add	r2, r4
 800863e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008640:	e106      	b.n	8008850 <UART_SetConfig+0x4d8>
 8008642:	bf00      	nop
 8008644:	40011000 	.word	0x40011000
 8008648:	40011400 	.word	0x40011400
 800864c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008650:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008654:	2200      	movs	r2, #0
 8008656:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800865a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800865e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008662:	4642      	mov	r2, r8
 8008664:	464b      	mov	r3, r9
 8008666:	1891      	adds	r1, r2, r2
 8008668:	6239      	str	r1, [r7, #32]
 800866a:	415b      	adcs	r3, r3
 800866c:	627b      	str	r3, [r7, #36]	@ 0x24
 800866e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008672:	4641      	mov	r1, r8
 8008674:	1854      	adds	r4, r2, r1
 8008676:	4649      	mov	r1, r9
 8008678:	eb43 0501 	adc.w	r5, r3, r1
 800867c:	f04f 0200 	mov.w	r2, #0
 8008680:	f04f 0300 	mov.w	r3, #0
 8008684:	00eb      	lsls	r3, r5, #3
 8008686:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800868a:	00e2      	lsls	r2, r4, #3
 800868c:	4614      	mov	r4, r2
 800868e:	461d      	mov	r5, r3
 8008690:	4643      	mov	r3, r8
 8008692:	18e3      	adds	r3, r4, r3
 8008694:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008698:	464b      	mov	r3, r9
 800869a:	eb45 0303 	adc.w	r3, r5, r3
 800869e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80086a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80086ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80086b2:	f04f 0200 	mov.w	r2, #0
 80086b6:	f04f 0300 	mov.w	r3, #0
 80086ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80086be:	4629      	mov	r1, r5
 80086c0:	008b      	lsls	r3, r1, #2
 80086c2:	4621      	mov	r1, r4
 80086c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086c8:	4621      	mov	r1, r4
 80086ca:	008a      	lsls	r2, r1, #2
 80086cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80086d0:	f7f8 fa9a 	bl	8000c08 <__aeabi_uldivmod>
 80086d4:	4602      	mov	r2, r0
 80086d6:	460b      	mov	r3, r1
 80086d8:	4b60      	ldr	r3, [pc, #384]	@ (800885c <UART_SetConfig+0x4e4>)
 80086da:	fba3 2302 	umull	r2, r3, r3, r2
 80086de:	095b      	lsrs	r3, r3, #5
 80086e0:	011c      	lsls	r4, r3, #4
 80086e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80086e6:	2200      	movs	r2, #0
 80086e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80086ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80086f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80086f4:	4642      	mov	r2, r8
 80086f6:	464b      	mov	r3, r9
 80086f8:	1891      	adds	r1, r2, r2
 80086fa:	61b9      	str	r1, [r7, #24]
 80086fc:	415b      	adcs	r3, r3
 80086fe:	61fb      	str	r3, [r7, #28]
 8008700:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008704:	4641      	mov	r1, r8
 8008706:	1851      	adds	r1, r2, r1
 8008708:	6139      	str	r1, [r7, #16]
 800870a:	4649      	mov	r1, r9
 800870c:	414b      	adcs	r3, r1
 800870e:	617b      	str	r3, [r7, #20]
 8008710:	f04f 0200 	mov.w	r2, #0
 8008714:	f04f 0300 	mov.w	r3, #0
 8008718:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800871c:	4659      	mov	r1, fp
 800871e:	00cb      	lsls	r3, r1, #3
 8008720:	4651      	mov	r1, sl
 8008722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008726:	4651      	mov	r1, sl
 8008728:	00ca      	lsls	r2, r1, #3
 800872a:	4610      	mov	r0, r2
 800872c:	4619      	mov	r1, r3
 800872e:	4603      	mov	r3, r0
 8008730:	4642      	mov	r2, r8
 8008732:	189b      	adds	r3, r3, r2
 8008734:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008738:	464b      	mov	r3, r9
 800873a:	460a      	mov	r2, r1
 800873c:	eb42 0303 	adc.w	r3, r2, r3
 8008740:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800874e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008750:	f04f 0200 	mov.w	r2, #0
 8008754:	f04f 0300 	mov.w	r3, #0
 8008758:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800875c:	4649      	mov	r1, r9
 800875e:	008b      	lsls	r3, r1, #2
 8008760:	4641      	mov	r1, r8
 8008762:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008766:	4641      	mov	r1, r8
 8008768:	008a      	lsls	r2, r1, #2
 800876a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800876e:	f7f8 fa4b 	bl	8000c08 <__aeabi_uldivmod>
 8008772:	4602      	mov	r2, r0
 8008774:	460b      	mov	r3, r1
 8008776:	4611      	mov	r1, r2
 8008778:	4b38      	ldr	r3, [pc, #224]	@ (800885c <UART_SetConfig+0x4e4>)
 800877a:	fba3 2301 	umull	r2, r3, r3, r1
 800877e:	095b      	lsrs	r3, r3, #5
 8008780:	2264      	movs	r2, #100	@ 0x64
 8008782:	fb02 f303 	mul.w	r3, r2, r3
 8008786:	1acb      	subs	r3, r1, r3
 8008788:	011b      	lsls	r3, r3, #4
 800878a:	3332      	adds	r3, #50	@ 0x32
 800878c:	4a33      	ldr	r2, [pc, #204]	@ (800885c <UART_SetConfig+0x4e4>)
 800878e:	fba2 2303 	umull	r2, r3, r2, r3
 8008792:	095b      	lsrs	r3, r3, #5
 8008794:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008798:	441c      	add	r4, r3
 800879a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800879e:	2200      	movs	r2, #0
 80087a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80087a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80087a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80087a8:	4642      	mov	r2, r8
 80087aa:	464b      	mov	r3, r9
 80087ac:	1891      	adds	r1, r2, r2
 80087ae:	60b9      	str	r1, [r7, #8]
 80087b0:	415b      	adcs	r3, r3
 80087b2:	60fb      	str	r3, [r7, #12]
 80087b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80087b8:	4641      	mov	r1, r8
 80087ba:	1851      	adds	r1, r2, r1
 80087bc:	6039      	str	r1, [r7, #0]
 80087be:	4649      	mov	r1, r9
 80087c0:	414b      	adcs	r3, r1
 80087c2:	607b      	str	r3, [r7, #4]
 80087c4:	f04f 0200 	mov.w	r2, #0
 80087c8:	f04f 0300 	mov.w	r3, #0
 80087cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80087d0:	4659      	mov	r1, fp
 80087d2:	00cb      	lsls	r3, r1, #3
 80087d4:	4651      	mov	r1, sl
 80087d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80087da:	4651      	mov	r1, sl
 80087dc:	00ca      	lsls	r2, r1, #3
 80087de:	4610      	mov	r0, r2
 80087e0:	4619      	mov	r1, r3
 80087e2:	4603      	mov	r3, r0
 80087e4:	4642      	mov	r2, r8
 80087e6:	189b      	adds	r3, r3, r2
 80087e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80087ea:	464b      	mov	r3, r9
 80087ec:	460a      	mov	r2, r1
 80087ee:	eb42 0303 	adc.w	r3, r2, r3
 80087f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80087f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80087fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8008800:	f04f 0200 	mov.w	r2, #0
 8008804:	f04f 0300 	mov.w	r3, #0
 8008808:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800880c:	4649      	mov	r1, r9
 800880e:	008b      	lsls	r3, r1, #2
 8008810:	4641      	mov	r1, r8
 8008812:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008816:	4641      	mov	r1, r8
 8008818:	008a      	lsls	r2, r1, #2
 800881a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800881e:	f7f8 f9f3 	bl	8000c08 <__aeabi_uldivmod>
 8008822:	4602      	mov	r2, r0
 8008824:	460b      	mov	r3, r1
 8008826:	4b0d      	ldr	r3, [pc, #52]	@ (800885c <UART_SetConfig+0x4e4>)
 8008828:	fba3 1302 	umull	r1, r3, r3, r2
 800882c:	095b      	lsrs	r3, r3, #5
 800882e:	2164      	movs	r1, #100	@ 0x64
 8008830:	fb01 f303 	mul.w	r3, r1, r3
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	011b      	lsls	r3, r3, #4
 8008838:	3332      	adds	r3, #50	@ 0x32
 800883a:	4a08      	ldr	r2, [pc, #32]	@ (800885c <UART_SetConfig+0x4e4>)
 800883c:	fba2 2303 	umull	r2, r3, r2, r3
 8008840:	095b      	lsrs	r3, r3, #5
 8008842:	f003 020f 	and.w	r2, r3, #15
 8008846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4422      	add	r2, r4
 800884e:	609a      	str	r2, [r3, #8]
}
 8008850:	bf00      	nop
 8008852:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008856:	46bd      	mov	sp, r7
 8008858:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800885c:	51eb851f 	.word	0x51eb851f

08008860 <asin>:
 8008860:	b538      	push	{r3, r4, r5, lr}
 8008862:	ed2d 8b02 	vpush	{d8}
 8008866:	ec55 4b10 	vmov	r4, r5, d0
 800886a:	f000 f92d 	bl	8008ac8 <__ieee754_asin>
 800886e:	4622      	mov	r2, r4
 8008870:	462b      	mov	r3, r5
 8008872:	4620      	mov	r0, r4
 8008874:	4629      	mov	r1, r5
 8008876:	eeb0 8a40 	vmov.f32	s16, s0
 800887a:	eef0 8a60 	vmov.f32	s17, s1
 800887e:	f7f8 f95d 	bl	8000b3c <__aeabi_dcmpun>
 8008882:	b9a8      	cbnz	r0, 80088b0 <asin+0x50>
 8008884:	ec45 4b10 	vmov	d0, r4, r5
 8008888:	f000 f820 	bl	80088cc <fabs>
 800888c:	4b0c      	ldr	r3, [pc, #48]	@ (80088c0 <asin+0x60>)
 800888e:	ec51 0b10 	vmov	r0, r1, d0
 8008892:	2200      	movs	r2, #0
 8008894:	f7f8 f948 	bl	8000b28 <__aeabi_dcmpgt>
 8008898:	b150      	cbz	r0, 80088b0 <asin+0x50>
 800889a:	f001 f807 	bl	80098ac <__errno>
 800889e:	ecbd 8b02 	vpop	{d8}
 80088a2:	2321      	movs	r3, #33	@ 0x21
 80088a4:	6003      	str	r3, [r0, #0]
 80088a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088aa:	4806      	ldr	r0, [pc, #24]	@ (80088c4 <asin+0x64>)
 80088ac:	f000 b828 	b.w	8008900 <nan>
 80088b0:	eeb0 0a48 	vmov.f32	s0, s16
 80088b4:	eef0 0a68 	vmov.f32	s1, s17
 80088b8:	ecbd 8b02 	vpop	{d8}
 80088bc:	bd38      	pop	{r3, r4, r5, pc}
 80088be:	bf00      	nop
 80088c0:	3ff00000 	.word	0x3ff00000
 80088c4:	0800a8d5 	.word	0x0800a8d5

080088c8 <atan2>:
 80088c8:	f000 bb02 	b.w	8008ed0 <__ieee754_atan2>

080088cc <fabs>:
 80088cc:	ec51 0b10 	vmov	r0, r1, d0
 80088d0:	4602      	mov	r2, r0
 80088d2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80088d6:	ec43 2b10 	vmov	d0, r2, r3
 80088da:	4770      	bx	lr

080088dc <copysign>:
 80088dc:	b082      	sub	sp, #8
 80088de:	ec51 0b10 	vmov	r0, r1, d0
 80088e2:	ed8d 1b00 	vstr	d1, [sp]
 80088e6:	4602      	mov	r2, r0
 80088e8:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 80088ec:	9901      	ldr	r1, [sp, #4]
 80088ee:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80088f2:	ea40 0301 	orr.w	r3, r0, r1
 80088f6:	ec43 2b10 	vmov	d0, r2, r3
 80088fa:	b002      	add	sp, #8
 80088fc:	4770      	bx	lr
	...

08008900 <nan>:
 8008900:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008908 <nan+0x8>
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop
 8008908:	00000000 	.word	0x00000000
 800890c:	7ff80000 	.word	0x7ff80000

08008910 <__ieee754_sqrt>:
 8008910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008914:	4a68      	ldr	r2, [pc, #416]	@ (8008ab8 <__ieee754_sqrt+0x1a8>)
 8008916:	ec55 4b10 	vmov	r4, r5, d0
 800891a:	43aa      	bics	r2, r5
 800891c:	462b      	mov	r3, r5
 800891e:	4621      	mov	r1, r4
 8008920:	d110      	bne.n	8008944 <__ieee754_sqrt+0x34>
 8008922:	4622      	mov	r2, r4
 8008924:	4620      	mov	r0, r4
 8008926:	4629      	mov	r1, r5
 8008928:	f7f7 fe6e 	bl	8000608 <__aeabi_dmul>
 800892c:	4602      	mov	r2, r0
 800892e:	460b      	mov	r3, r1
 8008930:	4620      	mov	r0, r4
 8008932:	4629      	mov	r1, r5
 8008934:	f7f7 fcb2 	bl	800029c <__adddf3>
 8008938:	4604      	mov	r4, r0
 800893a:	460d      	mov	r5, r1
 800893c:	ec45 4b10 	vmov	d0, r4, r5
 8008940:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008944:	2d00      	cmp	r5, #0
 8008946:	dc0e      	bgt.n	8008966 <__ieee754_sqrt+0x56>
 8008948:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800894c:	4322      	orrs	r2, r4
 800894e:	d0f5      	beq.n	800893c <__ieee754_sqrt+0x2c>
 8008950:	b19d      	cbz	r5, 800897a <__ieee754_sqrt+0x6a>
 8008952:	4622      	mov	r2, r4
 8008954:	4620      	mov	r0, r4
 8008956:	4629      	mov	r1, r5
 8008958:	f7f7 fc9e 	bl	8000298 <__aeabi_dsub>
 800895c:	4602      	mov	r2, r0
 800895e:	460b      	mov	r3, r1
 8008960:	f7f7 ff7c 	bl	800085c <__aeabi_ddiv>
 8008964:	e7e8      	b.n	8008938 <__ieee754_sqrt+0x28>
 8008966:	152a      	asrs	r2, r5, #20
 8008968:	d115      	bne.n	8008996 <__ieee754_sqrt+0x86>
 800896a:	2000      	movs	r0, #0
 800896c:	e009      	b.n	8008982 <__ieee754_sqrt+0x72>
 800896e:	0acb      	lsrs	r3, r1, #11
 8008970:	3a15      	subs	r2, #21
 8008972:	0549      	lsls	r1, r1, #21
 8008974:	2b00      	cmp	r3, #0
 8008976:	d0fa      	beq.n	800896e <__ieee754_sqrt+0x5e>
 8008978:	e7f7      	b.n	800896a <__ieee754_sqrt+0x5a>
 800897a:	462a      	mov	r2, r5
 800897c:	e7fa      	b.n	8008974 <__ieee754_sqrt+0x64>
 800897e:	005b      	lsls	r3, r3, #1
 8008980:	3001      	adds	r0, #1
 8008982:	02dc      	lsls	r4, r3, #11
 8008984:	d5fb      	bpl.n	800897e <__ieee754_sqrt+0x6e>
 8008986:	1e44      	subs	r4, r0, #1
 8008988:	1b12      	subs	r2, r2, r4
 800898a:	f1c0 0420 	rsb	r4, r0, #32
 800898e:	fa21 f404 	lsr.w	r4, r1, r4
 8008992:	4323      	orrs	r3, r4
 8008994:	4081      	lsls	r1, r0
 8008996:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800899a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800899e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80089a2:	07d2      	lsls	r2, r2, #31
 80089a4:	bf5c      	itt	pl
 80089a6:	005b      	lslpl	r3, r3, #1
 80089a8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80089ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80089b0:	bf58      	it	pl
 80089b2:	0049      	lslpl	r1, r1, #1
 80089b4:	2600      	movs	r6, #0
 80089b6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80089ba:	106d      	asrs	r5, r5, #1
 80089bc:	0049      	lsls	r1, r1, #1
 80089be:	2016      	movs	r0, #22
 80089c0:	4632      	mov	r2, r6
 80089c2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80089c6:	1917      	adds	r7, r2, r4
 80089c8:	429f      	cmp	r7, r3
 80089ca:	bfde      	ittt	le
 80089cc:	193a      	addle	r2, r7, r4
 80089ce:	1bdb      	suble	r3, r3, r7
 80089d0:	1936      	addle	r6, r6, r4
 80089d2:	0fcf      	lsrs	r7, r1, #31
 80089d4:	3801      	subs	r0, #1
 80089d6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80089da:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80089de:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80089e2:	d1f0      	bne.n	80089c6 <__ieee754_sqrt+0xb6>
 80089e4:	4604      	mov	r4, r0
 80089e6:	2720      	movs	r7, #32
 80089e8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80089ec:	429a      	cmp	r2, r3
 80089ee:	eb00 0e0c 	add.w	lr, r0, ip
 80089f2:	db02      	blt.n	80089fa <__ieee754_sqrt+0xea>
 80089f4:	d113      	bne.n	8008a1e <__ieee754_sqrt+0x10e>
 80089f6:	458e      	cmp	lr, r1
 80089f8:	d811      	bhi.n	8008a1e <__ieee754_sqrt+0x10e>
 80089fa:	f1be 0f00 	cmp.w	lr, #0
 80089fe:	eb0e 000c 	add.w	r0, lr, ip
 8008a02:	da42      	bge.n	8008a8a <__ieee754_sqrt+0x17a>
 8008a04:	2800      	cmp	r0, #0
 8008a06:	db40      	blt.n	8008a8a <__ieee754_sqrt+0x17a>
 8008a08:	f102 0801 	add.w	r8, r2, #1
 8008a0c:	1a9b      	subs	r3, r3, r2
 8008a0e:	458e      	cmp	lr, r1
 8008a10:	bf88      	it	hi
 8008a12:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8008a16:	eba1 010e 	sub.w	r1, r1, lr
 8008a1a:	4464      	add	r4, ip
 8008a1c:	4642      	mov	r2, r8
 8008a1e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8008a22:	3f01      	subs	r7, #1
 8008a24:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8008a28:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008a2c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008a30:	d1dc      	bne.n	80089ec <__ieee754_sqrt+0xdc>
 8008a32:	4319      	orrs	r1, r3
 8008a34:	d01b      	beq.n	8008a6e <__ieee754_sqrt+0x15e>
 8008a36:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8008abc <__ieee754_sqrt+0x1ac>
 8008a3a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8008ac0 <__ieee754_sqrt+0x1b0>
 8008a3e:	e9da 0100 	ldrd	r0, r1, [sl]
 8008a42:	e9db 2300 	ldrd	r2, r3, [fp]
 8008a46:	f7f7 fc27 	bl	8000298 <__aeabi_dsub>
 8008a4a:	e9da 8900 	ldrd	r8, r9, [sl]
 8008a4e:	4602      	mov	r2, r0
 8008a50:	460b      	mov	r3, r1
 8008a52:	4640      	mov	r0, r8
 8008a54:	4649      	mov	r1, r9
 8008a56:	f7f8 f853 	bl	8000b00 <__aeabi_dcmple>
 8008a5a:	b140      	cbz	r0, 8008a6e <__ieee754_sqrt+0x15e>
 8008a5c:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8008a60:	e9da 0100 	ldrd	r0, r1, [sl]
 8008a64:	e9db 2300 	ldrd	r2, r3, [fp]
 8008a68:	d111      	bne.n	8008a8e <__ieee754_sqrt+0x17e>
 8008a6a:	3601      	adds	r6, #1
 8008a6c:	463c      	mov	r4, r7
 8008a6e:	1072      	asrs	r2, r6, #1
 8008a70:	0863      	lsrs	r3, r4, #1
 8008a72:	07f1      	lsls	r1, r6, #31
 8008a74:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008a78:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8008a7c:	bf48      	it	mi
 8008a7e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8008a82:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8008a86:	4618      	mov	r0, r3
 8008a88:	e756      	b.n	8008938 <__ieee754_sqrt+0x28>
 8008a8a:	4690      	mov	r8, r2
 8008a8c:	e7be      	b.n	8008a0c <__ieee754_sqrt+0xfc>
 8008a8e:	f7f7 fc05 	bl	800029c <__adddf3>
 8008a92:	e9da 8900 	ldrd	r8, r9, [sl]
 8008a96:	4602      	mov	r2, r0
 8008a98:	460b      	mov	r3, r1
 8008a9a:	4640      	mov	r0, r8
 8008a9c:	4649      	mov	r1, r9
 8008a9e:	f7f8 f825 	bl	8000aec <__aeabi_dcmplt>
 8008aa2:	b120      	cbz	r0, 8008aae <__ieee754_sqrt+0x19e>
 8008aa4:	1ca0      	adds	r0, r4, #2
 8008aa6:	bf08      	it	eq
 8008aa8:	3601      	addeq	r6, #1
 8008aaa:	3402      	adds	r4, #2
 8008aac:	e7df      	b.n	8008a6e <__ieee754_sqrt+0x15e>
 8008aae:	1c63      	adds	r3, r4, #1
 8008ab0:	f023 0401 	bic.w	r4, r3, #1
 8008ab4:	e7db      	b.n	8008a6e <__ieee754_sqrt+0x15e>
 8008ab6:	bf00      	nop
 8008ab8:	7ff00000 	.word	0x7ff00000
 8008abc:	20000020 	.word	0x20000020
 8008ac0:	20000018 	.word	0x20000018
 8008ac4:	00000000 	.word	0x00000000

08008ac8 <__ieee754_asin>:
 8008ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008acc:	ec55 4b10 	vmov	r4, r5, d0
 8008ad0:	4bc7      	ldr	r3, [pc, #796]	@ (8008df0 <__ieee754_asin+0x328>)
 8008ad2:	b087      	sub	sp, #28
 8008ad4:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8008ad8:	429e      	cmp	r6, r3
 8008ada:	9501      	str	r5, [sp, #4]
 8008adc:	d92d      	bls.n	8008b3a <__ieee754_asin+0x72>
 8008ade:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8008ae2:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8008ae6:	4326      	orrs	r6, r4
 8008ae8:	d116      	bne.n	8008b18 <__ieee754_asin+0x50>
 8008aea:	a3a7      	add	r3, pc, #668	@ (adr r3, 8008d88 <__ieee754_asin+0x2c0>)
 8008aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af0:	4620      	mov	r0, r4
 8008af2:	4629      	mov	r1, r5
 8008af4:	f7f7 fd88 	bl	8000608 <__aeabi_dmul>
 8008af8:	a3a5      	add	r3, pc, #660	@ (adr r3, 8008d90 <__ieee754_asin+0x2c8>)
 8008afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afe:	4606      	mov	r6, r0
 8008b00:	460f      	mov	r7, r1
 8008b02:	4620      	mov	r0, r4
 8008b04:	4629      	mov	r1, r5
 8008b06:	f7f7 fd7f 	bl	8000608 <__aeabi_dmul>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	4630      	mov	r0, r6
 8008b10:	4639      	mov	r1, r7
 8008b12:	f7f7 fbc3 	bl	800029c <__adddf3>
 8008b16:	e009      	b.n	8008b2c <__ieee754_asin+0x64>
 8008b18:	4622      	mov	r2, r4
 8008b1a:	462b      	mov	r3, r5
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	4629      	mov	r1, r5
 8008b20:	f7f7 fbba 	bl	8000298 <__aeabi_dsub>
 8008b24:	4602      	mov	r2, r0
 8008b26:	460b      	mov	r3, r1
 8008b28:	f7f7 fe98 	bl	800085c <__aeabi_ddiv>
 8008b2c:	4604      	mov	r4, r0
 8008b2e:	460d      	mov	r5, r1
 8008b30:	ec45 4b10 	vmov	d0, r4, r5
 8008b34:	b007      	add	sp, #28
 8008b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b3a:	4bae      	ldr	r3, [pc, #696]	@ (8008df4 <__ieee754_asin+0x32c>)
 8008b3c:	429e      	cmp	r6, r3
 8008b3e:	d810      	bhi.n	8008b62 <__ieee754_asin+0x9a>
 8008b40:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8008b44:	f080 80ad 	bcs.w	8008ca2 <__ieee754_asin+0x1da>
 8008b48:	a393      	add	r3, pc, #588	@ (adr r3, 8008d98 <__ieee754_asin+0x2d0>)
 8008b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b4e:	4620      	mov	r0, r4
 8008b50:	4629      	mov	r1, r5
 8008b52:	f7f7 fba3 	bl	800029c <__adddf3>
 8008b56:	4ba8      	ldr	r3, [pc, #672]	@ (8008df8 <__ieee754_asin+0x330>)
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f7f7 ffe5 	bl	8000b28 <__aeabi_dcmpgt>
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	d1e6      	bne.n	8008b30 <__ieee754_asin+0x68>
 8008b62:	ec45 4b10 	vmov	d0, r4, r5
 8008b66:	f7ff feb1 	bl	80088cc <fabs>
 8008b6a:	49a3      	ldr	r1, [pc, #652]	@ (8008df8 <__ieee754_asin+0x330>)
 8008b6c:	ec53 2b10 	vmov	r2, r3, d0
 8008b70:	2000      	movs	r0, #0
 8008b72:	f7f7 fb91 	bl	8000298 <__aeabi_dsub>
 8008b76:	4ba1      	ldr	r3, [pc, #644]	@ (8008dfc <__ieee754_asin+0x334>)
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f7f7 fd45 	bl	8000608 <__aeabi_dmul>
 8008b7e:	a388      	add	r3, pc, #544	@ (adr r3, 8008da0 <__ieee754_asin+0x2d8>)
 8008b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b84:	4604      	mov	r4, r0
 8008b86:	460d      	mov	r5, r1
 8008b88:	f7f7 fd3e 	bl	8000608 <__aeabi_dmul>
 8008b8c:	a386      	add	r3, pc, #536	@ (adr r3, 8008da8 <__ieee754_asin+0x2e0>)
 8008b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b92:	f7f7 fb83 	bl	800029c <__adddf3>
 8008b96:	4622      	mov	r2, r4
 8008b98:	462b      	mov	r3, r5
 8008b9a:	f7f7 fd35 	bl	8000608 <__aeabi_dmul>
 8008b9e:	a384      	add	r3, pc, #528	@ (adr r3, 8008db0 <__ieee754_asin+0x2e8>)
 8008ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba4:	f7f7 fb78 	bl	8000298 <__aeabi_dsub>
 8008ba8:	4622      	mov	r2, r4
 8008baa:	462b      	mov	r3, r5
 8008bac:	f7f7 fd2c 	bl	8000608 <__aeabi_dmul>
 8008bb0:	a381      	add	r3, pc, #516	@ (adr r3, 8008db8 <__ieee754_asin+0x2f0>)
 8008bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb6:	f7f7 fb71 	bl	800029c <__adddf3>
 8008bba:	4622      	mov	r2, r4
 8008bbc:	462b      	mov	r3, r5
 8008bbe:	f7f7 fd23 	bl	8000608 <__aeabi_dmul>
 8008bc2:	a37f      	add	r3, pc, #508	@ (adr r3, 8008dc0 <__ieee754_asin+0x2f8>)
 8008bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc8:	f7f7 fb66 	bl	8000298 <__aeabi_dsub>
 8008bcc:	4622      	mov	r2, r4
 8008bce:	462b      	mov	r3, r5
 8008bd0:	f7f7 fd1a 	bl	8000608 <__aeabi_dmul>
 8008bd4:	a37c      	add	r3, pc, #496	@ (adr r3, 8008dc8 <__ieee754_asin+0x300>)
 8008bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bda:	f7f7 fb5f 	bl	800029c <__adddf3>
 8008bde:	4622      	mov	r2, r4
 8008be0:	462b      	mov	r3, r5
 8008be2:	f7f7 fd11 	bl	8000608 <__aeabi_dmul>
 8008be6:	a37a      	add	r3, pc, #488	@ (adr r3, 8008dd0 <__ieee754_asin+0x308>)
 8008be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	4629      	mov	r1, r5
 8008bf4:	f7f7 fd08 	bl	8000608 <__aeabi_dmul>
 8008bf8:	a377      	add	r3, pc, #476	@ (adr r3, 8008dd8 <__ieee754_asin+0x310>)
 8008bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfe:	f7f7 fb4b 	bl	8000298 <__aeabi_dsub>
 8008c02:	4622      	mov	r2, r4
 8008c04:	462b      	mov	r3, r5
 8008c06:	f7f7 fcff 	bl	8000608 <__aeabi_dmul>
 8008c0a:	a375      	add	r3, pc, #468	@ (adr r3, 8008de0 <__ieee754_asin+0x318>)
 8008c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c10:	f7f7 fb44 	bl	800029c <__adddf3>
 8008c14:	4622      	mov	r2, r4
 8008c16:	462b      	mov	r3, r5
 8008c18:	f7f7 fcf6 	bl	8000608 <__aeabi_dmul>
 8008c1c:	a372      	add	r3, pc, #456	@ (adr r3, 8008de8 <__ieee754_asin+0x320>)
 8008c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c22:	f7f7 fb39 	bl	8000298 <__aeabi_dsub>
 8008c26:	4622      	mov	r2, r4
 8008c28:	462b      	mov	r3, r5
 8008c2a:	f7f7 fced 	bl	8000608 <__aeabi_dmul>
 8008c2e:	4b72      	ldr	r3, [pc, #456]	@ (8008df8 <__ieee754_asin+0x330>)
 8008c30:	2200      	movs	r2, #0
 8008c32:	f7f7 fb33 	bl	800029c <__adddf3>
 8008c36:	ec45 4b10 	vmov	d0, r4, r5
 8008c3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c3e:	f7ff fe67 	bl	8008910 <__ieee754_sqrt>
 8008c42:	4b6f      	ldr	r3, [pc, #444]	@ (8008e00 <__ieee754_asin+0x338>)
 8008c44:	429e      	cmp	r6, r3
 8008c46:	ec5b ab10 	vmov	sl, fp, d0
 8008c4a:	f240 80db 	bls.w	8008e04 <__ieee754_asin+0x33c>
 8008c4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c56:	f7f7 fe01 	bl	800085c <__aeabi_ddiv>
 8008c5a:	4652      	mov	r2, sl
 8008c5c:	465b      	mov	r3, fp
 8008c5e:	f7f7 fcd3 	bl	8000608 <__aeabi_dmul>
 8008c62:	4652      	mov	r2, sl
 8008c64:	465b      	mov	r3, fp
 8008c66:	f7f7 fb19 	bl	800029c <__adddf3>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	f7f7 fb15 	bl	800029c <__adddf3>
 8008c72:	a347      	add	r3, pc, #284	@ (adr r3, 8008d90 <__ieee754_asin+0x2c8>)
 8008c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c78:	f7f7 fb0e 	bl	8000298 <__aeabi_dsub>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	460b      	mov	r3, r1
 8008c80:	a141      	add	r1, pc, #260	@ (adr r1, 8008d88 <__ieee754_asin+0x2c0>)
 8008c82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c86:	f7f7 fb07 	bl	8000298 <__aeabi_dsub>
 8008c8a:	9b01      	ldr	r3, [sp, #4]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	bfdc      	itt	le
 8008c90:	4602      	movle	r2, r0
 8008c92:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 8008c96:	4604      	mov	r4, r0
 8008c98:	460d      	mov	r5, r1
 8008c9a:	bfdc      	itt	le
 8008c9c:	4614      	movle	r4, r2
 8008c9e:	461d      	movle	r5, r3
 8008ca0:	e746      	b.n	8008b30 <__ieee754_asin+0x68>
 8008ca2:	4622      	mov	r2, r4
 8008ca4:	462b      	mov	r3, r5
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	4629      	mov	r1, r5
 8008caa:	f7f7 fcad 	bl	8000608 <__aeabi_dmul>
 8008cae:	a33c      	add	r3, pc, #240	@ (adr r3, 8008da0 <__ieee754_asin+0x2d8>)
 8008cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb4:	4606      	mov	r6, r0
 8008cb6:	460f      	mov	r7, r1
 8008cb8:	f7f7 fca6 	bl	8000608 <__aeabi_dmul>
 8008cbc:	a33a      	add	r3, pc, #232	@ (adr r3, 8008da8 <__ieee754_asin+0x2e0>)
 8008cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc2:	f7f7 faeb 	bl	800029c <__adddf3>
 8008cc6:	4632      	mov	r2, r6
 8008cc8:	463b      	mov	r3, r7
 8008cca:	f7f7 fc9d 	bl	8000608 <__aeabi_dmul>
 8008cce:	a338      	add	r3, pc, #224	@ (adr r3, 8008db0 <__ieee754_asin+0x2e8>)
 8008cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd4:	f7f7 fae0 	bl	8000298 <__aeabi_dsub>
 8008cd8:	4632      	mov	r2, r6
 8008cda:	463b      	mov	r3, r7
 8008cdc:	f7f7 fc94 	bl	8000608 <__aeabi_dmul>
 8008ce0:	a335      	add	r3, pc, #212	@ (adr r3, 8008db8 <__ieee754_asin+0x2f0>)
 8008ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce6:	f7f7 fad9 	bl	800029c <__adddf3>
 8008cea:	4632      	mov	r2, r6
 8008cec:	463b      	mov	r3, r7
 8008cee:	f7f7 fc8b 	bl	8000608 <__aeabi_dmul>
 8008cf2:	a333      	add	r3, pc, #204	@ (adr r3, 8008dc0 <__ieee754_asin+0x2f8>)
 8008cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf8:	f7f7 face 	bl	8000298 <__aeabi_dsub>
 8008cfc:	4632      	mov	r2, r6
 8008cfe:	463b      	mov	r3, r7
 8008d00:	f7f7 fc82 	bl	8000608 <__aeabi_dmul>
 8008d04:	a330      	add	r3, pc, #192	@ (adr r3, 8008dc8 <__ieee754_asin+0x300>)
 8008d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0a:	f7f7 fac7 	bl	800029c <__adddf3>
 8008d0e:	4632      	mov	r2, r6
 8008d10:	463b      	mov	r3, r7
 8008d12:	f7f7 fc79 	bl	8000608 <__aeabi_dmul>
 8008d16:	a32e      	add	r3, pc, #184	@ (adr r3, 8008dd0 <__ieee754_asin+0x308>)
 8008d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1c:	4680      	mov	r8, r0
 8008d1e:	4689      	mov	r9, r1
 8008d20:	4630      	mov	r0, r6
 8008d22:	4639      	mov	r1, r7
 8008d24:	f7f7 fc70 	bl	8000608 <__aeabi_dmul>
 8008d28:	a32b      	add	r3, pc, #172	@ (adr r3, 8008dd8 <__ieee754_asin+0x310>)
 8008d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2e:	f7f7 fab3 	bl	8000298 <__aeabi_dsub>
 8008d32:	4632      	mov	r2, r6
 8008d34:	463b      	mov	r3, r7
 8008d36:	f7f7 fc67 	bl	8000608 <__aeabi_dmul>
 8008d3a:	a329      	add	r3, pc, #164	@ (adr r3, 8008de0 <__ieee754_asin+0x318>)
 8008d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d40:	f7f7 faac 	bl	800029c <__adddf3>
 8008d44:	4632      	mov	r2, r6
 8008d46:	463b      	mov	r3, r7
 8008d48:	f7f7 fc5e 	bl	8000608 <__aeabi_dmul>
 8008d4c:	a326      	add	r3, pc, #152	@ (adr r3, 8008de8 <__ieee754_asin+0x320>)
 8008d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d52:	f7f7 faa1 	bl	8000298 <__aeabi_dsub>
 8008d56:	4632      	mov	r2, r6
 8008d58:	463b      	mov	r3, r7
 8008d5a:	f7f7 fc55 	bl	8000608 <__aeabi_dmul>
 8008d5e:	4b26      	ldr	r3, [pc, #152]	@ (8008df8 <__ieee754_asin+0x330>)
 8008d60:	2200      	movs	r2, #0
 8008d62:	f7f7 fa9b 	bl	800029c <__adddf3>
 8008d66:	4602      	mov	r2, r0
 8008d68:	460b      	mov	r3, r1
 8008d6a:	4640      	mov	r0, r8
 8008d6c:	4649      	mov	r1, r9
 8008d6e:	f7f7 fd75 	bl	800085c <__aeabi_ddiv>
 8008d72:	4622      	mov	r2, r4
 8008d74:	462b      	mov	r3, r5
 8008d76:	f7f7 fc47 	bl	8000608 <__aeabi_dmul>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	4620      	mov	r0, r4
 8008d80:	4629      	mov	r1, r5
 8008d82:	e6c6      	b.n	8008b12 <__ieee754_asin+0x4a>
 8008d84:	f3af 8000 	nop.w
 8008d88:	54442d18 	.word	0x54442d18
 8008d8c:	3ff921fb 	.word	0x3ff921fb
 8008d90:	33145c07 	.word	0x33145c07
 8008d94:	3c91a626 	.word	0x3c91a626
 8008d98:	8800759c 	.word	0x8800759c
 8008d9c:	7e37e43c 	.word	0x7e37e43c
 8008da0:	0dfdf709 	.word	0x0dfdf709
 8008da4:	3f023de1 	.word	0x3f023de1
 8008da8:	7501b288 	.word	0x7501b288
 8008dac:	3f49efe0 	.word	0x3f49efe0
 8008db0:	b5688f3b 	.word	0xb5688f3b
 8008db4:	3fa48228 	.word	0x3fa48228
 8008db8:	0e884455 	.word	0x0e884455
 8008dbc:	3fc9c155 	.word	0x3fc9c155
 8008dc0:	03eb6f7d 	.word	0x03eb6f7d
 8008dc4:	3fd4d612 	.word	0x3fd4d612
 8008dc8:	55555555 	.word	0x55555555
 8008dcc:	3fc55555 	.word	0x3fc55555
 8008dd0:	b12e9282 	.word	0xb12e9282
 8008dd4:	3fb3b8c5 	.word	0x3fb3b8c5
 8008dd8:	1b8d0159 	.word	0x1b8d0159
 8008ddc:	3fe6066c 	.word	0x3fe6066c
 8008de0:	9c598ac8 	.word	0x9c598ac8
 8008de4:	40002ae5 	.word	0x40002ae5
 8008de8:	1c8a2d4b 	.word	0x1c8a2d4b
 8008dec:	40033a27 	.word	0x40033a27
 8008df0:	3fefffff 	.word	0x3fefffff
 8008df4:	3fdfffff 	.word	0x3fdfffff
 8008df8:	3ff00000 	.word	0x3ff00000
 8008dfc:	3fe00000 	.word	0x3fe00000
 8008e00:	3fef3332 	.word	0x3fef3332
 8008e04:	4652      	mov	r2, sl
 8008e06:	465b      	mov	r3, fp
 8008e08:	4650      	mov	r0, sl
 8008e0a:	4659      	mov	r1, fp
 8008e0c:	f7f7 fa46 	bl	800029c <__adddf3>
 8008e10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e14:	4606      	mov	r6, r0
 8008e16:	460f      	mov	r7, r1
 8008e18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e1c:	f7f7 fd1e 	bl	800085c <__aeabi_ddiv>
 8008e20:	4602      	mov	r2, r0
 8008e22:	460b      	mov	r3, r1
 8008e24:	4630      	mov	r0, r6
 8008e26:	4639      	mov	r1, r7
 8008e28:	f7f7 fbee 	bl	8000608 <__aeabi_dmul>
 8008e2c:	f04f 0800 	mov.w	r8, #0
 8008e30:	4606      	mov	r6, r0
 8008e32:	460f      	mov	r7, r1
 8008e34:	4642      	mov	r2, r8
 8008e36:	465b      	mov	r3, fp
 8008e38:	4640      	mov	r0, r8
 8008e3a:	4659      	mov	r1, fp
 8008e3c:	f7f7 fbe4 	bl	8000608 <__aeabi_dmul>
 8008e40:	4602      	mov	r2, r0
 8008e42:	460b      	mov	r3, r1
 8008e44:	4620      	mov	r0, r4
 8008e46:	4629      	mov	r1, r5
 8008e48:	f7f7 fa26 	bl	8000298 <__aeabi_dsub>
 8008e4c:	4642      	mov	r2, r8
 8008e4e:	4604      	mov	r4, r0
 8008e50:	460d      	mov	r5, r1
 8008e52:	465b      	mov	r3, fp
 8008e54:	4650      	mov	r0, sl
 8008e56:	4659      	mov	r1, fp
 8008e58:	f7f7 fa20 	bl	800029c <__adddf3>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	460b      	mov	r3, r1
 8008e60:	4620      	mov	r0, r4
 8008e62:	4629      	mov	r1, r5
 8008e64:	f7f7 fcfa 	bl	800085c <__aeabi_ddiv>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	f7f7 fa16 	bl	800029c <__adddf3>
 8008e70:	4602      	mov	r2, r0
 8008e72:	460b      	mov	r3, r1
 8008e74:	a112      	add	r1, pc, #72	@ (adr r1, 8008ec0 <__ieee754_asin+0x3f8>)
 8008e76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e7a:	f7f7 fa0d 	bl	8000298 <__aeabi_dsub>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	460b      	mov	r3, r1
 8008e82:	4630      	mov	r0, r6
 8008e84:	4639      	mov	r1, r7
 8008e86:	f7f7 fa07 	bl	8000298 <__aeabi_dsub>
 8008e8a:	4642      	mov	r2, r8
 8008e8c:	4604      	mov	r4, r0
 8008e8e:	460d      	mov	r5, r1
 8008e90:	465b      	mov	r3, fp
 8008e92:	4640      	mov	r0, r8
 8008e94:	4659      	mov	r1, fp
 8008e96:	f7f7 fa01 	bl	800029c <__adddf3>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	a10a      	add	r1, pc, #40	@ (adr r1, 8008ec8 <__ieee754_asin+0x400>)
 8008ea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ea4:	f7f7 f9f8 	bl	8000298 <__aeabi_dsub>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	460b      	mov	r3, r1
 8008eac:	4620      	mov	r0, r4
 8008eae:	4629      	mov	r1, r5
 8008eb0:	f7f7 f9f2 	bl	8000298 <__aeabi_dsub>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	a103      	add	r1, pc, #12	@ (adr r1, 8008ec8 <__ieee754_asin+0x400>)
 8008eba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ebe:	e6e2      	b.n	8008c86 <__ieee754_asin+0x1be>
 8008ec0:	33145c07 	.word	0x33145c07
 8008ec4:	3c91a626 	.word	0x3c91a626
 8008ec8:	54442d18 	.word	0x54442d18
 8008ecc:	3fe921fb 	.word	0x3fe921fb

08008ed0 <__ieee754_atan2>:
 8008ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ed4:	ec57 6b11 	vmov	r6, r7, d1
 8008ed8:	4273      	negs	r3, r6
 8008eda:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8009058 <__ieee754_atan2+0x188>
 8008ede:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8008ee2:	4333      	orrs	r3, r6
 8008ee4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008ee8:	4543      	cmp	r3, r8
 8008eea:	ec51 0b10 	vmov	r0, r1, d0
 8008eee:	4635      	mov	r5, r6
 8008ef0:	d809      	bhi.n	8008f06 <__ieee754_atan2+0x36>
 8008ef2:	4244      	negs	r4, r0
 8008ef4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008ef8:	4304      	orrs	r4, r0
 8008efa:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008efe:	4544      	cmp	r4, r8
 8008f00:	468e      	mov	lr, r1
 8008f02:	4681      	mov	r9, r0
 8008f04:	d907      	bls.n	8008f16 <__ieee754_atan2+0x46>
 8008f06:	4632      	mov	r2, r6
 8008f08:	463b      	mov	r3, r7
 8008f0a:	f7f7 f9c7 	bl	800029c <__adddf3>
 8008f0e:	ec41 0b10 	vmov	d0, r0, r1
 8008f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f16:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8008f1a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8008f1e:	4334      	orrs	r4, r6
 8008f20:	d103      	bne.n	8008f2a <__ieee754_atan2+0x5a>
 8008f22:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f26:	f000 b89b 	b.w	8009060 <atan>
 8008f2a:	17bc      	asrs	r4, r7, #30
 8008f2c:	f004 0402 	and.w	r4, r4, #2
 8008f30:	ea53 0909 	orrs.w	r9, r3, r9
 8008f34:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008f38:	d107      	bne.n	8008f4a <__ieee754_atan2+0x7a>
 8008f3a:	2c02      	cmp	r4, #2
 8008f3c:	d05f      	beq.n	8008ffe <__ieee754_atan2+0x12e>
 8008f3e:	2c03      	cmp	r4, #3
 8008f40:	d1e5      	bne.n	8008f0e <__ieee754_atan2+0x3e>
 8008f42:	a141      	add	r1, pc, #260	@ (adr r1, 8009048 <__ieee754_atan2+0x178>)
 8008f44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f48:	e7e1      	b.n	8008f0e <__ieee754_atan2+0x3e>
 8008f4a:	4315      	orrs	r5, r2
 8008f4c:	d106      	bne.n	8008f5c <__ieee754_atan2+0x8c>
 8008f4e:	f1be 0f00 	cmp.w	lr, #0
 8008f52:	da5f      	bge.n	8009014 <__ieee754_atan2+0x144>
 8008f54:	a13e      	add	r1, pc, #248	@ (adr r1, 8009050 <__ieee754_atan2+0x180>)
 8008f56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f5a:	e7d8      	b.n	8008f0e <__ieee754_atan2+0x3e>
 8008f5c:	4542      	cmp	r2, r8
 8008f5e:	d10f      	bne.n	8008f80 <__ieee754_atan2+0xb0>
 8008f60:	4293      	cmp	r3, r2
 8008f62:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8008f66:	d107      	bne.n	8008f78 <__ieee754_atan2+0xa8>
 8008f68:	2c02      	cmp	r4, #2
 8008f6a:	d84c      	bhi.n	8009006 <__ieee754_atan2+0x136>
 8008f6c:	4b34      	ldr	r3, [pc, #208]	@ (8009040 <__ieee754_atan2+0x170>)
 8008f6e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008f72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008f76:	e7ca      	b.n	8008f0e <__ieee754_atan2+0x3e>
 8008f78:	2c02      	cmp	r4, #2
 8008f7a:	d848      	bhi.n	800900e <__ieee754_atan2+0x13e>
 8008f7c:	4b31      	ldr	r3, [pc, #196]	@ (8009044 <__ieee754_atan2+0x174>)
 8008f7e:	e7f6      	b.n	8008f6e <__ieee754_atan2+0x9e>
 8008f80:	4543      	cmp	r3, r8
 8008f82:	d0e4      	beq.n	8008f4e <__ieee754_atan2+0x7e>
 8008f84:	1a9b      	subs	r3, r3, r2
 8008f86:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8008f8a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008f8e:	da1e      	bge.n	8008fce <__ieee754_atan2+0xfe>
 8008f90:	2f00      	cmp	r7, #0
 8008f92:	da01      	bge.n	8008f98 <__ieee754_atan2+0xc8>
 8008f94:	323c      	adds	r2, #60	@ 0x3c
 8008f96:	db1e      	blt.n	8008fd6 <__ieee754_atan2+0x106>
 8008f98:	4632      	mov	r2, r6
 8008f9a:	463b      	mov	r3, r7
 8008f9c:	f7f7 fc5e 	bl	800085c <__aeabi_ddiv>
 8008fa0:	ec41 0b10 	vmov	d0, r0, r1
 8008fa4:	f7ff fc92 	bl	80088cc <fabs>
 8008fa8:	f000 f85a 	bl	8009060 <atan>
 8008fac:	ec51 0b10 	vmov	r0, r1, d0
 8008fb0:	2c01      	cmp	r4, #1
 8008fb2:	d013      	beq.n	8008fdc <__ieee754_atan2+0x10c>
 8008fb4:	2c02      	cmp	r4, #2
 8008fb6:	d015      	beq.n	8008fe4 <__ieee754_atan2+0x114>
 8008fb8:	2c00      	cmp	r4, #0
 8008fba:	d0a8      	beq.n	8008f0e <__ieee754_atan2+0x3e>
 8008fbc:	a318      	add	r3, pc, #96	@ (adr r3, 8009020 <__ieee754_atan2+0x150>)
 8008fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc2:	f7f7 f969 	bl	8000298 <__aeabi_dsub>
 8008fc6:	a318      	add	r3, pc, #96	@ (adr r3, 8009028 <__ieee754_atan2+0x158>)
 8008fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fcc:	e014      	b.n	8008ff8 <__ieee754_atan2+0x128>
 8008fce:	a118      	add	r1, pc, #96	@ (adr r1, 8009030 <__ieee754_atan2+0x160>)
 8008fd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fd4:	e7ec      	b.n	8008fb0 <__ieee754_atan2+0xe0>
 8008fd6:	2000      	movs	r0, #0
 8008fd8:	2100      	movs	r1, #0
 8008fda:	e7e9      	b.n	8008fb0 <__ieee754_atan2+0xe0>
 8008fdc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	e794      	b.n	8008f0e <__ieee754_atan2+0x3e>
 8008fe4:	a30e      	add	r3, pc, #56	@ (adr r3, 8009020 <__ieee754_atan2+0x150>)
 8008fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fea:	f7f7 f955 	bl	8000298 <__aeabi_dsub>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	a10d      	add	r1, pc, #52	@ (adr r1, 8009028 <__ieee754_atan2+0x158>)
 8008ff4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ff8:	f7f7 f94e 	bl	8000298 <__aeabi_dsub>
 8008ffc:	e787      	b.n	8008f0e <__ieee754_atan2+0x3e>
 8008ffe:	a10a      	add	r1, pc, #40	@ (adr r1, 8009028 <__ieee754_atan2+0x158>)
 8009000:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009004:	e783      	b.n	8008f0e <__ieee754_atan2+0x3e>
 8009006:	a10c      	add	r1, pc, #48	@ (adr r1, 8009038 <__ieee754_atan2+0x168>)
 8009008:	e9d1 0100 	ldrd	r0, r1, [r1]
 800900c:	e77f      	b.n	8008f0e <__ieee754_atan2+0x3e>
 800900e:	2000      	movs	r0, #0
 8009010:	2100      	movs	r1, #0
 8009012:	e77c      	b.n	8008f0e <__ieee754_atan2+0x3e>
 8009014:	a106      	add	r1, pc, #24	@ (adr r1, 8009030 <__ieee754_atan2+0x160>)
 8009016:	e9d1 0100 	ldrd	r0, r1, [r1]
 800901a:	e778      	b.n	8008f0e <__ieee754_atan2+0x3e>
 800901c:	f3af 8000 	nop.w
 8009020:	33145c07 	.word	0x33145c07
 8009024:	3ca1a626 	.word	0x3ca1a626
 8009028:	54442d18 	.word	0x54442d18
 800902c:	400921fb 	.word	0x400921fb
 8009030:	54442d18 	.word	0x54442d18
 8009034:	3ff921fb 	.word	0x3ff921fb
 8009038:	54442d18 	.word	0x54442d18
 800903c:	3fe921fb 	.word	0x3fe921fb
 8009040:	0800a878 	.word	0x0800a878
 8009044:	0800a860 	.word	0x0800a860
 8009048:	54442d18 	.word	0x54442d18
 800904c:	c00921fb 	.word	0xc00921fb
 8009050:	54442d18 	.word	0x54442d18
 8009054:	bff921fb 	.word	0xbff921fb
 8009058:	7ff00000 	.word	0x7ff00000
 800905c:	00000000 	.word	0x00000000

08009060 <atan>:
 8009060:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009064:	ec55 4b10 	vmov	r4, r5, d0
 8009068:	4bbf      	ldr	r3, [pc, #764]	@ (8009368 <atan+0x308>)
 800906a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800906e:	429e      	cmp	r6, r3
 8009070:	46ab      	mov	fp, r5
 8009072:	d918      	bls.n	80090a6 <atan+0x46>
 8009074:	4bbd      	ldr	r3, [pc, #756]	@ (800936c <atan+0x30c>)
 8009076:	429e      	cmp	r6, r3
 8009078:	d801      	bhi.n	800907e <atan+0x1e>
 800907a:	d109      	bne.n	8009090 <atan+0x30>
 800907c:	b144      	cbz	r4, 8009090 <atan+0x30>
 800907e:	4622      	mov	r2, r4
 8009080:	462b      	mov	r3, r5
 8009082:	4620      	mov	r0, r4
 8009084:	4629      	mov	r1, r5
 8009086:	f7f7 f909 	bl	800029c <__adddf3>
 800908a:	4604      	mov	r4, r0
 800908c:	460d      	mov	r5, r1
 800908e:	e006      	b.n	800909e <atan+0x3e>
 8009090:	f1bb 0f00 	cmp.w	fp, #0
 8009094:	f340 812b 	ble.w	80092ee <atan+0x28e>
 8009098:	a597      	add	r5, pc, #604	@ (adr r5, 80092f8 <atan+0x298>)
 800909a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800909e:	ec45 4b10 	vmov	d0, r4, r5
 80090a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a6:	4bb2      	ldr	r3, [pc, #712]	@ (8009370 <atan+0x310>)
 80090a8:	429e      	cmp	r6, r3
 80090aa:	d813      	bhi.n	80090d4 <atan+0x74>
 80090ac:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80090b0:	429e      	cmp	r6, r3
 80090b2:	d80c      	bhi.n	80090ce <atan+0x6e>
 80090b4:	a392      	add	r3, pc, #584	@ (adr r3, 8009300 <atan+0x2a0>)
 80090b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ba:	4620      	mov	r0, r4
 80090bc:	4629      	mov	r1, r5
 80090be:	f7f7 f8ed 	bl	800029c <__adddf3>
 80090c2:	4bac      	ldr	r3, [pc, #688]	@ (8009374 <atan+0x314>)
 80090c4:	2200      	movs	r2, #0
 80090c6:	f7f7 fd2f 	bl	8000b28 <__aeabi_dcmpgt>
 80090ca:	2800      	cmp	r0, #0
 80090cc:	d1e7      	bne.n	800909e <atan+0x3e>
 80090ce:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80090d2:	e029      	b.n	8009128 <atan+0xc8>
 80090d4:	f7ff fbfa 	bl	80088cc <fabs>
 80090d8:	4ba7      	ldr	r3, [pc, #668]	@ (8009378 <atan+0x318>)
 80090da:	429e      	cmp	r6, r3
 80090dc:	ec55 4b10 	vmov	r4, r5, d0
 80090e0:	f200 80bc 	bhi.w	800925c <atan+0x1fc>
 80090e4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80090e8:	429e      	cmp	r6, r3
 80090ea:	f200 809e 	bhi.w	800922a <atan+0x1ca>
 80090ee:	4622      	mov	r2, r4
 80090f0:	462b      	mov	r3, r5
 80090f2:	4620      	mov	r0, r4
 80090f4:	4629      	mov	r1, r5
 80090f6:	f7f7 f8d1 	bl	800029c <__adddf3>
 80090fa:	4b9e      	ldr	r3, [pc, #632]	@ (8009374 <atan+0x314>)
 80090fc:	2200      	movs	r2, #0
 80090fe:	f7f7 f8cb 	bl	8000298 <__aeabi_dsub>
 8009102:	2200      	movs	r2, #0
 8009104:	4606      	mov	r6, r0
 8009106:	460f      	mov	r7, r1
 8009108:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800910c:	4620      	mov	r0, r4
 800910e:	4629      	mov	r1, r5
 8009110:	f7f7 f8c4 	bl	800029c <__adddf3>
 8009114:	4602      	mov	r2, r0
 8009116:	460b      	mov	r3, r1
 8009118:	4630      	mov	r0, r6
 800911a:	4639      	mov	r1, r7
 800911c:	f7f7 fb9e 	bl	800085c <__aeabi_ddiv>
 8009120:	f04f 0a00 	mov.w	sl, #0
 8009124:	4604      	mov	r4, r0
 8009126:	460d      	mov	r5, r1
 8009128:	4622      	mov	r2, r4
 800912a:	462b      	mov	r3, r5
 800912c:	4620      	mov	r0, r4
 800912e:	4629      	mov	r1, r5
 8009130:	f7f7 fa6a 	bl	8000608 <__aeabi_dmul>
 8009134:	4602      	mov	r2, r0
 8009136:	460b      	mov	r3, r1
 8009138:	4680      	mov	r8, r0
 800913a:	4689      	mov	r9, r1
 800913c:	f7f7 fa64 	bl	8000608 <__aeabi_dmul>
 8009140:	a371      	add	r3, pc, #452	@ (adr r3, 8009308 <atan+0x2a8>)
 8009142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009146:	4606      	mov	r6, r0
 8009148:	460f      	mov	r7, r1
 800914a:	f7f7 fa5d 	bl	8000608 <__aeabi_dmul>
 800914e:	a370      	add	r3, pc, #448	@ (adr r3, 8009310 <atan+0x2b0>)
 8009150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009154:	f7f7 f8a2 	bl	800029c <__adddf3>
 8009158:	4632      	mov	r2, r6
 800915a:	463b      	mov	r3, r7
 800915c:	f7f7 fa54 	bl	8000608 <__aeabi_dmul>
 8009160:	a36d      	add	r3, pc, #436	@ (adr r3, 8009318 <atan+0x2b8>)
 8009162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009166:	f7f7 f899 	bl	800029c <__adddf3>
 800916a:	4632      	mov	r2, r6
 800916c:	463b      	mov	r3, r7
 800916e:	f7f7 fa4b 	bl	8000608 <__aeabi_dmul>
 8009172:	a36b      	add	r3, pc, #428	@ (adr r3, 8009320 <atan+0x2c0>)
 8009174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009178:	f7f7 f890 	bl	800029c <__adddf3>
 800917c:	4632      	mov	r2, r6
 800917e:	463b      	mov	r3, r7
 8009180:	f7f7 fa42 	bl	8000608 <__aeabi_dmul>
 8009184:	a368      	add	r3, pc, #416	@ (adr r3, 8009328 <atan+0x2c8>)
 8009186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918a:	f7f7 f887 	bl	800029c <__adddf3>
 800918e:	4632      	mov	r2, r6
 8009190:	463b      	mov	r3, r7
 8009192:	f7f7 fa39 	bl	8000608 <__aeabi_dmul>
 8009196:	a366      	add	r3, pc, #408	@ (adr r3, 8009330 <atan+0x2d0>)
 8009198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919c:	f7f7 f87e 	bl	800029c <__adddf3>
 80091a0:	4642      	mov	r2, r8
 80091a2:	464b      	mov	r3, r9
 80091a4:	f7f7 fa30 	bl	8000608 <__aeabi_dmul>
 80091a8:	a363      	add	r3, pc, #396	@ (adr r3, 8009338 <atan+0x2d8>)
 80091aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ae:	4680      	mov	r8, r0
 80091b0:	4689      	mov	r9, r1
 80091b2:	4630      	mov	r0, r6
 80091b4:	4639      	mov	r1, r7
 80091b6:	f7f7 fa27 	bl	8000608 <__aeabi_dmul>
 80091ba:	a361      	add	r3, pc, #388	@ (adr r3, 8009340 <atan+0x2e0>)
 80091bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c0:	f7f7 f86a 	bl	8000298 <__aeabi_dsub>
 80091c4:	4632      	mov	r2, r6
 80091c6:	463b      	mov	r3, r7
 80091c8:	f7f7 fa1e 	bl	8000608 <__aeabi_dmul>
 80091cc:	a35e      	add	r3, pc, #376	@ (adr r3, 8009348 <atan+0x2e8>)
 80091ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d2:	f7f7 f861 	bl	8000298 <__aeabi_dsub>
 80091d6:	4632      	mov	r2, r6
 80091d8:	463b      	mov	r3, r7
 80091da:	f7f7 fa15 	bl	8000608 <__aeabi_dmul>
 80091de:	a35c      	add	r3, pc, #368	@ (adr r3, 8009350 <atan+0x2f0>)
 80091e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e4:	f7f7 f858 	bl	8000298 <__aeabi_dsub>
 80091e8:	4632      	mov	r2, r6
 80091ea:	463b      	mov	r3, r7
 80091ec:	f7f7 fa0c 	bl	8000608 <__aeabi_dmul>
 80091f0:	a359      	add	r3, pc, #356	@ (adr r3, 8009358 <atan+0x2f8>)
 80091f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f6:	f7f7 f84f 	bl	8000298 <__aeabi_dsub>
 80091fa:	4632      	mov	r2, r6
 80091fc:	463b      	mov	r3, r7
 80091fe:	f7f7 fa03 	bl	8000608 <__aeabi_dmul>
 8009202:	4602      	mov	r2, r0
 8009204:	460b      	mov	r3, r1
 8009206:	4640      	mov	r0, r8
 8009208:	4649      	mov	r1, r9
 800920a:	f7f7 f847 	bl	800029c <__adddf3>
 800920e:	4622      	mov	r2, r4
 8009210:	462b      	mov	r3, r5
 8009212:	f7f7 f9f9 	bl	8000608 <__aeabi_dmul>
 8009216:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 800921a:	4602      	mov	r2, r0
 800921c:	460b      	mov	r3, r1
 800921e:	d148      	bne.n	80092b2 <atan+0x252>
 8009220:	4620      	mov	r0, r4
 8009222:	4629      	mov	r1, r5
 8009224:	f7f7 f838 	bl	8000298 <__aeabi_dsub>
 8009228:	e72f      	b.n	800908a <atan+0x2a>
 800922a:	4b52      	ldr	r3, [pc, #328]	@ (8009374 <atan+0x314>)
 800922c:	2200      	movs	r2, #0
 800922e:	4620      	mov	r0, r4
 8009230:	4629      	mov	r1, r5
 8009232:	f7f7 f831 	bl	8000298 <__aeabi_dsub>
 8009236:	4b4f      	ldr	r3, [pc, #316]	@ (8009374 <atan+0x314>)
 8009238:	4606      	mov	r6, r0
 800923a:	460f      	mov	r7, r1
 800923c:	2200      	movs	r2, #0
 800923e:	4620      	mov	r0, r4
 8009240:	4629      	mov	r1, r5
 8009242:	f7f7 f82b 	bl	800029c <__adddf3>
 8009246:	4602      	mov	r2, r0
 8009248:	460b      	mov	r3, r1
 800924a:	4630      	mov	r0, r6
 800924c:	4639      	mov	r1, r7
 800924e:	f7f7 fb05 	bl	800085c <__aeabi_ddiv>
 8009252:	f04f 0a01 	mov.w	sl, #1
 8009256:	4604      	mov	r4, r0
 8009258:	460d      	mov	r5, r1
 800925a:	e765      	b.n	8009128 <atan+0xc8>
 800925c:	4b47      	ldr	r3, [pc, #284]	@ (800937c <atan+0x31c>)
 800925e:	429e      	cmp	r6, r3
 8009260:	d21c      	bcs.n	800929c <atan+0x23c>
 8009262:	4b47      	ldr	r3, [pc, #284]	@ (8009380 <atan+0x320>)
 8009264:	2200      	movs	r2, #0
 8009266:	4620      	mov	r0, r4
 8009268:	4629      	mov	r1, r5
 800926a:	f7f7 f815 	bl	8000298 <__aeabi_dsub>
 800926e:	4b44      	ldr	r3, [pc, #272]	@ (8009380 <atan+0x320>)
 8009270:	4606      	mov	r6, r0
 8009272:	460f      	mov	r7, r1
 8009274:	2200      	movs	r2, #0
 8009276:	4620      	mov	r0, r4
 8009278:	4629      	mov	r1, r5
 800927a:	f7f7 f9c5 	bl	8000608 <__aeabi_dmul>
 800927e:	4b3d      	ldr	r3, [pc, #244]	@ (8009374 <atan+0x314>)
 8009280:	2200      	movs	r2, #0
 8009282:	f7f7 f80b 	bl	800029c <__adddf3>
 8009286:	4602      	mov	r2, r0
 8009288:	460b      	mov	r3, r1
 800928a:	4630      	mov	r0, r6
 800928c:	4639      	mov	r1, r7
 800928e:	f7f7 fae5 	bl	800085c <__aeabi_ddiv>
 8009292:	f04f 0a02 	mov.w	sl, #2
 8009296:	4604      	mov	r4, r0
 8009298:	460d      	mov	r5, r1
 800929a:	e745      	b.n	8009128 <atan+0xc8>
 800929c:	4622      	mov	r2, r4
 800929e:	462b      	mov	r3, r5
 80092a0:	4938      	ldr	r1, [pc, #224]	@ (8009384 <atan+0x324>)
 80092a2:	2000      	movs	r0, #0
 80092a4:	f7f7 fada 	bl	800085c <__aeabi_ddiv>
 80092a8:	f04f 0a03 	mov.w	sl, #3
 80092ac:	4604      	mov	r4, r0
 80092ae:	460d      	mov	r5, r1
 80092b0:	e73a      	b.n	8009128 <atan+0xc8>
 80092b2:	4b35      	ldr	r3, [pc, #212]	@ (8009388 <atan+0x328>)
 80092b4:	4e35      	ldr	r6, [pc, #212]	@ (800938c <atan+0x32c>)
 80092b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80092ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092be:	f7f6 ffeb 	bl	8000298 <__aeabi_dsub>
 80092c2:	4622      	mov	r2, r4
 80092c4:	462b      	mov	r3, r5
 80092c6:	f7f6 ffe7 	bl	8000298 <__aeabi_dsub>
 80092ca:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80092ce:	4602      	mov	r2, r0
 80092d0:	460b      	mov	r3, r1
 80092d2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80092d6:	f7f6 ffdf 	bl	8000298 <__aeabi_dsub>
 80092da:	f1bb 0f00 	cmp.w	fp, #0
 80092de:	4604      	mov	r4, r0
 80092e0:	460d      	mov	r5, r1
 80092e2:	f6bf aedc 	bge.w	800909e <atan+0x3e>
 80092e6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80092ea:	461d      	mov	r5, r3
 80092ec:	e6d7      	b.n	800909e <atan+0x3e>
 80092ee:	a51c      	add	r5, pc, #112	@ (adr r5, 8009360 <atan+0x300>)
 80092f0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80092f4:	e6d3      	b.n	800909e <atan+0x3e>
 80092f6:	bf00      	nop
 80092f8:	54442d18 	.word	0x54442d18
 80092fc:	3ff921fb 	.word	0x3ff921fb
 8009300:	8800759c 	.word	0x8800759c
 8009304:	7e37e43c 	.word	0x7e37e43c
 8009308:	e322da11 	.word	0xe322da11
 800930c:	3f90ad3a 	.word	0x3f90ad3a
 8009310:	24760deb 	.word	0x24760deb
 8009314:	3fa97b4b 	.word	0x3fa97b4b
 8009318:	a0d03d51 	.word	0xa0d03d51
 800931c:	3fb10d66 	.word	0x3fb10d66
 8009320:	c54c206e 	.word	0xc54c206e
 8009324:	3fb745cd 	.word	0x3fb745cd
 8009328:	920083ff 	.word	0x920083ff
 800932c:	3fc24924 	.word	0x3fc24924
 8009330:	5555550d 	.word	0x5555550d
 8009334:	3fd55555 	.word	0x3fd55555
 8009338:	2c6a6c2f 	.word	0x2c6a6c2f
 800933c:	bfa2b444 	.word	0xbfa2b444
 8009340:	52defd9a 	.word	0x52defd9a
 8009344:	3fadde2d 	.word	0x3fadde2d
 8009348:	af749a6d 	.word	0xaf749a6d
 800934c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009350:	fe231671 	.word	0xfe231671
 8009354:	3fbc71c6 	.word	0x3fbc71c6
 8009358:	9998ebc4 	.word	0x9998ebc4
 800935c:	3fc99999 	.word	0x3fc99999
 8009360:	54442d18 	.word	0x54442d18
 8009364:	bff921fb 	.word	0xbff921fb
 8009368:	440fffff 	.word	0x440fffff
 800936c:	7ff00000 	.word	0x7ff00000
 8009370:	3fdbffff 	.word	0x3fdbffff
 8009374:	3ff00000 	.word	0x3ff00000
 8009378:	3ff2ffff 	.word	0x3ff2ffff
 800937c:	40038000 	.word	0x40038000
 8009380:	3ff80000 	.word	0x3ff80000
 8009384:	bff00000 	.word	0xbff00000
 8009388:	0800a890 	.word	0x0800a890
 800938c:	0800a8b0 	.word	0x0800a8b0

08009390 <realloc>:
 8009390:	4b02      	ldr	r3, [pc, #8]	@ (800939c <realloc+0xc>)
 8009392:	460a      	mov	r2, r1
 8009394:	4601      	mov	r1, r0
 8009396:	6818      	ldr	r0, [r3, #0]
 8009398:	f000 b802 	b.w	80093a0 <_realloc_r>
 800939c:	20000034 	.word	0x20000034

080093a0 <_realloc_r>:
 80093a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093a4:	4680      	mov	r8, r0
 80093a6:	4615      	mov	r5, r2
 80093a8:	460c      	mov	r4, r1
 80093aa:	b921      	cbnz	r1, 80093b6 <_realloc_r+0x16>
 80093ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093b0:	4611      	mov	r1, r2
 80093b2:	f000 bb23 	b.w	80099fc <_malloc_r>
 80093b6:	b92a      	cbnz	r2, 80093c4 <_realloc_r+0x24>
 80093b8:	f000 fab4 	bl	8009924 <_free_r>
 80093bc:	2400      	movs	r4, #0
 80093be:	4620      	mov	r0, r4
 80093c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093c4:	f000 fba6 	bl	8009b14 <_malloc_usable_size_r>
 80093c8:	4285      	cmp	r5, r0
 80093ca:	4606      	mov	r6, r0
 80093cc:	d802      	bhi.n	80093d4 <_realloc_r+0x34>
 80093ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80093d2:	d8f4      	bhi.n	80093be <_realloc_r+0x1e>
 80093d4:	4629      	mov	r1, r5
 80093d6:	4640      	mov	r0, r8
 80093d8:	f000 fb10 	bl	80099fc <_malloc_r>
 80093dc:	4607      	mov	r7, r0
 80093de:	2800      	cmp	r0, #0
 80093e0:	d0ec      	beq.n	80093bc <_realloc_r+0x1c>
 80093e2:	42b5      	cmp	r5, r6
 80093e4:	462a      	mov	r2, r5
 80093e6:	4621      	mov	r1, r4
 80093e8:	bf28      	it	cs
 80093ea:	4632      	movcs	r2, r6
 80093ec:	f000 fa8b 	bl	8009906 <memcpy>
 80093f0:	4621      	mov	r1, r4
 80093f2:	4640      	mov	r0, r8
 80093f4:	f000 fa96 	bl	8009924 <_free_r>
 80093f8:	463c      	mov	r4, r7
 80093fa:	e7e0      	b.n	80093be <_realloc_r+0x1e>

080093fc <std>:
 80093fc:	2300      	movs	r3, #0
 80093fe:	b510      	push	{r4, lr}
 8009400:	4604      	mov	r4, r0
 8009402:	e9c0 3300 	strd	r3, r3, [r0]
 8009406:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800940a:	6083      	str	r3, [r0, #8]
 800940c:	8181      	strh	r1, [r0, #12]
 800940e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009410:	81c2      	strh	r2, [r0, #14]
 8009412:	6183      	str	r3, [r0, #24]
 8009414:	4619      	mov	r1, r3
 8009416:	2208      	movs	r2, #8
 8009418:	305c      	adds	r0, #92	@ 0x5c
 800941a:	f000 f9f9 	bl	8009810 <memset>
 800941e:	4b0d      	ldr	r3, [pc, #52]	@ (8009454 <std+0x58>)
 8009420:	6263      	str	r3, [r4, #36]	@ 0x24
 8009422:	4b0d      	ldr	r3, [pc, #52]	@ (8009458 <std+0x5c>)
 8009424:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009426:	4b0d      	ldr	r3, [pc, #52]	@ (800945c <std+0x60>)
 8009428:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800942a:	4b0d      	ldr	r3, [pc, #52]	@ (8009460 <std+0x64>)
 800942c:	6323      	str	r3, [r4, #48]	@ 0x30
 800942e:	4b0d      	ldr	r3, [pc, #52]	@ (8009464 <std+0x68>)
 8009430:	6224      	str	r4, [r4, #32]
 8009432:	429c      	cmp	r4, r3
 8009434:	d006      	beq.n	8009444 <std+0x48>
 8009436:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800943a:	4294      	cmp	r4, r2
 800943c:	d002      	beq.n	8009444 <std+0x48>
 800943e:	33d0      	adds	r3, #208	@ 0xd0
 8009440:	429c      	cmp	r4, r3
 8009442:	d105      	bne.n	8009450 <std+0x54>
 8009444:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800944c:	f000 ba58 	b.w	8009900 <__retarget_lock_init_recursive>
 8009450:	bd10      	pop	{r4, pc}
 8009452:	bf00      	nop
 8009454:	08009661 	.word	0x08009661
 8009458:	08009683 	.word	0x08009683
 800945c:	080096bb 	.word	0x080096bb
 8009460:	080096df 	.word	0x080096df
 8009464:	20000c98 	.word	0x20000c98

08009468 <stdio_exit_handler>:
 8009468:	4a02      	ldr	r2, [pc, #8]	@ (8009474 <stdio_exit_handler+0xc>)
 800946a:	4903      	ldr	r1, [pc, #12]	@ (8009478 <stdio_exit_handler+0x10>)
 800946c:	4803      	ldr	r0, [pc, #12]	@ (800947c <stdio_exit_handler+0x14>)
 800946e:	f000 b869 	b.w	8009544 <_fwalk_sglue>
 8009472:	bf00      	nop
 8009474:	20000028 	.word	0x20000028
 8009478:	0800a1cd 	.word	0x0800a1cd
 800947c:	20000038 	.word	0x20000038

08009480 <cleanup_stdio>:
 8009480:	6841      	ldr	r1, [r0, #4]
 8009482:	4b0c      	ldr	r3, [pc, #48]	@ (80094b4 <cleanup_stdio+0x34>)
 8009484:	4299      	cmp	r1, r3
 8009486:	b510      	push	{r4, lr}
 8009488:	4604      	mov	r4, r0
 800948a:	d001      	beq.n	8009490 <cleanup_stdio+0x10>
 800948c:	f000 fe9e 	bl	800a1cc <_fflush_r>
 8009490:	68a1      	ldr	r1, [r4, #8]
 8009492:	4b09      	ldr	r3, [pc, #36]	@ (80094b8 <cleanup_stdio+0x38>)
 8009494:	4299      	cmp	r1, r3
 8009496:	d002      	beq.n	800949e <cleanup_stdio+0x1e>
 8009498:	4620      	mov	r0, r4
 800949a:	f000 fe97 	bl	800a1cc <_fflush_r>
 800949e:	68e1      	ldr	r1, [r4, #12]
 80094a0:	4b06      	ldr	r3, [pc, #24]	@ (80094bc <cleanup_stdio+0x3c>)
 80094a2:	4299      	cmp	r1, r3
 80094a4:	d004      	beq.n	80094b0 <cleanup_stdio+0x30>
 80094a6:	4620      	mov	r0, r4
 80094a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094ac:	f000 be8e 	b.w	800a1cc <_fflush_r>
 80094b0:	bd10      	pop	{r4, pc}
 80094b2:	bf00      	nop
 80094b4:	20000c98 	.word	0x20000c98
 80094b8:	20000d00 	.word	0x20000d00
 80094bc:	20000d68 	.word	0x20000d68

080094c0 <global_stdio_init.part.0>:
 80094c0:	b510      	push	{r4, lr}
 80094c2:	4b0b      	ldr	r3, [pc, #44]	@ (80094f0 <global_stdio_init.part.0+0x30>)
 80094c4:	4c0b      	ldr	r4, [pc, #44]	@ (80094f4 <global_stdio_init.part.0+0x34>)
 80094c6:	4a0c      	ldr	r2, [pc, #48]	@ (80094f8 <global_stdio_init.part.0+0x38>)
 80094c8:	601a      	str	r2, [r3, #0]
 80094ca:	4620      	mov	r0, r4
 80094cc:	2200      	movs	r2, #0
 80094ce:	2104      	movs	r1, #4
 80094d0:	f7ff ff94 	bl	80093fc <std>
 80094d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80094d8:	2201      	movs	r2, #1
 80094da:	2109      	movs	r1, #9
 80094dc:	f7ff ff8e 	bl	80093fc <std>
 80094e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80094e4:	2202      	movs	r2, #2
 80094e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094ea:	2112      	movs	r1, #18
 80094ec:	f7ff bf86 	b.w	80093fc <std>
 80094f0:	20000dd0 	.word	0x20000dd0
 80094f4:	20000c98 	.word	0x20000c98
 80094f8:	08009469 	.word	0x08009469

080094fc <__sfp_lock_acquire>:
 80094fc:	4801      	ldr	r0, [pc, #4]	@ (8009504 <__sfp_lock_acquire+0x8>)
 80094fe:	f000 ba00 	b.w	8009902 <__retarget_lock_acquire_recursive>
 8009502:	bf00      	nop
 8009504:	20000dd9 	.word	0x20000dd9

08009508 <__sfp_lock_release>:
 8009508:	4801      	ldr	r0, [pc, #4]	@ (8009510 <__sfp_lock_release+0x8>)
 800950a:	f000 b9fb 	b.w	8009904 <__retarget_lock_release_recursive>
 800950e:	bf00      	nop
 8009510:	20000dd9 	.word	0x20000dd9

08009514 <__sinit>:
 8009514:	b510      	push	{r4, lr}
 8009516:	4604      	mov	r4, r0
 8009518:	f7ff fff0 	bl	80094fc <__sfp_lock_acquire>
 800951c:	6a23      	ldr	r3, [r4, #32]
 800951e:	b11b      	cbz	r3, 8009528 <__sinit+0x14>
 8009520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009524:	f7ff bff0 	b.w	8009508 <__sfp_lock_release>
 8009528:	4b04      	ldr	r3, [pc, #16]	@ (800953c <__sinit+0x28>)
 800952a:	6223      	str	r3, [r4, #32]
 800952c:	4b04      	ldr	r3, [pc, #16]	@ (8009540 <__sinit+0x2c>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d1f5      	bne.n	8009520 <__sinit+0xc>
 8009534:	f7ff ffc4 	bl	80094c0 <global_stdio_init.part.0>
 8009538:	e7f2      	b.n	8009520 <__sinit+0xc>
 800953a:	bf00      	nop
 800953c:	08009481 	.word	0x08009481
 8009540:	20000dd0 	.word	0x20000dd0

08009544 <_fwalk_sglue>:
 8009544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009548:	4607      	mov	r7, r0
 800954a:	4688      	mov	r8, r1
 800954c:	4614      	mov	r4, r2
 800954e:	2600      	movs	r6, #0
 8009550:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009554:	f1b9 0901 	subs.w	r9, r9, #1
 8009558:	d505      	bpl.n	8009566 <_fwalk_sglue+0x22>
 800955a:	6824      	ldr	r4, [r4, #0]
 800955c:	2c00      	cmp	r4, #0
 800955e:	d1f7      	bne.n	8009550 <_fwalk_sglue+0xc>
 8009560:	4630      	mov	r0, r6
 8009562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009566:	89ab      	ldrh	r3, [r5, #12]
 8009568:	2b01      	cmp	r3, #1
 800956a:	d907      	bls.n	800957c <_fwalk_sglue+0x38>
 800956c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009570:	3301      	adds	r3, #1
 8009572:	d003      	beq.n	800957c <_fwalk_sglue+0x38>
 8009574:	4629      	mov	r1, r5
 8009576:	4638      	mov	r0, r7
 8009578:	47c0      	blx	r8
 800957a:	4306      	orrs	r6, r0
 800957c:	3568      	adds	r5, #104	@ 0x68
 800957e:	e7e9      	b.n	8009554 <_fwalk_sglue+0x10>

08009580 <iprintf>:
 8009580:	b40f      	push	{r0, r1, r2, r3}
 8009582:	b507      	push	{r0, r1, r2, lr}
 8009584:	4906      	ldr	r1, [pc, #24]	@ (80095a0 <iprintf+0x20>)
 8009586:	ab04      	add	r3, sp, #16
 8009588:	6808      	ldr	r0, [r1, #0]
 800958a:	f853 2b04 	ldr.w	r2, [r3], #4
 800958e:	6881      	ldr	r1, [r0, #8]
 8009590:	9301      	str	r3, [sp, #4]
 8009592:	f000 faf1 	bl	8009b78 <_vfiprintf_r>
 8009596:	b003      	add	sp, #12
 8009598:	f85d eb04 	ldr.w	lr, [sp], #4
 800959c:	b004      	add	sp, #16
 800959e:	4770      	bx	lr
 80095a0:	20000034 	.word	0x20000034

080095a4 <_puts_r>:
 80095a4:	6a03      	ldr	r3, [r0, #32]
 80095a6:	b570      	push	{r4, r5, r6, lr}
 80095a8:	6884      	ldr	r4, [r0, #8]
 80095aa:	4605      	mov	r5, r0
 80095ac:	460e      	mov	r6, r1
 80095ae:	b90b      	cbnz	r3, 80095b4 <_puts_r+0x10>
 80095b0:	f7ff ffb0 	bl	8009514 <__sinit>
 80095b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80095b6:	07db      	lsls	r3, r3, #31
 80095b8:	d405      	bmi.n	80095c6 <_puts_r+0x22>
 80095ba:	89a3      	ldrh	r3, [r4, #12]
 80095bc:	0598      	lsls	r0, r3, #22
 80095be:	d402      	bmi.n	80095c6 <_puts_r+0x22>
 80095c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095c2:	f000 f99e 	bl	8009902 <__retarget_lock_acquire_recursive>
 80095c6:	89a3      	ldrh	r3, [r4, #12]
 80095c8:	0719      	lsls	r1, r3, #28
 80095ca:	d502      	bpl.n	80095d2 <_puts_r+0x2e>
 80095cc:	6923      	ldr	r3, [r4, #16]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d135      	bne.n	800963e <_puts_r+0x9a>
 80095d2:	4621      	mov	r1, r4
 80095d4:	4628      	mov	r0, r5
 80095d6:	f000 f8c5 	bl	8009764 <__swsetup_r>
 80095da:	b380      	cbz	r0, 800963e <_puts_r+0x9a>
 80095dc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80095e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80095e2:	07da      	lsls	r2, r3, #31
 80095e4:	d405      	bmi.n	80095f2 <_puts_r+0x4e>
 80095e6:	89a3      	ldrh	r3, [r4, #12]
 80095e8:	059b      	lsls	r3, r3, #22
 80095ea:	d402      	bmi.n	80095f2 <_puts_r+0x4e>
 80095ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095ee:	f000 f989 	bl	8009904 <__retarget_lock_release_recursive>
 80095f2:	4628      	mov	r0, r5
 80095f4:	bd70      	pop	{r4, r5, r6, pc}
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	da04      	bge.n	8009604 <_puts_r+0x60>
 80095fa:	69a2      	ldr	r2, [r4, #24]
 80095fc:	429a      	cmp	r2, r3
 80095fe:	dc17      	bgt.n	8009630 <_puts_r+0x8c>
 8009600:	290a      	cmp	r1, #10
 8009602:	d015      	beq.n	8009630 <_puts_r+0x8c>
 8009604:	6823      	ldr	r3, [r4, #0]
 8009606:	1c5a      	adds	r2, r3, #1
 8009608:	6022      	str	r2, [r4, #0]
 800960a:	7019      	strb	r1, [r3, #0]
 800960c:	68a3      	ldr	r3, [r4, #8]
 800960e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009612:	3b01      	subs	r3, #1
 8009614:	60a3      	str	r3, [r4, #8]
 8009616:	2900      	cmp	r1, #0
 8009618:	d1ed      	bne.n	80095f6 <_puts_r+0x52>
 800961a:	2b00      	cmp	r3, #0
 800961c:	da11      	bge.n	8009642 <_puts_r+0x9e>
 800961e:	4622      	mov	r2, r4
 8009620:	210a      	movs	r1, #10
 8009622:	4628      	mov	r0, r5
 8009624:	f000 f85f 	bl	80096e6 <__swbuf_r>
 8009628:	3001      	adds	r0, #1
 800962a:	d0d7      	beq.n	80095dc <_puts_r+0x38>
 800962c:	250a      	movs	r5, #10
 800962e:	e7d7      	b.n	80095e0 <_puts_r+0x3c>
 8009630:	4622      	mov	r2, r4
 8009632:	4628      	mov	r0, r5
 8009634:	f000 f857 	bl	80096e6 <__swbuf_r>
 8009638:	3001      	adds	r0, #1
 800963a:	d1e7      	bne.n	800960c <_puts_r+0x68>
 800963c:	e7ce      	b.n	80095dc <_puts_r+0x38>
 800963e:	3e01      	subs	r6, #1
 8009640:	e7e4      	b.n	800960c <_puts_r+0x68>
 8009642:	6823      	ldr	r3, [r4, #0]
 8009644:	1c5a      	adds	r2, r3, #1
 8009646:	6022      	str	r2, [r4, #0]
 8009648:	220a      	movs	r2, #10
 800964a:	701a      	strb	r2, [r3, #0]
 800964c:	e7ee      	b.n	800962c <_puts_r+0x88>
	...

08009650 <puts>:
 8009650:	4b02      	ldr	r3, [pc, #8]	@ (800965c <puts+0xc>)
 8009652:	4601      	mov	r1, r0
 8009654:	6818      	ldr	r0, [r3, #0]
 8009656:	f7ff bfa5 	b.w	80095a4 <_puts_r>
 800965a:	bf00      	nop
 800965c:	20000034 	.word	0x20000034

08009660 <__sread>:
 8009660:	b510      	push	{r4, lr}
 8009662:	460c      	mov	r4, r1
 8009664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009668:	f000 f8fc 	bl	8009864 <_read_r>
 800966c:	2800      	cmp	r0, #0
 800966e:	bfab      	itete	ge
 8009670:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009672:	89a3      	ldrhlt	r3, [r4, #12]
 8009674:	181b      	addge	r3, r3, r0
 8009676:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800967a:	bfac      	ite	ge
 800967c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800967e:	81a3      	strhlt	r3, [r4, #12]
 8009680:	bd10      	pop	{r4, pc}

08009682 <__swrite>:
 8009682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009686:	461f      	mov	r7, r3
 8009688:	898b      	ldrh	r3, [r1, #12]
 800968a:	05db      	lsls	r3, r3, #23
 800968c:	4605      	mov	r5, r0
 800968e:	460c      	mov	r4, r1
 8009690:	4616      	mov	r6, r2
 8009692:	d505      	bpl.n	80096a0 <__swrite+0x1e>
 8009694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009698:	2302      	movs	r3, #2
 800969a:	2200      	movs	r2, #0
 800969c:	f000 f8d0 	bl	8009840 <_lseek_r>
 80096a0:	89a3      	ldrh	r3, [r4, #12]
 80096a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80096aa:	81a3      	strh	r3, [r4, #12]
 80096ac:	4632      	mov	r2, r6
 80096ae:	463b      	mov	r3, r7
 80096b0:	4628      	mov	r0, r5
 80096b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096b6:	f000 b8e7 	b.w	8009888 <_write_r>

080096ba <__sseek>:
 80096ba:	b510      	push	{r4, lr}
 80096bc:	460c      	mov	r4, r1
 80096be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096c2:	f000 f8bd 	bl	8009840 <_lseek_r>
 80096c6:	1c43      	adds	r3, r0, #1
 80096c8:	89a3      	ldrh	r3, [r4, #12]
 80096ca:	bf15      	itete	ne
 80096cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80096ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80096d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80096d6:	81a3      	strheq	r3, [r4, #12]
 80096d8:	bf18      	it	ne
 80096da:	81a3      	strhne	r3, [r4, #12]
 80096dc:	bd10      	pop	{r4, pc}

080096de <__sclose>:
 80096de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096e2:	f000 b89d 	b.w	8009820 <_close_r>

080096e6 <__swbuf_r>:
 80096e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096e8:	460e      	mov	r6, r1
 80096ea:	4614      	mov	r4, r2
 80096ec:	4605      	mov	r5, r0
 80096ee:	b118      	cbz	r0, 80096f8 <__swbuf_r+0x12>
 80096f0:	6a03      	ldr	r3, [r0, #32]
 80096f2:	b90b      	cbnz	r3, 80096f8 <__swbuf_r+0x12>
 80096f4:	f7ff ff0e 	bl	8009514 <__sinit>
 80096f8:	69a3      	ldr	r3, [r4, #24]
 80096fa:	60a3      	str	r3, [r4, #8]
 80096fc:	89a3      	ldrh	r3, [r4, #12]
 80096fe:	071a      	lsls	r2, r3, #28
 8009700:	d501      	bpl.n	8009706 <__swbuf_r+0x20>
 8009702:	6923      	ldr	r3, [r4, #16]
 8009704:	b943      	cbnz	r3, 8009718 <__swbuf_r+0x32>
 8009706:	4621      	mov	r1, r4
 8009708:	4628      	mov	r0, r5
 800970a:	f000 f82b 	bl	8009764 <__swsetup_r>
 800970e:	b118      	cbz	r0, 8009718 <__swbuf_r+0x32>
 8009710:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009714:	4638      	mov	r0, r7
 8009716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009718:	6823      	ldr	r3, [r4, #0]
 800971a:	6922      	ldr	r2, [r4, #16]
 800971c:	1a98      	subs	r0, r3, r2
 800971e:	6963      	ldr	r3, [r4, #20]
 8009720:	b2f6      	uxtb	r6, r6
 8009722:	4283      	cmp	r3, r0
 8009724:	4637      	mov	r7, r6
 8009726:	dc05      	bgt.n	8009734 <__swbuf_r+0x4e>
 8009728:	4621      	mov	r1, r4
 800972a:	4628      	mov	r0, r5
 800972c:	f000 fd4e 	bl	800a1cc <_fflush_r>
 8009730:	2800      	cmp	r0, #0
 8009732:	d1ed      	bne.n	8009710 <__swbuf_r+0x2a>
 8009734:	68a3      	ldr	r3, [r4, #8]
 8009736:	3b01      	subs	r3, #1
 8009738:	60a3      	str	r3, [r4, #8]
 800973a:	6823      	ldr	r3, [r4, #0]
 800973c:	1c5a      	adds	r2, r3, #1
 800973e:	6022      	str	r2, [r4, #0]
 8009740:	701e      	strb	r6, [r3, #0]
 8009742:	6962      	ldr	r2, [r4, #20]
 8009744:	1c43      	adds	r3, r0, #1
 8009746:	429a      	cmp	r2, r3
 8009748:	d004      	beq.n	8009754 <__swbuf_r+0x6e>
 800974a:	89a3      	ldrh	r3, [r4, #12]
 800974c:	07db      	lsls	r3, r3, #31
 800974e:	d5e1      	bpl.n	8009714 <__swbuf_r+0x2e>
 8009750:	2e0a      	cmp	r6, #10
 8009752:	d1df      	bne.n	8009714 <__swbuf_r+0x2e>
 8009754:	4621      	mov	r1, r4
 8009756:	4628      	mov	r0, r5
 8009758:	f000 fd38 	bl	800a1cc <_fflush_r>
 800975c:	2800      	cmp	r0, #0
 800975e:	d0d9      	beq.n	8009714 <__swbuf_r+0x2e>
 8009760:	e7d6      	b.n	8009710 <__swbuf_r+0x2a>
	...

08009764 <__swsetup_r>:
 8009764:	b538      	push	{r3, r4, r5, lr}
 8009766:	4b29      	ldr	r3, [pc, #164]	@ (800980c <__swsetup_r+0xa8>)
 8009768:	4605      	mov	r5, r0
 800976a:	6818      	ldr	r0, [r3, #0]
 800976c:	460c      	mov	r4, r1
 800976e:	b118      	cbz	r0, 8009778 <__swsetup_r+0x14>
 8009770:	6a03      	ldr	r3, [r0, #32]
 8009772:	b90b      	cbnz	r3, 8009778 <__swsetup_r+0x14>
 8009774:	f7ff fece 	bl	8009514 <__sinit>
 8009778:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800977c:	0719      	lsls	r1, r3, #28
 800977e:	d422      	bmi.n	80097c6 <__swsetup_r+0x62>
 8009780:	06da      	lsls	r2, r3, #27
 8009782:	d407      	bmi.n	8009794 <__swsetup_r+0x30>
 8009784:	2209      	movs	r2, #9
 8009786:	602a      	str	r2, [r5, #0]
 8009788:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800978c:	81a3      	strh	r3, [r4, #12]
 800978e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009792:	e033      	b.n	80097fc <__swsetup_r+0x98>
 8009794:	0758      	lsls	r0, r3, #29
 8009796:	d512      	bpl.n	80097be <__swsetup_r+0x5a>
 8009798:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800979a:	b141      	cbz	r1, 80097ae <__swsetup_r+0x4a>
 800979c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097a0:	4299      	cmp	r1, r3
 80097a2:	d002      	beq.n	80097aa <__swsetup_r+0x46>
 80097a4:	4628      	mov	r0, r5
 80097a6:	f000 f8bd 	bl	8009924 <_free_r>
 80097aa:	2300      	movs	r3, #0
 80097ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80097ae:	89a3      	ldrh	r3, [r4, #12]
 80097b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80097b4:	81a3      	strh	r3, [r4, #12]
 80097b6:	2300      	movs	r3, #0
 80097b8:	6063      	str	r3, [r4, #4]
 80097ba:	6923      	ldr	r3, [r4, #16]
 80097bc:	6023      	str	r3, [r4, #0]
 80097be:	89a3      	ldrh	r3, [r4, #12]
 80097c0:	f043 0308 	orr.w	r3, r3, #8
 80097c4:	81a3      	strh	r3, [r4, #12]
 80097c6:	6923      	ldr	r3, [r4, #16]
 80097c8:	b94b      	cbnz	r3, 80097de <__swsetup_r+0x7a>
 80097ca:	89a3      	ldrh	r3, [r4, #12]
 80097cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80097d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097d4:	d003      	beq.n	80097de <__swsetup_r+0x7a>
 80097d6:	4621      	mov	r1, r4
 80097d8:	4628      	mov	r0, r5
 80097da:	f000 fd45 	bl	800a268 <__smakebuf_r>
 80097de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097e2:	f013 0201 	ands.w	r2, r3, #1
 80097e6:	d00a      	beq.n	80097fe <__swsetup_r+0x9a>
 80097e8:	2200      	movs	r2, #0
 80097ea:	60a2      	str	r2, [r4, #8]
 80097ec:	6962      	ldr	r2, [r4, #20]
 80097ee:	4252      	negs	r2, r2
 80097f0:	61a2      	str	r2, [r4, #24]
 80097f2:	6922      	ldr	r2, [r4, #16]
 80097f4:	b942      	cbnz	r2, 8009808 <__swsetup_r+0xa4>
 80097f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80097fa:	d1c5      	bne.n	8009788 <__swsetup_r+0x24>
 80097fc:	bd38      	pop	{r3, r4, r5, pc}
 80097fe:	0799      	lsls	r1, r3, #30
 8009800:	bf58      	it	pl
 8009802:	6962      	ldrpl	r2, [r4, #20]
 8009804:	60a2      	str	r2, [r4, #8]
 8009806:	e7f4      	b.n	80097f2 <__swsetup_r+0x8e>
 8009808:	2000      	movs	r0, #0
 800980a:	e7f7      	b.n	80097fc <__swsetup_r+0x98>
 800980c:	20000034 	.word	0x20000034

08009810 <memset>:
 8009810:	4402      	add	r2, r0
 8009812:	4603      	mov	r3, r0
 8009814:	4293      	cmp	r3, r2
 8009816:	d100      	bne.n	800981a <memset+0xa>
 8009818:	4770      	bx	lr
 800981a:	f803 1b01 	strb.w	r1, [r3], #1
 800981e:	e7f9      	b.n	8009814 <memset+0x4>

08009820 <_close_r>:
 8009820:	b538      	push	{r3, r4, r5, lr}
 8009822:	4d06      	ldr	r5, [pc, #24]	@ (800983c <_close_r+0x1c>)
 8009824:	2300      	movs	r3, #0
 8009826:	4604      	mov	r4, r0
 8009828:	4608      	mov	r0, r1
 800982a:	602b      	str	r3, [r5, #0]
 800982c:	f7fa fa7b 	bl	8003d26 <_close>
 8009830:	1c43      	adds	r3, r0, #1
 8009832:	d102      	bne.n	800983a <_close_r+0x1a>
 8009834:	682b      	ldr	r3, [r5, #0]
 8009836:	b103      	cbz	r3, 800983a <_close_r+0x1a>
 8009838:	6023      	str	r3, [r4, #0]
 800983a:	bd38      	pop	{r3, r4, r5, pc}
 800983c:	20000dd4 	.word	0x20000dd4

08009840 <_lseek_r>:
 8009840:	b538      	push	{r3, r4, r5, lr}
 8009842:	4d07      	ldr	r5, [pc, #28]	@ (8009860 <_lseek_r+0x20>)
 8009844:	4604      	mov	r4, r0
 8009846:	4608      	mov	r0, r1
 8009848:	4611      	mov	r1, r2
 800984a:	2200      	movs	r2, #0
 800984c:	602a      	str	r2, [r5, #0]
 800984e:	461a      	mov	r2, r3
 8009850:	f7fa fa90 	bl	8003d74 <_lseek>
 8009854:	1c43      	adds	r3, r0, #1
 8009856:	d102      	bne.n	800985e <_lseek_r+0x1e>
 8009858:	682b      	ldr	r3, [r5, #0]
 800985a:	b103      	cbz	r3, 800985e <_lseek_r+0x1e>
 800985c:	6023      	str	r3, [r4, #0]
 800985e:	bd38      	pop	{r3, r4, r5, pc}
 8009860:	20000dd4 	.word	0x20000dd4

08009864 <_read_r>:
 8009864:	b538      	push	{r3, r4, r5, lr}
 8009866:	4d07      	ldr	r5, [pc, #28]	@ (8009884 <_read_r+0x20>)
 8009868:	4604      	mov	r4, r0
 800986a:	4608      	mov	r0, r1
 800986c:	4611      	mov	r1, r2
 800986e:	2200      	movs	r2, #0
 8009870:	602a      	str	r2, [r5, #0]
 8009872:	461a      	mov	r2, r3
 8009874:	f7fa fa1e 	bl	8003cb4 <_read>
 8009878:	1c43      	adds	r3, r0, #1
 800987a:	d102      	bne.n	8009882 <_read_r+0x1e>
 800987c:	682b      	ldr	r3, [r5, #0]
 800987e:	b103      	cbz	r3, 8009882 <_read_r+0x1e>
 8009880:	6023      	str	r3, [r4, #0]
 8009882:	bd38      	pop	{r3, r4, r5, pc}
 8009884:	20000dd4 	.word	0x20000dd4

08009888 <_write_r>:
 8009888:	b538      	push	{r3, r4, r5, lr}
 800988a:	4d07      	ldr	r5, [pc, #28]	@ (80098a8 <_write_r+0x20>)
 800988c:	4604      	mov	r4, r0
 800988e:	4608      	mov	r0, r1
 8009890:	4611      	mov	r1, r2
 8009892:	2200      	movs	r2, #0
 8009894:	602a      	str	r2, [r5, #0]
 8009896:	461a      	mov	r2, r3
 8009898:	f7fa fa29 	bl	8003cee <_write>
 800989c:	1c43      	adds	r3, r0, #1
 800989e:	d102      	bne.n	80098a6 <_write_r+0x1e>
 80098a0:	682b      	ldr	r3, [r5, #0]
 80098a2:	b103      	cbz	r3, 80098a6 <_write_r+0x1e>
 80098a4:	6023      	str	r3, [r4, #0]
 80098a6:	bd38      	pop	{r3, r4, r5, pc}
 80098a8:	20000dd4 	.word	0x20000dd4

080098ac <__errno>:
 80098ac:	4b01      	ldr	r3, [pc, #4]	@ (80098b4 <__errno+0x8>)
 80098ae:	6818      	ldr	r0, [r3, #0]
 80098b0:	4770      	bx	lr
 80098b2:	bf00      	nop
 80098b4:	20000034 	.word	0x20000034

080098b8 <__libc_init_array>:
 80098b8:	b570      	push	{r4, r5, r6, lr}
 80098ba:	4d0d      	ldr	r5, [pc, #52]	@ (80098f0 <__libc_init_array+0x38>)
 80098bc:	4c0d      	ldr	r4, [pc, #52]	@ (80098f4 <__libc_init_array+0x3c>)
 80098be:	1b64      	subs	r4, r4, r5
 80098c0:	10a4      	asrs	r4, r4, #2
 80098c2:	2600      	movs	r6, #0
 80098c4:	42a6      	cmp	r6, r4
 80098c6:	d109      	bne.n	80098dc <__libc_init_array+0x24>
 80098c8:	4d0b      	ldr	r5, [pc, #44]	@ (80098f8 <__libc_init_array+0x40>)
 80098ca:	4c0c      	ldr	r4, [pc, #48]	@ (80098fc <__libc_init_array+0x44>)
 80098cc:	f000 fd3a 	bl	800a344 <_init>
 80098d0:	1b64      	subs	r4, r4, r5
 80098d2:	10a4      	asrs	r4, r4, #2
 80098d4:	2600      	movs	r6, #0
 80098d6:	42a6      	cmp	r6, r4
 80098d8:	d105      	bne.n	80098e6 <__libc_init_array+0x2e>
 80098da:	bd70      	pop	{r4, r5, r6, pc}
 80098dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80098e0:	4798      	blx	r3
 80098e2:	3601      	adds	r6, #1
 80098e4:	e7ee      	b.n	80098c4 <__libc_init_array+0xc>
 80098e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80098ea:	4798      	blx	r3
 80098ec:	3601      	adds	r6, #1
 80098ee:	e7f2      	b.n	80098d6 <__libc_init_array+0x1e>
 80098f0:	0800a90c 	.word	0x0800a90c
 80098f4:	0800a90c 	.word	0x0800a90c
 80098f8:	0800a90c 	.word	0x0800a90c
 80098fc:	0800a914 	.word	0x0800a914

08009900 <__retarget_lock_init_recursive>:
 8009900:	4770      	bx	lr

08009902 <__retarget_lock_acquire_recursive>:
 8009902:	4770      	bx	lr

08009904 <__retarget_lock_release_recursive>:
 8009904:	4770      	bx	lr

08009906 <memcpy>:
 8009906:	440a      	add	r2, r1
 8009908:	4291      	cmp	r1, r2
 800990a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800990e:	d100      	bne.n	8009912 <memcpy+0xc>
 8009910:	4770      	bx	lr
 8009912:	b510      	push	{r4, lr}
 8009914:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009918:	f803 4f01 	strb.w	r4, [r3, #1]!
 800991c:	4291      	cmp	r1, r2
 800991e:	d1f9      	bne.n	8009914 <memcpy+0xe>
 8009920:	bd10      	pop	{r4, pc}
	...

08009924 <_free_r>:
 8009924:	b538      	push	{r3, r4, r5, lr}
 8009926:	4605      	mov	r5, r0
 8009928:	2900      	cmp	r1, #0
 800992a:	d041      	beq.n	80099b0 <_free_r+0x8c>
 800992c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009930:	1f0c      	subs	r4, r1, #4
 8009932:	2b00      	cmp	r3, #0
 8009934:	bfb8      	it	lt
 8009936:	18e4      	addlt	r4, r4, r3
 8009938:	f000 f8e0 	bl	8009afc <__malloc_lock>
 800993c:	4a1d      	ldr	r2, [pc, #116]	@ (80099b4 <_free_r+0x90>)
 800993e:	6813      	ldr	r3, [r2, #0]
 8009940:	b933      	cbnz	r3, 8009950 <_free_r+0x2c>
 8009942:	6063      	str	r3, [r4, #4]
 8009944:	6014      	str	r4, [r2, #0]
 8009946:	4628      	mov	r0, r5
 8009948:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800994c:	f000 b8dc 	b.w	8009b08 <__malloc_unlock>
 8009950:	42a3      	cmp	r3, r4
 8009952:	d908      	bls.n	8009966 <_free_r+0x42>
 8009954:	6820      	ldr	r0, [r4, #0]
 8009956:	1821      	adds	r1, r4, r0
 8009958:	428b      	cmp	r3, r1
 800995a:	bf01      	itttt	eq
 800995c:	6819      	ldreq	r1, [r3, #0]
 800995e:	685b      	ldreq	r3, [r3, #4]
 8009960:	1809      	addeq	r1, r1, r0
 8009962:	6021      	streq	r1, [r4, #0]
 8009964:	e7ed      	b.n	8009942 <_free_r+0x1e>
 8009966:	461a      	mov	r2, r3
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	b10b      	cbz	r3, 8009970 <_free_r+0x4c>
 800996c:	42a3      	cmp	r3, r4
 800996e:	d9fa      	bls.n	8009966 <_free_r+0x42>
 8009970:	6811      	ldr	r1, [r2, #0]
 8009972:	1850      	adds	r0, r2, r1
 8009974:	42a0      	cmp	r0, r4
 8009976:	d10b      	bne.n	8009990 <_free_r+0x6c>
 8009978:	6820      	ldr	r0, [r4, #0]
 800997a:	4401      	add	r1, r0
 800997c:	1850      	adds	r0, r2, r1
 800997e:	4283      	cmp	r3, r0
 8009980:	6011      	str	r1, [r2, #0]
 8009982:	d1e0      	bne.n	8009946 <_free_r+0x22>
 8009984:	6818      	ldr	r0, [r3, #0]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	6053      	str	r3, [r2, #4]
 800998a:	4408      	add	r0, r1
 800998c:	6010      	str	r0, [r2, #0]
 800998e:	e7da      	b.n	8009946 <_free_r+0x22>
 8009990:	d902      	bls.n	8009998 <_free_r+0x74>
 8009992:	230c      	movs	r3, #12
 8009994:	602b      	str	r3, [r5, #0]
 8009996:	e7d6      	b.n	8009946 <_free_r+0x22>
 8009998:	6820      	ldr	r0, [r4, #0]
 800999a:	1821      	adds	r1, r4, r0
 800999c:	428b      	cmp	r3, r1
 800999e:	bf04      	itt	eq
 80099a0:	6819      	ldreq	r1, [r3, #0]
 80099a2:	685b      	ldreq	r3, [r3, #4]
 80099a4:	6063      	str	r3, [r4, #4]
 80099a6:	bf04      	itt	eq
 80099a8:	1809      	addeq	r1, r1, r0
 80099aa:	6021      	streq	r1, [r4, #0]
 80099ac:	6054      	str	r4, [r2, #4]
 80099ae:	e7ca      	b.n	8009946 <_free_r+0x22>
 80099b0:	bd38      	pop	{r3, r4, r5, pc}
 80099b2:	bf00      	nop
 80099b4:	20000de0 	.word	0x20000de0

080099b8 <sbrk_aligned>:
 80099b8:	b570      	push	{r4, r5, r6, lr}
 80099ba:	4e0f      	ldr	r6, [pc, #60]	@ (80099f8 <sbrk_aligned+0x40>)
 80099bc:	460c      	mov	r4, r1
 80099be:	6831      	ldr	r1, [r6, #0]
 80099c0:	4605      	mov	r5, r0
 80099c2:	b911      	cbnz	r1, 80099ca <sbrk_aligned+0x12>
 80099c4:	f000 fcae 	bl	800a324 <_sbrk_r>
 80099c8:	6030      	str	r0, [r6, #0]
 80099ca:	4621      	mov	r1, r4
 80099cc:	4628      	mov	r0, r5
 80099ce:	f000 fca9 	bl	800a324 <_sbrk_r>
 80099d2:	1c43      	adds	r3, r0, #1
 80099d4:	d103      	bne.n	80099de <sbrk_aligned+0x26>
 80099d6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80099da:	4620      	mov	r0, r4
 80099dc:	bd70      	pop	{r4, r5, r6, pc}
 80099de:	1cc4      	adds	r4, r0, #3
 80099e0:	f024 0403 	bic.w	r4, r4, #3
 80099e4:	42a0      	cmp	r0, r4
 80099e6:	d0f8      	beq.n	80099da <sbrk_aligned+0x22>
 80099e8:	1a21      	subs	r1, r4, r0
 80099ea:	4628      	mov	r0, r5
 80099ec:	f000 fc9a 	bl	800a324 <_sbrk_r>
 80099f0:	3001      	adds	r0, #1
 80099f2:	d1f2      	bne.n	80099da <sbrk_aligned+0x22>
 80099f4:	e7ef      	b.n	80099d6 <sbrk_aligned+0x1e>
 80099f6:	bf00      	nop
 80099f8:	20000ddc 	.word	0x20000ddc

080099fc <_malloc_r>:
 80099fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a00:	1ccd      	adds	r5, r1, #3
 8009a02:	f025 0503 	bic.w	r5, r5, #3
 8009a06:	3508      	adds	r5, #8
 8009a08:	2d0c      	cmp	r5, #12
 8009a0a:	bf38      	it	cc
 8009a0c:	250c      	movcc	r5, #12
 8009a0e:	2d00      	cmp	r5, #0
 8009a10:	4606      	mov	r6, r0
 8009a12:	db01      	blt.n	8009a18 <_malloc_r+0x1c>
 8009a14:	42a9      	cmp	r1, r5
 8009a16:	d904      	bls.n	8009a22 <_malloc_r+0x26>
 8009a18:	230c      	movs	r3, #12
 8009a1a:	6033      	str	r3, [r6, #0]
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009af8 <_malloc_r+0xfc>
 8009a26:	f000 f869 	bl	8009afc <__malloc_lock>
 8009a2a:	f8d8 3000 	ldr.w	r3, [r8]
 8009a2e:	461c      	mov	r4, r3
 8009a30:	bb44      	cbnz	r4, 8009a84 <_malloc_r+0x88>
 8009a32:	4629      	mov	r1, r5
 8009a34:	4630      	mov	r0, r6
 8009a36:	f7ff ffbf 	bl	80099b8 <sbrk_aligned>
 8009a3a:	1c43      	adds	r3, r0, #1
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	d158      	bne.n	8009af2 <_malloc_r+0xf6>
 8009a40:	f8d8 4000 	ldr.w	r4, [r8]
 8009a44:	4627      	mov	r7, r4
 8009a46:	2f00      	cmp	r7, #0
 8009a48:	d143      	bne.n	8009ad2 <_malloc_r+0xd6>
 8009a4a:	2c00      	cmp	r4, #0
 8009a4c:	d04b      	beq.n	8009ae6 <_malloc_r+0xea>
 8009a4e:	6823      	ldr	r3, [r4, #0]
 8009a50:	4639      	mov	r1, r7
 8009a52:	4630      	mov	r0, r6
 8009a54:	eb04 0903 	add.w	r9, r4, r3
 8009a58:	f000 fc64 	bl	800a324 <_sbrk_r>
 8009a5c:	4581      	cmp	r9, r0
 8009a5e:	d142      	bne.n	8009ae6 <_malloc_r+0xea>
 8009a60:	6821      	ldr	r1, [r4, #0]
 8009a62:	1a6d      	subs	r5, r5, r1
 8009a64:	4629      	mov	r1, r5
 8009a66:	4630      	mov	r0, r6
 8009a68:	f7ff ffa6 	bl	80099b8 <sbrk_aligned>
 8009a6c:	3001      	adds	r0, #1
 8009a6e:	d03a      	beq.n	8009ae6 <_malloc_r+0xea>
 8009a70:	6823      	ldr	r3, [r4, #0]
 8009a72:	442b      	add	r3, r5
 8009a74:	6023      	str	r3, [r4, #0]
 8009a76:	f8d8 3000 	ldr.w	r3, [r8]
 8009a7a:	685a      	ldr	r2, [r3, #4]
 8009a7c:	bb62      	cbnz	r2, 8009ad8 <_malloc_r+0xdc>
 8009a7e:	f8c8 7000 	str.w	r7, [r8]
 8009a82:	e00f      	b.n	8009aa4 <_malloc_r+0xa8>
 8009a84:	6822      	ldr	r2, [r4, #0]
 8009a86:	1b52      	subs	r2, r2, r5
 8009a88:	d420      	bmi.n	8009acc <_malloc_r+0xd0>
 8009a8a:	2a0b      	cmp	r2, #11
 8009a8c:	d917      	bls.n	8009abe <_malloc_r+0xc2>
 8009a8e:	1961      	adds	r1, r4, r5
 8009a90:	42a3      	cmp	r3, r4
 8009a92:	6025      	str	r5, [r4, #0]
 8009a94:	bf18      	it	ne
 8009a96:	6059      	strne	r1, [r3, #4]
 8009a98:	6863      	ldr	r3, [r4, #4]
 8009a9a:	bf08      	it	eq
 8009a9c:	f8c8 1000 	streq.w	r1, [r8]
 8009aa0:	5162      	str	r2, [r4, r5]
 8009aa2:	604b      	str	r3, [r1, #4]
 8009aa4:	4630      	mov	r0, r6
 8009aa6:	f000 f82f 	bl	8009b08 <__malloc_unlock>
 8009aaa:	f104 000b 	add.w	r0, r4, #11
 8009aae:	1d23      	adds	r3, r4, #4
 8009ab0:	f020 0007 	bic.w	r0, r0, #7
 8009ab4:	1ac2      	subs	r2, r0, r3
 8009ab6:	bf1c      	itt	ne
 8009ab8:	1a1b      	subne	r3, r3, r0
 8009aba:	50a3      	strne	r3, [r4, r2]
 8009abc:	e7af      	b.n	8009a1e <_malloc_r+0x22>
 8009abe:	6862      	ldr	r2, [r4, #4]
 8009ac0:	42a3      	cmp	r3, r4
 8009ac2:	bf0c      	ite	eq
 8009ac4:	f8c8 2000 	streq.w	r2, [r8]
 8009ac8:	605a      	strne	r2, [r3, #4]
 8009aca:	e7eb      	b.n	8009aa4 <_malloc_r+0xa8>
 8009acc:	4623      	mov	r3, r4
 8009ace:	6864      	ldr	r4, [r4, #4]
 8009ad0:	e7ae      	b.n	8009a30 <_malloc_r+0x34>
 8009ad2:	463c      	mov	r4, r7
 8009ad4:	687f      	ldr	r7, [r7, #4]
 8009ad6:	e7b6      	b.n	8009a46 <_malloc_r+0x4a>
 8009ad8:	461a      	mov	r2, r3
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	42a3      	cmp	r3, r4
 8009ade:	d1fb      	bne.n	8009ad8 <_malloc_r+0xdc>
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	6053      	str	r3, [r2, #4]
 8009ae4:	e7de      	b.n	8009aa4 <_malloc_r+0xa8>
 8009ae6:	230c      	movs	r3, #12
 8009ae8:	6033      	str	r3, [r6, #0]
 8009aea:	4630      	mov	r0, r6
 8009aec:	f000 f80c 	bl	8009b08 <__malloc_unlock>
 8009af0:	e794      	b.n	8009a1c <_malloc_r+0x20>
 8009af2:	6005      	str	r5, [r0, #0]
 8009af4:	e7d6      	b.n	8009aa4 <_malloc_r+0xa8>
 8009af6:	bf00      	nop
 8009af8:	20000de0 	.word	0x20000de0

08009afc <__malloc_lock>:
 8009afc:	4801      	ldr	r0, [pc, #4]	@ (8009b04 <__malloc_lock+0x8>)
 8009afe:	f7ff bf00 	b.w	8009902 <__retarget_lock_acquire_recursive>
 8009b02:	bf00      	nop
 8009b04:	20000dd8 	.word	0x20000dd8

08009b08 <__malloc_unlock>:
 8009b08:	4801      	ldr	r0, [pc, #4]	@ (8009b10 <__malloc_unlock+0x8>)
 8009b0a:	f7ff befb 	b.w	8009904 <__retarget_lock_release_recursive>
 8009b0e:	bf00      	nop
 8009b10:	20000dd8 	.word	0x20000dd8

08009b14 <_malloc_usable_size_r>:
 8009b14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b18:	1f18      	subs	r0, r3, #4
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	bfbc      	itt	lt
 8009b1e:	580b      	ldrlt	r3, [r1, r0]
 8009b20:	18c0      	addlt	r0, r0, r3
 8009b22:	4770      	bx	lr

08009b24 <__sfputc_r>:
 8009b24:	6893      	ldr	r3, [r2, #8]
 8009b26:	3b01      	subs	r3, #1
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	b410      	push	{r4}
 8009b2c:	6093      	str	r3, [r2, #8]
 8009b2e:	da08      	bge.n	8009b42 <__sfputc_r+0x1e>
 8009b30:	6994      	ldr	r4, [r2, #24]
 8009b32:	42a3      	cmp	r3, r4
 8009b34:	db01      	blt.n	8009b3a <__sfputc_r+0x16>
 8009b36:	290a      	cmp	r1, #10
 8009b38:	d103      	bne.n	8009b42 <__sfputc_r+0x1e>
 8009b3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b3e:	f7ff bdd2 	b.w	80096e6 <__swbuf_r>
 8009b42:	6813      	ldr	r3, [r2, #0]
 8009b44:	1c58      	adds	r0, r3, #1
 8009b46:	6010      	str	r0, [r2, #0]
 8009b48:	7019      	strb	r1, [r3, #0]
 8009b4a:	4608      	mov	r0, r1
 8009b4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b50:	4770      	bx	lr

08009b52 <__sfputs_r>:
 8009b52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b54:	4606      	mov	r6, r0
 8009b56:	460f      	mov	r7, r1
 8009b58:	4614      	mov	r4, r2
 8009b5a:	18d5      	adds	r5, r2, r3
 8009b5c:	42ac      	cmp	r4, r5
 8009b5e:	d101      	bne.n	8009b64 <__sfputs_r+0x12>
 8009b60:	2000      	movs	r0, #0
 8009b62:	e007      	b.n	8009b74 <__sfputs_r+0x22>
 8009b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b68:	463a      	mov	r2, r7
 8009b6a:	4630      	mov	r0, r6
 8009b6c:	f7ff ffda 	bl	8009b24 <__sfputc_r>
 8009b70:	1c43      	adds	r3, r0, #1
 8009b72:	d1f3      	bne.n	8009b5c <__sfputs_r+0xa>
 8009b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b78 <_vfiprintf_r>:
 8009b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b7c:	460d      	mov	r5, r1
 8009b7e:	b09d      	sub	sp, #116	@ 0x74
 8009b80:	4614      	mov	r4, r2
 8009b82:	4698      	mov	r8, r3
 8009b84:	4606      	mov	r6, r0
 8009b86:	b118      	cbz	r0, 8009b90 <_vfiprintf_r+0x18>
 8009b88:	6a03      	ldr	r3, [r0, #32]
 8009b8a:	b90b      	cbnz	r3, 8009b90 <_vfiprintf_r+0x18>
 8009b8c:	f7ff fcc2 	bl	8009514 <__sinit>
 8009b90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b92:	07d9      	lsls	r1, r3, #31
 8009b94:	d405      	bmi.n	8009ba2 <_vfiprintf_r+0x2a>
 8009b96:	89ab      	ldrh	r3, [r5, #12]
 8009b98:	059a      	lsls	r2, r3, #22
 8009b9a:	d402      	bmi.n	8009ba2 <_vfiprintf_r+0x2a>
 8009b9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b9e:	f7ff feb0 	bl	8009902 <__retarget_lock_acquire_recursive>
 8009ba2:	89ab      	ldrh	r3, [r5, #12]
 8009ba4:	071b      	lsls	r3, r3, #28
 8009ba6:	d501      	bpl.n	8009bac <_vfiprintf_r+0x34>
 8009ba8:	692b      	ldr	r3, [r5, #16]
 8009baa:	b99b      	cbnz	r3, 8009bd4 <_vfiprintf_r+0x5c>
 8009bac:	4629      	mov	r1, r5
 8009bae:	4630      	mov	r0, r6
 8009bb0:	f7ff fdd8 	bl	8009764 <__swsetup_r>
 8009bb4:	b170      	cbz	r0, 8009bd4 <_vfiprintf_r+0x5c>
 8009bb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009bb8:	07dc      	lsls	r4, r3, #31
 8009bba:	d504      	bpl.n	8009bc6 <_vfiprintf_r+0x4e>
 8009bbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009bc0:	b01d      	add	sp, #116	@ 0x74
 8009bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bc6:	89ab      	ldrh	r3, [r5, #12]
 8009bc8:	0598      	lsls	r0, r3, #22
 8009bca:	d4f7      	bmi.n	8009bbc <_vfiprintf_r+0x44>
 8009bcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009bce:	f7ff fe99 	bl	8009904 <__retarget_lock_release_recursive>
 8009bd2:	e7f3      	b.n	8009bbc <_vfiprintf_r+0x44>
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bd8:	2320      	movs	r3, #32
 8009bda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009bde:	f8cd 800c 	str.w	r8, [sp, #12]
 8009be2:	2330      	movs	r3, #48	@ 0x30
 8009be4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009d94 <_vfiprintf_r+0x21c>
 8009be8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009bec:	f04f 0901 	mov.w	r9, #1
 8009bf0:	4623      	mov	r3, r4
 8009bf2:	469a      	mov	sl, r3
 8009bf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bf8:	b10a      	cbz	r2, 8009bfe <_vfiprintf_r+0x86>
 8009bfa:	2a25      	cmp	r2, #37	@ 0x25
 8009bfc:	d1f9      	bne.n	8009bf2 <_vfiprintf_r+0x7a>
 8009bfe:	ebba 0b04 	subs.w	fp, sl, r4
 8009c02:	d00b      	beq.n	8009c1c <_vfiprintf_r+0xa4>
 8009c04:	465b      	mov	r3, fp
 8009c06:	4622      	mov	r2, r4
 8009c08:	4629      	mov	r1, r5
 8009c0a:	4630      	mov	r0, r6
 8009c0c:	f7ff ffa1 	bl	8009b52 <__sfputs_r>
 8009c10:	3001      	adds	r0, #1
 8009c12:	f000 80a7 	beq.w	8009d64 <_vfiprintf_r+0x1ec>
 8009c16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c18:	445a      	add	r2, fp
 8009c1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c1c:	f89a 3000 	ldrb.w	r3, [sl]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f000 809f 	beq.w	8009d64 <_vfiprintf_r+0x1ec>
 8009c26:	2300      	movs	r3, #0
 8009c28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009c2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c30:	f10a 0a01 	add.w	sl, sl, #1
 8009c34:	9304      	str	r3, [sp, #16]
 8009c36:	9307      	str	r3, [sp, #28]
 8009c38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c3e:	4654      	mov	r4, sl
 8009c40:	2205      	movs	r2, #5
 8009c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c46:	4853      	ldr	r0, [pc, #332]	@ (8009d94 <_vfiprintf_r+0x21c>)
 8009c48:	f7f6 fad2 	bl	80001f0 <memchr>
 8009c4c:	9a04      	ldr	r2, [sp, #16]
 8009c4e:	b9d8      	cbnz	r0, 8009c88 <_vfiprintf_r+0x110>
 8009c50:	06d1      	lsls	r1, r2, #27
 8009c52:	bf44      	itt	mi
 8009c54:	2320      	movmi	r3, #32
 8009c56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c5a:	0713      	lsls	r3, r2, #28
 8009c5c:	bf44      	itt	mi
 8009c5e:	232b      	movmi	r3, #43	@ 0x2b
 8009c60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c64:	f89a 3000 	ldrb.w	r3, [sl]
 8009c68:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c6a:	d015      	beq.n	8009c98 <_vfiprintf_r+0x120>
 8009c6c:	9a07      	ldr	r2, [sp, #28]
 8009c6e:	4654      	mov	r4, sl
 8009c70:	2000      	movs	r0, #0
 8009c72:	f04f 0c0a 	mov.w	ip, #10
 8009c76:	4621      	mov	r1, r4
 8009c78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c7c:	3b30      	subs	r3, #48	@ 0x30
 8009c7e:	2b09      	cmp	r3, #9
 8009c80:	d94b      	bls.n	8009d1a <_vfiprintf_r+0x1a2>
 8009c82:	b1b0      	cbz	r0, 8009cb2 <_vfiprintf_r+0x13a>
 8009c84:	9207      	str	r2, [sp, #28]
 8009c86:	e014      	b.n	8009cb2 <_vfiprintf_r+0x13a>
 8009c88:	eba0 0308 	sub.w	r3, r0, r8
 8009c8c:	fa09 f303 	lsl.w	r3, r9, r3
 8009c90:	4313      	orrs	r3, r2
 8009c92:	9304      	str	r3, [sp, #16]
 8009c94:	46a2      	mov	sl, r4
 8009c96:	e7d2      	b.n	8009c3e <_vfiprintf_r+0xc6>
 8009c98:	9b03      	ldr	r3, [sp, #12]
 8009c9a:	1d19      	adds	r1, r3, #4
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	9103      	str	r1, [sp, #12]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	bfbb      	ittet	lt
 8009ca4:	425b      	neglt	r3, r3
 8009ca6:	f042 0202 	orrlt.w	r2, r2, #2
 8009caa:	9307      	strge	r3, [sp, #28]
 8009cac:	9307      	strlt	r3, [sp, #28]
 8009cae:	bfb8      	it	lt
 8009cb0:	9204      	strlt	r2, [sp, #16]
 8009cb2:	7823      	ldrb	r3, [r4, #0]
 8009cb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8009cb6:	d10a      	bne.n	8009cce <_vfiprintf_r+0x156>
 8009cb8:	7863      	ldrb	r3, [r4, #1]
 8009cba:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cbc:	d132      	bne.n	8009d24 <_vfiprintf_r+0x1ac>
 8009cbe:	9b03      	ldr	r3, [sp, #12]
 8009cc0:	1d1a      	adds	r2, r3, #4
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	9203      	str	r2, [sp, #12]
 8009cc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009cca:	3402      	adds	r4, #2
 8009ccc:	9305      	str	r3, [sp, #20]
 8009cce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009da4 <_vfiprintf_r+0x22c>
 8009cd2:	7821      	ldrb	r1, [r4, #0]
 8009cd4:	2203      	movs	r2, #3
 8009cd6:	4650      	mov	r0, sl
 8009cd8:	f7f6 fa8a 	bl	80001f0 <memchr>
 8009cdc:	b138      	cbz	r0, 8009cee <_vfiprintf_r+0x176>
 8009cde:	9b04      	ldr	r3, [sp, #16]
 8009ce0:	eba0 000a 	sub.w	r0, r0, sl
 8009ce4:	2240      	movs	r2, #64	@ 0x40
 8009ce6:	4082      	lsls	r2, r0
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	3401      	adds	r4, #1
 8009cec:	9304      	str	r3, [sp, #16]
 8009cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cf2:	4829      	ldr	r0, [pc, #164]	@ (8009d98 <_vfiprintf_r+0x220>)
 8009cf4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009cf8:	2206      	movs	r2, #6
 8009cfa:	f7f6 fa79 	bl	80001f0 <memchr>
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	d03f      	beq.n	8009d82 <_vfiprintf_r+0x20a>
 8009d02:	4b26      	ldr	r3, [pc, #152]	@ (8009d9c <_vfiprintf_r+0x224>)
 8009d04:	bb1b      	cbnz	r3, 8009d4e <_vfiprintf_r+0x1d6>
 8009d06:	9b03      	ldr	r3, [sp, #12]
 8009d08:	3307      	adds	r3, #7
 8009d0a:	f023 0307 	bic.w	r3, r3, #7
 8009d0e:	3308      	adds	r3, #8
 8009d10:	9303      	str	r3, [sp, #12]
 8009d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d14:	443b      	add	r3, r7
 8009d16:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d18:	e76a      	b.n	8009bf0 <_vfiprintf_r+0x78>
 8009d1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d1e:	460c      	mov	r4, r1
 8009d20:	2001      	movs	r0, #1
 8009d22:	e7a8      	b.n	8009c76 <_vfiprintf_r+0xfe>
 8009d24:	2300      	movs	r3, #0
 8009d26:	3401      	adds	r4, #1
 8009d28:	9305      	str	r3, [sp, #20]
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	f04f 0c0a 	mov.w	ip, #10
 8009d30:	4620      	mov	r0, r4
 8009d32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d36:	3a30      	subs	r2, #48	@ 0x30
 8009d38:	2a09      	cmp	r2, #9
 8009d3a:	d903      	bls.n	8009d44 <_vfiprintf_r+0x1cc>
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d0c6      	beq.n	8009cce <_vfiprintf_r+0x156>
 8009d40:	9105      	str	r1, [sp, #20]
 8009d42:	e7c4      	b.n	8009cce <_vfiprintf_r+0x156>
 8009d44:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d48:	4604      	mov	r4, r0
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e7f0      	b.n	8009d30 <_vfiprintf_r+0x1b8>
 8009d4e:	ab03      	add	r3, sp, #12
 8009d50:	9300      	str	r3, [sp, #0]
 8009d52:	462a      	mov	r2, r5
 8009d54:	4b12      	ldr	r3, [pc, #72]	@ (8009da0 <_vfiprintf_r+0x228>)
 8009d56:	a904      	add	r1, sp, #16
 8009d58:	4630      	mov	r0, r6
 8009d5a:	f3af 8000 	nop.w
 8009d5e:	4607      	mov	r7, r0
 8009d60:	1c78      	adds	r0, r7, #1
 8009d62:	d1d6      	bne.n	8009d12 <_vfiprintf_r+0x19a>
 8009d64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d66:	07d9      	lsls	r1, r3, #31
 8009d68:	d405      	bmi.n	8009d76 <_vfiprintf_r+0x1fe>
 8009d6a:	89ab      	ldrh	r3, [r5, #12]
 8009d6c:	059a      	lsls	r2, r3, #22
 8009d6e:	d402      	bmi.n	8009d76 <_vfiprintf_r+0x1fe>
 8009d70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d72:	f7ff fdc7 	bl	8009904 <__retarget_lock_release_recursive>
 8009d76:	89ab      	ldrh	r3, [r5, #12]
 8009d78:	065b      	lsls	r3, r3, #25
 8009d7a:	f53f af1f 	bmi.w	8009bbc <_vfiprintf_r+0x44>
 8009d7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d80:	e71e      	b.n	8009bc0 <_vfiprintf_r+0x48>
 8009d82:	ab03      	add	r3, sp, #12
 8009d84:	9300      	str	r3, [sp, #0]
 8009d86:	462a      	mov	r2, r5
 8009d88:	4b05      	ldr	r3, [pc, #20]	@ (8009da0 <_vfiprintf_r+0x228>)
 8009d8a:	a904      	add	r1, sp, #16
 8009d8c:	4630      	mov	r0, r6
 8009d8e:	f000 f879 	bl	8009e84 <_printf_i>
 8009d92:	e7e4      	b.n	8009d5e <_vfiprintf_r+0x1e6>
 8009d94:	0800a8d0 	.word	0x0800a8d0
 8009d98:	0800a8da 	.word	0x0800a8da
 8009d9c:	00000000 	.word	0x00000000
 8009da0:	08009b53 	.word	0x08009b53
 8009da4:	0800a8d6 	.word	0x0800a8d6

08009da8 <_printf_common>:
 8009da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dac:	4616      	mov	r6, r2
 8009dae:	4698      	mov	r8, r3
 8009db0:	688a      	ldr	r2, [r1, #8]
 8009db2:	690b      	ldr	r3, [r1, #16]
 8009db4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009db8:	4293      	cmp	r3, r2
 8009dba:	bfb8      	it	lt
 8009dbc:	4613      	movlt	r3, r2
 8009dbe:	6033      	str	r3, [r6, #0]
 8009dc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009dc4:	4607      	mov	r7, r0
 8009dc6:	460c      	mov	r4, r1
 8009dc8:	b10a      	cbz	r2, 8009dce <_printf_common+0x26>
 8009dca:	3301      	adds	r3, #1
 8009dcc:	6033      	str	r3, [r6, #0]
 8009dce:	6823      	ldr	r3, [r4, #0]
 8009dd0:	0699      	lsls	r1, r3, #26
 8009dd2:	bf42      	ittt	mi
 8009dd4:	6833      	ldrmi	r3, [r6, #0]
 8009dd6:	3302      	addmi	r3, #2
 8009dd8:	6033      	strmi	r3, [r6, #0]
 8009dda:	6825      	ldr	r5, [r4, #0]
 8009ddc:	f015 0506 	ands.w	r5, r5, #6
 8009de0:	d106      	bne.n	8009df0 <_printf_common+0x48>
 8009de2:	f104 0a19 	add.w	sl, r4, #25
 8009de6:	68e3      	ldr	r3, [r4, #12]
 8009de8:	6832      	ldr	r2, [r6, #0]
 8009dea:	1a9b      	subs	r3, r3, r2
 8009dec:	42ab      	cmp	r3, r5
 8009dee:	dc26      	bgt.n	8009e3e <_printf_common+0x96>
 8009df0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009df4:	6822      	ldr	r2, [r4, #0]
 8009df6:	3b00      	subs	r3, #0
 8009df8:	bf18      	it	ne
 8009dfa:	2301      	movne	r3, #1
 8009dfc:	0692      	lsls	r2, r2, #26
 8009dfe:	d42b      	bmi.n	8009e58 <_printf_common+0xb0>
 8009e00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009e04:	4641      	mov	r1, r8
 8009e06:	4638      	mov	r0, r7
 8009e08:	47c8      	blx	r9
 8009e0a:	3001      	adds	r0, #1
 8009e0c:	d01e      	beq.n	8009e4c <_printf_common+0xa4>
 8009e0e:	6823      	ldr	r3, [r4, #0]
 8009e10:	6922      	ldr	r2, [r4, #16]
 8009e12:	f003 0306 	and.w	r3, r3, #6
 8009e16:	2b04      	cmp	r3, #4
 8009e18:	bf02      	ittt	eq
 8009e1a:	68e5      	ldreq	r5, [r4, #12]
 8009e1c:	6833      	ldreq	r3, [r6, #0]
 8009e1e:	1aed      	subeq	r5, r5, r3
 8009e20:	68a3      	ldr	r3, [r4, #8]
 8009e22:	bf0c      	ite	eq
 8009e24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e28:	2500      	movne	r5, #0
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	bfc4      	itt	gt
 8009e2e:	1a9b      	subgt	r3, r3, r2
 8009e30:	18ed      	addgt	r5, r5, r3
 8009e32:	2600      	movs	r6, #0
 8009e34:	341a      	adds	r4, #26
 8009e36:	42b5      	cmp	r5, r6
 8009e38:	d11a      	bne.n	8009e70 <_printf_common+0xc8>
 8009e3a:	2000      	movs	r0, #0
 8009e3c:	e008      	b.n	8009e50 <_printf_common+0xa8>
 8009e3e:	2301      	movs	r3, #1
 8009e40:	4652      	mov	r2, sl
 8009e42:	4641      	mov	r1, r8
 8009e44:	4638      	mov	r0, r7
 8009e46:	47c8      	blx	r9
 8009e48:	3001      	adds	r0, #1
 8009e4a:	d103      	bne.n	8009e54 <_printf_common+0xac>
 8009e4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e54:	3501      	adds	r5, #1
 8009e56:	e7c6      	b.n	8009de6 <_printf_common+0x3e>
 8009e58:	18e1      	adds	r1, r4, r3
 8009e5a:	1c5a      	adds	r2, r3, #1
 8009e5c:	2030      	movs	r0, #48	@ 0x30
 8009e5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009e62:	4422      	add	r2, r4
 8009e64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009e68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009e6c:	3302      	adds	r3, #2
 8009e6e:	e7c7      	b.n	8009e00 <_printf_common+0x58>
 8009e70:	2301      	movs	r3, #1
 8009e72:	4622      	mov	r2, r4
 8009e74:	4641      	mov	r1, r8
 8009e76:	4638      	mov	r0, r7
 8009e78:	47c8      	blx	r9
 8009e7a:	3001      	adds	r0, #1
 8009e7c:	d0e6      	beq.n	8009e4c <_printf_common+0xa4>
 8009e7e:	3601      	adds	r6, #1
 8009e80:	e7d9      	b.n	8009e36 <_printf_common+0x8e>
	...

08009e84 <_printf_i>:
 8009e84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e88:	7e0f      	ldrb	r7, [r1, #24]
 8009e8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009e8c:	2f78      	cmp	r7, #120	@ 0x78
 8009e8e:	4691      	mov	r9, r2
 8009e90:	4680      	mov	r8, r0
 8009e92:	460c      	mov	r4, r1
 8009e94:	469a      	mov	sl, r3
 8009e96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009e9a:	d807      	bhi.n	8009eac <_printf_i+0x28>
 8009e9c:	2f62      	cmp	r7, #98	@ 0x62
 8009e9e:	d80a      	bhi.n	8009eb6 <_printf_i+0x32>
 8009ea0:	2f00      	cmp	r7, #0
 8009ea2:	f000 80d2 	beq.w	800a04a <_printf_i+0x1c6>
 8009ea6:	2f58      	cmp	r7, #88	@ 0x58
 8009ea8:	f000 80b9 	beq.w	800a01e <_printf_i+0x19a>
 8009eac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009eb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009eb4:	e03a      	b.n	8009f2c <_printf_i+0xa8>
 8009eb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009eba:	2b15      	cmp	r3, #21
 8009ebc:	d8f6      	bhi.n	8009eac <_printf_i+0x28>
 8009ebe:	a101      	add	r1, pc, #4	@ (adr r1, 8009ec4 <_printf_i+0x40>)
 8009ec0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ec4:	08009f1d 	.word	0x08009f1d
 8009ec8:	08009f31 	.word	0x08009f31
 8009ecc:	08009ead 	.word	0x08009ead
 8009ed0:	08009ead 	.word	0x08009ead
 8009ed4:	08009ead 	.word	0x08009ead
 8009ed8:	08009ead 	.word	0x08009ead
 8009edc:	08009f31 	.word	0x08009f31
 8009ee0:	08009ead 	.word	0x08009ead
 8009ee4:	08009ead 	.word	0x08009ead
 8009ee8:	08009ead 	.word	0x08009ead
 8009eec:	08009ead 	.word	0x08009ead
 8009ef0:	0800a031 	.word	0x0800a031
 8009ef4:	08009f5b 	.word	0x08009f5b
 8009ef8:	08009feb 	.word	0x08009feb
 8009efc:	08009ead 	.word	0x08009ead
 8009f00:	08009ead 	.word	0x08009ead
 8009f04:	0800a053 	.word	0x0800a053
 8009f08:	08009ead 	.word	0x08009ead
 8009f0c:	08009f5b 	.word	0x08009f5b
 8009f10:	08009ead 	.word	0x08009ead
 8009f14:	08009ead 	.word	0x08009ead
 8009f18:	08009ff3 	.word	0x08009ff3
 8009f1c:	6833      	ldr	r3, [r6, #0]
 8009f1e:	1d1a      	adds	r2, r3, #4
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	6032      	str	r2, [r6, #0]
 8009f24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	e09d      	b.n	800a06c <_printf_i+0x1e8>
 8009f30:	6833      	ldr	r3, [r6, #0]
 8009f32:	6820      	ldr	r0, [r4, #0]
 8009f34:	1d19      	adds	r1, r3, #4
 8009f36:	6031      	str	r1, [r6, #0]
 8009f38:	0606      	lsls	r6, r0, #24
 8009f3a:	d501      	bpl.n	8009f40 <_printf_i+0xbc>
 8009f3c:	681d      	ldr	r5, [r3, #0]
 8009f3e:	e003      	b.n	8009f48 <_printf_i+0xc4>
 8009f40:	0645      	lsls	r5, r0, #25
 8009f42:	d5fb      	bpl.n	8009f3c <_printf_i+0xb8>
 8009f44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009f48:	2d00      	cmp	r5, #0
 8009f4a:	da03      	bge.n	8009f54 <_printf_i+0xd0>
 8009f4c:	232d      	movs	r3, #45	@ 0x2d
 8009f4e:	426d      	negs	r5, r5
 8009f50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f54:	4859      	ldr	r0, [pc, #356]	@ (800a0bc <_printf_i+0x238>)
 8009f56:	230a      	movs	r3, #10
 8009f58:	e011      	b.n	8009f7e <_printf_i+0xfa>
 8009f5a:	6821      	ldr	r1, [r4, #0]
 8009f5c:	6833      	ldr	r3, [r6, #0]
 8009f5e:	0608      	lsls	r0, r1, #24
 8009f60:	f853 5b04 	ldr.w	r5, [r3], #4
 8009f64:	d402      	bmi.n	8009f6c <_printf_i+0xe8>
 8009f66:	0649      	lsls	r1, r1, #25
 8009f68:	bf48      	it	mi
 8009f6a:	b2ad      	uxthmi	r5, r5
 8009f6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8009f6e:	4853      	ldr	r0, [pc, #332]	@ (800a0bc <_printf_i+0x238>)
 8009f70:	6033      	str	r3, [r6, #0]
 8009f72:	bf14      	ite	ne
 8009f74:	230a      	movne	r3, #10
 8009f76:	2308      	moveq	r3, #8
 8009f78:	2100      	movs	r1, #0
 8009f7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009f7e:	6866      	ldr	r6, [r4, #4]
 8009f80:	60a6      	str	r6, [r4, #8]
 8009f82:	2e00      	cmp	r6, #0
 8009f84:	bfa2      	ittt	ge
 8009f86:	6821      	ldrge	r1, [r4, #0]
 8009f88:	f021 0104 	bicge.w	r1, r1, #4
 8009f8c:	6021      	strge	r1, [r4, #0]
 8009f8e:	b90d      	cbnz	r5, 8009f94 <_printf_i+0x110>
 8009f90:	2e00      	cmp	r6, #0
 8009f92:	d04b      	beq.n	800a02c <_printf_i+0x1a8>
 8009f94:	4616      	mov	r6, r2
 8009f96:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f9a:	fb03 5711 	mls	r7, r3, r1, r5
 8009f9e:	5dc7      	ldrb	r7, [r0, r7]
 8009fa0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009fa4:	462f      	mov	r7, r5
 8009fa6:	42bb      	cmp	r3, r7
 8009fa8:	460d      	mov	r5, r1
 8009faa:	d9f4      	bls.n	8009f96 <_printf_i+0x112>
 8009fac:	2b08      	cmp	r3, #8
 8009fae:	d10b      	bne.n	8009fc8 <_printf_i+0x144>
 8009fb0:	6823      	ldr	r3, [r4, #0]
 8009fb2:	07df      	lsls	r7, r3, #31
 8009fb4:	d508      	bpl.n	8009fc8 <_printf_i+0x144>
 8009fb6:	6923      	ldr	r3, [r4, #16]
 8009fb8:	6861      	ldr	r1, [r4, #4]
 8009fba:	4299      	cmp	r1, r3
 8009fbc:	bfde      	ittt	le
 8009fbe:	2330      	movle	r3, #48	@ 0x30
 8009fc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009fc4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009fc8:	1b92      	subs	r2, r2, r6
 8009fca:	6122      	str	r2, [r4, #16]
 8009fcc:	f8cd a000 	str.w	sl, [sp]
 8009fd0:	464b      	mov	r3, r9
 8009fd2:	aa03      	add	r2, sp, #12
 8009fd4:	4621      	mov	r1, r4
 8009fd6:	4640      	mov	r0, r8
 8009fd8:	f7ff fee6 	bl	8009da8 <_printf_common>
 8009fdc:	3001      	adds	r0, #1
 8009fde:	d14a      	bne.n	800a076 <_printf_i+0x1f2>
 8009fe0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009fe4:	b004      	add	sp, #16
 8009fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fea:	6823      	ldr	r3, [r4, #0]
 8009fec:	f043 0320 	orr.w	r3, r3, #32
 8009ff0:	6023      	str	r3, [r4, #0]
 8009ff2:	4833      	ldr	r0, [pc, #204]	@ (800a0c0 <_printf_i+0x23c>)
 8009ff4:	2778      	movs	r7, #120	@ 0x78
 8009ff6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009ffa:	6823      	ldr	r3, [r4, #0]
 8009ffc:	6831      	ldr	r1, [r6, #0]
 8009ffe:	061f      	lsls	r7, r3, #24
 800a000:	f851 5b04 	ldr.w	r5, [r1], #4
 800a004:	d402      	bmi.n	800a00c <_printf_i+0x188>
 800a006:	065f      	lsls	r7, r3, #25
 800a008:	bf48      	it	mi
 800a00a:	b2ad      	uxthmi	r5, r5
 800a00c:	6031      	str	r1, [r6, #0]
 800a00e:	07d9      	lsls	r1, r3, #31
 800a010:	bf44      	itt	mi
 800a012:	f043 0320 	orrmi.w	r3, r3, #32
 800a016:	6023      	strmi	r3, [r4, #0]
 800a018:	b11d      	cbz	r5, 800a022 <_printf_i+0x19e>
 800a01a:	2310      	movs	r3, #16
 800a01c:	e7ac      	b.n	8009f78 <_printf_i+0xf4>
 800a01e:	4827      	ldr	r0, [pc, #156]	@ (800a0bc <_printf_i+0x238>)
 800a020:	e7e9      	b.n	8009ff6 <_printf_i+0x172>
 800a022:	6823      	ldr	r3, [r4, #0]
 800a024:	f023 0320 	bic.w	r3, r3, #32
 800a028:	6023      	str	r3, [r4, #0]
 800a02a:	e7f6      	b.n	800a01a <_printf_i+0x196>
 800a02c:	4616      	mov	r6, r2
 800a02e:	e7bd      	b.n	8009fac <_printf_i+0x128>
 800a030:	6833      	ldr	r3, [r6, #0]
 800a032:	6825      	ldr	r5, [r4, #0]
 800a034:	6961      	ldr	r1, [r4, #20]
 800a036:	1d18      	adds	r0, r3, #4
 800a038:	6030      	str	r0, [r6, #0]
 800a03a:	062e      	lsls	r6, r5, #24
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	d501      	bpl.n	800a044 <_printf_i+0x1c0>
 800a040:	6019      	str	r1, [r3, #0]
 800a042:	e002      	b.n	800a04a <_printf_i+0x1c6>
 800a044:	0668      	lsls	r0, r5, #25
 800a046:	d5fb      	bpl.n	800a040 <_printf_i+0x1bc>
 800a048:	8019      	strh	r1, [r3, #0]
 800a04a:	2300      	movs	r3, #0
 800a04c:	6123      	str	r3, [r4, #16]
 800a04e:	4616      	mov	r6, r2
 800a050:	e7bc      	b.n	8009fcc <_printf_i+0x148>
 800a052:	6833      	ldr	r3, [r6, #0]
 800a054:	1d1a      	adds	r2, r3, #4
 800a056:	6032      	str	r2, [r6, #0]
 800a058:	681e      	ldr	r6, [r3, #0]
 800a05a:	6862      	ldr	r2, [r4, #4]
 800a05c:	2100      	movs	r1, #0
 800a05e:	4630      	mov	r0, r6
 800a060:	f7f6 f8c6 	bl	80001f0 <memchr>
 800a064:	b108      	cbz	r0, 800a06a <_printf_i+0x1e6>
 800a066:	1b80      	subs	r0, r0, r6
 800a068:	6060      	str	r0, [r4, #4]
 800a06a:	6863      	ldr	r3, [r4, #4]
 800a06c:	6123      	str	r3, [r4, #16]
 800a06e:	2300      	movs	r3, #0
 800a070:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a074:	e7aa      	b.n	8009fcc <_printf_i+0x148>
 800a076:	6923      	ldr	r3, [r4, #16]
 800a078:	4632      	mov	r2, r6
 800a07a:	4649      	mov	r1, r9
 800a07c:	4640      	mov	r0, r8
 800a07e:	47d0      	blx	sl
 800a080:	3001      	adds	r0, #1
 800a082:	d0ad      	beq.n	8009fe0 <_printf_i+0x15c>
 800a084:	6823      	ldr	r3, [r4, #0]
 800a086:	079b      	lsls	r3, r3, #30
 800a088:	d413      	bmi.n	800a0b2 <_printf_i+0x22e>
 800a08a:	68e0      	ldr	r0, [r4, #12]
 800a08c:	9b03      	ldr	r3, [sp, #12]
 800a08e:	4298      	cmp	r0, r3
 800a090:	bfb8      	it	lt
 800a092:	4618      	movlt	r0, r3
 800a094:	e7a6      	b.n	8009fe4 <_printf_i+0x160>
 800a096:	2301      	movs	r3, #1
 800a098:	4632      	mov	r2, r6
 800a09a:	4649      	mov	r1, r9
 800a09c:	4640      	mov	r0, r8
 800a09e:	47d0      	blx	sl
 800a0a0:	3001      	adds	r0, #1
 800a0a2:	d09d      	beq.n	8009fe0 <_printf_i+0x15c>
 800a0a4:	3501      	adds	r5, #1
 800a0a6:	68e3      	ldr	r3, [r4, #12]
 800a0a8:	9903      	ldr	r1, [sp, #12]
 800a0aa:	1a5b      	subs	r3, r3, r1
 800a0ac:	42ab      	cmp	r3, r5
 800a0ae:	dcf2      	bgt.n	800a096 <_printf_i+0x212>
 800a0b0:	e7eb      	b.n	800a08a <_printf_i+0x206>
 800a0b2:	2500      	movs	r5, #0
 800a0b4:	f104 0619 	add.w	r6, r4, #25
 800a0b8:	e7f5      	b.n	800a0a6 <_printf_i+0x222>
 800a0ba:	bf00      	nop
 800a0bc:	0800a8e1 	.word	0x0800a8e1
 800a0c0:	0800a8f2 	.word	0x0800a8f2

0800a0c4 <__sflush_r>:
 800a0c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0cc:	0716      	lsls	r6, r2, #28
 800a0ce:	4605      	mov	r5, r0
 800a0d0:	460c      	mov	r4, r1
 800a0d2:	d454      	bmi.n	800a17e <__sflush_r+0xba>
 800a0d4:	684b      	ldr	r3, [r1, #4]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	dc02      	bgt.n	800a0e0 <__sflush_r+0x1c>
 800a0da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	dd48      	ble.n	800a172 <__sflush_r+0xae>
 800a0e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0e2:	2e00      	cmp	r6, #0
 800a0e4:	d045      	beq.n	800a172 <__sflush_r+0xae>
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a0ec:	682f      	ldr	r7, [r5, #0]
 800a0ee:	6a21      	ldr	r1, [r4, #32]
 800a0f0:	602b      	str	r3, [r5, #0]
 800a0f2:	d030      	beq.n	800a156 <__sflush_r+0x92>
 800a0f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a0f6:	89a3      	ldrh	r3, [r4, #12]
 800a0f8:	0759      	lsls	r1, r3, #29
 800a0fa:	d505      	bpl.n	800a108 <__sflush_r+0x44>
 800a0fc:	6863      	ldr	r3, [r4, #4]
 800a0fe:	1ad2      	subs	r2, r2, r3
 800a100:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a102:	b10b      	cbz	r3, 800a108 <__sflush_r+0x44>
 800a104:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a106:	1ad2      	subs	r2, r2, r3
 800a108:	2300      	movs	r3, #0
 800a10a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a10c:	6a21      	ldr	r1, [r4, #32]
 800a10e:	4628      	mov	r0, r5
 800a110:	47b0      	blx	r6
 800a112:	1c43      	adds	r3, r0, #1
 800a114:	89a3      	ldrh	r3, [r4, #12]
 800a116:	d106      	bne.n	800a126 <__sflush_r+0x62>
 800a118:	6829      	ldr	r1, [r5, #0]
 800a11a:	291d      	cmp	r1, #29
 800a11c:	d82b      	bhi.n	800a176 <__sflush_r+0xb2>
 800a11e:	4a2a      	ldr	r2, [pc, #168]	@ (800a1c8 <__sflush_r+0x104>)
 800a120:	410a      	asrs	r2, r1
 800a122:	07d6      	lsls	r6, r2, #31
 800a124:	d427      	bmi.n	800a176 <__sflush_r+0xb2>
 800a126:	2200      	movs	r2, #0
 800a128:	6062      	str	r2, [r4, #4]
 800a12a:	04d9      	lsls	r1, r3, #19
 800a12c:	6922      	ldr	r2, [r4, #16]
 800a12e:	6022      	str	r2, [r4, #0]
 800a130:	d504      	bpl.n	800a13c <__sflush_r+0x78>
 800a132:	1c42      	adds	r2, r0, #1
 800a134:	d101      	bne.n	800a13a <__sflush_r+0x76>
 800a136:	682b      	ldr	r3, [r5, #0]
 800a138:	b903      	cbnz	r3, 800a13c <__sflush_r+0x78>
 800a13a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a13c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a13e:	602f      	str	r7, [r5, #0]
 800a140:	b1b9      	cbz	r1, 800a172 <__sflush_r+0xae>
 800a142:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a146:	4299      	cmp	r1, r3
 800a148:	d002      	beq.n	800a150 <__sflush_r+0x8c>
 800a14a:	4628      	mov	r0, r5
 800a14c:	f7ff fbea 	bl	8009924 <_free_r>
 800a150:	2300      	movs	r3, #0
 800a152:	6363      	str	r3, [r4, #52]	@ 0x34
 800a154:	e00d      	b.n	800a172 <__sflush_r+0xae>
 800a156:	2301      	movs	r3, #1
 800a158:	4628      	mov	r0, r5
 800a15a:	47b0      	blx	r6
 800a15c:	4602      	mov	r2, r0
 800a15e:	1c50      	adds	r0, r2, #1
 800a160:	d1c9      	bne.n	800a0f6 <__sflush_r+0x32>
 800a162:	682b      	ldr	r3, [r5, #0]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d0c6      	beq.n	800a0f6 <__sflush_r+0x32>
 800a168:	2b1d      	cmp	r3, #29
 800a16a:	d001      	beq.n	800a170 <__sflush_r+0xac>
 800a16c:	2b16      	cmp	r3, #22
 800a16e:	d11e      	bne.n	800a1ae <__sflush_r+0xea>
 800a170:	602f      	str	r7, [r5, #0]
 800a172:	2000      	movs	r0, #0
 800a174:	e022      	b.n	800a1bc <__sflush_r+0xf8>
 800a176:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a17a:	b21b      	sxth	r3, r3
 800a17c:	e01b      	b.n	800a1b6 <__sflush_r+0xf2>
 800a17e:	690f      	ldr	r7, [r1, #16]
 800a180:	2f00      	cmp	r7, #0
 800a182:	d0f6      	beq.n	800a172 <__sflush_r+0xae>
 800a184:	0793      	lsls	r3, r2, #30
 800a186:	680e      	ldr	r6, [r1, #0]
 800a188:	bf08      	it	eq
 800a18a:	694b      	ldreq	r3, [r1, #20]
 800a18c:	600f      	str	r7, [r1, #0]
 800a18e:	bf18      	it	ne
 800a190:	2300      	movne	r3, #0
 800a192:	eba6 0807 	sub.w	r8, r6, r7
 800a196:	608b      	str	r3, [r1, #8]
 800a198:	f1b8 0f00 	cmp.w	r8, #0
 800a19c:	dde9      	ble.n	800a172 <__sflush_r+0xae>
 800a19e:	6a21      	ldr	r1, [r4, #32]
 800a1a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a1a2:	4643      	mov	r3, r8
 800a1a4:	463a      	mov	r2, r7
 800a1a6:	4628      	mov	r0, r5
 800a1a8:	47b0      	blx	r6
 800a1aa:	2800      	cmp	r0, #0
 800a1ac:	dc08      	bgt.n	800a1c0 <__sflush_r+0xfc>
 800a1ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1b6:	81a3      	strh	r3, [r4, #12]
 800a1b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1c0:	4407      	add	r7, r0
 800a1c2:	eba8 0800 	sub.w	r8, r8, r0
 800a1c6:	e7e7      	b.n	800a198 <__sflush_r+0xd4>
 800a1c8:	dfbffffe 	.word	0xdfbffffe

0800a1cc <_fflush_r>:
 800a1cc:	b538      	push	{r3, r4, r5, lr}
 800a1ce:	690b      	ldr	r3, [r1, #16]
 800a1d0:	4605      	mov	r5, r0
 800a1d2:	460c      	mov	r4, r1
 800a1d4:	b913      	cbnz	r3, 800a1dc <_fflush_r+0x10>
 800a1d6:	2500      	movs	r5, #0
 800a1d8:	4628      	mov	r0, r5
 800a1da:	bd38      	pop	{r3, r4, r5, pc}
 800a1dc:	b118      	cbz	r0, 800a1e6 <_fflush_r+0x1a>
 800a1de:	6a03      	ldr	r3, [r0, #32]
 800a1e0:	b90b      	cbnz	r3, 800a1e6 <_fflush_r+0x1a>
 800a1e2:	f7ff f997 	bl	8009514 <__sinit>
 800a1e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d0f3      	beq.n	800a1d6 <_fflush_r+0xa>
 800a1ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a1f0:	07d0      	lsls	r0, r2, #31
 800a1f2:	d404      	bmi.n	800a1fe <_fflush_r+0x32>
 800a1f4:	0599      	lsls	r1, r3, #22
 800a1f6:	d402      	bmi.n	800a1fe <_fflush_r+0x32>
 800a1f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1fa:	f7ff fb82 	bl	8009902 <__retarget_lock_acquire_recursive>
 800a1fe:	4628      	mov	r0, r5
 800a200:	4621      	mov	r1, r4
 800a202:	f7ff ff5f 	bl	800a0c4 <__sflush_r>
 800a206:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a208:	07da      	lsls	r2, r3, #31
 800a20a:	4605      	mov	r5, r0
 800a20c:	d4e4      	bmi.n	800a1d8 <_fflush_r+0xc>
 800a20e:	89a3      	ldrh	r3, [r4, #12]
 800a210:	059b      	lsls	r3, r3, #22
 800a212:	d4e1      	bmi.n	800a1d8 <_fflush_r+0xc>
 800a214:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a216:	f7ff fb75 	bl	8009904 <__retarget_lock_release_recursive>
 800a21a:	e7dd      	b.n	800a1d8 <_fflush_r+0xc>

0800a21c <__swhatbuf_r>:
 800a21c:	b570      	push	{r4, r5, r6, lr}
 800a21e:	460c      	mov	r4, r1
 800a220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a224:	2900      	cmp	r1, #0
 800a226:	b096      	sub	sp, #88	@ 0x58
 800a228:	4615      	mov	r5, r2
 800a22a:	461e      	mov	r6, r3
 800a22c:	da0d      	bge.n	800a24a <__swhatbuf_r+0x2e>
 800a22e:	89a3      	ldrh	r3, [r4, #12]
 800a230:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a234:	f04f 0100 	mov.w	r1, #0
 800a238:	bf14      	ite	ne
 800a23a:	2340      	movne	r3, #64	@ 0x40
 800a23c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a240:	2000      	movs	r0, #0
 800a242:	6031      	str	r1, [r6, #0]
 800a244:	602b      	str	r3, [r5, #0]
 800a246:	b016      	add	sp, #88	@ 0x58
 800a248:	bd70      	pop	{r4, r5, r6, pc}
 800a24a:	466a      	mov	r2, sp
 800a24c:	f000 f848 	bl	800a2e0 <_fstat_r>
 800a250:	2800      	cmp	r0, #0
 800a252:	dbec      	blt.n	800a22e <__swhatbuf_r+0x12>
 800a254:	9901      	ldr	r1, [sp, #4]
 800a256:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a25a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a25e:	4259      	negs	r1, r3
 800a260:	4159      	adcs	r1, r3
 800a262:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a266:	e7eb      	b.n	800a240 <__swhatbuf_r+0x24>

0800a268 <__smakebuf_r>:
 800a268:	898b      	ldrh	r3, [r1, #12]
 800a26a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a26c:	079d      	lsls	r5, r3, #30
 800a26e:	4606      	mov	r6, r0
 800a270:	460c      	mov	r4, r1
 800a272:	d507      	bpl.n	800a284 <__smakebuf_r+0x1c>
 800a274:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a278:	6023      	str	r3, [r4, #0]
 800a27a:	6123      	str	r3, [r4, #16]
 800a27c:	2301      	movs	r3, #1
 800a27e:	6163      	str	r3, [r4, #20]
 800a280:	b003      	add	sp, #12
 800a282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a284:	ab01      	add	r3, sp, #4
 800a286:	466a      	mov	r2, sp
 800a288:	f7ff ffc8 	bl	800a21c <__swhatbuf_r>
 800a28c:	9f00      	ldr	r7, [sp, #0]
 800a28e:	4605      	mov	r5, r0
 800a290:	4639      	mov	r1, r7
 800a292:	4630      	mov	r0, r6
 800a294:	f7ff fbb2 	bl	80099fc <_malloc_r>
 800a298:	b948      	cbnz	r0, 800a2ae <__smakebuf_r+0x46>
 800a29a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a29e:	059a      	lsls	r2, r3, #22
 800a2a0:	d4ee      	bmi.n	800a280 <__smakebuf_r+0x18>
 800a2a2:	f023 0303 	bic.w	r3, r3, #3
 800a2a6:	f043 0302 	orr.w	r3, r3, #2
 800a2aa:	81a3      	strh	r3, [r4, #12]
 800a2ac:	e7e2      	b.n	800a274 <__smakebuf_r+0xc>
 800a2ae:	89a3      	ldrh	r3, [r4, #12]
 800a2b0:	6020      	str	r0, [r4, #0]
 800a2b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2b6:	81a3      	strh	r3, [r4, #12]
 800a2b8:	9b01      	ldr	r3, [sp, #4]
 800a2ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a2be:	b15b      	cbz	r3, 800a2d8 <__smakebuf_r+0x70>
 800a2c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2c4:	4630      	mov	r0, r6
 800a2c6:	f000 f81d 	bl	800a304 <_isatty_r>
 800a2ca:	b128      	cbz	r0, 800a2d8 <__smakebuf_r+0x70>
 800a2cc:	89a3      	ldrh	r3, [r4, #12]
 800a2ce:	f023 0303 	bic.w	r3, r3, #3
 800a2d2:	f043 0301 	orr.w	r3, r3, #1
 800a2d6:	81a3      	strh	r3, [r4, #12]
 800a2d8:	89a3      	ldrh	r3, [r4, #12]
 800a2da:	431d      	orrs	r5, r3
 800a2dc:	81a5      	strh	r5, [r4, #12]
 800a2de:	e7cf      	b.n	800a280 <__smakebuf_r+0x18>

0800a2e0 <_fstat_r>:
 800a2e0:	b538      	push	{r3, r4, r5, lr}
 800a2e2:	4d07      	ldr	r5, [pc, #28]	@ (800a300 <_fstat_r+0x20>)
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	4604      	mov	r4, r0
 800a2e8:	4608      	mov	r0, r1
 800a2ea:	4611      	mov	r1, r2
 800a2ec:	602b      	str	r3, [r5, #0]
 800a2ee:	f7f9 fd26 	bl	8003d3e <_fstat>
 800a2f2:	1c43      	adds	r3, r0, #1
 800a2f4:	d102      	bne.n	800a2fc <_fstat_r+0x1c>
 800a2f6:	682b      	ldr	r3, [r5, #0]
 800a2f8:	b103      	cbz	r3, 800a2fc <_fstat_r+0x1c>
 800a2fa:	6023      	str	r3, [r4, #0]
 800a2fc:	bd38      	pop	{r3, r4, r5, pc}
 800a2fe:	bf00      	nop
 800a300:	20000dd4 	.word	0x20000dd4

0800a304 <_isatty_r>:
 800a304:	b538      	push	{r3, r4, r5, lr}
 800a306:	4d06      	ldr	r5, [pc, #24]	@ (800a320 <_isatty_r+0x1c>)
 800a308:	2300      	movs	r3, #0
 800a30a:	4604      	mov	r4, r0
 800a30c:	4608      	mov	r0, r1
 800a30e:	602b      	str	r3, [r5, #0]
 800a310:	f7f9 fd25 	bl	8003d5e <_isatty>
 800a314:	1c43      	adds	r3, r0, #1
 800a316:	d102      	bne.n	800a31e <_isatty_r+0x1a>
 800a318:	682b      	ldr	r3, [r5, #0]
 800a31a:	b103      	cbz	r3, 800a31e <_isatty_r+0x1a>
 800a31c:	6023      	str	r3, [r4, #0]
 800a31e:	bd38      	pop	{r3, r4, r5, pc}
 800a320:	20000dd4 	.word	0x20000dd4

0800a324 <_sbrk_r>:
 800a324:	b538      	push	{r3, r4, r5, lr}
 800a326:	4d06      	ldr	r5, [pc, #24]	@ (800a340 <_sbrk_r+0x1c>)
 800a328:	2300      	movs	r3, #0
 800a32a:	4604      	mov	r4, r0
 800a32c:	4608      	mov	r0, r1
 800a32e:	602b      	str	r3, [r5, #0]
 800a330:	f7f9 fd2e 	bl	8003d90 <_sbrk>
 800a334:	1c43      	adds	r3, r0, #1
 800a336:	d102      	bne.n	800a33e <_sbrk_r+0x1a>
 800a338:	682b      	ldr	r3, [r5, #0]
 800a33a:	b103      	cbz	r3, 800a33e <_sbrk_r+0x1a>
 800a33c:	6023      	str	r3, [r4, #0]
 800a33e:	bd38      	pop	{r3, r4, r5, pc}
 800a340:	20000dd4 	.word	0x20000dd4

0800a344 <_init>:
 800a344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a346:	bf00      	nop
 800a348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a34a:	bc08      	pop	{r3}
 800a34c:	469e      	mov	lr, r3
 800a34e:	4770      	bx	lr

0800a350 <_fini>:
 800a350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a352:	bf00      	nop
 800a354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a356:	bc08      	pop	{r3}
 800a358:	469e      	mov	lr, r3
 800a35a:	4770      	bx	lr
