
testtttttt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009118  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  080092b8  080092b8  0000a2b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009770  08009770  0000b074  2**0
                  CONTENTS
  4 .ARM          00000008  08009770  08009770  0000a770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009778  08009778  0000b074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009778  08009778  0000a778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009780  08009780  0000a780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08009784  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d24  20000074  080097f8  0000b074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d98  080097f8  0000bd98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018af2  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003698  00000000  00000000  00023b96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  00027230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f80  00000000  00000000  000285f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ce5  00000000  00000000  00029578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017847  00000000  00000000  0004325d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099bf2  00000000  00000000  0005aaa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f4696  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cc8  00000000  00000000  000f46dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000fa3a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080092a0 	.word	0x080092a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080092a0 	.word	0x080092a0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ae0:	f000 b96a 	b.w	8000db8 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9d08      	ldr	r5, [sp, #32]
 8000b02:	460c      	mov	r4, r1
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d14e      	bne.n	8000ba6 <__udivmoddi4+0xaa>
 8000b08:	4694      	mov	ip, r2
 8000b0a:	458c      	cmp	ip, r1
 8000b0c:	4686      	mov	lr, r0
 8000b0e:	fab2 f282 	clz	r2, r2
 8000b12:	d962      	bls.n	8000bda <__udivmoddi4+0xde>
 8000b14:	b14a      	cbz	r2, 8000b2a <__udivmoddi4+0x2e>
 8000b16:	f1c2 0320 	rsb	r3, r2, #32
 8000b1a:	4091      	lsls	r1, r2
 8000b1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b24:	4319      	orrs	r1, r3
 8000b26:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2e:	fa1f f68c 	uxth.w	r6, ip
 8000b32:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b3a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b42:	fb04 f106 	mul.w	r1, r4, r6
 8000b46:	4299      	cmp	r1, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x64>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b52:	f080 8112 	bcs.w	8000d7a <__udivmoddi4+0x27e>
 8000b56:	4299      	cmp	r1, r3
 8000b58:	f240 810f 	bls.w	8000d7a <__udivmoddi4+0x27e>
 8000b5c:	3c02      	subs	r4, #2
 8000b5e:	4463      	add	r3, ip
 8000b60:	1a59      	subs	r1, r3, r1
 8000b62:	fa1f f38e 	uxth.w	r3, lr
 8000b66:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b6a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b72:	fb00 f606 	mul.w	r6, r0, r6
 8000b76:	429e      	cmp	r6, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x94>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b82:	f080 80fc 	bcs.w	8000d7e <__udivmoddi4+0x282>
 8000b86:	429e      	cmp	r6, r3
 8000b88:	f240 80f9 	bls.w	8000d7e <__udivmoddi4+0x282>
 8000b8c:	4463      	add	r3, ip
 8000b8e:	3802      	subs	r0, #2
 8000b90:	1b9b      	subs	r3, r3, r6
 8000b92:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b96:	2100      	movs	r1, #0
 8000b98:	b11d      	cbz	r5, 8000ba2 <__udivmoddi4+0xa6>
 8000b9a:	40d3      	lsrs	r3, r2
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	e9c5 3200 	strd	r3, r2, [r5]
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d905      	bls.n	8000bb6 <__udivmoddi4+0xba>
 8000baa:	b10d      	cbz	r5, 8000bb0 <__udivmoddi4+0xb4>
 8000bac:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4608      	mov	r0, r1
 8000bb4:	e7f5      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000bb6:	fab3 f183 	clz	r1, r3
 8000bba:	2900      	cmp	r1, #0
 8000bbc:	d146      	bne.n	8000c4c <__udivmoddi4+0x150>
 8000bbe:	42a3      	cmp	r3, r4
 8000bc0:	d302      	bcc.n	8000bc8 <__udivmoddi4+0xcc>
 8000bc2:	4290      	cmp	r0, r2
 8000bc4:	f0c0 80f0 	bcc.w	8000da8 <__udivmoddi4+0x2ac>
 8000bc8:	1a86      	subs	r6, r0, r2
 8000bca:	eb64 0303 	sbc.w	r3, r4, r3
 8000bce:	2001      	movs	r0, #1
 8000bd0:	2d00      	cmp	r5, #0
 8000bd2:	d0e6      	beq.n	8000ba2 <__udivmoddi4+0xa6>
 8000bd4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bd8:	e7e3      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	f040 8090 	bne.w	8000d00 <__udivmoddi4+0x204>
 8000be0:	eba1 040c 	sub.w	r4, r1, ip
 8000be4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be8:	fa1f f78c 	uxth.w	r7, ip
 8000bec:	2101      	movs	r1, #1
 8000bee:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bf6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bfe:	fb07 f006 	mul.w	r0, r7, r6
 8000c02:	4298      	cmp	r0, r3
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x11c>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x11a>
 8000c10:	4298      	cmp	r0, r3
 8000c12:	f200 80cd 	bhi.w	8000db0 <__udivmoddi4+0x2b4>
 8000c16:	4626      	mov	r6, r4
 8000c18:	1a1c      	subs	r4, r3, r0
 8000c1a:	fa1f f38e 	uxth.w	r3, lr
 8000c1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c22:	fb08 4410 	mls	r4, r8, r0, r4
 8000c26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c2a:	fb00 f707 	mul.w	r7, r0, r7
 8000c2e:	429f      	cmp	r7, r3
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x148>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0x146>
 8000c3c:	429f      	cmp	r7, r3
 8000c3e:	f200 80b0 	bhi.w	8000da2 <__udivmoddi4+0x2a6>
 8000c42:	4620      	mov	r0, r4
 8000c44:	1bdb      	subs	r3, r3, r7
 8000c46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c4a:	e7a5      	b.n	8000b98 <__udivmoddi4+0x9c>
 8000c4c:	f1c1 0620 	rsb	r6, r1, #32
 8000c50:	408b      	lsls	r3, r1
 8000c52:	fa22 f706 	lsr.w	r7, r2, r6
 8000c56:	431f      	orrs	r7, r3
 8000c58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c60:	ea43 030c 	orr.w	r3, r3, ip
 8000c64:	40f4      	lsrs	r4, r6
 8000c66:	fa00 f801 	lsl.w	r8, r0, r1
 8000c6a:	0c38      	lsrs	r0, r7, #16
 8000c6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c70:	fbb4 fef0 	udiv	lr, r4, r0
 8000c74:	fa1f fc87 	uxth.w	ip, r7
 8000c78:	fb00 441e 	mls	r4, r0, lr, r4
 8000c7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c80:	fb0e f90c 	mul.w	r9, lr, ip
 8000c84:	45a1      	cmp	r9, r4
 8000c86:	fa02 f201 	lsl.w	r2, r2, r1
 8000c8a:	d90a      	bls.n	8000ca2 <__udivmoddi4+0x1a6>
 8000c8c:	193c      	adds	r4, r7, r4
 8000c8e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c92:	f080 8084 	bcs.w	8000d9e <__udivmoddi4+0x2a2>
 8000c96:	45a1      	cmp	r9, r4
 8000c98:	f240 8081 	bls.w	8000d9e <__udivmoddi4+0x2a2>
 8000c9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ca0:	443c      	add	r4, r7
 8000ca2:	eba4 0409 	sub.w	r4, r4, r9
 8000ca6:	fa1f f983 	uxth.w	r9, r3
 8000caa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cae:	fb00 4413 	mls	r4, r0, r3, r4
 8000cb2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cba:	45a4      	cmp	ip, r4
 8000cbc:	d907      	bls.n	8000cce <__udivmoddi4+0x1d2>
 8000cbe:	193c      	adds	r4, r7, r4
 8000cc0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000cc4:	d267      	bcs.n	8000d96 <__udivmoddi4+0x29a>
 8000cc6:	45a4      	cmp	ip, r4
 8000cc8:	d965      	bls.n	8000d96 <__udivmoddi4+0x29a>
 8000cca:	3b02      	subs	r3, #2
 8000ccc:	443c      	add	r4, r7
 8000cce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cd2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cd6:	eba4 040c 	sub.w	r4, r4, ip
 8000cda:	429c      	cmp	r4, r3
 8000cdc:	46ce      	mov	lr, r9
 8000cde:	469c      	mov	ip, r3
 8000ce0:	d351      	bcc.n	8000d86 <__udivmoddi4+0x28a>
 8000ce2:	d04e      	beq.n	8000d82 <__udivmoddi4+0x286>
 8000ce4:	b155      	cbz	r5, 8000cfc <__udivmoddi4+0x200>
 8000ce6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cea:	eb64 040c 	sbc.w	r4, r4, ip
 8000cee:	fa04 f606 	lsl.w	r6, r4, r6
 8000cf2:	40cb      	lsrs	r3, r1
 8000cf4:	431e      	orrs	r6, r3
 8000cf6:	40cc      	lsrs	r4, r1
 8000cf8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	e750      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000d00:	f1c2 0320 	rsb	r3, r2, #32
 8000d04:	fa20 f103 	lsr.w	r1, r0, r3
 8000d08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d10:	4094      	lsls	r4, r2
 8000d12:	430c      	orrs	r4, r1
 8000d14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d1c:	fa1f f78c 	uxth.w	r7, ip
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3110 	mls	r1, r8, r0, r3
 8000d28:	0c23      	lsrs	r3, r4, #16
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f107 	mul.w	r1, r0, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x24c>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d3e:	d22c      	bcs.n	8000d9a <__udivmoddi4+0x29e>
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d92a      	bls.n	8000d9a <__udivmoddi4+0x29e>
 8000d44:	3802      	subs	r0, #2
 8000d46:	4463      	add	r3, ip
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d50:	fb08 3311 	mls	r3, r8, r1, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb01 f307 	mul.w	r3, r1, r7
 8000d5c:	42a3      	cmp	r3, r4
 8000d5e:	d908      	bls.n	8000d72 <__udivmoddi4+0x276>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d68:	d213      	bcs.n	8000d92 <__udivmoddi4+0x296>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d911      	bls.n	8000d92 <__udivmoddi4+0x296>
 8000d6e:	3902      	subs	r1, #2
 8000d70:	4464      	add	r4, ip
 8000d72:	1ae4      	subs	r4, r4, r3
 8000d74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d78:	e739      	b.n	8000bee <__udivmoddi4+0xf2>
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	e6f0      	b.n	8000b60 <__udivmoddi4+0x64>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e706      	b.n	8000b90 <__udivmoddi4+0x94>
 8000d82:	45c8      	cmp	r8, r9
 8000d84:	d2ae      	bcs.n	8000ce4 <__udivmoddi4+0x1e8>
 8000d86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d8e:	3801      	subs	r0, #1
 8000d90:	e7a8      	b.n	8000ce4 <__udivmoddi4+0x1e8>
 8000d92:	4631      	mov	r1, r6
 8000d94:	e7ed      	b.n	8000d72 <__udivmoddi4+0x276>
 8000d96:	4603      	mov	r3, r0
 8000d98:	e799      	b.n	8000cce <__udivmoddi4+0x1d2>
 8000d9a:	4630      	mov	r0, r6
 8000d9c:	e7d4      	b.n	8000d48 <__udivmoddi4+0x24c>
 8000d9e:	46d6      	mov	lr, sl
 8000da0:	e77f      	b.n	8000ca2 <__udivmoddi4+0x1a6>
 8000da2:	4463      	add	r3, ip
 8000da4:	3802      	subs	r0, #2
 8000da6:	e74d      	b.n	8000c44 <__udivmoddi4+0x148>
 8000da8:	4606      	mov	r6, r0
 8000daa:	4623      	mov	r3, r4
 8000dac:	4608      	mov	r0, r1
 8000dae:	e70f      	b.n	8000bd0 <__udivmoddi4+0xd4>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	4463      	add	r3, ip
 8000db4:	e730      	b.n	8000c18 <__udivmoddi4+0x11c>
 8000db6:	bf00      	nop

08000db8 <__aeabi_idiv0>:
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	0a5a      	lsrs	r2, r3, #9
 8000dcc:	490f      	ldr	r1, [pc, #60]	@ (8000e0c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000dce:	fba1 1202 	umull	r1, r2, r1, r2
 8000dd2:	09d2      	lsrs	r2, r2, #7
 8000dd4:	490e      	ldr	r1, [pc, #56]	@ (8000e10 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000dd6:	fb01 f202 	mul.w	r2, r1, r2
 8000dda:	1a9b      	subs	r3, r3, r2
 8000ddc:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	0a5b      	lsrs	r3, r3, #9
 8000de4:	4a09      	ldr	r2, [pc, #36]	@ (8000e0c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000de6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dea:	09db      	lsrs	r3, r3, #7
 8000dec:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	441a      	add	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	68fa      	ldr	r2, [r7, #12]
 8000dfe:	601a      	str	r2, [r3, #0]
}
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	00044b83 	.word	0x00044b83
 8000e10:	3b9aca00 	.word	0x3b9aca00

08000e14 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	4619      	mov	r1, r3
 8000e22:	2007      	movs	r0, #7
 8000e24:	f000 faf0 	bl	8001408 <bno055_writeData>
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	203d      	movs	r0, #61	@ 0x3d
 8000e40:	f000 fae2 	bl	8001408 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d103      	bne.n	8000e52 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000e4a:	2013      	movs	r0, #19
 8000e4c:	f000 fad0 	bl	80013f0 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000e50:	e002      	b.n	8000e58 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000e52:	2007      	movs	r0, #7
 8000e54:	f000 facc 	bl	80013f0 <bno055_delay>
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000e64:	2000      	movs	r0, #0
 8000e66:	f7ff ffe3 	bl	8000e30 <bno055_setOperationMode>
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000e72:	200c      	movs	r0, #12
 8000e74:	f7ff ffdc 	bl	8000e30 <bno055_setOperationMode>
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000e80:	2120      	movs	r1, #32
 8000e82:	203f      	movs	r0, #63	@ 0x3f
 8000e84:	f000 fac0 	bl	8001408 <bno055_writeData>
  bno055_delay(700);
 8000e88:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8000e8c:	f000 fab0 	bl	80013f0 <bno055_delay>
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
  bno055_reset();
 8000e9a:	f7ff ffef 	bl	8000e7c <bno055_reset>

  uint8_t id = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000ea2:	1dfb      	adds	r3, r7, #7
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f000 fb99 	bl	80015e0 <bno055_readData>
  if (id != BNO055_ID) {
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	2ba0      	cmp	r3, #160	@ 0xa0
 8000eb2:	d004      	beq.n	8000ebe <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4809      	ldr	r0, [pc, #36]	@ (8000ee0 <bno055_setup+0x4c>)
 8000eba:	f007 fb0f 	bl	80084dc <iprintf>
  }
  bno055_setPage(0);
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	f7ff ffa8 	bl	8000e14 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	203f      	movs	r0, #63	@ 0x3f
 8000ec8:	f000 fa9e 	bl	8001408 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000ecc:	f7ff ffc8 	bl	8000e60 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8000ed0:	200a      	movs	r0, #10
 8000ed2:	f000 fa8d 	bl	80013f0 <bno055_delay>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	080092b8 	.word	0x080092b8

08000ee4 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8000ee4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ee8:	b09e      	sub	sp, #120	@ 0x78
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f7ff ff8e 	bl	8000e14 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8000ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000efc:	2b20      	cmp	r3, #32
 8000efe:	d108      	bne.n	8000f12 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8000f00:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8000f04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f08:	2208      	movs	r2, #8
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 fb68 	bl	80015e0 <bno055_readData>
 8000f10:	e007      	b.n	8000f22 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8000f12:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8000f16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f1a:	2206      	movs	r2, #6
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f000 fb5f 	bl	80015e0 <bno055_readData>

  double scale = 1;
 8000f22:	f04f 0200 	mov.w	r2, #0
 8000f26:	4b8b      	ldr	r3, [pc, #556]	@ (8001154 <bno055_getVector+0x270>)
 8000f28:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8000f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f30:	2b0e      	cmp	r3, #14
 8000f32:	d109      	bne.n	8000f48 <bno055_getVector+0x64>
    scale = magScale;
 8000f34:	4b88      	ldr	r3, [pc, #544]	@ (8001158 <bno055_getVector+0x274>)
 8000f36:	881b      	ldrh	r3, [r3, #0]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff faeb 	bl	8000514 <__aeabi_ui2d>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	460b      	mov	r3, r1
 8000f42:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8000f46:	e03e      	b.n	8000fc6 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000f48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f4c:	2b08      	cmp	r3, #8
 8000f4e:	d007      	beq.n	8000f60 <bno055_getVector+0x7c>
 8000f50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f54:	2b28      	cmp	r3, #40	@ 0x28
 8000f56:	d003      	beq.n	8000f60 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8000f58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8000f5e:	d109      	bne.n	8000f74 <bno055_getVector+0x90>
    scale = accelScale;
 8000f60:	4b7e      	ldr	r3, [pc, #504]	@ (800115c <bno055_getVector+0x278>)
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fad5 	bl	8000514 <__aeabi_ui2d>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8000f72:	e028      	b.n	8000fc6 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8000f74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f78:	2b14      	cmp	r3, #20
 8000f7a:	d109      	bne.n	8000f90 <bno055_getVector+0xac>
    scale = angularRateScale;
 8000f7c:	4b78      	ldr	r3, [pc, #480]	@ (8001160 <bno055_getVector+0x27c>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fac7 	bl	8000514 <__aeabi_ui2d>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8000f8e:	e01a      	b.n	8000fc6 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8000f90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f94:	2b1a      	cmp	r3, #26
 8000f96:	d109      	bne.n	8000fac <bno055_getVector+0xc8>
    scale = eulerScale;
 8000f98:	4b72      	ldr	r3, [pc, #456]	@ (8001164 <bno055_getVector+0x280>)
 8000f9a:	881b      	ldrh	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fab9 	bl	8000514 <__aeabi_ui2d>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8000faa:	e00c      	b.n	8000fc6 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8000fac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fb0:	2b20      	cmp	r3, #32
 8000fb2:	d108      	bne.n	8000fc6 <bno055_getVector+0xe2>
    scale = quaScale;
 8000fb4:	4b6c      	ldr	r3, [pc, #432]	@ (8001168 <bno055_getVector+0x284>)
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff faab 	bl	8000514 <__aeabi_ui2d>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8000fc6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fca:	2220      	movs	r2, #32
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f007 fbcc 	bl	800876c <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8000fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fd8:	2b20      	cmp	r3, #32
 8000fda:	d150      	bne.n	800107e <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000fdc:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8000fe0:	021b      	lsls	r3, r3, #8
 8000fe2:	b21a      	sxth	r2, r3
 8000fe4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	4313      	orrs	r3, r2
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff faa0 	bl	8000534 <__aeabi_i2d>
 8000ff4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8000ff8:	f7ff fc30 	bl	800085c <__aeabi_ddiv>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001004:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001008:	021b      	lsls	r3, r3, #8
 800100a:	b21a      	sxth	r2, r3
 800100c:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001010:	b21b      	sxth	r3, r3
 8001012:	4313      	orrs	r3, r2
 8001014:	b21b      	sxth	r3, r3
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fa8c 	bl	8000534 <__aeabi_i2d>
 800101c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001020:	f7ff fc1c 	bl	800085c <__aeabi_ddiv>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800102c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001030:	021b      	lsls	r3, r3, #8
 8001032:	b21a      	sxth	r2, r3
 8001034:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001038:	b21b      	sxth	r3, r3
 800103a:	4313      	orrs	r3, r2
 800103c:	b21b      	sxth	r3, r3
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fa78 	bl	8000534 <__aeabi_i2d>
 8001044:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001048:	f7ff fc08 	bl	800085c <__aeabi_ddiv>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8001054:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001058:	021b      	lsls	r3, r3, #8
 800105a:	b21a      	sxth	r2, r3
 800105c:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001060:	b21b      	sxth	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b21b      	sxth	r3, r3
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fa64 	bl	8000534 <__aeabi_i2d>
 800106c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001070:	f7ff fbf4 	bl	800085c <__aeabi_ddiv>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 800107c:	e03b      	b.n	80010f6 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800107e:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001082:	021b      	lsls	r3, r3, #8
 8001084:	b21a      	sxth	r2, r3
 8001086:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800108a:	b21b      	sxth	r3, r3
 800108c:	4313      	orrs	r3, r2
 800108e:	b21b      	sxth	r3, r3
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fa4f 	bl	8000534 <__aeabi_i2d>
 8001096:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800109a:	f7ff fbdf 	bl	800085c <__aeabi_ddiv>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80010a6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	4313      	orrs	r3, r2
 80010b6:	b21b      	sxth	r3, r3
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fa3b 	bl	8000534 <__aeabi_i2d>
 80010be:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80010c2:	f7ff fbcb 	bl	800085c <__aeabi_ddiv>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80010ce:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80010d2:	021b      	lsls	r3, r3, #8
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80010da:	b21b      	sxth	r3, r3
 80010dc:	4313      	orrs	r3, r2
 80010de:	b21b      	sxth	r3, r3
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fa27 	bl	8000534 <__aeabi_i2d>
 80010e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80010ea:	f7ff fbb7 	bl	800085c <__aeabi_ddiv>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 80010f6:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 80010fa:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 80010fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001100:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001102:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001106:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800110a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800110e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001112:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001116:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800111a:	ec49 8b14 	vmov	d4, r8, r9
 800111e:	ec45 4b15 	vmov	d5, r4, r5
 8001122:	ec41 0b16 	vmov	d6, r0, r1
 8001126:	ec43 2b17 	vmov	d7, r2, r3
}
 800112a:	eeb0 0a44 	vmov.f32	s0, s8
 800112e:	eef0 0a64 	vmov.f32	s1, s9
 8001132:	eeb0 1a45 	vmov.f32	s2, s10
 8001136:	eef0 1a65 	vmov.f32	s3, s11
 800113a:	eeb0 2a46 	vmov.f32	s4, s12
 800113e:	eef0 2a66 	vmov.f32	s5, s13
 8001142:	eeb0 3a47 	vmov.f32	s6, s14
 8001146:	eef0 3a67 	vmov.f32	s7, s15
 800114a:	3778      	adds	r7, #120	@ 0x78
 800114c:	46bd      	mov	sp, r7
 800114e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001152:	bf00      	nop
 8001154:	3ff00000 	.word	0x3ff00000
 8001158:	20000006 	.word	0x20000006
 800115c:	20000000 	.word	0x20000000
 8001160:	20000002 	.word	0x20000002
 8001164:	20000004 	.word	0x20000004
 8001168:	20000008 	.word	0x20000008

0800116c <bno055_getVectorMagnetometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
}
bno055_vector_t bno055_getVectorMagnetometer() {
 800116c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001170:	b090      	sub	sp, #64	@ 0x40
 8001172:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
 8001174:	200e      	movs	r0, #14
 8001176:	f7ff feb5 	bl	8000ee4 <bno055_getVector>
 800117a:	eeb0 4a40 	vmov.f32	s8, s0
 800117e:	eef0 4a60 	vmov.f32	s9, s1
 8001182:	eeb0 5a41 	vmov.f32	s10, s2
 8001186:	eef0 5a61 	vmov.f32	s11, s3
 800118a:	eeb0 6a42 	vmov.f32	s12, s4
 800118e:	eef0 6a62 	vmov.f32	s13, s5
 8001192:	eeb0 7a43 	vmov.f32	s14, s6
 8001196:	eef0 7a63 	vmov.f32	s15, s7
 800119a:	ed87 4b08 	vstr	d4, [r7, #32]
 800119e:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 80011a2:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 80011a6:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 80011aa:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80011ae:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80011b2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80011b6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80011ba:	ec49 8b14 	vmov	d4, r8, r9
 80011be:	ec45 4b15 	vmov	d5, r4, r5
 80011c2:	ec41 0b16 	vmov	d6, r0, r1
 80011c6:	ec43 2b17 	vmov	d7, r2, r3
}
 80011ca:	eeb0 0a44 	vmov.f32	s0, s8
 80011ce:	eef0 0a64 	vmov.f32	s1, s9
 80011d2:	eeb0 1a45 	vmov.f32	s2, s10
 80011d6:	eef0 1a65 	vmov.f32	s3, s11
 80011da:	eeb0 2a46 	vmov.f32	s4, s12
 80011de:	eef0 2a66 	vmov.f32	s5, s13
 80011e2:	eeb0 3a47 	vmov.f32	s6, s14
 80011e6:	eef0 3a67 	vmov.f32	s7, s15
 80011ea:	3740      	adds	r7, #64	@ 0x40
 80011ec:	46bd      	mov	sp, r7
 80011ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080011f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	4b10      	ldr	r3, [pc, #64]	@ (8001240 <MX_DMA_Init+0x4c>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	4a0f      	ldr	r2, [pc, #60]	@ (8001240 <MX_DMA_Init+0x4c>)
 8001204:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001208:	6313      	str	r3, [r2, #48]	@ 0x30
 800120a:	4b0d      	ldr	r3, [pc, #52]	@ (8001240 <MX_DMA_Init+0x4c>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	2010      	movs	r0, #16
 800121c:	f002 febf 	bl	8003f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001220:	2010      	movs	r0, #16
 8001222:	f002 fed8 	bl	8003fd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	2011      	movs	r0, #17
 800122c:	f002 feb7 	bl	8003f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001230:	2011      	movs	r0, #17
 8001232:	f002 fed0 	bl	8003fd6 <HAL_NVIC_EnableIRQ>

}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800

08001244 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124a:	f107 030c 	add.w	r3, r7, #12
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
 8001258:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	4b1f      	ldr	r3, [pc, #124]	@ (80012dc <MX_GPIO_Init+0x98>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	4a1e      	ldr	r2, [pc, #120]	@ (80012dc <MX_GPIO_Init+0x98>)
 8001264:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001268:	6313      	str	r3, [r2, #48]	@ 0x30
 800126a:	4b1c      	ldr	r3, [pc, #112]	@ (80012dc <MX_GPIO_Init+0x98>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	4b18      	ldr	r3, [pc, #96]	@ (80012dc <MX_GPIO_Init+0x98>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	4a17      	ldr	r2, [pc, #92]	@ (80012dc <MX_GPIO_Init+0x98>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6313      	str	r3, [r2, #48]	@ 0x30
 8001286:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <MX_GPIO_Init+0x98>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	603b      	str	r3, [r7, #0]
 8001296:	4b11      	ldr	r3, [pc, #68]	@ (80012dc <MX_GPIO_Init+0x98>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	4a10      	ldr	r2, [pc, #64]	@ (80012dc <MX_GPIO_Init+0x98>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a2:	4b0e      	ldr	r3, [pc, #56]	@ (80012dc <MX_GPIO_Init+0x98>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2120      	movs	r1, #32
 80012b2:	480b      	ldr	r0, [pc, #44]	@ (80012e0 <MX_GPIO_Init+0x9c>)
 80012b4:	f003 fc30 	bl	8004b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012b8:	2320      	movs	r3, #32
 80012ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012bc:	2301      	movs	r3, #1
 80012be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	4619      	mov	r1, r3
 80012ce:	4804      	ldr	r0, [pc, #16]	@ (80012e0 <MX_GPIO_Init+0x9c>)
 80012d0:	f003 fa9e 	bl	8004810 <HAL_GPIO_Init>

}
 80012d4:	bf00      	nop
 80012d6:	3720      	adds	r7, #32
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40020400 	.word	0x40020400

080012e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012e8:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <MX_I2C1_Init+0x50>)
 80012ea:	4a13      	ldr	r2, [pc, #76]	@ (8001338 <MX_I2C1_Init+0x54>)
 80012ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012ee:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <MX_I2C1_Init+0x50>)
 80012f0:	4a12      	ldr	r2, [pc, #72]	@ (800133c <MX_I2C1_Init+0x58>)
 80012f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001334 <MX_I2C1_Init+0x50>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001334 <MX_I2C1_Init+0x50>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001300:	4b0c      	ldr	r3, [pc, #48]	@ (8001334 <MX_I2C1_Init+0x50>)
 8001302:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001306:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001308:	4b0a      	ldr	r3, [pc, #40]	@ (8001334 <MX_I2C1_Init+0x50>)
 800130a:	2200      	movs	r2, #0
 800130c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800130e:	4b09      	ldr	r3, [pc, #36]	@ (8001334 <MX_I2C1_Init+0x50>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001314:	4b07      	ldr	r3, [pc, #28]	@ (8001334 <MX_I2C1_Init+0x50>)
 8001316:	2200      	movs	r2, #0
 8001318:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800131a:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <MX_I2C1_Init+0x50>)
 800131c:	2200      	movs	r2, #0
 800131e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001320:	4804      	ldr	r0, [pc, #16]	@ (8001334 <MX_I2C1_Init+0x50>)
 8001322:	f003 fc13 	bl	8004b4c <HAL_I2C_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800132c:	f000 fa88 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000090 	.word	0x20000090
 8001338:	40005400 	.word	0x40005400
 800133c:	000186a0 	.word	0x000186a0

08001340 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	@ 0x28
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a19      	ldr	r2, [pc, #100]	@ (80013c4 <HAL_I2C_MspInit+0x84>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d12b      	bne.n	80013ba <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	4b18      	ldr	r3, [pc, #96]	@ (80013c8 <HAL_I2C_MspInit+0x88>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	4a17      	ldr	r2, [pc, #92]	@ (80013c8 <HAL_I2C_MspInit+0x88>)
 800136c:	f043 0302 	orr.w	r3, r3, #2
 8001370:	6313      	str	r3, [r2, #48]	@ 0x30
 8001372:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <HAL_I2C_MspInit+0x88>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800137e:	23c0      	movs	r3, #192	@ 0xc0
 8001380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001382:	2312      	movs	r3, #18
 8001384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138a:	2303      	movs	r3, #3
 800138c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800138e:	2304      	movs	r3, #4
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4619      	mov	r1, r3
 8001398:	480c      	ldr	r0, [pc, #48]	@ (80013cc <HAL_I2C_MspInit+0x8c>)
 800139a:	f003 fa39 	bl	8004810 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	4b09      	ldr	r3, [pc, #36]	@ (80013c8 <HAL_I2C_MspInit+0x88>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a6:	4a08      	ldr	r2, [pc, #32]	@ (80013c8 <HAL_I2C_MspInit+0x88>)
 80013a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ae:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <HAL_I2C_MspInit+0x88>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013ba:	bf00      	nop
 80013bc:	3728      	adds	r7, #40	@ 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40005400 	.word	0x40005400
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40020400 	.word	0x40020400

080013d0 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 80013d8:	4a04      	ldr	r2, [pc, #16]	@ (80013ec <bno055_assignI2C+0x1c>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6013      	str	r3, [r2, #0]
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	200000e4 	.word	0x200000e4

080013f0 <bno055_delay>:

void bno055_delay(int time) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f002 fcd0 	bl	8003da0 <HAL_Delay>
#endif
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af02      	add	r7, sp, #8
 800140e:	4603      	mov	r3, r0
 8001410:	460a      	mov	r2, r1
 8001412:	71fb      	strb	r3, [r7, #7]
 8001414:	4613      	mov	r3, r2
 8001416:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	733b      	strb	r3, [r7, #12]
 800141c:	79bb      	ldrb	r3, [r7, #6]
 800141e:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001420:	4b5a      	ldr	r3, [pc, #360]	@ (800158c <bno055_writeData+0x184>)
 8001422:	6818      	ldr	r0, [r3, #0]
 8001424:	f107 020c 	add.w	r2, r7, #12
 8001428:	230a      	movs	r3, #10
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2302      	movs	r3, #2
 800142e:	2150      	movs	r1, #80	@ 0x50
 8001430:	f003 fcd0 	bl	8004dd4 <HAL_I2C_Master_Transmit>
 8001434:	4603      	mov	r3, r0
 8001436:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8001438:	7dfb      	ldrb	r3, [r7, #23]
 800143a:	2b00      	cmp	r3, #0
 800143c:	f000 80a0 	beq.w	8001580 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8001440:	7dfb      	ldrb	r3, [r7, #23]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d103      	bne.n	800144e <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8001446:	4852      	ldr	r0, [pc, #328]	@ (8001590 <bno055_writeData+0x188>)
 8001448:	f007 f8b0 	bl	80085ac <puts>
 800144c:	e012      	b.n	8001474 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 800144e:	7dfb      	ldrb	r3, [r7, #23]
 8001450:	2b03      	cmp	r3, #3
 8001452:	d103      	bne.n	800145c <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001454:	484f      	ldr	r0, [pc, #316]	@ (8001594 <bno055_writeData+0x18c>)
 8001456:	f007 f8a9 	bl	80085ac <puts>
 800145a:	e00b      	b.n	8001474 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 800145c:	7dfb      	ldrb	r3, [r7, #23]
 800145e:	2b02      	cmp	r3, #2
 8001460:	d103      	bne.n	800146a <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8001462:	484d      	ldr	r0, [pc, #308]	@ (8001598 <bno055_writeData+0x190>)
 8001464:	f007 f8a2 	bl	80085ac <puts>
 8001468:	e004      	b.n	8001474 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 800146a:	7dfb      	ldrb	r3, [r7, #23]
 800146c:	4619      	mov	r1, r3
 800146e:	484b      	ldr	r0, [pc, #300]	@ (800159c <bno055_writeData+0x194>)
 8001470:	f007 f834 	bl	80084dc <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001474:	4b45      	ldr	r3, [pc, #276]	@ (800158c <bno055_writeData+0x184>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f003 ffe9 	bl	8005450 <HAL_I2C_GetError>
 800147e:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d07e      	beq.n	8001584 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d103      	bne.n	8001494 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 800148c:	4844      	ldr	r0, [pc, #272]	@ (80015a0 <bno055_writeData+0x198>)
 800148e:	f007 f88d 	bl	80085ac <puts>
 8001492:	e021      	b.n	80014d8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	2b02      	cmp	r3, #2
 8001498:	d103      	bne.n	80014a2 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 800149a:	4842      	ldr	r0, [pc, #264]	@ (80015a4 <bno055_writeData+0x19c>)
 800149c:	f007 f886 	bl	80085ac <puts>
 80014a0:	e01a      	b.n	80014d8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	2b04      	cmp	r3, #4
 80014a6:	d103      	bne.n	80014b0 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 80014a8:	483f      	ldr	r0, [pc, #252]	@ (80015a8 <bno055_writeData+0x1a0>)
 80014aa:	f007 f87f 	bl	80085ac <puts>
 80014ae:	e013      	b.n	80014d8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	2b08      	cmp	r3, #8
 80014b4:	d103      	bne.n	80014be <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 80014b6:	483d      	ldr	r0, [pc, #244]	@ (80015ac <bno055_writeData+0x1a4>)
 80014b8:	f007 f878 	bl	80085ac <puts>
 80014bc:	e00c      	b.n	80014d8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	2b10      	cmp	r3, #16
 80014c2:	d103      	bne.n	80014cc <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 80014c4:	483a      	ldr	r0, [pc, #232]	@ (80015b0 <bno055_writeData+0x1a8>)
 80014c6:	f007 f871 	bl	80085ac <puts>
 80014ca:	e005      	b.n	80014d8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	2b20      	cmp	r3, #32
 80014d0:	d102      	bne.n	80014d8 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 80014d2:	4838      	ldr	r0, [pc, #224]	@ (80015b4 <bno055_writeData+0x1ac>)
 80014d4:	f007 f86a 	bl	80085ac <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 80014d8:	4b2c      	ldr	r3, [pc, #176]	@ (800158c <bno055_writeData+0x184>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f003 ffa9 	bl	8005434 <HAL_I2C_GetState>
 80014e2:	4603      	mov	r3, r0
 80014e4:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d103      	bne.n	80014f4 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 80014ec:	4832      	ldr	r0, [pc, #200]	@ (80015b8 <bno055_writeData+0x1b0>)
 80014ee:	f007 f85d 	bl	80085ac <puts>
 80014f2:	e048      	b.n	8001586 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	2b20      	cmp	r3, #32
 80014f8:	d103      	bne.n	8001502 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 80014fa:	482f      	ldr	r0, [pc, #188]	@ (80015b8 <bno055_writeData+0x1b0>)
 80014fc:	f007 f856 	bl	80085ac <puts>
 8001500:	e041      	b.n	8001586 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	2b24      	cmp	r3, #36	@ 0x24
 8001506:	d103      	bne.n	8001510 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001508:	482c      	ldr	r0, [pc, #176]	@ (80015bc <bno055_writeData+0x1b4>)
 800150a:	f007 f84f 	bl	80085ac <puts>
 800150e:	e03a      	b.n	8001586 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	2b21      	cmp	r3, #33	@ 0x21
 8001514:	d103      	bne.n	800151e <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8001516:	482a      	ldr	r0, [pc, #168]	@ (80015c0 <bno055_writeData+0x1b8>)
 8001518:	f007 f848 	bl	80085ac <puts>
 800151c:	e033      	b.n	8001586 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	2b22      	cmp	r3, #34	@ 0x22
 8001522:	d103      	bne.n	800152c <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001524:	4827      	ldr	r0, [pc, #156]	@ (80015c4 <bno055_writeData+0x1bc>)
 8001526:	f007 f841 	bl	80085ac <puts>
 800152a:	e02c      	b.n	8001586 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	2b28      	cmp	r3, #40	@ 0x28
 8001530:	d103      	bne.n	800153a <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8001532:	4825      	ldr	r0, [pc, #148]	@ (80015c8 <bno055_writeData+0x1c0>)
 8001534:	f007 f83a 	bl	80085ac <puts>
 8001538:	e025      	b.n	8001586 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	2b29      	cmp	r3, #41	@ 0x29
 800153e:	d103      	bne.n	8001548 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001540:	4822      	ldr	r0, [pc, #136]	@ (80015cc <bno055_writeData+0x1c4>)
 8001542:	f007 f833 	bl	80085ac <puts>
 8001546:	e01e      	b.n	8001586 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001548:	7bfb      	ldrb	r3, [r7, #15]
 800154a:	2b2a      	cmp	r3, #42	@ 0x2a
 800154c:	d103      	bne.n	8001556 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 800154e:	4820      	ldr	r0, [pc, #128]	@ (80015d0 <bno055_writeData+0x1c8>)
 8001550:	f007 f82c 	bl	80085ac <puts>
 8001554:	e017      	b.n	8001586 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	2b60      	cmp	r3, #96	@ 0x60
 800155a:	d103      	bne.n	8001564 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 800155c:	481d      	ldr	r0, [pc, #116]	@ (80015d4 <bno055_writeData+0x1cc>)
 800155e:	f007 f825 	bl	80085ac <puts>
 8001562:	e010      	b.n	8001586 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	2ba0      	cmp	r3, #160	@ 0xa0
 8001568:	d103      	bne.n	8001572 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 800156a:	481b      	ldr	r0, [pc, #108]	@ (80015d8 <bno055_writeData+0x1d0>)
 800156c:	f007 f81e 	bl	80085ac <puts>
 8001570:	e009      	b.n	8001586 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	2be0      	cmp	r3, #224	@ 0xe0
 8001576:	d106      	bne.n	8001586 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001578:	4818      	ldr	r0, [pc, #96]	@ (80015dc <bno055_writeData+0x1d4>)
 800157a:	f007 f817 	bl	80085ac <puts>
 800157e:	e002      	b.n	8001586 <bno055_writeData+0x17e>
    return;
 8001580:	bf00      	nop
 8001582:	e000      	b.n	8001586 <bno055_writeData+0x17e>
    return;
 8001584:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200000e4 	.word	0x200000e4
 8001590:	080092f4 	.word	0x080092f4
 8001594:	08009318 	.word	0x08009318
 8001598:	08009340 	.word	0x08009340
 800159c:	08009364 	.word	0x08009364
 80015a0:	0800937c 	.word	0x0800937c
 80015a4:	08009390 	.word	0x08009390
 80015a8:	080093a4 	.word	0x080093a4
 80015ac:	080093b8 	.word	0x080093b8
 80015b0:	080093cc 	.word	0x080093cc
 80015b4:	080093e0 	.word	0x080093e0
 80015b8:	080093f8 	.word	0x080093f8
 80015bc:	08009410 	.word	0x08009410
 80015c0:	08009424 	.word	0x08009424
 80015c4:	0800943c 	.word	0x0800943c
 80015c8:	08009454 	.word	0x08009454
 80015cc:	0800946c 	.word	0x0800946c
 80015d0:	0800948c 	.word	0x0800948c
 80015d4:	080094ac 	.word	0x080094ac
 80015d8:	080094c4 	.word	0x080094c4
 80015dc:	080094dc 	.word	0x080094dc

080015e0 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af02      	add	r7, sp, #8
 80015e6:	4603      	mov	r3, r0
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	71fb      	strb	r3, [r7, #7]
 80015ec:	4613      	mov	r3, r2
 80015ee:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 80015f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001620 <bno055_readData+0x40>)
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	1dfa      	adds	r2, r7, #7
 80015f6:	2364      	movs	r3, #100	@ 0x64
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	2301      	movs	r3, #1
 80015fc:	2150      	movs	r1, #80	@ 0x50
 80015fe:	f003 fbe9 	bl	8004dd4 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8001602:	4b07      	ldr	r3, [pc, #28]	@ (8001620 <bno055_readData+0x40>)
 8001604:	6818      	ldr	r0, [r3, #0]
 8001606:	79bb      	ldrb	r3, [r7, #6]
 8001608:	b29b      	uxth	r3, r3
 800160a:	2264      	movs	r2, #100	@ 0x64
 800160c:	9200      	str	r2, [sp, #0]
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	2150      	movs	r1, #80	@ 0x50
 8001612:	f003 fcdd 	bl	8004fd0 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200000e4 	.word	0x200000e4

08001624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	@ 0x28
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	uint32_t currenTick = HAL_GetTick();
 800162a:	f002 fbad 	bl	8003d88 <HAL_GetTick>
 800162e:	6278      	str	r0, [r7, #36]	@ 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001630:	f002 fb44 	bl	8003cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001634:	f000 f884 	bl	8001740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001638:	f7ff fe04 	bl	8001244 <MX_GPIO_Init>
  MX_DMA_Init();
 800163c:	f7ff fdda 	bl	80011f4 <MX_DMA_Init>
  MX_I2C1_Init();
 8001640:	f7ff fe50 	bl	80012e4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001644:	f002 f87e 	bl	8003744 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001648:	f002 f8cc 	bl	80037e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800164c:	f002 f91e 	bl	800388c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001650:	f002 fa2a 	bl	8003aa8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);
 8001654:	4831      	ldr	r0, [pc, #196]	@ (800171c <main+0xf8>)
 8001656:	f004 ff35 	bl	80064c4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800165a:	213c      	movs	r1, #60	@ 0x3c
 800165c:	4830      	ldr	r0, [pc, #192]	@ (8001720 <main+0xfc>)
 800165e:	f005 f839 	bl	80066d4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001662:	213c      	movs	r1, #60	@ 0x3c
 8001664:	482f      	ldr	r0, [pc, #188]	@ (8001724 <main+0x100>)
 8001666:	f005 f835 	bl	80066d4 <HAL_TIM_Encoder_Start>

  bno055_assignI2C(&hi2c1);
 800166a:	482f      	ldr	r0, [pc, #188]	@ (8001728 <main+0x104>)
 800166c:	f7ff feb0 	bl	80013d0 <bno055_assignI2C>
  bno055_setup();
 8001670:	f7ff fc10 	bl	8000e94 <bno055_setup>
  bno055_setOperationModeNDOF();
 8001674:	f7ff fbfb 	bl	8000e6e <bno055_setOperationModeNDOF>
  setup();
 8001678:	f001 f9ee 	bl	8002a58 <setup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	  bno055_vector_t v = bno055_getVectorMagnetometer();
 800167c:	f7ff fd76 	bl	800116c <bno055_getVectorMagnetometer>
 8001680:	eeb0 4a40 	vmov.f32	s8, s0
 8001684:	eef0 4a60 	vmov.f32	s9, s1
 8001688:	eeb0 5a41 	vmov.f32	s10, s2
 800168c:	eef0 5a61 	vmov.f32	s11, s3
 8001690:	eeb0 6a42 	vmov.f32	s12, s4
 8001694:	eef0 6a62 	vmov.f32	s13, s5
 8001698:	eeb0 7a43 	vmov.f32	s14, s6
 800169c:	eef0 7a63 	vmov.f32	s15, s7
 80016a0:	ed87 4b00 	vstr	d4, [r7]
 80016a4:	ed87 5b02 	vstr	d5, [r7, #8]
 80016a8:	ed87 6b04 	vstr	d6, [r7, #16]
 80016ac:	ed87 7b06 	vstr	d7, [r7, #24]
		x = v.x;
 80016b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016b4:	4610      	mov	r0, r2
 80016b6:	4619      	mov	r1, r3
 80016b8:	f7ff f9b8 	bl	8000a2c <__aeabi_d2f>
 80016bc:	4603      	mov	r3, r0
 80016be:	4a1b      	ldr	r2, [pc, #108]	@ (800172c <main+0x108>)
 80016c0:	6013      	str	r3, [r2, #0]
		y = v.y;
 80016c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016c6:	4610      	mov	r0, r2
 80016c8:	4619      	mov	r1, r3
 80016ca:	f7ff f9af 	bl	8000a2c <__aeabi_d2f>
 80016ce:	4603      	mov	r3, r0
 80016d0:	4a17      	ldr	r2, [pc, #92]	@ (8001730 <main+0x10c>)
 80016d2:	6013      	str	r3, [r2, #0]
		z = v.z;
 80016d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016d8:	4610      	mov	r0, r2
 80016da:	4619      	mov	r1, r3
 80016dc:	f7ff f9a6 	bl	8000a2c <__aeabi_d2f>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4a14      	ldr	r2, [pc, #80]	@ (8001734 <main+0x110>)
 80016e4:	6013      	str	r3, [r2, #0]
		w = v.w;
 80016e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016ea:	4610      	mov	r0, r2
 80016ec:	4619      	mov	r1, r3
 80016ee:	f7ff f99d 	bl	8000a2c <__aeabi_d2f>
 80016f2:	4603      	mov	r3, r0
 80016f4:	4a10      	ldr	r2, [pc, #64]	@ (8001738 <main+0x114>)
 80016f6:	6013      	str	r3, [r2, #0]

//		rx_ros(x, y, z);

		bno.x = x;
 80016f8:	4b0c      	ldr	r3, [pc, #48]	@ (800172c <main+0x108>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a0f      	ldr	r2, [pc, #60]	@ (800173c <main+0x118>)
 80016fe:	6013      	str	r3, [r2, #0]




	  if(HAL_GetTick()-currenTick>10){
 8001700:	f002 fb42 	bl	8003d88 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b0a      	cmp	r3, #10
 800170c:	d9b6      	bls.n	800167c <main+0x58>
		  loop();
 800170e:	f001 f9b3 	bl	8002a78 <loop>
		  currenTick = HAL_GetTick();
 8001712:	f002 fb39 	bl	8003d88 <HAL_GetTick>
 8001716:	6278      	str	r0, [r7, #36]	@ 0x24
  {
 8001718:	e7b0      	b.n	800167c <main+0x58>
 800171a:	bf00      	nop
 800171c:	20000a68 	.word	0x20000a68
 8001720:	20000ab0 	.word	0x20000ab0
 8001724:	20000af8 	.word	0x20000af8
 8001728:	20000090 	.word	0x20000090
 800172c:	200000e8 	.word	0x200000e8
 8001730:	200000ec 	.word	0x200000ec
 8001734:	200000f0 	.word	0x200000f0
 8001738:	200000f4 	.word	0x200000f4
 800173c:	20000100 	.word	0x20000100

08001740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b094      	sub	sp, #80	@ 0x50
 8001744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001746:	f107 0320 	add.w	r3, r7, #32
 800174a:	2230      	movs	r2, #48	@ 0x30
 800174c:	2100      	movs	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f007 f80c 	bl	800876c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	4b27      	ldr	r3, [pc, #156]	@ (8001808 <SystemClock_Config+0xc8>)
 800176a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176c:	4a26      	ldr	r2, [pc, #152]	@ (8001808 <SystemClock_Config+0xc8>)
 800176e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001772:	6413      	str	r3, [r2, #64]	@ 0x40
 8001774:	4b24      	ldr	r3, [pc, #144]	@ (8001808 <SystemClock_Config+0xc8>)
 8001776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001778:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001780:	2300      	movs	r3, #0
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	4b21      	ldr	r3, [pc, #132]	@ (800180c <SystemClock_Config+0xcc>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a20      	ldr	r2, [pc, #128]	@ (800180c <SystemClock_Config+0xcc>)
 800178a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	4b1e      	ldr	r3, [pc, #120]	@ (800180c <SystemClock_Config+0xcc>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800179c:	2301      	movs	r3, #1
 800179e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a6:	2302      	movs	r3, #2
 80017a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80017b0:	230c      	movs	r3, #12
 80017b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80017b4:	2360      	movs	r3, #96	@ 0x60
 80017b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017b8:	2302      	movs	r3, #2
 80017ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017bc:	2304      	movs	r3, #4
 80017be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c0:	f107 0320 	add.w	r3, r7, #32
 80017c4:	4618      	mov	r0, r3
 80017c6:	f004 f9d5 	bl	8005b74 <HAL_RCC_OscConfig>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017d0:	f000 f836 	bl	8001840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d4:	230f      	movs	r3, #15
 80017d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017d8:	2302      	movs	r3, #2
 80017da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80017ea:	f107 030c 	add.w	r3, r7, #12
 80017ee:	2103      	movs	r1, #3
 80017f0:	4618      	mov	r0, r3
 80017f2:	f004 fc37 	bl	8006064 <HAL_RCC_ClockConfig>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80017fc:	f000 f820 	bl	8001840 <Error_Handler>
  }
}
 8001800:	bf00      	nop
 8001802:	3750      	adds	r7, #80	@ 0x50
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40023800 	.word	0x40023800
 800180c:	40007000 	.word	0x40007000

08001810 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

int cnt = 0;
float xx = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	if(htim==&htim1){
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a07      	ldr	r2, [pc, #28]	@ (8001838 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d104      	bne.n	800182a <HAL_TIM_PeriodElapsedCallback+0x1a>


//		xx = mag_send.bnoX;
		cnt++;
 8001820:	4b06      	ldr	r3, [pc, #24]	@ (800183c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	3301      	adds	r3, #1
 8001826:	4a05      	ldr	r2, [pc, #20]	@ (800183c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001828:	6013      	str	r3, [r2, #0]
	}
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	20000a68 	.word	0x20000a68
 800183c:	200000f8 	.word	0x200000f8

08001840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001844:	b672      	cpsid	i
}
 8001846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <Error_Handler+0x8>

0800184c <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4618      	mov	r0, r3
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	4a04      	ldr	r2, [pc, #16]	@ (800188c <_ZN3ros3MsgC1Ev+0x1c>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4618      	mov	r0, r3
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	0800970c 	.word	0x0800970c

08001890 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
      data()
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff ffe8 	bl	8001870 <_ZN3ros3MsgC1Ev>
 80018a0:	4a06      	ldr	r2, [pc, #24]	@ (80018bc <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3304      	adds	r3, #4
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff ffce 	bl	800184c <_ZN3ros4TimeC1Ev>
    {
    }
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	080096f4 	.word	0x080096f4

080018c0 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6859      	ldr	r1, [r3, #4]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	4413      	add	r3, r2
 80018d8:	b2ca      	uxtb	r2, r1
 80018da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	0a19      	lsrs	r1, r3, #8
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	3301      	adds	r3, #1
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	4413      	add	r3, r2
 80018ea:	b2ca      	uxtb	r2, r1
 80018ec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	0c19      	lsrs	r1, r3, #16
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	3302      	adds	r3, #2
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	4413      	add	r3, r2
 80018fc:	b2ca      	uxtb	r2, r1
 80018fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	0e19      	lsrs	r1, r3, #24
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	3303      	adds	r3, #3
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	4413      	add	r3, r2
 800190e:	b2ca      	uxtb	r2, r1
 8001910:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	3304      	adds	r3, #4
 8001916:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6899      	ldr	r1, [r3, #8]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	4413      	add	r3, r2
 8001922:	b2ca      	uxtb	r2, r1
 8001924:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	0a19      	lsrs	r1, r3, #8
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	3301      	adds	r3, #1
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	4413      	add	r3, r2
 8001934:	b2ca      	uxtb	r2, r1
 8001936:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	0c19      	lsrs	r1, r3, #16
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	3302      	adds	r3, #2
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	4413      	add	r3, r2
 8001946:	b2ca      	uxtb	r2, r1
 8001948:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	0e19      	lsrs	r1, r3, #24
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	3303      	adds	r3, #3
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	4413      	add	r3, r2
 8001958:	b2ca      	uxtb	r2, r1
 800195a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	3304      	adds	r3, #4
 8001960:	60fb      	str	r3, [r7, #12]
      return offset;
 8001962:	68fb      	ldr	r3, [r7, #12]
    }
 8001964:	4618      	mov	r0, r3
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	4413      	add	r3, r2
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	3301      	adds	r3, #1
 8001994:	6839      	ldr	r1, [r7, #0]
 8001996:	440b      	add	r3, r1
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	021b      	lsls	r3, r3, #8
 800199c:	431a      	orrs	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	3302      	adds	r3, #2
 80019aa:	6839      	ldr	r1, [r7, #0]
 80019ac:	440b      	add	r3, r1
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	041b      	lsls	r3, r3, #16
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	3303      	adds	r3, #3
 80019c0:	6839      	ldr	r1, [r7, #0]
 80019c2:	440b      	add	r3, r1
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	061b      	lsls	r3, r3, #24
 80019c8:	431a      	orrs	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3304      	adds	r3, #4
 80019d2:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	4413      	add	r3, r2
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	461a      	mov	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	3301      	adds	r3, #1
 80019ea:	6839      	ldr	r1, [r7, #0]
 80019ec:	440b      	add	r3, r1
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	3302      	adds	r3, #2
 8001a00:	6839      	ldr	r1, [r7, #0]
 8001a02:	440b      	add	r3, r1
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	041b      	lsls	r3, r3, #16
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	3303      	adds	r3, #3
 8001a16:	6839      	ldr	r1, [r7, #0]
 8001a18:	440b      	add	r3, r1
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	061b      	lsls	r3, r3, #24
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	3304      	adds	r3, #4
 8001a28:	60fb      	str	r3, [r7, #12]
     return offset;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
    }
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	4b03      	ldr	r3, [pc, #12]	@ (8001a50 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001a42:	4618      	mov	r0, r3
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	080094f4 	.word	0x080094f4

08001a54 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	4b03      	ldr	r3, [pc, #12]	@ (8001a6c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	08009504 	.word	0x08009504

08001a70 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fef8 	bl	8001870 <_ZN3ros3MsgC1Ev>
 8001a80:	4a0b      	ldr	r2, [pc, #44]	@ (8001ab0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a09      	ldr	r2, [pc, #36]	@ (8001ab4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001a90:	609a      	str	r2, [r3, #8]
      message_type(""),
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a07      	ldr	r2, [pc, #28]	@ (8001ab4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001a96:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a06      	ldr	r2, [pc, #24]	@ (8001ab4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001a9c:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	615a      	str	r2, [r3, #20]
    {
    }
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	080096dc 	.word	0x080096dc
 8001ab4:	08009528 	.word	0x08009528

08001ab8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	8899      	ldrh	r1, [r3, #4]
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	4413      	add	r3, r2
 8001ad0:	b2ca      	uxtb	r2, r1
 8001ad2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	889b      	ldrh	r3, [r3, #4]
 8001ad8:	0a1b      	lsrs	r3, r3, #8
 8001ada:	b299      	uxth	r1, r3
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b2ca      	uxtb	r2, r1
 8001ae6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	3302      	adds	r3, #2
 8001aec:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fb74 	bl	80001e0 <strlen>
 8001af8:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	4413      	add	r3, r2
 8001b00:	69b9      	ldr	r1, [r7, #24]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 ffd0 	bl	8002aa8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	18d0      	adds	r0, r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f006 fea1 	bl	8008862 <memcpy>
      offset += length_topic_name;
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	4413      	add	r3, r2
 8001b26:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fb57 	bl	80001e0 <strlen>
 8001b32:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	4413      	add	r3, r2
 8001b3a:	6979      	ldr	r1, [r7, #20]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f000 ffb3 	bl	8002aa8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3304      	adds	r3, #4
 8001b46:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	18d0      	adds	r0, r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	4619      	mov	r1, r3
 8001b56:	f006 fe84 	bl	8008862 <memcpy>
      offset += length_message_type;
 8001b5a:	69fa      	ldr	r2, [r7, #28]
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	4413      	add	r3, r2
 8001b60:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fb3a 	bl	80001e0 <strlen>
 8001b6c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	6939      	ldr	r1, [r7, #16]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 ff96 	bl	8002aa8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	3304      	adds	r3, #4
 8001b80:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	18d0      	adds	r0, r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4619      	mov	r1, r3
 8001b90:	f006 fe67 	bl	8008862 <memcpy>
      offset += length_md5sum;
 8001b94:	69fa      	ldr	r2, [r7, #28]
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	4413      	add	r3, r2
 8001b9a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001ba2:	68f9      	ldr	r1, [r7, #12]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	4413      	add	r3, r2
 8001baa:	b2ca      	uxtb	r2, r1
 8001bac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	0a19      	lsrs	r1, r3, #8
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	4413      	add	r3, r2
 8001bba:	b2ca      	uxtb	r2, r1
 8001bbc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	0c19      	lsrs	r1, r3, #16
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	4413      	add	r3, r2
 8001bca:	b2ca      	uxtb	r2, r1
 8001bcc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	0e19      	lsrs	r1, r3, #24
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3303      	adds	r3, #3
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	4413      	add	r3, r2
 8001bda:	b2ca      	uxtb	r2, r1
 8001bdc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3304      	adds	r3, #4
 8001be2:	61fb      	str	r3, [r7, #28]
      return offset;
 8001be4:	69fb      	ldr	r3, [r7, #28]
    }
 8001be6:	4618      	mov	r0, r3
 8001be8:	3720      	adds	r7, #32
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b08a      	sub	sp, #40	@ 0x28
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	4413      	add	r3, r2
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	889b      	ldrh	r3, [r3, #4]
 8001c0e:	b21a      	sxth	r2, r3
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	3301      	adds	r3, #1
 8001c14:	6839      	ldr	r1, [r7, #0]
 8001c16:	440b      	add	r3, r1
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	021b      	lsls	r3, r3, #8
 8001c1c:	b21b      	sxth	r3, r3
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	b21b      	sxth	r3, r3
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	3302      	adds	r3, #2
 8001c2c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	441a      	add	r2, r3
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	4611      	mov	r1, r2
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 ff53 	bl	8002ae6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	3304      	adds	r3, #4
 8001c44:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c4a:	e00b      	b.n	8001c64 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c50:	441a      	add	r2, r3
 8001c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c54:	3b01      	subs	r3, #1
 8001c56:	6839      	ldr	r1, [r7, #0]
 8001c58:	440b      	add	r3, r1
 8001c5a:	7812      	ldrb	r2, [r2, #0]
 8001c5c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c60:	3301      	adds	r3, #1
 8001c62:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	4413      	add	r3, r2
 8001c6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d3ed      	bcc.n	8001c4c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	4413      	add	r3, r2
 8001c76:	3b01      	subs	r3, #1
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	441a      	add	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	4413      	add	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	441a      	add	r2, r3
 8001c9a:	f107 0310 	add.w	r3, r7, #16
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f000 ff20 	bl	8002ae6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	623b      	str	r3, [r7, #32]
 8001cb0:	e00b      	b.n	8001cca <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	441a      	add	r2, r3
 8001cb8:	6a3b      	ldr	r3, [r7, #32]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	6839      	ldr	r1, [r7, #0]
 8001cbe:	440b      	add	r3, r1
 8001cc0:	7812      	ldrb	r2, [r2, #0]
 8001cc2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	623b      	str	r3, [r7, #32]
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	4413      	add	r3, r2
 8001cd0:	6a3a      	ldr	r2, [r7, #32]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d3ed      	bcc.n	8001cb2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4413      	add	r3, r2
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	441a      	add	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	441a      	add	r2, r3
 8001d00:	f107 030c 	add.w	r3, r7, #12
 8001d04:	4611      	mov	r1, r2
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 feed 	bl	8002ae6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	3304      	adds	r3, #4
 8001d10:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	e00b      	b.n	8001d30 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	441a      	add	r2, r3
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3b01      	subs	r3, #1
 8001d22:	6839      	ldr	r1, [r7, #0]
 8001d24:	440b      	add	r3, r1
 8001d26:	7812      	ldrb	r2, [r2, #0]
 8001d28:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	61fb      	str	r3, [r7, #28]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	4413      	add	r3, r2
 8001d36:	69fa      	ldr	r2, [r7, #28]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d3ed      	bcc.n	8001d18 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	4413      	add	r3, r2
 8001d42:	3b01      	subs	r3, #1
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	4413      	add	r3, r2
 8001d48:	2200      	movs	r2, #0
 8001d4a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	441a      	add	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	6839      	ldr	r1, [r7, #0]
 8001d6a:	440a      	add	r2, r1
 8001d6c:	7812      	ldrb	r2, [r2, #0]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	3301      	adds	r3, #1
 8001d78:	6839      	ldr	r1, [r7, #0]
 8001d7a:	440b      	add	r3, r1
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	021b      	lsls	r3, r3, #8
 8001d80:	4313      	orrs	r3, r2
 8001d82:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001d84:	68ba      	ldr	r2, [r7, #8]
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	3302      	adds	r3, #2
 8001d8a:	6839      	ldr	r1, [r7, #0]
 8001d8c:	440b      	add	r3, r1
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	041b      	lsls	r3, r3, #16
 8001d92:	4313      	orrs	r3, r2
 8001d94:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	3303      	adds	r3, #3
 8001d9c:	6839      	ldr	r1, [r7, #0]
 8001d9e:	440b      	add	r3, r1
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	061b      	lsls	r3, r3, #24
 8001da4:	4313      	orrs	r3, r2
 8001da6:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	3304      	adds	r3, #4
 8001db2:	61bb      	str	r3, [r7, #24]
     return offset;
 8001db4:	69bb      	ldr	r3, [r7, #24]
    }
 8001db6:	4618      	mov	r0, r3
 8001db8:	3728      	adds	r7, #40	@ 0x28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	4b03      	ldr	r3, [pc, #12]	@ (8001dd8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001dca:	4618      	mov	r0, r3
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	0800952c 	.word	0x0800952c

08001ddc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	4b03      	ldr	r3, [pc, #12]	@ (8001df4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	08009548 	.word	0x08009548

08001df8 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fd34 	bl	8001870 <_ZN3ros3MsgC1Ev>
 8001e08:	4a06      	ldr	r2, [pc, #24]	@ (8001e24 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	601a      	str	r2, [r3, #0]
      level(0),
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	711a      	strb	r2, [r3, #4]
      msg("")
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a04      	ldr	r2, [pc, #16]	@ (8001e28 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001e18:	609a      	str	r2, [r3, #8]
    {
    }
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	080096c4 	.word	0x080096c4
 8001e28:	08009528 	.word	0x08009528

08001e2c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	4413      	add	r3, r2
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	7912      	ldrb	r2, [r2, #4]
 8001e44:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe f9c5 	bl	80001e0 <strlen>
 8001e56:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	68b9      	ldr	r1, [r7, #8]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f000 fe21 	bl	8002aa8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	18d0      	adds	r0, r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f006 fcf2 	bl	8008862 <memcpy>
      offset += length_msg;
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	4413      	add	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
      return offset;
 8001e86:	68fb      	ldr	r3, [r7, #12]
    }
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	781a      	ldrb	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	3301      	adds	r3, #1
 8001eae:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	441a      	add	r2, r3
 8001eb6:	f107 030c 	add.w	r3, r7, #12
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 fe12 	bl	8002ae6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	e00b      	b.n	8001ee6 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	441a      	add	r2, r3
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	6839      	ldr	r1, [r7, #0]
 8001eda:	440b      	add	r3, r1
 8001edc:	7812      	ldrb	r2, [r2, #0]
 8001ede:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4413      	add	r3, r2
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d3ed      	bcc.n	8001ece <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	4413      	add	r3, r2
 8001efe:	2200      	movs	r2, #0
 8001f00:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	3b01      	subs	r3, #1
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	441a      	add	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4413      	add	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
     return offset;
 8001f16:	693b      	ldr	r3, [r7, #16]
    }
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	4b03      	ldr	r3, [pc, #12]	@ (8001f38 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	0800956c 	.word	0x0800956c

08001f3c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	4b03      	ldr	r3, [pc, #12]	@ (8001f54 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001f46:	4618      	mov	r0, r3
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	08009580 	.word	0x08009580

08001f58 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fc84 	bl	8001870 <_ZN3ros3MsgC1Ev>
 8001f68:	4a11      	ldr	r2, [pc, #68]	@ (8001fb0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	611a      	str	r2, [r3, #16]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	615a      	str	r2, [r3, #20]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	61da      	str	r2, [r3, #28]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	621a      	str	r2, [r3, #32]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	080096ac 	.word	0x080096ac

08001fb4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08a      	sub	sp, #40	@ 0x28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6859      	ldr	r1, [r3, #4]
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	4413      	add	r3, r2
 8001fcc:	b2ca      	uxtb	r2, r1
 8001fce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	0a19      	lsrs	r1, r3, #8
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd8:	3301      	adds	r3, #1
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	4413      	add	r3, r2
 8001fde:	b2ca      	uxtb	r2, r1
 8001fe0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	0c19      	lsrs	r1, r3, #16
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fea:	3302      	adds	r3, #2
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	4413      	add	r3, r2
 8001ff0:	b2ca      	uxtb	r2, r1
 8001ff2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	0e19      	lsrs	r1, r3, #24
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffc:	3303      	adds	r3, #3
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	4413      	add	r3, r2
 8002002:	b2ca      	uxtb	r2, r1
 8002004:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002008:	3304      	adds	r3, #4
 800200a:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800200c:	2300      	movs	r3, #0
 800200e:	623b      	str	r3, [r7, #32]
 8002010:	e02a      	b.n	8002068 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68da      	ldr	r2, [r3, #12]
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002020:	6939      	ldr	r1, [r7, #16]
 8002022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	4413      	add	r3, r2
 8002028:	b2ca      	uxtb	r2, r1
 800202a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	0a19      	lsrs	r1, r3, #8
 8002030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002032:	3301      	adds	r3, #1
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	4413      	add	r3, r2
 8002038:	b2ca      	uxtb	r2, r1
 800203a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	0c19      	lsrs	r1, r3, #16
 8002040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002042:	3302      	adds	r3, #2
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	4413      	add	r3, r2
 8002048:	b2ca      	uxtb	r2, r1
 800204a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	0e19      	lsrs	r1, r3, #24
 8002050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002052:	3303      	adds	r3, #3
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	4413      	add	r3, r2
 8002058:	b2ca      	uxtb	r2, r1
 800205a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 800205c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205e:	3304      	adds	r3, #4
 8002060:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002062:	6a3b      	ldr	r3, [r7, #32]
 8002064:	3301      	adds	r3, #1
 8002066:	623b      	str	r3, [r7, #32]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	6a3a      	ldr	r2, [r7, #32]
 800206e:	429a      	cmp	r2, r3
 8002070:	d3cf      	bcc.n	8002012 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6919      	ldr	r1, [r3, #16]
 8002076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	4413      	add	r3, r2
 800207c:	b2ca      	uxtb	r2, r1
 800207e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	0a19      	lsrs	r1, r3, #8
 8002086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002088:	3301      	adds	r3, #1
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	4413      	add	r3, r2
 800208e:	b2ca      	uxtb	r2, r1
 8002090:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	0c19      	lsrs	r1, r3, #16
 8002098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209a:	3302      	adds	r3, #2
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	4413      	add	r3, r2
 80020a0:	b2ca      	uxtb	r2, r1
 80020a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	0e19      	lsrs	r1, r3, #24
 80020aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ac:	3303      	adds	r3, #3
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	4413      	add	r3, r2
 80020b2:	b2ca      	uxtb	r2, r1
 80020b4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80020b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b8:	3304      	adds	r3, #4
 80020ba:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]
 80020c0:	e02a      	b.n	8002118 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	699a      	ldr	r2, [r3, #24]
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80020d0:	68f9      	ldr	r1, [r7, #12]
 80020d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	4413      	add	r3, r2
 80020d8:	b2ca      	uxtb	r2, r1
 80020da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	0a19      	lsrs	r1, r3, #8
 80020e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e2:	3301      	adds	r3, #1
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	4413      	add	r3, r2
 80020e8:	b2ca      	uxtb	r2, r1
 80020ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	0c19      	lsrs	r1, r3, #16
 80020f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f2:	3302      	adds	r3, #2
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	4413      	add	r3, r2
 80020f8:	b2ca      	uxtb	r2, r1
 80020fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	0e19      	lsrs	r1, r3, #24
 8002100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002102:	3303      	adds	r3, #3
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	4413      	add	r3, r2
 8002108:	b2ca      	uxtb	r2, r1
 800210a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800210c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210e:	3304      	adds	r3, #4
 8002110:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	3301      	adds	r3, #1
 8002116:	61fb      	str	r3, [r7, #28]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	69fa      	ldr	r2, [r7, #28]
 800211e:	429a      	cmp	r2, r3
 8002120:	d3cf      	bcc.n	80020c2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69d9      	ldr	r1, [r3, #28]
 8002126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	4413      	add	r3, r2
 800212c:	b2ca      	uxtb	r2, r1
 800212e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	0a19      	lsrs	r1, r3, #8
 8002136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002138:	3301      	adds	r3, #1
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	4413      	add	r3, r2
 800213e:	b2ca      	uxtb	r2, r1
 8002140:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	0c19      	lsrs	r1, r3, #16
 8002148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214a:	3302      	adds	r3, #2
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	4413      	add	r3, r2
 8002150:	b2ca      	uxtb	r2, r1
 8002152:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	0e19      	lsrs	r1, r3, #24
 800215a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215c:	3303      	adds	r3, #3
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	4413      	add	r3, r2
 8002162:	b2ca      	uxtb	r2, r1
 8002164:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002168:	3304      	adds	r3, #4
 800216a:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800216c:	2300      	movs	r3, #0
 800216e:	61bb      	str	r3, [r7, #24]
 8002170:	e027      	b.n	80021c2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe f82e 	bl	80001e0 <strlen>
 8002184:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	4413      	add	r3, r2
 800218c:	6979      	ldr	r1, [r7, #20]
 800218e:	4618      	mov	r0, r3
 8002190:	f000 fc8a 	bl	8002aa8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002196:	3304      	adds	r3, #4
 8002198:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	18d0      	adds	r0, r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	4619      	mov	r1, r3
 80021b0:	f006 fb57 	bl	8008862 <memcpy>
      offset += length_stringsi;
 80021b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	4413      	add	r3, r2
 80021ba:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	3301      	adds	r3, #1
 80021c0:	61bb      	str	r3, [r7, #24]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d3d2      	bcc.n	8002172 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 80021cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80021ce:	4618      	mov	r0, r3
 80021d0:	3728      	adds	r7, #40	@ 0x28
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b08e      	sub	sp, #56	@ 0x38
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80021e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	4413      	add	r3, r2
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80021ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021f0:	3301      	adds	r3, #1
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	4413      	add	r3, r2
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	021b      	lsls	r3, r3, #8
 80021fa:	6a3a      	ldr	r2, [r7, #32]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002202:	3302      	adds	r3, #2
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	4413      	add	r3, r2
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	041b      	lsls	r3, r3, #16
 800220c:	6a3a      	ldr	r2, [r7, #32]
 800220e:	4313      	orrs	r3, r2
 8002210:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002214:	3303      	adds	r3, #3
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	4413      	add	r3, r2
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	061b      	lsls	r3, r3, #24
 800221e:	6a3a      	ldr	r2, [r7, #32]
 8002220:	4313      	orrs	r3, r2
 8002222:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002226:	3304      	adds	r3, #4
 8002228:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	6a3a      	ldr	r2, [r7, #32]
 8002230:	429a      	cmp	r2, r3
 8002232:	d90a      	bls.n	800224a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68da      	ldr	r2, [r3, #12]
 8002238:	6a3b      	ldr	r3, [r7, #32]
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4619      	mov	r1, r3
 800223e:	4610      	mov	r0, r2
 8002240:	f006 f854 	bl	80082ec <realloc>
 8002244:	4602      	mov	r2, r0
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a3a      	ldr	r2, [r7, #32]
 800224e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002250:	2300      	movs	r3, #0
 8002252:	633b      	str	r3, [r7, #48]	@ 0x30
 8002254:	e035      	b.n	80022c2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800225e:	6839      	ldr	r1, [r7, #0]
 8002260:	440a      	add	r2, r1
 8002262:	7812      	ldrb	r2, [r2, #0]
 8002264:	4313      	orrs	r3, r2
 8002266:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800226c:	3301      	adds	r3, #1
 800226e:	6839      	ldr	r1, [r7, #0]
 8002270:	440b      	add	r3, r1
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	021b      	lsls	r3, r3, #8
 8002276:	4313      	orrs	r3, r2
 8002278:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800227e:	3302      	adds	r3, #2
 8002280:	6839      	ldr	r1, [r7, #0]
 8002282:	440b      	add	r3, r1
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	041b      	lsls	r3, r3, #16
 8002288:	4313      	orrs	r3, r2
 800228a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002290:	3303      	adds	r3, #3
 8002292:	6839      	ldr	r1, [r7, #0]
 8002294:	440b      	add	r3, r1
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	061b      	lsls	r3, r3, #24
 800229a:	4313      	orrs	r3, r2
 800229c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80022a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022a6:	3304      	adds	r3, #4
 80022a8:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4413      	add	r3, r2
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	3208      	adds	r2, #8
 80022b8:	6812      	ldr	r2, [r2, #0]
 80022ba:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80022bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022be:	3301      	adds	r3, #1
 80022c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d3c4      	bcc.n	8002256 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80022cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	4413      	add	r3, r2
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80022d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022d8:	3301      	adds	r3, #1
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	4413      	add	r3, r2
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	021b      	lsls	r3, r3, #8
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80022e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022ea:	3302      	adds	r3, #2
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	4413      	add	r3, r2
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	041b      	lsls	r3, r3, #16
 80022f4:	69fa      	ldr	r2, [r7, #28]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80022fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022fc:	3303      	adds	r3, #3
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	4413      	add	r3, r2
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	061b      	lsls	r3, r3, #24
 8002306:	69fa      	ldr	r2, [r7, #28]
 8002308:	4313      	orrs	r3, r2
 800230a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 800230c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800230e:	3304      	adds	r3, #4
 8002310:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	69fa      	ldr	r2, [r7, #28]
 8002318:	429a      	cmp	r2, r3
 800231a:	d90a      	bls.n	8002332 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	699a      	ldr	r2, [r3, #24]
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4619      	mov	r1, r3
 8002326:	4610      	mov	r0, r2
 8002328:	f005 ffe0 	bl	80082ec <realloc>
 800232c:	4602      	mov	r2, r0
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69fa      	ldr	r2, [r7, #28]
 8002336:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002338:	2300      	movs	r3, #0
 800233a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800233c:	e035      	b.n	80023aa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002346:	6839      	ldr	r1, [r7, #0]
 8002348:	440a      	add	r2, r1
 800234a:	7812      	ldrb	r2, [r2, #0]
 800234c:	4313      	orrs	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002354:	3301      	adds	r3, #1
 8002356:	6839      	ldr	r1, [r7, #0]
 8002358:	440b      	add	r3, r1
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	021b      	lsls	r3, r3, #8
 800235e:	4313      	orrs	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002366:	3302      	adds	r3, #2
 8002368:	6839      	ldr	r1, [r7, #0]
 800236a:	440b      	add	r3, r1
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	041b      	lsls	r3, r3, #16
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002378:	3303      	adds	r3, #3
 800237a:	6839      	ldr	r1, [r7, #0]
 800237c:	440b      	add	r3, r1
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	061b      	lsls	r3, r3, #24
 8002382:	4313      	orrs	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800238c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800238e:	3304      	adds	r3, #4
 8002390:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699a      	ldr	r2, [r3, #24]
 8002396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	3214      	adds	r2, #20
 80023a0:	6812      	ldr	r2, [r2, #0]
 80023a2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80023a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a6:	3301      	adds	r3, #1
 80023a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d3c4      	bcc.n	800233e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80023b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	4413      	add	r3, r2
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80023be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023c0:	3301      	adds	r3, #1
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	4413      	add	r3, r2
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	021b      	lsls	r3, r3, #8
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80023d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023d2:	3302      	adds	r3, #2
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	4413      	add	r3, r2
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	041b      	lsls	r3, r3, #16
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80023e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023e4:	3303      	adds	r3, #3
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	4413      	add	r3, r2
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	061b      	lsls	r3, r3, #24
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80023f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023f6:	3304      	adds	r3, #4
 80023f8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	429a      	cmp	r2, r3
 8002402:	d90a      	bls.n	800241a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4619      	mov	r1, r3
 800240e:	4610      	mov	r0, r2
 8002410:	f005 ff6c 	bl	80082ec <realloc>
 8002414:	4602      	mov	r2, r0
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002420:	2300      	movs	r3, #0
 8002422:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002424:	e03e      	b.n	80024a4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	441a      	add	r2, r3
 800242c:	f107 030c 	add.w	r3, r7, #12
 8002430:	4611      	mov	r1, r2
 8002432:	4618      	mov	r0, r3
 8002434:	f000 fb57 	bl	8002ae6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800243a:	3304      	adds	r3, #4
 800243c:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800243e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002440:	627b      	str	r3, [r7, #36]	@ 0x24
 8002442:	e00b      	b.n	800245c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002448:	441a      	add	r2, r3
 800244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244c:	3b01      	subs	r3, #1
 800244e:	6839      	ldr	r1, [r7, #0]
 8002450:	440b      	add	r3, r1
 8002452:	7812      	ldrb	r2, [r2, #0]
 8002454:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002458:	3301      	adds	r3, #1
 800245a:	627b      	str	r3, [r7, #36]	@ 0x24
 800245c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4413      	add	r3, r2
 8002462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002464:	429a      	cmp	r2, r3
 8002466:	d3ed      	bcc.n	8002444 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002468:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	4413      	add	r3, r2
 800246e:	3b01      	subs	r3, #1
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	4413      	add	r3, r2
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800247a:	3b01      	subs	r3, #1
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	441a      	add	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002484:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	4413      	add	r3, r2
 800248a:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	3220      	adds	r2, #32
 800249a:	6812      	ldr	r2, [r2, #0]
 800249c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800249e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a0:	3301      	adds	r3, #1
 80024a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d3bb      	bcc.n	8002426 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 80024ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80024b0:	4618      	mov	r0, r3
 80024b2:	3738      	adds	r7, #56	@ 0x38
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	4b03      	ldr	r3, [pc, #12]	@ (80024d0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80024c2:	4618      	mov	r0, r3
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	08009648 	.word	0x08009648

080024d4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	4b03      	ldr	r3, [pc, #12]	@ (80024ec <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80024de:	4618      	mov	r0, r3
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	080095a4 	.word	0x080095a4

080024f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
 80024fc:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	611a      	str	r2, [r3, #16]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4618      	mov	r0, r3
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68d8      	ldr	r0, [r3, #12]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6891      	ldr	r1, [r2, #8]
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	4798      	blx	r3
 800253c:	4603      	mov	r3, r0
  };
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
  }
 8002552:	4618      	mov	r0, r3
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8002574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002578:	4618      	mov	r0, r3
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a0a      	ldr	r2, [pc, #40]	@ (80025b8 <_ZN13STM32HardwareC1Ev+0x34>)
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
    }
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4618      	mov	r0, r3
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	20000b40 	.word	0x20000b40

080025bc <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f804 	bl	80025d2 <_ZN13STM32Hardware10reset_rbufEv>
    }
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3304      	adds	r3, #4
 80025e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025e6:	4619      	mov	r1, r3
 80025e8:	f004 fd70 	bl	80070cc <HAL_UART_Receive_DMA>
    }
 80025ec:	bf00      	nop
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <_ZN13STM32Hardware4readEv>:

    int read(){
 80025f4:	b590      	push	{r4, r7, lr}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
      int c = -1;
 80025fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002600:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f8d3 4204 	ldr.w	r4, [r3, #516]	@ 0x204
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7ff ffa8 	bl	800255e <_ZN13STM32Hardware10getRdmaIndEv>
 800260e:	4603      	mov	r3, r0
 8002610:	429c      	cmp	r4, r3
 8002612:	bf14      	ite	ne
 8002614:	2301      	movne	r3, #1
 8002616:	2300      	moveq	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d012      	beq.n	8002644 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002624:	1c59      	adds	r1, r3, #1
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	f8c2 1204 	str.w	r1, [r2, #516]	@ 0x204
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	4413      	add	r3, r2
 8002630:	791b      	ldrb	r3, [r3, #4]
 8002632:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800263a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      return c;
 8002644:	68fb      	ldr	r3, [r7, #12]
    }
 8002646:	4618      	mov	r0, r3
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	bd90      	pop	{r4, r7, pc}
	...

08002650 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b20      	cmp	r3, #32
 8002664:	d108      	bne.n	8002678 <_ZN13STM32Hardware5flushEv+0x28>
 8002666:	4b28      	ldr	r3, [pc, #160]	@ (8002708 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	f083 0301 	eor.w	r3, r3, #1
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <_ZN13STM32Hardware5flushEv+0x28>
 8002674:	2301      	movs	r3, #1
 8002676:	e000      	b.n	800267a <_ZN13STM32Hardware5flushEv+0x2a>
 8002678:	2300      	movs	r3, #0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d03f      	beq.n	80026fe <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 800267e:	4b22      	ldr	r3, [pc, #136]	@ (8002708 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002680:	2201      	movs	r2, #1
 8002682:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002690:	429a      	cmp	r2, r3
 8002692:	d031      	beq.n	80026f8 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d20a      	bcs.n	80026ba <_ZN13STM32Hardware5flushEv+0x6a>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	e006      	b.n	80026c8 <_ZN13STM32Hardware5flushEv+0x78>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6818      	ldr	r0, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80026d4:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	4413      	add	r3, r2
 80026dc:	89fa      	ldrh	r2, [r7, #14]
 80026de:	4619      	mov	r1, r3
 80026e0:	f004 fc84 	bl	8006fec <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 80026ea:	89fb      	ldrh	r3, [r7, #14]
 80026ec:	4413      	add	r3, r2
 80026ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
        }
        mutex = false;
 80026f8:	4b03      	ldr	r3, [pc, #12]	@ (8002708 <_ZN13STM32Hardware5flushEv+0xb8>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	701a      	strb	r2, [r3, #0]
      }
    }
 80026fe:	bf00      	nop
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	200000fc 	.word	0x200000fc

0800270c <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
      int n = length;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002722:	bfa8      	it	ge
 8002724:	f44f 7300 	movge.w	r3, #512	@ 0x200
 8002728:	617b      	str	r3, [r7, #20]

      int n_tail = n <= (int)(tbuflen - twind) ? n : (int)(tbuflen - twind);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002730:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8002734:	461a      	mov	r2, r3
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	4293      	cmp	r3, r2
 800273a:	bfa8      	it	ge
 800273c:	4613      	movge	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002746:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	4413      	add	r3, r2
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	68b9      	ldr	r1, [r7, #8]
 8002752:	4618      	mov	r0, r3
 8002754:	f006 f885 	bl	8008862 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	4413      	add	r3, r2
 8002762:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

      if(n != n_tail){
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	429a      	cmp	r2, r3
 8002772:	d00b      	beq.n	800278c <_ZN13STM32Hardware5writeEPhi+0x80>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f503 7002 	add.w	r0, r3, #520	@ 0x208
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	18d1      	adds	r1, r2, r3
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	461a      	mov	r2, r3
 8002788:	f006 f86b 	bl	8008862 <memcpy>
      }

      flush();
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f7ff ff5f 	bl	8002650 <_ZN13STM32Hardware5flushEv>
    }
 8002792:	bf00      	nop
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 800279a:	b580      	push	{r7, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
 80027a2:	f001 faf1 	bl	8003d88 <HAL_GetTick>
 80027a6:	4603      	mov	r3, r0
 80027a8:	4618      	mov	r0, r3
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
      data(0)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff f858 	bl	8001870 <_ZN3ros3MsgC1Ev>
 80027c0:	4a05      	ldr	r2, [pc, #20]	@ (80027d8 <_ZN8std_msgs7Float32C1Ev+0x28>)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	605a      	str	r2, [r3, #4]
    {
    }
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	08009680 	.word	0x08009680

080027dc <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80027f0:	68b9      	ldr	r1, [r7, #8]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	4413      	add	r3, r2
 80027f8:	b2ca      	uxtb	r2, r1
 80027fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	0a19      	lsrs	r1, r3, #8
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	3301      	adds	r3, #1
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	4413      	add	r3, r2
 8002808:	b2ca      	uxtb	r2, r1
 800280a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	0c19      	lsrs	r1, r3, #16
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	3302      	adds	r3, #2
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	4413      	add	r3, r2
 8002818:	b2ca      	uxtb	r2, r1
 800281a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	0e19      	lsrs	r1, r3, #24
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	3303      	adds	r3, #3
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	4413      	add	r3, r2
 8002828:	b2ca      	uxtb	r2, r1
 800282a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	3304      	adds	r3, #4
 8002830:	60fb      	str	r3, [r7, #12]
      return offset;
 8002832:	68fb      	ldr	r3, [r7, #12]
    }
 8002834:	4618      	mov	r0, r3
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 800284e:	2300      	movs	r3, #0
 8002850:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	6839      	ldr	r1, [r7, #0]
 8002858:	440a      	add	r2, r1
 800285a:	7812      	ldrb	r2, [r2, #0]
 800285c:	4313      	orrs	r3, r2
 800285e:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	3301      	adds	r3, #1
 8002866:	6839      	ldr	r1, [r7, #0]
 8002868:	440b      	add	r3, r1
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	021b      	lsls	r3, r3, #8
 800286e:	4313      	orrs	r3, r2
 8002870:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	3302      	adds	r3, #2
 8002878:	6839      	ldr	r1, [r7, #0]
 800287a:	440b      	add	r3, r1
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	041b      	lsls	r3, r3, #16
 8002880:	4313      	orrs	r3, r2
 8002882:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	3303      	adds	r3, #3
 800288a:	6839      	ldr	r1, [r7, #0]
 800288c:	440b      	add	r3, r1
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	061b      	lsls	r3, r3, #24
 8002892:	4313      	orrs	r3, r2
 8002894:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3304      	adds	r3, #4
 80028a0:	60fb      	str	r3, [r7, #12]
     return offset;
 80028a2:	68fb      	ldr	r3, [r7, #12]
    }
 80028a4:	4618      	mov	r0, r3
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <_ZN8std_msgs7Float327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32"; };
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	4b03      	ldr	r3, [pc, #12]	@ (80028c8 <_ZN8std_msgs7Float327getTypeEv+0x18>)
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	080095c8 	.word	0x080095c8

080028cc <_ZN8std_msgs7Float326getMD5Ev>:
    virtual const char * getMD5() override { return "73fcbf46b49191e672908e50842a83d4"; };
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	4b03      	ldr	r3, [pc, #12]	@ (80028e4 <_ZN8std_msgs7Float326getMD5Ev+0x18>)
 80028d6:	4618      	mov	r0, r3
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	080095dc 	.word	0x080095dc

080028e8 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	4a04      	ldr	r2, [pc, #16]	@ (8002904 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4618      	mov	r0, r3
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	08009698 	.word	0x08009698

08002908 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff ffe8 	bl	80028e8 <_ZN3ros15NodeHandleBase_C1Ev>
 8002918:	4a36      	ldr	r2, [pc, #216]	@ (80029f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3304      	adds	r3, #4
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fe2e 	bl	8002584 <_ZN13STM32HardwareC1Ev>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 800294e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002952:	2100      	movs	r1, #0
 8002954:	4618      	mov	r0, r3
 8002956:	f005 ff09 	bl	800876c <memset>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8002960:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002964:	2100      	movs	r1, #0
 8002966:	4618      	mov	r0, r3
 8002968:	f005 ff00 	bl	800876c <memset>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f603 0324 	addw	r3, r3, #2084	@ 0x824
 8002972:	2264      	movs	r2, #100	@ 0x64
 8002974:	2100      	movs	r1, #0
 8002976:	4618      	mov	r0, r3
 8002978:	f005 fef8 	bl	800876c <memset>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 8002982:	2264      	movs	r2, #100	@ 0x64
 8002984:	2100      	movs	r1, #0
 8002986:	4618      	mov	r0, r3
 8002988:	f005 fef0 	bl	800876c <memset>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f603 1314 	addw	r3, r3, #2324	@ 0x914
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff fab8 	bl	8001f58 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	0800966c 	.word	0x0800966c

080029f8 <HAL_UART_TxCpltCallback>:
std_msgs::Float32 float_msg;  // Tipe pesan ROS untuk data float
ros::Publisher pub("float_data", &float_msg);  // Publisher dengan topik "float_data"


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a07      	ldr	r2, [pc, #28]	@ (8002a20 <HAL_UART_TxCpltCallback+0x28>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d106      	bne.n	8002a16 <HAL_UART_TxCpltCallback+0x1e>
	{
		nh.getHardware()->flush();
 8002a08:	4806      	ldr	r0, [pc, #24]	@ (8002a24 <HAL_UART_TxCpltCallback+0x2c>)
 8002a0a:	f000 f892 	bl	8002b32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff fe1d 	bl	8002650 <_ZN13STM32Hardware5flushEv>
	}
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000b40 	.word	0x20000b40
 8002a24:	2000010c 	.word	0x2000010c

08002a28 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a07      	ldr	r2, [pc, #28]	@ (8002a50 <HAL_UART_RxCpltCallback+0x28>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d106      	bne.n	8002a46 <HAL_UART_RxCpltCallback+0x1e>
	{
		nh.getHardware()->reset_rbuf();
 8002a38:	4806      	ldr	r0, [pc, #24]	@ (8002a54 <HAL_UART_RxCpltCallback+0x2c>)
 8002a3a:	f000 f87a 	bl	8002b32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff fdc6 	bl	80025d2 <_ZN13STM32Hardware10reset_rbufEv>
	}
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20000b40 	.word	0x20000b40
 8002a54:	2000010c 	.word	0x2000010c

08002a58 <setup>:

void setup(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
	nh.initNode();  // Inisialisasi node ROS
 8002a5c:	4804      	ldr	r0, [pc, #16]	@ (8002a70 <setup+0x18>)
 8002a5e:	f000 f874 	bl	8002b4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(pub);  // Advertise topik
 8002a62:	4904      	ldr	r1, [pc, #16]	@ (8002a74 <setup+0x1c>)
 8002a64:	4802      	ldr	r0, [pc, #8]	@ (8002a70 <setup+0x18>)
 8002a66:	f000 f88d 	bl	8002b84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	2000010c 	.word	0x2000010c
 8002a74:	20000a50 	.word	0x20000a50

08002a78 <loop>:

void loop(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0

	float_msg.data = bno.x;  // Mengisi pesan dengan nilai float
 8002a7c:	4b06      	ldr	r3, [pc, #24]	@ (8002a98 <loop+0x20>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a06      	ldr	r2, [pc, #24]	@ (8002a9c <loop+0x24>)
 8002a82:	6053      	str	r3, [r2, #4]
  pub.publish(&float_msg);  // Mengirim pesan ke ROS
 8002a84:	4905      	ldr	r1, [pc, #20]	@ (8002a9c <loop+0x24>)
 8002a86:	4806      	ldr	r0, [pc, #24]	@ (8002aa0 <loop+0x28>)
 8002a88:	f7ff fd49 	bl	800251e <_ZN3ros9Publisher7publishEPKNS_3MsgE>

  nh.spinOnce();  // Memproses komunikasi ROS;
 8002a8c:	4805      	ldr	r0, [pc, #20]	@ (8002aa4 <loop+0x2c>)
 8002a8e:	f000 f8a9 	bl	8002be4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000100 	.word	0x20000100
 8002a9c:	20000a48 	.word	0x20000a48
 8002aa0:	20000a50 	.word	0x20000a50
 8002aa4:	2000010c 	.word	0x2000010c

08002aa8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	e00c      	b.n	8002ad2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	fa22 f103 	lsr.w	r1, r2, r3
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	b2ca      	uxtb	r2, r1
 8002aca:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d9ef      	bls.n	8002ab8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8002ad8:	bf00      	nop
 8002ada:	bf00      	nop
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002ae6:	b480      	push	{r7}
 8002ae8:	b085      	sub	sp, #20
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
 8002aee:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	e010      	b.n	8002b1e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6839      	ldr	r1, [r7, #0]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	440a      	add	r2, r1
 8002b06:	7812      	ldrb	r2, [r2, #0]
 8002b08:	4611      	mov	r1, r2
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	00d2      	lsls	r2, r2, #3
 8002b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	d9eb      	bls.n	8002afc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8002b24:	bf00      	nop
 8002b26:	bf00      	nop
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3304      	adds	r3, #4
  }
 8002b3e:	4618      	mov	r0, r3
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3304      	adds	r3, #4
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff fd30 	bl	80025bc <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
    bytes_ = 0;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
    index_ = 0;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
    topic_ = 0;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
  };
 8002b7c:	bf00      	nop
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	e01d      	b.n	8002bd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d111      	bne.n	8002bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	60da      	str	r2, [r3, #12]
        return true;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e006      	b.n	8002bd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2b18      	cmp	r3, #24
 8002bd4:	ddde      	ble.n	8002b94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8002bd6:	2300      	movs	r3, #0
  }
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3304      	adds	r3, #4
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff fdd2 	bl	800279a <_ZN13STM32Hardware4timeEv>
 8002bf6:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f8d3 3908 	ldr.w	r3, [r3, #2312]	@ 0x908
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d903      	bls.n	8002c12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
    if (mode_ != MODE_FIRST_FF)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d009      	beq.n	8002c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d903      	bls.n	8002c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
      if (spin_timeout_ > 0)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d014      	beq.n	8002c64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff fdab 	bl	800279a <_ZN13STM32Hardware4timeEv>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1ad2      	subs	r2, r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8002c50:	429a      	cmp	r2, r3
 8002c52:	bf8c      	ite	hi
 8002c54:	2301      	movhi	r3, #1
 8002c56:	2300      	movls	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d002      	beq.n	8002c64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8002c5e:	f06f 0301 	mvn.w	r3, #1
 8002c62:	e194      	b.n	8002f8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3304      	adds	r3, #4
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff fcc3 	bl	80025f4 <_ZN13STM32Hardware4readEv>
 8002c6e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f2c0 8174 	blt.w	8002f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	@ 0x8fc
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	441a      	add	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8002c8e:	2b07      	cmp	r3, #7
 8002c90:	d11e      	bne.n	8002cd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 8002c98:	1c59      	adds	r1, r3, #1
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	f8c2 18f8 	str.w	r1, [r2, #2296]	@ 0x8f8
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	b2d1      	uxtb	r1, r2
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	460a      	mov	r2, r1
 8002caa:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
        bytes_--;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8002cb4:	1e5a      	subs	r2, r3, #1
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1b4      	bne.n	8002c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2208      	movs	r2, #8
 8002cca:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8002cce:	e7af      	b.n	8002c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d128      	bne.n	8002d2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2bff      	cmp	r3, #255	@ 0xff
 8002cde:	d10d      	bne.n	8002cfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f103 0214 	add.w	r2, r3, #20
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 8002cfa:	e799      	b.n	8002c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3304      	adds	r3, #4
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff fd4a 	bl	800279a <_ZN13STM32Hardware4timeEv>
 8002d06:	4602      	mov	r2, r0
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d10:	4293      	cmp	r3, r2
 8002d12:	bf8c      	ite	hi
 8002d14:	2301      	movhi	r3, #1
 8002d16:	2300      	movls	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d088      	beq.n	8002c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
          return SPIN_TIMEOUT;
 8002d26:	f06f 0301 	mvn.w	r3, #1
 8002d2a:	e130      	b.n	8002f8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d118      	bne.n	8002d68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2bfe      	cmp	r3, #254	@ 0xfe
 8002d3a:	d107      	bne.n	8002d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8002d4a:	e771      	b.n	8002c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          if (configured_ == false)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f47f af68 	bne.w	8002c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f918 	bl	8002f96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8002d66:	e763      	b.n	8002c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d113      	bne.n	8002d9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        index_ = 0;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
        mode_++;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 8002d98:	e74a      	b.n	8002c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8002da0:	2b03      	cmp	r3, #3
 8002da2:	d110      	bne.n	8002dc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	@ 0x8f0
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	021b      	lsls	r3, r3, #8
 8002dae:	441a      	add	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        mode_++;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8002dc4:	e734      	b.n	8002c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d116      	bne.n	8002dfe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 8002dd6:	425a      	negs	r2, r3
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	bf58      	it	pl
 8002dde:	4253      	negpl	r3, r2
 8002de0:	2bff      	cmp	r3, #255	@ 0xff
 8002de2:	d107      	bne.n	8002df4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8002dea:	1c5a      	adds	r2, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8002df2:	e71d      	b.n	8002c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8002dfc:	e718      	b.n	8002c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8002e04:	2b05      	cmp	r3, #5
 8002e06:	d10f      	bne.n	8002e28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_++;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 8002e26:	e703      	b.n	8002c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8002e2e:	2b06      	cmp	r3, #6
 8002e30:	d117      	bne.n	8002e62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	@ 0x8f4
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	021b      	lsls	r3, r3, #8
 8002e3c:	441a      	add	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_ = MODE_MESSAGE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2207      	movs	r2, #7
 8002e48:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if (bytes_ == 0)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f47f aeec 	bne.w	8002c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2208      	movs	r2, #8
 8002e5c:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8002e60:	e6e6      	b.n	8002c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	f47f aee1 	bne.w	8002c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if ((checksum_ % 256) == 255)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 8002e7c:	425a      	negs	r2, r3
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	bf58      	it	pl
 8002e84:	4253      	negpl	r3, r2
 8002e86:	2bff      	cmp	r3, #255	@ 0xff
 8002e88:	f47f aed2 	bne.w	8002c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d110      	bne.n	8002eb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f87d 	bl	8002f96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f898 	bl	8002fd2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
            last_sync_receive_time = c_time;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
            return SPIN_ERR;
 8002eb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002eb6:	e06a      	b.n	8002f8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8002ebe:	2b0a      	cmp	r3, #10
 8002ec0:	d107      	bne.n	8002ed2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8002ec8:	4619      	mov	r1, r3
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f960 	bl	8003190 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8002ed0:	e6ae      	b.n	8002c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8002ed8:	2b06      	cmp	r3, #6
 8002eda:	d10e      	bne.n	8002efa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f603 1214 	addw	r2, r3, #2324	@ 0x914
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4610      	mov	r0, r2
 8002eec:	f7ff f973 	bl	80021d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 8002ef8:	e69a      	b.n	8002c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8002f00:	2b0b      	cmp	r3, #11
 8002f02:	d104      	bne.n	8002f0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 8002f0c:	e690      	b.n	8002c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8002f14:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8002f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f43f ae84 	beq.w	8002c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8002f2e:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8002f38:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8002f42:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8002f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	f202 4224 	addw	r2, r2, #1060	@ 0x424
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	4798      	blx	r3
    while (true)
 8002f5e:	e667      	b.n	8002c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8002f60:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00f      	beq.n	8002f8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d906      	bls.n	8002f8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f809 	bl	8002f96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
    return SPIN_OK;
 8002f8c:	2300      	movs	r3, #0
  }
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b086      	sub	sp, #24
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8002f9e:	f107 030c 	add.w	r3, r7, #12
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fe fc74 	bl	8001890 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f107 020c 	add.w	r2, r7, #12
 8002fb2:	210a      	movs	r1, #10
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	4798      	blx	r3
    rt_time = hardware_.time();
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3304      	adds	r3, #4
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff fbec 	bl	800279a <_ZN13STM32Hardware4timeEv>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
  }
 8002fca:	bf00      	nop
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8002fd2:	b590      	push	{r4, r7, lr}
 8002fd4:	b08b      	sub	sp, #44	@ 0x2c
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8002fda:	f107 030c 	add.w	r3, r7, #12
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fe fd46 	bl	8001a70 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fe8:	e062      	b.n	80030b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fee:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d056      	beq.n	80030aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003000:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	b29b      	uxth	r3, r3
 800300e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003014:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003026:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	6859      	ldr	r1, [r3, #4]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003036:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	3308      	adds	r3, #8
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4608      	mov	r0, r1
 800304a:	4798      	blx	r3
 800304c:	4603      	mov	r3, r0
 800304e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003054:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	6859      	ldr	r1, [r3, #4]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003064:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	330c      	adds	r3, #12
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4608      	mov	r0, r1
 8003078:	4798      	blx	r3
 800307a:	4603      	mov	r3, r0
 800307c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800307e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003082:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681c      	ldr	r4, [r3, #0]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff fa54 	bl	8002546 <_ZN3ros9Publisher15getEndpointTypeEv>
 800309e:	4601      	mov	r1, r0
 80030a0:	f107 030c 	add.w	r3, r7, #12
 80030a4:	461a      	mov	r2, r3
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80030aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ac:	3301      	adds	r3, #1
 80030ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80030b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b2:	2b18      	cmp	r3, #24
 80030b4:	dd99      	ble.n	8002fea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80030b6:	2300      	movs	r3, #0
 80030b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80030ba:	e05e      	b.n	800317a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030c0:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80030c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d053      	beq.n	8003174 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030d0:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80030d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	b29b      	uxth	r3, r3
 80030dc:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030e2:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80030e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030f2:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80030f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030fe:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	3308      	adds	r3, #8
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4608      	mov	r0, r1
 800310e:	4798      	blx	r3
 8003110:	4603      	mov	r3, r0
 8003112:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003118:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800311c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003124:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8003128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	330c      	adds	r3, #12
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4608      	mov	r0, r1
 8003134:	4798      	blx	r3
 8003136:	4603      	mov	r3, r0
 8003138:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800313a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800313e:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681c      	ldr	r4, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800314a:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800314e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003156:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800315a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	3304      	adds	r3, #4
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4608      	mov	r0, r1
 8003166:	4798      	blx	r3
 8003168:	4601      	mov	r1, r0
 800316a:	f107 030c 	add.w	r3, r7, #12
 800316e:	461a      	mov	r2, r3
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003176:	3301      	adds	r3, #1
 8003178:	627b      	str	r3, [r7, #36]	@ 0x24
 800317a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317c:	2b18      	cmp	r3, #24
 800317e:	dd9d      	ble.n	80030bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
  }
 8003188:	bf00      	nop
 800318a:	372c      	adds	r7, #44	@ 0x2c
 800318c:	46bd      	mov	sp, r7
 800318e:	bd90      	pop	{r4, r7, pc}

08003190 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800319a:	f107 0308 	add.w	r3, r7, #8
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fe fb76 	bl	8001890 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3304      	adds	r3, #4
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff faf6 	bl	800279a <_ZN13STM32Hardware4timeEv>
 80031ae:	4602      	mov	r2, r0
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80031ba:	f107 0308 	add.w	r3, r7, #8
 80031be:	6839      	ldr	r1, [r7, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7fe fbd5 	bl	8001970 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	4915      	ldr	r1, [pc, #84]	@ (8003220 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80031cc:	fba1 1303 	umull	r1, r3, r1, r3
 80031d0:	099b      	lsrs	r3, r3, #6
 80031d2:	4413      	add	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80031d6:	6939      	ldr	r1, [r7, #16]
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	4b11      	ldr	r3, [pc, #68]	@ (8003220 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80031dc:	fba3 0302 	umull	r0, r3, r3, r2
 80031e0:	099b      	lsrs	r3, r3, #6
 80031e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80031e6:	fb00 f303 	mul.w	r3, r0, r3
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003224 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80031ee:	fb02 f303 	mul.w	r3, r2, r3
 80031f2:	440b      	add	r3, r1
 80031f4:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80031f6:	f107 0308 	add.w	r3, r7, #8
 80031fa:	3304      	adds	r3, #4
 80031fc:	4619      	mov	r1, r3
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f8a6 	bl	8003350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3304      	adds	r3, #4
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff fac6 	bl	800279a <_ZN13STM32Hardware4timeEv>
 800320e:	4602      	mov	r2, r0
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
  }
 8003216:	bf00      	nop
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	10624dd3 	.word	0x10624dd3
 8003224:	000f4240 	.word	0x000f4240

08003228 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8003228:	b580      	push	{r7, lr}
 800322a:	b088      	sub	sp, #32
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	2b63      	cmp	r3, #99	@ 0x63
 8003238:	dd09      	ble.n	800324e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8003240:	f083 0301 	eor.w	r3, r3, #1
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800324a:	2300      	movs	r3, #0
 800324c:	e079      	b.n	8003342 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	f202 6224 	addw	r2, r2, #1572	@ 0x624
 800325a:	3207      	adds	r2, #7
 800325c:	4611      	mov	r1, r2
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	4798      	blx	r3
 8003262:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	22ff      	movs	r2, #255	@ 0xff
 8003268:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624
    message_out[1] = PROTOCOL_VER;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	22fe      	movs	r2, #254	@ 0xfe
 8003270:	f883 2625 	strb.w	r2, [r3, #1573]	@ 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	b2da      	uxtb	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f883 2626 	strb.w	r2, [r3, #1574]	@ 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	b29b      	uxth	r3, r3
 8003282:	0a1b      	lsrs	r3, r3, #8
 8003284:	b29b      	uxth	r3, r3
 8003286:	b2da      	uxtb	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f883 2627 	strb.w	r2, [r3, #1575]	@ 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f893 2626 	ldrb.w	r2, [r3, #1574]	@ 0x626
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f893 3627 	ldrb.w	r3, [r3, #1575]	@ 0x627
 800329a:	4413      	add	r3, r2
 800329c:	b2db      	uxtb	r3, r3
 800329e:	43db      	mvns	r3, r3
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f883 2628 	strb.w	r2, [r3, #1576]	@ 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f883 2629 	strb.w	r2, [r3, #1577]	@ 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	b21b      	sxth	r3, r3
 80032b6:	121b      	asrs	r3, r3, #8
 80032b8:	b21b      	sxth	r3, r3
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f883 262a 	strb.w	r2, [r3, #1578]	@ 0x62a

    /* calculate checksum */
    int chk = 0;
 80032c2:	2300      	movs	r3, #0
 80032c4:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80032c6:	2305      	movs	r3, #5
 80032c8:	61bb      	str	r3, [r7, #24]
 80032ca:	e00c      	b.n	80032e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	4413      	add	r3, r2
 80032d2:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	461a      	mov	r2, r3
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	4413      	add	r3, r2
 80032de:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	3301      	adds	r3, #1
 80032e4:	61bb      	str	r3, [r7, #24]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	3306      	adds	r3, #6
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	dded      	ble.n	80032cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	3307      	adds	r3, #7
 80032f4:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	425a      	negs	r2, r3
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	b2d2      	uxtb	r2, r2
 80032fe:	bf58      	it	pl
 8003300:	4253      	negpl	r3, r2
 8003302:	b2da      	uxtb	r2, r3
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	1c59      	adds	r1, r3, #1
 8003308:	6179      	str	r1, [r7, #20]
 800330a:	43d2      	mvns	r2, r2
 800330c:	b2d1      	uxtb	r1, r2
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4413      	add	r3, r2
 8003312:	460a      	mov	r2, r1
 8003314:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624

    if (l <= OUTPUT_SIZE)
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800331e:	dc0a      	bgt.n	8003336 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	1d18      	adds	r0, r3, #4
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	4619      	mov	r1, r3
 800332e:	f7ff f9ed 	bl	800270c <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	e005      	b.n	8003342 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003336:	4905      	ldr	r1, [pc, #20]	@ (800334c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 f849 	bl	80033d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800333e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
  }
 8003342:	4618      	mov	r0, r3
 8003344:	3720      	adds	r7, #32
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	08009600 	.word	0x08009600

08003350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3304      	adds	r3, #4
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff fa1b 	bl	800279a <_ZN13STM32Hardware4timeEv>
 8003364:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	4915      	ldr	r1, [pc, #84]	@ (80033c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 800336e:	fba1 1303 	umull	r1, r3, r1, r3
 8003372:	099b      	lsrs	r3, r3, #6
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	1e5a      	subs	r2, r3, #1
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	6859      	ldr	r1, [r3, #4]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	4b0f      	ldr	r3, [pc, #60]	@ (80033c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8003386:	fba3 0302 	umull	r0, r3, r3, r2
 800338a:	099b      	lsrs	r3, r3, #6
 800338c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003390:	fb00 f303 	mul.w	r3, r0, r3
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	4a0c      	ldr	r2, [pc, #48]	@ (80033c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8003398:	fb02 f303 	mul.w	r3, r2, r3
 800339c:	1aca      	subs	r2, r1, r3
 800339e:	4b0b      	ldr	r3, [pc, #44]	@ (80033cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 80033a0:	4413      	add	r3, r2
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	f8c2 341c 	str.w	r3, [r2, #1052]	@ 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f503 6283 	add.w	r2, r3, #1048	@ 0x418
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 80033b4:	4619      	mov	r1, r3
 80033b6:	4610      	mov	r0, r2
 80033b8:	f7fd fd00 	bl	8000dbc <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80033bc:	bf00      	nop
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	10624dd3 	.word	0x10624dd3
 80033c8:	000f4240 	.word	0x000f4240
 80033cc:	3b9aca00 	.word	0x3b9aca00

080033d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	2103      	movs	r1, #3
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f804 	bl	80033ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80033e4:	bf00      	nop
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	460b      	mov	r3, r1
 80033f6:	607a      	str	r2, [r7, #4]
 80033f8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80033fa:	f107 0314 	add.w	r3, r7, #20
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fe fcfa 	bl	8001df8 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003404:	7afb      	ldrb	r3, [r7, #11]
 8003406:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f107 0214 	add.w	r2, r7, #20
 8003416:	2107      	movs	r1, #7
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	4798      	blx	r3
  }
 800341c:	bf00      	nop
 800341e:	3720      	adds	r7, #32
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <_Z41__static_initialization_and_destruction_0ii>:
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d110      	bne.n	8003456 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800343a:	4293      	cmp	r3, r2
 800343c:	d10b      	bne.n	8003456 <_Z41__static_initialization_and_destruction_0ii+0x32>
ros::NodeHandle nh;
 800343e:	4808      	ldr	r0, [pc, #32]	@ (8003460 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003440:	f7ff fa62 	bl	8002908 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Float32 float_msg;  // Tipe pesan ROS untuk data float
 8003444:	4807      	ldr	r0, [pc, #28]	@ (8003464 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003446:	f7ff f9b3 	bl	80027b0 <_ZN8std_msgs7Float32C1Ev>
ros::Publisher pub("float_data", &float_msg);  // Publisher dengan topik "float_data"
 800344a:	2300      	movs	r3, #0
 800344c:	4a05      	ldr	r2, [pc, #20]	@ (8003464 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800344e:	4906      	ldr	r1, [pc, #24]	@ (8003468 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8003450:	4806      	ldr	r0, [pc, #24]	@ (800346c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003452:	f7ff f84d 	bl	80024f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	2000010c 	.word	0x2000010c
 8003464:	20000a48 	.word	0x20000a48
 8003468:	0800963c 	.word	0x0800963c
 800346c:	20000a50 	.word	0x20000a50

08003470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
    return configured_;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
  };
 800347e:	4618      	mov	r0, r3
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <_GLOBAL__sub_I_bno>:
 800348a:	b580      	push	{r7, lr}
 800348c:	af00      	add	r7, sp, #0
 800348e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003492:	2001      	movs	r0, #1
 8003494:	f7ff ffc6 	bl	8003424 <_Z41__static_initialization_and_destruction_0ii>
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	607b      	str	r3, [r7, #4]
 80034a6:	4b10      	ldr	r3, [pc, #64]	@ (80034e8 <HAL_MspInit+0x4c>)
 80034a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034aa:	4a0f      	ldr	r2, [pc, #60]	@ (80034e8 <HAL_MspInit+0x4c>)
 80034ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80034b2:	4b0d      	ldr	r3, [pc, #52]	@ (80034e8 <HAL_MspInit+0x4c>)
 80034b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034ba:	607b      	str	r3, [r7, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	603b      	str	r3, [r7, #0]
 80034c2:	4b09      	ldr	r3, [pc, #36]	@ (80034e8 <HAL_MspInit+0x4c>)
 80034c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c6:	4a08      	ldr	r2, [pc, #32]	@ (80034e8 <HAL_MspInit+0x4c>)
 80034c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80034ce:	4b06      	ldr	r3, [pc, #24]	@ (80034e8 <HAL_MspInit+0x4c>)
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034d6:	603b      	str	r3, [r7, #0]
 80034d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	40023800 	.word	0x40023800

080034ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80034f0:	bf00      	nop
 80034f2:	e7fd      	b.n	80034f0 <NMI_Handler+0x4>

080034f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034f8:	bf00      	nop
 80034fa:	e7fd      	b.n	80034f8 <HardFault_Handler+0x4>

080034fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003500:	bf00      	nop
 8003502:	e7fd      	b.n	8003500 <MemManage_Handler+0x4>

08003504 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003508:	bf00      	nop
 800350a:	e7fd      	b.n	8003508 <BusFault_Handler+0x4>

0800350c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003510:	bf00      	nop
 8003512:	e7fd      	b.n	8003510 <UsageFault_Handler+0x4>

08003514 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003518:	bf00      	nop
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003522:	b480      	push	{r7}
 8003524:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003526:	bf00      	nop
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003534:	bf00      	nop
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003542:	f000 fc0d 	bl	8003d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003546:	bf00      	nop
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003550:	4802      	ldr	r0, [pc, #8]	@ (800355c <DMA1_Stream5_IRQHandler+0x10>)
 8003552:	f000 fef3 	bl	800433c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003556:	bf00      	nop
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	20000b88 	.word	0x20000b88

08003560 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003564:	4802      	ldr	r0, [pc, #8]	@ (8003570 <DMA1_Stream6_IRQHandler+0x10>)
 8003566:	f000 fee9 	bl	800433c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800356a:	bf00      	nop
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	20000be8 	.word	0x20000be8

08003574 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003578:	4802      	ldr	r0, [pc, #8]	@ (8003584 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800357a:	f003 f939 	bl	80067f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800357e:	bf00      	nop
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	20000a68 	.word	0x20000a68

08003588 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800358c:	4802      	ldr	r0, [pc, #8]	@ (8003598 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800358e:	f003 f92f 	bl	80067f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003592:	bf00      	nop
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	20000a68 	.word	0x20000a68

0800359c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80035a0:	4802      	ldr	r0, [pc, #8]	@ (80035ac <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80035a2:	f003 f925 	bl	80067f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20000a68 	.word	0x20000a68

080035b0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80035b4:	4802      	ldr	r0, [pc, #8]	@ (80035c0 <TIM1_CC_IRQHandler+0x10>)
 80035b6:	f003 f91b 	bl	80067f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	20000a68 	.word	0x20000a68

080035c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80035c8:	4802      	ldr	r0, [pc, #8]	@ (80035d4 <USART2_IRQHandler+0x10>)
 80035ca:	f003 fda5 	bl	8007118 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000b40 	.word	0x20000b40

080035d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]
 80035e8:	e00a      	b.n	8003600 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80035ea:	f3af 8000 	nop.w
 80035ee:	4601      	mov	r1, r0
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	1c5a      	adds	r2, r3, #1
 80035f4:	60ba      	str	r2, [r7, #8]
 80035f6:	b2ca      	uxtb	r2, r1
 80035f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	3301      	adds	r3, #1
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	429a      	cmp	r2, r3
 8003606:	dbf0      	blt.n	80035ea <_read+0x12>
  }

  return len;
 8003608:	687b      	ldr	r3, [r7, #4]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b086      	sub	sp, #24
 8003616:	af00      	add	r7, sp, #0
 8003618:	60f8      	str	r0, [r7, #12]
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800361e:	2300      	movs	r3, #0
 8003620:	617b      	str	r3, [r7, #20]
 8003622:	e009      	b.n	8003638 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	60ba      	str	r2, [r7, #8]
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	3301      	adds	r3, #1
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	429a      	cmp	r2, r3
 800363e:	dbf1      	blt.n	8003624 <_write+0x12>
  }
  return len;
 8003640:	687b      	ldr	r3, [r7, #4]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <_close>:

int _close(int file)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003652:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003656:	4618      	mov	r0, r3
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
 800366a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003672:	605a      	str	r2, [r3, #4]
  return 0;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <_isatty>:

int _isatty(int file)
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800368a:	2301      	movs	r3, #1
}
 800368c:	4618      	mov	r0, r3
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
	...

080036b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036bc:	4a14      	ldr	r2, [pc, #80]	@ (8003710 <_sbrk+0x5c>)
 80036be:	4b15      	ldr	r3, [pc, #84]	@ (8003714 <_sbrk+0x60>)
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036c8:	4b13      	ldr	r3, [pc, #76]	@ (8003718 <_sbrk+0x64>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d102      	bne.n	80036d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036d0:	4b11      	ldr	r3, [pc, #68]	@ (8003718 <_sbrk+0x64>)
 80036d2:	4a12      	ldr	r2, [pc, #72]	@ (800371c <_sbrk+0x68>)
 80036d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036d6:	4b10      	ldr	r3, [pc, #64]	@ (8003718 <_sbrk+0x64>)
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4413      	add	r3, r2
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d207      	bcs.n	80036f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036e4:	f005 f890 	bl	8008808 <__errno>
 80036e8:	4603      	mov	r3, r0
 80036ea:	220c      	movs	r2, #12
 80036ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80036f2:	e009      	b.n	8003708 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036f4:	4b08      	ldr	r3, [pc, #32]	@ (8003718 <_sbrk+0x64>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036fa:	4b07      	ldr	r3, [pc, #28]	@ (8003718 <_sbrk+0x64>)
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4413      	add	r3, r2
 8003702:	4a05      	ldr	r2, [pc, #20]	@ (8003718 <_sbrk+0x64>)
 8003704:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003706:	68fb      	ldr	r3, [r7, #12]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	20020000 	.word	0x20020000
 8003714:	00000400 	.word	0x00000400
 8003718:	20000a64 	.word	0x20000a64
 800371c:	20000d98 	.word	0x20000d98

08003720 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003724:	4b06      	ldr	r3, [pc, #24]	@ (8003740 <SystemInit+0x20>)
 8003726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800372a:	4a05      	ldr	r2, [pc, #20]	@ (8003740 <SystemInit+0x20>)
 800372c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003730:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003734:	bf00      	nop
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	e000ed00 	.word	0xe000ed00

08003744 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800374a:	f107 0308 	add.w	r3, r7, #8
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	605a      	str	r2, [r3, #4]
 8003754:	609a      	str	r2, [r3, #8]
 8003756:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003758:	463b      	mov	r3, r7
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003760:	4b1e      	ldr	r3, [pc, #120]	@ (80037dc <MX_TIM1_Init+0x98>)
 8003762:	4a1f      	ldr	r2, [pc, #124]	@ (80037e0 <MX_TIM1_Init+0x9c>)
 8003764:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8003766:	4b1d      	ldr	r3, [pc, #116]	@ (80037dc <MX_TIM1_Init+0x98>)
 8003768:	2263      	movs	r2, #99	@ 0x63
 800376a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800376c:	4b1b      	ldr	r3, [pc, #108]	@ (80037dc <MX_TIM1_Init+0x98>)
 800376e:	2200      	movs	r2, #0
 8003770:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8003772:	4b1a      	ldr	r3, [pc, #104]	@ (80037dc <MX_TIM1_Init+0x98>)
 8003774:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003778:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800377a:	4b18      	ldr	r3, [pc, #96]	@ (80037dc <MX_TIM1_Init+0x98>)
 800377c:	2200      	movs	r2, #0
 800377e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003780:	4b16      	ldr	r3, [pc, #88]	@ (80037dc <MX_TIM1_Init+0x98>)
 8003782:	2200      	movs	r2, #0
 8003784:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003786:	4b15      	ldr	r3, [pc, #84]	@ (80037dc <MX_TIM1_Init+0x98>)
 8003788:	2200      	movs	r2, #0
 800378a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800378c:	4813      	ldr	r0, [pc, #76]	@ (80037dc <MX_TIM1_Init+0x98>)
 800378e:	f002 fe49 	bl	8006424 <HAL_TIM_Base_Init>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003798:	f7fe f852 	bl	8001840 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800379c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80037a2:	f107 0308 	add.w	r3, r7, #8
 80037a6:	4619      	mov	r1, r3
 80037a8:	480c      	ldr	r0, [pc, #48]	@ (80037dc <MX_TIM1_Init+0x98>)
 80037aa:	f003 f911 	bl	80069d0 <HAL_TIM_ConfigClockSource>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80037b4:	f7fe f844 	bl	8001840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037b8:	2300      	movs	r3, #0
 80037ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037bc:	2300      	movs	r3, #0
 80037be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80037c0:	463b      	mov	r3, r7
 80037c2:	4619      	mov	r1, r3
 80037c4:	4805      	ldr	r0, [pc, #20]	@ (80037dc <MX_TIM1_Init+0x98>)
 80037c6:	f003 fb3f 	bl	8006e48 <HAL_TIMEx_MasterConfigSynchronization>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80037d0:	f7fe f836 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80037d4:	bf00      	nop
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	20000a68 	.word	0x20000a68
 80037e0:	40010000 	.word	0x40010000

080037e4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b08c      	sub	sp, #48	@ 0x30
 80037e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80037ea:	f107 030c 	add.w	r3, r7, #12
 80037ee:	2224      	movs	r2, #36	@ 0x24
 80037f0:	2100      	movs	r1, #0
 80037f2:	4618      	mov	r0, r3
 80037f4:	f004 ffba 	bl	800876c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037f8:	1d3b      	adds	r3, r7, #4
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003800:	4b21      	ldr	r3, [pc, #132]	@ (8003888 <MX_TIM2_Init+0xa4>)
 8003802:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003806:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003808:	4b1f      	ldr	r3, [pc, #124]	@ (8003888 <MX_TIM2_Init+0xa4>)
 800380a:	2200      	movs	r2, #0
 800380c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800380e:	4b1e      	ldr	r3, [pc, #120]	@ (8003888 <MX_TIM2_Init+0xa4>)
 8003810:	2200      	movs	r2, #0
 8003812:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003814:	4b1c      	ldr	r3, [pc, #112]	@ (8003888 <MX_TIM2_Init+0xa4>)
 8003816:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800381a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800381c:	4b1a      	ldr	r3, [pc, #104]	@ (8003888 <MX_TIM2_Init+0xa4>)
 800381e:	2200      	movs	r2, #0
 8003820:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003822:	4b19      	ldr	r3, [pc, #100]	@ (8003888 <MX_TIM2_Init+0xa4>)
 8003824:	2200      	movs	r2, #0
 8003826:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003828:	2301      	movs	r3, #1
 800382a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800382c:	2300      	movs	r3, #0
 800382e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003830:	2301      	movs	r3, #1
 8003832:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003834:	2300      	movs	r3, #0
 8003836:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003838:	2300      	movs	r3, #0
 800383a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800383c:	2300      	movs	r3, #0
 800383e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003840:	2301      	movs	r3, #1
 8003842:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003844:	2300      	movs	r3, #0
 8003846:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003848:	2300      	movs	r3, #0
 800384a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800384c:	f107 030c 	add.w	r3, r7, #12
 8003850:	4619      	mov	r1, r3
 8003852:	480d      	ldr	r0, [pc, #52]	@ (8003888 <MX_TIM2_Init+0xa4>)
 8003854:	f002 fe98 	bl	8006588 <HAL_TIM_Encoder_Init>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800385e:	f7fd ffef 	bl	8001840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003862:	2300      	movs	r3, #0
 8003864:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003866:	2300      	movs	r3, #0
 8003868:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800386a:	1d3b      	adds	r3, r7, #4
 800386c:	4619      	mov	r1, r3
 800386e:	4806      	ldr	r0, [pc, #24]	@ (8003888 <MX_TIM2_Init+0xa4>)
 8003870:	f003 faea 	bl	8006e48 <HAL_TIMEx_MasterConfigSynchronization>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800387a:	f7fd ffe1 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800387e:	bf00      	nop
 8003880:	3730      	adds	r7, #48	@ 0x30
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	20000ab0 	.word	0x20000ab0

0800388c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b08c      	sub	sp, #48	@ 0x30
 8003890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003892:	f107 030c 	add.w	r3, r7, #12
 8003896:	2224      	movs	r2, #36	@ 0x24
 8003898:	2100      	movs	r1, #0
 800389a:	4618      	mov	r0, r3
 800389c:	f004 ff66 	bl	800876c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038a0:	1d3b      	adds	r3, r7, #4
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80038a8:	4b20      	ldr	r3, [pc, #128]	@ (800392c <MX_TIM3_Init+0xa0>)
 80038aa:	4a21      	ldr	r2, [pc, #132]	@ (8003930 <MX_TIM3_Init+0xa4>)
 80038ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80038ae:	4b1f      	ldr	r3, [pc, #124]	@ (800392c <MX_TIM3_Init+0xa0>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038b4:	4b1d      	ldr	r3, [pc, #116]	@ (800392c <MX_TIM3_Init+0xa0>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80038ba:	4b1c      	ldr	r3, [pc, #112]	@ (800392c <MX_TIM3_Init+0xa0>)
 80038bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80038c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038c2:	4b1a      	ldr	r3, [pc, #104]	@ (800392c <MX_TIM3_Init+0xa0>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038c8:	4b18      	ldr	r3, [pc, #96]	@ (800392c <MX_TIM3_Init+0xa0>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80038ce:	2301      	movs	r3, #1
 80038d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80038d2:	2300      	movs	r3, #0
 80038d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80038d6:	2301      	movs	r3, #1
 80038d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80038da:	2300      	movs	r3, #0
 80038dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80038de:	2300      	movs	r3, #0
 80038e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80038e2:	2300      	movs	r3, #0
 80038e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80038e6:	2301      	movs	r3, #1
 80038e8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80038ea:	2300      	movs	r3, #0
 80038ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80038ee:	2300      	movs	r3, #0
 80038f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80038f2:	f107 030c 	add.w	r3, r7, #12
 80038f6:	4619      	mov	r1, r3
 80038f8:	480c      	ldr	r0, [pc, #48]	@ (800392c <MX_TIM3_Init+0xa0>)
 80038fa:	f002 fe45 	bl	8006588 <HAL_TIM_Encoder_Init>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003904:	f7fd ff9c 	bl	8001840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003908:	2300      	movs	r3, #0
 800390a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800390c:	2300      	movs	r3, #0
 800390e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003910:	1d3b      	adds	r3, r7, #4
 8003912:	4619      	mov	r1, r3
 8003914:	4805      	ldr	r0, [pc, #20]	@ (800392c <MX_TIM3_Init+0xa0>)
 8003916:	f003 fa97 	bl	8006e48 <HAL_TIMEx_MasterConfigSynchronization>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003920:	f7fd ff8e 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003924:	bf00      	nop
 8003926:	3730      	adds	r7, #48	@ 0x30
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	20000af8 	.word	0x20000af8
 8003930:	40000400 	.word	0x40000400

08003934 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a1a      	ldr	r2, [pc, #104]	@ (80039ac <HAL_TIM_Base_MspInit+0x78>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d12d      	bne.n	80039a2 <HAL_TIM_Base_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003946:	2300      	movs	r3, #0
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	4b19      	ldr	r3, [pc, #100]	@ (80039b0 <HAL_TIM_Base_MspInit+0x7c>)
 800394c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800394e:	4a18      	ldr	r2, [pc, #96]	@ (80039b0 <HAL_TIM_Base_MspInit+0x7c>)
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	6453      	str	r3, [r2, #68]	@ 0x44
 8003956:	4b16      	ldr	r3, [pc, #88]	@ (80039b0 <HAL_TIM_Base_MspInit+0x7c>)
 8003958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003962:	2200      	movs	r2, #0
 8003964:	2100      	movs	r1, #0
 8003966:	2018      	movs	r0, #24
 8003968:	f000 fb19 	bl	8003f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800396c:	2018      	movs	r0, #24
 800396e:	f000 fb32 	bl	8003fd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003972:	2200      	movs	r2, #0
 8003974:	2100      	movs	r1, #0
 8003976:	2019      	movs	r0, #25
 8003978:	f000 fb11 	bl	8003f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800397c:	2019      	movs	r0, #25
 800397e:	f000 fb2a 	bl	8003fd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003982:	2200      	movs	r2, #0
 8003984:	2100      	movs	r1, #0
 8003986:	201a      	movs	r0, #26
 8003988:	f000 fb09 	bl	8003f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800398c:	201a      	movs	r0, #26
 800398e:	f000 fb22 	bl	8003fd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003992:	2200      	movs	r2, #0
 8003994:	2100      	movs	r1, #0
 8003996:	201b      	movs	r0, #27
 8003998:	f000 fb01 	bl	8003f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800399c:	201b      	movs	r0, #27
 800399e:	f000 fb1a 	bl	8003fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80039a2:	bf00      	nop
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40010000 	.word	0x40010000
 80039b0:	40023800 	.word	0x40023800

080039b4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b08c      	sub	sp, #48	@ 0x30
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039bc:	f107 031c 	add.w	r3, r7, #28
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	605a      	str	r2, [r3, #4]
 80039c6:	609a      	str	r2, [r3, #8]
 80039c8:	60da      	str	r2, [r3, #12]
 80039ca:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039d4:	d12c      	bne.n	8003a30 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039d6:	2300      	movs	r3, #0
 80039d8:	61bb      	str	r3, [r7, #24]
 80039da:	4b30      	ldr	r3, [pc, #192]	@ (8003a9c <HAL_TIM_Encoder_MspInit+0xe8>)
 80039dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039de:	4a2f      	ldr	r2, [pc, #188]	@ (8003a9c <HAL_TIM_Encoder_MspInit+0xe8>)
 80039e0:	f043 0301 	orr.w	r3, r3, #1
 80039e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80039e6:	4b2d      	ldr	r3, [pc, #180]	@ (8003a9c <HAL_TIM_Encoder_MspInit+0xe8>)
 80039e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	61bb      	str	r3, [r7, #24]
 80039f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039f2:	2300      	movs	r3, #0
 80039f4:	617b      	str	r3, [r7, #20]
 80039f6:	4b29      	ldr	r3, [pc, #164]	@ (8003a9c <HAL_TIM_Encoder_MspInit+0xe8>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fa:	4a28      	ldr	r2, [pc, #160]	@ (8003a9c <HAL_TIM_Encoder_MspInit+0xe8>)
 80039fc:	f043 0301 	orr.w	r3, r3, #1
 8003a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a02:	4b26      	ldr	r3, [pc, #152]	@ (8003a9c <HAL_TIM_Encoder_MspInit+0xe8>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Enc1A_Pin|Enc2B_Pin;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a12:	2302      	movs	r3, #2
 8003a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a16:	2300      	movs	r3, #0
 8003a18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a22:	f107 031c 	add.w	r3, r7, #28
 8003a26:	4619      	mov	r1, r3
 8003a28:	481d      	ldr	r0, [pc, #116]	@ (8003aa0 <HAL_TIM_Encoder_MspInit+0xec>)
 8003a2a:	f000 fef1 	bl	8004810 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003a2e:	e030      	b.n	8003a92 <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM3)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a1b      	ldr	r2, [pc, #108]	@ (8003aa4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d12b      	bne.n	8003a92 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	613b      	str	r3, [r7, #16]
 8003a3e:	4b17      	ldr	r3, [pc, #92]	@ (8003a9c <HAL_TIM_Encoder_MspInit+0xe8>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a42:	4a16      	ldr	r2, [pc, #88]	@ (8003a9c <HAL_TIM_Encoder_MspInit+0xe8>)
 8003a44:	f043 0302 	orr.w	r3, r3, #2
 8003a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a4a:	4b14      	ldr	r3, [pc, #80]	@ (8003a9c <HAL_TIM_Encoder_MspInit+0xe8>)
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	613b      	str	r3, [r7, #16]
 8003a54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a56:	2300      	movs	r3, #0
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	4b10      	ldr	r3, [pc, #64]	@ (8003a9c <HAL_TIM_Encoder_MspInit+0xe8>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a5e:	4a0f      	ldr	r2, [pc, #60]	@ (8003a9c <HAL_TIM_Encoder_MspInit+0xe8>)
 8003a60:	f043 0301 	orr.w	r3, r3, #1
 8003a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a66:	4b0d      	ldr	r3, [pc, #52]	@ (8003a9c <HAL_TIM_Encoder_MspInit+0xe8>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Enc2A_Pin|Enc2BA7_Pin;
 8003a72:	23c0      	movs	r3, #192	@ 0xc0
 8003a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a76:	2302      	movs	r3, #2
 8003a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003a82:	2302      	movs	r3, #2
 8003a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a86:	f107 031c 	add.w	r3, r7, #28
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	4804      	ldr	r0, [pc, #16]	@ (8003aa0 <HAL_TIM_Encoder_MspInit+0xec>)
 8003a8e:	f000 febf 	bl	8004810 <HAL_GPIO_Init>
}
 8003a92:	bf00      	nop
 8003a94:	3730      	adds	r7, #48	@ 0x30
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	40020000 	.word	0x40020000
 8003aa4:	40000400 	.word	0x40000400

08003aa8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003aac:	4b11      	ldr	r3, [pc, #68]	@ (8003af4 <MX_USART2_UART_Init+0x4c>)
 8003aae:	4a12      	ldr	r2, [pc, #72]	@ (8003af8 <MX_USART2_UART_Init+0x50>)
 8003ab0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8003ab2:	4b10      	ldr	r3, [pc, #64]	@ (8003af4 <MX_USART2_UART_Init+0x4c>)
 8003ab4:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8003ab8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003aba:	4b0e      	ldr	r3, [pc, #56]	@ (8003af4 <MX_USART2_UART_Init+0x4c>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8003af4 <MX_USART2_UART_Init+0x4c>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8003af4 <MX_USART2_UART_Init+0x4c>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003acc:	4b09      	ldr	r3, [pc, #36]	@ (8003af4 <MX_USART2_UART_Init+0x4c>)
 8003ace:	220c      	movs	r2, #12
 8003ad0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ad2:	4b08      	ldr	r3, [pc, #32]	@ (8003af4 <MX_USART2_UART_Init+0x4c>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ad8:	4b06      	ldr	r3, [pc, #24]	@ (8003af4 <MX_USART2_UART_Init+0x4c>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003ade:	4805      	ldr	r0, [pc, #20]	@ (8003af4 <MX_USART2_UART_Init+0x4c>)
 8003ae0:	f003 fa34 	bl	8006f4c <HAL_UART_Init>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003aea:	f7fd fea9 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003aee:	bf00      	nop
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20000b40 	.word	0x20000b40
 8003af8:	40004400 	.word	0x40004400

08003afc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08a      	sub	sp, #40	@ 0x28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b04:	f107 0314 	add.w	r3, r7, #20
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	605a      	str	r2, [r3, #4]
 8003b0e:	609a      	str	r2, [r3, #8]
 8003b10:	60da      	str	r2, [r3, #12]
 8003b12:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a4c      	ldr	r2, [pc, #304]	@ (8003c4c <HAL_UART_MspInit+0x150>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	f040 8091 	bne.w	8003c42 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b20:	2300      	movs	r3, #0
 8003b22:	613b      	str	r3, [r7, #16]
 8003b24:	4b4a      	ldr	r3, [pc, #296]	@ (8003c50 <HAL_UART_MspInit+0x154>)
 8003b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b28:	4a49      	ldr	r2, [pc, #292]	@ (8003c50 <HAL_UART_MspInit+0x154>)
 8003b2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b30:	4b47      	ldr	r3, [pc, #284]	@ (8003c50 <HAL_UART_MspInit+0x154>)
 8003b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	4b43      	ldr	r3, [pc, #268]	@ (8003c50 <HAL_UART_MspInit+0x154>)
 8003b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b44:	4a42      	ldr	r2, [pc, #264]	@ (8003c50 <HAL_UART_MspInit+0x154>)
 8003b46:	f043 0301 	orr.w	r3, r3, #1
 8003b4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b4c:	4b40      	ldr	r3, [pc, #256]	@ (8003c50 <HAL_UART_MspInit+0x154>)
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003b58:	230c      	movs	r3, #12
 8003b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b64:	2303      	movs	r3, #3
 8003b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b68:	2307      	movs	r3, #7
 8003b6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b6c:	f107 0314 	add.w	r3, r7, #20
 8003b70:	4619      	mov	r1, r3
 8003b72:	4838      	ldr	r0, [pc, #224]	@ (8003c54 <HAL_UART_MspInit+0x158>)
 8003b74:	f000 fe4c 	bl	8004810 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003b78:	4b37      	ldr	r3, [pc, #220]	@ (8003c58 <HAL_UART_MspInit+0x15c>)
 8003b7a:	4a38      	ldr	r2, [pc, #224]	@ (8003c5c <HAL_UART_MspInit+0x160>)
 8003b7c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003b7e:	4b36      	ldr	r3, [pc, #216]	@ (8003c58 <HAL_UART_MspInit+0x15c>)
 8003b80:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003b84:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b86:	4b34      	ldr	r3, [pc, #208]	@ (8003c58 <HAL_UART_MspInit+0x15c>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b8c:	4b32      	ldr	r3, [pc, #200]	@ (8003c58 <HAL_UART_MspInit+0x15c>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b92:	4b31      	ldr	r3, [pc, #196]	@ (8003c58 <HAL_UART_MspInit+0x15c>)
 8003b94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b98:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8003c58 <HAL_UART_MspInit+0x15c>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ba0:	4b2d      	ldr	r3, [pc, #180]	@ (8003c58 <HAL_UART_MspInit+0x15c>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003ba6:	4b2c      	ldr	r3, [pc, #176]	@ (8003c58 <HAL_UART_MspInit+0x15c>)
 8003ba8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003bac:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003bae:	4b2a      	ldr	r3, [pc, #168]	@ (8003c58 <HAL_UART_MspInit+0x15c>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003bb4:	4b28      	ldr	r3, [pc, #160]	@ (8003c58 <HAL_UART_MspInit+0x15c>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003bba:	4827      	ldr	r0, [pc, #156]	@ (8003c58 <HAL_UART_MspInit+0x15c>)
 8003bbc:	f000 fa26 	bl	800400c <HAL_DMA_Init>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003bc6:	f7fd fe3b 	bl	8001840 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a22      	ldr	r2, [pc, #136]	@ (8003c58 <HAL_UART_MspInit+0x15c>)
 8003bce:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003bd0:	4a21      	ldr	r2, [pc, #132]	@ (8003c58 <HAL_UART_MspInit+0x15c>)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003bd6:	4b22      	ldr	r3, [pc, #136]	@ (8003c60 <HAL_UART_MspInit+0x164>)
 8003bd8:	4a22      	ldr	r2, [pc, #136]	@ (8003c64 <HAL_UART_MspInit+0x168>)
 8003bda:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003bdc:	4b20      	ldr	r3, [pc, #128]	@ (8003c60 <HAL_UART_MspInit+0x164>)
 8003bde:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003be2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003be4:	4b1e      	ldr	r3, [pc, #120]	@ (8003c60 <HAL_UART_MspInit+0x164>)
 8003be6:	2240      	movs	r2, #64	@ 0x40
 8003be8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bea:	4b1d      	ldr	r3, [pc, #116]	@ (8003c60 <HAL_UART_MspInit+0x164>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8003c60 <HAL_UART_MspInit+0x164>)
 8003bf2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003bf6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bf8:	4b19      	ldr	r3, [pc, #100]	@ (8003c60 <HAL_UART_MspInit+0x164>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bfe:	4b18      	ldr	r3, [pc, #96]	@ (8003c60 <HAL_UART_MspInit+0x164>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003c04:	4b16      	ldr	r3, [pc, #88]	@ (8003c60 <HAL_UART_MspInit+0x164>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003c0a:	4b15      	ldr	r3, [pc, #84]	@ (8003c60 <HAL_UART_MspInit+0x164>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c10:	4b13      	ldr	r3, [pc, #76]	@ (8003c60 <HAL_UART_MspInit+0x164>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003c16:	4812      	ldr	r0, [pc, #72]	@ (8003c60 <HAL_UART_MspInit+0x164>)
 8003c18:	f000 f9f8 	bl	800400c <HAL_DMA_Init>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8003c22:	f7fd fe0d 	bl	8001840 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a0d      	ldr	r2, [pc, #52]	@ (8003c60 <HAL_UART_MspInit+0x164>)
 8003c2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c2c:	4a0c      	ldr	r2, [pc, #48]	@ (8003c60 <HAL_UART_MspInit+0x164>)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003c32:	2200      	movs	r2, #0
 8003c34:	2100      	movs	r1, #0
 8003c36:	2026      	movs	r0, #38	@ 0x26
 8003c38:	f000 f9b1 	bl	8003f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003c3c:	2026      	movs	r0, #38	@ 0x26
 8003c3e:	f000 f9ca 	bl	8003fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003c42:	bf00      	nop
 8003c44:	3728      	adds	r7, #40	@ 0x28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40004400 	.word	0x40004400
 8003c50:	40023800 	.word	0x40023800
 8003c54:	40020000 	.word	0x40020000
 8003c58:	20000b88 	.word	0x20000b88
 8003c5c:	40026088 	.word	0x40026088
 8003c60:	20000be8 	.word	0x20000be8
 8003c64:	400260a0 	.word	0x400260a0

08003c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003c68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003ca0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c6c:	f7ff fd58 	bl	8003720 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c70:	480c      	ldr	r0, [pc, #48]	@ (8003ca4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c72:	490d      	ldr	r1, [pc, #52]	@ (8003ca8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c74:	4a0d      	ldr	r2, [pc, #52]	@ (8003cac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c78:	e002      	b.n	8003c80 <LoopCopyDataInit>

08003c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c7e:	3304      	adds	r3, #4

08003c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c84:	d3f9      	bcc.n	8003c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c86:	4a0a      	ldr	r2, [pc, #40]	@ (8003cb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c88:	4c0a      	ldr	r4, [pc, #40]	@ (8003cb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c8c:	e001      	b.n	8003c92 <LoopFillZerobss>

08003c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c90:	3204      	adds	r2, #4

08003c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c94:	d3fb      	bcc.n	8003c8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c96:	f004 fdbd 	bl	8008814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c9a:	f7fd fcc3 	bl	8001624 <main>
  bx  lr    
 8003c9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003ca0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ca8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003cac:	08009784 	.word	0x08009784
  ldr r2, =_sbss
 8003cb0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8003cb4:	20000d98 	.word	0x20000d98

08003cb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003cb8:	e7fe      	b.n	8003cb8 <ADC_IRQHandler>
	...

08003cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8003cfc <HAL_Init+0x40>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8003cfc <HAL_Init+0x40>)
 8003cc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003cca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8003cfc <HAL_Init+0x40>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8003cfc <HAL_Init+0x40>)
 8003cd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003cd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cd8:	4b08      	ldr	r3, [pc, #32]	@ (8003cfc <HAL_Init+0x40>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a07      	ldr	r2, [pc, #28]	@ (8003cfc <HAL_Init+0x40>)
 8003cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ce2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ce4:	2003      	movs	r0, #3
 8003ce6:	f000 f94f 	bl	8003f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cea:	200f      	movs	r0, #15
 8003cec:	f000 f808 	bl	8003d00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cf0:	f7ff fbd4 	bl	800349c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40023c00 	.word	0x40023c00

08003d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d08:	4b12      	ldr	r3, [pc, #72]	@ (8003d54 <HAL_InitTick+0x54>)
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	4b12      	ldr	r3, [pc, #72]	@ (8003d58 <HAL_InitTick+0x58>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	4619      	mov	r1, r3
 8003d12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 f967 	bl	8003ff2 <HAL_SYSTICK_Config>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e00e      	b.n	8003d4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b0f      	cmp	r3, #15
 8003d32:	d80a      	bhi.n	8003d4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d34:	2200      	movs	r2, #0
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d3c:	f000 f92f 	bl	8003f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d40:	4a06      	ldr	r2, [pc, #24]	@ (8003d5c <HAL_InitTick+0x5c>)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	e000      	b.n	8003d4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	2000000c 	.word	0x2000000c
 8003d58:	20000014 	.word	0x20000014
 8003d5c:	20000010 	.word	0x20000010

08003d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d64:	4b06      	ldr	r3, [pc, #24]	@ (8003d80 <HAL_IncTick+0x20>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4b06      	ldr	r3, [pc, #24]	@ (8003d84 <HAL_IncTick+0x24>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4413      	add	r3, r2
 8003d70:	4a04      	ldr	r2, [pc, #16]	@ (8003d84 <HAL_IncTick+0x24>)
 8003d72:	6013      	str	r3, [r2, #0]
}
 8003d74:	bf00      	nop
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	20000014 	.word	0x20000014
 8003d84:	20000c48 	.word	0x20000c48

08003d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d8c:	4b03      	ldr	r3, [pc, #12]	@ (8003d9c <HAL_GetTick+0x14>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	20000c48 	.word	0x20000c48

08003da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003da8:	f7ff ffee 	bl	8003d88 <HAL_GetTick>
 8003dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003db8:	d005      	beq.n	8003dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dba:	4b0a      	ldr	r3, [pc, #40]	@ (8003de4 <HAL_Delay+0x44>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003dc6:	bf00      	nop
 8003dc8:	f7ff ffde 	bl	8003d88 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d8f7      	bhi.n	8003dc8 <HAL_Delay+0x28>
  {
  }
}
 8003dd8:	bf00      	nop
 8003dda:	bf00      	nop
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20000014 	.word	0x20000014

08003de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003df8:	4b0c      	ldr	r3, [pc, #48]	@ (8003e2c <__NVIC_SetPriorityGrouping+0x44>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e04:	4013      	ands	r3, r2
 8003e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e1a:	4a04      	ldr	r2, [pc, #16]	@ (8003e2c <__NVIC_SetPriorityGrouping+0x44>)
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	60d3      	str	r3, [r2, #12]
}
 8003e20:	bf00      	nop
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	e000ed00 	.word	0xe000ed00

08003e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e34:	4b04      	ldr	r3, [pc, #16]	@ (8003e48 <__NVIC_GetPriorityGrouping+0x18>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	0a1b      	lsrs	r3, r3, #8
 8003e3a:	f003 0307 	and.w	r3, r3, #7
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	e000ed00 	.word	0xe000ed00

08003e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	4603      	mov	r3, r0
 8003e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	db0b      	blt.n	8003e76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e5e:	79fb      	ldrb	r3, [r7, #7]
 8003e60:	f003 021f 	and.w	r2, r3, #31
 8003e64:	4907      	ldr	r1, [pc, #28]	@ (8003e84 <__NVIC_EnableIRQ+0x38>)
 8003e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	2001      	movs	r0, #1
 8003e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	e000e100 	.word	0xe000e100

08003e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	4603      	mov	r3, r0
 8003e90:	6039      	str	r1, [r7, #0]
 8003e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	db0a      	blt.n	8003eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	490c      	ldr	r1, [pc, #48]	@ (8003ed4 <__NVIC_SetPriority+0x4c>)
 8003ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea6:	0112      	lsls	r2, r2, #4
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	440b      	add	r3, r1
 8003eac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003eb0:	e00a      	b.n	8003ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	4908      	ldr	r1, [pc, #32]	@ (8003ed8 <__NVIC_SetPriority+0x50>)
 8003eb8:	79fb      	ldrb	r3, [r7, #7]
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	3b04      	subs	r3, #4
 8003ec0:	0112      	lsls	r2, r2, #4
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	761a      	strb	r2, [r3, #24]
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	e000e100 	.word	0xe000e100
 8003ed8:	e000ed00 	.word	0xe000ed00

08003edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b089      	sub	sp, #36	@ 0x24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f1c3 0307 	rsb	r3, r3, #7
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	bf28      	it	cs
 8003efa:	2304      	movcs	r3, #4
 8003efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	3304      	adds	r3, #4
 8003f02:	2b06      	cmp	r3, #6
 8003f04:	d902      	bls.n	8003f0c <NVIC_EncodePriority+0x30>
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	3b03      	subs	r3, #3
 8003f0a:	e000      	b.n	8003f0e <NVIC_EncodePriority+0x32>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	43da      	mvns	r2, r3
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	401a      	ands	r2, r3
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f24:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2e:	43d9      	mvns	r1, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f34:	4313      	orrs	r3, r2
         );
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3724      	adds	r7, #36	@ 0x24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
	...

08003f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f54:	d301      	bcc.n	8003f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f56:	2301      	movs	r3, #1
 8003f58:	e00f      	b.n	8003f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f84 <SysTick_Config+0x40>)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f62:	210f      	movs	r1, #15
 8003f64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f68:	f7ff ff8e 	bl	8003e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f6c:	4b05      	ldr	r3, [pc, #20]	@ (8003f84 <SysTick_Config+0x40>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f72:	4b04      	ldr	r3, [pc, #16]	@ (8003f84 <SysTick_Config+0x40>)
 8003f74:	2207      	movs	r2, #7
 8003f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	e000e010 	.word	0xe000e010

08003f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f7ff ff29 	bl	8003de8 <__NVIC_SetPriorityGrouping>
}
 8003f96:	bf00      	nop
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b086      	sub	sp, #24
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	60b9      	str	r1, [r7, #8]
 8003fa8:	607a      	str	r2, [r7, #4]
 8003faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003fac:	2300      	movs	r3, #0
 8003fae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fb0:	f7ff ff3e 	bl	8003e30 <__NVIC_GetPriorityGrouping>
 8003fb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	68b9      	ldr	r1, [r7, #8]
 8003fba:	6978      	ldr	r0, [r7, #20]
 8003fbc:	f7ff ff8e 	bl	8003edc <NVIC_EncodePriority>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff ff5d 	bl	8003e88 <__NVIC_SetPriority>
}
 8003fce:	bf00      	nop
 8003fd0:	3718      	adds	r7, #24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b082      	sub	sp, #8
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	4603      	mov	r3, r0
 8003fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff ff31 	bl	8003e4c <__NVIC_EnableIRQ>
}
 8003fea:	bf00      	nop
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b082      	sub	sp, #8
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff ffa2 	bl	8003f44 <SysTick_Config>
 8004000:	4603      	mov	r3, r0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004014:	2300      	movs	r3, #0
 8004016:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004018:	f7ff feb6 	bl	8003d88 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e099      	b.n	800415c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2202      	movs	r2, #2
 800402c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0201 	bic.w	r2, r2, #1
 8004046:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004048:	e00f      	b.n	800406a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800404a:	f7ff fe9d 	bl	8003d88 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b05      	cmp	r3, #5
 8004056:	d908      	bls.n	800406a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2220      	movs	r2, #32
 800405c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2203      	movs	r2, #3
 8004062:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e078      	b.n	800415c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1e8      	bne.n	800404a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	4b38      	ldr	r3, [pc, #224]	@ (8004164 <HAL_DMA_Init+0x158>)
 8004084:	4013      	ands	r3, r2
 8004086:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004096:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c0:	2b04      	cmp	r3, #4
 80040c2:	d107      	bne.n	80040d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040cc:	4313      	orrs	r3, r2
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f023 0307 	bic.w	r3, r3, #7
 80040ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d117      	bne.n	800412e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	4313      	orrs	r3, r2
 8004106:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00e      	beq.n	800412e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 fb01 	bl	8004718 <DMA_CheckFifoParam>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d008      	beq.n	800412e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2240      	movs	r2, #64	@ 0x40
 8004120:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800412a:	2301      	movs	r3, #1
 800412c:	e016      	b.n	800415c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 fab8 	bl	80046ac <DMA_CalcBaseAndBitshift>
 800413c:	4603      	mov	r3, r0
 800413e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004144:	223f      	movs	r2, #63	@ 0x3f
 8004146:	409a      	lsls	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	f010803f 	.word	0xf010803f

08004168 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
 8004174:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004176:	2300      	movs	r3, #0
 8004178:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800417e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004186:	2b01      	cmp	r3, #1
 8004188:	d101      	bne.n	800418e <HAL_DMA_Start_IT+0x26>
 800418a:	2302      	movs	r3, #2
 800418c:	e040      	b.n	8004210 <HAL_DMA_Start_IT+0xa8>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d12f      	bne.n	8004202 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2202      	movs	r2, #2
 80041a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	68b9      	ldr	r1, [r7, #8]
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 fa4a 	bl	8004650 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041c0:	223f      	movs	r2, #63	@ 0x3f
 80041c2:	409a      	lsls	r2, r3
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0216 	orr.w	r2, r2, #22
 80041d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d007      	beq.n	80041f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0208 	orr.w	r2, r2, #8
 80041ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0201 	orr.w	r2, r2, #1
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	e005      	b.n	800420e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800420a:	2302      	movs	r3, #2
 800420c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800420e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3718      	adds	r7, #24
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004224:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004226:	f7ff fdaf 	bl	8003d88 <HAL_GetTick>
 800422a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d008      	beq.n	800424a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2280      	movs	r2, #128	@ 0x80
 800423c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e052      	b.n	80042f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0216 	bic.w	r2, r2, #22
 8004258:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695a      	ldr	r2, [r3, #20]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004268:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426e:	2b00      	cmp	r3, #0
 8004270:	d103      	bne.n	800427a <HAL_DMA_Abort+0x62>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004276:	2b00      	cmp	r3, #0
 8004278:	d007      	beq.n	800428a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 0208 	bic.w	r2, r2, #8
 8004288:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0201 	bic.w	r2, r2, #1
 8004298:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800429a:	e013      	b.n	80042c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800429c:	f7ff fd74 	bl	8003d88 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b05      	cmp	r3, #5
 80042a8:	d90c      	bls.n	80042c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2220      	movs	r2, #32
 80042ae:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2203      	movs	r2, #3
 80042b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e015      	b.n	80042f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1e4      	bne.n	800429c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d6:	223f      	movs	r2, #63	@ 0x3f
 80042d8:	409a      	lsls	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d004      	beq.n	8004316 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2280      	movs	r2, #128	@ 0x80
 8004310:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e00c      	b.n	8004330 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2205      	movs	r2, #5
 800431a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0201 	bic.w	r2, r2, #1
 800432c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004348:	4b8e      	ldr	r3, [pc, #568]	@ (8004584 <HAL_DMA_IRQHandler+0x248>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a8e      	ldr	r2, [pc, #568]	@ (8004588 <HAL_DMA_IRQHandler+0x24c>)
 800434e:	fba2 2303 	umull	r2, r3, r2, r3
 8004352:	0a9b      	lsrs	r3, r3, #10
 8004354:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800435a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004366:	2208      	movs	r2, #8
 8004368:	409a      	lsls	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4013      	ands	r3, r2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d01a      	beq.n	80043a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b00      	cmp	r3, #0
 800437e:	d013      	beq.n	80043a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0204 	bic.w	r2, r2, #4
 800438e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004394:	2208      	movs	r2, #8
 8004396:	409a      	lsls	r2, r3
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a0:	f043 0201 	orr.w	r2, r3, #1
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ac:	2201      	movs	r2, #1
 80043ae:	409a      	lsls	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4013      	ands	r3, r2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d012      	beq.n	80043de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00b      	beq.n	80043de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ca:	2201      	movs	r2, #1
 80043cc:	409a      	lsls	r2, r3
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d6:	f043 0202 	orr.w	r2, r3, #2
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e2:	2204      	movs	r2, #4
 80043e4:	409a      	lsls	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	4013      	ands	r3, r2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d012      	beq.n	8004414 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00b      	beq.n	8004414 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004400:	2204      	movs	r2, #4
 8004402:	409a      	lsls	r2, r3
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800440c:	f043 0204 	orr.w	r2, r3, #4
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004418:	2210      	movs	r2, #16
 800441a:	409a      	lsls	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4013      	ands	r3, r2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d043      	beq.n	80044ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0308 	and.w	r3, r3, #8
 800442e:	2b00      	cmp	r3, #0
 8004430:	d03c      	beq.n	80044ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004436:	2210      	movs	r2, #16
 8004438:	409a      	lsls	r2, r3
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d018      	beq.n	800447e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d108      	bne.n	800446c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445e:	2b00      	cmp	r3, #0
 8004460:	d024      	beq.n	80044ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	4798      	blx	r3
 800446a:	e01f      	b.n	80044ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004470:	2b00      	cmp	r3, #0
 8004472:	d01b      	beq.n	80044ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	4798      	blx	r3
 800447c:	e016      	b.n	80044ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004488:	2b00      	cmp	r3, #0
 800448a:	d107      	bne.n	800449c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0208 	bic.w	r2, r2, #8
 800449a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044b0:	2220      	movs	r2, #32
 80044b2:	409a      	lsls	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4013      	ands	r3, r2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 808f 	beq.w	80045dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0310 	and.w	r3, r3, #16
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 8087 	beq.w	80045dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044d2:	2220      	movs	r2, #32
 80044d4:	409a      	lsls	r2, r3
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b05      	cmp	r3, #5
 80044e4:	d136      	bne.n	8004554 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 0216 	bic.w	r2, r2, #22
 80044f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695a      	ldr	r2, [r3, #20]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004504:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450a:	2b00      	cmp	r3, #0
 800450c:	d103      	bne.n	8004516 <HAL_DMA_IRQHandler+0x1da>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004512:	2b00      	cmp	r3, #0
 8004514:	d007      	beq.n	8004526 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0208 	bic.w	r2, r2, #8
 8004524:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800452a:	223f      	movs	r2, #63	@ 0x3f
 800452c:	409a      	lsls	r2, r3
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004546:	2b00      	cmp	r3, #0
 8004548:	d07e      	beq.n	8004648 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	4798      	blx	r3
        }
        return;
 8004552:	e079      	b.n	8004648 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d01d      	beq.n	800459e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10d      	bne.n	800458c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004574:	2b00      	cmp	r3, #0
 8004576:	d031      	beq.n	80045dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	4798      	blx	r3
 8004580:	e02c      	b.n	80045dc <HAL_DMA_IRQHandler+0x2a0>
 8004582:	bf00      	nop
 8004584:	2000000c 	.word	0x2000000c
 8004588:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004590:	2b00      	cmp	r3, #0
 8004592:	d023      	beq.n	80045dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	4798      	blx	r3
 800459c:	e01e      	b.n	80045dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10f      	bne.n	80045cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 0210 	bic.w	r2, r2, #16
 80045ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d032      	beq.n	800464a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d022      	beq.n	8004636 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2205      	movs	r2, #5
 80045f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0201 	bic.w	r2, r2, #1
 8004606:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	3301      	adds	r3, #1
 800460c:	60bb      	str	r3, [r7, #8]
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	429a      	cmp	r2, r3
 8004612:	d307      	bcc.n	8004624 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1f2      	bne.n	8004608 <HAL_DMA_IRQHandler+0x2cc>
 8004622:	e000      	b.n	8004626 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004624:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800463a:	2b00      	cmp	r3, #0
 800463c:	d005      	beq.n	800464a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	4798      	blx	r3
 8004646:	e000      	b.n	800464a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004648:	bf00      	nop
    }
  }
}
 800464a:	3718      	adds	r7, #24
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800466c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2b40      	cmp	r3, #64	@ 0x40
 800467c:	d108      	bne.n	8004690 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800468e:	e007      	b.n	80046a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	60da      	str	r2, [r3, #12]
}
 80046a0:	bf00      	nop
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	3b10      	subs	r3, #16
 80046bc:	4a14      	ldr	r2, [pc, #80]	@ (8004710 <DMA_CalcBaseAndBitshift+0x64>)
 80046be:	fba2 2303 	umull	r2, r3, r2, r3
 80046c2:	091b      	lsrs	r3, r3, #4
 80046c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80046c6:	4a13      	ldr	r2, [pc, #76]	@ (8004714 <DMA_CalcBaseAndBitshift+0x68>)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4413      	add	r3, r2
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2b03      	cmp	r3, #3
 80046d8:	d909      	bls.n	80046ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80046e2:	f023 0303 	bic.w	r3, r3, #3
 80046e6:	1d1a      	adds	r2, r3, #4
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80046ec:	e007      	b.n	80046fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80046f6:	f023 0303 	bic.w	r3, r3, #3
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004702:	4618      	mov	r0, r3
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	aaaaaaab 	.word	0xaaaaaaab
 8004714:	08009734 	.word	0x08009734

08004718 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004720:	2300      	movs	r3, #0
 8004722:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004728:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d11f      	bne.n	8004772 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	2b03      	cmp	r3, #3
 8004736:	d856      	bhi.n	80047e6 <DMA_CheckFifoParam+0xce>
 8004738:	a201      	add	r2, pc, #4	@ (adr r2, 8004740 <DMA_CheckFifoParam+0x28>)
 800473a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473e:	bf00      	nop
 8004740:	08004751 	.word	0x08004751
 8004744:	08004763 	.word	0x08004763
 8004748:	08004751 	.word	0x08004751
 800474c:	080047e7 	.word	0x080047e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004754:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d046      	beq.n	80047ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004760:	e043      	b.n	80047ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004766:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800476a:	d140      	bne.n	80047ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004770:	e03d      	b.n	80047ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800477a:	d121      	bne.n	80047c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b03      	cmp	r3, #3
 8004780:	d837      	bhi.n	80047f2 <DMA_CheckFifoParam+0xda>
 8004782:	a201      	add	r2, pc, #4	@ (adr r2, 8004788 <DMA_CheckFifoParam+0x70>)
 8004784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004788:	08004799 	.word	0x08004799
 800478c:	0800479f 	.word	0x0800479f
 8004790:	08004799 	.word	0x08004799
 8004794:	080047b1 	.word	0x080047b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	73fb      	strb	r3, [r7, #15]
      break;
 800479c:	e030      	b.n	8004800 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d025      	beq.n	80047f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047ae:	e022      	b.n	80047f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80047b8:	d11f      	bne.n	80047fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80047be:	e01c      	b.n	80047fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d903      	bls.n	80047ce <DMA_CheckFifoParam+0xb6>
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2b03      	cmp	r3, #3
 80047ca:	d003      	beq.n	80047d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80047cc:	e018      	b.n	8004800 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	73fb      	strb	r3, [r7, #15]
      break;
 80047d2:	e015      	b.n	8004800 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00e      	beq.n	80047fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	73fb      	strb	r3, [r7, #15]
      break;
 80047e4:	e00b      	b.n	80047fe <DMA_CheckFifoParam+0xe6>
      break;
 80047e6:	bf00      	nop
 80047e8:	e00a      	b.n	8004800 <DMA_CheckFifoParam+0xe8>
      break;
 80047ea:	bf00      	nop
 80047ec:	e008      	b.n	8004800 <DMA_CheckFifoParam+0xe8>
      break;
 80047ee:	bf00      	nop
 80047f0:	e006      	b.n	8004800 <DMA_CheckFifoParam+0xe8>
      break;
 80047f2:	bf00      	nop
 80047f4:	e004      	b.n	8004800 <DMA_CheckFifoParam+0xe8>
      break;
 80047f6:	bf00      	nop
 80047f8:	e002      	b.n	8004800 <DMA_CheckFifoParam+0xe8>
      break;   
 80047fa:	bf00      	nop
 80047fc:	e000      	b.n	8004800 <DMA_CheckFifoParam+0xe8>
      break;
 80047fe:	bf00      	nop
    }
  } 
  
  return status; 
 8004800:	7bfb      	ldrb	r3, [r7, #15]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3714      	adds	r7, #20
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop

08004810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004810:	b480      	push	{r7}
 8004812:	b089      	sub	sp, #36	@ 0x24
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800481a:	2300      	movs	r3, #0
 800481c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800481e:	2300      	movs	r3, #0
 8004820:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004822:	2300      	movs	r3, #0
 8004824:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004826:	2300      	movs	r3, #0
 8004828:	61fb      	str	r3, [r7, #28]
 800482a:	e159      	b.n	8004ae0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800482c:	2201      	movs	r2, #1
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	fa02 f303 	lsl.w	r3, r2, r3
 8004834:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	4013      	ands	r3, r2
 800483e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	429a      	cmp	r2, r3
 8004846:	f040 8148 	bne.w	8004ada <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	2b01      	cmp	r3, #1
 8004854:	d005      	beq.n	8004862 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800485e:	2b02      	cmp	r3, #2
 8004860:	d130      	bne.n	80048c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	2203      	movs	r2, #3
 800486e:	fa02 f303 	lsl.w	r3, r2, r3
 8004872:	43db      	mvns	r3, r3
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	4013      	ands	r3, r2
 8004878:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	4313      	orrs	r3, r2
 800488a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004898:	2201      	movs	r2, #1
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	43db      	mvns	r3, r3
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	4013      	ands	r3, r2
 80048a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	091b      	lsrs	r3, r3, #4
 80048ae:	f003 0201 	and.w	r2, r3, #1
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	fa02 f303 	lsl.w	r3, r2, r3
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f003 0303 	and.w	r3, r3, #3
 80048cc:	2b03      	cmp	r3, #3
 80048ce:	d017      	beq.n	8004900 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	2203      	movs	r2, #3
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	43db      	mvns	r3, r3
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	4013      	ands	r3, r2
 80048e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	fa02 f303 	lsl.w	r3, r2, r3
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f003 0303 	and.w	r3, r3, #3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d123      	bne.n	8004954 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	08da      	lsrs	r2, r3, #3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3208      	adds	r2, #8
 8004914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004918:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	220f      	movs	r2, #15
 8004924:	fa02 f303 	lsl.w	r3, r2, r3
 8004928:	43db      	mvns	r3, r3
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	4013      	ands	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	691a      	ldr	r2, [r3, #16]
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	f003 0307 	and.w	r3, r3, #7
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	fa02 f303 	lsl.w	r3, r2, r3
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	4313      	orrs	r3, r2
 8004944:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	08da      	lsrs	r2, r3, #3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3208      	adds	r2, #8
 800494e:	69b9      	ldr	r1, [r7, #24]
 8004950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	2203      	movs	r2, #3
 8004960:	fa02 f303 	lsl.w	r3, r2, r3
 8004964:	43db      	mvns	r3, r3
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	4013      	ands	r3, r2
 800496a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f003 0203 	and.w	r2, r3, #3
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	fa02 f303 	lsl.w	r3, r2, r3
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	4313      	orrs	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 80a2 	beq.w	8004ada <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004996:	2300      	movs	r3, #0
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	4b57      	ldr	r3, [pc, #348]	@ (8004af8 <HAL_GPIO_Init+0x2e8>)
 800499c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800499e:	4a56      	ldr	r2, [pc, #344]	@ (8004af8 <HAL_GPIO_Init+0x2e8>)
 80049a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80049a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80049a6:	4b54      	ldr	r3, [pc, #336]	@ (8004af8 <HAL_GPIO_Init+0x2e8>)
 80049a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049b2:	4a52      	ldr	r2, [pc, #328]	@ (8004afc <HAL_GPIO_Init+0x2ec>)
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	089b      	lsrs	r3, r3, #2
 80049b8:	3302      	adds	r3, #2
 80049ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	220f      	movs	r2, #15
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	43db      	mvns	r3, r3
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	4013      	ands	r3, r2
 80049d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a49      	ldr	r2, [pc, #292]	@ (8004b00 <HAL_GPIO_Init+0x2f0>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d019      	beq.n	8004a12 <HAL_GPIO_Init+0x202>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a48      	ldr	r2, [pc, #288]	@ (8004b04 <HAL_GPIO_Init+0x2f4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d013      	beq.n	8004a0e <HAL_GPIO_Init+0x1fe>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a47      	ldr	r2, [pc, #284]	@ (8004b08 <HAL_GPIO_Init+0x2f8>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00d      	beq.n	8004a0a <HAL_GPIO_Init+0x1fa>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a46      	ldr	r2, [pc, #280]	@ (8004b0c <HAL_GPIO_Init+0x2fc>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d007      	beq.n	8004a06 <HAL_GPIO_Init+0x1f6>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a45      	ldr	r2, [pc, #276]	@ (8004b10 <HAL_GPIO_Init+0x300>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d101      	bne.n	8004a02 <HAL_GPIO_Init+0x1f2>
 80049fe:	2304      	movs	r3, #4
 8004a00:	e008      	b.n	8004a14 <HAL_GPIO_Init+0x204>
 8004a02:	2307      	movs	r3, #7
 8004a04:	e006      	b.n	8004a14 <HAL_GPIO_Init+0x204>
 8004a06:	2303      	movs	r3, #3
 8004a08:	e004      	b.n	8004a14 <HAL_GPIO_Init+0x204>
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	e002      	b.n	8004a14 <HAL_GPIO_Init+0x204>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e000      	b.n	8004a14 <HAL_GPIO_Init+0x204>
 8004a12:	2300      	movs	r3, #0
 8004a14:	69fa      	ldr	r2, [r7, #28]
 8004a16:	f002 0203 	and.w	r2, r2, #3
 8004a1a:	0092      	lsls	r2, r2, #2
 8004a1c:	4093      	lsls	r3, r2
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a24:	4935      	ldr	r1, [pc, #212]	@ (8004afc <HAL_GPIO_Init+0x2ec>)
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	089b      	lsrs	r3, r3, #2
 8004a2a:	3302      	adds	r3, #2
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a32:	4b38      	ldr	r3, [pc, #224]	@ (8004b14 <HAL_GPIO_Init+0x304>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	43db      	mvns	r3, r3
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a56:	4a2f      	ldr	r2, [pc, #188]	@ (8004b14 <HAL_GPIO_Init+0x304>)
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a5c:	4b2d      	ldr	r3, [pc, #180]	@ (8004b14 <HAL_GPIO_Init+0x304>)
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	43db      	mvns	r3, r3
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a80:	4a24      	ldr	r2, [pc, #144]	@ (8004b14 <HAL_GPIO_Init+0x304>)
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a86:	4b23      	ldr	r3, [pc, #140]	@ (8004b14 <HAL_GPIO_Init+0x304>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	43db      	mvns	r3, r3
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	4013      	ands	r3, r2
 8004a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004aaa:	4a1a      	ldr	r2, [pc, #104]	@ (8004b14 <HAL_GPIO_Init+0x304>)
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ab0:	4b18      	ldr	r3, [pc, #96]	@ (8004b14 <HAL_GPIO_Init+0x304>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	43db      	mvns	r3, r3
 8004aba:	69ba      	ldr	r2, [r7, #24]
 8004abc:	4013      	ands	r3, r2
 8004abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d003      	beq.n	8004ad4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ad4:	4a0f      	ldr	r2, [pc, #60]	@ (8004b14 <HAL_GPIO_Init+0x304>)
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	3301      	adds	r3, #1
 8004ade:	61fb      	str	r3, [r7, #28]
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	2b0f      	cmp	r3, #15
 8004ae4:	f67f aea2 	bls.w	800482c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ae8:	bf00      	nop
 8004aea:	bf00      	nop
 8004aec:	3724      	adds	r7, #36	@ 0x24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	40023800 	.word	0x40023800
 8004afc:	40013800 	.word	0x40013800
 8004b00:	40020000 	.word	0x40020000
 8004b04:	40020400 	.word	0x40020400
 8004b08:	40020800 	.word	0x40020800
 8004b0c:	40020c00 	.word	0x40020c00
 8004b10:	40021000 	.word	0x40021000
 8004b14:	40013c00 	.word	0x40013c00

08004b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	460b      	mov	r3, r1
 8004b22:	807b      	strh	r3, [r7, #2]
 8004b24:	4613      	mov	r3, r2
 8004b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b28:	787b      	ldrb	r3, [r7, #1]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b2e:	887a      	ldrh	r2, [r7, #2]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b34:	e003      	b.n	8004b3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b36:	887b      	ldrh	r3, [r7, #2]
 8004b38:	041a      	lsls	r2, r3, #16
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	619a      	str	r2, [r3, #24]
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
	...

08004b4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e12b      	b.n	8004db6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d106      	bne.n	8004b78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7fc fbe4 	bl	8001340 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2224      	movs	r2, #36	@ 0x24
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0201 	bic.w	r2, r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004bae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bb0:	f001 fc10 	bl	80063d4 <HAL_RCC_GetPCLK1Freq>
 8004bb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	4a81      	ldr	r2, [pc, #516]	@ (8004dc0 <HAL_I2C_Init+0x274>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d807      	bhi.n	8004bd0 <HAL_I2C_Init+0x84>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4a80      	ldr	r2, [pc, #512]	@ (8004dc4 <HAL_I2C_Init+0x278>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	bf94      	ite	ls
 8004bc8:	2301      	movls	r3, #1
 8004bca:	2300      	movhi	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	e006      	b.n	8004bde <HAL_I2C_Init+0x92>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4a7d      	ldr	r2, [pc, #500]	@ (8004dc8 <HAL_I2C_Init+0x27c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	bf94      	ite	ls
 8004bd8:	2301      	movls	r3, #1
 8004bda:	2300      	movhi	r3, #0
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e0e7      	b.n	8004db6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4a78      	ldr	r2, [pc, #480]	@ (8004dcc <HAL_I2C_Init+0x280>)
 8004bea:	fba2 2303 	umull	r2, r3, r2, r3
 8004bee:	0c9b      	lsrs	r3, r3, #18
 8004bf0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	4a6a      	ldr	r2, [pc, #424]	@ (8004dc0 <HAL_I2C_Init+0x274>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d802      	bhi.n	8004c20 <HAL_I2C_Init+0xd4>
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	e009      	b.n	8004c34 <HAL_I2C_Init+0xe8>
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004c26:	fb02 f303 	mul.w	r3, r2, r3
 8004c2a:	4a69      	ldr	r2, [pc, #420]	@ (8004dd0 <HAL_I2C_Init+0x284>)
 8004c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c30:	099b      	lsrs	r3, r3, #6
 8004c32:	3301      	adds	r3, #1
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	6812      	ldr	r2, [r2, #0]
 8004c38:	430b      	orrs	r3, r1
 8004c3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004c46:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	495c      	ldr	r1, [pc, #368]	@ (8004dc0 <HAL_I2C_Init+0x274>)
 8004c50:	428b      	cmp	r3, r1
 8004c52:	d819      	bhi.n	8004c88 <HAL_I2C_Init+0x13c>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	1e59      	subs	r1, r3, #1
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c62:	1c59      	adds	r1, r3, #1
 8004c64:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004c68:	400b      	ands	r3, r1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00a      	beq.n	8004c84 <HAL_I2C_Init+0x138>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	1e59      	subs	r1, r3, #1
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c82:	e051      	b.n	8004d28 <HAL_I2C_Init+0x1dc>
 8004c84:	2304      	movs	r3, #4
 8004c86:	e04f      	b.n	8004d28 <HAL_I2C_Init+0x1dc>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d111      	bne.n	8004cb4 <HAL_I2C_Init+0x168>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	1e58      	subs	r0, r3, #1
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6859      	ldr	r1, [r3, #4]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	440b      	add	r3, r1
 8004c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	bf0c      	ite	eq
 8004cac:	2301      	moveq	r3, #1
 8004cae:	2300      	movne	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	e012      	b.n	8004cda <HAL_I2C_Init+0x18e>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	1e58      	subs	r0, r3, #1
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6859      	ldr	r1, [r3, #4]
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	0099      	lsls	r1, r3, #2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cca:	3301      	adds	r3, #1
 8004ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	bf0c      	ite	eq
 8004cd4:	2301      	moveq	r3, #1
 8004cd6:	2300      	movne	r3, #0
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <HAL_I2C_Init+0x196>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e022      	b.n	8004d28 <HAL_I2C_Init+0x1dc>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10e      	bne.n	8004d08 <HAL_I2C_Init+0x1bc>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	1e58      	subs	r0, r3, #1
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6859      	ldr	r1, [r3, #4]
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	440b      	add	r3, r1
 8004cf8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d06:	e00f      	b.n	8004d28 <HAL_I2C_Init+0x1dc>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	1e58      	subs	r0, r3, #1
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6859      	ldr	r1, [r3, #4]
 8004d10:	460b      	mov	r3, r1
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	440b      	add	r3, r1
 8004d16:	0099      	lsls	r1, r3, #2
 8004d18:	440b      	add	r3, r1
 8004d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d1e:	3301      	adds	r3, #1
 8004d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d28:	6879      	ldr	r1, [r7, #4]
 8004d2a:	6809      	ldr	r1, [r1, #0]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	69da      	ldr	r2, [r3, #28]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	431a      	orrs	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004d56:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6911      	ldr	r1, [r2, #16]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	68d2      	ldr	r2, [r2, #12]
 8004d62:	4311      	orrs	r1, r2
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	6812      	ldr	r2, [r2, #0]
 8004d68:	430b      	orrs	r3, r1
 8004d6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	695a      	ldr	r2, [r3, #20]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0201 	orr.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2220      	movs	r2, #32
 8004da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	000186a0 	.word	0x000186a0
 8004dc4:	001e847f 	.word	0x001e847f
 8004dc8:	003d08ff 	.word	0x003d08ff
 8004dcc:	431bde83 	.word	0x431bde83
 8004dd0:	10624dd3 	.word	0x10624dd3

08004dd4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b088      	sub	sp, #32
 8004dd8:	af02      	add	r7, sp, #8
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	607a      	str	r2, [r7, #4]
 8004dde:	461a      	mov	r2, r3
 8004de0:	460b      	mov	r3, r1
 8004de2:	817b      	strh	r3, [r7, #10]
 8004de4:	4613      	mov	r3, r2
 8004de6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004de8:	f7fe ffce 	bl	8003d88 <HAL_GetTick>
 8004dec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b20      	cmp	r3, #32
 8004df8:	f040 80e0 	bne.w	8004fbc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	2319      	movs	r3, #25
 8004e02:	2201      	movs	r2, #1
 8004e04:	4970      	ldr	r1, [pc, #448]	@ (8004fc8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f000 fc7e 	bl	8005708 <I2C_WaitOnFlagUntilTimeout>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004e12:	2302      	movs	r3, #2
 8004e14:	e0d3      	b.n	8004fbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d101      	bne.n	8004e24 <HAL_I2C_Master_Transmit+0x50>
 8004e20:	2302      	movs	r3, #2
 8004e22:	e0cc      	b.n	8004fbe <HAL_I2C_Master_Transmit+0x1ea>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d007      	beq.n	8004e4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f042 0201 	orr.w	r2, r2, #1
 8004e48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2221      	movs	r2, #33	@ 0x21
 8004e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2210      	movs	r2, #16
 8004e66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	893a      	ldrh	r2, [r7, #8]
 8004e7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4a50      	ldr	r2, [pc, #320]	@ (8004fcc <HAL_I2C_Master_Transmit+0x1f8>)
 8004e8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e8c:	8979      	ldrh	r1, [r7, #10]
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	6a3a      	ldr	r2, [r7, #32]
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 fae8 	bl	8005468 <I2C_MasterRequestWrite>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e08d      	b.n	8004fbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	613b      	str	r3, [r7, #16]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	613b      	str	r3, [r7, #16]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	613b      	str	r3, [r7, #16]
 8004eb6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004eb8:	e066      	b.n	8004f88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	6a39      	ldr	r1, [r7, #32]
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f000 fd3c 	bl	800593c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00d      	beq.n	8004ee6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d107      	bne.n	8004ee2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ee0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e06b      	b.n	8004fbe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eea:	781a      	ldrb	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef6:	1c5a      	adds	r2, r3, #1
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	3b01      	subs	r3, #1
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d11b      	bne.n	8004f5c <HAL_I2C_Master_Transmit+0x188>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d017      	beq.n	8004f5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f30:	781a      	ldrb	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3c:	1c5a      	adds	r2, r3, #1
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f54:	3b01      	subs	r3, #1
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	6a39      	ldr	r1, [r7, #32]
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 fd33 	bl	80059cc <I2C_WaitOnBTFFlagUntilTimeout>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00d      	beq.n	8004f88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f70:	2b04      	cmp	r3, #4
 8004f72:	d107      	bne.n	8004f84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e01a      	b.n	8004fbe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d194      	bne.n	8004eba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	e000      	b.n	8004fbe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004fbc:	2302      	movs	r3, #2
  }
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	00100002 	.word	0x00100002
 8004fcc:	ffff0000 	.word	0xffff0000

08004fd0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08c      	sub	sp, #48	@ 0x30
 8004fd4:	af02      	add	r7, sp, #8
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	607a      	str	r2, [r7, #4]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	460b      	mov	r3, r1
 8004fde:	817b      	strh	r3, [r7, #10]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004fe4:	f7fe fed0 	bl	8003d88 <HAL_GetTick>
 8004fe8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b20      	cmp	r3, #32
 8004ff4:	f040 8217 	bne.w	8005426 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	2319      	movs	r3, #25
 8004ffe:	2201      	movs	r2, #1
 8005000:	497c      	ldr	r1, [pc, #496]	@ (80051f4 <HAL_I2C_Master_Receive+0x224>)
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f000 fb80 	bl	8005708 <I2C_WaitOnFlagUntilTimeout>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800500e:	2302      	movs	r3, #2
 8005010:	e20a      	b.n	8005428 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005018:	2b01      	cmp	r3, #1
 800501a:	d101      	bne.n	8005020 <HAL_I2C_Master_Receive+0x50>
 800501c:	2302      	movs	r3, #2
 800501e:	e203      	b.n	8005428 <HAL_I2C_Master_Receive+0x458>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b01      	cmp	r3, #1
 8005034:	d007      	beq.n	8005046 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f042 0201 	orr.w	r2, r2, #1
 8005044:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005054:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2222      	movs	r2, #34	@ 0x22
 800505a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2210      	movs	r2, #16
 8005062:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	893a      	ldrh	r2, [r7, #8]
 8005076:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800507c:	b29a      	uxth	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	4a5c      	ldr	r2, [pc, #368]	@ (80051f8 <HAL_I2C_Master_Receive+0x228>)
 8005086:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005088:	8979      	ldrh	r1, [r7, #10]
 800508a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f000 fa6c 	bl	800556c <I2C_MasterRequestRead>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d001      	beq.n	800509e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e1c4      	b.n	8005428 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d113      	bne.n	80050ce <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050a6:	2300      	movs	r3, #0
 80050a8:	623b      	str	r3, [r7, #32]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	623b      	str	r3, [r7, #32]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	623b      	str	r3, [r7, #32]
 80050ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	e198      	b.n	8005400 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d11b      	bne.n	800510e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050e6:	2300      	movs	r3, #0
 80050e8:	61fb      	str	r3, [r7, #28]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	61fb      	str	r3, [r7, #28]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	61fb      	str	r3, [r7, #28]
 80050fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	e178      	b.n	8005400 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005112:	2b02      	cmp	r3, #2
 8005114:	d11b      	bne.n	800514e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005124:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005134:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005136:	2300      	movs	r3, #0
 8005138:	61bb      	str	r3, [r7, #24]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	61bb      	str	r3, [r7, #24]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	61bb      	str	r3, [r7, #24]
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	e158      	b.n	8005400 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800515c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800515e:	2300      	movs	r3, #0
 8005160:	617b      	str	r3, [r7, #20]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	617b      	str	r3, [r7, #20]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	617b      	str	r3, [r7, #20]
 8005172:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005174:	e144      	b.n	8005400 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800517a:	2b03      	cmp	r3, #3
 800517c:	f200 80f1 	bhi.w	8005362 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005184:	2b01      	cmp	r3, #1
 8005186:	d123      	bne.n	80051d0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005188:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800518a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 fc65 	bl	8005a5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e145      	b.n	8005428 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	691a      	ldr	r2, [r3, #16]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051b8:	3b01      	subs	r3, #1
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	3b01      	subs	r3, #1
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80051ce:	e117      	b.n	8005400 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d14e      	bne.n	8005276 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051de:	2200      	movs	r2, #0
 80051e0:	4906      	ldr	r1, [pc, #24]	@ (80051fc <HAL_I2C_Master_Receive+0x22c>)
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 fa90 	bl	8005708 <I2C_WaitOnFlagUntilTimeout>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d008      	beq.n	8005200 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e11a      	b.n	8005428 <HAL_I2C_Master_Receive+0x458>
 80051f2:	bf00      	nop
 80051f4:	00100002 	.word	0x00100002
 80051f8:	ffff0000 	.word	0xffff0000
 80051fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800520e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691a      	ldr	r2, [r3, #16]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521a:	b2d2      	uxtb	r2, r2
 800521c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005222:	1c5a      	adds	r2, r3, #1
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800522c:	3b01      	subs	r3, #1
 800522e:	b29a      	uxth	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005238:	b29b      	uxth	r3, r3
 800523a:	3b01      	subs	r3, #1
 800523c:	b29a      	uxth	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	691a      	ldr	r2, [r3, #16]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524c:	b2d2      	uxtb	r2, r2
 800524e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800525e:	3b01      	subs	r3, #1
 8005260:	b29a      	uxth	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800526a:	b29b      	uxth	r3, r3
 800526c:	3b01      	subs	r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005274:	e0c4      	b.n	8005400 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527c:	2200      	movs	r2, #0
 800527e:	496c      	ldr	r1, [pc, #432]	@ (8005430 <HAL_I2C_Master_Receive+0x460>)
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f000 fa41 	bl	8005708 <I2C_WaitOnFlagUntilTimeout>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e0cb      	b.n	8005428 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800529e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	691a      	ldr	r2, [r3, #16]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b2:	1c5a      	adds	r2, r3, #1
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052bc:	3b01      	subs	r3, #1
 80052be:	b29a      	uxth	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d8:	2200      	movs	r2, #0
 80052da:	4955      	ldr	r1, [pc, #340]	@ (8005430 <HAL_I2C_Master_Receive+0x460>)
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f000 fa13 	bl	8005708 <I2C_WaitOnFlagUntilTimeout>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e09d      	b.n	8005428 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691a      	ldr	r2, [r3, #16]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530e:	1c5a      	adds	r2, r3, #1
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005318:	3b01      	subs	r3, #1
 800531a:	b29a      	uxth	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005324:	b29b      	uxth	r3, r3
 8005326:	3b01      	subs	r3, #1
 8005328:	b29a      	uxth	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	691a      	ldr	r2, [r3, #16]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005338:	b2d2      	uxtb	r2, r2
 800533a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005340:	1c5a      	adds	r2, r3, #1
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800534a:	3b01      	subs	r3, #1
 800534c:	b29a      	uxth	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005356:	b29b      	uxth	r3, r3
 8005358:	3b01      	subs	r3, #1
 800535a:	b29a      	uxth	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005360:	e04e      	b.n	8005400 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005364:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 fb78 	bl	8005a5c <I2C_WaitOnRXNEFlagUntilTimeout>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e058      	b.n	8005428 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	691a      	ldr	r2, [r3, #16]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005388:	1c5a      	adds	r2, r3, #1
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005392:	3b01      	subs	r3, #1
 8005394:	b29a      	uxth	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800539e:	b29b      	uxth	r3, r3
 80053a0:	3b01      	subs	r3, #1
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	f003 0304 	and.w	r3, r3, #4
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d124      	bne.n	8005400 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ba:	2b03      	cmp	r3, #3
 80053bc:	d107      	bne.n	80053ce <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053cc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	691a      	ldr	r2, [r3, #16]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d8:	b2d2      	uxtb	r2, r2
 80053da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e0:	1c5a      	adds	r2, r3, #1
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ea:	3b01      	subs	r3, #1
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	3b01      	subs	r3, #1
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005404:	2b00      	cmp	r3, #0
 8005406:	f47f aeb6 	bne.w	8005176 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2220      	movs	r2, #32
 800540e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005422:	2300      	movs	r3, #0
 8005424:	e000      	b.n	8005428 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005426:	2302      	movs	r3, #2
  }
}
 8005428:	4618      	mov	r0, r3
 800542a:	3728      	adds	r7, #40	@ 0x28
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	00010004 	.word	0x00010004

08005434 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005442:	b2db      	uxtb	r3, r3
}
 8005444:	4618      	mov	r0, r3
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800545c:	4618      	mov	r0, r3
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b088      	sub	sp, #32
 800546c:	af02      	add	r7, sp, #8
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	607a      	str	r2, [r7, #4]
 8005472:	603b      	str	r3, [r7, #0]
 8005474:	460b      	mov	r3, r1
 8005476:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800547c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	2b08      	cmp	r3, #8
 8005482:	d006      	beq.n	8005492 <I2C_MasterRequestWrite+0x2a>
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d003      	beq.n	8005492 <I2C_MasterRequestWrite+0x2a>
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005490:	d108      	bne.n	80054a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054a0:	601a      	str	r2, [r3, #0]
 80054a2:	e00b      	b.n	80054bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a8:	2b12      	cmp	r3, #18
 80054aa:	d107      	bne.n	80054bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 f91d 	bl	8005708 <I2C_WaitOnFlagUntilTimeout>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00d      	beq.n	80054f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054e2:	d103      	bne.n	80054ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e035      	b.n	800555c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054f8:	d108      	bne.n	800550c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054fa:	897b      	ldrh	r3, [r7, #10]
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	461a      	mov	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005508:	611a      	str	r2, [r3, #16]
 800550a:	e01b      	b.n	8005544 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800550c:	897b      	ldrh	r3, [r7, #10]
 800550e:	11db      	asrs	r3, r3, #7
 8005510:	b2db      	uxtb	r3, r3
 8005512:	f003 0306 	and.w	r3, r3, #6
 8005516:	b2db      	uxtb	r3, r3
 8005518:	f063 030f 	orn	r3, r3, #15
 800551c:	b2da      	uxtb	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	490e      	ldr	r1, [pc, #56]	@ (8005564 <I2C_MasterRequestWrite+0xfc>)
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f000 f966 	bl	80057fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e010      	b.n	800555c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800553a:	897b      	ldrh	r3, [r7, #10]
 800553c:	b2da      	uxtb	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	4907      	ldr	r1, [pc, #28]	@ (8005568 <I2C_MasterRequestWrite+0x100>)
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f000 f956 	bl	80057fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e000      	b.n	800555c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	00010008 	.word	0x00010008
 8005568:	00010002 	.word	0x00010002

0800556c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b088      	sub	sp, #32
 8005570:	af02      	add	r7, sp, #8
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	607a      	str	r2, [r7, #4]
 8005576:	603b      	str	r3, [r7, #0]
 8005578:	460b      	mov	r3, r1
 800557a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005580:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005590:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	2b08      	cmp	r3, #8
 8005596:	d006      	beq.n	80055a6 <I2C_MasterRequestRead+0x3a>
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d003      	beq.n	80055a6 <I2C_MasterRequestRead+0x3a>
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80055a4:	d108      	bne.n	80055b8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	e00b      	b.n	80055d0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055bc:	2b11      	cmp	r3, #17
 80055be:	d107      	bne.n	80055d0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	9300      	str	r3, [sp, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f000 f893 	bl	8005708 <I2C_WaitOnFlagUntilTimeout>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00d      	beq.n	8005604 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055f6:	d103      	bne.n	8005600 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e079      	b.n	80056f8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800560c:	d108      	bne.n	8005620 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800560e:	897b      	ldrh	r3, [r7, #10]
 8005610:	b2db      	uxtb	r3, r3
 8005612:	f043 0301 	orr.w	r3, r3, #1
 8005616:	b2da      	uxtb	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	611a      	str	r2, [r3, #16]
 800561e:	e05f      	b.n	80056e0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005620:	897b      	ldrh	r3, [r7, #10]
 8005622:	11db      	asrs	r3, r3, #7
 8005624:	b2db      	uxtb	r3, r3
 8005626:	f003 0306 	and.w	r3, r3, #6
 800562a:	b2db      	uxtb	r3, r3
 800562c:	f063 030f 	orn	r3, r3, #15
 8005630:	b2da      	uxtb	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	4930      	ldr	r1, [pc, #192]	@ (8005700 <I2C_MasterRequestRead+0x194>)
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f000 f8dc 	bl	80057fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e054      	b.n	80056f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800564e:	897b      	ldrh	r3, [r7, #10]
 8005650:	b2da      	uxtb	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	4929      	ldr	r1, [pc, #164]	@ (8005704 <I2C_MasterRequestRead+0x198>)
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 f8cc 	bl	80057fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e044      	b.n	80056f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800566e:	2300      	movs	r3, #0
 8005670:	613b      	str	r3, [r7, #16]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	613b      	str	r3, [r7, #16]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	613b      	str	r3, [r7, #16]
 8005682:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005692:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 f831 	bl	8005708 <I2C_WaitOnFlagUntilTimeout>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00d      	beq.n	80056c8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056ba:	d103      	bne.n	80056c4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056c2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e017      	b.n	80056f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80056c8:	897b      	ldrh	r3, [r7, #10]
 80056ca:	11db      	asrs	r3, r3, #7
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	f003 0306 	and.w	r3, r3, #6
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	f063 030e 	orn	r3, r3, #14
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	4907      	ldr	r1, [pc, #28]	@ (8005704 <I2C_MasterRequestRead+0x198>)
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f000 f888 	bl	80057fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e000      	b.n	80056f8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3718      	adds	r7, #24
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	00010008 	.word	0x00010008
 8005704:	00010002 	.word	0x00010002

08005708 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	603b      	str	r3, [r7, #0]
 8005714:	4613      	mov	r3, r2
 8005716:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005718:	e048      	b.n	80057ac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005720:	d044      	beq.n	80057ac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005722:	f7fe fb31 	bl	8003d88 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	429a      	cmp	r2, r3
 8005730:	d302      	bcc.n	8005738 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d139      	bne.n	80057ac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	0c1b      	lsrs	r3, r3, #16
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b01      	cmp	r3, #1
 8005740:	d10d      	bne.n	800575e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	43da      	mvns	r2, r3
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	4013      	ands	r3, r2
 800574e:	b29b      	uxth	r3, r3
 8005750:	2b00      	cmp	r3, #0
 8005752:	bf0c      	ite	eq
 8005754:	2301      	moveq	r3, #1
 8005756:	2300      	movne	r3, #0
 8005758:	b2db      	uxtb	r3, r3
 800575a:	461a      	mov	r2, r3
 800575c:	e00c      	b.n	8005778 <I2C_WaitOnFlagUntilTimeout+0x70>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	43da      	mvns	r2, r3
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	4013      	ands	r3, r2
 800576a:	b29b      	uxth	r3, r3
 800576c:	2b00      	cmp	r3, #0
 800576e:	bf0c      	ite	eq
 8005770:	2301      	moveq	r3, #1
 8005772:	2300      	movne	r3, #0
 8005774:	b2db      	uxtb	r3, r3
 8005776:	461a      	mov	r2, r3
 8005778:	79fb      	ldrb	r3, [r7, #7]
 800577a:	429a      	cmp	r2, r3
 800577c:	d116      	bne.n	80057ac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2220      	movs	r2, #32
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005798:	f043 0220 	orr.w	r2, r3, #32
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e023      	b.n	80057f4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	0c1b      	lsrs	r3, r3, #16
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d10d      	bne.n	80057d2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	43da      	mvns	r2, r3
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	4013      	ands	r3, r2
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	bf0c      	ite	eq
 80057c8:	2301      	moveq	r3, #1
 80057ca:	2300      	movne	r3, #0
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	461a      	mov	r2, r3
 80057d0:	e00c      	b.n	80057ec <I2C_WaitOnFlagUntilTimeout+0xe4>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	43da      	mvns	r2, r3
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	4013      	ands	r3, r2
 80057de:	b29b      	uxth	r3, r3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	bf0c      	ite	eq
 80057e4:	2301      	moveq	r3, #1
 80057e6:	2300      	movne	r3, #0
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	461a      	mov	r2, r3
 80057ec:	79fb      	ldrb	r3, [r7, #7]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d093      	beq.n	800571a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
 8005808:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800580a:	e071      	b.n	80058f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005816:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800581a:	d123      	bne.n	8005864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800582a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005834:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2220      	movs	r2, #32
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005850:	f043 0204 	orr.w	r2, r3, #4
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e067      	b.n	8005934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800586a:	d041      	beq.n	80058f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800586c:	f7fe fa8c 	bl	8003d88 <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	429a      	cmp	r2, r3
 800587a:	d302      	bcc.n	8005882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d136      	bne.n	80058f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	0c1b      	lsrs	r3, r3, #16
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b01      	cmp	r3, #1
 800588a:	d10c      	bne.n	80058a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	43da      	mvns	r2, r3
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	4013      	ands	r3, r2
 8005898:	b29b      	uxth	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	bf14      	ite	ne
 800589e:	2301      	movne	r3, #1
 80058a0:	2300      	moveq	r3, #0
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	e00b      	b.n	80058be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	43da      	mvns	r2, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	4013      	ands	r3, r2
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	bf14      	ite	ne
 80058b8:	2301      	movne	r3, #1
 80058ba:	2300      	moveq	r3, #0
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d016      	beq.n	80058f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2220      	movs	r2, #32
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058dc:	f043 0220 	orr.w	r2, r3, #32
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e021      	b.n	8005934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	0c1b      	lsrs	r3, r3, #16
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d10c      	bne.n	8005914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	43da      	mvns	r2, r3
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	4013      	ands	r3, r2
 8005906:	b29b      	uxth	r3, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	bf14      	ite	ne
 800590c:	2301      	movne	r3, #1
 800590e:	2300      	moveq	r3, #0
 8005910:	b2db      	uxtb	r3, r3
 8005912:	e00b      	b.n	800592c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	43da      	mvns	r2, r3
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	4013      	ands	r3, r2
 8005920:	b29b      	uxth	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	bf14      	ite	ne
 8005926:	2301      	movne	r3, #1
 8005928:	2300      	moveq	r3, #0
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	f47f af6d 	bne.w	800580c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005948:	e034      	b.n	80059b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f000 f8e3 	bl	8005b16 <I2C_IsAcknowledgeFailed>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e034      	b.n	80059c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005960:	d028      	beq.n	80059b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005962:	f7fe fa11 	bl	8003d88 <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	429a      	cmp	r2, r3
 8005970:	d302      	bcc.n	8005978 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d11d      	bne.n	80059b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005982:	2b80      	cmp	r3, #128	@ 0x80
 8005984:	d016      	beq.n	80059b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2220      	movs	r2, #32
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a0:	f043 0220 	orr.w	r2, r3, #32
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e007      	b.n	80059c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059be:	2b80      	cmp	r3, #128	@ 0x80
 80059c0:	d1c3      	bne.n	800594a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059d8:	e034      	b.n	8005a44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f000 f89b 	bl	8005b16 <I2C_IsAcknowledgeFailed>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e034      	b.n	8005a54 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059f0:	d028      	beq.n	8005a44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059f2:	f7fe f9c9 	bl	8003d88 <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d302      	bcc.n	8005a08 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d11d      	bne.n	8005a44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	f003 0304 	and.w	r3, r3, #4
 8005a12:	2b04      	cmp	r3, #4
 8005a14:	d016      	beq.n	8005a44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a30:	f043 0220 	orr.w	r2, r3, #32
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e007      	b.n	8005a54 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	f003 0304 	and.w	r3, r3, #4
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	d1c3      	bne.n	80059da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a68:	e049      	b.n	8005afe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	f003 0310 	and.w	r3, r3, #16
 8005a74:	2b10      	cmp	r3, #16
 8005a76:	d119      	bne.n	8005aac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f06f 0210 	mvn.w	r2, #16
 8005a80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e030      	b.n	8005b0e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aac:	f7fe f96c 	bl	8003d88 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d302      	bcc.n	8005ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d11d      	bne.n	8005afe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	695b      	ldr	r3, [r3, #20]
 8005ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005acc:	2b40      	cmp	r3, #64	@ 0x40
 8005ace:	d016      	beq.n	8005afe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2220      	movs	r2, #32
 8005ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aea:	f043 0220 	orr.w	r2, r3, #32
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e007      	b.n	8005b0e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b08:	2b40      	cmp	r3, #64	@ 0x40
 8005b0a:	d1ae      	bne.n	8005a6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b083      	sub	sp, #12
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b2c:	d11b      	bne.n	8005b66 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005b36:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2220      	movs	r2, #32
 8005b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b52:	f043 0204 	orr.w	r2, r3, #4
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e000      	b.n	8005b68 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e267      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d075      	beq.n	8005c7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005b92:	4b88      	ldr	r3, [pc, #544]	@ (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f003 030c 	and.w	r3, r3, #12
 8005b9a:	2b04      	cmp	r3, #4
 8005b9c:	d00c      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b9e:	4b85      	ldr	r3, [pc, #532]	@ (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005ba6:	2b08      	cmp	r3, #8
 8005ba8:	d112      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005baa:	4b82      	ldr	r3, [pc, #520]	@ (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bb6:	d10b      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bb8:	4b7e      	ldr	r3, [pc, #504]	@ (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d05b      	beq.n	8005c7c <HAL_RCC_OscConfig+0x108>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d157      	bne.n	8005c7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e242      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bd8:	d106      	bne.n	8005be8 <HAL_RCC_OscConfig+0x74>
 8005bda:	4b76      	ldr	r3, [pc, #472]	@ (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a75      	ldr	r2, [pc, #468]	@ (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005be0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005be4:	6013      	str	r3, [r2, #0]
 8005be6:	e01d      	b.n	8005c24 <HAL_RCC_OscConfig+0xb0>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005bf0:	d10c      	bne.n	8005c0c <HAL_RCC_OscConfig+0x98>
 8005bf2:	4b70      	ldr	r3, [pc, #448]	@ (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a6f      	ldr	r2, [pc, #444]	@ (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005bf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005bfc:	6013      	str	r3, [r2, #0]
 8005bfe:	4b6d      	ldr	r3, [pc, #436]	@ (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a6c      	ldr	r2, [pc, #432]	@ (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c08:	6013      	str	r3, [r2, #0]
 8005c0a:	e00b      	b.n	8005c24 <HAL_RCC_OscConfig+0xb0>
 8005c0c:	4b69      	ldr	r3, [pc, #420]	@ (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a68      	ldr	r2, [pc, #416]	@ (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005c12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c16:	6013      	str	r3, [r2, #0]
 8005c18:	4b66      	ldr	r3, [pc, #408]	@ (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a65      	ldr	r2, [pc, #404]	@ (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005c1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d013      	beq.n	8005c54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c2c:	f7fe f8ac 	bl	8003d88 <HAL_GetTick>
 8005c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c32:	e008      	b.n	8005c46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c34:	f7fe f8a8 	bl	8003d88 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b64      	cmp	r3, #100	@ 0x64
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e207      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c46:	4b5b      	ldr	r3, [pc, #364]	@ (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d0f0      	beq.n	8005c34 <HAL_RCC_OscConfig+0xc0>
 8005c52:	e014      	b.n	8005c7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c54:	f7fe f898 	bl	8003d88 <HAL_GetTick>
 8005c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c5a:	e008      	b.n	8005c6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c5c:	f7fe f894 	bl	8003d88 <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	2b64      	cmp	r3, #100	@ 0x64
 8005c68:	d901      	bls.n	8005c6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e1f3      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c6e:	4b51      	ldr	r3, [pc, #324]	@ (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1f0      	bne.n	8005c5c <HAL_RCC_OscConfig+0xe8>
 8005c7a:	e000      	b.n	8005c7e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d063      	beq.n	8005d52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005c8a:	4b4a      	ldr	r3, [pc, #296]	@ (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f003 030c 	and.w	r3, r3, #12
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00b      	beq.n	8005cae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c96:	4b47      	ldr	r3, [pc, #284]	@ (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005c9e:	2b08      	cmp	r3, #8
 8005ca0:	d11c      	bne.n	8005cdc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ca2:	4b44      	ldr	r3, [pc, #272]	@ (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d116      	bne.n	8005cdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cae:	4b41      	ldr	r3, [pc, #260]	@ (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d005      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x152>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d001      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e1c7      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cc6:	4b3b      	ldr	r3, [pc, #236]	@ (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	4937      	ldr	r1, [pc, #220]	@ (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cda:	e03a      	b.n	8005d52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d020      	beq.n	8005d26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ce4:	4b34      	ldr	r3, [pc, #208]	@ (8005db8 <HAL_RCC_OscConfig+0x244>)
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cea:	f7fe f84d 	bl	8003d88 <HAL_GetTick>
 8005cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cf0:	e008      	b.n	8005d04 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cf2:	f7fe f849 	bl	8003d88 <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d901      	bls.n	8005d04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e1a8      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d04:	4b2b      	ldr	r3, [pc, #172]	@ (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0302 	and.w	r3, r3, #2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d0f0      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d10:	4b28      	ldr	r3, [pc, #160]	@ (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	00db      	lsls	r3, r3, #3
 8005d1e:	4925      	ldr	r1, [pc, #148]	@ (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	600b      	str	r3, [r1, #0]
 8005d24:	e015      	b.n	8005d52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d26:	4b24      	ldr	r3, [pc, #144]	@ (8005db8 <HAL_RCC_OscConfig+0x244>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d2c:	f7fe f82c 	bl	8003d88 <HAL_GetTick>
 8005d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d32:	e008      	b.n	8005d46 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d34:	f7fe f828 	bl	8003d88 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d901      	bls.n	8005d46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e187      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d46:	4b1b      	ldr	r3, [pc, #108]	@ (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1f0      	bne.n	8005d34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0308 	and.w	r3, r3, #8
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d036      	beq.n	8005dcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d016      	beq.n	8005d94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d66:	4b15      	ldr	r3, [pc, #84]	@ (8005dbc <HAL_RCC_OscConfig+0x248>)
 8005d68:	2201      	movs	r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d6c:	f7fe f80c 	bl	8003d88 <HAL_GetTick>
 8005d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d72:	e008      	b.n	8005d86 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d74:	f7fe f808 	bl	8003d88 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e167      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d86:	4b0b      	ldr	r3, [pc, #44]	@ (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005d88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d0f0      	beq.n	8005d74 <HAL_RCC_OscConfig+0x200>
 8005d92:	e01b      	b.n	8005dcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d94:	4b09      	ldr	r3, [pc, #36]	@ (8005dbc <HAL_RCC_OscConfig+0x248>)
 8005d96:	2200      	movs	r2, #0
 8005d98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d9a:	f7fd fff5 	bl	8003d88 <HAL_GetTick>
 8005d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005da0:	e00e      	b.n	8005dc0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005da2:	f7fd fff1 	bl	8003d88 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d907      	bls.n	8005dc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e150      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
 8005db4:	40023800 	.word	0x40023800
 8005db8:	42470000 	.word	0x42470000
 8005dbc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dc0:	4b88      	ldr	r3, [pc, #544]	@ (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005dc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1ea      	bne.n	8005da2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0304 	and.w	r3, r3, #4
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 8097 	beq.w	8005f08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dde:	4b81      	ldr	r3, [pc, #516]	@ (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10f      	bne.n	8005e0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dea:	2300      	movs	r3, #0
 8005dec:	60bb      	str	r3, [r7, #8]
 8005dee:	4b7d      	ldr	r3, [pc, #500]	@ (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df2:	4a7c      	ldr	r2, [pc, #496]	@ (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005df4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005dfa:	4b7a      	ldr	r3, [pc, #488]	@ (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e02:	60bb      	str	r3, [r7, #8]
 8005e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e06:	2301      	movs	r3, #1
 8005e08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e0a:	4b77      	ldr	r3, [pc, #476]	@ (8005fe8 <HAL_RCC_OscConfig+0x474>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d118      	bne.n	8005e48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e16:	4b74      	ldr	r3, [pc, #464]	@ (8005fe8 <HAL_RCC_OscConfig+0x474>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a73      	ldr	r2, [pc, #460]	@ (8005fe8 <HAL_RCC_OscConfig+0x474>)
 8005e1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e22:	f7fd ffb1 	bl	8003d88 <HAL_GetTick>
 8005e26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e28:	e008      	b.n	8005e3c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e2a:	f7fd ffad 	bl	8003d88 <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d901      	bls.n	8005e3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e10c      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e3c:	4b6a      	ldr	r3, [pc, #424]	@ (8005fe8 <HAL_RCC_OscConfig+0x474>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d0f0      	beq.n	8005e2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d106      	bne.n	8005e5e <HAL_RCC_OscConfig+0x2ea>
 8005e50:	4b64      	ldr	r3, [pc, #400]	@ (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e54:	4a63      	ldr	r2, [pc, #396]	@ (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005e56:	f043 0301 	orr.w	r3, r3, #1
 8005e5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e5c:	e01c      	b.n	8005e98 <HAL_RCC_OscConfig+0x324>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	2b05      	cmp	r3, #5
 8005e64:	d10c      	bne.n	8005e80 <HAL_RCC_OscConfig+0x30c>
 8005e66:	4b5f      	ldr	r3, [pc, #380]	@ (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e6a:	4a5e      	ldr	r2, [pc, #376]	@ (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005e6c:	f043 0304 	orr.w	r3, r3, #4
 8005e70:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e72:	4b5c      	ldr	r3, [pc, #368]	@ (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e76:	4a5b      	ldr	r2, [pc, #364]	@ (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005e78:	f043 0301 	orr.w	r3, r3, #1
 8005e7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e7e:	e00b      	b.n	8005e98 <HAL_RCC_OscConfig+0x324>
 8005e80:	4b58      	ldr	r3, [pc, #352]	@ (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e84:	4a57      	ldr	r2, [pc, #348]	@ (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005e86:	f023 0301 	bic.w	r3, r3, #1
 8005e8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e8c:	4b55      	ldr	r3, [pc, #340]	@ (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e90:	4a54      	ldr	r2, [pc, #336]	@ (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005e92:	f023 0304 	bic.w	r3, r3, #4
 8005e96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d015      	beq.n	8005ecc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ea0:	f7fd ff72 	bl	8003d88 <HAL_GetTick>
 8005ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ea6:	e00a      	b.n	8005ebe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ea8:	f7fd ff6e 	bl	8003d88 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d901      	bls.n	8005ebe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e0cb      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ebe:	4b49      	ldr	r3, [pc, #292]	@ (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d0ee      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x334>
 8005eca:	e014      	b.n	8005ef6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ecc:	f7fd ff5c 	bl	8003d88 <HAL_GetTick>
 8005ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ed2:	e00a      	b.n	8005eea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ed4:	f7fd ff58 	bl	8003d88 <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e0b5      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005eea:	4b3e      	ldr	r3, [pc, #248]	@ (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1ee      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ef6:	7dfb      	ldrb	r3, [r7, #23]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d105      	bne.n	8005f08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005efc:	4b39      	ldr	r3, [pc, #228]	@ (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f00:	4a38      	ldr	r2, [pc, #224]	@ (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005f02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 80a1 	beq.w	8006054 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f12:	4b34      	ldr	r3, [pc, #208]	@ (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f003 030c 	and.w	r3, r3, #12
 8005f1a:	2b08      	cmp	r3, #8
 8005f1c:	d05c      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d141      	bne.n	8005faa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f26:	4b31      	ldr	r3, [pc, #196]	@ (8005fec <HAL_RCC_OscConfig+0x478>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f2c:	f7fd ff2c 	bl	8003d88 <HAL_GetTick>
 8005f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f32:	e008      	b.n	8005f46 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f34:	f7fd ff28 	bl	8003d88 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d901      	bls.n	8005f46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e087      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f46:	4b27      	ldr	r3, [pc, #156]	@ (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1f0      	bne.n	8005f34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	69da      	ldr	r2, [r3, #28]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	431a      	orrs	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f60:	019b      	lsls	r3, r3, #6
 8005f62:	431a      	orrs	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f68:	085b      	lsrs	r3, r3, #1
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	041b      	lsls	r3, r3, #16
 8005f6e:	431a      	orrs	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f74:	061b      	lsls	r3, r3, #24
 8005f76:	491b      	ldr	r1, [pc, #108]	@ (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8005fec <HAL_RCC_OscConfig+0x478>)
 8005f7e:	2201      	movs	r2, #1
 8005f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f82:	f7fd ff01 	bl	8003d88 <HAL_GetTick>
 8005f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f88:	e008      	b.n	8005f9c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f8a:	f7fd fefd 	bl	8003d88 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d901      	bls.n	8005f9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e05c      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f9c:	4b11      	ldr	r3, [pc, #68]	@ (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d0f0      	beq.n	8005f8a <HAL_RCC_OscConfig+0x416>
 8005fa8:	e054      	b.n	8006054 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005faa:	4b10      	ldr	r3, [pc, #64]	@ (8005fec <HAL_RCC_OscConfig+0x478>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fb0:	f7fd feea 	bl	8003d88 <HAL_GetTick>
 8005fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fb6:	e008      	b.n	8005fca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fb8:	f7fd fee6 	bl	8003d88 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e045      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fca:	4b06      	ldr	r3, [pc, #24]	@ (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1f0      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x444>
 8005fd6:	e03d      	b.n	8006054 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d107      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e038      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
 8005fe4:	40023800 	.word	0x40023800
 8005fe8:	40007000 	.word	0x40007000
 8005fec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8006060 <HAL_RCC_OscConfig+0x4ec>)
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d028      	beq.n	8006050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006008:	429a      	cmp	r2, r3
 800600a:	d121      	bne.n	8006050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006016:	429a      	cmp	r2, r3
 8006018:	d11a      	bne.n	8006050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006020:	4013      	ands	r3, r2
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006026:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006028:	4293      	cmp	r3, r2
 800602a:	d111      	bne.n	8006050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006036:	085b      	lsrs	r3, r3, #1
 8006038:	3b01      	subs	r3, #1
 800603a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800603c:	429a      	cmp	r2, r3
 800603e:	d107      	bne.n	8006050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800604a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800604c:	429a      	cmp	r2, r3
 800604e:	d001      	beq.n	8006054 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e000      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3718      	adds	r7, #24
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	40023800 	.word	0x40023800

08006064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e0cc      	b.n	8006212 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006078:	4b68      	ldr	r3, [pc, #416]	@ (800621c <HAL_RCC_ClockConfig+0x1b8>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0307 	and.w	r3, r3, #7
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	429a      	cmp	r2, r3
 8006084:	d90c      	bls.n	80060a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006086:	4b65      	ldr	r3, [pc, #404]	@ (800621c <HAL_RCC_ClockConfig+0x1b8>)
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	b2d2      	uxtb	r2, r2
 800608c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800608e:	4b63      	ldr	r3, [pc, #396]	@ (800621c <HAL_RCC_ClockConfig+0x1b8>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	429a      	cmp	r2, r3
 800609a:	d001      	beq.n	80060a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e0b8      	b.n	8006212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0302 	and.w	r3, r3, #2
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d020      	beq.n	80060ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0304 	and.w	r3, r3, #4
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d005      	beq.n	80060c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060b8:	4b59      	ldr	r3, [pc, #356]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	4a58      	ldr	r2, [pc, #352]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80060be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80060c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0308 	and.w	r3, r3, #8
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d005      	beq.n	80060dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060d0:	4b53      	ldr	r3, [pc, #332]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	4a52      	ldr	r2, [pc, #328]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80060d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80060da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060dc:	4b50      	ldr	r3, [pc, #320]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	494d      	ldr	r1, [pc, #308]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d044      	beq.n	8006184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d107      	bne.n	8006112 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006102:	4b47      	ldr	r3, [pc, #284]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d119      	bne.n	8006142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e07f      	b.n	8006212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	2b02      	cmp	r3, #2
 8006118:	d003      	beq.n	8006122 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800611e:	2b03      	cmp	r3, #3
 8006120:	d107      	bne.n	8006132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006122:	4b3f      	ldr	r3, [pc, #252]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d109      	bne.n	8006142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e06f      	b.n	8006212 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006132:	4b3b      	ldr	r3, [pc, #236]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e067      	b.n	8006212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006142:	4b37      	ldr	r3, [pc, #220]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f023 0203 	bic.w	r2, r3, #3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	4934      	ldr	r1, [pc, #208]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 8006150:	4313      	orrs	r3, r2
 8006152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006154:	f7fd fe18 	bl	8003d88 <HAL_GetTick>
 8006158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800615a:	e00a      	b.n	8006172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800615c:	f7fd fe14 	bl	8003d88 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	f241 3288 	movw	r2, #5000	@ 0x1388
 800616a:	4293      	cmp	r3, r2
 800616c:	d901      	bls.n	8006172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e04f      	b.n	8006212 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006172:	4b2b      	ldr	r3, [pc, #172]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f003 020c 	and.w	r2, r3, #12
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	429a      	cmp	r2, r3
 8006182:	d1eb      	bne.n	800615c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006184:	4b25      	ldr	r3, [pc, #148]	@ (800621c <HAL_RCC_ClockConfig+0x1b8>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0307 	and.w	r3, r3, #7
 800618c:	683a      	ldr	r2, [r7, #0]
 800618e:	429a      	cmp	r2, r3
 8006190:	d20c      	bcs.n	80061ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006192:	4b22      	ldr	r3, [pc, #136]	@ (800621c <HAL_RCC_ClockConfig+0x1b8>)
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	b2d2      	uxtb	r2, r2
 8006198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800619a:	4b20      	ldr	r3, [pc, #128]	@ (800621c <HAL_RCC_ClockConfig+0x1b8>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0307 	and.w	r3, r3, #7
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d001      	beq.n	80061ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e032      	b.n	8006212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0304 	and.w	r3, r3, #4
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d008      	beq.n	80061ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061b8:	4b19      	ldr	r3, [pc, #100]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	4916      	ldr	r1, [pc, #88]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0308 	and.w	r3, r3, #8
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d009      	beq.n	80061ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061d6:	4b12      	ldr	r3, [pc, #72]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	00db      	lsls	r3, r3, #3
 80061e4:	490e      	ldr	r1, [pc, #56]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80061ea:	f000 f821 	bl	8006230 <HAL_RCC_GetSysClockFreq>
 80061ee:	4602      	mov	r2, r0
 80061f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	091b      	lsrs	r3, r3, #4
 80061f6:	f003 030f 	and.w	r3, r3, #15
 80061fa:	490a      	ldr	r1, [pc, #40]	@ (8006224 <HAL_RCC_ClockConfig+0x1c0>)
 80061fc:	5ccb      	ldrb	r3, [r1, r3]
 80061fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006202:	4a09      	ldr	r2, [pc, #36]	@ (8006228 <HAL_RCC_ClockConfig+0x1c4>)
 8006204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006206:	4b09      	ldr	r3, [pc, #36]	@ (800622c <HAL_RCC_ClockConfig+0x1c8>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4618      	mov	r0, r3
 800620c:	f7fd fd78 	bl	8003d00 <HAL_InitTick>

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	40023c00 	.word	0x40023c00
 8006220:	40023800 	.word	0x40023800
 8006224:	0800971c 	.word	0x0800971c
 8006228:	2000000c 	.word	0x2000000c
 800622c:	20000010 	.word	0x20000010

08006230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006234:	b090      	sub	sp, #64	@ 0x40
 8006236:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006238:	2300      	movs	r3, #0
 800623a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800623c:	2300      	movs	r3, #0
 800623e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006240:	2300      	movs	r3, #0
 8006242:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006244:	2300      	movs	r3, #0
 8006246:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006248:	4b59      	ldr	r3, [pc, #356]	@ (80063b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f003 030c 	and.w	r3, r3, #12
 8006250:	2b08      	cmp	r3, #8
 8006252:	d00d      	beq.n	8006270 <HAL_RCC_GetSysClockFreq+0x40>
 8006254:	2b08      	cmp	r3, #8
 8006256:	f200 80a1 	bhi.w	800639c <HAL_RCC_GetSysClockFreq+0x16c>
 800625a:	2b00      	cmp	r3, #0
 800625c:	d002      	beq.n	8006264 <HAL_RCC_GetSysClockFreq+0x34>
 800625e:	2b04      	cmp	r3, #4
 8006260:	d003      	beq.n	800626a <HAL_RCC_GetSysClockFreq+0x3a>
 8006262:	e09b      	b.n	800639c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006264:	4b53      	ldr	r3, [pc, #332]	@ (80063b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006266:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006268:	e09b      	b.n	80063a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800626a:	4b53      	ldr	r3, [pc, #332]	@ (80063b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800626c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800626e:	e098      	b.n	80063a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006270:	4b4f      	ldr	r3, [pc, #316]	@ (80063b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006278:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800627a:	4b4d      	ldr	r3, [pc, #308]	@ (80063b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d028      	beq.n	80062d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006286:	4b4a      	ldr	r3, [pc, #296]	@ (80063b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	099b      	lsrs	r3, r3, #6
 800628c:	2200      	movs	r2, #0
 800628e:	623b      	str	r3, [r7, #32]
 8006290:	627a      	str	r2, [r7, #36]	@ 0x24
 8006292:	6a3b      	ldr	r3, [r7, #32]
 8006294:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006298:	2100      	movs	r1, #0
 800629a:	4b47      	ldr	r3, [pc, #284]	@ (80063b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800629c:	fb03 f201 	mul.w	r2, r3, r1
 80062a0:	2300      	movs	r3, #0
 80062a2:	fb00 f303 	mul.w	r3, r0, r3
 80062a6:	4413      	add	r3, r2
 80062a8:	4a43      	ldr	r2, [pc, #268]	@ (80063b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80062aa:	fba0 1202 	umull	r1, r2, r0, r2
 80062ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062b0:	460a      	mov	r2, r1
 80062b2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80062b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062b6:	4413      	add	r3, r2
 80062b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062bc:	2200      	movs	r2, #0
 80062be:	61bb      	str	r3, [r7, #24]
 80062c0:	61fa      	str	r2, [r7, #28]
 80062c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80062ca:	f7fa fbff 	bl	8000acc <__aeabi_uldivmod>
 80062ce:	4602      	mov	r2, r0
 80062d0:	460b      	mov	r3, r1
 80062d2:	4613      	mov	r3, r2
 80062d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062d6:	e053      	b.n	8006380 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062d8:	4b35      	ldr	r3, [pc, #212]	@ (80063b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	099b      	lsrs	r3, r3, #6
 80062de:	2200      	movs	r2, #0
 80062e0:	613b      	str	r3, [r7, #16]
 80062e2:	617a      	str	r2, [r7, #20]
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80062ea:	f04f 0b00 	mov.w	fp, #0
 80062ee:	4652      	mov	r2, sl
 80062f0:	465b      	mov	r3, fp
 80062f2:	f04f 0000 	mov.w	r0, #0
 80062f6:	f04f 0100 	mov.w	r1, #0
 80062fa:	0159      	lsls	r1, r3, #5
 80062fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006300:	0150      	lsls	r0, r2, #5
 8006302:	4602      	mov	r2, r0
 8006304:	460b      	mov	r3, r1
 8006306:	ebb2 080a 	subs.w	r8, r2, sl
 800630a:	eb63 090b 	sbc.w	r9, r3, fp
 800630e:	f04f 0200 	mov.w	r2, #0
 8006312:	f04f 0300 	mov.w	r3, #0
 8006316:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800631a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800631e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006322:	ebb2 0408 	subs.w	r4, r2, r8
 8006326:	eb63 0509 	sbc.w	r5, r3, r9
 800632a:	f04f 0200 	mov.w	r2, #0
 800632e:	f04f 0300 	mov.w	r3, #0
 8006332:	00eb      	lsls	r3, r5, #3
 8006334:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006338:	00e2      	lsls	r2, r4, #3
 800633a:	4614      	mov	r4, r2
 800633c:	461d      	mov	r5, r3
 800633e:	eb14 030a 	adds.w	r3, r4, sl
 8006342:	603b      	str	r3, [r7, #0]
 8006344:	eb45 030b 	adc.w	r3, r5, fp
 8006348:	607b      	str	r3, [r7, #4]
 800634a:	f04f 0200 	mov.w	r2, #0
 800634e:	f04f 0300 	mov.w	r3, #0
 8006352:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006356:	4629      	mov	r1, r5
 8006358:	028b      	lsls	r3, r1, #10
 800635a:	4621      	mov	r1, r4
 800635c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006360:	4621      	mov	r1, r4
 8006362:	028a      	lsls	r2, r1, #10
 8006364:	4610      	mov	r0, r2
 8006366:	4619      	mov	r1, r3
 8006368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800636a:	2200      	movs	r2, #0
 800636c:	60bb      	str	r3, [r7, #8]
 800636e:	60fa      	str	r2, [r7, #12]
 8006370:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006374:	f7fa fbaa 	bl	8000acc <__aeabi_uldivmod>
 8006378:	4602      	mov	r2, r0
 800637a:	460b      	mov	r3, r1
 800637c:	4613      	mov	r3, r2
 800637e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006380:	4b0b      	ldr	r3, [pc, #44]	@ (80063b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	0c1b      	lsrs	r3, r3, #16
 8006386:	f003 0303 	and.w	r3, r3, #3
 800638a:	3301      	adds	r3, #1
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006390:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006394:	fbb2 f3f3 	udiv	r3, r2, r3
 8006398:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800639a:	e002      	b.n	80063a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800639c:	4b05      	ldr	r3, [pc, #20]	@ (80063b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800639e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80063a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3740      	adds	r7, #64	@ 0x40
 80063a8:	46bd      	mov	sp, r7
 80063aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063ae:	bf00      	nop
 80063b0:	40023800 	.word	0x40023800
 80063b4:	00f42400 	.word	0x00f42400
 80063b8:	017d7840 	.word	0x017d7840

080063bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063bc:	b480      	push	{r7}
 80063be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063c0:	4b03      	ldr	r3, [pc, #12]	@ (80063d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80063c2:	681b      	ldr	r3, [r3, #0]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	2000000c 	.word	0x2000000c

080063d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80063d8:	f7ff fff0 	bl	80063bc <HAL_RCC_GetHCLKFreq>
 80063dc:	4602      	mov	r2, r0
 80063de:	4b05      	ldr	r3, [pc, #20]	@ (80063f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	0a9b      	lsrs	r3, r3, #10
 80063e4:	f003 0307 	and.w	r3, r3, #7
 80063e8:	4903      	ldr	r1, [pc, #12]	@ (80063f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063ea:	5ccb      	ldrb	r3, [r1, r3]
 80063ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	40023800 	.word	0x40023800
 80063f8:	0800972c 	.word	0x0800972c

080063fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006400:	f7ff ffdc 	bl	80063bc <HAL_RCC_GetHCLKFreq>
 8006404:	4602      	mov	r2, r0
 8006406:	4b05      	ldr	r3, [pc, #20]	@ (800641c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	0b5b      	lsrs	r3, r3, #13
 800640c:	f003 0307 	and.w	r3, r3, #7
 8006410:	4903      	ldr	r1, [pc, #12]	@ (8006420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006412:	5ccb      	ldrb	r3, [r1, r3]
 8006414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006418:	4618      	mov	r0, r3
 800641a:	bd80      	pop	{r7, pc}
 800641c:	40023800 	.word	0x40023800
 8006420:	0800972c 	.word	0x0800972c

08006424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d101      	bne.n	8006436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e041      	b.n	80064ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d106      	bne.n	8006450 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7fd fa72 	bl	8003934 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2202      	movs	r2, #2
 8006454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	3304      	adds	r3, #4
 8006460:	4619      	mov	r1, r3
 8006462:	4610      	mov	r0, r2
 8006464:	f000 fba4 	bl	8006bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
	...

080064c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d001      	beq.n	80064dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e044      	b.n	8006566 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2202      	movs	r2, #2
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68da      	ldr	r2, [r3, #12]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f042 0201 	orr.w	r2, r2, #1
 80064f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a1e      	ldr	r2, [pc, #120]	@ (8006574 <HAL_TIM_Base_Start_IT+0xb0>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d018      	beq.n	8006530 <HAL_TIM_Base_Start_IT+0x6c>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006506:	d013      	beq.n	8006530 <HAL_TIM_Base_Start_IT+0x6c>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a1a      	ldr	r2, [pc, #104]	@ (8006578 <HAL_TIM_Base_Start_IT+0xb4>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d00e      	beq.n	8006530 <HAL_TIM_Base_Start_IT+0x6c>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a19      	ldr	r2, [pc, #100]	@ (800657c <HAL_TIM_Base_Start_IT+0xb8>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d009      	beq.n	8006530 <HAL_TIM_Base_Start_IT+0x6c>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a17      	ldr	r2, [pc, #92]	@ (8006580 <HAL_TIM_Base_Start_IT+0xbc>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d004      	beq.n	8006530 <HAL_TIM_Base_Start_IT+0x6c>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a16      	ldr	r2, [pc, #88]	@ (8006584 <HAL_TIM_Base_Start_IT+0xc0>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d111      	bne.n	8006554 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f003 0307 	and.w	r3, r3, #7
 800653a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b06      	cmp	r3, #6
 8006540:	d010      	beq.n	8006564 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f042 0201 	orr.w	r2, r2, #1
 8006550:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006552:	e007      	b.n	8006564 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f042 0201 	orr.w	r2, r2, #1
 8006562:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	40010000 	.word	0x40010000
 8006578:	40000400 	.word	0x40000400
 800657c:	40000800 	.word	0x40000800
 8006580:	40000c00 	.word	0x40000c00
 8006584:	40014000 	.word	0x40014000

08006588 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d101      	bne.n	800659c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e097      	b.n	80066cc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d106      	bne.n	80065b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f7fd f9ff 	bl	80039b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2202      	movs	r2, #2
 80065ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	6812      	ldr	r2, [r2, #0]
 80065c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065cc:	f023 0307 	bic.w	r3, r3, #7
 80065d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	3304      	adds	r3, #4
 80065da:	4619      	mov	r1, r3
 80065dc:	4610      	mov	r0, r2
 80065de:	f000 fae7 	bl	8006bb0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6a1b      	ldr	r3, [r3, #32]
 80065f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	4313      	orrs	r3, r2
 8006602:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800660a:	f023 0303 	bic.w	r3, r3, #3
 800660e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	689a      	ldr	r2, [r3, #8]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	021b      	lsls	r3, r3, #8
 800661a:	4313      	orrs	r3, r2
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	4313      	orrs	r3, r2
 8006620:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006628:	f023 030c 	bic.w	r3, r3, #12
 800662c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006634:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006638:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	68da      	ldr	r2, [r3, #12]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	021b      	lsls	r3, r3, #8
 8006644:	4313      	orrs	r3, r2
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	4313      	orrs	r3, r2
 800664a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	011a      	lsls	r2, r3, #4
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	031b      	lsls	r3, r3, #12
 8006658:	4313      	orrs	r3, r2
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	4313      	orrs	r3, r2
 800665e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006666:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800666e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685a      	ldr	r2, [r3, #4]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	011b      	lsls	r3, r3, #4
 800667a:	4313      	orrs	r3, r2
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	4313      	orrs	r3, r2
 8006680:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3718      	adds	r7, #24
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80066e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80066ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80066f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80066fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d110      	bne.n	8006726 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006704:	7bfb      	ldrb	r3, [r7, #15]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d102      	bne.n	8006710 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800670a:	7b7b      	ldrb	r3, [r7, #13]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d001      	beq.n	8006714 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e069      	b.n	80067e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2202      	movs	r2, #2
 8006720:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006724:	e031      	b.n	800678a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	2b04      	cmp	r3, #4
 800672a:	d110      	bne.n	800674e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800672c:	7bbb      	ldrb	r3, [r7, #14]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d102      	bne.n	8006738 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006732:	7b3b      	ldrb	r3, [r7, #12]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d001      	beq.n	800673c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e055      	b.n	80067e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2202      	movs	r2, #2
 8006740:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2202      	movs	r2, #2
 8006748:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800674c:	e01d      	b.n	800678a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800674e:	7bfb      	ldrb	r3, [r7, #15]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d108      	bne.n	8006766 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006754:	7bbb      	ldrb	r3, [r7, #14]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d105      	bne.n	8006766 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800675a:	7b7b      	ldrb	r3, [r7, #13]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d102      	bne.n	8006766 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006760:	7b3b      	ldrb	r3, [r7, #12]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d001      	beq.n	800676a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e03e      	b.n	80067e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2202      	movs	r2, #2
 800676e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2202      	movs	r2, #2
 8006776:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2202      	movs	r2, #2
 800677e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2202      	movs	r2, #2
 8006786:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d003      	beq.n	8006798 <HAL_TIM_Encoder_Start+0xc4>
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	2b04      	cmp	r3, #4
 8006794:	d008      	beq.n	80067a8 <HAL_TIM_Encoder_Start+0xd4>
 8006796:	e00f      	b.n	80067b8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2201      	movs	r2, #1
 800679e:	2100      	movs	r1, #0
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 fb2b 	bl	8006dfc <TIM_CCxChannelCmd>
      break;
 80067a6:	e016      	b.n	80067d6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2201      	movs	r2, #1
 80067ae:	2104      	movs	r1, #4
 80067b0:	4618      	mov	r0, r3
 80067b2:	f000 fb23 	bl	8006dfc <TIM_CCxChannelCmd>
      break;
 80067b6:	e00e      	b.n	80067d6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2201      	movs	r2, #1
 80067be:	2100      	movs	r1, #0
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 fb1b 	bl	8006dfc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2201      	movs	r2, #1
 80067cc:	2104      	movs	r1, #4
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 fb14 	bl	8006dfc <TIM_CCxChannelCmd>
      break;
 80067d4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f042 0201 	orr.w	r2, r2, #1
 80067e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d020      	beq.n	8006854 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	2b00      	cmp	r3, #0
 800681a:	d01b      	beq.n	8006854 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f06f 0202 	mvn.w	r2, #2
 8006824:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	f003 0303 	and.w	r3, r3, #3
 8006836:	2b00      	cmp	r3, #0
 8006838:	d003      	beq.n	8006842 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f999 	bl	8006b72 <HAL_TIM_IC_CaptureCallback>
 8006840:	e005      	b.n	800684e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f98b 	bl	8006b5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f99c 	bl	8006b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	f003 0304 	and.w	r3, r3, #4
 800685a:	2b00      	cmp	r3, #0
 800685c:	d020      	beq.n	80068a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f003 0304 	and.w	r3, r3, #4
 8006864:	2b00      	cmp	r3, #0
 8006866:	d01b      	beq.n	80068a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f06f 0204 	mvn.w	r2, #4
 8006870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2202      	movs	r2, #2
 8006876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f973 	bl	8006b72 <HAL_TIM_IC_CaptureCallback>
 800688c:	e005      	b.n	800689a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f965 	bl	8006b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f976 	bl	8006b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	f003 0308 	and.w	r3, r3, #8
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d020      	beq.n	80068ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f003 0308 	and.w	r3, r3, #8
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d01b      	beq.n	80068ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f06f 0208 	mvn.w	r2, #8
 80068bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2204      	movs	r2, #4
 80068c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	69db      	ldr	r3, [r3, #28]
 80068ca:	f003 0303 	and.w	r3, r3, #3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d003      	beq.n	80068da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f94d 	bl	8006b72 <HAL_TIM_IC_CaptureCallback>
 80068d8:	e005      	b.n	80068e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 f93f 	bl	8006b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 f950 	bl	8006b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	f003 0310 	and.w	r3, r3, #16
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d020      	beq.n	8006938 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f003 0310 	and.w	r3, r3, #16
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d01b      	beq.n	8006938 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f06f 0210 	mvn.w	r2, #16
 8006908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2208      	movs	r2, #8
 800690e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f927 	bl	8006b72 <HAL_TIM_IC_CaptureCallback>
 8006924:	e005      	b.n	8006932 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f919 	bl	8006b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f92a 	bl	8006b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00c      	beq.n	800695c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f003 0301 	and.w	r3, r3, #1
 8006948:	2b00      	cmp	r3, #0
 800694a:	d007      	beq.n	800695c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f06f 0201 	mvn.w	r2, #1
 8006954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7fa ff5a 	bl	8001810 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00c      	beq.n	8006980 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800696c:	2b00      	cmp	r3, #0
 800696e:	d007      	beq.n	8006980 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fadc 	bl	8006f38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00c      	beq.n	80069a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006990:	2b00      	cmp	r3, #0
 8006992:	d007      	beq.n	80069a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800699c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f8fb 	bl	8006b9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	f003 0320 	and.w	r3, r3, #32
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00c      	beq.n	80069c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f003 0320 	and.w	r3, r3, #32
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d007      	beq.n	80069c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f06f 0220 	mvn.w	r2, #32
 80069c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 faae 	bl	8006f24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069c8:	bf00      	nop
 80069ca:	3710      	adds	r7, #16
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069da:	2300      	movs	r3, #0
 80069dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d101      	bne.n	80069ec <HAL_TIM_ConfigClockSource+0x1c>
 80069e8:	2302      	movs	r3, #2
 80069ea:	e0b4      	b.n	8006b56 <HAL_TIM_ConfigClockSource+0x186>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2202      	movs	r2, #2
 80069f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006a0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a24:	d03e      	beq.n	8006aa4 <HAL_TIM_ConfigClockSource+0xd4>
 8006a26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a2a:	f200 8087 	bhi.w	8006b3c <HAL_TIM_ConfigClockSource+0x16c>
 8006a2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a32:	f000 8086 	beq.w	8006b42 <HAL_TIM_ConfigClockSource+0x172>
 8006a36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a3a:	d87f      	bhi.n	8006b3c <HAL_TIM_ConfigClockSource+0x16c>
 8006a3c:	2b70      	cmp	r3, #112	@ 0x70
 8006a3e:	d01a      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0xa6>
 8006a40:	2b70      	cmp	r3, #112	@ 0x70
 8006a42:	d87b      	bhi.n	8006b3c <HAL_TIM_ConfigClockSource+0x16c>
 8006a44:	2b60      	cmp	r3, #96	@ 0x60
 8006a46:	d050      	beq.n	8006aea <HAL_TIM_ConfigClockSource+0x11a>
 8006a48:	2b60      	cmp	r3, #96	@ 0x60
 8006a4a:	d877      	bhi.n	8006b3c <HAL_TIM_ConfigClockSource+0x16c>
 8006a4c:	2b50      	cmp	r3, #80	@ 0x50
 8006a4e:	d03c      	beq.n	8006aca <HAL_TIM_ConfigClockSource+0xfa>
 8006a50:	2b50      	cmp	r3, #80	@ 0x50
 8006a52:	d873      	bhi.n	8006b3c <HAL_TIM_ConfigClockSource+0x16c>
 8006a54:	2b40      	cmp	r3, #64	@ 0x40
 8006a56:	d058      	beq.n	8006b0a <HAL_TIM_ConfigClockSource+0x13a>
 8006a58:	2b40      	cmp	r3, #64	@ 0x40
 8006a5a:	d86f      	bhi.n	8006b3c <HAL_TIM_ConfigClockSource+0x16c>
 8006a5c:	2b30      	cmp	r3, #48	@ 0x30
 8006a5e:	d064      	beq.n	8006b2a <HAL_TIM_ConfigClockSource+0x15a>
 8006a60:	2b30      	cmp	r3, #48	@ 0x30
 8006a62:	d86b      	bhi.n	8006b3c <HAL_TIM_ConfigClockSource+0x16c>
 8006a64:	2b20      	cmp	r3, #32
 8006a66:	d060      	beq.n	8006b2a <HAL_TIM_ConfigClockSource+0x15a>
 8006a68:	2b20      	cmp	r3, #32
 8006a6a:	d867      	bhi.n	8006b3c <HAL_TIM_ConfigClockSource+0x16c>
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d05c      	beq.n	8006b2a <HAL_TIM_ConfigClockSource+0x15a>
 8006a70:	2b10      	cmp	r3, #16
 8006a72:	d05a      	beq.n	8006b2a <HAL_TIM_ConfigClockSource+0x15a>
 8006a74:	e062      	b.n	8006b3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a86:	f000 f999 	bl	8006dbc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006a98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	609a      	str	r2, [r3, #8]
      break;
 8006aa2:	e04f      	b.n	8006b44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ab4:	f000 f982 	bl	8006dbc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	689a      	ldr	r2, [r3, #8]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ac6:	609a      	str	r2, [r3, #8]
      break;
 8006ac8:	e03c      	b.n	8006b44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	f000 f8f6 	bl	8006cc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2150      	movs	r1, #80	@ 0x50
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 f94f 	bl	8006d86 <TIM_ITRx_SetConfig>
      break;
 8006ae8:	e02c      	b.n	8006b44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006af6:	461a      	mov	r2, r3
 8006af8:	f000 f915 	bl	8006d26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2160      	movs	r1, #96	@ 0x60
 8006b02:	4618      	mov	r0, r3
 8006b04:	f000 f93f 	bl	8006d86 <TIM_ITRx_SetConfig>
      break;
 8006b08:	e01c      	b.n	8006b44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b16:	461a      	mov	r2, r3
 8006b18:	f000 f8d6 	bl	8006cc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2140      	movs	r1, #64	@ 0x40
 8006b22:	4618      	mov	r0, r3
 8006b24:	f000 f92f 	bl	8006d86 <TIM_ITRx_SetConfig>
      break;
 8006b28:	e00c      	b.n	8006b44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4619      	mov	r1, r3
 8006b34:	4610      	mov	r0, r2
 8006b36:	f000 f926 	bl	8006d86 <TIM_ITRx_SetConfig>
      break;
 8006b3a:	e003      	b.n	8006b44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b40:	e000      	b.n	8006b44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b083      	sub	sp, #12
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b66:	bf00      	nop
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b083      	sub	sp, #12
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b7a:	bf00      	nop
 8006b7c:	370c      	adds	r7, #12
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b86:	b480      	push	{r7}
 8006b88:	b083      	sub	sp, #12
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b8e:	bf00      	nop
 8006b90:	370c      	adds	r7, #12
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b083      	sub	sp, #12
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ba2:	bf00      	nop
 8006ba4:	370c      	adds	r7, #12
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
	...

08006bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a3a      	ldr	r2, [pc, #232]	@ (8006cac <TIM_Base_SetConfig+0xfc>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d00f      	beq.n	8006be8 <TIM_Base_SetConfig+0x38>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bce:	d00b      	beq.n	8006be8 <TIM_Base_SetConfig+0x38>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a37      	ldr	r2, [pc, #220]	@ (8006cb0 <TIM_Base_SetConfig+0x100>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d007      	beq.n	8006be8 <TIM_Base_SetConfig+0x38>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a36      	ldr	r2, [pc, #216]	@ (8006cb4 <TIM_Base_SetConfig+0x104>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d003      	beq.n	8006be8 <TIM_Base_SetConfig+0x38>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a35      	ldr	r2, [pc, #212]	@ (8006cb8 <TIM_Base_SetConfig+0x108>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d108      	bne.n	8006bfa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a2b      	ldr	r2, [pc, #172]	@ (8006cac <TIM_Base_SetConfig+0xfc>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d01b      	beq.n	8006c3a <TIM_Base_SetConfig+0x8a>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c08:	d017      	beq.n	8006c3a <TIM_Base_SetConfig+0x8a>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a28      	ldr	r2, [pc, #160]	@ (8006cb0 <TIM_Base_SetConfig+0x100>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d013      	beq.n	8006c3a <TIM_Base_SetConfig+0x8a>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a27      	ldr	r2, [pc, #156]	@ (8006cb4 <TIM_Base_SetConfig+0x104>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d00f      	beq.n	8006c3a <TIM_Base_SetConfig+0x8a>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a26      	ldr	r2, [pc, #152]	@ (8006cb8 <TIM_Base_SetConfig+0x108>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d00b      	beq.n	8006c3a <TIM_Base_SetConfig+0x8a>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a25      	ldr	r2, [pc, #148]	@ (8006cbc <TIM_Base_SetConfig+0x10c>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d007      	beq.n	8006c3a <TIM_Base_SetConfig+0x8a>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a24      	ldr	r2, [pc, #144]	@ (8006cc0 <TIM_Base_SetConfig+0x110>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d003      	beq.n	8006c3a <TIM_Base_SetConfig+0x8a>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a23      	ldr	r2, [pc, #140]	@ (8006cc4 <TIM_Base_SetConfig+0x114>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d108      	bne.n	8006c4c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	689a      	ldr	r2, [r3, #8]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a0e      	ldr	r2, [pc, #56]	@ (8006cac <TIM_Base_SetConfig+0xfc>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d103      	bne.n	8006c80 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	691a      	ldr	r2, [r3, #16]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	f003 0301 	and.w	r3, r3, #1
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d105      	bne.n	8006c9e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	f023 0201 	bic.w	r2, r3, #1
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	611a      	str	r2, [r3, #16]
  }
}
 8006c9e:	bf00      	nop
 8006ca0:	3714      	adds	r7, #20
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	40010000 	.word	0x40010000
 8006cb0:	40000400 	.word	0x40000400
 8006cb4:	40000800 	.word	0x40000800
 8006cb8:	40000c00 	.word	0x40000c00
 8006cbc:	40014000 	.word	0x40014000
 8006cc0:	40014400 	.word	0x40014400
 8006cc4:	40014800 	.word	0x40014800

08006cc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b087      	sub	sp, #28
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6a1b      	ldr	r3, [r3, #32]
 8006cd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6a1b      	ldr	r3, [r3, #32]
 8006cde:	f023 0201 	bic.w	r2, r3, #1
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006cf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	011b      	lsls	r3, r3, #4
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f023 030a 	bic.w	r3, r3, #10
 8006d04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	621a      	str	r2, [r3, #32]
}
 8006d1a:	bf00      	nop
 8006d1c:	371c      	adds	r7, #28
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b087      	sub	sp, #28
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	60f8      	str	r0, [r7, #12]
 8006d2e:	60b9      	str	r1, [r7, #8]
 8006d30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6a1b      	ldr	r3, [r3, #32]
 8006d36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6a1b      	ldr	r3, [r3, #32]
 8006d3c:	f023 0210 	bic.w	r2, r3, #16
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	031b      	lsls	r3, r3, #12
 8006d56:	693a      	ldr	r2, [r7, #16]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006d62:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	011b      	lsls	r3, r3, #4
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	621a      	str	r2, [r3, #32]
}
 8006d7a:	bf00      	nop
 8006d7c:	371c      	adds	r7, #28
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b085      	sub	sp, #20
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
 8006d8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d9e:	683a      	ldr	r2, [r7, #0]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	f043 0307 	orr.w	r3, r3, #7
 8006da8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	609a      	str	r2, [r3, #8]
}
 8006db0:	bf00      	nop
 8006db2:	3714      	adds	r7, #20
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b087      	sub	sp, #28
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
 8006dc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006dd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	021a      	lsls	r2, r3, #8
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	431a      	orrs	r2, r3
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	697a      	ldr	r2, [r7, #20]
 8006dee:	609a      	str	r2, [r3, #8]
}
 8006df0:	bf00      	nop
 8006df2:	371c      	adds	r7, #28
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b087      	sub	sp, #28
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	f003 031f 	and.w	r3, r3, #31
 8006e0e:	2201      	movs	r2, #1
 8006e10:	fa02 f303 	lsl.w	r3, r2, r3
 8006e14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6a1a      	ldr	r2, [r3, #32]
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	43db      	mvns	r3, r3
 8006e1e:	401a      	ands	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6a1a      	ldr	r2, [r3, #32]
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	f003 031f 	and.w	r3, r3, #31
 8006e2e:	6879      	ldr	r1, [r7, #4]
 8006e30:	fa01 f303 	lsl.w	r3, r1, r3
 8006e34:	431a      	orrs	r2, r3
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	621a      	str	r2, [r3, #32]
}
 8006e3a:	bf00      	nop
 8006e3c:	371c      	adds	r7, #28
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
	...

08006e48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d101      	bne.n	8006e60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	e050      	b.n	8006f02 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a1c      	ldr	r2, [pc, #112]	@ (8006f10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d018      	beq.n	8006ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006eac:	d013      	beq.n	8006ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a18      	ldr	r2, [pc, #96]	@ (8006f14 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d00e      	beq.n	8006ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a16      	ldr	r2, [pc, #88]	@ (8006f18 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d009      	beq.n	8006ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a15      	ldr	r2, [pc, #84]	@ (8006f1c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d004      	beq.n	8006ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a13      	ldr	r2, [pc, #76]	@ (8006f20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d10c      	bne.n	8006ef0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006edc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68ba      	ldr	r2, [r7, #8]
 8006eee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	40010000 	.word	0x40010000
 8006f14:	40000400 	.word	0x40000400
 8006f18:	40000800 	.word	0x40000800
 8006f1c:	40000c00 	.word	0x40000c00
 8006f20:	40014000 	.word	0x40014000

08006f24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f40:	bf00      	nop
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d101      	bne.n	8006f5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e042      	b.n	8006fe4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d106      	bne.n	8006f78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7fc fdc2 	bl	8003afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2224      	movs	r2, #36	@ 0x24
 8006f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68da      	ldr	r2, [r3, #12]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 ff37 	bl	8007e04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	691a      	ldr	r2, [r3, #16]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006fa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	695a      	ldr	r2, [r3, #20]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006fb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68da      	ldr	r2, [r3, #12]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006fc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2220      	movs	r2, #32
 8006fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b08c      	sub	sp, #48	@ 0x30
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b20      	cmp	r3, #32
 8007004:	d156      	bne.n	80070b4 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d002      	beq.n	8007012 <HAL_UART_Transmit_DMA+0x26>
 800700c:	88fb      	ldrh	r3, [r7, #6]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e04f      	b.n	80070b6 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	88fa      	ldrh	r2, [r7, #6]
 8007020:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	88fa      	ldrh	r2, [r7, #6]
 8007026:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2221      	movs	r2, #33	@ 0x21
 8007032:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800703a:	4a21      	ldr	r2, [pc, #132]	@ (80070c0 <HAL_UART_Transmit_DMA+0xd4>)
 800703c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007042:	4a20      	ldr	r2, [pc, #128]	@ (80070c4 <HAL_UART_Transmit_DMA+0xd8>)
 8007044:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800704a:	4a1f      	ldr	r2, [pc, #124]	@ (80070c8 <HAL_UART_Transmit_DMA+0xdc>)
 800704c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007052:	2200      	movs	r2, #0
 8007054:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007056:	f107 0308 	add.w	r3, r7, #8
 800705a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007062:	6819      	ldr	r1, [r3, #0]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	3304      	adds	r3, #4
 800706a:	461a      	mov	r2, r3
 800706c:	88fb      	ldrh	r3, [r7, #6]
 800706e:	f7fd f87b 	bl	8004168 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800707a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	3314      	adds	r3, #20
 8007082:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	e853 3f00 	ldrex	r3, [r3]
 800708a:	617b      	str	r3, [r7, #20]
   return(result);
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007092:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	3314      	adds	r3, #20
 800709a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800709c:	627a      	str	r2, [r7, #36]	@ 0x24
 800709e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a0:	6a39      	ldr	r1, [r7, #32]
 80070a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070a4:	e841 2300 	strex	r3, r2, [r1]
 80070a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d1e5      	bne.n	800707c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80070b0:	2300      	movs	r3, #0
 80070b2:	e000      	b.n	80070b6 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80070b4:	2302      	movs	r3, #2
  }
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3730      	adds	r7, #48	@ 0x30
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	08007691 	.word	0x08007691
 80070c4:	0800772b 	.word	0x0800772b
 80070c8:	080078af 	.word	0x080078af

080070cc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	4613      	mov	r3, r2
 80070d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b20      	cmp	r3, #32
 80070e4:	d112      	bne.n	800710c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d002      	beq.n	80070f2 <HAL_UART_Receive_DMA+0x26>
 80070ec:	88fb      	ldrh	r3, [r7, #6]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d101      	bne.n	80070f6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e00b      	b.n	800710e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80070fc:	88fb      	ldrh	r3, [r7, #6]
 80070fe:	461a      	mov	r2, r3
 8007100:	68b9      	ldr	r1, [r7, #8]
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f000 fc1e 	bl	8007944 <UART_Start_Receive_DMA>
 8007108:	4603      	mov	r3, r0
 800710a:	e000      	b.n	800710e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800710c:	2302      	movs	r3, #2
  }
}
 800710e:	4618      	mov	r0, r3
 8007110:	3710      	adds	r7, #16
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
	...

08007118 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b0ba      	sub	sp, #232	@ 0xe8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800713e:	2300      	movs	r3, #0
 8007140:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007144:	2300      	movs	r3, #0
 8007146:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800714a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800714e:	f003 030f 	and.w	r3, r3, #15
 8007152:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007156:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10f      	bne.n	800717e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800715e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007162:	f003 0320 	and.w	r3, r3, #32
 8007166:	2b00      	cmp	r3, #0
 8007168:	d009      	beq.n	800717e <HAL_UART_IRQHandler+0x66>
 800716a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800716e:	f003 0320 	and.w	r3, r3, #32
 8007172:	2b00      	cmp	r3, #0
 8007174:	d003      	beq.n	800717e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fd85 	bl	8007c86 <UART_Receive_IT>
      return;
 800717c:	e25b      	b.n	8007636 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800717e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007182:	2b00      	cmp	r3, #0
 8007184:	f000 80de 	beq.w	8007344 <HAL_UART_IRQHandler+0x22c>
 8007188:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800718c:	f003 0301 	and.w	r3, r3, #1
 8007190:	2b00      	cmp	r3, #0
 8007192:	d106      	bne.n	80071a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007198:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800719c:	2b00      	cmp	r3, #0
 800719e:	f000 80d1 	beq.w	8007344 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80071a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00b      	beq.n	80071c6 <HAL_UART_IRQHandler+0xae>
 80071ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d005      	beq.n	80071c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071be:	f043 0201 	orr.w	r2, r3, #1
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071ca:	f003 0304 	and.w	r3, r3, #4
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00b      	beq.n	80071ea <HAL_UART_IRQHandler+0xd2>
 80071d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071d6:	f003 0301 	and.w	r3, r3, #1
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d005      	beq.n	80071ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071e2:	f043 0202 	orr.w	r2, r3, #2
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071ee:	f003 0302 	and.w	r3, r3, #2
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00b      	beq.n	800720e <HAL_UART_IRQHandler+0xf6>
 80071f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071fa:	f003 0301 	and.w	r3, r3, #1
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d005      	beq.n	800720e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007206:	f043 0204 	orr.w	r2, r3, #4
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800720e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007212:	f003 0308 	and.w	r3, r3, #8
 8007216:	2b00      	cmp	r3, #0
 8007218:	d011      	beq.n	800723e <HAL_UART_IRQHandler+0x126>
 800721a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800721e:	f003 0320 	and.w	r3, r3, #32
 8007222:	2b00      	cmp	r3, #0
 8007224:	d105      	bne.n	8007232 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007226:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	2b00      	cmp	r3, #0
 8007230:	d005      	beq.n	800723e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007236:	f043 0208 	orr.w	r2, r3, #8
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007242:	2b00      	cmp	r3, #0
 8007244:	f000 81f2 	beq.w	800762c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800724c:	f003 0320 	and.w	r3, r3, #32
 8007250:	2b00      	cmp	r3, #0
 8007252:	d008      	beq.n	8007266 <HAL_UART_IRQHandler+0x14e>
 8007254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007258:	f003 0320 	and.w	r3, r3, #32
 800725c:	2b00      	cmp	r3, #0
 800725e:	d002      	beq.n	8007266 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 fd10 	bl	8007c86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	695b      	ldr	r3, [r3, #20]
 800726c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007270:	2b40      	cmp	r3, #64	@ 0x40
 8007272:	bf0c      	ite	eq
 8007274:	2301      	moveq	r3, #1
 8007276:	2300      	movne	r3, #0
 8007278:	b2db      	uxtb	r3, r3
 800727a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007282:	f003 0308 	and.w	r3, r3, #8
 8007286:	2b00      	cmp	r3, #0
 8007288:	d103      	bne.n	8007292 <HAL_UART_IRQHandler+0x17a>
 800728a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800728e:	2b00      	cmp	r3, #0
 8007290:	d04f      	beq.n	8007332 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 fc18 	bl	8007ac8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072a2:	2b40      	cmp	r3, #64	@ 0x40
 80072a4:	d141      	bne.n	800732a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	3314      	adds	r3, #20
 80072ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80072b4:	e853 3f00 	ldrex	r3, [r3]
 80072b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80072bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80072c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	3314      	adds	r3, #20
 80072ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80072d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80072d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80072de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80072e2:	e841 2300 	strex	r3, r2, [r1]
 80072e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80072ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1d9      	bne.n	80072a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d013      	beq.n	8007322 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072fe:	4a7e      	ldr	r2, [pc, #504]	@ (80074f8 <HAL_UART_IRQHandler+0x3e0>)
 8007300:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007306:	4618      	mov	r0, r3
 8007308:	f7fc fff6 	bl	80042f8 <HAL_DMA_Abort_IT>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d016      	beq.n	8007340 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800731c:	4610      	mov	r0, r2
 800731e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007320:	e00e      	b.n	8007340 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f99e 	bl	8007664 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007328:	e00a      	b.n	8007340 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f99a 	bl	8007664 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007330:	e006      	b.n	8007340 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f996 	bl	8007664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800733e:	e175      	b.n	800762c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007340:	bf00      	nop
    return;
 8007342:	e173      	b.n	800762c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007348:	2b01      	cmp	r3, #1
 800734a:	f040 814f 	bne.w	80075ec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800734e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007352:	f003 0310 	and.w	r3, r3, #16
 8007356:	2b00      	cmp	r3, #0
 8007358:	f000 8148 	beq.w	80075ec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800735c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007360:	f003 0310 	and.w	r3, r3, #16
 8007364:	2b00      	cmp	r3, #0
 8007366:	f000 8141 	beq.w	80075ec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800736a:	2300      	movs	r3, #0
 800736c:	60bb      	str	r3, [r7, #8]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	60bb      	str	r3, [r7, #8]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	60bb      	str	r3, [r7, #8]
 800737e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	695b      	ldr	r3, [r3, #20]
 8007386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800738a:	2b40      	cmp	r3, #64	@ 0x40
 800738c:	f040 80b6 	bne.w	80074fc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800739c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f000 8145 	beq.w	8007630 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80073aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80073ae:	429a      	cmp	r2, r3
 80073b0:	f080 813e 	bcs.w	8007630 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80073ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073c0:	69db      	ldr	r3, [r3, #28]
 80073c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073c6:	f000 8088 	beq.w	80074da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	330c      	adds	r3, #12
 80073d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80073d8:	e853 3f00 	ldrex	r3, [r3]
 80073dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80073e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80073e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	330c      	adds	r3, #12
 80073f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80073f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80073fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007402:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007406:	e841 2300 	strex	r3, r2, [r1]
 800740a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800740e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1d9      	bne.n	80073ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	3314      	adds	r3, #20
 800741c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007420:	e853 3f00 	ldrex	r3, [r3]
 8007424:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007426:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007428:	f023 0301 	bic.w	r3, r3, #1
 800742c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	3314      	adds	r3, #20
 8007436:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800743a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800743e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007440:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007442:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007446:	e841 2300 	strex	r3, r2, [r1]
 800744a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800744c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1e1      	bne.n	8007416 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	3314      	adds	r3, #20
 8007458:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800745c:	e853 3f00 	ldrex	r3, [r3]
 8007460:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007462:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007464:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007468:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	3314      	adds	r3, #20
 8007472:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007476:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007478:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800747c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800747e:	e841 2300 	strex	r3, r2, [r1]
 8007482:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007484:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1e3      	bne.n	8007452 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2220      	movs	r2, #32
 800748e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	330c      	adds	r3, #12
 800749e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074a2:	e853 3f00 	ldrex	r3, [r3]
 80074a6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80074a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074aa:	f023 0310 	bic.w	r3, r3, #16
 80074ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	330c      	adds	r3, #12
 80074b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80074bc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80074be:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80074c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80074c4:	e841 2300 	strex	r3, r2, [r1]
 80074c8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80074ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1e3      	bne.n	8007498 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7fc fe9f 	bl	8004218 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2202      	movs	r2, #2
 80074de:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	4619      	mov	r1, r3
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f8c1 	bl	8007678 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074f6:	e09b      	b.n	8007630 <HAL_UART_IRQHandler+0x518>
 80074f8:	08007b8f 	.word	0x08007b8f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007504:	b29b      	uxth	r3, r3
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007510:	b29b      	uxth	r3, r3
 8007512:	2b00      	cmp	r3, #0
 8007514:	f000 808e 	beq.w	8007634 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007518:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800751c:	2b00      	cmp	r3, #0
 800751e:	f000 8089 	beq.w	8007634 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	330c      	adds	r3, #12
 8007528:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800752c:	e853 3f00 	ldrex	r3, [r3]
 8007530:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007534:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007538:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	330c      	adds	r3, #12
 8007542:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007546:	647a      	str	r2, [r7, #68]	@ 0x44
 8007548:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800754c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800754e:	e841 2300 	strex	r3, r2, [r1]
 8007552:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1e3      	bne.n	8007522 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	3314      	adds	r3, #20
 8007560:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007564:	e853 3f00 	ldrex	r3, [r3]
 8007568:	623b      	str	r3, [r7, #32]
   return(result);
 800756a:	6a3b      	ldr	r3, [r7, #32]
 800756c:	f023 0301 	bic.w	r3, r3, #1
 8007570:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	3314      	adds	r3, #20
 800757a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800757e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007580:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007582:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007584:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007586:	e841 2300 	strex	r3, r2, [r1]
 800758a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800758c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1e3      	bne.n	800755a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2220      	movs	r2, #32
 8007596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	330c      	adds	r3, #12
 80075a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	e853 3f00 	ldrex	r3, [r3]
 80075ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f023 0310 	bic.w	r3, r3, #16
 80075b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	330c      	adds	r3, #12
 80075c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80075c4:	61fa      	str	r2, [r7, #28]
 80075c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c8:	69b9      	ldr	r1, [r7, #24]
 80075ca:	69fa      	ldr	r2, [r7, #28]
 80075cc:	e841 2300 	strex	r3, r2, [r1]
 80075d0:	617b      	str	r3, [r7, #20]
   return(result);
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1e3      	bne.n	80075a0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2202      	movs	r2, #2
 80075dc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 f847 	bl	8007678 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075ea:	e023      	b.n	8007634 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80075ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d009      	beq.n	800760c <HAL_UART_IRQHandler+0x4f4>
 80075f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007600:	2b00      	cmp	r3, #0
 8007602:	d003      	beq.n	800760c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 fad6 	bl	8007bb6 <UART_Transmit_IT>
    return;
 800760a:	e014      	b.n	8007636 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800760c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00e      	beq.n	8007636 <HAL_UART_IRQHandler+0x51e>
 8007618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800761c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007620:	2b00      	cmp	r3, #0
 8007622:	d008      	beq.n	8007636 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fb16 	bl	8007c56 <UART_EndTransmit_IT>
    return;
 800762a:	e004      	b.n	8007636 <HAL_UART_IRQHandler+0x51e>
    return;
 800762c:	bf00      	nop
 800762e:	e002      	b.n	8007636 <HAL_UART_IRQHandler+0x51e>
      return;
 8007630:	bf00      	nop
 8007632:	e000      	b.n	8007636 <HAL_UART_IRQHandler+0x51e>
      return;
 8007634:	bf00      	nop
  }
}
 8007636:	37e8      	adds	r7, #232	@ 0xe8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800766c:	bf00      	nop
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	460b      	mov	r3, r1
 8007682:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007684:	bf00      	nop
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b090      	sub	sp, #64	@ 0x40
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800769c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d137      	bne.n	800771c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80076ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076ae:	2200      	movs	r2, #0
 80076b0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80076b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	3314      	adds	r3, #20
 80076b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076bc:	e853 3f00 	ldrex	r3, [r3]
 80076c0:	623b      	str	r3, [r7, #32]
   return(result);
 80076c2:	6a3b      	ldr	r3, [r7, #32]
 80076c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80076ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	3314      	adds	r3, #20
 80076d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80076d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80076d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076da:	e841 2300 	strex	r3, r2, [r1]
 80076de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1e5      	bne.n	80076b2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	330c      	adds	r3, #12
 80076ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	e853 3f00 	ldrex	r3, [r3]
 80076f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80076fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	330c      	adds	r3, #12
 8007704:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007706:	61fa      	str	r2, [r7, #28]
 8007708:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770a:	69b9      	ldr	r1, [r7, #24]
 800770c:	69fa      	ldr	r2, [r7, #28]
 800770e:	e841 2300 	strex	r3, r2, [r1]
 8007712:	617b      	str	r3, [r7, #20]
   return(result);
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1e5      	bne.n	80076e6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800771a:	e002      	b.n	8007722 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800771c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800771e:	f7fb f96b 	bl	80029f8 <HAL_UART_TxCpltCallback>
}
 8007722:	bf00      	nop
 8007724:	3740      	adds	r7, #64	@ 0x40
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b084      	sub	sp, #16
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007736:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f7ff ff7f 	bl	800763c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800773e:	bf00      	nop
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b09c      	sub	sp, #112	@ 0x70
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007752:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800775e:	2b00      	cmp	r3, #0
 8007760:	d172      	bne.n	8007848 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007762:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007764:	2200      	movs	r2, #0
 8007766:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007768:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	330c      	adds	r3, #12
 800776e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007770:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007772:	e853 3f00 	ldrex	r3, [r3]
 8007776:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007778:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800777a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800777e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007780:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	330c      	adds	r3, #12
 8007786:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007788:	65ba      	str	r2, [r7, #88]	@ 0x58
 800778a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800778e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007790:	e841 2300 	strex	r3, r2, [r1]
 8007794:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007796:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1e5      	bne.n	8007768 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800779c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	3314      	adds	r3, #20
 80077a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a6:	e853 3f00 	ldrex	r3, [r3]
 80077aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ae:	f023 0301 	bic.w	r3, r3, #1
 80077b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80077b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	3314      	adds	r3, #20
 80077ba:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80077bc:	647a      	str	r2, [r7, #68]	@ 0x44
 80077be:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077c4:	e841 2300 	strex	r3, r2, [r1]
 80077c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1e5      	bne.n	800779c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3314      	adds	r3, #20
 80077d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077da:	e853 3f00 	ldrex	r3, [r3]
 80077de:	623b      	str	r3, [r7, #32]
   return(result);
 80077e0:	6a3b      	ldr	r3, [r7, #32]
 80077e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80077e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	3314      	adds	r3, #20
 80077ee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80077f0:	633a      	str	r2, [r7, #48]	@ 0x30
 80077f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077f8:	e841 2300 	strex	r3, r2, [r1]
 80077fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1e5      	bne.n	80077d0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007804:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007806:	2220      	movs	r2, #32
 8007808:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800780c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800780e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007810:	2b01      	cmp	r3, #1
 8007812:	d119      	bne.n	8007848 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007814:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	330c      	adds	r3, #12
 800781a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	e853 3f00 	ldrex	r3, [r3]
 8007822:	60fb      	str	r3, [r7, #12]
   return(result);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f023 0310 	bic.w	r3, r3, #16
 800782a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800782c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	330c      	adds	r3, #12
 8007832:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007834:	61fa      	str	r2, [r7, #28]
 8007836:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007838:	69b9      	ldr	r1, [r7, #24]
 800783a:	69fa      	ldr	r2, [r7, #28]
 800783c:	e841 2300 	strex	r3, r2, [r1]
 8007840:	617b      	str	r3, [r7, #20]
   return(result);
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1e5      	bne.n	8007814 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007848:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800784a:	2200      	movs	r2, #0
 800784c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800784e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007852:	2b01      	cmp	r3, #1
 8007854:	d106      	bne.n	8007864 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007856:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007858:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800785a:	4619      	mov	r1, r3
 800785c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800785e:	f7ff ff0b 	bl	8007678 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007862:	e002      	b.n	800786a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007864:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007866:	f7fb f8df 	bl	8002a28 <HAL_UART_RxCpltCallback>
}
 800786a:	bf00      	nop
 800786c:	3770      	adds	r7, #112	@ 0x70
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007872:	b580      	push	{r7, lr}
 8007874:	b084      	sub	sp, #16
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800787e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2201      	movs	r2, #1
 8007884:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800788a:	2b01      	cmp	r3, #1
 800788c:	d108      	bne.n	80078a0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007892:	085b      	lsrs	r3, r3, #1
 8007894:	b29b      	uxth	r3, r3
 8007896:	4619      	mov	r1, r3
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f7ff feed 	bl	8007678 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800789e:	e002      	b.n	80078a6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f7ff fed5 	bl	8007650 <HAL_UART_RxHalfCpltCallback>
}
 80078a6:	bf00      	nop
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b084      	sub	sp, #16
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078be:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078ca:	2b80      	cmp	r3, #128	@ 0x80
 80078cc:	bf0c      	ite	eq
 80078ce:	2301      	moveq	r3, #1
 80078d0:	2300      	movne	r3, #0
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b21      	cmp	r3, #33	@ 0x21
 80078e0:	d108      	bne.n	80078f4 <UART_DMAError+0x46>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d005      	beq.n	80078f4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	2200      	movs	r2, #0
 80078ec:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80078ee:	68b8      	ldr	r0, [r7, #8]
 80078f0:	f000 f8c2 	bl	8007a78 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078fe:	2b40      	cmp	r3, #64	@ 0x40
 8007900:	bf0c      	ite	eq
 8007902:	2301      	moveq	r3, #1
 8007904:	2300      	movne	r3, #0
 8007906:	b2db      	uxtb	r3, r3
 8007908:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b22      	cmp	r3, #34	@ 0x22
 8007914:	d108      	bne.n	8007928 <UART_DMAError+0x7a>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d005      	beq.n	8007928 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	2200      	movs	r2, #0
 8007920:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007922:	68b8      	ldr	r0, [r7, #8]
 8007924:	f000 f8d0 	bl	8007ac8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800792c:	f043 0210 	orr.w	r2, r3, #16
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007934:	68b8      	ldr	r0, [r7, #8]
 8007936:	f7ff fe95 	bl	8007664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800793a:	bf00      	nop
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
	...

08007944 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b098      	sub	sp, #96	@ 0x60
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	4613      	mov	r3, r2
 8007950:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007952:	68ba      	ldr	r2, [r7, #8]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	88fa      	ldrh	r2, [r7, #6]
 800795c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2222      	movs	r2, #34	@ 0x22
 8007968:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007970:	4a3e      	ldr	r2, [pc, #248]	@ (8007a6c <UART_Start_Receive_DMA+0x128>)
 8007972:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007978:	4a3d      	ldr	r2, [pc, #244]	@ (8007a70 <UART_Start_Receive_DMA+0x12c>)
 800797a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007980:	4a3c      	ldr	r2, [pc, #240]	@ (8007a74 <UART_Start_Receive_DMA+0x130>)
 8007982:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007988:	2200      	movs	r2, #0
 800798a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800798c:	f107 0308 	add.w	r3, r7, #8
 8007990:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	3304      	adds	r3, #4
 800799c:	4619      	mov	r1, r3
 800799e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	88fb      	ldrh	r3, [r7, #6]
 80079a4:	f7fc fbe0 	bl	8004168 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80079a8:	2300      	movs	r3, #0
 80079aa:	613b      	str	r3, [r7, #16]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	613b      	str	r3, [r7, #16]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	613b      	str	r3, [r7, #16]
 80079bc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d019      	beq.n	80079fa <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	330c      	adds	r3, #12
 80079cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079d0:	e853 3f00 	ldrex	r3, [r3]
 80079d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	330c      	adds	r3, #12
 80079e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80079e6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80079e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ea:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80079ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80079ee:	e841 2300 	strex	r3, r2, [r1]
 80079f2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80079f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1e5      	bne.n	80079c6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	3314      	adds	r3, #20
 8007a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a04:	e853 3f00 	ldrex	r3, [r3]
 8007a08:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a0c:	f043 0301 	orr.w	r3, r3, #1
 8007a10:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	3314      	adds	r3, #20
 8007a18:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007a1a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007a1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007a20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a22:	e841 2300 	strex	r3, r2, [r1]
 8007a26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1e5      	bne.n	80079fa <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	3314      	adds	r3, #20
 8007a34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	e853 3f00 	ldrex	r3, [r3]
 8007a3c:	617b      	str	r3, [r7, #20]
   return(result);
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a44:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	3314      	adds	r3, #20
 8007a4c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007a4e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007a50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a52:	6a39      	ldr	r1, [r7, #32]
 8007a54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a56:	e841 2300 	strex	r3, r2, [r1]
 8007a5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1e5      	bne.n	8007a2e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3760      	adds	r7, #96	@ 0x60
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	08007747 	.word	0x08007747
 8007a70:	08007873 	.word	0x08007873
 8007a74:	080078af 	.word	0x080078af

08007a78 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b089      	sub	sp, #36	@ 0x24
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	330c      	adds	r3, #12
 8007a86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	e853 3f00 	ldrex	r3, [r3]
 8007a8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007a96:	61fb      	str	r3, [r7, #28]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	330c      	adds	r3, #12
 8007a9e:	69fa      	ldr	r2, [r7, #28]
 8007aa0:	61ba      	str	r2, [r7, #24]
 8007aa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa4:	6979      	ldr	r1, [r7, #20]
 8007aa6:	69ba      	ldr	r2, [r7, #24]
 8007aa8:	e841 2300 	strex	r3, r2, [r1]
 8007aac:	613b      	str	r3, [r7, #16]
   return(result);
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1e5      	bne.n	8007a80 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2220      	movs	r2, #32
 8007ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007abc:	bf00      	nop
 8007abe:	3724      	adds	r7, #36	@ 0x24
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b095      	sub	sp, #84	@ 0x54
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	330c      	adds	r3, #12
 8007ad6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ada:	e853 3f00 	ldrex	r3, [r3]
 8007ade:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	330c      	adds	r3, #12
 8007aee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007af0:	643a      	str	r2, [r7, #64]	@ 0x40
 8007af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007af6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007af8:	e841 2300 	strex	r3, r2, [r1]
 8007afc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1e5      	bne.n	8007ad0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	3314      	adds	r3, #20
 8007b0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0c:	6a3b      	ldr	r3, [r7, #32]
 8007b0e:	e853 3f00 	ldrex	r3, [r3]
 8007b12:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	f023 0301 	bic.w	r3, r3, #1
 8007b1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	3314      	adds	r3, #20
 8007b22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b2c:	e841 2300 	strex	r3, r2, [r1]
 8007b30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d1e5      	bne.n	8007b04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d119      	bne.n	8007b74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	330c      	adds	r3, #12
 8007b46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	e853 3f00 	ldrex	r3, [r3]
 8007b4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	f023 0310 	bic.w	r3, r3, #16
 8007b56:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	330c      	adds	r3, #12
 8007b5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b60:	61ba      	str	r2, [r7, #24]
 8007b62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b64:	6979      	ldr	r1, [r7, #20]
 8007b66:	69ba      	ldr	r2, [r7, #24]
 8007b68:	e841 2300 	strex	r3, r2, [r1]
 8007b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1e5      	bne.n	8007b40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2220      	movs	r2, #32
 8007b78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007b82:	bf00      	nop
 8007b84:	3754      	adds	r7, #84	@ 0x54
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr

08007b8e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b084      	sub	sp, #16
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f7ff fd5b 	bl	8007664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bae:	bf00      	nop
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b085      	sub	sp, #20
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	2b21      	cmp	r3, #33	@ 0x21
 8007bc8:	d13e      	bne.n	8007c48 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bd2:	d114      	bne.n	8007bfe <UART_Transmit_IT+0x48>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d110      	bne.n	8007bfe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a1b      	ldr	r3, [r3, #32]
 8007be0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	881b      	ldrh	r3, [r3, #0]
 8007be6:	461a      	mov	r2, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bf0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	1c9a      	adds	r2, r3, #2
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	621a      	str	r2, [r3, #32]
 8007bfc:	e008      	b.n	8007c10 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	1c59      	adds	r1, r3, #1
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	6211      	str	r1, [r2, #32]
 8007c08:	781a      	ldrb	r2, [r3, #0]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	3b01      	subs	r3, #1
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d10f      	bne.n	8007c44 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68da      	ldr	r2, [r3, #12]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007c32:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68da      	ldr	r2, [r3, #12]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c42:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007c44:	2300      	movs	r3, #0
 8007c46:	e000      	b.n	8007c4a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007c48:	2302      	movs	r3, #2
  }
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3714      	adds	r7, #20
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr

08007c56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b082      	sub	sp, #8
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68da      	ldr	r2, [r3, #12]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2220      	movs	r2, #32
 8007c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f7fa febe 	bl	80029f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b08c      	sub	sp, #48	@ 0x30
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	2b22      	cmp	r3, #34	@ 0x22
 8007c98:	f040 80ae 	bne.w	8007df8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ca4:	d117      	bne.n	8007cd6 <UART_Receive_IT+0x50>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d113      	bne.n	8007cd6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cce:	1c9a      	adds	r2, r3, #2
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	629a      	str	r2, [r3, #40]	@ 0x28
 8007cd4:	e026      	b.n	8007d24 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ce8:	d007      	beq.n	8007cfa <UART_Receive_IT+0x74>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10a      	bne.n	8007d08 <UART_Receive_IT+0x82>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d106      	bne.n	8007d08 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	b2da      	uxtb	r2, r3
 8007d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d04:	701a      	strb	r2, [r3, #0]
 8007d06:	e008      	b.n	8007d1a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d14:	b2da      	uxtb	r2, r3
 8007d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d1e:	1c5a      	adds	r2, r3, #1
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	4619      	mov	r1, r3
 8007d32:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d15d      	bne.n	8007df4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68da      	ldr	r2, [r3, #12]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f022 0220 	bic.w	r2, r2, #32
 8007d46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68da      	ldr	r2, [r3, #12]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007d56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	695a      	ldr	r2, [r3, #20]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f022 0201 	bic.w	r2, r2, #1
 8007d66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2220      	movs	r2, #32
 8007d6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d135      	bne.n	8007dea <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	330c      	adds	r3, #12
 8007d8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	e853 3f00 	ldrex	r3, [r3]
 8007d92:	613b      	str	r3, [r7, #16]
   return(result);
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	f023 0310 	bic.w	r3, r3, #16
 8007d9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	330c      	adds	r3, #12
 8007da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007da4:	623a      	str	r2, [r7, #32]
 8007da6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da8:	69f9      	ldr	r1, [r7, #28]
 8007daa:	6a3a      	ldr	r2, [r7, #32]
 8007dac:	e841 2300 	strex	r3, r2, [r1]
 8007db0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d1e5      	bne.n	8007d84 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0310 	and.w	r3, r3, #16
 8007dc2:	2b10      	cmp	r3, #16
 8007dc4:	d10a      	bne.n	8007ddc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	60fb      	str	r3, [r7, #12]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	60fb      	str	r3, [r7, #12]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	60fb      	str	r3, [r7, #12]
 8007dda:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007de0:	4619      	mov	r1, r3
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f7ff fc48 	bl	8007678 <HAL_UARTEx_RxEventCallback>
 8007de8:	e002      	b.n	8007df0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f7fa fe1c 	bl	8002a28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007df0:	2300      	movs	r3, #0
 8007df2:	e002      	b.n	8007dfa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007df4:	2300      	movs	r3, #0
 8007df6:	e000      	b.n	8007dfa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007df8:	2302      	movs	r3, #2
  }
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3730      	adds	r7, #48	@ 0x30
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
	...

08007e04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e08:	b0c0      	sub	sp, #256	@ 0x100
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e20:	68d9      	ldr	r1, [r3, #12]
 8007e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	ea40 0301 	orr.w	r3, r0, r1
 8007e2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e32:	689a      	ldr	r2, [r3, #8]
 8007e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	431a      	orrs	r2, r3
 8007e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e40:	695b      	ldr	r3, [r3, #20]
 8007e42:	431a      	orrs	r2, r3
 8007e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e48:	69db      	ldr	r3, [r3, #28]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007e5c:	f021 010c 	bic.w	r1, r1, #12
 8007e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007e6a:	430b      	orrs	r3, r1
 8007e6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	695b      	ldr	r3, [r3, #20]
 8007e76:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e7e:	6999      	ldr	r1, [r3, #24]
 8007e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	ea40 0301 	orr.w	r3, r0, r1
 8007e8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	4b8f      	ldr	r3, [pc, #572]	@ (80080d0 <UART_SetConfig+0x2cc>)
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d005      	beq.n	8007ea4 <UART_SetConfig+0xa0>
 8007e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	4b8d      	ldr	r3, [pc, #564]	@ (80080d4 <UART_SetConfig+0x2d0>)
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d104      	bne.n	8007eae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ea4:	f7fe faaa 	bl	80063fc <HAL_RCC_GetPCLK2Freq>
 8007ea8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007eac:	e003      	b.n	8007eb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007eae:	f7fe fa91 	bl	80063d4 <HAL_RCC_GetPCLK1Freq>
 8007eb2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eba:	69db      	ldr	r3, [r3, #28]
 8007ebc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ec0:	f040 810c 	bne.w	80080dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ec4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007ece:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007ed2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007ed6:	4622      	mov	r2, r4
 8007ed8:	462b      	mov	r3, r5
 8007eda:	1891      	adds	r1, r2, r2
 8007edc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007ede:	415b      	adcs	r3, r3
 8007ee0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ee2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007ee6:	4621      	mov	r1, r4
 8007ee8:	eb12 0801 	adds.w	r8, r2, r1
 8007eec:	4629      	mov	r1, r5
 8007eee:	eb43 0901 	adc.w	r9, r3, r1
 8007ef2:	f04f 0200 	mov.w	r2, #0
 8007ef6:	f04f 0300 	mov.w	r3, #0
 8007efa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007efe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f06:	4690      	mov	r8, r2
 8007f08:	4699      	mov	r9, r3
 8007f0a:	4623      	mov	r3, r4
 8007f0c:	eb18 0303 	adds.w	r3, r8, r3
 8007f10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f14:	462b      	mov	r3, r5
 8007f16:	eb49 0303 	adc.w	r3, r9, r3
 8007f1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007f2a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007f2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007f32:	460b      	mov	r3, r1
 8007f34:	18db      	adds	r3, r3, r3
 8007f36:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f38:	4613      	mov	r3, r2
 8007f3a:	eb42 0303 	adc.w	r3, r2, r3
 8007f3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007f44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007f48:	f7f8 fdc0 	bl	8000acc <__aeabi_uldivmod>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	4b61      	ldr	r3, [pc, #388]	@ (80080d8 <UART_SetConfig+0x2d4>)
 8007f52:	fba3 2302 	umull	r2, r3, r3, r2
 8007f56:	095b      	lsrs	r3, r3, #5
 8007f58:	011c      	lsls	r4, r3, #4
 8007f5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f64:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007f68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007f6c:	4642      	mov	r2, r8
 8007f6e:	464b      	mov	r3, r9
 8007f70:	1891      	adds	r1, r2, r2
 8007f72:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007f74:	415b      	adcs	r3, r3
 8007f76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007f7c:	4641      	mov	r1, r8
 8007f7e:	eb12 0a01 	adds.w	sl, r2, r1
 8007f82:	4649      	mov	r1, r9
 8007f84:	eb43 0b01 	adc.w	fp, r3, r1
 8007f88:	f04f 0200 	mov.w	r2, #0
 8007f8c:	f04f 0300 	mov.w	r3, #0
 8007f90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007f94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007f98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f9c:	4692      	mov	sl, r2
 8007f9e:	469b      	mov	fp, r3
 8007fa0:	4643      	mov	r3, r8
 8007fa2:	eb1a 0303 	adds.w	r3, sl, r3
 8007fa6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007faa:	464b      	mov	r3, r9
 8007fac:	eb4b 0303 	adc.w	r3, fp, r3
 8007fb0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007fc0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007fc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	18db      	adds	r3, r3, r3
 8007fcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fce:	4613      	mov	r3, r2
 8007fd0:	eb42 0303 	adc.w	r3, r2, r3
 8007fd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007fda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007fde:	f7f8 fd75 	bl	8000acc <__aeabi_uldivmod>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	4611      	mov	r1, r2
 8007fe8:	4b3b      	ldr	r3, [pc, #236]	@ (80080d8 <UART_SetConfig+0x2d4>)
 8007fea:	fba3 2301 	umull	r2, r3, r3, r1
 8007fee:	095b      	lsrs	r3, r3, #5
 8007ff0:	2264      	movs	r2, #100	@ 0x64
 8007ff2:	fb02 f303 	mul.w	r3, r2, r3
 8007ff6:	1acb      	subs	r3, r1, r3
 8007ff8:	00db      	lsls	r3, r3, #3
 8007ffa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007ffe:	4b36      	ldr	r3, [pc, #216]	@ (80080d8 <UART_SetConfig+0x2d4>)
 8008000:	fba3 2302 	umull	r2, r3, r3, r2
 8008004:	095b      	lsrs	r3, r3, #5
 8008006:	005b      	lsls	r3, r3, #1
 8008008:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800800c:	441c      	add	r4, r3
 800800e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008012:	2200      	movs	r2, #0
 8008014:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008018:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800801c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008020:	4642      	mov	r2, r8
 8008022:	464b      	mov	r3, r9
 8008024:	1891      	adds	r1, r2, r2
 8008026:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008028:	415b      	adcs	r3, r3
 800802a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800802c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008030:	4641      	mov	r1, r8
 8008032:	1851      	adds	r1, r2, r1
 8008034:	6339      	str	r1, [r7, #48]	@ 0x30
 8008036:	4649      	mov	r1, r9
 8008038:	414b      	adcs	r3, r1
 800803a:	637b      	str	r3, [r7, #52]	@ 0x34
 800803c:	f04f 0200 	mov.w	r2, #0
 8008040:	f04f 0300 	mov.w	r3, #0
 8008044:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008048:	4659      	mov	r1, fp
 800804a:	00cb      	lsls	r3, r1, #3
 800804c:	4651      	mov	r1, sl
 800804e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008052:	4651      	mov	r1, sl
 8008054:	00ca      	lsls	r2, r1, #3
 8008056:	4610      	mov	r0, r2
 8008058:	4619      	mov	r1, r3
 800805a:	4603      	mov	r3, r0
 800805c:	4642      	mov	r2, r8
 800805e:	189b      	adds	r3, r3, r2
 8008060:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008064:	464b      	mov	r3, r9
 8008066:	460a      	mov	r2, r1
 8008068:	eb42 0303 	adc.w	r3, r2, r3
 800806c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800807c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008080:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008084:	460b      	mov	r3, r1
 8008086:	18db      	adds	r3, r3, r3
 8008088:	62bb      	str	r3, [r7, #40]	@ 0x28
 800808a:	4613      	mov	r3, r2
 800808c:	eb42 0303 	adc.w	r3, r2, r3
 8008090:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008092:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008096:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800809a:	f7f8 fd17 	bl	8000acc <__aeabi_uldivmod>
 800809e:	4602      	mov	r2, r0
 80080a0:	460b      	mov	r3, r1
 80080a2:	4b0d      	ldr	r3, [pc, #52]	@ (80080d8 <UART_SetConfig+0x2d4>)
 80080a4:	fba3 1302 	umull	r1, r3, r3, r2
 80080a8:	095b      	lsrs	r3, r3, #5
 80080aa:	2164      	movs	r1, #100	@ 0x64
 80080ac:	fb01 f303 	mul.w	r3, r1, r3
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	00db      	lsls	r3, r3, #3
 80080b4:	3332      	adds	r3, #50	@ 0x32
 80080b6:	4a08      	ldr	r2, [pc, #32]	@ (80080d8 <UART_SetConfig+0x2d4>)
 80080b8:	fba2 2303 	umull	r2, r3, r2, r3
 80080bc:	095b      	lsrs	r3, r3, #5
 80080be:	f003 0207 	and.w	r2, r3, #7
 80080c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4422      	add	r2, r4
 80080ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80080cc:	e106      	b.n	80082dc <UART_SetConfig+0x4d8>
 80080ce:	bf00      	nop
 80080d0:	40011000 	.word	0x40011000
 80080d4:	40011400 	.word	0x40011400
 80080d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80080dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080e0:	2200      	movs	r2, #0
 80080e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80080e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80080ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80080ee:	4642      	mov	r2, r8
 80080f0:	464b      	mov	r3, r9
 80080f2:	1891      	adds	r1, r2, r2
 80080f4:	6239      	str	r1, [r7, #32]
 80080f6:	415b      	adcs	r3, r3
 80080f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80080fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80080fe:	4641      	mov	r1, r8
 8008100:	1854      	adds	r4, r2, r1
 8008102:	4649      	mov	r1, r9
 8008104:	eb43 0501 	adc.w	r5, r3, r1
 8008108:	f04f 0200 	mov.w	r2, #0
 800810c:	f04f 0300 	mov.w	r3, #0
 8008110:	00eb      	lsls	r3, r5, #3
 8008112:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008116:	00e2      	lsls	r2, r4, #3
 8008118:	4614      	mov	r4, r2
 800811a:	461d      	mov	r5, r3
 800811c:	4643      	mov	r3, r8
 800811e:	18e3      	adds	r3, r4, r3
 8008120:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008124:	464b      	mov	r3, r9
 8008126:	eb45 0303 	adc.w	r3, r5, r3
 800812a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800812e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800813a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800813e:	f04f 0200 	mov.w	r2, #0
 8008142:	f04f 0300 	mov.w	r3, #0
 8008146:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800814a:	4629      	mov	r1, r5
 800814c:	008b      	lsls	r3, r1, #2
 800814e:	4621      	mov	r1, r4
 8008150:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008154:	4621      	mov	r1, r4
 8008156:	008a      	lsls	r2, r1, #2
 8008158:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800815c:	f7f8 fcb6 	bl	8000acc <__aeabi_uldivmod>
 8008160:	4602      	mov	r2, r0
 8008162:	460b      	mov	r3, r1
 8008164:	4b60      	ldr	r3, [pc, #384]	@ (80082e8 <UART_SetConfig+0x4e4>)
 8008166:	fba3 2302 	umull	r2, r3, r3, r2
 800816a:	095b      	lsrs	r3, r3, #5
 800816c:	011c      	lsls	r4, r3, #4
 800816e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008172:	2200      	movs	r2, #0
 8008174:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008178:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800817c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008180:	4642      	mov	r2, r8
 8008182:	464b      	mov	r3, r9
 8008184:	1891      	adds	r1, r2, r2
 8008186:	61b9      	str	r1, [r7, #24]
 8008188:	415b      	adcs	r3, r3
 800818a:	61fb      	str	r3, [r7, #28]
 800818c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008190:	4641      	mov	r1, r8
 8008192:	1851      	adds	r1, r2, r1
 8008194:	6139      	str	r1, [r7, #16]
 8008196:	4649      	mov	r1, r9
 8008198:	414b      	adcs	r3, r1
 800819a:	617b      	str	r3, [r7, #20]
 800819c:	f04f 0200 	mov.w	r2, #0
 80081a0:	f04f 0300 	mov.w	r3, #0
 80081a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80081a8:	4659      	mov	r1, fp
 80081aa:	00cb      	lsls	r3, r1, #3
 80081ac:	4651      	mov	r1, sl
 80081ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081b2:	4651      	mov	r1, sl
 80081b4:	00ca      	lsls	r2, r1, #3
 80081b6:	4610      	mov	r0, r2
 80081b8:	4619      	mov	r1, r3
 80081ba:	4603      	mov	r3, r0
 80081bc:	4642      	mov	r2, r8
 80081be:	189b      	adds	r3, r3, r2
 80081c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80081c4:	464b      	mov	r3, r9
 80081c6:	460a      	mov	r2, r1
 80081c8:	eb42 0303 	adc.w	r3, r2, r3
 80081cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80081d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80081da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80081dc:	f04f 0200 	mov.w	r2, #0
 80081e0:	f04f 0300 	mov.w	r3, #0
 80081e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80081e8:	4649      	mov	r1, r9
 80081ea:	008b      	lsls	r3, r1, #2
 80081ec:	4641      	mov	r1, r8
 80081ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081f2:	4641      	mov	r1, r8
 80081f4:	008a      	lsls	r2, r1, #2
 80081f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80081fa:	f7f8 fc67 	bl	8000acc <__aeabi_uldivmod>
 80081fe:	4602      	mov	r2, r0
 8008200:	460b      	mov	r3, r1
 8008202:	4611      	mov	r1, r2
 8008204:	4b38      	ldr	r3, [pc, #224]	@ (80082e8 <UART_SetConfig+0x4e4>)
 8008206:	fba3 2301 	umull	r2, r3, r3, r1
 800820a:	095b      	lsrs	r3, r3, #5
 800820c:	2264      	movs	r2, #100	@ 0x64
 800820e:	fb02 f303 	mul.w	r3, r2, r3
 8008212:	1acb      	subs	r3, r1, r3
 8008214:	011b      	lsls	r3, r3, #4
 8008216:	3332      	adds	r3, #50	@ 0x32
 8008218:	4a33      	ldr	r2, [pc, #204]	@ (80082e8 <UART_SetConfig+0x4e4>)
 800821a:	fba2 2303 	umull	r2, r3, r2, r3
 800821e:	095b      	lsrs	r3, r3, #5
 8008220:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008224:	441c      	add	r4, r3
 8008226:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800822a:	2200      	movs	r2, #0
 800822c:	673b      	str	r3, [r7, #112]	@ 0x70
 800822e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008230:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008234:	4642      	mov	r2, r8
 8008236:	464b      	mov	r3, r9
 8008238:	1891      	adds	r1, r2, r2
 800823a:	60b9      	str	r1, [r7, #8]
 800823c:	415b      	adcs	r3, r3
 800823e:	60fb      	str	r3, [r7, #12]
 8008240:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008244:	4641      	mov	r1, r8
 8008246:	1851      	adds	r1, r2, r1
 8008248:	6039      	str	r1, [r7, #0]
 800824a:	4649      	mov	r1, r9
 800824c:	414b      	adcs	r3, r1
 800824e:	607b      	str	r3, [r7, #4]
 8008250:	f04f 0200 	mov.w	r2, #0
 8008254:	f04f 0300 	mov.w	r3, #0
 8008258:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800825c:	4659      	mov	r1, fp
 800825e:	00cb      	lsls	r3, r1, #3
 8008260:	4651      	mov	r1, sl
 8008262:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008266:	4651      	mov	r1, sl
 8008268:	00ca      	lsls	r2, r1, #3
 800826a:	4610      	mov	r0, r2
 800826c:	4619      	mov	r1, r3
 800826e:	4603      	mov	r3, r0
 8008270:	4642      	mov	r2, r8
 8008272:	189b      	adds	r3, r3, r2
 8008274:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008276:	464b      	mov	r3, r9
 8008278:	460a      	mov	r2, r1
 800827a:	eb42 0303 	adc.w	r3, r2, r3
 800827e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	663b      	str	r3, [r7, #96]	@ 0x60
 800828a:	667a      	str	r2, [r7, #100]	@ 0x64
 800828c:	f04f 0200 	mov.w	r2, #0
 8008290:	f04f 0300 	mov.w	r3, #0
 8008294:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008298:	4649      	mov	r1, r9
 800829a:	008b      	lsls	r3, r1, #2
 800829c:	4641      	mov	r1, r8
 800829e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082a2:	4641      	mov	r1, r8
 80082a4:	008a      	lsls	r2, r1, #2
 80082a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80082aa:	f7f8 fc0f 	bl	8000acc <__aeabi_uldivmod>
 80082ae:	4602      	mov	r2, r0
 80082b0:	460b      	mov	r3, r1
 80082b2:	4b0d      	ldr	r3, [pc, #52]	@ (80082e8 <UART_SetConfig+0x4e4>)
 80082b4:	fba3 1302 	umull	r1, r3, r3, r2
 80082b8:	095b      	lsrs	r3, r3, #5
 80082ba:	2164      	movs	r1, #100	@ 0x64
 80082bc:	fb01 f303 	mul.w	r3, r1, r3
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	011b      	lsls	r3, r3, #4
 80082c4:	3332      	adds	r3, #50	@ 0x32
 80082c6:	4a08      	ldr	r2, [pc, #32]	@ (80082e8 <UART_SetConfig+0x4e4>)
 80082c8:	fba2 2303 	umull	r2, r3, r2, r3
 80082cc:	095b      	lsrs	r3, r3, #5
 80082ce:	f003 020f 	and.w	r2, r3, #15
 80082d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4422      	add	r2, r4
 80082da:	609a      	str	r2, [r3, #8]
}
 80082dc:	bf00      	nop
 80082de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80082e2:	46bd      	mov	sp, r7
 80082e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082e8:	51eb851f 	.word	0x51eb851f

080082ec <realloc>:
 80082ec:	4b02      	ldr	r3, [pc, #8]	@ (80082f8 <realloc+0xc>)
 80082ee:	460a      	mov	r2, r1
 80082f0:	4601      	mov	r1, r0
 80082f2:	6818      	ldr	r0, [r3, #0]
 80082f4:	f000 b802 	b.w	80082fc <_realloc_r>
 80082f8:	20000024 	.word	0x20000024

080082fc <_realloc_r>:
 80082fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008300:	4680      	mov	r8, r0
 8008302:	4615      	mov	r5, r2
 8008304:	460c      	mov	r4, r1
 8008306:	b921      	cbnz	r1, 8008312 <_realloc_r+0x16>
 8008308:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800830c:	4611      	mov	r1, r2
 800830e:	f000 bb23 	b.w	8008958 <_malloc_r>
 8008312:	b92a      	cbnz	r2, 8008320 <_realloc_r+0x24>
 8008314:	f000 fab4 	bl	8008880 <_free_r>
 8008318:	2400      	movs	r4, #0
 800831a:	4620      	mov	r0, r4
 800831c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008320:	f000 fba6 	bl	8008a70 <_malloc_usable_size_r>
 8008324:	4285      	cmp	r5, r0
 8008326:	4606      	mov	r6, r0
 8008328:	d802      	bhi.n	8008330 <_realloc_r+0x34>
 800832a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800832e:	d8f4      	bhi.n	800831a <_realloc_r+0x1e>
 8008330:	4629      	mov	r1, r5
 8008332:	4640      	mov	r0, r8
 8008334:	f000 fb10 	bl	8008958 <_malloc_r>
 8008338:	4607      	mov	r7, r0
 800833a:	2800      	cmp	r0, #0
 800833c:	d0ec      	beq.n	8008318 <_realloc_r+0x1c>
 800833e:	42b5      	cmp	r5, r6
 8008340:	462a      	mov	r2, r5
 8008342:	4621      	mov	r1, r4
 8008344:	bf28      	it	cs
 8008346:	4632      	movcs	r2, r6
 8008348:	f000 fa8b 	bl	8008862 <memcpy>
 800834c:	4621      	mov	r1, r4
 800834e:	4640      	mov	r0, r8
 8008350:	f000 fa96 	bl	8008880 <_free_r>
 8008354:	463c      	mov	r4, r7
 8008356:	e7e0      	b.n	800831a <_realloc_r+0x1e>

08008358 <std>:
 8008358:	2300      	movs	r3, #0
 800835a:	b510      	push	{r4, lr}
 800835c:	4604      	mov	r4, r0
 800835e:	e9c0 3300 	strd	r3, r3, [r0]
 8008362:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008366:	6083      	str	r3, [r0, #8]
 8008368:	8181      	strh	r1, [r0, #12]
 800836a:	6643      	str	r3, [r0, #100]	@ 0x64
 800836c:	81c2      	strh	r2, [r0, #14]
 800836e:	6183      	str	r3, [r0, #24]
 8008370:	4619      	mov	r1, r3
 8008372:	2208      	movs	r2, #8
 8008374:	305c      	adds	r0, #92	@ 0x5c
 8008376:	f000 f9f9 	bl	800876c <memset>
 800837a:	4b0d      	ldr	r3, [pc, #52]	@ (80083b0 <std+0x58>)
 800837c:	6263      	str	r3, [r4, #36]	@ 0x24
 800837e:	4b0d      	ldr	r3, [pc, #52]	@ (80083b4 <std+0x5c>)
 8008380:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008382:	4b0d      	ldr	r3, [pc, #52]	@ (80083b8 <std+0x60>)
 8008384:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008386:	4b0d      	ldr	r3, [pc, #52]	@ (80083bc <std+0x64>)
 8008388:	6323      	str	r3, [r4, #48]	@ 0x30
 800838a:	4b0d      	ldr	r3, [pc, #52]	@ (80083c0 <std+0x68>)
 800838c:	6224      	str	r4, [r4, #32]
 800838e:	429c      	cmp	r4, r3
 8008390:	d006      	beq.n	80083a0 <std+0x48>
 8008392:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008396:	4294      	cmp	r4, r2
 8008398:	d002      	beq.n	80083a0 <std+0x48>
 800839a:	33d0      	adds	r3, #208	@ 0xd0
 800839c:	429c      	cmp	r4, r3
 800839e:	d105      	bne.n	80083ac <std+0x54>
 80083a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80083a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083a8:	f000 ba58 	b.w	800885c <__retarget_lock_init_recursive>
 80083ac:	bd10      	pop	{r4, pc}
 80083ae:	bf00      	nop
 80083b0:	080085bd 	.word	0x080085bd
 80083b4:	080085df 	.word	0x080085df
 80083b8:	08008617 	.word	0x08008617
 80083bc:	0800863b 	.word	0x0800863b
 80083c0:	20000c4c 	.word	0x20000c4c

080083c4 <stdio_exit_handler>:
 80083c4:	4a02      	ldr	r2, [pc, #8]	@ (80083d0 <stdio_exit_handler+0xc>)
 80083c6:	4903      	ldr	r1, [pc, #12]	@ (80083d4 <stdio_exit_handler+0x10>)
 80083c8:	4803      	ldr	r0, [pc, #12]	@ (80083d8 <stdio_exit_handler+0x14>)
 80083ca:	f000 b869 	b.w	80084a0 <_fwalk_sglue>
 80083ce:	bf00      	nop
 80083d0:	20000018 	.word	0x20000018
 80083d4:	08009129 	.word	0x08009129
 80083d8:	20000028 	.word	0x20000028

080083dc <cleanup_stdio>:
 80083dc:	6841      	ldr	r1, [r0, #4]
 80083de:	4b0c      	ldr	r3, [pc, #48]	@ (8008410 <cleanup_stdio+0x34>)
 80083e0:	4299      	cmp	r1, r3
 80083e2:	b510      	push	{r4, lr}
 80083e4:	4604      	mov	r4, r0
 80083e6:	d001      	beq.n	80083ec <cleanup_stdio+0x10>
 80083e8:	f000 fe9e 	bl	8009128 <_fflush_r>
 80083ec:	68a1      	ldr	r1, [r4, #8]
 80083ee:	4b09      	ldr	r3, [pc, #36]	@ (8008414 <cleanup_stdio+0x38>)
 80083f0:	4299      	cmp	r1, r3
 80083f2:	d002      	beq.n	80083fa <cleanup_stdio+0x1e>
 80083f4:	4620      	mov	r0, r4
 80083f6:	f000 fe97 	bl	8009128 <_fflush_r>
 80083fa:	68e1      	ldr	r1, [r4, #12]
 80083fc:	4b06      	ldr	r3, [pc, #24]	@ (8008418 <cleanup_stdio+0x3c>)
 80083fe:	4299      	cmp	r1, r3
 8008400:	d004      	beq.n	800840c <cleanup_stdio+0x30>
 8008402:	4620      	mov	r0, r4
 8008404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008408:	f000 be8e 	b.w	8009128 <_fflush_r>
 800840c:	bd10      	pop	{r4, pc}
 800840e:	bf00      	nop
 8008410:	20000c4c 	.word	0x20000c4c
 8008414:	20000cb4 	.word	0x20000cb4
 8008418:	20000d1c 	.word	0x20000d1c

0800841c <global_stdio_init.part.0>:
 800841c:	b510      	push	{r4, lr}
 800841e:	4b0b      	ldr	r3, [pc, #44]	@ (800844c <global_stdio_init.part.0+0x30>)
 8008420:	4c0b      	ldr	r4, [pc, #44]	@ (8008450 <global_stdio_init.part.0+0x34>)
 8008422:	4a0c      	ldr	r2, [pc, #48]	@ (8008454 <global_stdio_init.part.0+0x38>)
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	4620      	mov	r0, r4
 8008428:	2200      	movs	r2, #0
 800842a:	2104      	movs	r1, #4
 800842c:	f7ff ff94 	bl	8008358 <std>
 8008430:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008434:	2201      	movs	r2, #1
 8008436:	2109      	movs	r1, #9
 8008438:	f7ff ff8e 	bl	8008358 <std>
 800843c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008440:	2202      	movs	r2, #2
 8008442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008446:	2112      	movs	r1, #18
 8008448:	f7ff bf86 	b.w	8008358 <std>
 800844c:	20000d84 	.word	0x20000d84
 8008450:	20000c4c 	.word	0x20000c4c
 8008454:	080083c5 	.word	0x080083c5

08008458 <__sfp_lock_acquire>:
 8008458:	4801      	ldr	r0, [pc, #4]	@ (8008460 <__sfp_lock_acquire+0x8>)
 800845a:	f000 ba00 	b.w	800885e <__retarget_lock_acquire_recursive>
 800845e:	bf00      	nop
 8008460:	20000d8d 	.word	0x20000d8d

08008464 <__sfp_lock_release>:
 8008464:	4801      	ldr	r0, [pc, #4]	@ (800846c <__sfp_lock_release+0x8>)
 8008466:	f000 b9fb 	b.w	8008860 <__retarget_lock_release_recursive>
 800846a:	bf00      	nop
 800846c:	20000d8d 	.word	0x20000d8d

08008470 <__sinit>:
 8008470:	b510      	push	{r4, lr}
 8008472:	4604      	mov	r4, r0
 8008474:	f7ff fff0 	bl	8008458 <__sfp_lock_acquire>
 8008478:	6a23      	ldr	r3, [r4, #32]
 800847a:	b11b      	cbz	r3, 8008484 <__sinit+0x14>
 800847c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008480:	f7ff bff0 	b.w	8008464 <__sfp_lock_release>
 8008484:	4b04      	ldr	r3, [pc, #16]	@ (8008498 <__sinit+0x28>)
 8008486:	6223      	str	r3, [r4, #32]
 8008488:	4b04      	ldr	r3, [pc, #16]	@ (800849c <__sinit+0x2c>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1f5      	bne.n	800847c <__sinit+0xc>
 8008490:	f7ff ffc4 	bl	800841c <global_stdio_init.part.0>
 8008494:	e7f2      	b.n	800847c <__sinit+0xc>
 8008496:	bf00      	nop
 8008498:	080083dd 	.word	0x080083dd
 800849c:	20000d84 	.word	0x20000d84

080084a0 <_fwalk_sglue>:
 80084a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084a4:	4607      	mov	r7, r0
 80084a6:	4688      	mov	r8, r1
 80084a8:	4614      	mov	r4, r2
 80084aa:	2600      	movs	r6, #0
 80084ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80084b0:	f1b9 0901 	subs.w	r9, r9, #1
 80084b4:	d505      	bpl.n	80084c2 <_fwalk_sglue+0x22>
 80084b6:	6824      	ldr	r4, [r4, #0]
 80084b8:	2c00      	cmp	r4, #0
 80084ba:	d1f7      	bne.n	80084ac <_fwalk_sglue+0xc>
 80084bc:	4630      	mov	r0, r6
 80084be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084c2:	89ab      	ldrh	r3, [r5, #12]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d907      	bls.n	80084d8 <_fwalk_sglue+0x38>
 80084c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084cc:	3301      	adds	r3, #1
 80084ce:	d003      	beq.n	80084d8 <_fwalk_sglue+0x38>
 80084d0:	4629      	mov	r1, r5
 80084d2:	4638      	mov	r0, r7
 80084d4:	47c0      	blx	r8
 80084d6:	4306      	orrs	r6, r0
 80084d8:	3568      	adds	r5, #104	@ 0x68
 80084da:	e7e9      	b.n	80084b0 <_fwalk_sglue+0x10>

080084dc <iprintf>:
 80084dc:	b40f      	push	{r0, r1, r2, r3}
 80084de:	b507      	push	{r0, r1, r2, lr}
 80084e0:	4906      	ldr	r1, [pc, #24]	@ (80084fc <iprintf+0x20>)
 80084e2:	ab04      	add	r3, sp, #16
 80084e4:	6808      	ldr	r0, [r1, #0]
 80084e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80084ea:	6881      	ldr	r1, [r0, #8]
 80084ec:	9301      	str	r3, [sp, #4]
 80084ee:	f000 faf1 	bl	8008ad4 <_vfiprintf_r>
 80084f2:	b003      	add	sp, #12
 80084f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80084f8:	b004      	add	sp, #16
 80084fa:	4770      	bx	lr
 80084fc:	20000024 	.word	0x20000024

08008500 <_puts_r>:
 8008500:	6a03      	ldr	r3, [r0, #32]
 8008502:	b570      	push	{r4, r5, r6, lr}
 8008504:	6884      	ldr	r4, [r0, #8]
 8008506:	4605      	mov	r5, r0
 8008508:	460e      	mov	r6, r1
 800850a:	b90b      	cbnz	r3, 8008510 <_puts_r+0x10>
 800850c:	f7ff ffb0 	bl	8008470 <__sinit>
 8008510:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008512:	07db      	lsls	r3, r3, #31
 8008514:	d405      	bmi.n	8008522 <_puts_r+0x22>
 8008516:	89a3      	ldrh	r3, [r4, #12]
 8008518:	0598      	lsls	r0, r3, #22
 800851a:	d402      	bmi.n	8008522 <_puts_r+0x22>
 800851c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800851e:	f000 f99e 	bl	800885e <__retarget_lock_acquire_recursive>
 8008522:	89a3      	ldrh	r3, [r4, #12]
 8008524:	0719      	lsls	r1, r3, #28
 8008526:	d502      	bpl.n	800852e <_puts_r+0x2e>
 8008528:	6923      	ldr	r3, [r4, #16]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d135      	bne.n	800859a <_puts_r+0x9a>
 800852e:	4621      	mov	r1, r4
 8008530:	4628      	mov	r0, r5
 8008532:	f000 f8c5 	bl	80086c0 <__swsetup_r>
 8008536:	b380      	cbz	r0, 800859a <_puts_r+0x9a>
 8008538:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800853c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800853e:	07da      	lsls	r2, r3, #31
 8008540:	d405      	bmi.n	800854e <_puts_r+0x4e>
 8008542:	89a3      	ldrh	r3, [r4, #12]
 8008544:	059b      	lsls	r3, r3, #22
 8008546:	d402      	bmi.n	800854e <_puts_r+0x4e>
 8008548:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800854a:	f000 f989 	bl	8008860 <__retarget_lock_release_recursive>
 800854e:	4628      	mov	r0, r5
 8008550:	bd70      	pop	{r4, r5, r6, pc}
 8008552:	2b00      	cmp	r3, #0
 8008554:	da04      	bge.n	8008560 <_puts_r+0x60>
 8008556:	69a2      	ldr	r2, [r4, #24]
 8008558:	429a      	cmp	r2, r3
 800855a:	dc17      	bgt.n	800858c <_puts_r+0x8c>
 800855c:	290a      	cmp	r1, #10
 800855e:	d015      	beq.n	800858c <_puts_r+0x8c>
 8008560:	6823      	ldr	r3, [r4, #0]
 8008562:	1c5a      	adds	r2, r3, #1
 8008564:	6022      	str	r2, [r4, #0]
 8008566:	7019      	strb	r1, [r3, #0]
 8008568:	68a3      	ldr	r3, [r4, #8]
 800856a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800856e:	3b01      	subs	r3, #1
 8008570:	60a3      	str	r3, [r4, #8]
 8008572:	2900      	cmp	r1, #0
 8008574:	d1ed      	bne.n	8008552 <_puts_r+0x52>
 8008576:	2b00      	cmp	r3, #0
 8008578:	da11      	bge.n	800859e <_puts_r+0x9e>
 800857a:	4622      	mov	r2, r4
 800857c:	210a      	movs	r1, #10
 800857e:	4628      	mov	r0, r5
 8008580:	f000 f85f 	bl	8008642 <__swbuf_r>
 8008584:	3001      	adds	r0, #1
 8008586:	d0d7      	beq.n	8008538 <_puts_r+0x38>
 8008588:	250a      	movs	r5, #10
 800858a:	e7d7      	b.n	800853c <_puts_r+0x3c>
 800858c:	4622      	mov	r2, r4
 800858e:	4628      	mov	r0, r5
 8008590:	f000 f857 	bl	8008642 <__swbuf_r>
 8008594:	3001      	adds	r0, #1
 8008596:	d1e7      	bne.n	8008568 <_puts_r+0x68>
 8008598:	e7ce      	b.n	8008538 <_puts_r+0x38>
 800859a:	3e01      	subs	r6, #1
 800859c:	e7e4      	b.n	8008568 <_puts_r+0x68>
 800859e:	6823      	ldr	r3, [r4, #0]
 80085a0:	1c5a      	adds	r2, r3, #1
 80085a2:	6022      	str	r2, [r4, #0]
 80085a4:	220a      	movs	r2, #10
 80085a6:	701a      	strb	r2, [r3, #0]
 80085a8:	e7ee      	b.n	8008588 <_puts_r+0x88>
	...

080085ac <puts>:
 80085ac:	4b02      	ldr	r3, [pc, #8]	@ (80085b8 <puts+0xc>)
 80085ae:	4601      	mov	r1, r0
 80085b0:	6818      	ldr	r0, [r3, #0]
 80085b2:	f7ff bfa5 	b.w	8008500 <_puts_r>
 80085b6:	bf00      	nop
 80085b8:	20000024 	.word	0x20000024

080085bc <__sread>:
 80085bc:	b510      	push	{r4, lr}
 80085be:	460c      	mov	r4, r1
 80085c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085c4:	f000 f8fc 	bl	80087c0 <_read_r>
 80085c8:	2800      	cmp	r0, #0
 80085ca:	bfab      	itete	ge
 80085cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80085ce:	89a3      	ldrhlt	r3, [r4, #12]
 80085d0:	181b      	addge	r3, r3, r0
 80085d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80085d6:	bfac      	ite	ge
 80085d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80085da:	81a3      	strhlt	r3, [r4, #12]
 80085dc:	bd10      	pop	{r4, pc}

080085de <__swrite>:
 80085de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085e2:	461f      	mov	r7, r3
 80085e4:	898b      	ldrh	r3, [r1, #12]
 80085e6:	05db      	lsls	r3, r3, #23
 80085e8:	4605      	mov	r5, r0
 80085ea:	460c      	mov	r4, r1
 80085ec:	4616      	mov	r6, r2
 80085ee:	d505      	bpl.n	80085fc <__swrite+0x1e>
 80085f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085f4:	2302      	movs	r3, #2
 80085f6:	2200      	movs	r2, #0
 80085f8:	f000 f8d0 	bl	800879c <_lseek_r>
 80085fc:	89a3      	ldrh	r3, [r4, #12]
 80085fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008602:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008606:	81a3      	strh	r3, [r4, #12]
 8008608:	4632      	mov	r2, r6
 800860a:	463b      	mov	r3, r7
 800860c:	4628      	mov	r0, r5
 800860e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008612:	f000 b8e7 	b.w	80087e4 <_write_r>

08008616 <__sseek>:
 8008616:	b510      	push	{r4, lr}
 8008618:	460c      	mov	r4, r1
 800861a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800861e:	f000 f8bd 	bl	800879c <_lseek_r>
 8008622:	1c43      	adds	r3, r0, #1
 8008624:	89a3      	ldrh	r3, [r4, #12]
 8008626:	bf15      	itete	ne
 8008628:	6560      	strne	r0, [r4, #84]	@ 0x54
 800862a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800862e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008632:	81a3      	strheq	r3, [r4, #12]
 8008634:	bf18      	it	ne
 8008636:	81a3      	strhne	r3, [r4, #12]
 8008638:	bd10      	pop	{r4, pc}

0800863a <__sclose>:
 800863a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800863e:	f000 b89d 	b.w	800877c <_close_r>

08008642 <__swbuf_r>:
 8008642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008644:	460e      	mov	r6, r1
 8008646:	4614      	mov	r4, r2
 8008648:	4605      	mov	r5, r0
 800864a:	b118      	cbz	r0, 8008654 <__swbuf_r+0x12>
 800864c:	6a03      	ldr	r3, [r0, #32]
 800864e:	b90b      	cbnz	r3, 8008654 <__swbuf_r+0x12>
 8008650:	f7ff ff0e 	bl	8008470 <__sinit>
 8008654:	69a3      	ldr	r3, [r4, #24]
 8008656:	60a3      	str	r3, [r4, #8]
 8008658:	89a3      	ldrh	r3, [r4, #12]
 800865a:	071a      	lsls	r2, r3, #28
 800865c:	d501      	bpl.n	8008662 <__swbuf_r+0x20>
 800865e:	6923      	ldr	r3, [r4, #16]
 8008660:	b943      	cbnz	r3, 8008674 <__swbuf_r+0x32>
 8008662:	4621      	mov	r1, r4
 8008664:	4628      	mov	r0, r5
 8008666:	f000 f82b 	bl	80086c0 <__swsetup_r>
 800866a:	b118      	cbz	r0, 8008674 <__swbuf_r+0x32>
 800866c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008670:	4638      	mov	r0, r7
 8008672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008674:	6823      	ldr	r3, [r4, #0]
 8008676:	6922      	ldr	r2, [r4, #16]
 8008678:	1a98      	subs	r0, r3, r2
 800867a:	6963      	ldr	r3, [r4, #20]
 800867c:	b2f6      	uxtb	r6, r6
 800867e:	4283      	cmp	r3, r0
 8008680:	4637      	mov	r7, r6
 8008682:	dc05      	bgt.n	8008690 <__swbuf_r+0x4e>
 8008684:	4621      	mov	r1, r4
 8008686:	4628      	mov	r0, r5
 8008688:	f000 fd4e 	bl	8009128 <_fflush_r>
 800868c:	2800      	cmp	r0, #0
 800868e:	d1ed      	bne.n	800866c <__swbuf_r+0x2a>
 8008690:	68a3      	ldr	r3, [r4, #8]
 8008692:	3b01      	subs	r3, #1
 8008694:	60a3      	str	r3, [r4, #8]
 8008696:	6823      	ldr	r3, [r4, #0]
 8008698:	1c5a      	adds	r2, r3, #1
 800869a:	6022      	str	r2, [r4, #0]
 800869c:	701e      	strb	r6, [r3, #0]
 800869e:	6962      	ldr	r2, [r4, #20]
 80086a0:	1c43      	adds	r3, r0, #1
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d004      	beq.n	80086b0 <__swbuf_r+0x6e>
 80086a6:	89a3      	ldrh	r3, [r4, #12]
 80086a8:	07db      	lsls	r3, r3, #31
 80086aa:	d5e1      	bpl.n	8008670 <__swbuf_r+0x2e>
 80086ac:	2e0a      	cmp	r6, #10
 80086ae:	d1df      	bne.n	8008670 <__swbuf_r+0x2e>
 80086b0:	4621      	mov	r1, r4
 80086b2:	4628      	mov	r0, r5
 80086b4:	f000 fd38 	bl	8009128 <_fflush_r>
 80086b8:	2800      	cmp	r0, #0
 80086ba:	d0d9      	beq.n	8008670 <__swbuf_r+0x2e>
 80086bc:	e7d6      	b.n	800866c <__swbuf_r+0x2a>
	...

080086c0 <__swsetup_r>:
 80086c0:	b538      	push	{r3, r4, r5, lr}
 80086c2:	4b29      	ldr	r3, [pc, #164]	@ (8008768 <__swsetup_r+0xa8>)
 80086c4:	4605      	mov	r5, r0
 80086c6:	6818      	ldr	r0, [r3, #0]
 80086c8:	460c      	mov	r4, r1
 80086ca:	b118      	cbz	r0, 80086d4 <__swsetup_r+0x14>
 80086cc:	6a03      	ldr	r3, [r0, #32]
 80086ce:	b90b      	cbnz	r3, 80086d4 <__swsetup_r+0x14>
 80086d0:	f7ff fece 	bl	8008470 <__sinit>
 80086d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086d8:	0719      	lsls	r1, r3, #28
 80086da:	d422      	bmi.n	8008722 <__swsetup_r+0x62>
 80086dc:	06da      	lsls	r2, r3, #27
 80086de:	d407      	bmi.n	80086f0 <__swsetup_r+0x30>
 80086e0:	2209      	movs	r2, #9
 80086e2:	602a      	str	r2, [r5, #0]
 80086e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086e8:	81a3      	strh	r3, [r4, #12]
 80086ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80086ee:	e033      	b.n	8008758 <__swsetup_r+0x98>
 80086f0:	0758      	lsls	r0, r3, #29
 80086f2:	d512      	bpl.n	800871a <__swsetup_r+0x5a>
 80086f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086f6:	b141      	cbz	r1, 800870a <__swsetup_r+0x4a>
 80086f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086fc:	4299      	cmp	r1, r3
 80086fe:	d002      	beq.n	8008706 <__swsetup_r+0x46>
 8008700:	4628      	mov	r0, r5
 8008702:	f000 f8bd 	bl	8008880 <_free_r>
 8008706:	2300      	movs	r3, #0
 8008708:	6363      	str	r3, [r4, #52]	@ 0x34
 800870a:	89a3      	ldrh	r3, [r4, #12]
 800870c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008710:	81a3      	strh	r3, [r4, #12]
 8008712:	2300      	movs	r3, #0
 8008714:	6063      	str	r3, [r4, #4]
 8008716:	6923      	ldr	r3, [r4, #16]
 8008718:	6023      	str	r3, [r4, #0]
 800871a:	89a3      	ldrh	r3, [r4, #12]
 800871c:	f043 0308 	orr.w	r3, r3, #8
 8008720:	81a3      	strh	r3, [r4, #12]
 8008722:	6923      	ldr	r3, [r4, #16]
 8008724:	b94b      	cbnz	r3, 800873a <__swsetup_r+0x7a>
 8008726:	89a3      	ldrh	r3, [r4, #12]
 8008728:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800872c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008730:	d003      	beq.n	800873a <__swsetup_r+0x7a>
 8008732:	4621      	mov	r1, r4
 8008734:	4628      	mov	r0, r5
 8008736:	f000 fd45 	bl	80091c4 <__smakebuf_r>
 800873a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800873e:	f013 0201 	ands.w	r2, r3, #1
 8008742:	d00a      	beq.n	800875a <__swsetup_r+0x9a>
 8008744:	2200      	movs	r2, #0
 8008746:	60a2      	str	r2, [r4, #8]
 8008748:	6962      	ldr	r2, [r4, #20]
 800874a:	4252      	negs	r2, r2
 800874c:	61a2      	str	r2, [r4, #24]
 800874e:	6922      	ldr	r2, [r4, #16]
 8008750:	b942      	cbnz	r2, 8008764 <__swsetup_r+0xa4>
 8008752:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008756:	d1c5      	bne.n	80086e4 <__swsetup_r+0x24>
 8008758:	bd38      	pop	{r3, r4, r5, pc}
 800875a:	0799      	lsls	r1, r3, #30
 800875c:	bf58      	it	pl
 800875e:	6962      	ldrpl	r2, [r4, #20]
 8008760:	60a2      	str	r2, [r4, #8]
 8008762:	e7f4      	b.n	800874e <__swsetup_r+0x8e>
 8008764:	2000      	movs	r0, #0
 8008766:	e7f7      	b.n	8008758 <__swsetup_r+0x98>
 8008768:	20000024 	.word	0x20000024

0800876c <memset>:
 800876c:	4402      	add	r2, r0
 800876e:	4603      	mov	r3, r0
 8008770:	4293      	cmp	r3, r2
 8008772:	d100      	bne.n	8008776 <memset+0xa>
 8008774:	4770      	bx	lr
 8008776:	f803 1b01 	strb.w	r1, [r3], #1
 800877a:	e7f9      	b.n	8008770 <memset+0x4>

0800877c <_close_r>:
 800877c:	b538      	push	{r3, r4, r5, lr}
 800877e:	4d06      	ldr	r5, [pc, #24]	@ (8008798 <_close_r+0x1c>)
 8008780:	2300      	movs	r3, #0
 8008782:	4604      	mov	r4, r0
 8008784:	4608      	mov	r0, r1
 8008786:	602b      	str	r3, [r5, #0]
 8008788:	f7fa ff5f 	bl	800364a <_close>
 800878c:	1c43      	adds	r3, r0, #1
 800878e:	d102      	bne.n	8008796 <_close_r+0x1a>
 8008790:	682b      	ldr	r3, [r5, #0]
 8008792:	b103      	cbz	r3, 8008796 <_close_r+0x1a>
 8008794:	6023      	str	r3, [r4, #0]
 8008796:	bd38      	pop	{r3, r4, r5, pc}
 8008798:	20000d88 	.word	0x20000d88

0800879c <_lseek_r>:
 800879c:	b538      	push	{r3, r4, r5, lr}
 800879e:	4d07      	ldr	r5, [pc, #28]	@ (80087bc <_lseek_r+0x20>)
 80087a0:	4604      	mov	r4, r0
 80087a2:	4608      	mov	r0, r1
 80087a4:	4611      	mov	r1, r2
 80087a6:	2200      	movs	r2, #0
 80087a8:	602a      	str	r2, [r5, #0]
 80087aa:	461a      	mov	r2, r3
 80087ac:	f7fa ff74 	bl	8003698 <_lseek>
 80087b0:	1c43      	adds	r3, r0, #1
 80087b2:	d102      	bne.n	80087ba <_lseek_r+0x1e>
 80087b4:	682b      	ldr	r3, [r5, #0]
 80087b6:	b103      	cbz	r3, 80087ba <_lseek_r+0x1e>
 80087b8:	6023      	str	r3, [r4, #0]
 80087ba:	bd38      	pop	{r3, r4, r5, pc}
 80087bc:	20000d88 	.word	0x20000d88

080087c0 <_read_r>:
 80087c0:	b538      	push	{r3, r4, r5, lr}
 80087c2:	4d07      	ldr	r5, [pc, #28]	@ (80087e0 <_read_r+0x20>)
 80087c4:	4604      	mov	r4, r0
 80087c6:	4608      	mov	r0, r1
 80087c8:	4611      	mov	r1, r2
 80087ca:	2200      	movs	r2, #0
 80087cc:	602a      	str	r2, [r5, #0]
 80087ce:	461a      	mov	r2, r3
 80087d0:	f7fa ff02 	bl	80035d8 <_read>
 80087d4:	1c43      	adds	r3, r0, #1
 80087d6:	d102      	bne.n	80087de <_read_r+0x1e>
 80087d8:	682b      	ldr	r3, [r5, #0]
 80087da:	b103      	cbz	r3, 80087de <_read_r+0x1e>
 80087dc:	6023      	str	r3, [r4, #0]
 80087de:	bd38      	pop	{r3, r4, r5, pc}
 80087e0:	20000d88 	.word	0x20000d88

080087e4 <_write_r>:
 80087e4:	b538      	push	{r3, r4, r5, lr}
 80087e6:	4d07      	ldr	r5, [pc, #28]	@ (8008804 <_write_r+0x20>)
 80087e8:	4604      	mov	r4, r0
 80087ea:	4608      	mov	r0, r1
 80087ec:	4611      	mov	r1, r2
 80087ee:	2200      	movs	r2, #0
 80087f0:	602a      	str	r2, [r5, #0]
 80087f2:	461a      	mov	r2, r3
 80087f4:	f7fa ff0d 	bl	8003612 <_write>
 80087f8:	1c43      	adds	r3, r0, #1
 80087fa:	d102      	bne.n	8008802 <_write_r+0x1e>
 80087fc:	682b      	ldr	r3, [r5, #0]
 80087fe:	b103      	cbz	r3, 8008802 <_write_r+0x1e>
 8008800:	6023      	str	r3, [r4, #0]
 8008802:	bd38      	pop	{r3, r4, r5, pc}
 8008804:	20000d88 	.word	0x20000d88

08008808 <__errno>:
 8008808:	4b01      	ldr	r3, [pc, #4]	@ (8008810 <__errno+0x8>)
 800880a:	6818      	ldr	r0, [r3, #0]
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	20000024 	.word	0x20000024

08008814 <__libc_init_array>:
 8008814:	b570      	push	{r4, r5, r6, lr}
 8008816:	4d0d      	ldr	r5, [pc, #52]	@ (800884c <__libc_init_array+0x38>)
 8008818:	4c0d      	ldr	r4, [pc, #52]	@ (8008850 <__libc_init_array+0x3c>)
 800881a:	1b64      	subs	r4, r4, r5
 800881c:	10a4      	asrs	r4, r4, #2
 800881e:	2600      	movs	r6, #0
 8008820:	42a6      	cmp	r6, r4
 8008822:	d109      	bne.n	8008838 <__libc_init_array+0x24>
 8008824:	4d0b      	ldr	r5, [pc, #44]	@ (8008854 <__libc_init_array+0x40>)
 8008826:	4c0c      	ldr	r4, [pc, #48]	@ (8008858 <__libc_init_array+0x44>)
 8008828:	f000 fd3a 	bl	80092a0 <_init>
 800882c:	1b64      	subs	r4, r4, r5
 800882e:	10a4      	asrs	r4, r4, #2
 8008830:	2600      	movs	r6, #0
 8008832:	42a6      	cmp	r6, r4
 8008834:	d105      	bne.n	8008842 <__libc_init_array+0x2e>
 8008836:	bd70      	pop	{r4, r5, r6, pc}
 8008838:	f855 3b04 	ldr.w	r3, [r5], #4
 800883c:	4798      	blx	r3
 800883e:	3601      	adds	r6, #1
 8008840:	e7ee      	b.n	8008820 <__libc_init_array+0xc>
 8008842:	f855 3b04 	ldr.w	r3, [r5], #4
 8008846:	4798      	blx	r3
 8008848:	3601      	adds	r6, #1
 800884a:	e7f2      	b.n	8008832 <__libc_init_array+0x1e>
 800884c:	08009778 	.word	0x08009778
 8008850:	08009778 	.word	0x08009778
 8008854:	08009778 	.word	0x08009778
 8008858:	08009780 	.word	0x08009780

0800885c <__retarget_lock_init_recursive>:
 800885c:	4770      	bx	lr

0800885e <__retarget_lock_acquire_recursive>:
 800885e:	4770      	bx	lr

08008860 <__retarget_lock_release_recursive>:
 8008860:	4770      	bx	lr

08008862 <memcpy>:
 8008862:	440a      	add	r2, r1
 8008864:	4291      	cmp	r1, r2
 8008866:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800886a:	d100      	bne.n	800886e <memcpy+0xc>
 800886c:	4770      	bx	lr
 800886e:	b510      	push	{r4, lr}
 8008870:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008874:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008878:	4291      	cmp	r1, r2
 800887a:	d1f9      	bne.n	8008870 <memcpy+0xe>
 800887c:	bd10      	pop	{r4, pc}
	...

08008880 <_free_r>:
 8008880:	b538      	push	{r3, r4, r5, lr}
 8008882:	4605      	mov	r5, r0
 8008884:	2900      	cmp	r1, #0
 8008886:	d041      	beq.n	800890c <_free_r+0x8c>
 8008888:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800888c:	1f0c      	subs	r4, r1, #4
 800888e:	2b00      	cmp	r3, #0
 8008890:	bfb8      	it	lt
 8008892:	18e4      	addlt	r4, r4, r3
 8008894:	f000 f8e0 	bl	8008a58 <__malloc_lock>
 8008898:	4a1d      	ldr	r2, [pc, #116]	@ (8008910 <_free_r+0x90>)
 800889a:	6813      	ldr	r3, [r2, #0]
 800889c:	b933      	cbnz	r3, 80088ac <_free_r+0x2c>
 800889e:	6063      	str	r3, [r4, #4]
 80088a0:	6014      	str	r4, [r2, #0]
 80088a2:	4628      	mov	r0, r5
 80088a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088a8:	f000 b8dc 	b.w	8008a64 <__malloc_unlock>
 80088ac:	42a3      	cmp	r3, r4
 80088ae:	d908      	bls.n	80088c2 <_free_r+0x42>
 80088b0:	6820      	ldr	r0, [r4, #0]
 80088b2:	1821      	adds	r1, r4, r0
 80088b4:	428b      	cmp	r3, r1
 80088b6:	bf01      	itttt	eq
 80088b8:	6819      	ldreq	r1, [r3, #0]
 80088ba:	685b      	ldreq	r3, [r3, #4]
 80088bc:	1809      	addeq	r1, r1, r0
 80088be:	6021      	streq	r1, [r4, #0]
 80088c0:	e7ed      	b.n	800889e <_free_r+0x1e>
 80088c2:	461a      	mov	r2, r3
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	b10b      	cbz	r3, 80088cc <_free_r+0x4c>
 80088c8:	42a3      	cmp	r3, r4
 80088ca:	d9fa      	bls.n	80088c2 <_free_r+0x42>
 80088cc:	6811      	ldr	r1, [r2, #0]
 80088ce:	1850      	adds	r0, r2, r1
 80088d0:	42a0      	cmp	r0, r4
 80088d2:	d10b      	bne.n	80088ec <_free_r+0x6c>
 80088d4:	6820      	ldr	r0, [r4, #0]
 80088d6:	4401      	add	r1, r0
 80088d8:	1850      	adds	r0, r2, r1
 80088da:	4283      	cmp	r3, r0
 80088dc:	6011      	str	r1, [r2, #0]
 80088de:	d1e0      	bne.n	80088a2 <_free_r+0x22>
 80088e0:	6818      	ldr	r0, [r3, #0]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	6053      	str	r3, [r2, #4]
 80088e6:	4408      	add	r0, r1
 80088e8:	6010      	str	r0, [r2, #0]
 80088ea:	e7da      	b.n	80088a2 <_free_r+0x22>
 80088ec:	d902      	bls.n	80088f4 <_free_r+0x74>
 80088ee:	230c      	movs	r3, #12
 80088f0:	602b      	str	r3, [r5, #0]
 80088f2:	e7d6      	b.n	80088a2 <_free_r+0x22>
 80088f4:	6820      	ldr	r0, [r4, #0]
 80088f6:	1821      	adds	r1, r4, r0
 80088f8:	428b      	cmp	r3, r1
 80088fa:	bf04      	itt	eq
 80088fc:	6819      	ldreq	r1, [r3, #0]
 80088fe:	685b      	ldreq	r3, [r3, #4]
 8008900:	6063      	str	r3, [r4, #4]
 8008902:	bf04      	itt	eq
 8008904:	1809      	addeq	r1, r1, r0
 8008906:	6021      	streq	r1, [r4, #0]
 8008908:	6054      	str	r4, [r2, #4]
 800890a:	e7ca      	b.n	80088a2 <_free_r+0x22>
 800890c:	bd38      	pop	{r3, r4, r5, pc}
 800890e:	bf00      	nop
 8008910:	20000d94 	.word	0x20000d94

08008914 <sbrk_aligned>:
 8008914:	b570      	push	{r4, r5, r6, lr}
 8008916:	4e0f      	ldr	r6, [pc, #60]	@ (8008954 <sbrk_aligned+0x40>)
 8008918:	460c      	mov	r4, r1
 800891a:	6831      	ldr	r1, [r6, #0]
 800891c:	4605      	mov	r5, r0
 800891e:	b911      	cbnz	r1, 8008926 <sbrk_aligned+0x12>
 8008920:	f000 fcae 	bl	8009280 <_sbrk_r>
 8008924:	6030      	str	r0, [r6, #0]
 8008926:	4621      	mov	r1, r4
 8008928:	4628      	mov	r0, r5
 800892a:	f000 fca9 	bl	8009280 <_sbrk_r>
 800892e:	1c43      	adds	r3, r0, #1
 8008930:	d103      	bne.n	800893a <sbrk_aligned+0x26>
 8008932:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008936:	4620      	mov	r0, r4
 8008938:	bd70      	pop	{r4, r5, r6, pc}
 800893a:	1cc4      	adds	r4, r0, #3
 800893c:	f024 0403 	bic.w	r4, r4, #3
 8008940:	42a0      	cmp	r0, r4
 8008942:	d0f8      	beq.n	8008936 <sbrk_aligned+0x22>
 8008944:	1a21      	subs	r1, r4, r0
 8008946:	4628      	mov	r0, r5
 8008948:	f000 fc9a 	bl	8009280 <_sbrk_r>
 800894c:	3001      	adds	r0, #1
 800894e:	d1f2      	bne.n	8008936 <sbrk_aligned+0x22>
 8008950:	e7ef      	b.n	8008932 <sbrk_aligned+0x1e>
 8008952:	bf00      	nop
 8008954:	20000d90 	.word	0x20000d90

08008958 <_malloc_r>:
 8008958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800895c:	1ccd      	adds	r5, r1, #3
 800895e:	f025 0503 	bic.w	r5, r5, #3
 8008962:	3508      	adds	r5, #8
 8008964:	2d0c      	cmp	r5, #12
 8008966:	bf38      	it	cc
 8008968:	250c      	movcc	r5, #12
 800896a:	2d00      	cmp	r5, #0
 800896c:	4606      	mov	r6, r0
 800896e:	db01      	blt.n	8008974 <_malloc_r+0x1c>
 8008970:	42a9      	cmp	r1, r5
 8008972:	d904      	bls.n	800897e <_malloc_r+0x26>
 8008974:	230c      	movs	r3, #12
 8008976:	6033      	str	r3, [r6, #0]
 8008978:	2000      	movs	r0, #0
 800897a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800897e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a54 <_malloc_r+0xfc>
 8008982:	f000 f869 	bl	8008a58 <__malloc_lock>
 8008986:	f8d8 3000 	ldr.w	r3, [r8]
 800898a:	461c      	mov	r4, r3
 800898c:	bb44      	cbnz	r4, 80089e0 <_malloc_r+0x88>
 800898e:	4629      	mov	r1, r5
 8008990:	4630      	mov	r0, r6
 8008992:	f7ff ffbf 	bl	8008914 <sbrk_aligned>
 8008996:	1c43      	adds	r3, r0, #1
 8008998:	4604      	mov	r4, r0
 800899a:	d158      	bne.n	8008a4e <_malloc_r+0xf6>
 800899c:	f8d8 4000 	ldr.w	r4, [r8]
 80089a0:	4627      	mov	r7, r4
 80089a2:	2f00      	cmp	r7, #0
 80089a4:	d143      	bne.n	8008a2e <_malloc_r+0xd6>
 80089a6:	2c00      	cmp	r4, #0
 80089a8:	d04b      	beq.n	8008a42 <_malloc_r+0xea>
 80089aa:	6823      	ldr	r3, [r4, #0]
 80089ac:	4639      	mov	r1, r7
 80089ae:	4630      	mov	r0, r6
 80089b0:	eb04 0903 	add.w	r9, r4, r3
 80089b4:	f000 fc64 	bl	8009280 <_sbrk_r>
 80089b8:	4581      	cmp	r9, r0
 80089ba:	d142      	bne.n	8008a42 <_malloc_r+0xea>
 80089bc:	6821      	ldr	r1, [r4, #0]
 80089be:	1a6d      	subs	r5, r5, r1
 80089c0:	4629      	mov	r1, r5
 80089c2:	4630      	mov	r0, r6
 80089c4:	f7ff ffa6 	bl	8008914 <sbrk_aligned>
 80089c8:	3001      	adds	r0, #1
 80089ca:	d03a      	beq.n	8008a42 <_malloc_r+0xea>
 80089cc:	6823      	ldr	r3, [r4, #0]
 80089ce:	442b      	add	r3, r5
 80089d0:	6023      	str	r3, [r4, #0]
 80089d2:	f8d8 3000 	ldr.w	r3, [r8]
 80089d6:	685a      	ldr	r2, [r3, #4]
 80089d8:	bb62      	cbnz	r2, 8008a34 <_malloc_r+0xdc>
 80089da:	f8c8 7000 	str.w	r7, [r8]
 80089de:	e00f      	b.n	8008a00 <_malloc_r+0xa8>
 80089e0:	6822      	ldr	r2, [r4, #0]
 80089e2:	1b52      	subs	r2, r2, r5
 80089e4:	d420      	bmi.n	8008a28 <_malloc_r+0xd0>
 80089e6:	2a0b      	cmp	r2, #11
 80089e8:	d917      	bls.n	8008a1a <_malloc_r+0xc2>
 80089ea:	1961      	adds	r1, r4, r5
 80089ec:	42a3      	cmp	r3, r4
 80089ee:	6025      	str	r5, [r4, #0]
 80089f0:	bf18      	it	ne
 80089f2:	6059      	strne	r1, [r3, #4]
 80089f4:	6863      	ldr	r3, [r4, #4]
 80089f6:	bf08      	it	eq
 80089f8:	f8c8 1000 	streq.w	r1, [r8]
 80089fc:	5162      	str	r2, [r4, r5]
 80089fe:	604b      	str	r3, [r1, #4]
 8008a00:	4630      	mov	r0, r6
 8008a02:	f000 f82f 	bl	8008a64 <__malloc_unlock>
 8008a06:	f104 000b 	add.w	r0, r4, #11
 8008a0a:	1d23      	adds	r3, r4, #4
 8008a0c:	f020 0007 	bic.w	r0, r0, #7
 8008a10:	1ac2      	subs	r2, r0, r3
 8008a12:	bf1c      	itt	ne
 8008a14:	1a1b      	subne	r3, r3, r0
 8008a16:	50a3      	strne	r3, [r4, r2]
 8008a18:	e7af      	b.n	800897a <_malloc_r+0x22>
 8008a1a:	6862      	ldr	r2, [r4, #4]
 8008a1c:	42a3      	cmp	r3, r4
 8008a1e:	bf0c      	ite	eq
 8008a20:	f8c8 2000 	streq.w	r2, [r8]
 8008a24:	605a      	strne	r2, [r3, #4]
 8008a26:	e7eb      	b.n	8008a00 <_malloc_r+0xa8>
 8008a28:	4623      	mov	r3, r4
 8008a2a:	6864      	ldr	r4, [r4, #4]
 8008a2c:	e7ae      	b.n	800898c <_malloc_r+0x34>
 8008a2e:	463c      	mov	r4, r7
 8008a30:	687f      	ldr	r7, [r7, #4]
 8008a32:	e7b6      	b.n	80089a2 <_malloc_r+0x4a>
 8008a34:	461a      	mov	r2, r3
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	42a3      	cmp	r3, r4
 8008a3a:	d1fb      	bne.n	8008a34 <_malloc_r+0xdc>
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	6053      	str	r3, [r2, #4]
 8008a40:	e7de      	b.n	8008a00 <_malloc_r+0xa8>
 8008a42:	230c      	movs	r3, #12
 8008a44:	6033      	str	r3, [r6, #0]
 8008a46:	4630      	mov	r0, r6
 8008a48:	f000 f80c 	bl	8008a64 <__malloc_unlock>
 8008a4c:	e794      	b.n	8008978 <_malloc_r+0x20>
 8008a4e:	6005      	str	r5, [r0, #0]
 8008a50:	e7d6      	b.n	8008a00 <_malloc_r+0xa8>
 8008a52:	bf00      	nop
 8008a54:	20000d94 	.word	0x20000d94

08008a58 <__malloc_lock>:
 8008a58:	4801      	ldr	r0, [pc, #4]	@ (8008a60 <__malloc_lock+0x8>)
 8008a5a:	f7ff bf00 	b.w	800885e <__retarget_lock_acquire_recursive>
 8008a5e:	bf00      	nop
 8008a60:	20000d8c 	.word	0x20000d8c

08008a64 <__malloc_unlock>:
 8008a64:	4801      	ldr	r0, [pc, #4]	@ (8008a6c <__malloc_unlock+0x8>)
 8008a66:	f7ff befb 	b.w	8008860 <__retarget_lock_release_recursive>
 8008a6a:	bf00      	nop
 8008a6c:	20000d8c 	.word	0x20000d8c

08008a70 <_malloc_usable_size_r>:
 8008a70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a74:	1f18      	subs	r0, r3, #4
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	bfbc      	itt	lt
 8008a7a:	580b      	ldrlt	r3, [r1, r0]
 8008a7c:	18c0      	addlt	r0, r0, r3
 8008a7e:	4770      	bx	lr

08008a80 <__sfputc_r>:
 8008a80:	6893      	ldr	r3, [r2, #8]
 8008a82:	3b01      	subs	r3, #1
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	b410      	push	{r4}
 8008a88:	6093      	str	r3, [r2, #8]
 8008a8a:	da08      	bge.n	8008a9e <__sfputc_r+0x1e>
 8008a8c:	6994      	ldr	r4, [r2, #24]
 8008a8e:	42a3      	cmp	r3, r4
 8008a90:	db01      	blt.n	8008a96 <__sfputc_r+0x16>
 8008a92:	290a      	cmp	r1, #10
 8008a94:	d103      	bne.n	8008a9e <__sfputc_r+0x1e>
 8008a96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a9a:	f7ff bdd2 	b.w	8008642 <__swbuf_r>
 8008a9e:	6813      	ldr	r3, [r2, #0]
 8008aa0:	1c58      	adds	r0, r3, #1
 8008aa2:	6010      	str	r0, [r2, #0]
 8008aa4:	7019      	strb	r1, [r3, #0]
 8008aa6:	4608      	mov	r0, r1
 8008aa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008aac:	4770      	bx	lr

08008aae <__sfputs_r>:
 8008aae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab0:	4606      	mov	r6, r0
 8008ab2:	460f      	mov	r7, r1
 8008ab4:	4614      	mov	r4, r2
 8008ab6:	18d5      	adds	r5, r2, r3
 8008ab8:	42ac      	cmp	r4, r5
 8008aba:	d101      	bne.n	8008ac0 <__sfputs_r+0x12>
 8008abc:	2000      	movs	r0, #0
 8008abe:	e007      	b.n	8008ad0 <__sfputs_r+0x22>
 8008ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ac4:	463a      	mov	r2, r7
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	f7ff ffda 	bl	8008a80 <__sfputc_r>
 8008acc:	1c43      	adds	r3, r0, #1
 8008ace:	d1f3      	bne.n	8008ab8 <__sfputs_r+0xa>
 8008ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ad4 <_vfiprintf_r>:
 8008ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad8:	460d      	mov	r5, r1
 8008ada:	b09d      	sub	sp, #116	@ 0x74
 8008adc:	4614      	mov	r4, r2
 8008ade:	4698      	mov	r8, r3
 8008ae0:	4606      	mov	r6, r0
 8008ae2:	b118      	cbz	r0, 8008aec <_vfiprintf_r+0x18>
 8008ae4:	6a03      	ldr	r3, [r0, #32]
 8008ae6:	b90b      	cbnz	r3, 8008aec <_vfiprintf_r+0x18>
 8008ae8:	f7ff fcc2 	bl	8008470 <__sinit>
 8008aec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008aee:	07d9      	lsls	r1, r3, #31
 8008af0:	d405      	bmi.n	8008afe <_vfiprintf_r+0x2a>
 8008af2:	89ab      	ldrh	r3, [r5, #12]
 8008af4:	059a      	lsls	r2, r3, #22
 8008af6:	d402      	bmi.n	8008afe <_vfiprintf_r+0x2a>
 8008af8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008afa:	f7ff feb0 	bl	800885e <__retarget_lock_acquire_recursive>
 8008afe:	89ab      	ldrh	r3, [r5, #12]
 8008b00:	071b      	lsls	r3, r3, #28
 8008b02:	d501      	bpl.n	8008b08 <_vfiprintf_r+0x34>
 8008b04:	692b      	ldr	r3, [r5, #16]
 8008b06:	b99b      	cbnz	r3, 8008b30 <_vfiprintf_r+0x5c>
 8008b08:	4629      	mov	r1, r5
 8008b0a:	4630      	mov	r0, r6
 8008b0c:	f7ff fdd8 	bl	80086c0 <__swsetup_r>
 8008b10:	b170      	cbz	r0, 8008b30 <_vfiprintf_r+0x5c>
 8008b12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b14:	07dc      	lsls	r4, r3, #31
 8008b16:	d504      	bpl.n	8008b22 <_vfiprintf_r+0x4e>
 8008b18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b1c:	b01d      	add	sp, #116	@ 0x74
 8008b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b22:	89ab      	ldrh	r3, [r5, #12]
 8008b24:	0598      	lsls	r0, r3, #22
 8008b26:	d4f7      	bmi.n	8008b18 <_vfiprintf_r+0x44>
 8008b28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b2a:	f7ff fe99 	bl	8008860 <__retarget_lock_release_recursive>
 8008b2e:	e7f3      	b.n	8008b18 <_vfiprintf_r+0x44>
 8008b30:	2300      	movs	r3, #0
 8008b32:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b34:	2320      	movs	r3, #32
 8008b36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b3e:	2330      	movs	r3, #48	@ 0x30
 8008b40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008cf0 <_vfiprintf_r+0x21c>
 8008b44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b48:	f04f 0901 	mov.w	r9, #1
 8008b4c:	4623      	mov	r3, r4
 8008b4e:	469a      	mov	sl, r3
 8008b50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b54:	b10a      	cbz	r2, 8008b5a <_vfiprintf_r+0x86>
 8008b56:	2a25      	cmp	r2, #37	@ 0x25
 8008b58:	d1f9      	bne.n	8008b4e <_vfiprintf_r+0x7a>
 8008b5a:	ebba 0b04 	subs.w	fp, sl, r4
 8008b5e:	d00b      	beq.n	8008b78 <_vfiprintf_r+0xa4>
 8008b60:	465b      	mov	r3, fp
 8008b62:	4622      	mov	r2, r4
 8008b64:	4629      	mov	r1, r5
 8008b66:	4630      	mov	r0, r6
 8008b68:	f7ff ffa1 	bl	8008aae <__sfputs_r>
 8008b6c:	3001      	adds	r0, #1
 8008b6e:	f000 80a7 	beq.w	8008cc0 <_vfiprintf_r+0x1ec>
 8008b72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b74:	445a      	add	r2, fp
 8008b76:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b78:	f89a 3000 	ldrb.w	r3, [sl]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f000 809f 	beq.w	8008cc0 <_vfiprintf_r+0x1ec>
 8008b82:	2300      	movs	r3, #0
 8008b84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008b88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b8c:	f10a 0a01 	add.w	sl, sl, #1
 8008b90:	9304      	str	r3, [sp, #16]
 8008b92:	9307      	str	r3, [sp, #28]
 8008b94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b98:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b9a:	4654      	mov	r4, sl
 8008b9c:	2205      	movs	r2, #5
 8008b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ba2:	4853      	ldr	r0, [pc, #332]	@ (8008cf0 <_vfiprintf_r+0x21c>)
 8008ba4:	f7f7 fb24 	bl	80001f0 <memchr>
 8008ba8:	9a04      	ldr	r2, [sp, #16]
 8008baa:	b9d8      	cbnz	r0, 8008be4 <_vfiprintf_r+0x110>
 8008bac:	06d1      	lsls	r1, r2, #27
 8008bae:	bf44      	itt	mi
 8008bb0:	2320      	movmi	r3, #32
 8008bb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bb6:	0713      	lsls	r3, r2, #28
 8008bb8:	bf44      	itt	mi
 8008bba:	232b      	movmi	r3, #43	@ 0x2b
 8008bbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bc0:	f89a 3000 	ldrb.w	r3, [sl]
 8008bc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bc6:	d015      	beq.n	8008bf4 <_vfiprintf_r+0x120>
 8008bc8:	9a07      	ldr	r2, [sp, #28]
 8008bca:	4654      	mov	r4, sl
 8008bcc:	2000      	movs	r0, #0
 8008bce:	f04f 0c0a 	mov.w	ip, #10
 8008bd2:	4621      	mov	r1, r4
 8008bd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bd8:	3b30      	subs	r3, #48	@ 0x30
 8008bda:	2b09      	cmp	r3, #9
 8008bdc:	d94b      	bls.n	8008c76 <_vfiprintf_r+0x1a2>
 8008bde:	b1b0      	cbz	r0, 8008c0e <_vfiprintf_r+0x13a>
 8008be0:	9207      	str	r2, [sp, #28]
 8008be2:	e014      	b.n	8008c0e <_vfiprintf_r+0x13a>
 8008be4:	eba0 0308 	sub.w	r3, r0, r8
 8008be8:	fa09 f303 	lsl.w	r3, r9, r3
 8008bec:	4313      	orrs	r3, r2
 8008bee:	9304      	str	r3, [sp, #16]
 8008bf0:	46a2      	mov	sl, r4
 8008bf2:	e7d2      	b.n	8008b9a <_vfiprintf_r+0xc6>
 8008bf4:	9b03      	ldr	r3, [sp, #12]
 8008bf6:	1d19      	adds	r1, r3, #4
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	9103      	str	r1, [sp, #12]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	bfbb      	ittet	lt
 8008c00:	425b      	neglt	r3, r3
 8008c02:	f042 0202 	orrlt.w	r2, r2, #2
 8008c06:	9307      	strge	r3, [sp, #28]
 8008c08:	9307      	strlt	r3, [sp, #28]
 8008c0a:	bfb8      	it	lt
 8008c0c:	9204      	strlt	r2, [sp, #16]
 8008c0e:	7823      	ldrb	r3, [r4, #0]
 8008c10:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c12:	d10a      	bne.n	8008c2a <_vfiprintf_r+0x156>
 8008c14:	7863      	ldrb	r3, [r4, #1]
 8008c16:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c18:	d132      	bne.n	8008c80 <_vfiprintf_r+0x1ac>
 8008c1a:	9b03      	ldr	r3, [sp, #12]
 8008c1c:	1d1a      	adds	r2, r3, #4
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	9203      	str	r2, [sp, #12]
 8008c22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c26:	3402      	adds	r4, #2
 8008c28:	9305      	str	r3, [sp, #20]
 8008c2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008d00 <_vfiprintf_r+0x22c>
 8008c2e:	7821      	ldrb	r1, [r4, #0]
 8008c30:	2203      	movs	r2, #3
 8008c32:	4650      	mov	r0, sl
 8008c34:	f7f7 fadc 	bl	80001f0 <memchr>
 8008c38:	b138      	cbz	r0, 8008c4a <_vfiprintf_r+0x176>
 8008c3a:	9b04      	ldr	r3, [sp, #16]
 8008c3c:	eba0 000a 	sub.w	r0, r0, sl
 8008c40:	2240      	movs	r2, #64	@ 0x40
 8008c42:	4082      	lsls	r2, r0
 8008c44:	4313      	orrs	r3, r2
 8008c46:	3401      	adds	r4, #1
 8008c48:	9304      	str	r3, [sp, #16]
 8008c4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c4e:	4829      	ldr	r0, [pc, #164]	@ (8008cf4 <_vfiprintf_r+0x220>)
 8008c50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c54:	2206      	movs	r2, #6
 8008c56:	f7f7 facb 	bl	80001f0 <memchr>
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	d03f      	beq.n	8008cde <_vfiprintf_r+0x20a>
 8008c5e:	4b26      	ldr	r3, [pc, #152]	@ (8008cf8 <_vfiprintf_r+0x224>)
 8008c60:	bb1b      	cbnz	r3, 8008caa <_vfiprintf_r+0x1d6>
 8008c62:	9b03      	ldr	r3, [sp, #12]
 8008c64:	3307      	adds	r3, #7
 8008c66:	f023 0307 	bic.w	r3, r3, #7
 8008c6a:	3308      	adds	r3, #8
 8008c6c:	9303      	str	r3, [sp, #12]
 8008c6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c70:	443b      	add	r3, r7
 8008c72:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c74:	e76a      	b.n	8008b4c <_vfiprintf_r+0x78>
 8008c76:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c7a:	460c      	mov	r4, r1
 8008c7c:	2001      	movs	r0, #1
 8008c7e:	e7a8      	b.n	8008bd2 <_vfiprintf_r+0xfe>
 8008c80:	2300      	movs	r3, #0
 8008c82:	3401      	adds	r4, #1
 8008c84:	9305      	str	r3, [sp, #20]
 8008c86:	4619      	mov	r1, r3
 8008c88:	f04f 0c0a 	mov.w	ip, #10
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c92:	3a30      	subs	r2, #48	@ 0x30
 8008c94:	2a09      	cmp	r2, #9
 8008c96:	d903      	bls.n	8008ca0 <_vfiprintf_r+0x1cc>
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d0c6      	beq.n	8008c2a <_vfiprintf_r+0x156>
 8008c9c:	9105      	str	r1, [sp, #20]
 8008c9e:	e7c4      	b.n	8008c2a <_vfiprintf_r+0x156>
 8008ca0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ca4:	4604      	mov	r4, r0
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e7f0      	b.n	8008c8c <_vfiprintf_r+0x1b8>
 8008caa:	ab03      	add	r3, sp, #12
 8008cac:	9300      	str	r3, [sp, #0]
 8008cae:	462a      	mov	r2, r5
 8008cb0:	4b12      	ldr	r3, [pc, #72]	@ (8008cfc <_vfiprintf_r+0x228>)
 8008cb2:	a904      	add	r1, sp, #16
 8008cb4:	4630      	mov	r0, r6
 8008cb6:	f3af 8000 	nop.w
 8008cba:	4607      	mov	r7, r0
 8008cbc:	1c78      	adds	r0, r7, #1
 8008cbe:	d1d6      	bne.n	8008c6e <_vfiprintf_r+0x19a>
 8008cc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cc2:	07d9      	lsls	r1, r3, #31
 8008cc4:	d405      	bmi.n	8008cd2 <_vfiprintf_r+0x1fe>
 8008cc6:	89ab      	ldrh	r3, [r5, #12]
 8008cc8:	059a      	lsls	r2, r3, #22
 8008cca:	d402      	bmi.n	8008cd2 <_vfiprintf_r+0x1fe>
 8008ccc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cce:	f7ff fdc7 	bl	8008860 <__retarget_lock_release_recursive>
 8008cd2:	89ab      	ldrh	r3, [r5, #12]
 8008cd4:	065b      	lsls	r3, r3, #25
 8008cd6:	f53f af1f 	bmi.w	8008b18 <_vfiprintf_r+0x44>
 8008cda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008cdc:	e71e      	b.n	8008b1c <_vfiprintf_r+0x48>
 8008cde:	ab03      	add	r3, sp, #12
 8008ce0:	9300      	str	r3, [sp, #0]
 8008ce2:	462a      	mov	r2, r5
 8008ce4:	4b05      	ldr	r3, [pc, #20]	@ (8008cfc <_vfiprintf_r+0x228>)
 8008ce6:	a904      	add	r1, sp, #16
 8008ce8:	4630      	mov	r0, r6
 8008cea:	f000 f879 	bl	8008de0 <_printf_i>
 8008cee:	e7e4      	b.n	8008cba <_vfiprintf_r+0x1e6>
 8008cf0:	0800973c 	.word	0x0800973c
 8008cf4:	08009746 	.word	0x08009746
 8008cf8:	00000000 	.word	0x00000000
 8008cfc:	08008aaf 	.word	0x08008aaf
 8008d00:	08009742 	.word	0x08009742

08008d04 <_printf_common>:
 8008d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d08:	4616      	mov	r6, r2
 8008d0a:	4698      	mov	r8, r3
 8008d0c:	688a      	ldr	r2, [r1, #8]
 8008d0e:	690b      	ldr	r3, [r1, #16]
 8008d10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d14:	4293      	cmp	r3, r2
 8008d16:	bfb8      	it	lt
 8008d18:	4613      	movlt	r3, r2
 8008d1a:	6033      	str	r3, [r6, #0]
 8008d1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d20:	4607      	mov	r7, r0
 8008d22:	460c      	mov	r4, r1
 8008d24:	b10a      	cbz	r2, 8008d2a <_printf_common+0x26>
 8008d26:	3301      	adds	r3, #1
 8008d28:	6033      	str	r3, [r6, #0]
 8008d2a:	6823      	ldr	r3, [r4, #0]
 8008d2c:	0699      	lsls	r1, r3, #26
 8008d2e:	bf42      	ittt	mi
 8008d30:	6833      	ldrmi	r3, [r6, #0]
 8008d32:	3302      	addmi	r3, #2
 8008d34:	6033      	strmi	r3, [r6, #0]
 8008d36:	6825      	ldr	r5, [r4, #0]
 8008d38:	f015 0506 	ands.w	r5, r5, #6
 8008d3c:	d106      	bne.n	8008d4c <_printf_common+0x48>
 8008d3e:	f104 0a19 	add.w	sl, r4, #25
 8008d42:	68e3      	ldr	r3, [r4, #12]
 8008d44:	6832      	ldr	r2, [r6, #0]
 8008d46:	1a9b      	subs	r3, r3, r2
 8008d48:	42ab      	cmp	r3, r5
 8008d4a:	dc26      	bgt.n	8008d9a <_printf_common+0x96>
 8008d4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d50:	6822      	ldr	r2, [r4, #0]
 8008d52:	3b00      	subs	r3, #0
 8008d54:	bf18      	it	ne
 8008d56:	2301      	movne	r3, #1
 8008d58:	0692      	lsls	r2, r2, #26
 8008d5a:	d42b      	bmi.n	8008db4 <_printf_common+0xb0>
 8008d5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d60:	4641      	mov	r1, r8
 8008d62:	4638      	mov	r0, r7
 8008d64:	47c8      	blx	r9
 8008d66:	3001      	adds	r0, #1
 8008d68:	d01e      	beq.n	8008da8 <_printf_common+0xa4>
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	6922      	ldr	r2, [r4, #16]
 8008d6e:	f003 0306 	and.w	r3, r3, #6
 8008d72:	2b04      	cmp	r3, #4
 8008d74:	bf02      	ittt	eq
 8008d76:	68e5      	ldreq	r5, [r4, #12]
 8008d78:	6833      	ldreq	r3, [r6, #0]
 8008d7a:	1aed      	subeq	r5, r5, r3
 8008d7c:	68a3      	ldr	r3, [r4, #8]
 8008d7e:	bf0c      	ite	eq
 8008d80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d84:	2500      	movne	r5, #0
 8008d86:	4293      	cmp	r3, r2
 8008d88:	bfc4      	itt	gt
 8008d8a:	1a9b      	subgt	r3, r3, r2
 8008d8c:	18ed      	addgt	r5, r5, r3
 8008d8e:	2600      	movs	r6, #0
 8008d90:	341a      	adds	r4, #26
 8008d92:	42b5      	cmp	r5, r6
 8008d94:	d11a      	bne.n	8008dcc <_printf_common+0xc8>
 8008d96:	2000      	movs	r0, #0
 8008d98:	e008      	b.n	8008dac <_printf_common+0xa8>
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	4652      	mov	r2, sl
 8008d9e:	4641      	mov	r1, r8
 8008da0:	4638      	mov	r0, r7
 8008da2:	47c8      	blx	r9
 8008da4:	3001      	adds	r0, #1
 8008da6:	d103      	bne.n	8008db0 <_printf_common+0xac>
 8008da8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008db0:	3501      	adds	r5, #1
 8008db2:	e7c6      	b.n	8008d42 <_printf_common+0x3e>
 8008db4:	18e1      	adds	r1, r4, r3
 8008db6:	1c5a      	adds	r2, r3, #1
 8008db8:	2030      	movs	r0, #48	@ 0x30
 8008dba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008dbe:	4422      	add	r2, r4
 8008dc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008dc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008dc8:	3302      	adds	r3, #2
 8008dca:	e7c7      	b.n	8008d5c <_printf_common+0x58>
 8008dcc:	2301      	movs	r3, #1
 8008dce:	4622      	mov	r2, r4
 8008dd0:	4641      	mov	r1, r8
 8008dd2:	4638      	mov	r0, r7
 8008dd4:	47c8      	blx	r9
 8008dd6:	3001      	adds	r0, #1
 8008dd8:	d0e6      	beq.n	8008da8 <_printf_common+0xa4>
 8008dda:	3601      	adds	r6, #1
 8008ddc:	e7d9      	b.n	8008d92 <_printf_common+0x8e>
	...

08008de0 <_printf_i>:
 8008de0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008de4:	7e0f      	ldrb	r7, [r1, #24]
 8008de6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008de8:	2f78      	cmp	r7, #120	@ 0x78
 8008dea:	4691      	mov	r9, r2
 8008dec:	4680      	mov	r8, r0
 8008dee:	460c      	mov	r4, r1
 8008df0:	469a      	mov	sl, r3
 8008df2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008df6:	d807      	bhi.n	8008e08 <_printf_i+0x28>
 8008df8:	2f62      	cmp	r7, #98	@ 0x62
 8008dfa:	d80a      	bhi.n	8008e12 <_printf_i+0x32>
 8008dfc:	2f00      	cmp	r7, #0
 8008dfe:	f000 80d2 	beq.w	8008fa6 <_printf_i+0x1c6>
 8008e02:	2f58      	cmp	r7, #88	@ 0x58
 8008e04:	f000 80b9 	beq.w	8008f7a <_printf_i+0x19a>
 8008e08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e10:	e03a      	b.n	8008e88 <_printf_i+0xa8>
 8008e12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e16:	2b15      	cmp	r3, #21
 8008e18:	d8f6      	bhi.n	8008e08 <_printf_i+0x28>
 8008e1a:	a101      	add	r1, pc, #4	@ (adr r1, 8008e20 <_printf_i+0x40>)
 8008e1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e20:	08008e79 	.word	0x08008e79
 8008e24:	08008e8d 	.word	0x08008e8d
 8008e28:	08008e09 	.word	0x08008e09
 8008e2c:	08008e09 	.word	0x08008e09
 8008e30:	08008e09 	.word	0x08008e09
 8008e34:	08008e09 	.word	0x08008e09
 8008e38:	08008e8d 	.word	0x08008e8d
 8008e3c:	08008e09 	.word	0x08008e09
 8008e40:	08008e09 	.word	0x08008e09
 8008e44:	08008e09 	.word	0x08008e09
 8008e48:	08008e09 	.word	0x08008e09
 8008e4c:	08008f8d 	.word	0x08008f8d
 8008e50:	08008eb7 	.word	0x08008eb7
 8008e54:	08008f47 	.word	0x08008f47
 8008e58:	08008e09 	.word	0x08008e09
 8008e5c:	08008e09 	.word	0x08008e09
 8008e60:	08008faf 	.word	0x08008faf
 8008e64:	08008e09 	.word	0x08008e09
 8008e68:	08008eb7 	.word	0x08008eb7
 8008e6c:	08008e09 	.word	0x08008e09
 8008e70:	08008e09 	.word	0x08008e09
 8008e74:	08008f4f 	.word	0x08008f4f
 8008e78:	6833      	ldr	r3, [r6, #0]
 8008e7a:	1d1a      	adds	r2, r3, #4
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	6032      	str	r2, [r6, #0]
 8008e80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e09d      	b.n	8008fc8 <_printf_i+0x1e8>
 8008e8c:	6833      	ldr	r3, [r6, #0]
 8008e8e:	6820      	ldr	r0, [r4, #0]
 8008e90:	1d19      	adds	r1, r3, #4
 8008e92:	6031      	str	r1, [r6, #0]
 8008e94:	0606      	lsls	r6, r0, #24
 8008e96:	d501      	bpl.n	8008e9c <_printf_i+0xbc>
 8008e98:	681d      	ldr	r5, [r3, #0]
 8008e9a:	e003      	b.n	8008ea4 <_printf_i+0xc4>
 8008e9c:	0645      	lsls	r5, r0, #25
 8008e9e:	d5fb      	bpl.n	8008e98 <_printf_i+0xb8>
 8008ea0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ea4:	2d00      	cmp	r5, #0
 8008ea6:	da03      	bge.n	8008eb0 <_printf_i+0xd0>
 8008ea8:	232d      	movs	r3, #45	@ 0x2d
 8008eaa:	426d      	negs	r5, r5
 8008eac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008eb0:	4859      	ldr	r0, [pc, #356]	@ (8009018 <_printf_i+0x238>)
 8008eb2:	230a      	movs	r3, #10
 8008eb4:	e011      	b.n	8008eda <_printf_i+0xfa>
 8008eb6:	6821      	ldr	r1, [r4, #0]
 8008eb8:	6833      	ldr	r3, [r6, #0]
 8008eba:	0608      	lsls	r0, r1, #24
 8008ebc:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ec0:	d402      	bmi.n	8008ec8 <_printf_i+0xe8>
 8008ec2:	0649      	lsls	r1, r1, #25
 8008ec4:	bf48      	it	mi
 8008ec6:	b2ad      	uxthmi	r5, r5
 8008ec8:	2f6f      	cmp	r7, #111	@ 0x6f
 8008eca:	4853      	ldr	r0, [pc, #332]	@ (8009018 <_printf_i+0x238>)
 8008ecc:	6033      	str	r3, [r6, #0]
 8008ece:	bf14      	ite	ne
 8008ed0:	230a      	movne	r3, #10
 8008ed2:	2308      	moveq	r3, #8
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008eda:	6866      	ldr	r6, [r4, #4]
 8008edc:	60a6      	str	r6, [r4, #8]
 8008ede:	2e00      	cmp	r6, #0
 8008ee0:	bfa2      	ittt	ge
 8008ee2:	6821      	ldrge	r1, [r4, #0]
 8008ee4:	f021 0104 	bicge.w	r1, r1, #4
 8008ee8:	6021      	strge	r1, [r4, #0]
 8008eea:	b90d      	cbnz	r5, 8008ef0 <_printf_i+0x110>
 8008eec:	2e00      	cmp	r6, #0
 8008eee:	d04b      	beq.n	8008f88 <_printf_i+0x1a8>
 8008ef0:	4616      	mov	r6, r2
 8008ef2:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ef6:	fb03 5711 	mls	r7, r3, r1, r5
 8008efa:	5dc7      	ldrb	r7, [r0, r7]
 8008efc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f00:	462f      	mov	r7, r5
 8008f02:	42bb      	cmp	r3, r7
 8008f04:	460d      	mov	r5, r1
 8008f06:	d9f4      	bls.n	8008ef2 <_printf_i+0x112>
 8008f08:	2b08      	cmp	r3, #8
 8008f0a:	d10b      	bne.n	8008f24 <_printf_i+0x144>
 8008f0c:	6823      	ldr	r3, [r4, #0]
 8008f0e:	07df      	lsls	r7, r3, #31
 8008f10:	d508      	bpl.n	8008f24 <_printf_i+0x144>
 8008f12:	6923      	ldr	r3, [r4, #16]
 8008f14:	6861      	ldr	r1, [r4, #4]
 8008f16:	4299      	cmp	r1, r3
 8008f18:	bfde      	ittt	le
 8008f1a:	2330      	movle	r3, #48	@ 0x30
 8008f1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f20:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008f24:	1b92      	subs	r2, r2, r6
 8008f26:	6122      	str	r2, [r4, #16]
 8008f28:	f8cd a000 	str.w	sl, [sp]
 8008f2c:	464b      	mov	r3, r9
 8008f2e:	aa03      	add	r2, sp, #12
 8008f30:	4621      	mov	r1, r4
 8008f32:	4640      	mov	r0, r8
 8008f34:	f7ff fee6 	bl	8008d04 <_printf_common>
 8008f38:	3001      	adds	r0, #1
 8008f3a:	d14a      	bne.n	8008fd2 <_printf_i+0x1f2>
 8008f3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f40:	b004      	add	sp, #16
 8008f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f46:	6823      	ldr	r3, [r4, #0]
 8008f48:	f043 0320 	orr.w	r3, r3, #32
 8008f4c:	6023      	str	r3, [r4, #0]
 8008f4e:	4833      	ldr	r0, [pc, #204]	@ (800901c <_printf_i+0x23c>)
 8008f50:	2778      	movs	r7, #120	@ 0x78
 8008f52:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008f56:	6823      	ldr	r3, [r4, #0]
 8008f58:	6831      	ldr	r1, [r6, #0]
 8008f5a:	061f      	lsls	r7, r3, #24
 8008f5c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f60:	d402      	bmi.n	8008f68 <_printf_i+0x188>
 8008f62:	065f      	lsls	r7, r3, #25
 8008f64:	bf48      	it	mi
 8008f66:	b2ad      	uxthmi	r5, r5
 8008f68:	6031      	str	r1, [r6, #0]
 8008f6a:	07d9      	lsls	r1, r3, #31
 8008f6c:	bf44      	itt	mi
 8008f6e:	f043 0320 	orrmi.w	r3, r3, #32
 8008f72:	6023      	strmi	r3, [r4, #0]
 8008f74:	b11d      	cbz	r5, 8008f7e <_printf_i+0x19e>
 8008f76:	2310      	movs	r3, #16
 8008f78:	e7ac      	b.n	8008ed4 <_printf_i+0xf4>
 8008f7a:	4827      	ldr	r0, [pc, #156]	@ (8009018 <_printf_i+0x238>)
 8008f7c:	e7e9      	b.n	8008f52 <_printf_i+0x172>
 8008f7e:	6823      	ldr	r3, [r4, #0]
 8008f80:	f023 0320 	bic.w	r3, r3, #32
 8008f84:	6023      	str	r3, [r4, #0]
 8008f86:	e7f6      	b.n	8008f76 <_printf_i+0x196>
 8008f88:	4616      	mov	r6, r2
 8008f8a:	e7bd      	b.n	8008f08 <_printf_i+0x128>
 8008f8c:	6833      	ldr	r3, [r6, #0]
 8008f8e:	6825      	ldr	r5, [r4, #0]
 8008f90:	6961      	ldr	r1, [r4, #20]
 8008f92:	1d18      	adds	r0, r3, #4
 8008f94:	6030      	str	r0, [r6, #0]
 8008f96:	062e      	lsls	r6, r5, #24
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	d501      	bpl.n	8008fa0 <_printf_i+0x1c0>
 8008f9c:	6019      	str	r1, [r3, #0]
 8008f9e:	e002      	b.n	8008fa6 <_printf_i+0x1c6>
 8008fa0:	0668      	lsls	r0, r5, #25
 8008fa2:	d5fb      	bpl.n	8008f9c <_printf_i+0x1bc>
 8008fa4:	8019      	strh	r1, [r3, #0]
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	6123      	str	r3, [r4, #16]
 8008faa:	4616      	mov	r6, r2
 8008fac:	e7bc      	b.n	8008f28 <_printf_i+0x148>
 8008fae:	6833      	ldr	r3, [r6, #0]
 8008fb0:	1d1a      	adds	r2, r3, #4
 8008fb2:	6032      	str	r2, [r6, #0]
 8008fb4:	681e      	ldr	r6, [r3, #0]
 8008fb6:	6862      	ldr	r2, [r4, #4]
 8008fb8:	2100      	movs	r1, #0
 8008fba:	4630      	mov	r0, r6
 8008fbc:	f7f7 f918 	bl	80001f0 <memchr>
 8008fc0:	b108      	cbz	r0, 8008fc6 <_printf_i+0x1e6>
 8008fc2:	1b80      	subs	r0, r0, r6
 8008fc4:	6060      	str	r0, [r4, #4]
 8008fc6:	6863      	ldr	r3, [r4, #4]
 8008fc8:	6123      	str	r3, [r4, #16]
 8008fca:	2300      	movs	r3, #0
 8008fcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fd0:	e7aa      	b.n	8008f28 <_printf_i+0x148>
 8008fd2:	6923      	ldr	r3, [r4, #16]
 8008fd4:	4632      	mov	r2, r6
 8008fd6:	4649      	mov	r1, r9
 8008fd8:	4640      	mov	r0, r8
 8008fda:	47d0      	blx	sl
 8008fdc:	3001      	adds	r0, #1
 8008fde:	d0ad      	beq.n	8008f3c <_printf_i+0x15c>
 8008fe0:	6823      	ldr	r3, [r4, #0]
 8008fe2:	079b      	lsls	r3, r3, #30
 8008fe4:	d413      	bmi.n	800900e <_printf_i+0x22e>
 8008fe6:	68e0      	ldr	r0, [r4, #12]
 8008fe8:	9b03      	ldr	r3, [sp, #12]
 8008fea:	4298      	cmp	r0, r3
 8008fec:	bfb8      	it	lt
 8008fee:	4618      	movlt	r0, r3
 8008ff0:	e7a6      	b.n	8008f40 <_printf_i+0x160>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	4632      	mov	r2, r6
 8008ff6:	4649      	mov	r1, r9
 8008ff8:	4640      	mov	r0, r8
 8008ffa:	47d0      	blx	sl
 8008ffc:	3001      	adds	r0, #1
 8008ffe:	d09d      	beq.n	8008f3c <_printf_i+0x15c>
 8009000:	3501      	adds	r5, #1
 8009002:	68e3      	ldr	r3, [r4, #12]
 8009004:	9903      	ldr	r1, [sp, #12]
 8009006:	1a5b      	subs	r3, r3, r1
 8009008:	42ab      	cmp	r3, r5
 800900a:	dcf2      	bgt.n	8008ff2 <_printf_i+0x212>
 800900c:	e7eb      	b.n	8008fe6 <_printf_i+0x206>
 800900e:	2500      	movs	r5, #0
 8009010:	f104 0619 	add.w	r6, r4, #25
 8009014:	e7f5      	b.n	8009002 <_printf_i+0x222>
 8009016:	bf00      	nop
 8009018:	0800974d 	.word	0x0800974d
 800901c:	0800975e 	.word	0x0800975e

08009020 <__sflush_r>:
 8009020:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009028:	0716      	lsls	r6, r2, #28
 800902a:	4605      	mov	r5, r0
 800902c:	460c      	mov	r4, r1
 800902e:	d454      	bmi.n	80090da <__sflush_r+0xba>
 8009030:	684b      	ldr	r3, [r1, #4]
 8009032:	2b00      	cmp	r3, #0
 8009034:	dc02      	bgt.n	800903c <__sflush_r+0x1c>
 8009036:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009038:	2b00      	cmp	r3, #0
 800903a:	dd48      	ble.n	80090ce <__sflush_r+0xae>
 800903c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800903e:	2e00      	cmp	r6, #0
 8009040:	d045      	beq.n	80090ce <__sflush_r+0xae>
 8009042:	2300      	movs	r3, #0
 8009044:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009048:	682f      	ldr	r7, [r5, #0]
 800904a:	6a21      	ldr	r1, [r4, #32]
 800904c:	602b      	str	r3, [r5, #0]
 800904e:	d030      	beq.n	80090b2 <__sflush_r+0x92>
 8009050:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009052:	89a3      	ldrh	r3, [r4, #12]
 8009054:	0759      	lsls	r1, r3, #29
 8009056:	d505      	bpl.n	8009064 <__sflush_r+0x44>
 8009058:	6863      	ldr	r3, [r4, #4]
 800905a:	1ad2      	subs	r2, r2, r3
 800905c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800905e:	b10b      	cbz	r3, 8009064 <__sflush_r+0x44>
 8009060:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009062:	1ad2      	subs	r2, r2, r3
 8009064:	2300      	movs	r3, #0
 8009066:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009068:	6a21      	ldr	r1, [r4, #32]
 800906a:	4628      	mov	r0, r5
 800906c:	47b0      	blx	r6
 800906e:	1c43      	adds	r3, r0, #1
 8009070:	89a3      	ldrh	r3, [r4, #12]
 8009072:	d106      	bne.n	8009082 <__sflush_r+0x62>
 8009074:	6829      	ldr	r1, [r5, #0]
 8009076:	291d      	cmp	r1, #29
 8009078:	d82b      	bhi.n	80090d2 <__sflush_r+0xb2>
 800907a:	4a2a      	ldr	r2, [pc, #168]	@ (8009124 <__sflush_r+0x104>)
 800907c:	410a      	asrs	r2, r1
 800907e:	07d6      	lsls	r6, r2, #31
 8009080:	d427      	bmi.n	80090d2 <__sflush_r+0xb2>
 8009082:	2200      	movs	r2, #0
 8009084:	6062      	str	r2, [r4, #4]
 8009086:	04d9      	lsls	r1, r3, #19
 8009088:	6922      	ldr	r2, [r4, #16]
 800908a:	6022      	str	r2, [r4, #0]
 800908c:	d504      	bpl.n	8009098 <__sflush_r+0x78>
 800908e:	1c42      	adds	r2, r0, #1
 8009090:	d101      	bne.n	8009096 <__sflush_r+0x76>
 8009092:	682b      	ldr	r3, [r5, #0]
 8009094:	b903      	cbnz	r3, 8009098 <__sflush_r+0x78>
 8009096:	6560      	str	r0, [r4, #84]	@ 0x54
 8009098:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800909a:	602f      	str	r7, [r5, #0]
 800909c:	b1b9      	cbz	r1, 80090ce <__sflush_r+0xae>
 800909e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80090a2:	4299      	cmp	r1, r3
 80090a4:	d002      	beq.n	80090ac <__sflush_r+0x8c>
 80090a6:	4628      	mov	r0, r5
 80090a8:	f7ff fbea 	bl	8008880 <_free_r>
 80090ac:	2300      	movs	r3, #0
 80090ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80090b0:	e00d      	b.n	80090ce <__sflush_r+0xae>
 80090b2:	2301      	movs	r3, #1
 80090b4:	4628      	mov	r0, r5
 80090b6:	47b0      	blx	r6
 80090b8:	4602      	mov	r2, r0
 80090ba:	1c50      	adds	r0, r2, #1
 80090bc:	d1c9      	bne.n	8009052 <__sflush_r+0x32>
 80090be:	682b      	ldr	r3, [r5, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d0c6      	beq.n	8009052 <__sflush_r+0x32>
 80090c4:	2b1d      	cmp	r3, #29
 80090c6:	d001      	beq.n	80090cc <__sflush_r+0xac>
 80090c8:	2b16      	cmp	r3, #22
 80090ca:	d11e      	bne.n	800910a <__sflush_r+0xea>
 80090cc:	602f      	str	r7, [r5, #0]
 80090ce:	2000      	movs	r0, #0
 80090d0:	e022      	b.n	8009118 <__sflush_r+0xf8>
 80090d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090d6:	b21b      	sxth	r3, r3
 80090d8:	e01b      	b.n	8009112 <__sflush_r+0xf2>
 80090da:	690f      	ldr	r7, [r1, #16]
 80090dc:	2f00      	cmp	r7, #0
 80090de:	d0f6      	beq.n	80090ce <__sflush_r+0xae>
 80090e0:	0793      	lsls	r3, r2, #30
 80090e2:	680e      	ldr	r6, [r1, #0]
 80090e4:	bf08      	it	eq
 80090e6:	694b      	ldreq	r3, [r1, #20]
 80090e8:	600f      	str	r7, [r1, #0]
 80090ea:	bf18      	it	ne
 80090ec:	2300      	movne	r3, #0
 80090ee:	eba6 0807 	sub.w	r8, r6, r7
 80090f2:	608b      	str	r3, [r1, #8]
 80090f4:	f1b8 0f00 	cmp.w	r8, #0
 80090f8:	dde9      	ble.n	80090ce <__sflush_r+0xae>
 80090fa:	6a21      	ldr	r1, [r4, #32]
 80090fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80090fe:	4643      	mov	r3, r8
 8009100:	463a      	mov	r2, r7
 8009102:	4628      	mov	r0, r5
 8009104:	47b0      	blx	r6
 8009106:	2800      	cmp	r0, #0
 8009108:	dc08      	bgt.n	800911c <__sflush_r+0xfc>
 800910a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800910e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009112:	81a3      	strh	r3, [r4, #12]
 8009114:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800911c:	4407      	add	r7, r0
 800911e:	eba8 0800 	sub.w	r8, r8, r0
 8009122:	e7e7      	b.n	80090f4 <__sflush_r+0xd4>
 8009124:	dfbffffe 	.word	0xdfbffffe

08009128 <_fflush_r>:
 8009128:	b538      	push	{r3, r4, r5, lr}
 800912a:	690b      	ldr	r3, [r1, #16]
 800912c:	4605      	mov	r5, r0
 800912e:	460c      	mov	r4, r1
 8009130:	b913      	cbnz	r3, 8009138 <_fflush_r+0x10>
 8009132:	2500      	movs	r5, #0
 8009134:	4628      	mov	r0, r5
 8009136:	bd38      	pop	{r3, r4, r5, pc}
 8009138:	b118      	cbz	r0, 8009142 <_fflush_r+0x1a>
 800913a:	6a03      	ldr	r3, [r0, #32]
 800913c:	b90b      	cbnz	r3, 8009142 <_fflush_r+0x1a>
 800913e:	f7ff f997 	bl	8008470 <__sinit>
 8009142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d0f3      	beq.n	8009132 <_fflush_r+0xa>
 800914a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800914c:	07d0      	lsls	r0, r2, #31
 800914e:	d404      	bmi.n	800915a <_fflush_r+0x32>
 8009150:	0599      	lsls	r1, r3, #22
 8009152:	d402      	bmi.n	800915a <_fflush_r+0x32>
 8009154:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009156:	f7ff fb82 	bl	800885e <__retarget_lock_acquire_recursive>
 800915a:	4628      	mov	r0, r5
 800915c:	4621      	mov	r1, r4
 800915e:	f7ff ff5f 	bl	8009020 <__sflush_r>
 8009162:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009164:	07da      	lsls	r2, r3, #31
 8009166:	4605      	mov	r5, r0
 8009168:	d4e4      	bmi.n	8009134 <_fflush_r+0xc>
 800916a:	89a3      	ldrh	r3, [r4, #12]
 800916c:	059b      	lsls	r3, r3, #22
 800916e:	d4e1      	bmi.n	8009134 <_fflush_r+0xc>
 8009170:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009172:	f7ff fb75 	bl	8008860 <__retarget_lock_release_recursive>
 8009176:	e7dd      	b.n	8009134 <_fflush_r+0xc>

08009178 <__swhatbuf_r>:
 8009178:	b570      	push	{r4, r5, r6, lr}
 800917a:	460c      	mov	r4, r1
 800917c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009180:	2900      	cmp	r1, #0
 8009182:	b096      	sub	sp, #88	@ 0x58
 8009184:	4615      	mov	r5, r2
 8009186:	461e      	mov	r6, r3
 8009188:	da0d      	bge.n	80091a6 <__swhatbuf_r+0x2e>
 800918a:	89a3      	ldrh	r3, [r4, #12]
 800918c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009190:	f04f 0100 	mov.w	r1, #0
 8009194:	bf14      	ite	ne
 8009196:	2340      	movne	r3, #64	@ 0x40
 8009198:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800919c:	2000      	movs	r0, #0
 800919e:	6031      	str	r1, [r6, #0]
 80091a0:	602b      	str	r3, [r5, #0]
 80091a2:	b016      	add	sp, #88	@ 0x58
 80091a4:	bd70      	pop	{r4, r5, r6, pc}
 80091a6:	466a      	mov	r2, sp
 80091a8:	f000 f848 	bl	800923c <_fstat_r>
 80091ac:	2800      	cmp	r0, #0
 80091ae:	dbec      	blt.n	800918a <__swhatbuf_r+0x12>
 80091b0:	9901      	ldr	r1, [sp, #4]
 80091b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80091b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80091ba:	4259      	negs	r1, r3
 80091bc:	4159      	adcs	r1, r3
 80091be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80091c2:	e7eb      	b.n	800919c <__swhatbuf_r+0x24>

080091c4 <__smakebuf_r>:
 80091c4:	898b      	ldrh	r3, [r1, #12]
 80091c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091c8:	079d      	lsls	r5, r3, #30
 80091ca:	4606      	mov	r6, r0
 80091cc:	460c      	mov	r4, r1
 80091ce:	d507      	bpl.n	80091e0 <__smakebuf_r+0x1c>
 80091d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80091d4:	6023      	str	r3, [r4, #0]
 80091d6:	6123      	str	r3, [r4, #16]
 80091d8:	2301      	movs	r3, #1
 80091da:	6163      	str	r3, [r4, #20]
 80091dc:	b003      	add	sp, #12
 80091de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091e0:	ab01      	add	r3, sp, #4
 80091e2:	466a      	mov	r2, sp
 80091e4:	f7ff ffc8 	bl	8009178 <__swhatbuf_r>
 80091e8:	9f00      	ldr	r7, [sp, #0]
 80091ea:	4605      	mov	r5, r0
 80091ec:	4639      	mov	r1, r7
 80091ee:	4630      	mov	r0, r6
 80091f0:	f7ff fbb2 	bl	8008958 <_malloc_r>
 80091f4:	b948      	cbnz	r0, 800920a <__smakebuf_r+0x46>
 80091f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091fa:	059a      	lsls	r2, r3, #22
 80091fc:	d4ee      	bmi.n	80091dc <__smakebuf_r+0x18>
 80091fe:	f023 0303 	bic.w	r3, r3, #3
 8009202:	f043 0302 	orr.w	r3, r3, #2
 8009206:	81a3      	strh	r3, [r4, #12]
 8009208:	e7e2      	b.n	80091d0 <__smakebuf_r+0xc>
 800920a:	89a3      	ldrh	r3, [r4, #12]
 800920c:	6020      	str	r0, [r4, #0]
 800920e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009212:	81a3      	strh	r3, [r4, #12]
 8009214:	9b01      	ldr	r3, [sp, #4]
 8009216:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800921a:	b15b      	cbz	r3, 8009234 <__smakebuf_r+0x70>
 800921c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009220:	4630      	mov	r0, r6
 8009222:	f000 f81d 	bl	8009260 <_isatty_r>
 8009226:	b128      	cbz	r0, 8009234 <__smakebuf_r+0x70>
 8009228:	89a3      	ldrh	r3, [r4, #12]
 800922a:	f023 0303 	bic.w	r3, r3, #3
 800922e:	f043 0301 	orr.w	r3, r3, #1
 8009232:	81a3      	strh	r3, [r4, #12]
 8009234:	89a3      	ldrh	r3, [r4, #12]
 8009236:	431d      	orrs	r5, r3
 8009238:	81a5      	strh	r5, [r4, #12]
 800923a:	e7cf      	b.n	80091dc <__smakebuf_r+0x18>

0800923c <_fstat_r>:
 800923c:	b538      	push	{r3, r4, r5, lr}
 800923e:	4d07      	ldr	r5, [pc, #28]	@ (800925c <_fstat_r+0x20>)
 8009240:	2300      	movs	r3, #0
 8009242:	4604      	mov	r4, r0
 8009244:	4608      	mov	r0, r1
 8009246:	4611      	mov	r1, r2
 8009248:	602b      	str	r3, [r5, #0]
 800924a:	f7fa fa0a 	bl	8003662 <_fstat>
 800924e:	1c43      	adds	r3, r0, #1
 8009250:	d102      	bne.n	8009258 <_fstat_r+0x1c>
 8009252:	682b      	ldr	r3, [r5, #0]
 8009254:	b103      	cbz	r3, 8009258 <_fstat_r+0x1c>
 8009256:	6023      	str	r3, [r4, #0]
 8009258:	bd38      	pop	{r3, r4, r5, pc}
 800925a:	bf00      	nop
 800925c:	20000d88 	.word	0x20000d88

08009260 <_isatty_r>:
 8009260:	b538      	push	{r3, r4, r5, lr}
 8009262:	4d06      	ldr	r5, [pc, #24]	@ (800927c <_isatty_r+0x1c>)
 8009264:	2300      	movs	r3, #0
 8009266:	4604      	mov	r4, r0
 8009268:	4608      	mov	r0, r1
 800926a:	602b      	str	r3, [r5, #0]
 800926c:	f7fa fa09 	bl	8003682 <_isatty>
 8009270:	1c43      	adds	r3, r0, #1
 8009272:	d102      	bne.n	800927a <_isatty_r+0x1a>
 8009274:	682b      	ldr	r3, [r5, #0]
 8009276:	b103      	cbz	r3, 800927a <_isatty_r+0x1a>
 8009278:	6023      	str	r3, [r4, #0]
 800927a:	bd38      	pop	{r3, r4, r5, pc}
 800927c:	20000d88 	.word	0x20000d88

08009280 <_sbrk_r>:
 8009280:	b538      	push	{r3, r4, r5, lr}
 8009282:	4d06      	ldr	r5, [pc, #24]	@ (800929c <_sbrk_r+0x1c>)
 8009284:	2300      	movs	r3, #0
 8009286:	4604      	mov	r4, r0
 8009288:	4608      	mov	r0, r1
 800928a:	602b      	str	r3, [r5, #0]
 800928c:	f7fa fa12 	bl	80036b4 <_sbrk>
 8009290:	1c43      	adds	r3, r0, #1
 8009292:	d102      	bne.n	800929a <_sbrk_r+0x1a>
 8009294:	682b      	ldr	r3, [r5, #0]
 8009296:	b103      	cbz	r3, 800929a <_sbrk_r+0x1a>
 8009298:	6023      	str	r3, [r4, #0]
 800929a:	bd38      	pop	{r3, r4, r5, pc}
 800929c:	20000d88 	.word	0x20000d88

080092a0 <_init>:
 80092a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a2:	bf00      	nop
 80092a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092a6:	bc08      	pop	{r3}
 80092a8:	469e      	mov	lr, r3
 80092aa:	4770      	bx	lr

080092ac <_fini>:
 80092ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ae:	bf00      	nop
 80092b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092b2:	bc08      	pop	{r3}
 80092b4:	469e      	mov	lr, r3
 80092b6:	4770      	bx	lr
