
krsbi_enc_bno_bluepill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab30  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  0800ac40  0800ac40  0000bc40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b21c  0800b21c  0000d074  2**0
                  CONTENTS
  4 .ARM          00000008  0800b21c  0800b21c  0000c21c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b224  0800b224  0000d074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b224  0800b224  0000c224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b22c  0800b22c  0000c22c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800b230  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e08  20000078  0800b2a4  0000d078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000e80  0800b2a4  0000de80  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018dc9  00000000  00000000  0000d09d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000379c  00000000  00000000  00025e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  00029608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001000  00000000  00000000  0002aa88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aee9  00000000  00000000  0002ba88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001841d  00000000  00000000  00046971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097311  00000000  00000000  0005ed8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f609f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006064  00000000  00000000  000f60e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000fc148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ac28 	.word	0x0800ac28

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	0800ac28 	.word	0x0800ac28

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2f>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000904:	bf24      	itt	cs
 8000906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800090a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800090e:	d90d      	bls.n	800092c <__aeabi_d2f+0x30>
 8000910:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800091c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000924:	bf08      	it	eq
 8000926:	f020 0001 	biceq.w	r0, r0, #1
 800092a:	4770      	bx	lr
 800092c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000930:	d121      	bne.n	8000976 <__aeabi_d2f+0x7a>
 8000932:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000936:	bfbc      	itt	lt
 8000938:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800093c:	4770      	bxlt	lr
 800093e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000942:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000946:	f1c2 0218 	rsb	r2, r2, #24
 800094a:	f1c2 0c20 	rsb	ip, r2, #32
 800094e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000952:	fa20 f002 	lsr.w	r0, r0, r2
 8000956:	bf18      	it	ne
 8000958:	f040 0001 	orrne.w	r0, r0, #1
 800095c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000964:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000968:	ea40 000c 	orr.w	r0, r0, ip
 800096c:	fa23 f302 	lsr.w	r3, r3, r2
 8000970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000974:	e7cc      	b.n	8000910 <__aeabi_d2f+0x14>
 8000976:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097a:	d107      	bne.n	800098c <__aeabi_d2f+0x90>
 800097c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000980:	bf1e      	ittt	ne
 8000982:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000986:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800098a:	4770      	bxne	lr
 800098c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000990:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000994:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_frsub>:
 800099c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80009a0:	e002      	b.n	80009a8 <__addsf3>
 80009a2:	bf00      	nop

080009a4 <__aeabi_fsub>:
 80009a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009a8 <__addsf3>:
 80009a8:	0042      	lsls	r2, r0, #1
 80009aa:	bf1f      	itttt	ne
 80009ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009b0:	ea92 0f03 	teqne	r2, r3
 80009b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009bc:	d06a      	beq.n	8000a94 <__addsf3+0xec>
 80009be:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009c6:	bfc1      	itttt	gt
 80009c8:	18d2      	addgt	r2, r2, r3
 80009ca:	4041      	eorgt	r1, r0
 80009cc:	4048      	eorgt	r0, r1
 80009ce:	4041      	eorgt	r1, r0
 80009d0:	bfb8      	it	lt
 80009d2:	425b      	neglt	r3, r3
 80009d4:	2b19      	cmp	r3, #25
 80009d6:	bf88      	it	hi
 80009d8:	4770      	bxhi	lr
 80009da:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80009de:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009e2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009ee:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80009f2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80009f6:	bf18      	it	ne
 80009f8:	4249      	negne	r1, r1
 80009fa:	ea92 0f03 	teq	r2, r3
 80009fe:	d03f      	beq.n	8000a80 <__addsf3+0xd8>
 8000a00:	f1a2 0201 	sub.w	r2, r2, #1
 8000a04:	fa41 fc03 	asr.w	ip, r1, r3
 8000a08:	eb10 000c 	adds.w	r0, r0, ip
 8000a0c:	f1c3 0320 	rsb	r3, r3, #32
 8000a10:	fa01 f103 	lsl.w	r1, r1, r3
 8000a14:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a18:	d502      	bpl.n	8000a20 <__addsf3+0x78>
 8000a1a:	4249      	negs	r1, r1
 8000a1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a20:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a24:	d313      	bcc.n	8000a4e <__addsf3+0xa6>
 8000a26:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a2a:	d306      	bcc.n	8000a3a <__addsf3+0x92>
 8000a2c:	0840      	lsrs	r0, r0, #1
 8000a2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a32:	f102 0201 	add.w	r2, r2, #1
 8000a36:	2afe      	cmp	r2, #254	@ 0xfe
 8000a38:	d251      	bcs.n	8000ade <__addsf3+0x136>
 8000a3a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a42:	bf08      	it	eq
 8000a44:	f020 0001 	biceq.w	r0, r0, #1
 8000a48:	ea40 0003 	orr.w	r0, r0, r3
 8000a4c:	4770      	bx	lr
 8000a4e:	0049      	lsls	r1, r1, #1
 8000a50:	eb40 0000 	adc.w	r0, r0, r0
 8000a54:	3a01      	subs	r2, #1
 8000a56:	bf28      	it	cs
 8000a58:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a5c:	d2ed      	bcs.n	8000a3a <__addsf3+0x92>
 8000a5e:	fab0 fc80 	clz	ip, r0
 8000a62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a66:	ebb2 020c 	subs.w	r2, r2, ip
 8000a6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a6e:	bfaa      	itet	ge
 8000a70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a74:	4252      	neglt	r2, r2
 8000a76:	4318      	orrge	r0, r3
 8000a78:	bfbc      	itt	lt
 8000a7a:	40d0      	lsrlt	r0, r2
 8000a7c:	4318      	orrlt	r0, r3
 8000a7e:	4770      	bx	lr
 8000a80:	f092 0f00 	teq	r2, #0
 8000a84:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a88:	bf06      	itte	eq
 8000a8a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a8e:	3201      	addeq	r2, #1
 8000a90:	3b01      	subne	r3, #1
 8000a92:	e7b5      	b.n	8000a00 <__addsf3+0x58>
 8000a94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa2:	d021      	beq.n	8000ae8 <__addsf3+0x140>
 8000aa4:	ea92 0f03 	teq	r2, r3
 8000aa8:	d004      	beq.n	8000ab4 <__addsf3+0x10c>
 8000aaa:	f092 0f00 	teq	r2, #0
 8000aae:	bf08      	it	eq
 8000ab0:	4608      	moveq	r0, r1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea90 0f01 	teq	r0, r1
 8000ab8:	bf1c      	itt	ne
 8000aba:	2000      	movne	r0, #0
 8000abc:	4770      	bxne	lr
 8000abe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ac2:	d104      	bne.n	8000ace <__addsf3+0x126>
 8000ac4:	0040      	lsls	r0, r0, #1
 8000ac6:	bf28      	it	cs
 8000ac8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000acc:	4770      	bx	lr
 8000ace:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000ad2:	bf3c      	itt	cc
 8000ad4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ad8:	4770      	bxcc	lr
 8000ada:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ade:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ae2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae6:	4770      	bx	lr
 8000ae8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aec:	bf16      	itet	ne
 8000aee:	4608      	movne	r0, r1
 8000af0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000af4:	4601      	movne	r1, r0
 8000af6:	0242      	lsls	r2, r0, #9
 8000af8:	bf06      	itte	eq
 8000afa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000afe:	ea90 0f01 	teqeq	r0, r1
 8000b02:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_ui2f>:
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	e004      	b.n	8000b18 <__aeabi_i2f+0x8>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_i2f>:
 8000b10:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b14:	bf48      	it	mi
 8000b16:	4240      	negmi	r0, r0
 8000b18:	ea5f 0c00 	movs.w	ip, r0
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b24:	4601      	mov	r1, r0
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	e01c      	b.n	8000b66 <__aeabi_l2f+0x2a>

08000b2c <__aeabi_ul2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f04f 0300 	mov.w	r3, #0
 8000b38:	e00a      	b.n	8000b50 <__aeabi_l2f+0x14>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_l2f>:
 8000b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b48:	d502      	bpl.n	8000b50 <__aeabi_l2f+0x14>
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b50:	ea5f 0c01 	movs.w	ip, r1
 8000b54:	bf02      	ittt	eq
 8000b56:	4684      	moveq	ip, r0
 8000b58:	4601      	moveq	r1, r0
 8000b5a:	2000      	moveq	r0, #0
 8000b5c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b60:	bf08      	it	eq
 8000b62:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b66:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b6a:	fabc f28c 	clz	r2, ip
 8000b6e:	3a08      	subs	r2, #8
 8000b70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b74:	db10      	blt.n	8000b98 <__aeabi_l2f+0x5c>
 8000b76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b80:	f1c2 0220 	rsb	r2, r2, #32
 8000b84:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b88:	fa20 f202 	lsr.w	r2, r0, r2
 8000b8c:	eb43 0002 	adc.w	r0, r3, r2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f102 0220 	add.w	r2, r2, #32
 8000b9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ba0:	f1c2 0220 	rsb	r2, r2, #32
 8000ba4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ba8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bac:	eb43 0002 	adc.w	r0, r3, r2
 8000bb0:	bf08      	it	eq
 8000bb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_fmul>:
 8000bb8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bc6:	ea92 0f0c 	teqne	r2, ip
 8000bca:	ea93 0f0c 	teqne	r3, ip
 8000bce:	d06f      	beq.n	8000cb0 <__aeabi_fmul+0xf8>
 8000bd0:	441a      	add	r2, r3
 8000bd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bd6:	0240      	lsls	r0, r0, #9
 8000bd8:	bf18      	it	ne
 8000bda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bde:	d01e      	beq.n	8000c1e <__aeabi_fmul+0x66>
 8000be0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000be4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000be8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bec:	fba0 3101 	umull	r3, r1, r0, r1
 8000bf0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000bf4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000bf8:	bf3e      	ittt	cc
 8000bfa:	0049      	lslcc	r1, r1, #1
 8000bfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c00:	005b      	lslcc	r3, r3, #1
 8000c02:	ea40 0001 	orr.w	r0, r0, r1
 8000c06:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c0a:	2afd      	cmp	r2, #253	@ 0xfd
 8000c0c:	d81d      	bhi.n	8000c4a <__aeabi_fmul+0x92>
 8000c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c16:	bf08      	it	eq
 8000c18:	f020 0001 	biceq.w	r0, r0, #1
 8000c1c:	4770      	bx	lr
 8000c1e:	f090 0f00 	teq	r0, #0
 8000c22:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c26:	bf08      	it	eq
 8000c28:	0249      	lsleq	r1, r1, #9
 8000c2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c32:	3a7f      	subs	r2, #127	@ 0x7f
 8000c34:	bfc2      	ittt	gt
 8000c36:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c3e:	4770      	bxgt	lr
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	dc5d      	bgt.n	8000d08 <__aeabi_fmul+0x150>
 8000c4c:	f112 0f19 	cmn.w	r2, #25
 8000c50:	bfdc      	itt	le
 8000c52:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c56:	4770      	bxle	lr
 8000c58:	f1c2 0200 	rsb	r2, r2, #0
 8000c5c:	0041      	lsls	r1, r0, #1
 8000c5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c62:	f1c2 0220 	rsb	r2, r2, #32
 8000c66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c6e:	f140 0000 	adc.w	r0, r0, #0
 8000c72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c76:	bf08      	it	eq
 8000c78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c7c:	4770      	bx	lr
 8000c7e:	f092 0f00 	teq	r2, #0
 8000c82:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c86:	bf02      	ittt	eq
 8000c88:	0040      	lsleq	r0, r0, #1
 8000c8a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c8e:	3a01      	subeq	r2, #1
 8000c90:	d0f9      	beq.n	8000c86 <__aeabi_fmul+0xce>
 8000c92:	ea40 000c 	orr.w	r0, r0, ip
 8000c96:	f093 0f00 	teq	r3, #0
 8000c9a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c9e:	bf02      	ittt	eq
 8000ca0:	0049      	lsleq	r1, r1, #1
 8000ca2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ca6:	3b01      	subeq	r3, #1
 8000ca8:	d0f9      	beq.n	8000c9e <__aeabi_fmul+0xe6>
 8000caa:	ea41 010c 	orr.w	r1, r1, ip
 8000cae:	e78f      	b.n	8000bd0 <__aeabi_fmul+0x18>
 8000cb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cb4:	ea92 0f0c 	teq	r2, ip
 8000cb8:	bf18      	it	ne
 8000cba:	ea93 0f0c 	teqne	r3, ip
 8000cbe:	d00a      	beq.n	8000cd6 <__aeabi_fmul+0x11e>
 8000cc0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000cc4:	bf18      	it	ne
 8000cc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000cca:	d1d8      	bne.n	8000c7e <__aeabi_fmul+0xc6>
 8000ccc:	ea80 0001 	eor.w	r0, r0, r1
 8000cd0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f090 0f00 	teq	r0, #0
 8000cda:	bf17      	itett	ne
 8000cdc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ce0:	4608      	moveq	r0, r1
 8000ce2:	f091 0f00 	teqne	r1, #0
 8000ce6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000cea:	d014      	beq.n	8000d16 <__aeabi_fmul+0x15e>
 8000cec:	ea92 0f0c 	teq	r2, ip
 8000cf0:	d101      	bne.n	8000cf6 <__aeabi_fmul+0x13e>
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	d10f      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000cf6:	ea93 0f0c 	teq	r3, ip
 8000cfa:	d103      	bne.n	8000d04 <__aeabi_fmul+0x14c>
 8000cfc:	024b      	lsls	r3, r1, #9
 8000cfe:	bf18      	it	ne
 8000d00:	4608      	movne	r0, r1
 8000d02:	d108      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000d04:	ea80 0001 	eor.w	r0, r0, r1
 8000d08:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d14:	4770      	bx	lr
 8000d16:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d1a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_fdiv>:
 8000d20:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d28:	bf1e      	ittt	ne
 8000d2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2e:	ea92 0f0c 	teqne	r2, ip
 8000d32:	ea93 0f0c 	teqne	r3, ip
 8000d36:	d069      	beq.n	8000e0c <__aeabi_fdiv+0xec>
 8000d38:	eba2 0203 	sub.w	r2, r2, r3
 8000d3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d40:	0249      	lsls	r1, r1, #9
 8000d42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d46:	d037      	beq.n	8000db8 <__aeabi_fdiv+0x98>
 8000d48:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d54:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	bf38      	it	cc
 8000d5c:	005b      	lslcc	r3, r3, #1
 8000d5e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d62:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d66:	428b      	cmp	r3, r1
 8000d68:	bf24      	itt	cs
 8000d6a:	1a5b      	subcs	r3, r3, r1
 8000d6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d74:	bf24      	itt	cs
 8000d76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d82:	bf24      	itt	cs
 8000d84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d90:	bf24      	itt	cs
 8000d92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d9a:	011b      	lsls	r3, r3, #4
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000da2:	d1e0      	bne.n	8000d66 <__aeabi_fdiv+0x46>
 8000da4:	2afd      	cmp	r2, #253	@ 0xfd
 8000da6:	f63f af50 	bhi.w	8000c4a <__aeabi_fmul+0x92>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db0:	bf08      	it	eq
 8000db2:	f020 0001 	biceq.w	r0, r0, #1
 8000db6:	4770      	bx	lr
 8000db8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc0:	327f      	adds	r2, #127	@ 0x7f
 8000dc2:	bfc2      	ittt	gt
 8000dc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dcc:	4770      	bxgt	lr
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd2:	f04f 0300 	mov.w	r3, #0
 8000dd6:	3a01      	subs	r2, #1
 8000dd8:	e737      	b.n	8000c4a <__aeabi_fmul+0x92>
 8000dda:	f092 0f00 	teq	r2, #0
 8000dde:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000de2:	bf02      	ittt	eq
 8000de4:	0040      	lsleq	r0, r0, #1
 8000de6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dea:	3a01      	subeq	r2, #1
 8000dec:	d0f9      	beq.n	8000de2 <__aeabi_fdiv+0xc2>
 8000dee:	ea40 000c 	orr.w	r0, r0, ip
 8000df2:	f093 0f00 	teq	r3, #0
 8000df6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dfa:	bf02      	ittt	eq
 8000dfc:	0049      	lsleq	r1, r1, #1
 8000dfe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e02:	3b01      	subeq	r3, #1
 8000e04:	d0f9      	beq.n	8000dfa <__aeabi_fdiv+0xda>
 8000e06:	ea41 010c 	orr.w	r1, r1, ip
 8000e0a:	e795      	b.n	8000d38 <__aeabi_fdiv+0x18>
 8000e0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e10:	ea92 0f0c 	teq	r2, ip
 8000e14:	d108      	bne.n	8000e28 <__aeabi_fdiv+0x108>
 8000e16:	0242      	lsls	r2, r0, #9
 8000e18:	f47f af7d 	bne.w	8000d16 <__aeabi_fmul+0x15e>
 8000e1c:	ea93 0f0c 	teq	r3, ip
 8000e20:	f47f af70 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e776      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e28:	ea93 0f0c 	teq	r3, ip
 8000e2c:	d104      	bne.n	8000e38 <__aeabi_fdiv+0x118>
 8000e2e:	024b      	lsls	r3, r1, #9
 8000e30:	f43f af4c 	beq.w	8000ccc <__aeabi_fmul+0x114>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e76e      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e38:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e3c:	bf18      	it	ne
 8000e3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e42:	d1ca      	bne.n	8000dda <__aeabi_fdiv+0xba>
 8000e44:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e48:	f47f af5c 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e4c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e50:	f47f af3c 	bne.w	8000ccc <__aeabi_fmul+0x114>
 8000e54:	e75f      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e56:	bf00      	nop

08000e58 <__gesf2>:
 8000e58:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000e5c:	e006      	b.n	8000e6c <__cmpsf2+0x4>
 8000e5e:	bf00      	nop

08000e60 <__lesf2>:
 8000e60:	f04f 0c01 	mov.w	ip, #1
 8000e64:	e002      	b.n	8000e6c <__cmpsf2+0x4>
 8000e66:	bf00      	nop

08000e68 <__cmpsf2>:
 8000e68:	f04f 0c01 	mov.w	ip, #1
 8000e6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e7c:	bf18      	it	ne
 8000e7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e82:	d011      	beq.n	8000ea8 <__cmpsf2+0x40>
 8000e84:	b001      	add	sp, #4
 8000e86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e8a:	bf18      	it	ne
 8000e8c:	ea90 0f01 	teqne	r0, r1
 8000e90:	bf58      	it	pl
 8000e92:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e96:	bf88      	it	hi
 8000e98:	17c8      	asrhi	r0, r1, #31
 8000e9a:	bf38      	it	cc
 8000e9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ea0:	bf18      	it	ne
 8000ea2:	f040 0001 	orrne.w	r0, r0, #1
 8000ea6:	4770      	bx	lr
 8000ea8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eac:	d102      	bne.n	8000eb4 <__cmpsf2+0x4c>
 8000eae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eb2:	d105      	bne.n	8000ec0 <__cmpsf2+0x58>
 8000eb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000eb8:	d1e4      	bne.n	8000e84 <__cmpsf2+0x1c>
 8000eba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ebe:	d0e1      	beq.n	8000e84 <__cmpsf2+0x1c>
 8000ec0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <__aeabi_cfrcmple>:
 8000ec8:	4684      	mov	ip, r0
 8000eca:	4608      	mov	r0, r1
 8000ecc:	4661      	mov	r1, ip
 8000ece:	e7ff      	b.n	8000ed0 <__aeabi_cfcmpeq>

08000ed0 <__aeabi_cfcmpeq>:
 8000ed0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ed2:	f7ff ffc9 	bl	8000e68 <__cmpsf2>
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	bf48      	it	mi
 8000eda:	f110 0f00 	cmnmi.w	r0, #0
 8000ede:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ee0 <__aeabi_fcmpeq>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff fff4 	bl	8000ed0 <__aeabi_cfcmpeq>
 8000ee8:	bf0c      	ite	eq
 8000eea:	2001      	moveq	r0, #1
 8000eec:	2000      	movne	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_fcmplt>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff ffea 	bl	8000ed0 <__aeabi_cfcmpeq>
 8000efc:	bf34      	ite	cc
 8000efe:	2001      	movcc	r0, #1
 8000f00:	2000      	movcs	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_fcmple>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffe0 	bl	8000ed0 <__aeabi_cfcmpeq>
 8000f10:	bf94      	ite	ls
 8000f12:	2001      	movls	r0, #1
 8000f14:	2000      	movhi	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_fcmpge>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffd2 	bl	8000ec8 <__aeabi_cfrcmple>
 8000f24:	bf94      	ite	ls
 8000f26:	2001      	movls	r0, #1
 8000f28:	2000      	movhi	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_fcmpgt>:
 8000f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f34:	f7ff ffc8 	bl	8000ec8 <__aeabi_cfrcmple>
 8000f38:	bf34      	ite	cc
 8000f3a:	2001      	movcc	r0, #1
 8000f3c:	2000      	movcs	r0, #0
 8000f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f42:	bf00      	nop

08000f44 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	0a5a      	lsrs	r2, r3, #9
 8000f54:	490f      	ldr	r1, [pc, #60]	@ (8000f94 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000f56:	fba1 1202 	umull	r1, r2, r1, r2
 8000f5a:	09d2      	lsrs	r2, r2, #7
 8000f5c:	490e      	ldr	r1, [pc, #56]	@ (8000f98 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000f5e:	fb01 f202 	mul.w	r2, r1, r2
 8000f62:	1a9b      	subs	r3, r3, r2
 8000f64:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	0a5b      	lsrs	r3, r3, #9
 8000f6c:	4a09      	ldr	r2, [pc, #36]	@ (8000f94 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f72:	09db      	lsrs	r3, r3, #7
 8000f74:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	441a      	add	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	68fa      	ldr	r2, [r7, #12]
 8000f86:	601a      	str	r2, [r3, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	00044b83 	.word	0x00044b83
 8000f98:	3b9aca00 	.word	0x3b9aca00

08000f9c <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	2007      	movs	r0, #7
 8000fac:	f000 fa5e 	bl	800146c <bno055_writeData>
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	203d      	movs	r0, #61	@ 0x3d
 8000fc8:	f000 fa50 	bl	800146c <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d103      	bne.n	8000fda <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000fd2:	2013      	movs	r0, #19
 8000fd4:	f000 fa3e 	bl	8001454 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000fd8:	e002      	b.n	8000fe0 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000fda:	2007      	movs	r0, #7
 8000fdc:	f000 fa3a 	bl	8001454 <bno055_delay>
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000fec:	2000      	movs	r0, #0
 8000fee:	f7ff ffe3 	bl	8000fb8 <bno055_setOperationMode>
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000ffa:	200c      	movs	r0, #12
 8000ffc:	f7ff ffdc 	bl	8000fb8 <bno055_setOperationMode>
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8001008:	2120      	movs	r1, #32
 800100a:	203f      	movs	r0, #63	@ 0x3f
 800100c:	f000 fa2e 	bl	800146c <bno055_writeData>
  bno055_delay(700);
 8001010:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001014:	f000 fa1e 	bl	8001454 <bno055_delay>
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}

0800101c <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
  bno055_reset();
 8001022:	f7ff ffef 	bl	8001004 <bno055_reset>

  uint8_t id = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 800102a:	1dfb      	adds	r3, r7, #7
 800102c:	2201      	movs	r2, #1
 800102e:	4619      	mov	r1, r3
 8001030:	2000      	movs	r0, #0
 8001032:	f000 fb07 	bl	8001644 <bno055_readData>
  if (id != BNO055_ID) {
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	2ba0      	cmp	r3, #160	@ 0xa0
 800103a:	d004      	beq.n	8001046 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	4619      	mov	r1, r3
 8001040:	4809      	ldr	r0, [pc, #36]	@ (8001068 <bno055_setup+0x4c>)
 8001042:	f008 ff05 	bl	8009e50 <iprintf>
  }
  bno055_setPage(0);
 8001046:	2000      	movs	r0, #0
 8001048:	f7ff ffa8 	bl	8000f9c <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 800104c:	2100      	movs	r1, #0
 800104e:	203f      	movs	r0, #63	@ 0x3f
 8001050:	f000 fa0c 	bl	800146c <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8001054:	f7ff ffc8 	bl	8000fe8 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001058:	200a      	movs	r0, #10
 800105a:	f000 f9fb 	bl	8001454 <bno055_delay>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	0800ac40 	.word	0x0800ac40

0800106c <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 800106c:	b5b0      	push	{r4, r5, r7, lr}
 800106e:	b08e      	sub	sp, #56	@ 0x38
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	70fb      	strb	r3, [r7, #3]
  bno055_setPage(0);
 8001078:	2000      	movs	r0, #0
 800107a:	f7ff ff8f 	bl	8000f9c <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 800107e:	78fb      	ldrb	r3, [r7, #3]
 8001080:	2b20      	cmp	r3, #32
 8001082:	d107      	bne.n	8001094 <bno055_getVector+0x28>
    bno055_readData(vec, buffer, 8);
 8001084:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001088:	78fb      	ldrb	r3, [r7, #3]
 800108a:	2208      	movs	r2, #8
 800108c:	4618      	mov	r0, r3
 800108e:	f000 fad9 	bl	8001644 <bno055_readData>
 8001092:	e006      	b.n	80010a2 <bno055_getVector+0x36>
  else
    bno055_readData(vec, buffer, 6);
 8001094:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001098:	78fb      	ldrb	r3, [r7, #3]
 800109a:	2206      	movs	r2, #6
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fad1 	bl	8001644 <bno055_readData>

  double scale = 1;
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	4b77      	ldr	r3, [pc, #476]	@ (8001284 <bno055_getVector+0x218>)
 80010a8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 80010ac:	78fb      	ldrb	r3, [r7, #3]
 80010ae:	2b0e      	cmp	r3, #14
 80010b0:	d109      	bne.n	80010c6 <bno055_getVector+0x5a>
    scale = magScale;
 80010b2:	4b75      	ldr	r3, [pc, #468]	@ (8001288 <bno055_getVector+0x21c>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff f994 	bl	80003e4 <__aeabi_ui2d>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 80010c4:	e038      	b.n	8001138 <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 80010c6:	78fb      	ldrb	r3, [r7, #3]
 80010c8:	2b08      	cmp	r3, #8
 80010ca:	d005      	beq.n	80010d8 <bno055_getVector+0x6c>
 80010cc:	78fb      	ldrb	r3, [r7, #3]
 80010ce:	2b28      	cmp	r3, #40	@ 0x28
 80010d0:	d002      	beq.n	80010d8 <bno055_getVector+0x6c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 80010d2:	78fb      	ldrb	r3, [r7, #3]
 80010d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80010d6:	d109      	bne.n	80010ec <bno055_getVector+0x80>
    scale = accelScale;
 80010d8:	4b6c      	ldr	r3, [pc, #432]	@ (800128c <bno055_getVector+0x220>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff f981 	bl	80003e4 <__aeabi_ui2d>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 80010ea:	e025      	b.n	8001138 <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 80010ec:	78fb      	ldrb	r3, [r7, #3]
 80010ee:	2b14      	cmp	r3, #20
 80010f0:	d109      	bne.n	8001106 <bno055_getVector+0x9a>
    scale = angularRateScale;
 80010f2:	4b67      	ldr	r3, [pc, #412]	@ (8001290 <bno055_getVector+0x224>)
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff f974 	bl	80003e4 <__aeabi_ui2d>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8001104:	e018      	b.n	8001138 <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_EULER) {
 8001106:	78fb      	ldrb	r3, [r7, #3]
 8001108:	2b1a      	cmp	r3, #26
 800110a:	d109      	bne.n	8001120 <bno055_getVector+0xb4>
    scale = eulerScale;
 800110c:	4b61      	ldr	r3, [pc, #388]	@ (8001294 <bno055_getVector+0x228>)
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff f967 	bl	80003e4 <__aeabi_ui2d>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 800111e:	e00b      	b.n	8001138 <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8001120:	78fb      	ldrb	r3, [r7, #3]
 8001122:	2b20      	cmp	r3, #32
 8001124:	d108      	bne.n	8001138 <bno055_getVector+0xcc>
    scale = quaScale;
 8001126:	4b5c      	ldr	r3, [pc, #368]	@ (8001298 <bno055_getVector+0x22c>)
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff f95a 	bl	80003e4 <__aeabi_ui2d>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8001138:	f107 0308 	add.w	r3, r7, #8
 800113c:	2220      	movs	r2, #32
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f008 ffcd 	bl	800a0e0 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001146:	78fb      	ldrb	r3, [r7, #3]
 8001148:	2b20      	cmp	r3, #32
 800114a:	d150      	bne.n	80011ee <bno055_getVector+0x182>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800114c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001150:	021b      	lsls	r3, r3, #8
 8001152:	b21a      	sxth	r2, r3
 8001154:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001158:	b21b      	sxth	r3, r3
 800115a:	4313      	orrs	r3, r2
 800115c:	b21b      	sxth	r3, r3
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff f950 	bl	8000404 <__aeabi_i2d>
 8001164:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001168:	f7ff fae0 	bl	800072c <__aeabi_ddiv>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	e9c7 2302 	strd	r2, r3, [r7, #8]
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001174:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	b21a      	sxth	r2, r3
 800117c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001180:	b21b      	sxth	r3, r3
 8001182:	4313      	orrs	r3, r2
 8001184:	b21b      	sxth	r3, r3
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff f93c 	bl	8000404 <__aeabi_i2d>
 800118c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001190:	f7ff facc 	bl	800072c <__aeabi_ddiv>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	e9c7 2304 	strd	r2, r3, [r7, #16]
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800119c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff f928 	bl	8000404 <__aeabi_i2d>
 80011b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80011b8:	f7ff fab8 	bl	800072c <__aeabi_ddiv>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 80011c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	b21a      	sxth	r2, r3
 80011cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	4313      	orrs	r3, r2
 80011d4:	b21b      	sxth	r3, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f914 	bl	8000404 <__aeabi_i2d>
 80011dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80011e0:	f7ff faa4 	bl	800072c <__aeabi_ddiv>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80011ec:	e03b      	b.n	8001266 <bno055_getVector+0x1fa>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80011ee:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80011fa:	b21b      	sxth	r3, r3
 80011fc:	4313      	orrs	r3, r2
 80011fe:	b21b      	sxth	r3, r3
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff f8ff 	bl	8000404 <__aeabi_i2d>
 8001206:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800120a:	f7ff fa8f 	bl	800072c <__aeabi_ddiv>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	e9c7 2304 	strd	r2, r3, [r7, #16]
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001216:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	b21a      	sxth	r2, r3
 800121e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001222:	b21b      	sxth	r3, r3
 8001224:	4313      	orrs	r3, r2
 8001226:	b21b      	sxth	r3, r3
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff f8eb 	bl	8000404 <__aeabi_i2d>
 800122e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001232:	f7ff fa7b 	bl	800072c <__aeabi_ddiv>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800123e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001242:	021b      	lsls	r3, r3, #8
 8001244:	b21a      	sxth	r2, r3
 8001246:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800124a:	b21b      	sxth	r3, r3
 800124c:	4313      	orrs	r3, r2
 800124e:	b21b      	sxth	r3, r3
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff f8d7 	bl	8000404 <__aeabi_i2d>
 8001256:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800125a:	f7ff fa67 	bl	800072c <__aeabi_ddiv>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  return xyz;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	461d      	mov	r5, r3
 800126a:	f107 0408 	add.w	r4, r7, #8
 800126e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001272:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001276:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	3738      	adds	r7, #56	@ 0x38
 800127e:	46bd      	mov	sp, r7
 8001280:	bdb0      	pop	{r4, r5, r7, pc}
 8001282:	bf00      	nop
 8001284:	3ff00000 	.word	0x3ff00000
 8001288:	20000006 	.word	0x20000006
 800128c:	20000000 	.word	0x20000000
 8001290:	20000002 	.word	0x20000002
 8001294:	20000004 	.word	0x20000004
 8001298:	20000008 	.word	0x20000008

0800129c <bno055_getVectorMagnetometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
}
bno055_vector_t bno055_getVectorMagnetometer() {
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	210e      	movs	r1, #14
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fedf 	bl	800106c <bno055_getVector>
}
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012be:	4b10      	ldr	r3, [pc, #64]	@ (8001300 <MX_DMA_Init+0x48>)
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001300 <MX_DMA_Init+0x48>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6153      	str	r3, [r2, #20]
 80012ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001300 <MX_DMA_Init+0x48>)
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	2010      	movs	r0, #16
 80012dc:	f004 fedf 	bl	800609e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80012e0:	2010      	movs	r0, #16
 80012e2:	f004 fef8 	bl	80060d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	2011      	movs	r0, #17
 80012ec:	f004 fed7 	bl	800609e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80012f0:	2011      	movs	r0, #17
 80012f2:	f004 fef0 	bl	80060d6 <HAL_NVIC_EnableIRQ>

}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40021000 	.word	0x40021000

08001304 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800130a:	4b14      	ldr	r3, [pc, #80]	@ (800135c <MX_GPIO_Init+0x58>)
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	4a13      	ldr	r2, [pc, #76]	@ (800135c <MX_GPIO_Init+0x58>)
 8001310:	f043 0320 	orr.w	r3, r3, #32
 8001314:	6193      	str	r3, [r2, #24]
 8001316:	4b11      	ldr	r3, [pc, #68]	@ (800135c <MX_GPIO_Init+0x58>)
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	f003 0320 	and.w	r3, r3, #32
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <MX_GPIO_Init+0x58>)
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	4a0d      	ldr	r2, [pc, #52]	@ (800135c <MX_GPIO_Init+0x58>)
 8001328:	f043 0304 	orr.w	r3, r3, #4
 800132c:	6193      	str	r3, [r2, #24]
 800132e:	4b0b      	ldr	r3, [pc, #44]	@ (800135c <MX_GPIO_Init+0x58>)
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	f003 0304 	and.w	r3, r3, #4
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	4b08      	ldr	r3, [pc, #32]	@ (800135c <MX_GPIO_Init+0x58>)
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	4a07      	ldr	r2, [pc, #28]	@ (800135c <MX_GPIO_Init+0x58>)
 8001340:	f043 0308 	orr.w	r3, r3, #8
 8001344:	6193      	str	r3, [r2, #24]
 8001346:	4b05      	ldr	r3, [pc, #20]	@ (800135c <MX_GPIO_Init+0x58>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	f003 0308 	and.w	r3, r3, #8
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]

}
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	40021000 	.word	0x40021000

08001360 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001364:	4b12      	ldr	r3, [pc, #72]	@ (80013b0 <MX_I2C1_Init+0x50>)
 8001366:	4a13      	ldr	r2, [pc, #76]	@ (80013b4 <MX_I2C1_Init+0x54>)
 8001368:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800136a:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <MX_I2C1_Init+0x50>)
 800136c:	4a12      	ldr	r2, [pc, #72]	@ (80013b8 <MX_I2C1_Init+0x58>)
 800136e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001370:	4b0f      	ldr	r3, [pc, #60]	@ (80013b0 <MX_I2C1_Init+0x50>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001376:	4b0e      	ldr	r3, [pc, #56]	@ (80013b0 <MX_I2C1_Init+0x50>)
 8001378:	2200      	movs	r2, #0
 800137a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800137c:	4b0c      	ldr	r3, [pc, #48]	@ (80013b0 <MX_I2C1_Init+0x50>)
 800137e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001382:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001384:	4b0a      	ldr	r3, [pc, #40]	@ (80013b0 <MX_I2C1_Init+0x50>)
 8001386:	2200      	movs	r2, #0
 8001388:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800138a:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <MX_I2C1_Init+0x50>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001390:	4b07      	ldr	r3, [pc, #28]	@ (80013b0 <MX_I2C1_Init+0x50>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001396:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <MX_I2C1_Init+0x50>)
 8001398:	2200      	movs	r2, #0
 800139a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800139c:	4804      	ldr	r0, [pc, #16]	@ (80013b0 <MX_I2C1_Init+0x50>)
 800139e:	f005 fadb 	bl	8006958 <HAL_I2C_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013a8:	f000 fabe 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000094 	.word	0x20000094
 80013b4:	40005400 	.word	0x40005400
 80013b8:	000186a0 	.word	0x000186a0

080013bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 0310 	add.w	r3, r7, #16
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a15      	ldr	r2, [pc, #84]	@ (800142c <HAL_I2C_MspInit+0x70>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d123      	bne.n	8001424 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013dc:	4b14      	ldr	r3, [pc, #80]	@ (8001430 <HAL_I2C_MspInit+0x74>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4a13      	ldr	r2, [pc, #76]	@ (8001430 <HAL_I2C_MspInit+0x74>)
 80013e2:	f043 0308 	orr.w	r3, r3, #8
 80013e6:	6193      	str	r3, [r2, #24]
 80013e8:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <HAL_I2C_MspInit+0x74>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013f4:	23c0      	movs	r3, #192	@ 0xc0
 80013f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013f8:	2312      	movs	r3, #18
 80013fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013fc:	2303      	movs	r3, #3
 80013fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	4619      	mov	r1, r3
 8001406:	480b      	ldr	r0, [pc, #44]	@ (8001434 <HAL_I2C_MspInit+0x78>)
 8001408:	f005 f922 	bl	8006650 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800140c:	4b08      	ldr	r3, [pc, #32]	@ (8001430 <HAL_I2C_MspInit+0x74>)
 800140e:	69db      	ldr	r3, [r3, #28]
 8001410:	4a07      	ldr	r2, [pc, #28]	@ (8001430 <HAL_I2C_MspInit+0x74>)
 8001412:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001416:	61d3      	str	r3, [r2, #28]
 8001418:	4b05      	ldr	r3, [pc, #20]	@ (8001430 <HAL_I2C_MspInit+0x74>)
 800141a:	69db      	ldr	r3, [r3, #28]
 800141c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001424:	bf00      	nop
 8001426:	3720      	adds	r7, #32
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40005400 	.word	0x40005400
 8001430:	40021000 	.word	0x40021000
 8001434:	40010c00 	.word	0x40010c00

08001438 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001440:	4a03      	ldr	r2, [pc, #12]	@ (8001450 <bno055_assignI2C+0x18>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6013      	str	r3, [r2, #0]
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	200000e8 	.word	0x200000e8

08001454 <bno055_delay>:

void bno055_delay(int time) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4618      	mov	r0, r3
 8001460:	f004 fd22 	bl	8005ea8 <HAL_Delay>
#endif
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af02      	add	r7, sp, #8
 8001472:	4603      	mov	r3, r0
 8001474:	460a      	mov	r2, r1
 8001476:	71fb      	strb	r3, [r7, #7]
 8001478:	4613      	mov	r3, r2
 800147a:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	733b      	strb	r3, [r7, #12]
 8001480:	79bb      	ldrb	r3, [r7, #6]
 8001482:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001484:	4b5a      	ldr	r3, [pc, #360]	@ (80015f0 <bno055_writeData+0x184>)
 8001486:	6818      	ldr	r0, [r3, #0]
 8001488:	f107 020c 	add.w	r2, r7, #12
 800148c:	230a      	movs	r3, #10
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	2302      	movs	r3, #2
 8001492:	2150      	movs	r1, #80	@ 0x50
 8001494:	f005 fba4 	bl	8006be0 <HAL_I2C_Master_Transmit>
 8001498:	4603      	mov	r3, r0
 800149a:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 800149c:	7dfb      	ldrb	r3, [r7, #23]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f000 80a0 	beq.w	80015e4 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 80014a4:	7dfb      	ldrb	r3, [r7, #23]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d103      	bne.n	80014b2 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80014aa:	4852      	ldr	r0, [pc, #328]	@ (80015f4 <bno055_writeData+0x188>)
 80014ac:	f008 fd38 	bl	8009f20 <puts>
 80014b0:	e012      	b.n	80014d8 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 80014b2:	7dfb      	ldrb	r3, [r7, #23]
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	d103      	bne.n	80014c0 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 80014b8:	484f      	ldr	r0, [pc, #316]	@ (80015f8 <bno055_writeData+0x18c>)
 80014ba:	f008 fd31 	bl	8009f20 <puts>
 80014be:	e00b      	b.n	80014d8 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 80014c0:	7dfb      	ldrb	r3, [r7, #23]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d103      	bne.n	80014ce <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 80014c6:	484d      	ldr	r0, [pc, #308]	@ (80015fc <bno055_writeData+0x190>)
 80014c8:	f008 fd2a 	bl	8009f20 <puts>
 80014cc:	e004      	b.n	80014d8 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 80014ce:	7dfb      	ldrb	r3, [r7, #23]
 80014d0:	4619      	mov	r1, r3
 80014d2:	484b      	ldr	r0, [pc, #300]	@ (8001600 <bno055_writeData+0x194>)
 80014d4:	f008 fcbc 	bl	8009e50 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 80014d8:	4b45      	ldr	r3, [pc, #276]	@ (80015f0 <bno055_writeData+0x184>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f005 fef6 	bl	80072ce <HAL_I2C_GetError>
 80014e2:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d07e      	beq.n	80015e8 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d103      	bne.n	80014f8 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 80014f0:	4844      	ldr	r0, [pc, #272]	@ (8001604 <bno055_writeData+0x198>)
 80014f2:	f008 fd15 	bl	8009f20 <puts>
 80014f6:	e021      	b.n	800153c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d103      	bne.n	8001506 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 80014fe:	4842      	ldr	r0, [pc, #264]	@ (8001608 <bno055_writeData+0x19c>)
 8001500:	f008 fd0e 	bl	8009f20 <puts>
 8001504:	e01a      	b.n	800153c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	2b04      	cmp	r3, #4
 800150a:	d103      	bne.n	8001514 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 800150c:	483f      	ldr	r0, [pc, #252]	@ (800160c <bno055_writeData+0x1a0>)
 800150e:	f008 fd07 	bl	8009f20 <puts>
 8001512:	e013      	b.n	800153c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	2b08      	cmp	r3, #8
 8001518:	d103      	bne.n	8001522 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 800151a:	483d      	ldr	r0, [pc, #244]	@ (8001610 <bno055_writeData+0x1a4>)
 800151c:	f008 fd00 	bl	8009f20 <puts>
 8001520:	e00c      	b.n	800153c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	2b10      	cmp	r3, #16
 8001526:	d103      	bne.n	8001530 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001528:	483a      	ldr	r0, [pc, #232]	@ (8001614 <bno055_writeData+0x1a8>)
 800152a:	f008 fcf9 	bl	8009f20 <puts>
 800152e:	e005      	b.n	800153c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	2b20      	cmp	r3, #32
 8001534:	d102      	bne.n	800153c <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8001536:	4838      	ldr	r0, [pc, #224]	@ (8001618 <bno055_writeData+0x1ac>)
 8001538:	f008 fcf2 	bl	8009f20 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 800153c:	4b2c      	ldr	r3, [pc, #176]	@ (80015f0 <bno055_writeData+0x184>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f005 feb7 	bl	80072b4 <HAL_I2C_GetState>
 8001546:	4603      	mov	r3, r0
 8001548:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d103      	bne.n	8001558 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001550:	4832      	ldr	r0, [pc, #200]	@ (800161c <bno055_writeData+0x1b0>)
 8001552:	f008 fce5 	bl	8009f20 <puts>
 8001556:	e048      	b.n	80015ea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	2b20      	cmp	r3, #32
 800155c:	d103      	bne.n	8001566 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 800155e:	482f      	ldr	r0, [pc, #188]	@ (800161c <bno055_writeData+0x1b0>)
 8001560:	f008 fcde 	bl	8009f20 <puts>
 8001564:	e041      	b.n	80015ea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	2b24      	cmp	r3, #36	@ 0x24
 800156a:	d103      	bne.n	8001574 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 800156c:	482c      	ldr	r0, [pc, #176]	@ (8001620 <bno055_writeData+0x1b4>)
 800156e:	f008 fcd7 	bl	8009f20 <puts>
 8001572:	e03a      	b.n	80015ea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	2b21      	cmp	r3, #33	@ 0x21
 8001578:	d103      	bne.n	8001582 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 800157a:	482a      	ldr	r0, [pc, #168]	@ (8001624 <bno055_writeData+0x1b8>)
 800157c:	f008 fcd0 	bl	8009f20 <puts>
 8001580:	e033      	b.n	80015ea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	2b22      	cmp	r3, #34	@ 0x22
 8001586:	d103      	bne.n	8001590 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001588:	4827      	ldr	r0, [pc, #156]	@ (8001628 <bno055_writeData+0x1bc>)
 800158a:	f008 fcc9 	bl	8009f20 <puts>
 800158e:	e02c      	b.n	80015ea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	2b28      	cmp	r3, #40	@ 0x28
 8001594:	d103      	bne.n	800159e <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8001596:	4825      	ldr	r0, [pc, #148]	@ (800162c <bno055_writeData+0x1c0>)
 8001598:	f008 fcc2 	bl	8009f20 <puts>
 800159c:	e025      	b.n	80015ea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	2b29      	cmp	r3, #41	@ 0x29
 80015a2:	d103      	bne.n	80015ac <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80015a4:	4822      	ldr	r0, [pc, #136]	@ (8001630 <bno055_writeData+0x1c4>)
 80015a6:	f008 fcbb 	bl	8009f20 <puts>
 80015aa:	e01e      	b.n	80015ea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80015b0:	d103      	bne.n	80015ba <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 80015b2:	4820      	ldr	r0, [pc, #128]	@ (8001634 <bno055_writeData+0x1c8>)
 80015b4:	f008 fcb4 	bl	8009f20 <puts>
 80015b8:	e017      	b.n	80015ea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	2b60      	cmp	r3, #96	@ 0x60
 80015be:	d103      	bne.n	80015c8 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 80015c0:	481d      	ldr	r0, [pc, #116]	@ (8001638 <bno055_writeData+0x1cc>)
 80015c2:	f008 fcad 	bl	8009f20 <puts>
 80015c6:	e010      	b.n	80015ea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	2ba0      	cmp	r3, #160	@ 0xa0
 80015cc:	d103      	bne.n	80015d6 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 80015ce:	481b      	ldr	r0, [pc, #108]	@ (800163c <bno055_writeData+0x1d0>)
 80015d0:	f008 fca6 	bl	8009f20 <puts>
 80015d4:	e009      	b.n	80015ea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	2be0      	cmp	r3, #224	@ 0xe0
 80015da:	d106      	bne.n	80015ea <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 80015dc:	4818      	ldr	r0, [pc, #96]	@ (8001640 <bno055_writeData+0x1d4>)
 80015de:	f008 fc9f 	bl	8009f20 <puts>
 80015e2:	e002      	b.n	80015ea <bno055_writeData+0x17e>
    return;
 80015e4:	bf00      	nop
 80015e6:	e000      	b.n	80015ea <bno055_writeData+0x17e>
    return;
 80015e8:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	200000e8 	.word	0x200000e8
 80015f4:	0800ac7c 	.word	0x0800ac7c
 80015f8:	0800aca0 	.word	0x0800aca0
 80015fc:	0800acc8 	.word	0x0800acc8
 8001600:	0800acec 	.word	0x0800acec
 8001604:	0800ad04 	.word	0x0800ad04
 8001608:	0800ad18 	.word	0x0800ad18
 800160c:	0800ad2c 	.word	0x0800ad2c
 8001610:	0800ad40 	.word	0x0800ad40
 8001614:	0800ad54 	.word	0x0800ad54
 8001618:	0800ad68 	.word	0x0800ad68
 800161c:	0800ad80 	.word	0x0800ad80
 8001620:	0800ad98 	.word	0x0800ad98
 8001624:	0800adac 	.word	0x0800adac
 8001628:	0800adc4 	.word	0x0800adc4
 800162c:	0800addc 	.word	0x0800addc
 8001630:	0800adf4 	.word	0x0800adf4
 8001634:	0800ae14 	.word	0x0800ae14
 8001638:	0800ae34 	.word	0x0800ae34
 800163c:	0800ae4c 	.word	0x0800ae4c
 8001640:	0800ae64 	.word	0x0800ae64

08001644 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af02      	add	r7, sp, #8
 800164a:	4603      	mov	r3, r0
 800164c:	6039      	str	r1, [r7, #0]
 800164e:	71fb      	strb	r3, [r7, #7]
 8001650:	4613      	mov	r3, r2
 8001652:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001654:	4b0b      	ldr	r3, [pc, #44]	@ (8001684 <bno055_readData+0x40>)
 8001656:	6818      	ldr	r0, [r3, #0]
 8001658:	1dfa      	adds	r2, r7, #7
 800165a:	2364      	movs	r3, #100	@ 0x64
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	2301      	movs	r3, #1
 8001660:	2150      	movs	r1, #80	@ 0x50
 8001662:	f005 fabd 	bl	8006be0 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8001666:	4b07      	ldr	r3, [pc, #28]	@ (8001684 <bno055_readData+0x40>)
 8001668:	6818      	ldr	r0, [r3, #0]
 800166a:	79bb      	ldrb	r3, [r7, #6]
 800166c:	b29b      	uxth	r3, r3
 800166e:	2264      	movs	r2, #100	@ 0x64
 8001670:	9200      	str	r2, [sp, #0]
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	2150      	movs	r1, #80	@ 0x50
 8001676:	f005 fbb1 	bl	8006ddc <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200000e8 	.word	0x200000e8

08001688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800168e:	f004 fba9 	bl	8005de4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001692:	f000 f8ab 	bl	80017ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001696:	f7ff fe35 	bl	8001304 <MX_GPIO_Init>
  MX_DMA_Init();
 800169a:	f7ff fe0d 	bl	80012b8 <MX_DMA_Init>
  MX_TIM1_Init();
 800169e:	f004 f90b 	bl	80058b8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80016a2:	f004 faa7 	bl	8005bf4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80016a6:	f7ff fe5b 	bl	8001360 <MX_I2C1_Init>
  MX_TIM2_Init();
 80016aa:	f004 f955 	bl	8005958 <MX_TIM2_Init>
  MX_TIM3_Init();
 80016ae:	f004 f9a7 	bl	8005a00 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  uint32_t currenTick = HAL_GetTick();
 80016b2:	f004 fbef 	bl	8005e94 <HAL_GetTick>
 80016b6:	6078      	str	r0, [r7, #4]
    PID_Init(&pidAx, 6, 0, 0, -1000, 1000);
 80016b8:	4b3a      	ldr	r3, [pc, #232]	@ (80017a4 <main+0x11c>)
 80016ba:	9301      	str	r3, [sp, #4]
 80016bc:	4b3a      	ldr	r3, [pc, #232]	@ (80017a8 <main+0x120>)
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	4938      	ldr	r1, [pc, #224]	@ (80017ac <main+0x124>)
 80016ca:	4839      	ldr	r0, [pc, #228]	@ (80017b0 <main+0x128>)
 80016cc:	f003 fe9c 	bl	8005408 <PID_Init>
    PID_Init(&pidW, 5, 0, 10, -1000, 1000);
 80016d0:	4b34      	ldr	r3, [pc, #208]	@ (80017a4 <main+0x11c>)
 80016d2:	9301      	str	r3, [sp, #4]
 80016d4:	4b34      	ldr	r3, [pc, #208]	@ (80017a8 <main+0x120>)
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	4b36      	ldr	r3, [pc, #216]	@ (80017b4 <main+0x12c>)
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	4936      	ldr	r1, [pc, #216]	@ (80017b8 <main+0x130>)
 80016e0:	4836      	ldr	r0, [pc, #216]	@ (80017bc <main+0x134>)
 80016e2:	f003 fe91 	bl	8005408 <PID_Init>

    HAL_TIM_Base_Start_IT(&htim1);
 80016e6:	4836      	ldr	r0, [pc, #216]	@ (80017c0 <main+0x138>)
 80016e8:	f006 fde2 	bl	80082b0 <HAL_TIM_Base_Start_IT>
      HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80016ec:	213c      	movs	r1, #60	@ 0x3c
 80016ee:	4835      	ldr	r0, [pc, #212]	@ (80017c4 <main+0x13c>)
 80016f0:	f006 fed2 	bl	8008498 <HAL_TIM_Encoder_Start>
      HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80016f4:	213c      	movs	r1, #60	@ 0x3c
 80016f6:	4834      	ldr	r0, [pc, #208]	@ (80017c8 <main+0x140>)
 80016f8:	f006 fece 	bl	8008498 <HAL_TIM_Encoder_Start>

      bno055_assignI2C(&hi2c1);
 80016fc:	4833      	ldr	r0, [pc, #204]	@ (80017cc <main+0x144>)
 80016fe:	f7ff fe9b 	bl	8001438 <bno055_assignI2C>
      bno055_setup();
 8001702:	f7ff fc8b 	bl	800101c <bno055_setup>
      bno055_setOperationModeNDOF();
 8001706:	f7ff fc76 	bl	8000ff6 <bno055_setOperationModeNDOF>
      setup();
 800170a:	f002 fe79 	bl	8004400 <setup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if(HAL_GetTick()-currenTick>10){
 800170e:	f004 fbc1 	bl	8005e94 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b0a      	cmp	r3, #10
 800171a:	d9f8      	bls.n	800170e <main+0x86>
			error_jrk = error_jarak_calculation(61, camera.distance);
 800171c:	4b2c      	ldr	r3, [pc, #176]	@ (80017d0 <main+0x148>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4619      	mov	r1, r3
 8001722:	482c      	ldr	r0, [pc, #176]	@ (80017d4 <main+0x14c>)
 8001724:	f003 ff6e 	bl	8005604 <error_jarak_calculation>
 8001728:	4603      	mov	r3, r0
 800172a:	4a2b      	ldr	r2, [pc, #172]	@ (80017d8 <main+0x150>)
 800172c:	6013      	str	r3, [r2, #0]
			error_sdt = error_sudut_calculation(116, camera.angle);
 800172e:	4b28      	ldr	r3, [pc, #160]	@ (80017d0 <main+0x148>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	4619      	mov	r1, r3
 8001734:	4829      	ldr	r0, [pc, #164]	@ (80017dc <main+0x154>)
 8001736:	f003 ff2d 	bl	8005594 <error_sudut_calculation>
 800173a:	4603      	mov	r3, r0
 800173c:	4a28      	ldr	r2, [pc, #160]	@ (80017e0 <main+0x158>)
 800173e:	6013      	str	r3, [r2, #0]
			pid_ax = PID_Update(&pidAx, camera.distance, error_jrk)/1000;
 8001740:	4b23      	ldr	r3, [pc, #140]	@ (80017d0 <main+0x148>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a24      	ldr	r2, [pc, #144]	@ (80017d8 <main+0x150>)
 8001746:	6812      	ldr	r2, [r2, #0]
 8001748:	4619      	mov	r1, r3
 800174a:	4819      	ldr	r0, [pc, #100]	@ (80017b0 <main+0x128>)
 800174c:	f003 fe8c 	bl	8005468 <PID_Update>
 8001750:	4603      	mov	r3, r0
 8001752:	4914      	ldr	r1, [pc, #80]	@ (80017a4 <main+0x11c>)
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff fae3 	bl	8000d20 <__aeabi_fdiv>
 800175a:	4603      	mov	r3, r0
 800175c:	461a      	mov	r2, r3
 800175e:	4b21      	ldr	r3, [pc, #132]	@ (80017e4 <main+0x15c>)
 8001760:	601a      	str	r2, [r3, #0]
			pid_w = PID_Update(&pidW, camera.angle, error_sdt)/1000;
 8001762:	4b1b      	ldr	r3, [pc, #108]	@ (80017d0 <main+0x148>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	4a1e      	ldr	r2, [pc, #120]	@ (80017e0 <main+0x158>)
 8001768:	6812      	ldr	r2, [r2, #0]
 800176a:	4619      	mov	r1, r3
 800176c:	4813      	ldr	r0, [pc, #76]	@ (80017bc <main+0x134>)
 800176e:	f003 fe7b 	bl	8005468 <PID_Update>
 8001772:	4603      	mov	r3, r0
 8001774:	490b      	ldr	r1, [pc, #44]	@ (80017a4 <main+0x11c>)
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff fad2 	bl	8000d20 <__aeabi_fdiv>
 800177c:	4603      	mov	r3, r0
 800177e:	461a      	mov	r2, r3
 8001780:	4b19      	ldr	r3, [pc, #100]	@ (80017e8 <main+0x160>)
 8001782:	601a      	str	r2, [r3, #0]

			//			pid_ax = 0;
			//			pid_w = 0.7;

			motor_calculation(pid_ax, 0, pid_w);
 8001784:	4b17      	ldr	r3, [pc, #92]	@ (80017e4 <main+0x15c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a17      	ldr	r2, [pc, #92]	@ (80017e8 <main+0x160>)
 800178a:	6812      	ldr	r2, [r2, #0]
 800178c:	f04f 0100 	mov.w	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f003 fc6d 	bl	8005070 <motor_calculation>
			loop();
 8001796:	f002 fe4f 	bl	8004438 <loop>
			currenTick = HAL_GetTick();
 800179a:	f004 fb7b 	bl	8005e94 <HAL_GetTick>
 800179e:	6078      	str	r0, [r7, #4]
		if(HAL_GetTick()-currenTick>10){
 80017a0:	e7b5      	b.n	800170e <main+0x86>
 80017a2:	bf00      	nop
 80017a4:	447a0000 	.word	0x447a0000
 80017a8:	c47a0000 	.word	0xc47a0000
 80017ac:	40c00000 	.word	0x40c00000
 80017b0:	200000fc 	.word	0x200000fc
 80017b4:	41200000 	.word	0x41200000
 80017b8:	40a00000 	.word	0x40a00000
 80017bc:	20000124 	.word	0x20000124
 80017c0:	20000b88 	.word	0x20000b88
 80017c4:	20000bd0 	.word	0x20000bd0
 80017c8:	20000c18 	.word	0x20000c18
 80017cc:	20000094 	.word	0x20000094
 80017d0:	20000190 	.word	0x20000190
 80017d4:	42740000 	.word	0x42740000
 80017d8:	20000150 	.word	0x20000150
 80017dc:	42e80000 	.word	0x42e80000
 80017e0:	20000154 	.word	0x20000154
 80017e4:	2000014c 	.word	0x2000014c
 80017e8:	20000158 	.word	0x20000158

080017ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b090      	sub	sp, #64	@ 0x40
 80017f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017f2:	f107 0318 	add.w	r3, r7, #24
 80017f6:	2228      	movs	r2, #40	@ 0x28
 80017f8:	2100      	movs	r1, #0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f008 fc70 	bl	800a0e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	60da      	str	r2, [r3, #12]
 800180c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800180e:	2301      	movs	r3, #1
 8001810:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001812:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001816:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001818:	2300      	movs	r3, #0
 800181a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800181c:	2301      	movs	r3, #1
 800181e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001820:	2302      	movs	r3, #2
 8001822:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001824:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001828:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800182a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800182e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001830:	f107 0318 	add.w	r3, r7, #24
 8001834:	4618      	mov	r0, r3
 8001836:	f006 f8db 	bl	80079f0 <HAL_RCC_OscConfig>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001840:	f000 f872 	bl	8001928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001844:	230f      	movs	r3, #15
 8001846:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001848:	2302      	movs	r3, #2
 800184a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001850:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001854:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	2102      	movs	r1, #2
 800185e:	4618      	mov	r0, r3
 8001860:	f006 fb48 	bl	8007ef4 <HAL_RCC_ClockConfig>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800186a:	f000 f85d 	bl	8001928 <Error_Handler>
  }
}
 800186e:	bf00      	nop
 8001870:	3740      	adds	r7, #64	@ 0x40
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

short counterBNO = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	@ 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	if(htim == &htim1){
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a22      	ldr	r2, [pc, #136]	@ (800190c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d13d      	bne.n	8001904 <HAL_TIM_PeriodElapsedCallback+0x8c>
		if(counterBNO == 100){
 8001888:	4b21      	ldr	r3, [pc, #132]	@ (8001910 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800188a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800188e:	2b64      	cmp	r3, #100	@ 0x64
 8001890:	d12f      	bne.n	80018f2 <HAL_TIM_PeriodElapsedCallback+0x7a>
			bno055_vector_t v = bno055_getVectorMagnetometer();
 8001892:	f107 0308 	add.w	r3, r7, #8
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fd00 	bl	800129c <bno055_getVectorMagnetometer>
			x = v.x;
 800189c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	f7ff f82a 	bl	80008fc <__aeabi_d2f>
 80018a8:	4603      	mov	r3, r0
 80018aa:	4a1a      	ldr	r2, [pc, #104]	@ (8001914 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80018ac:	6013      	str	r3, [r2, #0]
			y = v.y;
 80018ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018b2:	4610      	mov	r0, r2
 80018b4:	4619      	mov	r1, r3
 80018b6:	f7ff f821 	bl	80008fc <__aeabi_d2f>
 80018ba:	4603      	mov	r3, r0
 80018bc:	4a16      	ldr	r2, [pc, #88]	@ (8001918 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80018be:	6013      	str	r3, [r2, #0]
			z = v.z;
 80018c0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	f7ff f818 	bl	80008fc <__aeabi_d2f>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4a13      	ldr	r2, [pc, #76]	@ (800191c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80018d0:	6013      	str	r3, [r2, #0]
			w = v.w;
 80018d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018d6:	4610      	mov	r0, r2
 80018d8:	4619      	mov	r1, r3
 80018da:	f7ff f80f 	bl	80008fc <__aeabi_d2f>
 80018de:	4603      	mov	r3, r0
 80018e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001920 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80018e2:	6013      	str	r3, [r2, #0]

			bno.x = x;
 80018e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001924 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80018ea:	6013      	str	r3, [r2, #0]

			counterBNO = 0;
 80018ec:	4b08      	ldr	r3, [pc, #32]	@ (8001910 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	801a      	strh	r2, [r3, #0]
		}

		counterBNO++;
 80018f2:	4b07      	ldr	r3, [pc, #28]	@ (8001910 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80018f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	3301      	adds	r3, #1
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	b21a      	sxth	r2, r3
 8001900:	4b03      	ldr	r3, [pc, #12]	@ (8001910 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001902:	801a      	strh	r2, [r3, #0]

	}
}
 8001904:	bf00      	nop
 8001906:	3728      	adds	r7, #40	@ 0x28
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000b88 	.word	0x20000b88
 8001910:	2000015c 	.word	0x2000015c
 8001914:	200000ec 	.word	0x200000ec
 8001918:	200000f0 	.word	0x200000f0
 800191c:	200000f4 	.word	0x200000f4
 8001920:	200000f8 	.word	0x200000f8
 8001924:	20000160 	.word	0x20000160

08001928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800192c:	b672      	cpsid	i
}
 800192e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <Error_Handler+0x8>

08001934 <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  {
    int32_t val;
    memcpy(&val, &f, sizeof(val));
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	60fb      	str	r3, [r7, #12]

    int16_t exp = ((val >> 23) & 255);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	15db      	asrs	r3, r3, #23
 8001946:	b21b      	sxth	r3, r3
 8001948:	b2db      	uxtb	r3, r3
 800194a:	82fb      	strh	r3, [r7, #22]
    uint32_t mantissa = val & 0x7FFFFF;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8001952:	613b      	str	r3, [r7, #16]

    if (exp == 255)
 8001954:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001958:	2bff      	cmp	r3, #255	@ 0xff
 800195a:	d103      	bne.n	8001964 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x30>
    {
      exp = 2047; // Special value for NaN, infinity etc.
 800195c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001960:	82fb      	strh	r3, [r7, #22]
 8001962:	e02a      	b.n	80019ba <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x86>
    }
    else if (exp != 0)
 8001964:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d005      	beq.n	8001978 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x44>
    {
      exp += 1023 - 127; // Normal case
 800196c:	8afb      	ldrh	r3, [r7, #22]
 800196e:	f503 7360 	add.w	r3, r3, #896	@ 0x380
 8001972:	b29b      	uxth	r3, r3
 8001974:	82fb      	strh	r3, [r7, #22]
 8001976:	e020      	b.n	80019ba <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x86>
    }
    else if (!mantissa)
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d102      	bne.n	8001984 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x50>
    {
      exp = 0; // Zero
 800197e:	2300      	movs	r3, #0
 8001980:	82fb      	strh	r3, [r7, #22]
 8001982:	e01a      	b.n	80019ba <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x86>
    }
    else
    {
      // Denormalized value in float, will fit as normalized value in double
      exp += 1023 - 127;
 8001984:	8afb      	ldrh	r3, [r7, #22]
 8001986:	f503 7360 	add.w	r3, r3, #896	@ 0x380
 800198a:	b29b      	uxth	r3, r3
 800198c:	82fb      	strh	r3, [r7, #22]
      mantissa <<= 1;
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	613b      	str	r3, [r7, #16]
      while (!(mantissa & 0x800000))
 8001994:	e008      	b.n	80019a8 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x74>
      {
          mantissa <<= 1;
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	613b      	str	r3, [r7, #16]
          exp--;
 800199c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	3b01      	subs	r3, #1
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	82fb      	strh	r3, [r7, #22]
      while (!(mantissa & 0x800000))
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f1      	beq.n	8001996 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x62>
      }
      mantissa &= 0x7FFFFF;
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80019b8:	613b      	str	r3, [r7, #16]
    }

    *(outbuffer++) = 0;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	607a      	str	r2, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	607a      	str	r2, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	1c5a      	adds	r2, r3, #1
 80019d2:	607a      	str	r2, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa << 5) & 0xff;
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	1c59      	adds	r1, r3, #1
 80019e0:	6079      	str	r1, [r7, #4]
 80019e2:	0152      	lsls	r2, r2, #5
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa >> 3) & 0xff;
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	08d9      	lsrs	r1, r3, #3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	1c5a      	adds	r2, r3, #1
 80019f0:	607a      	str	r2, [r7, #4]
 80019f2:	b2ca      	uxtb	r2, r1
 80019f4:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa >> 11) & 0xff;
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	0ad9      	lsrs	r1, r3, #11
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	1c5a      	adds	r2, r3, #1
 80019fe:	607a      	str	r2, [r7, #4]
 8001a00:	b2ca      	uxtb	r2, r1
 8001a02:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((mantissa >> 19) & 0x0F);
 8001a04:	8afb      	ldrh	r3, [r7, #22]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	b2d9      	uxtb	r1, r3
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	0cdb      	lsrs	r3, r3, #19
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	1c58      	adds	r0, r3, #1
 8001a1c:	6078      	str	r0, [r7, #4]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 8001a24:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a28:	111b      	asrs	r3, r3, #4
 8001a2a:	b21b      	sxth	r3, r3
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	1c59      	adds	r1, r3, #1
 8001a32:	6079      	str	r1, [r7, #4]
 8001a34:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	f04f 0100 	mov.w	r1, #0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fa56 	bl	8000ef4 <__aeabi_fcmplt>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d008      	beq.n	8001a60 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x12c>
    {
      *(outbuffer - 1) |= 0x80;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3b01      	subs	r3, #1
 8001a52:	781a      	ldrb	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 8001a60:	2308      	movs	r3, #8
  }
 8001a62:	4618      	mov	r0, r3
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 8001a6a:	b480      	push	{r7}
 8001a6c:	b087      	sub	sp, #28
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	6039      	str	r1, [r7, #0]
  {
    int16_t exp;
    uint32_t mantissa;

    // Skip lowest 24 bits
    inbuffer += 3;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3303      	adds	r3, #3
 8001a78:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    mantissa = ((uint32_t)(*(inbuffer++)) >> 4 & 0x0F);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	1c5a      	adds	r2, r3, #1
 8001a7e:	607a      	str	r2, [r7, #4]
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	091b      	lsrs	r3, r3, #4
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*(inbuffer++)) & 0xff) << 4;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	1c5a      	adds	r2, r3, #1
 8001a90:	607a      	str	r2, [r7, #4]
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*(inbuffer++)) & 0xff) << 12;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	607a      	str	r2, [r7, #4]
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	031b      	lsls	r3, r3, #12
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*inbuffer) & 0x0f) << 20;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	051b      	lsls	r3, r3, #20
 8001ab2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]

    // Copy exponent.
    exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	b21b      	sxth	r3, r3
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	82fb      	strh	r3, [r7, #22]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	011b      	lsls	r3, r3, #4
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	8afb      	ldrh	r3, [r7, #22]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	82fb      	strh	r3, [r7, #22]

    if (exp == 2047)
 8001ae6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001aea:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d102      	bne.n	8001af8 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x8e>
    {
      exp = 255; // NaN, infinity etc.
 8001af2:	23ff      	movs	r3, #255	@ 0xff
 8001af4:	82fb      	strh	r3, [r7, #22]
 8001af6:	e02c      	b.n	8001b52 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xe8>
    }
    else if (exp - 1023 > 127)
 8001af8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001afc:	f240 427e 	movw	r2, #1150	@ 0x47e
 8001b00:	4293      	cmp	r3, r2
 8001b02:	dd04      	ble.n	8001b0e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xa4>
    {
      exp = 255;
 8001b04:	23ff      	movs	r3, #255	@ 0xff
 8001b06:	82fb      	strh	r3, [r7, #22]
      mantissa = 0; // Too large for float, convert to infinity
 8001b08:	2300      	movs	r3, #0
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	e021      	b.n	8001b52 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xe8>
    }
    else if (exp - 1023 >= -126)
 8001b0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b12:	f5b3 7f60 	cmp.w	r3, #896	@ 0x380
 8001b16:	dd05      	ble.n	8001b24 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xba>
    {
      exp -= 1023 - 127; // Normal case
 8001b18:	8afb      	ldrh	r3, [r7, #22]
 8001b1a:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	82fb      	strh	r3, [r7, #22]
 8001b22:	e016      	b.n	8001b52 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xe8>
    }
    else if (exp - 1023 < -150)
 8001b24:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b28:	f5b3 7f5a 	cmp.w	r3, #872	@ 0x368
 8001b2c:	dc02      	bgt.n	8001b34 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xca>
    {
      exp = 0; // Too small or zero
 8001b2e:	2300      	movs	r3, #0
 8001b30:	82fb      	strh	r3, [r7, #22]
 8001b32:	e00e      	b.n	8001b52 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xe8>
    }
    else
    {
      // Have to convert to denormalized representation for float
      mantissa |= 0x1000000;
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b3a:	613b      	str	r3, [r7, #16]
      mantissa >>= ((-126 + 1023) - exp);
 8001b3c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b40:	f5c3 7360 	rsb	r3, r3, #896	@ 0x380
 8001b44:	3301      	adds	r3, #1
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	fa22 f303 	lsr.w	r3, r2, r3
 8001b4c:	613b      	str	r3, [r7, #16]
      exp = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	82fb      	strh	r3, [r7, #22]
    }

    // Round off mantissa
    if (mantissa != 0xFFFFFF)
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d002      	beq.n	8001b62 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xf8>
      mantissa += 1;
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	613b      	str	r3, [r7, #16]

    mantissa >>= 1;
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	085b      	lsrs	r3, r3, #1
 8001b66:	613b      	str	r3, [r7, #16]

    // Put mantissa and exponent into place
    uint32_t val = mantissa;
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	60fb      	str	r3, [r7, #12]
    val |= static_cast<uint32_t>(exp) << 23;
 8001b6c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b70:	05da      	lsls	r2, r3, #23
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]

    // Copy negative sign.
    val |= (static_cast<uint32_t>(*(inbuffer++)) & 0x80) << 24;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	061b      	lsls	r3, r3, #24
 8001b82:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]

    memcpy(f, &val, sizeof(val));
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	601a      	str	r2, [r3, #0]
    return 8;
 8001b92:	2308      	movs	r3, #8
  }
 8001b94:	4618      	mov	r0, r3
 8001b96:	371c      	adds	r7, #28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr

08001b9e <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr
	...

08001bc0 <_ZN3ros3MsgC1Ev>:
class Msg
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	4a04      	ldr	r2, [pc, #16]	@ (8001bdc <_ZN3ros3MsgC1Ev+0x1c>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	0800b1ac 	.word	0x0800b1ac

08001be0 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
      data()
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff ffe8 	bl	8001bc0 <_ZN3ros3MsgC1Ev>
 8001bf0:	4a06      	ldr	r2, [pc, #24]	@ (8001c0c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff ffcf 	bl	8001b9e <_ZN3ros4TimeC1Ev>
    {
    }
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	0800b194 	.word	0x0800b194

08001c10 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6859      	ldr	r1, [r3, #4]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	4413      	add	r3, r2
 8001c28:	b2ca      	uxtb	r2, r1
 8001c2a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	0a19      	lsrs	r1, r3, #8
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	3301      	adds	r3, #1
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	4413      	add	r3, r2
 8001c3a:	b2ca      	uxtb	r2, r1
 8001c3c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	0c19      	lsrs	r1, r3, #16
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	3302      	adds	r3, #2
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	b2ca      	uxtb	r2, r1
 8001c4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	0e19      	lsrs	r1, r3, #24
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	3303      	adds	r3, #3
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	b2ca      	uxtb	r2, r1
 8001c60:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	3304      	adds	r3, #4
 8001c66:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6899      	ldr	r1, [r3, #8]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	4413      	add	r3, r2
 8001c72:	b2ca      	uxtb	r2, r1
 8001c74:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	0a19      	lsrs	r1, r3, #8
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	4413      	add	r3, r2
 8001c84:	b2ca      	uxtb	r2, r1
 8001c86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	0c19      	lsrs	r1, r3, #16
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	3302      	adds	r3, #2
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	4413      	add	r3, r2
 8001c96:	b2ca      	uxtb	r2, r1
 8001c98:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	0e19      	lsrs	r1, r3, #24
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	3303      	adds	r3, #3
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	b2ca      	uxtb	r2, r1
 8001caa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	3304      	adds	r3, #4
 8001cb0:	60fb      	str	r3, [r7, #12]
      return offset;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
    }
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr

08001cbe <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001cbe:	b480      	push	{r7}
 8001cc0:	b085      	sub	sp, #20
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	6839      	ldr	r1, [r7, #0]
 8001ce4:	440b      	add	r3, r1
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	021b      	lsls	r3, r3, #8
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	3302      	adds	r3, #2
 8001cf8:	6839      	ldr	r1, [r7, #0]
 8001cfa:	440b      	add	r3, r1
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	041b      	lsls	r3, r3, #16
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	3303      	adds	r3, #3
 8001d0e:	6839      	ldr	r1, [r7, #0]
 8001d10:	440b      	add	r3, r1
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	061b      	lsls	r3, r3, #24
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	3304      	adds	r3, #4
 8001d20:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	4413      	add	r3, r2
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	3301      	adds	r3, #1
 8001d38:	6839      	ldr	r1, [r7, #0]
 8001d3a:	440b      	add	r3, r1
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	021b      	lsls	r3, r3, #8
 8001d40:	431a      	orrs	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689a      	ldr	r2, [r3, #8]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	3302      	adds	r3, #2
 8001d4e:	6839      	ldr	r1, [r7, #0]
 8001d50:	440b      	add	r3, r1
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	041b      	lsls	r3, r3, #16
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	3303      	adds	r3, #3
 8001d64:	6839      	ldr	r1, [r7, #0]
 8001d66:	440b      	add	r3, r1
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	061b      	lsls	r3, r3, #24
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	3304      	adds	r3, #4
 8001d76:	60fb      	str	r3, [r7, #12]
     return offset;
 8001d78:	68fb      	ldr	r3, [r7, #12]
    }
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	4b02      	ldr	r3, [pc, #8]	@ (8001d98 <_ZN8std_msgs4Time7getTypeEv+0x14>)
 8001d8e:	4618      	mov	r0, r3
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr
 8001d98:	0800ae7c 	.word	0x0800ae7c

08001d9c <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	4b02      	ldr	r3, [pc, #8]	@ (8001db0 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr
 8001db0:	0800ae8c 	.word	0x0800ae8c

08001db4 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fefe 	bl	8001bc0 <_ZN3ros3MsgC1Ev>
 8001dc4:	4a0b      	ldr	r2, [pc, #44]	@ (8001df4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a09      	ldr	r2, [pc, #36]	@ (8001df8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001dd4:	609a      	str	r2, [r3, #8]
      message_type(""),
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a07      	ldr	r2, [pc, #28]	@ (8001df8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001dda:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a06      	ldr	r2, [pc, #24]	@ (8001df8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001de0:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	615a      	str	r2, [r3, #20]
    {
    }
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	0800b17c 	.word	0x0800b17c
 8001df8:	0800aeb0 	.word	0x0800aeb0

08001dfc <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	8899      	ldrh	r1, [r3, #4]
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	4413      	add	r3, r2
 8001e14:	b2ca      	uxtb	r2, r1
 8001e16:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	889b      	ldrh	r3, [r3, #4]
 8001e1c:	0a1b      	lsrs	r3, r3, #8
 8001e1e:	b299      	uxth	r1, r3
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	3301      	adds	r3, #1
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	b2ca      	uxtb	r2, r1
 8001e2a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	3302      	adds	r3, #2
 8001e30:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe f98a 	bl	8000150 <strlen>
 8001e3c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	4413      	add	r3, r2
 8001e44:	69b9      	ldr	r1, [r7, #24]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f002 fb2a 	bl	80044a0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	3304      	adds	r3, #4
 8001e50:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	18d0      	adds	r0, r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f008 f9b9 	bl	800a1d6 <memcpy>
      offset += length_topic_name;
 8001e64:	69fa      	ldr	r2, [r7, #28]
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	4413      	add	r3, r2
 8001e6a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe f96d 	bl	8000150 <strlen>
 8001e76:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	6979      	ldr	r1, [r7, #20]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f002 fb0d 	bl	80044a0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3304      	adds	r3, #4
 8001e8a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	18d0      	adds	r0, r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f008 f99c 	bl	800a1d6 <memcpy>
      offset += length_message_type;
 8001e9e:	69fa      	ldr	r2, [r7, #28]
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe f950 	bl	8000150 <strlen>
 8001eb0:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	6939      	ldr	r1, [r7, #16]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f002 faf0 	bl	80044a0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	18d0      	adds	r0, r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	f008 f97f 	bl	800a1d6 <memcpy>
      offset += length_md5sum;
 8001ed8:	69fa      	ldr	r2, [r7, #28]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4413      	add	r3, r2
 8001ede:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001ee6:	68f9      	ldr	r1, [r7, #12]
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	4413      	add	r3, r2
 8001eee:	b2ca      	uxtb	r2, r1
 8001ef0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	0a19      	lsrs	r1, r3, #8
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	4413      	add	r3, r2
 8001efe:	b2ca      	uxtb	r2, r1
 8001f00:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	0c19      	lsrs	r1, r3, #16
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3302      	adds	r3, #2
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	b2ca      	uxtb	r2, r1
 8001f10:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	0e19      	lsrs	r1, r3, #24
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3303      	adds	r3, #3
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	b2ca      	uxtb	r2, r1
 8001f20:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	3304      	adds	r3, #4
 8001f26:	61fb      	str	r3, [r7, #28]
      return offset;
 8001f28:	69fb      	ldr	r3, [r7, #28]
    }
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3720      	adds	r7, #32
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b08a      	sub	sp, #40	@ 0x28
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	4413      	add	r3, r2
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	889b      	ldrh	r3, [r3, #4]
 8001f52:	b21a      	sxth	r2, r3
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	3301      	adds	r3, #1
 8001f58:	6839      	ldr	r1, [r7, #0]
 8001f5a:	440b      	add	r3, r1
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	021b      	lsls	r3, r3, #8
 8001f60:	b21b      	sxth	r3, r3
 8001f62:	4313      	orrs	r3, r2
 8001f64:	b21b      	sxth	r3, r3
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	3302      	adds	r3, #2
 8001f70:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	441a      	add	r2, r3
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f002 faac 	bl	80044dc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	3304      	adds	r3, #4
 8001f88:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f8e:	e00b      	b.n	8001fa8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f94:	441a      	add	r2, r3
 8001f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	6839      	ldr	r1, [r7, #0]
 8001f9c:	440b      	add	r3, r1
 8001f9e:	7812      	ldrb	r2, [r2, #0]
 8001fa0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	4413      	add	r3, r2
 8001fae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d3ed      	bcc.n	8001f90 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	4413      	add	r3, r2
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	441a      	add	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	441a      	add	r2, r3
 8001fde:	f107 0310 	add.w	r3, r7, #16
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f002 fa79 	bl	80044dc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	3304      	adds	r3, #4
 8001fee:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	623b      	str	r3, [r7, #32]
 8001ff4:	e00b      	b.n	800200e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	441a      	add	r2, r3
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	6839      	ldr	r1, [r7, #0]
 8002002:	440b      	add	r3, r1
 8002004:	7812      	ldrb	r2, [r2, #0]
 8002006:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002008:	6a3b      	ldr	r3, [r7, #32]
 800200a:	3301      	adds	r3, #1
 800200c:	623b      	str	r3, [r7, #32]
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4413      	add	r3, r2
 8002014:	6a3a      	ldr	r2, [r7, #32]
 8002016:	429a      	cmp	r2, r3
 8002018:	d3ed      	bcc.n	8001ff6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4413      	add	r3, r2
 8002020:	3b01      	subs	r3, #1
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	4413      	add	r3, r2
 8002026:	2200      	movs	r2, #0
 8002028:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	3b01      	subs	r3, #1
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	441a      	add	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	4413      	add	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	441a      	add	r2, r3
 8002044:	f107 030c 	add.w	r3, r7, #12
 8002048:	4611      	mov	r1, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f002 fa46 	bl	80044dc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	3304      	adds	r3, #4
 8002054:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	e00b      	b.n	8002074 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	441a      	add	r2, r3
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3b01      	subs	r3, #1
 8002066:	6839      	ldr	r1, [r7, #0]
 8002068:	440b      	add	r3, r1
 800206a:	7812      	ldrb	r2, [r2, #0]
 800206c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3301      	adds	r3, #1
 8002072:	61fb      	str	r3, [r7, #28]
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4413      	add	r3, r2
 800207a:	69fa      	ldr	r2, [r7, #28]
 800207c:	429a      	cmp	r2, r3
 800207e:	d3ed      	bcc.n	800205c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4413      	add	r3, r2
 8002086:	3b01      	subs	r3, #1
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	4413      	add	r3, r2
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	3b01      	subs	r3, #1
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	441a      	add	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4413      	add	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	6839      	ldr	r1, [r7, #0]
 80020ae:	440a      	add	r2, r1
 80020b0:	7812      	ldrb	r2, [r2, #0]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	3301      	adds	r3, #1
 80020bc:	6839      	ldr	r1, [r7, #0]
 80020be:	440b      	add	r3, r1
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	021b      	lsls	r3, r3, #8
 80020c4:	4313      	orrs	r3, r2
 80020c6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80020c8:	68ba      	ldr	r2, [r7, #8]
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	3302      	adds	r3, #2
 80020ce:	6839      	ldr	r1, [r7, #0]
 80020d0:	440b      	add	r3, r1
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	041b      	lsls	r3, r3, #16
 80020d6:	4313      	orrs	r3, r2
 80020d8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	3303      	adds	r3, #3
 80020e0:	6839      	ldr	r1, [r7, #0]
 80020e2:	440b      	add	r3, r1
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	061b      	lsls	r3, r3, #24
 80020e8:	4313      	orrs	r3, r2
 80020ea:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80020ec:	68ba      	ldr	r2, [r7, #8]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	3304      	adds	r3, #4
 80020f6:	61bb      	str	r3, [r7, #24]
     return offset;
 80020f8:	69bb      	ldr	r3, [r7, #24]
    }
 80020fa:	4618      	mov	r0, r3
 80020fc:	3728      	adds	r7, #40	@ 0x28
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	4b02      	ldr	r3, [pc, #8]	@ (8002118 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr
 8002118:	0800aeb4 	.word	0x0800aeb4

0800211c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	4b02      	ldr	r3, [pc, #8]	@ (8002130 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr
 8002130:	0800aed0 	.word	0x0800aed0

08002134 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fd3e 	bl	8001bc0 <_ZN3ros3MsgC1Ev>
 8002144:	4a06      	ldr	r2, [pc, #24]	@ (8002160 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	601a      	str	r2, [r3, #0]
      level(0),
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	711a      	strb	r2, [r3, #4]
      msg("")
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a04      	ldr	r2, [pc, #16]	@ (8002164 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002154:	609a      	str	r2, [r3, #8]
    {
    }
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	0800b164 	.word	0x0800b164
 8002164:	0800aeb0 	.word	0x0800aeb0

08002168 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	4413      	add	r3, r2
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	7912      	ldrb	r2, [r2, #4]
 8002180:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	3301      	adds	r3, #1
 8002186:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	4618      	mov	r0, r3
 800218e:	f7fd ffdf 	bl	8000150 <strlen>
 8002192:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	4413      	add	r3, r2
 800219a:	68b9      	ldr	r1, [r7, #8]
 800219c:	4618      	mov	r0, r3
 800219e:	f002 f97f 	bl	80044a0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	3304      	adds	r3, #4
 80021a6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	18d0      	adds	r0, r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	4619      	mov	r1, r3
 80021b6:	f008 f80e 	bl	800a1d6 <memcpy>
      offset += length_msg;
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	4413      	add	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]
      return offset;
 80021c2:	68fb      	ldr	r3, [r7, #12]
    }
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	4413      	add	r3, r2
 80021e0:	781a      	ldrb	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	3301      	adds	r3, #1
 80021ea:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	441a      	add	r2, r3
 80021f2:	f107 030c 	add.w	r3, r7, #12
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f002 f96f 	bl	80044dc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	3304      	adds	r3, #4
 8002202:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	e00b      	b.n	8002222 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	441a      	add	r2, r3
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	3b01      	subs	r3, #1
 8002214:	6839      	ldr	r1, [r7, #0]
 8002216:	440b      	add	r3, r1
 8002218:	7812      	ldrb	r2, [r2, #0]
 800221a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	3301      	adds	r3, #1
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4413      	add	r3, r2
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	429a      	cmp	r2, r3
 800222c:	d3ed      	bcc.n	800220a <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4413      	add	r3, r2
 8002234:	3b01      	subs	r3, #1
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	4413      	add	r3, r2
 800223a:	2200      	movs	r2, #0
 800223c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	3b01      	subs	r3, #1
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	441a      	add	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4413      	add	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
     return offset;
 8002252:	693b      	ldr	r3, [r7, #16]
    }
 8002254:	4618      	mov	r0, r3
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	4b02      	ldr	r3, [pc, #8]	@ (8002270 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr
 8002270:	0800aef4 	.word	0x0800aef4

08002274 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	4b02      	ldr	r3, [pc, #8]	@ (8002288 <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 800227e:	4618      	mov	r0, r3
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr
 8002288:	0800af08 	.word	0x0800af08

0800228c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fc92 	bl	8001bc0 <_ZN3ros3MsgC1Ev>
 800229c:	4a11      	ldr	r2, [pc, #68]	@ (80022e4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	611a      	str	r2, [r3, #16]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	615a      	str	r2, [r3, #20]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	61da      	str	r2, [r3, #28]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	621a      	str	r2, [r3, #32]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4618      	mov	r0, r3
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	0800b14c 	.word	0x0800b14c

080022e8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08a      	sub	sp, #40	@ 0x28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6859      	ldr	r1, [r3, #4]
 80022fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	4413      	add	r3, r2
 8002300:	b2ca      	uxtb	r2, r1
 8002302:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	0a19      	lsrs	r1, r3, #8
 800230a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230c:	3301      	adds	r3, #1
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	4413      	add	r3, r2
 8002312:	b2ca      	uxtb	r2, r1
 8002314:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	0c19      	lsrs	r1, r3, #16
 800231c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231e:	3302      	adds	r3, #2
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	4413      	add	r3, r2
 8002324:	b2ca      	uxtb	r2, r1
 8002326:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	0e19      	lsrs	r1, r3, #24
 800232e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002330:	3303      	adds	r3, #3
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	4413      	add	r3, r2
 8002336:	b2ca      	uxtb	r2, r1
 8002338:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800233a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233c:	3304      	adds	r3, #4
 800233e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002340:	2300      	movs	r3, #0
 8002342:	623b      	str	r3, [r7, #32]
 8002344:	e02a      	b.n	800239c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002354:	6939      	ldr	r1, [r7, #16]
 8002356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	4413      	add	r3, r2
 800235c:	b2ca      	uxtb	r2, r1
 800235e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	0a19      	lsrs	r1, r3, #8
 8002364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002366:	3301      	adds	r3, #1
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	4413      	add	r3, r2
 800236c:	b2ca      	uxtb	r2, r1
 800236e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	0c19      	lsrs	r1, r3, #16
 8002374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002376:	3302      	adds	r3, #2
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	4413      	add	r3, r2
 800237c:	b2ca      	uxtb	r2, r1
 800237e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	0e19      	lsrs	r1, r3, #24
 8002384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002386:	3303      	adds	r3, #3
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	4413      	add	r3, r2
 800238c:	b2ca      	uxtb	r2, r1
 800238e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002392:	3304      	adds	r3, #4
 8002394:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	3301      	adds	r3, #1
 800239a:	623b      	str	r3, [r7, #32]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	6a3a      	ldr	r2, [r7, #32]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d3cf      	bcc.n	8002346 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6919      	ldr	r1, [r3, #16]
 80023aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	4413      	add	r3, r2
 80023b0:	b2ca      	uxtb	r2, r1
 80023b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	0a19      	lsrs	r1, r3, #8
 80023ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023bc:	3301      	adds	r3, #1
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	4413      	add	r3, r2
 80023c2:	b2ca      	uxtb	r2, r1
 80023c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	0c19      	lsrs	r1, r3, #16
 80023cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ce:	3302      	adds	r3, #2
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	4413      	add	r3, r2
 80023d4:	b2ca      	uxtb	r2, r1
 80023d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	0e19      	lsrs	r1, r3, #24
 80023de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e0:	3303      	adds	r3, #3
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	4413      	add	r3, r2
 80023e6:	b2ca      	uxtb	r2, r1
 80023e8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80023ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ec:	3304      	adds	r3, #4
 80023ee:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80023f0:	2300      	movs	r3, #0
 80023f2:	61fb      	str	r3, [r7, #28]
 80023f4:	e02a      	b.n	800244c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699a      	ldr	r2, [r3, #24]
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002404:	68f9      	ldr	r1, [r7, #12]
 8002406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	4413      	add	r3, r2
 800240c:	b2ca      	uxtb	r2, r1
 800240e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	0a19      	lsrs	r1, r3, #8
 8002414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002416:	3301      	adds	r3, #1
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	4413      	add	r3, r2
 800241c:	b2ca      	uxtb	r2, r1
 800241e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	0c19      	lsrs	r1, r3, #16
 8002424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002426:	3302      	adds	r3, #2
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	4413      	add	r3, r2
 800242c:	b2ca      	uxtb	r2, r1
 800242e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	0e19      	lsrs	r1, r3, #24
 8002434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002436:	3303      	adds	r3, #3
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	4413      	add	r3, r2
 800243c:	b2ca      	uxtb	r2, r1
 800243e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002442:	3304      	adds	r3, #4
 8002444:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3301      	adds	r3, #1
 800244a:	61fb      	str	r3, [r7, #28]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	69fa      	ldr	r2, [r7, #28]
 8002452:	429a      	cmp	r2, r3
 8002454:	d3cf      	bcc.n	80023f6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69d9      	ldr	r1, [r3, #28]
 800245a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	4413      	add	r3, r2
 8002460:	b2ca      	uxtb	r2, r1
 8002462:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	0a19      	lsrs	r1, r3, #8
 800246a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246c:	3301      	adds	r3, #1
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	4413      	add	r3, r2
 8002472:	b2ca      	uxtb	r2, r1
 8002474:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	0c19      	lsrs	r1, r3, #16
 800247c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247e:	3302      	adds	r3, #2
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	4413      	add	r3, r2
 8002484:	b2ca      	uxtb	r2, r1
 8002486:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	0e19      	lsrs	r1, r3, #24
 800248e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002490:	3303      	adds	r3, #3
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	4413      	add	r3, r2
 8002496:	b2ca      	uxtb	r2, r1
 8002498:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800249a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249c:	3304      	adds	r3, #4
 800249e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80024a0:	2300      	movs	r3, #0
 80024a2:	61bb      	str	r3, [r7, #24]
 80024a4:	e027      	b.n	80024f6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fd fe4c 	bl	8000150 <strlen>
 80024b8:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80024ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	4413      	add	r3, r2
 80024c0:	6979      	ldr	r1, [r7, #20]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f001 ffec 	bl	80044a0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80024c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ca:	3304      	adds	r3, #4
 80024cc:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80024ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	18d0      	adds	r0, r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	4619      	mov	r1, r3
 80024e4:	f007 fe77 	bl	800a1d6 <memcpy>
      offset += length_stringsi;
 80024e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	4413      	add	r3, r2
 80024ee:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	3301      	adds	r3, #1
 80024f4:	61bb      	str	r3, [r7, #24]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d3d2      	bcc.n	80024a6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8002500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002502:	4618      	mov	r0, r3
 8002504:	3728      	adds	r7, #40	@ 0x28
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800250a:	b580      	push	{r7, lr}
 800250c:	b08e      	sub	sp, #56	@ 0x38
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002514:	2300      	movs	r3, #0
 8002516:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	4413      	add	r3, r2
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002524:	3301      	adds	r3, #1
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	4413      	add	r3, r2
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	021b      	lsls	r3, r3, #8
 800252e:	6a3a      	ldr	r2, [r7, #32]
 8002530:	4313      	orrs	r3, r2
 8002532:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002536:	3302      	adds	r3, #2
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	4413      	add	r3, r2
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	041b      	lsls	r3, r3, #16
 8002540:	6a3a      	ldr	r2, [r7, #32]
 8002542:	4313      	orrs	r3, r2
 8002544:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002548:	3303      	adds	r3, #3
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	4413      	add	r3, r2
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	061b      	lsls	r3, r3, #24
 8002552:	6a3a      	ldr	r2, [r7, #32]
 8002554:	4313      	orrs	r3, r2
 8002556:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800255a:	3304      	adds	r3, #4
 800255c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	6a3a      	ldr	r2, [r7, #32]
 8002564:	429a      	cmp	r2, r3
 8002566:	d90a      	bls.n	800257e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68da      	ldr	r2, [r3, #12]
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4619      	mov	r1, r3
 8002572:	4610      	mov	r0, r2
 8002574:	f007 fb74 	bl	8009c60 <realloc>
 8002578:	4602      	mov	r2, r0
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a3a      	ldr	r2, [r7, #32]
 8002582:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002584:	2300      	movs	r3, #0
 8002586:	633b      	str	r3, [r7, #48]	@ 0x30
 8002588:	e035      	b.n	80025f6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002592:	6839      	ldr	r1, [r7, #0]
 8002594:	440a      	add	r2, r1
 8002596:	7812      	ldrb	r2, [r2, #0]
 8002598:	4313      	orrs	r3, r2
 800259a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025a0:	3301      	adds	r3, #1
 80025a2:	6839      	ldr	r1, [r7, #0]
 80025a4:	440b      	add	r3, r1
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	021b      	lsls	r3, r3, #8
 80025aa:	4313      	orrs	r3, r2
 80025ac:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025b2:	3302      	adds	r3, #2
 80025b4:	6839      	ldr	r1, [r7, #0]
 80025b6:	440b      	add	r3, r1
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	041b      	lsls	r3, r3, #16
 80025bc:	4313      	orrs	r3, r2
 80025be:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025c4:	3303      	adds	r3, #3
 80025c6:	6839      	ldr	r1, [r7, #0]
 80025c8:	440b      	add	r3, r1
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	061b      	lsls	r3, r3, #24
 80025ce:	4313      	orrs	r3, r2
 80025d0:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80025d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025da:	3304      	adds	r3, #4
 80025dc:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	3208      	adds	r2, #8
 80025ec:	6812      	ldr	r2, [r2, #0]
 80025ee:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80025f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f2:	3301      	adds	r3, #1
 80025f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d3c4      	bcc.n	800258a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	4413      	add	r3, r2
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800260a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800260c:	3301      	adds	r3, #1
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	4413      	add	r3, r2
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	021b      	lsls	r3, r3, #8
 8002616:	69fa      	ldr	r2, [r7, #28]
 8002618:	4313      	orrs	r3, r2
 800261a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800261c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800261e:	3302      	adds	r3, #2
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	4413      	add	r3, r2
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	041b      	lsls	r3, r3, #16
 8002628:	69fa      	ldr	r2, [r7, #28]
 800262a:	4313      	orrs	r3, r2
 800262c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800262e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002630:	3303      	adds	r3, #3
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	4413      	add	r3, r2
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	061b      	lsls	r3, r3, #24
 800263a:	69fa      	ldr	r2, [r7, #28]
 800263c:	4313      	orrs	r3, r2
 800263e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002642:	3304      	adds	r3, #4
 8002644:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	69fa      	ldr	r2, [r7, #28]
 800264c:	429a      	cmp	r2, r3
 800264e:	d90a      	bls.n	8002666 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	699a      	ldr	r2, [r3, #24]
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4619      	mov	r1, r3
 800265a:	4610      	mov	r0, r2
 800265c:	f007 fb00 	bl	8009c60 <realloc>
 8002660:	4602      	mov	r2, r0
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69fa      	ldr	r2, [r7, #28]
 800266a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 800266c:	2300      	movs	r3, #0
 800266e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002670:	e035      	b.n	80026de <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800267a:	6839      	ldr	r1, [r7, #0]
 800267c:	440a      	add	r2, r1
 800267e:	7812      	ldrb	r2, [r2, #0]
 8002680:	4313      	orrs	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002688:	3301      	adds	r3, #1
 800268a:	6839      	ldr	r1, [r7, #0]
 800268c:	440b      	add	r3, r1
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	021b      	lsls	r3, r3, #8
 8002692:	4313      	orrs	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800269a:	3302      	adds	r3, #2
 800269c:	6839      	ldr	r1, [r7, #0]
 800269e:	440b      	add	r3, r1
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	041b      	lsls	r3, r3, #16
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ac:	3303      	adds	r3, #3
 80026ae:	6839      	ldr	r1, [r7, #0]
 80026b0:	440b      	add	r3, r1
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	061b      	lsls	r3, r3, #24
 80026b6:	4313      	orrs	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80026c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026c2:	3304      	adds	r3, #4
 80026c4:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699a      	ldr	r2, [r3, #24]
 80026ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	3214      	adds	r2, #20
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80026d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026da:	3301      	adds	r3, #1
 80026dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d3c4      	bcc.n	8002672 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80026e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	4413      	add	r3, r2
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80026f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026f4:	3301      	adds	r3, #1
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	4413      	add	r3, r2
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	021b      	lsls	r3, r3, #8
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002706:	3302      	adds	r3, #2
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	4413      	add	r3, r2
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	041b      	lsls	r3, r3, #16
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002718:	3303      	adds	r3, #3
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	4413      	add	r3, r2
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	061b      	lsls	r3, r3, #24
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800272a:	3304      	adds	r3, #4
 800272c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	429a      	cmp	r2, r3
 8002736:	d90a      	bls.n	800274e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4619      	mov	r1, r3
 8002742:	4610      	mov	r0, r2
 8002744:	f007 fa8c 	bl	8009c60 <realloc>
 8002748:	4602      	mov	r2, r0
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002754:	2300      	movs	r3, #0
 8002756:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002758:	e03e      	b.n	80027d8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800275a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	441a      	add	r2, r3
 8002760:	f107 030c 	add.w	r3, r7, #12
 8002764:	4611      	mov	r1, r2
 8002766:	4618      	mov	r0, r3
 8002768:	f001 feb8 	bl	80044dc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800276c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800276e:	3304      	adds	r3, #4
 8002770:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002774:	627b      	str	r3, [r7, #36]	@ 0x24
 8002776:	e00b      	b.n	8002790 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277c:	441a      	add	r2, r3
 800277e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002780:	3b01      	subs	r3, #1
 8002782:	6839      	ldr	r1, [r7, #0]
 8002784:	440b      	add	r3, r1
 8002786:	7812      	ldrb	r2, [r2, #0]
 8002788:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800278a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278c:	3301      	adds	r3, #1
 800278e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002790:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	4413      	add	r3, r2
 8002796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002798:	429a      	cmp	r2, r3
 800279a:	d3ed      	bcc.n	8002778 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800279c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	4413      	add	r3, r2
 80027a2:	3b01      	subs	r3, #1
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	4413      	add	r3, r2
 80027a8:	2200      	movs	r2, #0
 80027aa:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80027ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027ae:	3b01      	subs	r3, #1
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	441a      	add	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80027b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4413      	add	r3, r2
 80027be:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	3220      	adds	r2, #32
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80027d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d4:	3301      	adds	r3, #1
 80027d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027de:	429a      	cmp	r2, r3
 80027e0:	d3bb      	bcc.n	800275a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 80027e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80027e4:	4618      	mov	r0, r3
 80027e6:	3738      	adds	r7, #56	@ 0x38
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	4b02      	ldr	r3, [pc, #8]	@ (8002800 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 80027f6:	4618      	mov	r0, r3
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr
 8002800:	0800b088 	.word	0x0800b088

08002804 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	4b02      	ldr	r3, [pc, #8]	@ (8002818 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr
 8002818:	0800af2c 	.word	0x0800af2c

0800281c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	611a      	str	r2, [r3, #16]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4618      	mov	r0, r3
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr

08002848 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68d8      	ldr	r0, [r3, #12]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6891      	ldr	r1, [r2, #8]
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	4798      	blx	r3
 8002866:	4603      	mov	r3, r0
  };
 8002868:	4618      	mov	r0, r3
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
  }
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr

08002886 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800289c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028a0:	4618      	mov	r0, r3
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr
	...

080028ac <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a0a      	ldr	r2, [pc, #40]	@ (80028e0 <_ZN13STM32HardwareC1Ev+0x34>)
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
    }
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4618      	mov	r0, r3
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	20000c60 	.word	0x20000c60

080028e4 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 f804 	bl	80028fa <_ZN13STM32Hardware10reset_rbufEv>
    }
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6818      	ldr	r0, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3304      	adds	r3, #4
 800290a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800290e:	4619      	mov	r1, r3
 8002910:	f006 fa84 	bl	8008e1c <HAL_UART_Receive_DMA>
    }
 8002914:	bf00      	nop
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <_ZN13STM32Hardware4readEv>:

    int read(){
 800291c:	b590      	push	{r4, r7, lr}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002924:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002928:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f8d3 4204 	ldr.w	r4, [r3, #516]	@ 0x204
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7ff ffa8 	bl	8002886 <_ZN13STM32Hardware10getRdmaIndEv>
 8002936:	4603      	mov	r3, r0
 8002938:	429c      	cmp	r4, r3
 800293a:	bf14      	ite	ne
 800293c:	2301      	movne	r3, #1
 800293e:	2300      	moveq	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d012      	beq.n	800296c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800294c:	1c59      	adds	r1, r3, #1
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	f8c2 1204 	str.w	r1, [r2, #516]	@ 0x204
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	4413      	add	r3, r2
 8002958:	791b      	ldrb	r3, [r3, #4]
 800295a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002962:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      return c;
 800296c:	68fb      	ldr	r3, [r7, #12]
    }
 800296e:	4618      	mov	r0, r3
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	bd90      	pop	{r4, r7, pc}
	...

08002978 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b20      	cmp	r3, #32
 800298c:	d108      	bne.n	80029a0 <_ZN13STM32Hardware5flushEv+0x28>
 800298e:	4b28      	ldr	r3, [pc, #160]	@ (8002a30 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	f083 0301 	eor.w	r3, r3, #1
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <_ZN13STM32Hardware5flushEv+0x28>
 800299c:	2301      	movs	r3, #1
 800299e:	e000      	b.n	80029a2 <_ZN13STM32Hardware5flushEv+0x2a>
 80029a0:	2300      	movs	r3, #0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d03f      	beq.n	8002a26 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 80029a6:	4b22      	ldr	r3, [pc, #136]	@ (8002a30 <_ZN13STM32Hardware5flushEv+0xb8>)
 80029a8:	2201      	movs	r2, #1
 80029aa:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d031      	beq.n	8002a20 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d20a      	bcs.n	80029e2 <_ZN13STM32Hardware5flushEv+0x6a>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80029da:	b29b      	uxth	r3, r3
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	b29b      	uxth	r3, r3
 80029e0:	e006      	b.n	80029f0 <_ZN13STM32Hardware5flushEv+0x78>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6818      	ldr	r0, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80029fc:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	4413      	add	r3, r2
 8002a04:	89fa      	ldrh	r2, [r7, #14]
 8002a06:	4619      	mov	r1, r3
 8002a08:	f006 f998 	bl	8008d3c <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8002a12:	89fb      	ldrh	r3, [r7, #14]
 8002a14:	4413      	add	r3, r2
 8002a16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
        }
        mutex = false;
 8002a20:	4b03      	ldr	r3, [pc, #12]	@ (8002a30 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	701a      	strb	r2, [r3, #0]
      }
    }
 8002a26:	bf00      	nop
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	2000015e 	.word	0x2000015e

08002a34 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
      int n = length;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a4a:	bfa8      	it	ge
 8002a4c:	f44f 7300 	movge.w	r3, #512	@ 0x200
 8002a50:	617b      	str	r3, [r7, #20]

      int n_tail = n <= (int)(tbuflen - twind) ? n : (int)(tbuflen - twind);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002a58:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	4293      	cmp	r3, r2
 8002a62:	bfa8      	it	ge
 8002a64:	4613      	movge	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002a6e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4413      	add	r3, r2
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	68b9      	ldr	r1, [r7, #8]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f007 fbab 	bl	800a1d6 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	4413      	add	r3, r2
 8002a8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

      if(n != n_tail){
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d00b      	beq.n	8002ab4 <_ZN13STM32Hardware5writeEPhi+0x80>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f503 7002 	add.w	r0, r3, #520	@ 0x208
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	18d1      	adds	r1, r2, r3
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	461a      	mov	r2, r3
 8002ab0:	f007 fb91 	bl	800a1d6 <memcpy>
      }

      flush();
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f7ff ff5f 	bl	8002978 <_ZN13STM32Hardware5flushEv>
    }
 8002aba:	bf00      	nop
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	f003 f9e3 	bl	8005e94 <HAL_GetTick>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
      data(0)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff f86c 	bl	8001bc0 <_ZN3ros3MsgC1Ev>
 8002ae8:	4a05      	ldr	r2, [pc, #20]	@ (8002b00 <_ZN8std_msgs7Float32C1Ev+0x28>)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	605a      	str	r2, [r3, #4]
    {
    }
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4618      	mov	r0, r3
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	0800b108 	.word	0x0800b108

08002b04 <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002b18:	68b9      	ldr	r1, [r7, #8]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	4413      	add	r3, r2
 8002b20:	b2ca      	uxtb	r2, r1
 8002b22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	0a19      	lsrs	r1, r3, #8
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	4413      	add	r3, r2
 8002b30:	b2ca      	uxtb	r2, r1
 8002b32:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	0c19      	lsrs	r1, r3, #16
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	3302      	adds	r3, #2
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	4413      	add	r3, r2
 8002b40:	b2ca      	uxtb	r2, r1
 8002b42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	0e19      	lsrs	r1, r3, #24
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	3303      	adds	r3, #3
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	4413      	add	r3, r2
 8002b50:	b2ca      	uxtb	r2, r1
 8002b52:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	3304      	adds	r3, #4
 8002b58:	60fb      	str	r3, [r7, #12]
      return offset;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
    }
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr

08002b66 <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002b66:	b480      	push	{r7}
 8002b68:	b085      	sub	sp, #20
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b70:	2300      	movs	r3, #0
 8002b72:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 8002b74:	2300      	movs	r3, #0
 8002b76:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	6839      	ldr	r1, [r7, #0]
 8002b7e:	440a      	add	r2, r1
 8002b80:	7812      	ldrb	r2, [r2, #0]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	6839      	ldr	r1, [r7, #0]
 8002b8e:	440b      	add	r3, r1
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	021b      	lsls	r3, r3, #8
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	3302      	adds	r3, #2
 8002b9e:	6839      	ldr	r1, [r7, #0]
 8002ba0:	440b      	add	r3, r1
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	041b      	lsls	r3, r3, #16
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	3303      	adds	r3, #3
 8002bb0:	6839      	ldr	r1, [r7, #0]
 8002bb2:	440b      	add	r3, r1
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	061b      	lsls	r3, r3, #24
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	60fb      	str	r3, [r7, #12]
     return offset;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
    }
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr

08002bd4 <_ZN8std_msgs7Float327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32"; };
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	4b02      	ldr	r3, [pc, #8]	@ (8002be8 <_ZN8std_msgs7Float327getTypeEv+0x14>)
 8002bde:	4618      	mov	r0, r3
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr
 8002be8:	0800af50 	.word	0x0800af50

08002bec <_ZN8std_msgs7Float326getMD5Ev>:
    virtual const char * getMD5() override { return "73fcbf46b49191e672908e50842a83d4"; };
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	4b02      	ldr	r3, [pc, #8]	@ (8002c00 <_ZN8std_msgs7Float326getMD5Ev+0x14>)
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr
 8002c00:	0800af64 	.word	0x0800af64

08002c04 <_ZN9krsbi202525BallPositionBasedOnCameraC1Ev>:
      typedef int64_t _x_real_type;
      _x_real_type x_real;
      typedef int64_t _y_real_type;
      _y_real_type y_real;

    BallPositionBasedOnCamera():
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
      distance(0),
      angle(0),
      x_on_camera(0),
      y_on_camera(0),
      x_real(0),
      y_real(0)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe ffd6 	bl	8001bc0 <_ZN3ros3MsgC1Ev>
 8002c14:	4a18      	ldr	r2, [pc, #96]	@ (8002c78 <_ZN9krsbi202525BallPositionBasedOnCameraC1Ev+0x74>)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	601a      	str	r2, [r3, #0]
      distance(0),
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	e9c1 2302 	strd	r2, r3, [r1, #8]
      angle(0),
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	f04f 0300 	mov.w	r3, #0
 8002c32:	e9c1 2304 	strd	r2, r3, [r1, #16]
      x_on_camera(0),
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	f04f 0200 	mov.w	r2, #0
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	e9c1 2306 	strd	r2, r3, [r1, #24]
      y_on_camera(0),
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	f04f 0200 	mov.w	r2, #0
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	e9c1 2308 	strd	r2, r3, [r1, #32]
      x_real(0),
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
      y_real(0)
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	f04f 0300 	mov.w	r3, #0
 8002c6a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    {
    }
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4618      	mov	r0, r3
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	0800b0f0 	.word	0x0800b0f0

08002c7c <_ZNK9krsbi202525BallPositionBasedOnCamera9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002c7c:	b480      	push	{r7}
 8002c7e:	b091      	sub	sp, #68	@ 0x44
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
      union {
        int64_t real;
        uint64_t base;
      } u_distance;
      u_distance.real = this->distance;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002c90:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
      *(outbuffer + offset + 0) = (u_distance.base >> (8 * 0)) & 0xFF;
 8002c94:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002c98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002c9a:	6838      	ldr	r0, [r7, #0]
 8002c9c:	4401      	add	r1, r0
 8002c9e:	b2d3      	uxtb	r3, r2
 8002ca0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_distance.base >> (8 * 1)) & 0xFF;
 8002ca2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	0a02      	lsrs	r2, r0, #8
 8002cb0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002cb4:	0a0b      	lsrs	r3, r1, #8
 8002cb6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002cb8:	3101      	adds	r1, #1
 8002cba:	6838      	ldr	r0, [r7, #0]
 8002cbc:	4401      	add	r1, r0
 8002cbe:	b2d3      	uxtb	r3, r2
 8002cc0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_distance.base >> (8 * 2)) & 0xFF;
 8002cc2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	0c02      	lsrs	r2, r0, #16
 8002cd0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002cd4:	0c0b      	lsrs	r3, r1, #16
 8002cd6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002cd8:	3102      	adds	r1, #2
 8002cda:	6838      	ldr	r0, [r7, #0]
 8002cdc:	4401      	add	r1, r0
 8002cde:	b2d3      	uxtb	r3, r2
 8002ce0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_distance.base >> (8 * 3)) & 0xFF;
 8002ce2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	f04f 0300 	mov.w	r3, #0
 8002cee:	0e02      	lsrs	r2, r0, #24
 8002cf0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002cf4:	0e0b      	lsrs	r3, r1, #24
 8002cf6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002cf8:	3103      	adds	r1, #3
 8002cfa:	6838      	ldr	r0, [r7, #0]
 8002cfc:	4401      	add	r1, r0
 8002cfe:	b2d3      	uxtb	r3, r2
 8002d00:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_distance.base >> (8 * 4)) & 0xFF;
 8002d02:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	f04f 0300 	mov.w	r3, #0
 8002d0e:	000a      	movs	r2, r1
 8002d10:	2300      	movs	r3, #0
 8002d12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002d14:	3104      	adds	r1, #4
 8002d16:	6838      	ldr	r0, [r7, #0]
 8002d18:	4401      	add	r1, r0
 8002d1a:	b2d3      	uxtb	r3, r2
 8002d1c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_distance.base >> (8 * 5)) & 0xFF;
 8002d1e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	f04f 0300 	mov.w	r3, #0
 8002d2a:	0a0a      	lsrs	r2, r1, #8
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002d30:	3105      	adds	r1, #5
 8002d32:	6838      	ldr	r0, [r7, #0]
 8002d34:	4401      	add	r1, r0
 8002d36:	b2d3      	uxtb	r3, r2
 8002d38:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_distance.base >> (8 * 6)) & 0xFF;
 8002d3a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	0c0a      	lsrs	r2, r1, #16
 8002d48:	2300      	movs	r3, #0
 8002d4a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002d4c:	3106      	adds	r1, #6
 8002d4e:	6838      	ldr	r0, [r7, #0]
 8002d50:	4401      	add	r1, r0
 8002d52:	b2d3      	uxtb	r3, r2
 8002d54:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_distance.base >> (8 * 7)) & 0xFF;
 8002d56:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	0e0a      	lsrs	r2, r1, #24
 8002d64:	2300      	movs	r3, #0
 8002d66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002d68:	3107      	adds	r1, #7
 8002d6a:	6838      	ldr	r0, [r7, #0]
 8002d6c:	4401      	add	r1, r0
 8002d6e:	b2d3      	uxtb	r3, r2
 8002d70:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->distance);
 8002d72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d74:	3308      	adds	r3, #8
 8002d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
      union {
        int64_t real;
        uint64_t base;
      } u_angle;
      u_angle.real = this->angle;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002d7e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
      *(outbuffer + offset + 0) = (u_angle.base >> (8 * 0)) & 0xFF;
 8002d82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002d88:	6838      	ldr	r0, [r7, #0]
 8002d8a:	4401      	add	r1, r0
 8002d8c:	b2d3      	uxtb	r3, r2
 8002d8e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_angle.base >> (8 * 1)) & 0xFF;
 8002d90:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	0a02      	lsrs	r2, r0, #8
 8002d9e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002da2:	0a0b      	lsrs	r3, r1, #8
 8002da4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002da6:	3101      	adds	r1, #1
 8002da8:	6838      	ldr	r0, [r7, #0]
 8002daa:	4401      	add	r1, r0
 8002dac:	b2d3      	uxtb	r3, r2
 8002dae:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_angle.base >> (8 * 2)) & 0xFF;
 8002db0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	0c02      	lsrs	r2, r0, #16
 8002dbe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002dc2:	0c0b      	lsrs	r3, r1, #16
 8002dc4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002dc6:	3102      	adds	r1, #2
 8002dc8:	6838      	ldr	r0, [r7, #0]
 8002dca:	4401      	add	r1, r0
 8002dcc:	b2d3      	uxtb	r3, r2
 8002dce:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_angle.base >> (8 * 3)) & 0xFF;
 8002dd0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	0e02      	lsrs	r2, r0, #24
 8002dde:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002de2:	0e0b      	lsrs	r3, r1, #24
 8002de4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002de6:	3103      	adds	r1, #3
 8002de8:	6838      	ldr	r0, [r7, #0]
 8002dea:	4401      	add	r1, r0
 8002dec:	b2d3      	uxtb	r3, r2
 8002dee:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_angle.base >> (8 * 4)) & 0xFF;
 8002df0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	000a      	movs	r2, r1
 8002dfe:	2300      	movs	r3, #0
 8002e00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e02:	3104      	adds	r1, #4
 8002e04:	6838      	ldr	r0, [r7, #0]
 8002e06:	4401      	add	r1, r0
 8002e08:	b2d3      	uxtb	r3, r2
 8002e0a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_angle.base >> (8 * 5)) & 0xFF;
 8002e0c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	0a0a      	lsrs	r2, r1, #8
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e1e:	3105      	adds	r1, #5
 8002e20:	6838      	ldr	r0, [r7, #0]
 8002e22:	4401      	add	r1, r0
 8002e24:	b2d3      	uxtb	r3, r2
 8002e26:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_angle.base >> (8 * 6)) & 0xFF;
 8002e28:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	0c0a      	lsrs	r2, r1, #16
 8002e36:	2300      	movs	r3, #0
 8002e38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e3a:	3106      	adds	r1, #6
 8002e3c:	6838      	ldr	r0, [r7, #0]
 8002e3e:	4401      	add	r1, r0
 8002e40:	b2d3      	uxtb	r3, r2
 8002e42:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_angle.base >> (8 * 7)) & 0xFF;
 8002e44:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	0e0a      	lsrs	r2, r1, #24
 8002e52:	2300      	movs	r3, #0
 8002e54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e56:	3107      	adds	r1, #7
 8002e58:	6838      	ldr	r0, [r7, #0]
 8002e5a:	4401      	add	r1, r0
 8002e5c:	b2d3      	uxtb	r3, r2
 8002e5e:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->angle);
 8002e60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e62:	3308      	adds	r3, #8
 8002e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
      union {
        int64_t real;
        uint64_t base;
      } u_x_on_camera;
      u_x_on_camera.real = this->x_on_camera;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002e6c:	e9c7 2308 	strd	r2, r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_x_on_camera.base >> (8 * 0)) & 0xFF;
 8002e70:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e76:	6838      	ldr	r0, [r7, #0]
 8002e78:	4401      	add	r1, r0
 8002e7a:	b2d3      	uxtb	r3, r2
 8002e7c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x_on_camera.base >> (8 * 1)) & 0xFF;
 8002e7e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002e82:	f04f 0200 	mov.w	r2, #0
 8002e86:	f04f 0300 	mov.w	r3, #0
 8002e8a:	0a02      	lsrs	r2, r0, #8
 8002e8c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002e90:	0a0b      	lsrs	r3, r1, #8
 8002e92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e94:	3101      	adds	r1, #1
 8002e96:	6838      	ldr	r0, [r7, #0]
 8002e98:	4401      	add	r1, r0
 8002e9a:	b2d3      	uxtb	r3, r2
 8002e9c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x_on_camera.base >> (8 * 2)) & 0xFF;
 8002e9e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ea2:	f04f 0200 	mov.w	r2, #0
 8002ea6:	f04f 0300 	mov.w	r3, #0
 8002eaa:	0c02      	lsrs	r2, r0, #16
 8002eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002eb0:	0c0b      	lsrs	r3, r1, #16
 8002eb2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002eb4:	3102      	adds	r1, #2
 8002eb6:	6838      	ldr	r0, [r7, #0]
 8002eb8:	4401      	add	r1, r0
 8002eba:	b2d3      	uxtb	r3, r2
 8002ebc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x_on_camera.base >> (8 * 3)) & 0xFF;
 8002ebe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	f04f 0300 	mov.w	r3, #0
 8002eca:	0e02      	lsrs	r2, r0, #24
 8002ecc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002ed0:	0e0b      	lsrs	r3, r1, #24
 8002ed2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ed4:	3103      	adds	r1, #3
 8002ed6:	6838      	ldr	r0, [r7, #0]
 8002ed8:	4401      	add	r1, r0
 8002eda:	b2d3      	uxtb	r3, r2
 8002edc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x_on_camera.base >> (8 * 4)) & 0xFF;
 8002ede:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	000a      	movs	r2, r1
 8002eec:	2300      	movs	r3, #0
 8002eee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ef0:	3104      	adds	r1, #4
 8002ef2:	6838      	ldr	r0, [r7, #0]
 8002ef4:	4401      	add	r1, r0
 8002ef6:	b2d3      	uxtb	r3, r2
 8002ef8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x_on_camera.base >> (8 * 5)) & 0xFF;
 8002efa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	0a0a      	lsrs	r2, r1, #8
 8002f08:	2300      	movs	r3, #0
 8002f0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f0c:	3105      	adds	r1, #5
 8002f0e:	6838      	ldr	r0, [r7, #0]
 8002f10:	4401      	add	r1, r0
 8002f12:	b2d3      	uxtb	r3, r2
 8002f14:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x_on_camera.base >> (8 * 6)) & 0xFF;
 8002f16:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	0c0a      	lsrs	r2, r1, #16
 8002f24:	2300      	movs	r3, #0
 8002f26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f28:	3106      	adds	r1, #6
 8002f2a:	6838      	ldr	r0, [r7, #0]
 8002f2c:	4401      	add	r1, r0
 8002f2e:	b2d3      	uxtb	r3, r2
 8002f30:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x_on_camera.base >> (8 * 7)) & 0xFF;
 8002f32:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	0e0a      	lsrs	r2, r1, #24
 8002f40:	2300      	movs	r3, #0
 8002f42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f44:	3107      	adds	r1, #7
 8002f46:	6838      	ldr	r0, [r7, #0]
 8002f48:	4401      	add	r1, r0
 8002f4a:	b2d3      	uxtb	r3, r2
 8002f4c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x_on_camera);
 8002f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f50:	3308      	adds	r3, #8
 8002f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
      union {
        int64_t real;
        uint64_t base;
      } u_y_on_camera;
      u_y_on_camera.real = this->y_on_camera;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002f5a:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_y_on_camera.base >> (8 * 0)) & 0xFF;
 8002f5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f64:	6838      	ldr	r0, [r7, #0]
 8002f66:	4401      	add	r1, r0
 8002f68:	b2d3      	uxtb	r3, r2
 8002f6a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y_on_camera.base >> (8 * 1)) & 0xFF;
 8002f6c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	0a02      	lsrs	r2, r0, #8
 8002f7a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002f7e:	0a0b      	lsrs	r3, r1, #8
 8002f80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f82:	3101      	adds	r1, #1
 8002f84:	6838      	ldr	r0, [r7, #0]
 8002f86:	4401      	add	r1, r0
 8002f88:	b2d3      	uxtb	r3, r2
 8002f8a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y_on_camera.base >> (8 * 2)) & 0xFF;
 8002f8c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	0c02      	lsrs	r2, r0, #16
 8002f9a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002f9e:	0c0b      	lsrs	r3, r1, #16
 8002fa0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002fa2:	3102      	adds	r1, #2
 8002fa4:	6838      	ldr	r0, [r7, #0]
 8002fa6:	4401      	add	r1, r0
 8002fa8:	b2d3      	uxtb	r3, r2
 8002faa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y_on_camera.base >> (8 * 3)) & 0xFF;
 8002fac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	0e02      	lsrs	r2, r0, #24
 8002fba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002fbe:	0e0b      	lsrs	r3, r1, #24
 8002fc0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002fc2:	3103      	adds	r1, #3
 8002fc4:	6838      	ldr	r0, [r7, #0]
 8002fc6:	4401      	add	r1, r0
 8002fc8:	b2d3      	uxtb	r3, r2
 8002fca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y_on_camera.base >> (8 * 4)) & 0xFF;
 8002fcc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	000a      	movs	r2, r1
 8002fda:	2300      	movs	r3, #0
 8002fdc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002fde:	3104      	adds	r1, #4
 8002fe0:	6838      	ldr	r0, [r7, #0]
 8002fe2:	4401      	add	r1, r0
 8002fe4:	b2d3      	uxtb	r3, r2
 8002fe6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y_on_camera.base >> (8 * 5)) & 0xFF;
 8002fe8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	f04f 0300 	mov.w	r3, #0
 8002ff4:	0a0a      	lsrs	r2, r1, #8
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ffa:	3105      	adds	r1, #5
 8002ffc:	6838      	ldr	r0, [r7, #0]
 8002ffe:	4401      	add	r1, r0
 8003000:	b2d3      	uxtb	r3, r2
 8003002:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y_on_camera.base >> (8 * 6)) & 0xFF;
 8003004:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	0c0a      	lsrs	r2, r1, #16
 8003012:	2300      	movs	r3, #0
 8003014:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003016:	3106      	adds	r1, #6
 8003018:	6838      	ldr	r0, [r7, #0]
 800301a:	4401      	add	r1, r0
 800301c:	b2d3      	uxtb	r3, r2
 800301e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y_on_camera.base >> (8 * 7)) & 0xFF;
 8003020:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	0e0a      	lsrs	r2, r1, #24
 800302e:	2300      	movs	r3, #0
 8003030:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003032:	3107      	adds	r1, #7
 8003034:	6838      	ldr	r0, [r7, #0]
 8003036:	4401      	add	r1, r0
 8003038:	b2d3      	uxtb	r3, r2
 800303a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y_on_camera);
 800303c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800303e:	3308      	adds	r3, #8
 8003040:	63fb      	str	r3, [r7, #60]	@ 0x3c
      union {
        int64_t real;
        uint64_t base;
      } u_x_real;
      u_x_real.real = this->x_real;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8003048:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_x_real.base >> (8 * 0)) & 0xFF;
 800304c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003050:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003052:	6838      	ldr	r0, [r7, #0]
 8003054:	4401      	add	r1, r0
 8003056:	b2d3      	uxtb	r3, r2
 8003058:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x_real.base >> (8 * 1)) & 0xFF;
 800305a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	0a02      	lsrs	r2, r0, #8
 8003068:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800306c:	0a0b      	lsrs	r3, r1, #8
 800306e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003070:	3101      	adds	r1, #1
 8003072:	6838      	ldr	r0, [r7, #0]
 8003074:	4401      	add	r1, r0
 8003076:	b2d3      	uxtb	r3, r2
 8003078:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x_real.base >> (8 * 2)) & 0xFF;
 800307a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	0c02      	lsrs	r2, r0, #16
 8003088:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800308c:	0c0b      	lsrs	r3, r1, #16
 800308e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003090:	3102      	adds	r1, #2
 8003092:	6838      	ldr	r0, [r7, #0]
 8003094:	4401      	add	r1, r0
 8003096:	b2d3      	uxtb	r3, r2
 8003098:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x_real.base >> (8 * 3)) & 0xFF;
 800309a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	f04f 0300 	mov.w	r3, #0
 80030a6:	0e02      	lsrs	r2, r0, #24
 80030a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80030ac:	0e0b      	lsrs	r3, r1, #24
 80030ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80030b0:	3103      	adds	r1, #3
 80030b2:	6838      	ldr	r0, [r7, #0]
 80030b4:	4401      	add	r1, r0
 80030b6:	b2d3      	uxtb	r3, r2
 80030b8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x_real.base >> (8 * 4)) & 0xFF;
 80030ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	000a      	movs	r2, r1
 80030c8:	2300      	movs	r3, #0
 80030ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80030cc:	3104      	adds	r1, #4
 80030ce:	6838      	ldr	r0, [r7, #0]
 80030d0:	4401      	add	r1, r0
 80030d2:	b2d3      	uxtb	r3, r2
 80030d4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x_real.base >> (8 * 5)) & 0xFF;
 80030d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	f04f 0300 	mov.w	r3, #0
 80030e2:	0a0a      	lsrs	r2, r1, #8
 80030e4:	2300      	movs	r3, #0
 80030e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80030e8:	3105      	adds	r1, #5
 80030ea:	6838      	ldr	r0, [r7, #0]
 80030ec:	4401      	add	r1, r0
 80030ee:	b2d3      	uxtb	r3, r2
 80030f0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x_real.base >> (8 * 6)) & 0xFF;
 80030f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	0c0a      	lsrs	r2, r1, #16
 8003100:	2300      	movs	r3, #0
 8003102:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003104:	3106      	adds	r1, #6
 8003106:	6838      	ldr	r0, [r7, #0]
 8003108:	4401      	add	r1, r0
 800310a:	b2d3      	uxtb	r3, r2
 800310c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x_real.base >> (8 * 7)) & 0xFF;
 800310e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	f04f 0300 	mov.w	r3, #0
 800311a:	0e0a      	lsrs	r2, r1, #24
 800311c:	2300      	movs	r3, #0
 800311e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003120:	3107      	adds	r1, #7
 8003122:	6838      	ldr	r0, [r7, #0]
 8003124:	4401      	add	r1, r0
 8003126:	b2d3      	uxtb	r3, r2
 8003128:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x_real);
 800312a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800312c:	3308      	adds	r3, #8
 800312e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      union {
        int64_t real;
        uint64_t base;
      } u_y_real;
      u_y_real.real = this->y_real;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8003136:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_y_real.base >> (8 * 0)) & 0xFF;
 800313a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800313e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003140:	6838      	ldr	r0, [r7, #0]
 8003142:	4401      	add	r1, r0
 8003144:	b2d3      	uxtb	r3, r2
 8003146:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y_real.base >> (8 * 1)) & 0xFF;
 8003148:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800314c:	f04f 0200 	mov.w	r2, #0
 8003150:	f04f 0300 	mov.w	r3, #0
 8003154:	0a02      	lsrs	r2, r0, #8
 8003156:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800315a:	0a0b      	lsrs	r3, r1, #8
 800315c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800315e:	3101      	adds	r1, #1
 8003160:	6838      	ldr	r0, [r7, #0]
 8003162:	4401      	add	r1, r0
 8003164:	b2d3      	uxtb	r3, r2
 8003166:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y_real.base >> (8 * 2)) & 0xFF;
 8003168:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	0c02      	lsrs	r2, r0, #16
 8003176:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800317a:	0c0b      	lsrs	r3, r1, #16
 800317c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800317e:	3102      	adds	r1, #2
 8003180:	6838      	ldr	r0, [r7, #0]
 8003182:	4401      	add	r1, r0
 8003184:	b2d3      	uxtb	r3, r2
 8003186:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y_real.base >> (8 * 3)) & 0xFF;
 8003188:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	0e02      	lsrs	r2, r0, #24
 8003196:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800319a:	0e0b      	lsrs	r3, r1, #24
 800319c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800319e:	3103      	adds	r1, #3
 80031a0:	6838      	ldr	r0, [r7, #0]
 80031a2:	4401      	add	r1, r0
 80031a4:	b2d3      	uxtb	r3, r2
 80031a6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y_real.base >> (8 * 4)) & 0xFF;
 80031a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	000a      	movs	r2, r1
 80031b6:	2300      	movs	r3, #0
 80031b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031ba:	3104      	adds	r1, #4
 80031bc:	6838      	ldr	r0, [r7, #0]
 80031be:	4401      	add	r1, r0
 80031c0:	b2d3      	uxtb	r3, r2
 80031c2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y_real.base >> (8 * 5)) & 0xFF;
 80031c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	f04f 0300 	mov.w	r3, #0
 80031d0:	0a0a      	lsrs	r2, r1, #8
 80031d2:	2300      	movs	r3, #0
 80031d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031d6:	3105      	adds	r1, #5
 80031d8:	6838      	ldr	r0, [r7, #0]
 80031da:	4401      	add	r1, r0
 80031dc:	b2d3      	uxtb	r3, r2
 80031de:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y_real.base >> (8 * 6)) & 0xFF;
 80031e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	f04f 0300 	mov.w	r3, #0
 80031ec:	0c0a      	lsrs	r2, r1, #16
 80031ee:	2300      	movs	r3, #0
 80031f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031f2:	3106      	adds	r1, #6
 80031f4:	6838      	ldr	r0, [r7, #0]
 80031f6:	4401      	add	r1, r0
 80031f8:	b2d3      	uxtb	r3, r2
 80031fa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y_real.base >> (8 * 7)) & 0xFF;
 80031fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	0e0a      	lsrs	r2, r1, #24
 800320a:	2300      	movs	r3, #0
 800320c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800320e:	3107      	adds	r1, #7
 8003210:	6838      	ldr	r0, [r7, #0]
 8003212:	4401      	add	r1, r0
 8003214:	b2d3      	uxtb	r3, r2
 8003216:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y_real);
 8003218:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800321a:	3308      	adds	r3, #8
 800321c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      return offset;
 800321e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
 8003220:	4618      	mov	r0, r3
 8003222:	3744      	adds	r7, #68	@ 0x44
 8003224:	46bd      	mov	sp, r7
 8003226:	bc80      	pop	{r7}
 8003228:	4770      	bx	lr

0800322a <_ZN9krsbi202525BallPositionBasedOnCamera11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800322a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800322e:	f5ad 7d57 	sub.w	sp, sp, #860	@ 0x35c
 8003232:	af00      	add	r7, sp, #0
 8003234:	f8c7 031c 	str.w	r0, [r7, #796]	@ 0x31c
 8003238:	f8c7 1318 	str.w	r1, [r7, #792]	@ 0x318
    {
      int offset = 0;
 800323c:	2300      	movs	r3, #0
 800323e:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      union {
        int64_t real;
        uint64_t base;
      } u_distance;
      u_distance.base = 0;
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	f04f 0300 	mov.w	r3, #0
 800324a:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
      u_distance.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800324e:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 8003252:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 8003256:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 800325a:	4413      	add	r3, r2
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2200      	movs	r2, #0
 8003262:	461c      	mov	r4, r3
 8003264:	4615      	mov	r5, r2
 8003266:	ea40 0804 	orr.w	r8, r0, r4
 800326a:	ea41 0905 	orr.w	r9, r1, r5
 800326e:	e9c7 89d2 	strd	r8, r9, [r7, #840]	@ 0x348
      u_distance.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003272:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 8003276:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003280:	4413      	add	r3, r2
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2200      	movs	r2, #0
 8003288:	469a      	mov	sl, r3
 800328a:	4693      	mov	fp, r2
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003298:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800329c:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80032a0:	ea40 0402 	orr.w	r4, r0, r2
 80032a4:	f8c7 4310 	str.w	r4, [r7, #784]	@ 0x310
 80032a8:	430b      	orrs	r3, r1
 80032aa:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
 80032ae:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	@ 0x310
 80032b2:	e9c7 34d2 	strd	r3, r4, [r7, #840]	@ 0x348
      u_distance.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80032b6:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 80032ba:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80032be:	1c9a      	adds	r2, r3, #2
 80032c0:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80032c4:	4413      	add	r3, r2
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2200      	movs	r2, #0
 80032cc:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
 80032d0:	f8c7 230c 	str.w	r2, [r7, #780]	@ 0x30c
 80032d4:	f04f 0200 	mov.w	r2, #0
 80032d8:	f04f 0300 	mov.w	r3, #0
 80032dc:	e9d7 89c2 	ldrd	r8, r9, [r7, #776]	@ 0x308
 80032e0:	464c      	mov	r4, r9
 80032e2:	0423      	lsls	r3, r4, #16
 80032e4:	46c4      	mov	ip, r8
 80032e6:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 80032ea:	4644      	mov	r4, r8
 80032ec:	0422      	lsls	r2, r4, #16
 80032ee:	ea40 0402 	orr.w	r4, r0, r2
 80032f2:	f8c7 4300 	str.w	r4, [r7, #768]	@ 0x300
 80032f6:	430b      	orrs	r3, r1
 80032f8:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
 80032fc:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	@ 0x300
 8003300:	e9c7 34d2 	strd	r3, r4, [r7, #840]	@ 0x348
      u_distance.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003304:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 8003308:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800330c:	1cda      	adds	r2, r3, #3
 800330e:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003312:	4413      	add	r3, r2
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2200      	movs	r2, #0
 800331a:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 800331e:	f8c7 22fc 	str.w	r2, [r7, #764]	@ 0x2fc
 8003322:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	@ 0x2f8
 8003326:	4623      	mov	r3, r4
 8003328:	0a1b      	lsrs	r3, r3, #8
 800332a:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 800332e:	4623      	mov	r3, r4
 8003330:	061b      	lsls	r3, r3, #24
 8003332:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 8003336:	e9d7 34bc 	ldrd	r3, r4, [r7, #752]	@ 0x2f0
 800333a:	461a      	mov	r2, r3
 800333c:	4302      	orrs	r2, r0
 800333e:	f8c7 22e8 	str.w	r2, [r7, #744]	@ 0x2e8
 8003342:	4623      	mov	r3, r4
 8003344:	430b      	orrs	r3, r1
 8003346:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 800334a:	e9d7 34ba 	ldrd	r3, r4, [r7, #744]	@ 0x2e8
 800334e:	e9c7 34d2 	strd	r3, r4, [r7, #840]	@ 0x348
      u_distance.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003352:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 8003356:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800335a:	1d1a      	adds	r2, r3, #4
 800335c:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003360:	4413      	add	r3, r2
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2200      	movs	r2, #0
 8003368:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 800336c:	f8c7 22e4 	str.w	r2, [r7, #740]	@ 0x2e4
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	f8d7 42e0 	ldr.w	r4, [r7, #736]	@ 0x2e0
 800337c:	0023      	movs	r3, r4
 800337e:	2200      	movs	r2, #0
 8003380:	ea40 0402 	orr.w	r4, r0, r2
 8003384:	f8c7 42d8 	str.w	r4, [r7, #728]	@ 0x2d8
 8003388:	430b      	orrs	r3, r1
 800338a:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
 800338e:	e9d7 34b6 	ldrd	r3, r4, [r7, #728]	@ 0x2d8
 8003392:	e9c7 34d2 	strd	r3, r4, [r7, #840]	@ 0x348
      u_distance.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003396:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 800339a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800339e:	1d5a      	adds	r2, r3, #5
 80033a0:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80033a4:	4413      	add	r3, r2
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2200      	movs	r2, #0
 80033ac:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 80033b0:	f8c7 22d4 	str.w	r2, [r7, #724]	@ 0x2d4
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	f8d7 42d0 	ldr.w	r4, [r7, #720]	@ 0x2d0
 80033c0:	0223      	lsls	r3, r4, #8
 80033c2:	2200      	movs	r2, #0
 80033c4:	ea40 0402 	orr.w	r4, r0, r2
 80033c8:	f8c7 42c8 	str.w	r4, [r7, #712]	@ 0x2c8
 80033cc:	430b      	orrs	r3, r1
 80033ce:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
 80033d2:	e9d7 34b2 	ldrd	r3, r4, [r7, #712]	@ 0x2c8
 80033d6:	e9c7 34d2 	strd	r3, r4, [r7, #840]	@ 0x348
      u_distance.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80033da:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 80033de:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80033e2:	1d9a      	adds	r2, r3, #6
 80033e4:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80033e8:	4413      	add	r3, r2
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2200      	movs	r2, #0
 80033f0:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
 80033f4:	f8c7 22c4 	str.w	r2, [r7, #708]	@ 0x2c4
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	f8d7 42c0 	ldr.w	r4, [r7, #704]	@ 0x2c0
 8003404:	0423      	lsls	r3, r4, #16
 8003406:	2200      	movs	r2, #0
 8003408:	ea40 0402 	orr.w	r4, r0, r2
 800340c:	f8c7 42b8 	str.w	r4, [r7, #696]	@ 0x2b8
 8003410:	430b      	orrs	r3, r1
 8003412:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
 8003416:	e9d7 34ae 	ldrd	r3, r4, [r7, #696]	@ 0x2b8
 800341a:	e9c7 34d2 	strd	r3, r4, [r7, #840]	@ 0x348
      u_distance.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800341e:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 8003422:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003426:	1dda      	adds	r2, r3, #7
 8003428:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 800342c:	4413      	add	r3, r2
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2200      	movs	r2, #0
 8003434:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 8003438:	f8c7 22b4 	str.w	r2, [r7, #692]	@ 0x2b4
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	f8d7 42b0 	ldr.w	r4, [r7, #688]	@ 0x2b0
 8003448:	0623      	lsls	r3, r4, #24
 800344a:	2200      	movs	r2, #0
 800344c:	ea40 0402 	orr.w	r4, r0, r2
 8003450:	f8c7 42a8 	str.w	r4, [r7, #680]	@ 0x2a8
 8003454:	430b      	orrs	r3, r1
 8003456:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 800345a:	e9d7 34aa 	ldrd	r3, r4, [r7, #680]	@ 0x2a8
 800345e:	e9c7 34d2 	strd	r3, r4, [r7, #840]	@ 0x348
      this->distance = u_distance.real;
 8003462:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 8003466:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 800346a:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->distance);
 800346e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003472:	3308      	adds	r3, #8
 8003474:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      union {
        int64_t real;
        uint64_t base;
      } u_angle;
      u_angle.base = 0;
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	f04f 0300 	mov.w	r3, #0
 8003480:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
      u_angle.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003484:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	@ 0x340
 8003488:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 800348c:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003490:	4413      	add	r3, r2
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2200      	movs	r2, #0
 8003498:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 800349c:	f8c7 22a4 	str.w	r2, [r7, #676]	@ 0x2a4
 80034a0:	e9d7 34a8 	ldrd	r3, r4, [r7, #672]	@ 0x2a0
 80034a4:	461a      	mov	r2, r3
 80034a6:	4302      	orrs	r2, r0
 80034a8:	f8c7 2298 	str.w	r2, [r7, #664]	@ 0x298
 80034ac:	4623      	mov	r3, r4
 80034ae:	430b      	orrs	r3, r1
 80034b0:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 80034b4:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	@ 0x298
 80034b8:	e9c7 34d0 	strd	r3, r4, [r7, #832]	@ 0x340
      u_angle.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80034bc:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	@ 0x340
 80034c0:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80034ca:	4413      	add	r3, r2
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2200      	movs	r2, #0
 80034d2:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 80034d6:	f8c7 2294 	str.w	r2, [r7, #660]	@ 0x294
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	f04f 0300 	mov.w	r3, #0
 80034e2:	e9d7 89a4 	ldrd	r8, r9, [r7, #656]	@ 0x290
 80034e6:	464c      	mov	r4, r9
 80034e8:	0223      	lsls	r3, r4, #8
 80034ea:	46c4      	mov	ip, r8
 80034ec:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 80034f0:	4644      	mov	r4, r8
 80034f2:	0222      	lsls	r2, r4, #8
 80034f4:	ea40 0402 	orr.w	r4, r0, r2
 80034f8:	f8c7 4288 	str.w	r4, [r7, #648]	@ 0x288
 80034fc:	430b      	orrs	r3, r1
 80034fe:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 8003502:	e9d7 34a2 	ldrd	r3, r4, [r7, #648]	@ 0x288
 8003506:	e9c7 34d0 	strd	r3, r4, [r7, #832]	@ 0x340
      u_angle.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800350a:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	@ 0x340
 800350e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003512:	1c9a      	adds	r2, r3, #2
 8003514:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003518:	4413      	add	r3, r2
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2200      	movs	r2, #0
 8003520:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 8003524:	f8c7 2284 	str.w	r2, [r7, #644]	@ 0x284
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	e9d7 89a0 	ldrd	r8, r9, [r7, #640]	@ 0x280
 8003534:	464c      	mov	r4, r9
 8003536:	0423      	lsls	r3, r4, #16
 8003538:	46c4      	mov	ip, r8
 800353a:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 800353e:	4644      	mov	r4, r8
 8003540:	0422      	lsls	r2, r4, #16
 8003542:	ea40 0402 	orr.w	r4, r0, r2
 8003546:	f8c7 4278 	str.w	r4, [r7, #632]	@ 0x278
 800354a:	430b      	orrs	r3, r1
 800354c:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8003550:	e9d7 349e 	ldrd	r3, r4, [r7, #632]	@ 0x278
 8003554:	e9c7 34d0 	strd	r3, r4, [r7, #832]	@ 0x340
      u_angle.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003558:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	@ 0x340
 800355c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003560:	1cda      	adds	r2, r3, #3
 8003562:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003566:	4413      	add	r3, r2
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2200      	movs	r2, #0
 800356e:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 8003572:	f8c7 2274 	str.w	r2, [r7, #628]	@ 0x274
 8003576:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	@ 0x270
 800357a:	4623      	mov	r3, r4
 800357c:	0a1b      	lsrs	r3, r3, #8
 800357e:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 8003582:	4623      	mov	r3, r4
 8003584:	061b      	lsls	r3, r3, #24
 8003586:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 800358a:	e9d7 349a 	ldrd	r3, r4, [r7, #616]	@ 0x268
 800358e:	461a      	mov	r2, r3
 8003590:	4302      	orrs	r2, r0
 8003592:	f8c7 2260 	str.w	r2, [r7, #608]	@ 0x260
 8003596:	4623      	mov	r3, r4
 8003598:	430b      	orrs	r3, r1
 800359a:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
 800359e:	e9d7 3498 	ldrd	r3, r4, [r7, #608]	@ 0x260
 80035a2:	e9c7 34d0 	strd	r3, r4, [r7, #832]	@ 0x340
      u_angle.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80035a6:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	@ 0x340
 80035aa:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80035ae:	1d1a      	adds	r2, r3, #4
 80035b0:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80035b4:	4413      	add	r3, r2
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2200      	movs	r2, #0
 80035bc:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 80035c0:	f8c7 225c 	str.w	r2, [r7, #604]	@ 0x25c
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	f8d7 4258 	ldr.w	r4, [r7, #600]	@ 0x258
 80035d0:	0023      	movs	r3, r4
 80035d2:	2200      	movs	r2, #0
 80035d4:	ea40 0402 	orr.w	r4, r0, r2
 80035d8:	f8c7 4250 	str.w	r4, [r7, #592]	@ 0x250
 80035dc:	430b      	orrs	r3, r1
 80035de:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 80035e2:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	@ 0x250
 80035e6:	e9c7 34d0 	strd	r3, r4, [r7, #832]	@ 0x340
      u_angle.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80035ea:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	@ 0x340
 80035ee:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80035f2:	1d5a      	adds	r2, r3, #5
 80035f4:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80035f8:	4413      	add	r3, r2
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2200      	movs	r2, #0
 8003600:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 8003604:	f8c7 224c 	str.w	r2, [r7, #588]	@ 0x24c
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	f8d7 4248 	ldr.w	r4, [r7, #584]	@ 0x248
 8003614:	0223      	lsls	r3, r4, #8
 8003616:	2200      	movs	r2, #0
 8003618:	ea40 0402 	orr.w	r4, r0, r2
 800361c:	f8c7 4240 	str.w	r4, [r7, #576]	@ 0x240
 8003620:	430b      	orrs	r3, r1
 8003622:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 8003626:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	@ 0x240
 800362a:	e9c7 34d0 	strd	r3, r4, [r7, #832]	@ 0x340
      u_angle.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800362e:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	@ 0x340
 8003632:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003636:	1d9a      	adds	r2, r3, #6
 8003638:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 800363c:	4413      	add	r3, r2
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2200      	movs	r2, #0
 8003644:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 8003648:	f8c7 223c 	str.w	r2, [r7, #572]	@ 0x23c
 800364c:	f04f 0200 	mov.w	r2, #0
 8003650:	f04f 0300 	mov.w	r3, #0
 8003654:	f8d7 4238 	ldr.w	r4, [r7, #568]	@ 0x238
 8003658:	0423      	lsls	r3, r4, #16
 800365a:	2200      	movs	r2, #0
 800365c:	ea40 0402 	orr.w	r4, r0, r2
 8003660:	f8c7 4230 	str.w	r4, [r7, #560]	@ 0x230
 8003664:	430b      	orrs	r3, r1
 8003666:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 800366a:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	@ 0x230
 800366e:	e9c7 34d0 	strd	r3, r4, [r7, #832]	@ 0x340
      u_angle.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003672:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	@ 0x340
 8003676:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800367a:	1dda      	adds	r2, r3, #7
 800367c:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003680:	4413      	add	r3, r2
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2200      	movs	r2, #0
 8003688:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 800368c:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	f04f 0300 	mov.w	r3, #0
 8003698:	f8d7 4228 	ldr.w	r4, [r7, #552]	@ 0x228
 800369c:	0623      	lsls	r3, r4, #24
 800369e:	2200      	movs	r2, #0
 80036a0:	ea40 0402 	orr.w	r4, r0, r2
 80036a4:	f8c7 4220 	str.w	r4, [r7, #544]	@ 0x220
 80036a8:	430b      	orrs	r3, r1
 80036aa:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 80036ae:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	@ 0x220
 80036b2:	e9c7 34d0 	strd	r3, r4, [r7, #832]	@ 0x340
      this->angle = u_angle.real;
 80036b6:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	@ 0x340
 80036ba:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 80036be:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->angle);
 80036c2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80036c6:	3308      	adds	r3, #8
 80036c8:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      union {
        int64_t real;
        uint64_t base;
      } u_x_on_camera;
      u_x_on_camera.base = 0;
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338
      u_x_on_camera.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80036d8:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
 80036dc:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 80036e0:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80036e4:	4413      	add	r3, r2
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2200      	movs	r2, #0
 80036ec:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 80036f0:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 80036f4:	e9d7 3486 	ldrd	r3, r4, [r7, #536]	@ 0x218
 80036f8:	461a      	mov	r2, r3
 80036fa:	4302      	orrs	r2, r0
 80036fc:	f8c7 2210 	str.w	r2, [r7, #528]	@ 0x210
 8003700:	4623      	mov	r3, r4
 8003702:	430b      	orrs	r3, r1
 8003704:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003708:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	@ 0x210
 800370c:	e9c7 34ce 	strd	r3, r4, [r7, #824]	@ 0x338
      u_x_on_camera.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003710:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
 8003714:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 800371e:	4413      	add	r3, r2
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2200      	movs	r2, #0
 8003726:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 800372a:	f8c7 220c 	str.w	r2, [r7, #524]	@ 0x20c
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	e9d7 8982 	ldrd	r8, r9, [r7, #520]	@ 0x208
 800373a:	464c      	mov	r4, r9
 800373c:	0223      	lsls	r3, r4, #8
 800373e:	46c4      	mov	ip, r8
 8003740:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 8003744:	4644      	mov	r4, r8
 8003746:	0222      	lsls	r2, r4, #8
 8003748:	ea40 0402 	orr.w	r4, r0, r2
 800374c:	f8c7 4200 	str.w	r4, [r7, #512]	@ 0x200
 8003750:	430b      	orrs	r3, r1
 8003752:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8003756:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	@ 0x200
 800375a:	e9c7 34ce 	strd	r3, r4, [r7, #824]	@ 0x338
      u_x_on_camera.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800375e:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
 8003762:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003766:	1c9a      	adds	r2, r3, #2
 8003768:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 800376c:	4413      	add	r3, r2
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2200      	movs	r2, #0
 8003774:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 8003778:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	@ 0x1f8
 8003788:	464c      	mov	r4, r9
 800378a:	0423      	lsls	r3, r4, #16
 800378c:	46c4      	mov	ip, r8
 800378e:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8003792:	4644      	mov	r4, r8
 8003794:	0422      	lsls	r2, r4, #16
 8003796:	ea40 0402 	orr.w	r4, r0, r2
 800379a:	f8c7 41f0 	str.w	r4, [r7, #496]	@ 0x1f0
 800379e:	430b      	orrs	r3, r1
 80037a0:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 80037a4:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	@ 0x1f0
 80037a8:	e9c7 34ce 	strd	r3, r4, [r7, #824]	@ 0x338
      u_x_on_camera.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80037ac:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
 80037b0:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80037b4:	1cda      	adds	r2, r3, #3
 80037b6:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80037ba:	4413      	add	r3, r2
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2200      	movs	r2, #0
 80037c2:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80037c6:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 80037ca:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	@ 0x1e8
 80037ce:	4623      	mov	r3, r4
 80037d0:	0a1b      	lsrs	r3, r3, #8
 80037d2:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80037d6:	4623      	mov	r3, r4
 80037d8:	061b      	lsls	r3, r3, #24
 80037da:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80037de:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	@ 0x1e0
 80037e2:	461a      	mov	r2, r3
 80037e4:	4302      	orrs	r2, r0
 80037e6:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80037ea:	4623      	mov	r3, r4
 80037ec:	430b      	orrs	r3, r1
 80037ee:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80037f2:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	@ 0x1d8
 80037f6:	e9c7 34ce 	strd	r3, r4, [r7, #824]	@ 0x338
      u_x_on_camera.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80037fa:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
 80037fe:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003802:	1d1a      	adds	r2, r3, #4
 8003804:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003808:	4413      	add	r3, r2
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2200      	movs	r2, #0
 8003810:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8003814:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	f04f 0300 	mov.w	r3, #0
 8003820:	f8d7 41d0 	ldr.w	r4, [r7, #464]	@ 0x1d0
 8003824:	0023      	movs	r3, r4
 8003826:	2200      	movs	r2, #0
 8003828:	ea40 0402 	orr.w	r4, r0, r2
 800382c:	f8c7 41c8 	str.w	r4, [r7, #456]	@ 0x1c8
 8003830:	430b      	orrs	r3, r1
 8003832:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8003836:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	@ 0x1c8
 800383a:	e9c7 34ce 	strd	r3, r4, [r7, #824]	@ 0x338
      u_x_on_camera.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800383e:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
 8003842:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003846:	1d5a      	adds	r2, r3, #5
 8003848:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 800384c:	4413      	add	r3, r2
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2200      	movs	r2, #0
 8003854:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003858:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	f04f 0300 	mov.w	r3, #0
 8003864:	f8d7 41c0 	ldr.w	r4, [r7, #448]	@ 0x1c0
 8003868:	0223      	lsls	r3, r4, #8
 800386a:	2200      	movs	r2, #0
 800386c:	ea40 0402 	orr.w	r4, r0, r2
 8003870:	f8c7 41b8 	str.w	r4, [r7, #440]	@ 0x1b8
 8003874:	430b      	orrs	r3, r1
 8003876:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800387a:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	@ 0x1b8
 800387e:	e9c7 34ce 	strd	r3, r4, [r7, #824]	@ 0x338
      u_x_on_camera.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003882:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
 8003886:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800388a:	1d9a      	adds	r2, r3, #6
 800388c:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003890:	4413      	add	r3, r2
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2200      	movs	r2, #0
 8003898:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 800389c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 80038a0:	f04f 0200 	mov.w	r2, #0
 80038a4:	f04f 0300 	mov.w	r3, #0
 80038a8:	f8d7 41b0 	ldr.w	r4, [r7, #432]	@ 0x1b0
 80038ac:	0423      	lsls	r3, r4, #16
 80038ae:	2200      	movs	r2, #0
 80038b0:	ea40 0402 	orr.w	r4, r0, r2
 80038b4:	f8c7 41a8 	str.w	r4, [r7, #424]	@ 0x1a8
 80038b8:	430b      	orrs	r3, r1
 80038ba:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 80038be:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	@ 0x1a8
 80038c2:	e9c7 34ce 	strd	r3, r4, [r7, #824]	@ 0x338
      u_x_on_camera.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80038c6:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
 80038ca:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80038ce:	1dda      	adds	r2, r3, #7
 80038d0:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80038d4:	4413      	add	r3, r2
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2200      	movs	r2, #0
 80038dc:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80038e0:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	f8d7 41a0 	ldr.w	r4, [r7, #416]	@ 0x1a0
 80038f0:	0623      	lsls	r3, r4, #24
 80038f2:	2200      	movs	r2, #0
 80038f4:	ea40 0402 	orr.w	r4, r0, r2
 80038f8:	f8c7 4198 	str.w	r4, [r7, #408]	@ 0x198
 80038fc:	430b      	orrs	r3, r1
 80038fe:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003902:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	@ 0x198
 8003906:	e9c7 34ce 	strd	r3, r4, [r7, #824]	@ 0x338
      this->x_on_camera = u_x_on_camera.real;
 800390a:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
 800390e:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8003912:	e9c3 0106 	strd	r0, r1, [r3, #24]
      offset += sizeof(this->x_on_camera);
 8003916:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800391a:	3308      	adds	r3, #8
 800391c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      union {
        int64_t real;
        uint64_t base;
      } u_y_on_camera;
      u_y_on_camera.base = 0;
 8003920:	f04f 0200 	mov.w	r2, #0
 8003924:	f04f 0300 	mov.w	r3, #0
 8003928:	e9c7 23cc 	strd	r2, r3, [r7, #816]	@ 0x330
      u_y_on_camera.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800392c:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	@ 0x330
 8003930:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 8003934:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003938:	4413      	add	r3, r2
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2200      	movs	r2, #0
 8003940:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8003944:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8003948:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	@ 0x190
 800394c:	461a      	mov	r2, r3
 800394e:	4302      	orrs	r2, r0
 8003950:	f8c7 2188 	str.w	r2, [r7, #392]	@ 0x188
 8003954:	4623      	mov	r3, r4
 8003956:	430b      	orrs	r3, r1
 8003958:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 800395c:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	@ 0x188
 8003960:	e9c7 34cc 	strd	r3, r4, [r7, #816]	@ 0x330
      u_y_on_camera.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003964:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	@ 0x330
 8003968:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003972:	4413      	add	r3, r2
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2200      	movs	r2, #0
 800397a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800397e:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	@ 0x180
 800398e:	464c      	mov	r4, r9
 8003990:	0223      	lsls	r3, r4, #8
 8003992:	46c4      	mov	ip, r8
 8003994:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 8003998:	4644      	mov	r4, r8
 800399a:	0222      	lsls	r2, r4, #8
 800399c:	ea40 0402 	orr.w	r4, r0, r2
 80039a0:	f8c7 4178 	str.w	r4, [r7, #376]	@ 0x178
 80039a4:	430b      	orrs	r3, r1
 80039a6:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80039aa:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 80039ae:	e9c7 34cc 	strd	r3, r4, [r7, #816]	@ 0x330
      u_y_on_camera.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80039b2:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	@ 0x330
 80039b6:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80039ba:	1c9a      	adds	r2, r3, #2
 80039bc:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80039c0:	4413      	add	r3, r2
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2200      	movs	r2, #0
 80039c8:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80039cc:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	f04f 0300 	mov.w	r3, #0
 80039d8:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	@ 0x170
 80039dc:	464c      	mov	r4, r9
 80039de:	0423      	lsls	r3, r4, #16
 80039e0:	46c4      	mov	ip, r8
 80039e2:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 80039e6:	4644      	mov	r4, r8
 80039e8:	0422      	lsls	r2, r4, #16
 80039ea:	ea40 0402 	orr.w	r4, r0, r2
 80039ee:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 80039f2:	430b      	orrs	r3, r1
 80039f4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80039f8:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 80039fc:	e9c7 34cc 	strd	r3, r4, [r7, #816]	@ 0x330
      u_y_on_camera.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003a00:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	@ 0x330
 8003a04:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003a08:	1cda      	adds	r2, r3, #3
 8003a0a:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003a0e:	4413      	add	r3, r2
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2200      	movs	r2, #0
 8003a16:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8003a1a:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8003a1e:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8003a22:	4623      	mov	r3, r4
 8003a24:	0a1b      	lsrs	r3, r3, #8
 8003a26:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8003a2a:	4623      	mov	r3, r4
 8003a2c:	061b      	lsls	r3, r3, #24
 8003a2e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003a32:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	@ 0x158
 8003a36:	461a      	mov	r2, r3
 8003a38:	4302      	orrs	r2, r0
 8003a3a:	f8c7 2150 	str.w	r2, [r7, #336]	@ 0x150
 8003a3e:	4623      	mov	r3, r4
 8003a40:	430b      	orrs	r3, r1
 8003a42:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003a46:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 8003a4a:	e9c7 34cc 	strd	r3, r4, [r7, #816]	@ 0x330
      u_y_on_camera.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003a4e:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	@ 0x330
 8003a52:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003a56:	1d1a      	adds	r2, r3, #4
 8003a58:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003a5c:	4413      	add	r3, r2
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2200      	movs	r2, #0
 8003a64:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8003a68:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	f04f 0300 	mov.w	r3, #0
 8003a74:	f8d7 4148 	ldr.w	r4, [r7, #328]	@ 0x148
 8003a78:	0023      	movs	r3, r4
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	ea40 0402 	orr.w	r4, r0, r2
 8003a80:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 8003a84:	430b      	orrs	r3, r1
 8003a86:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8003a8a:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 8003a8e:	e9c7 34cc 	strd	r3, r4, [r7, #816]	@ 0x330
      u_y_on_camera.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003a92:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	@ 0x330
 8003a96:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003a9a:	1d5a      	adds	r2, r3, #5
 8003a9c:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003aa0:	4413      	add	r3, r2
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003aac:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8003ab0:	f04f 0200 	mov.w	r2, #0
 8003ab4:	f04f 0300 	mov.w	r3, #0
 8003ab8:	f8d7 4138 	ldr.w	r4, [r7, #312]	@ 0x138
 8003abc:	0223      	lsls	r3, r4, #8
 8003abe:	2200      	movs	r2, #0
 8003ac0:	ea40 0402 	orr.w	r4, r0, r2
 8003ac4:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 8003ac8:	430b      	orrs	r3, r1
 8003aca:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8003ace:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 8003ad2:	e9c7 34cc 	strd	r3, r4, [r7, #816]	@ 0x330
      u_y_on_camera.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003ad6:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	@ 0x330
 8003ada:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003ade:	1d9a      	adds	r2, r3, #6
 8003ae0:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003ae4:	4413      	add	r3, r2
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2200      	movs	r2, #0
 8003aec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003af0:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	f04f 0300 	mov.w	r3, #0
 8003afc:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
 8003b00:	0423      	lsls	r3, r4, #16
 8003b02:	2200      	movs	r2, #0
 8003b04:	ea40 0402 	orr.w	r4, r0, r2
 8003b08:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003b12:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 8003b16:	e9c7 34cc 	strd	r3, r4, [r7, #816]	@ 0x330
      u_y_on_camera.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003b1a:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	@ 0x330
 8003b1e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003b22:	1dda      	adds	r2, r3, #7
 8003b24:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003b28:	4413      	add	r3, r2
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003b34:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	f04f 0300 	mov.w	r3, #0
 8003b40:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 8003b44:	0623      	lsls	r3, r4, #24
 8003b46:	2200      	movs	r2, #0
 8003b48:	ea40 0402 	orr.w	r4, r0, r2
 8003b4c:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 8003b50:	430b      	orrs	r3, r1
 8003b52:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003b56:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 8003b5a:	e9c7 34cc 	strd	r3, r4, [r7, #816]	@ 0x330
      this->y_on_camera = u_y_on_camera.real;
 8003b5e:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	@ 0x330
 8003b62:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8003b66:	e9c3 0108 	strd	r0, r1, [r3, #32]
      offset += sizeof(this->y_on_camera);
 8003b6a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003b6e:	3308      	adds	r3, #8
 8003b70:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      union {
        int64_t real;
        uint64_t base;
      } u_x_real;
      u_x_real.base = 0;
 8003b74:	f04f 0200 	mov.w	r2, #0
 8003b78:	f04f 0300 	mov.w	r3, #0
 8003b7c:	e9c7 23ca 	strd	r2, r3, [r7, #808]	@ 0x328
      u_x_real.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003b80:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 8003b84:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 8003b88:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003b8c:	4413      	add	r3, r2
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2200      	movs	r2, #0
 8003b94:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003b98:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8003b9c:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	@ 0x108
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	4302      	orrs	r2, r0
 8003ba4:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8003ba8:	4623      	mov	r3, r4
 8003baa:	430b      	orrs	r3, r1
 8003bac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003bb0:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8003bb4:	e9c7 34ca 	strd	r3, r4, [r7, #808]	@ 0x328
      u_x_real.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003bb8:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 8003bbc:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003bc6:	4413      	add	r3, r2
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003bd2:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8003bd6:	f04f 0200 	mov.w	r2, #0
 8003bda:	f04f 0300 	mov.w	r3, #0
 8003bde:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8003be2:	464c      	mov	r4, r9
 8003be4:	0223      	lsls	r3, r4, #8
 8003be6:	46c4      	mov	ip, r8
 8003be8:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 8003bec:	4644      	mov	r4, r8
 8003bee:	0222      	lsls	r2, r4, #8
 8003bf0:	ea40 0402 	orr.w	r4, r0, r2
 8003bf4:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8003bf8:	430b      	orrs	r3, r1
 8003bfa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003bfe:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8003c02:	e9c7 34ca 	strd	r3, r4, [r7, #808]	@ 0x328
      u_x_real.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003c06:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 8003c0a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003c0e:	1c9a      	adds	r2, r3, #2
 8003c10:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003c14:	4413      	add	r3, r2
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003c20:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	f04f 0300 	mov.w	r3, #0
 8003c2c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8003c30:	464c      	mov	r4, r9
 8003c32:	0423      	lsls	r3, r4, #16
 8003c34:	46c4      	mov	ip, r8
 8003c36:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8003c3a:	4644      	mov	r4, r8
 8003c3c:	0422      	lsls	r2, r4, #16
 8003c3e:	ea40 0402 	orr.w	r4, r0, r2
 8003c42:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 8003c46:	430b      	orrs	r3, r1
 8003c48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c4c:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8003c50:	e9c7 34ca 	strd	r3, r4, [r7, #808]	@ 0x328
      u_x_real.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003c54:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 8003c58:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003c5c:	1cda      	adds	r2, r3, #3
 8003c5e:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003c62:	4413      	add	r3, r2
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c6e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c72:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8003c76:	4623      	mov	r3, r4
 8003c78:	0a1b      	lsrs	r3, r3, #8
 8003c7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003c7e:	4623      	mov	r3, r4
 8003c80:	061b      	lsls	r3, r3, #24
 8003c82:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c86:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	4302      	orrs	r2, r0
 8003c8e:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8003c92:	4623      	mov	r3, r4
 8003c94:	430b      	orrs	r3, r1
 8003c96:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c9a:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8003c9e:	e9c7 34ca 	strd	r3, r4, [r7, #808]	@ 0x328
      u_x_real.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003ca2:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 8003ca6:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003caa:	1d1a      	adds	r2, r3, #4
 8003cac:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003cb0:	4413      	add	r3, r2
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cbc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003cc0:	f04f 0200 	mov.w	r2, #0
 8003cc4:	f04f 0300 	mov.w	r3, #0
 8003cc8:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 8003ccc:	0023      	movs	r3, r4
 8003cce:	2200      	movs	r2, #0
 8003cd0:	ea40 0402 	orr.w	r4, r0, r2
 8003cd4:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003cde:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8003ce2:	e9c7 34ca 	strd	r3, r4, [r7, #808]	@ 0x328
      u_x_real.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003ce6:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 8003cea:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003cee:	1d5a      	adds	r2, r3, #5
 8003cf0:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003cf4:	4413      	add	r3, r2
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d00:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 8003d10:	0223      	lsls	r3, r4, #8
 8003d12:	2200      	movs	r2, #0
 8003d14:	ea40 0402 	orr.w	r4, r0, r2
 8003d18:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8003d1c:	430b      	orrs	r3, r1
 8003d1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d22:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8003d26:	e9c7 34ca 	strd	r3, r4, [r7, #808]	@ 0x328
      u_x_real.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003d2a:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 8003d2e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003d32:	1d9a      	adds	r2, r3, #6
 8003d34:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003d38:	4413      	add	r3, r2
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d44:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003d48:	f04f 0200 	mov.w	r2, #0
 8003d4c:	f04f 0300 	mov.w	r3, #0
 8003d50:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8003d54:	0423      	lsls	r3, r4, #16
 8003d56:	2200      	movs	r2, #0
 8003d58:	ea40 0402 	orr.w	r4, r0, r2
 8003d5c:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8003d60:	430b      	orrs	r3, r1
 8003d62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d66:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8003d6a:	e9c7 34ca 	strd	r3, r4, [r7, #808]	@ 0x328
      u_x_real.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003d6e:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 8003d72:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003d76:	1dda      	adds	r2, r3, #7
 8003d78:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003d7c:	4413      	add	r3, r2
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2200      	movs	r2, #0
 8003d84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d88:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 8003d98:	0623      	lsls	r3, r4, #24
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	ea40 0402 	orr.w	r4, r0, r2
 8003da0:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8003da4:	430b      	orrs	r3, r1
 8003da6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003daa:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8003dae:	e9c7 34ca 	strd	r3, r4, [r7, #808]	@ 0x328
      this->x_real = u_x_real.real;
 8003db2:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 8003db6:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8003dba:	e9c3 010a 	strd	r0, r1, [r3, #40]	@ 0x28
      offset += sizeof(this->x_real);
 8003dbe:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003dc2:	3308      	adds	r3, #8
 8003dc4:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      union {
        int64_t real;
        uint64_t base;
      } u_y_real;
      u_y_real.base = 0;
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	e9c7 23c8 	strd	r2, r3, [r7, #800]	@ 0x320
      u_y_real.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003dd4:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 8003dd8:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 8003ddc:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003de0:	4413      	add	r3, r2
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2200      	movs	r2, #0
 8003de8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003dec:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003df0:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8003df4:	461a      	mov	r2, r3
 8003df6:	4302      	orrs	r2, r0
 8003df8:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003dfa:	4623      	mov	r3, r4
 8003dfc:	430b      	orrs	r3, r1
 8003dfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e00:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8003e04:	e9c7 34c8 	strd	r3, r4, [r7, #800]	@ 0x320
      u_y_real.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003e08:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 8003e0c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003e10:	1c5a      	adds	r2, r3, #1
 8003e12:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003e16:	4413      	add	r3, r2
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e20:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	f04f 0300 	mov.w	r3, #0
 8003e2a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003e2e:	464c      	mov	r4, r9
 8003e30:	0223      	lsls	r3, r4, #8
 8003e32:	46c4      	mov	ip, r8
 8003e34:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 8003e38:	4644      	mov	r4, r8
 8003e3a:	0222      	lsls	r2, r4, #8
 8003e3c:	ea40 0402 	orr.w	r4, r0, r2
 8003e40:	66bc      	str	r4, [r7, #104]	@ 0x68
 8003e42:	430b      	orrs	r3, r1
 8003e44:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e46:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8003e4a:	e9c7 34c8 	strd	r3, r4, [r7, #800]	@ 0x320
      u_y_real.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003e4e:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 8003e52:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003e56:	1c9a      	adds	r2, r3, #2
 8003e58:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003e5c:	4413      	add	r3, r2
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2200      	movs	r2, #0
 8003e64:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e66:	667a      	str	r2, [r7, #100]	@ 0x64
 8003e68:	f04f 0200 	mov.w	r2, #0
 8003e6c:	f04f 0300 	mov.w	r3, #0
 8003e70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003e74:	464c      	mov	r4, r9
 8003e76:	0423      	lsls	r3, r4, #16
 8003e78:	46c4      	mov	ip, r8
 8003e7a:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8003e7e:	4644      	mov	r4, r8
 8003e80:	0422      	lsls	r2, r4, #16
 8003e82:	ea40 0402 	orr.w	r4, r0, r2
 8003e86:	65bc      	str	r4, [r7, #88]	@ 0x58
 8003e88:	430b      	orrs	r3, r1
 8003e8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e8c:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8003e90:	e9c7 34c8 	strd	r3, r4, [r7, #800]	@ 0x320
      u_y_real.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003e94:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 8003e98:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003e9c:	1cda      	adds	r2, r3, #3
 8003e9e:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003ea2:	4413      	add	r3, r2
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	653b      	str	r3, [r7, #80]	@ 0x50
 8003eac:	657a      	str	r2, [r7, #84]	@ 0x54
 8003eae:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8003eb2:	4623      	mov	r3, r4
 8003eb4:	0a1b      	lsrs	r3, r3, #8
 8003eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003eb8:	4623      	mov	r3, r4
 8003eba:	061b      	lsls	r3, r3, #24
 8003ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ebe:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	4302      	orrs	r2, r0
 8003ec6:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ec8:	4623      	mov	r3, r4
 8003eca:	430b      	orrs	r3, r1
 8003ecc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ece:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8003ed2:	e9c7 34c8 	strd	r3, r4, [r7, #800]	@ 0x320
      u_y_real.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003ed6:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 8003eda:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003ede:	1d1a      	adds	r2, r3, #4
 8003ee0:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003ee4:	4413      	add	r3, r2
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2200      	movs	r2, #0
 8003eec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003eee:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	f04f 0300 	mov.w	r3, #0
 8003ef8:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8003efa:	0023      	movs	r3, r4
 8003efc:	2200      	movs	r2, #0
 8003efe:	ea40 0402 	orr.w	r4, r0, r2
 8003f02:	633c      	str	r4, [r7, #48]	@ 0x30
 8003f04:	430b      	orrs	r3, r1
 8003f06:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f08:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8003f0c:	e9c7 34c8 	strd	r3, r4, [r7, #800]	@ 0x320
      u_y_real.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003f10:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 8003f14:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003f18:	1d5a      	adds	r2, r3, #5
 8003f1a:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003f1e:	4413      	add	r3, r2
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2200      	movs	r2, #0
 8003f26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f2a:	f04f 0200 	mov.w	r2, #0
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8003f34:	0223      	lsls	r3, r4, #8
 8003f36:	2200      	movs	r2, #0
 8003f38:	ea40 0402 	orr.w	r4, r0, r2
 8003f3c:	623c      	str	r4, [r7, #32]
 8003f3e:	430b      	orrs	r3, r1
 8003f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f42:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003f46:	e9c7 34c8 	strd	r3, r4, [r7, #800]	@ 0x320
      u_y_real.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003f4a:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 8003f4e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003f52:	3306      	adds	r3, #6
 8003f54:	f8d7 2318 	ldr.w	r2, [r7, #792]	@ 0x318
 8003f58:	4413      	add	r3, r2
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2200      	movs	r2, #0
 8003f60:	61bb      	str	r3, [r7, #24]
 8003f62:	61fa      	str	r2, [r7, #28]
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	f04f 0300 	mov.w	r3, #0
 8003f6c:	69bc      	ldr	r4, [r7, #24]
 8003f6e:	0423      	lsls	r3, r4, #16
 8003f70:	2200      	movs	r2, #0
 8003f72:	ea40 0402 	orr.w	r4, r0, r2
 8003f76:	613c      	str	r4, [r7, #16]
 8003f78:	430b      	orrs	r3, r1
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003f80:	e9c7 34c8 	strd	r3, r4, [r7, #800]	@ 0x320
      u_y_real.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003f84:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 8003f88:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003f8c:	3307      	adds	r3, #7
 8003f8e:	f8d7 2318 	ldr.w	r2, [r7, #792]	@ 0x318
 8003f92:	4413      	add	r3, r2
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2200      	movs	r2, #0
 8003f9a:	60bb      	str	r3, [r7, #8]
 8003f9c:	60fa      	str	r2, [r7, #12]
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	68bc      	ldr	r4, [r7, #8]
 8003fa8:	0623      	lsls	r3, r4, #24
 8003faa:	2200      	movs	r2, #0
 8003fac:	ea40 0402 	orr.w	r4, r0, r2
 8003fb0:	603c      	str	r4, [r7, #0]
 8003fb2:	430b      	orrs	r3, r1
 8003fb4:	607b      	str	r3, [r7, #4]
 8003fb6:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003fba:	e9c7 34c8 	strd	r3, r4, [r7, #800]	@ 0x320
      this->y_real = u_y_real.real;
 8003fbe:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	@ 0x320
 8003fc2:	f8d7 131c 	ldr.w	r1, [r7, #796]	@ 0x31c
 8003fc6:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
      offset += sizeof(this->y_real);
 8003fca:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003fce:	3308      	adds	r3, #8
 8003fd0:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
     return offset;
 8003fd4:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
    }
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f507 7757 	add.w	r7, r7, #860	@ 0x35c
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003fe4:	4770      	bx	lr
	...

08003fe8 <_ZN9krsbi202525BallPositionBasedOnCamera7getTypeEv>:

    virtual const char * getType() override { return "krsbi2025/BallPositionBasedOnCamera"; };
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	4b02      	ldr	r3, [pc, #8]	@ (8003ffc <_ZN9krsbi202525BallPositionBasedOnCamera7getTypeEv+0x14>)
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bc80      	pop	{r7}
 8003ffa:	4770      	bx	lr
 8003ffc:	0800af88 	.word	0x0800af88

08004000 <_ZN9krsbi202525BallPositionBasedOnCamera6getMD5Ev>:
    virtual const char * getMD5() override { return "c32d588a00265202dbcab5311745340d"; };
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	4b02      	ldr	r3, [pc, #8]	@ (8004014 <_ZN9krsbi202525BallPositionBasedOnCamera6getMD5Ev+0x14>)
 800400a:	4618      	mov	r0, r3
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr
 8004014:	0800afac 	.word	0x0800afac

08004018 <_ZN9krsbi20255WheelC1Ev>:
      typedef float _bottom_wheel_cw_type;
      _bottom_wheel_cw_type bottom_wheel_cw;
      typedef float _bottom_wheel_ccw_type;
      _bottom_wheel_ccw_type bottom_wheel_ccw;

    Wheel():
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
      left_wheel_cw(0),
      left_wheel_ccw(0),
      right_wheel_cw(0),
      right_wheel_ccw(0),
      bottom_wheel_cw(0),
      bottom_wheel_ccw(0)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4618      	mov	r0, r3
 8004024:	f7fd fdcc 	bl	8001bc0 <_ZN3ros3MsgC1Ev>
 8004028:	4a0f      	ldr	r2, [pc, #60]	@ (8004068 <_ZN9krsbi20255WheelC1Ev+0x50>)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	601a      	str	r2, [r3, #0]
      left_wheel_cw(0),
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f04f 0200 	mov.w	r2, #0
 8004034:	605a      	str	r2, [r3, #4]
      left_wheel_ccw(0),
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	609a      	str	r2, [r3, #8]
      right_wheel_cw(0),
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	60da      	str	r2, [r3, #12]
      right_wheel_ccw(0),
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	611a      	str	r2, [r3, #16]
      bottom_wheel_cw(0),
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	615a      	str	r2, [r3, #20]
      bottom_wheel_ccw(0)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	619a      	str	r2, [r3, #24]
    {
    }
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4618      	mov	r0, r3
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	0800b0d8 	.word	0x0800b0d8

0800406c <_ZNK9krsbi20255Wheel9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->left_wheel_cw);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	441a      	add	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	4619      	mov	r1, r3
 8004086:	4610      	mov	r0, r2
 8004088:	f7fd fc54 	bl	8001934 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800408c:	4602      	mov	r2, r0
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4413      	add	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->left_wheel_ccw);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	441a      	add	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	4619      	mov	r1, r3
 80040a0:	4610      	mov	r0, r2
 80040a2:	f7fd fc47 	bl	8001934 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80040a6:	4602      	mov	r2, r0
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4413      	add	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->right_wheel_cw);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	441a      	add	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	4619      	mov	r1, r3
 80040ba:	4610      	mov	r0, r2
 80040bc:	f7fd fc3a 	bl	8001934 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80040c0:	4602      	mov	r2, r0
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4413      	add	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->right_wheel_ccw);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	441a      	add	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	4619      	mov	r1, r3
 80040d4:	4610      	mov	r0, r2
 80040d6:	f7fd fc2d 	bl	8001934 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80040da:	4602      	mov	r2, r0
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4413      	add	r3, r2
 80040e0:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->bottom_wheel_cw);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	441a      	add	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	4619      	mov	r1, r3
 80040ee:	4610      	mov	r0, r2
 80040f0:	f7fd fc20 	bl	8001934 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80040f4:	4602      	mov	r2, r0
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	4413      	add	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->bottom_wheel_ccw);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	441a      	add	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	4619      	mov	r1, r3
 8004108:	4610      	mov	r0, r2
 800410a:	f7fd fc13 	bl	8001934 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800410e:	4602      	mov	r2, r0
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4413      	add	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]
      return offset;
 8004116:	68fb      	ldr	r3, [r7, #12]
    }
 8004118:	4618      	mov	r0, r3
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <_ZN9krsbi20255Wheel11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800412a:	2300      	movs	r3, #0
 800412c:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->left_wheel_cw));
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	441a      	add	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3304      	adds	r3, #4
 8004138:	4619      	mov	r1, r3
 800413a:	4610      	mov	r0, r2
 800413c:	f7fd fc95 	bl	8001a6a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004140:	4602      	mov	r2, r0
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	4413      	add	r3, r2
 8004146:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->left_wheel_ccw));
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	441a      	add	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3308      	adds	r3, #8
 8004152:	4619      	mov	r1, r3
 8004154:	4610      	mov	r0, r2
 8004156:	f7fd fc88 	bl	8001a6a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800415a:	4602      	mov	r2, r0
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4413      	add	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->right_wheel_cw));
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	441a      	add	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	330c      	adds	r3, #12
 800416c:	4619      	mov	r1, r3
 800416e:	4610      	mov	r0, r2
 8004170:	f7fd fc7b 	bl	8001a6a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004174:	4602      	mov	r2, r0
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4413      	add	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->right_wheel_ccw));
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	441a      	add	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3310      	adds	r3, #16
 8004186:	4619      	mov	r1, r3
 8004188:	4610      	mov	r0, r2
 800418a:	f7fd fc6e 	bl	8001a6a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800418e:	4602      	mov	r2, r0
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4413      	add	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->bottom_wheel_cw));
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	441a      	add	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3314      	adds	r3, #20
 80041a0:	4619      	mov	r1, r3
 80041a2:	4610      	mov	r0, r2
 80041a4:	f7fd fc61 	bl	8001a6a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80041a8:	4602      	mov	r2, r0
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	4413      	add	r3, r2
 80041ae:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->bottom_wheel_ccw));
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	441a      	add	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3318      	adds	r3, #24
 80041ba:	4619      	mov	r1, r3
 80041bc:	4610      	mov	r0, r2
 80041be:	f7fd fc54 	bl	8001a6a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80041c2:	4602      	mov	r2, r0
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4413      	add	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]
     return offset;
 80041ca:	68fb      	ldr	r3, [r7, #12]
    }
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <_ZN9krsbi20255Wheel7getTypeEv>:

    virtual const char * getType() override { return "krsbi2025/Wheel"; };
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	4b02      	ldr	r3, [pc, #8]	@ (80041e8 <_ZN9krsbi20255Wheel7getTypeEv+0x14>)
 80041de:	4618      	mov	r0, r3
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr
 80041e8:	0800afd0 	.word	0x0800afd0

080041ec <_ZN9krsbi20255Wheel6getMD5Ev>:
    virtual const char * getMD5() override { return "23cc0e6db082887e7d28f8d9255b33a9"; };
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	4b02      	ldr	r3, [pc, #8]	@ (8004200 <_ZN9krsbi20255Wheel6getMD5Ev+0x14>)
 80041f6:	4618      	mov	r0, r3
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bc80      	pop	{r7}
 80041fe:	4770      	bx	lr
 8004200:	0800afe0 	.word	0x0800afe0

08004204 <_Z17cam_data_callbackRKN9krsbi202525BallPositionBasedOnCameraE>:
//	float y;
//	float z;
//}ros_rx;
//
//ros_rx receiving;
void cam_data_callback(const krsbi2025::BallPositionBasedOnCamera &data){
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
	camera.distance = data.distance;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004212:	4610      	mov	r0, r2
 8004214:	4619      	mov	r1, r3
 8004216:	f7fc fc91 	bl	8000b3c <__aeabi_l2f>
 800421a:	4603      	mov	r3, r0
 800421c:	4a1b      	ldr	r2, [pc, #108]	@ (800428c <_Z17cam_data_callbackRKN9krsbi202525BallPositionBasedOnCameraE+0x88>)
 800421e:	6013      	str	r3, [r2, #0]
	camera.angle = data.angle;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004226:	4610      	mov	r0, r2
 8004228:	4619      	mov	r1, r3
 800422a:	f7fc fc87 	bl	8000b3c <__aeabi_l2f>
 800422e:	4603      	mov	r3, r0
 8004230:	4a16      	ldr	r2, [pc, #88]	@ (800428c <_Z17cam_data_callbackRKN9krsbi202525BallPositionBasedOnCameraE+0x88>)
 8004232:	6053      	str	r3, [r2, #4]
	camera.x_on_camera = data.x_on_camera;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800423a:	4610      	mov	r0, r2
 800423c:	4619      	mov	r1, r3
 800423e:	f7fc fc7d 	bl	8000b3c <__aeabi_l2f>
 8004242:	4603      	mov	r3, r0
 8004244:	4a11      	ldr	r2, [pc, #68]	@ (800428c <_Z17cam_data_callbackRKN9krsbi202525BallPositionBasedOnCameraE+0x88>)
 8004246:	6093      	str	r3, [r2, #8]
	camera.y_on_camera = data.y_on_camera;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800424e:	4610      	mov	r0, r2
 8004250:	4619      	mov	r1, r3
 8004252:	f7fc fc73 	bl	8000b3c <__aeabi_l2f>
 8004256:	4603      	mov	r3, r0
 8004258:	4a0c      	ldr	r2, [pc, #48]	@ (800428c <_Z17cam_data_callbackRKN9krsbi202525BallPositionBasedOnCameraE+0x88>)
 800425a:	60d3      	str	r3, [r2, #12]
	camera.x_real = data.x_real;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8004262:	4610      	mov	r0, r2
 8004264:	4619      	mov	r1, r3
 8004266:	f7fc fc69 	bl	8000b3c <__aeabi_l2f>
 800426a:	4603      	mov	r3, r0
 800426c:	4a07      	ldr	r2, [pc, #28]	@ (800428c <_Z17cam_data_callbackRKN9krsbi202525BallPositionBasedOnCameraE+0x88>)
 800426e:	6113      	str	r3, [r2, #16]
	camera.y_real = data.y_real;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004276:	4610      	mov	r0, r2
 8004278:	4619      	mov	r1, r3
 800427a:	f7fc fc5f 	bl	8000b3c <__aeabi_l2f>
 800427e:	4603      	mov	r3, r0
 8004280:	4a02      	ldr	r2, [pc, #8]	@ (800428c <_Z17cam_data_callbackRKN9krsbi202525BallPositionBasedOnCameraE+0x88>)
 8004282:	6153      	str	r3, [r2, #20]
}
 8004284:	bf00      	nop
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	20000190 	.word	0x20000190

08004290 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	4a04      	ldr	r2, [pc, #16]	@ (80042ac <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4618      	mov	r0, r3
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bc80      	pop	{r7}
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	0800b138 	.word	0x0800b138

080042b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff ffe8 	bl	8004290 <_ZN3ros15NodeHandleBase_C1Ev>
 80042c0:	4a36      	ldr	r2, [pc, #216]	@ (800439c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	3304      	adds	r3, #4
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fe faee 	bl	80028ac <_ZN13STM32HardwareC1Ev>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 80042f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042fa:	2100      	movs	r1, #0
 80042fc:	4618      	mov	r0, r3
 80042fe:	f005 feef 	bl	800a0e0 <memset>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8004308:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800430c:	2100      	movs	r1, #0
 800430e:	4618      	mov	r0, r3
 8004310:	f005 fee6 	bl	800a0e0 <memset>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f603 0324 	addw	r3, r3, #2084	@ 0x824
 800431a:	2264      	movs	r2, #100	@ 0x64
 800431c:	2100      	movs	r1, #0
 800431e:	4618      	mov	r0, r3
 8004320:	f005 fede 	bl	800a0e0 <memset>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 800432a:	2264      	movs	r2, #100	@ 0x64
 800432c:	2100      	movs	r1, #0
 800432e:	4618      	mov	r0, r3
 8004330:	f005 fed6 	bl	800a0e0 <memset>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f603 1314 	addw	r3, r3, #2324	@ 0x914
 800438a:	4618      	mov	r0, r3
 800438c:	f7fd ff7e 	bl	800228c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4618      	mov	r0, r3
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	0800b0c4 	.word	0x0800b0c4

080043a0 <HAL_UART_TxCpltCallback>:
ros::Publisher pub_outputControl("/arduino/topic_OutputControl", &wheel_output);  // Publisher dengan topik "float_data"
ros::Subscriber<krsbi2025::BallPositionBasedOnCamera> sub("BallPositionBasedOnCamera", &cam_data_callback);


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a07      	ldr	r2, [pc, #28]	@ (80043c8 <HAL_UART_TxCpltCallback+0x28>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d106      	bne.n	80043be <HAL_UART_TxCpltCallback+0x1e>
	{
		nh.getHardware()->flush();
 80043b0:	4806      	ldr	r0, [pc, #24]	@ (80043cc <HAL_UART_TxCpltCallback+0x2c>)
 80043b2:	f000 f8ed 	bl	8004590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80043b6:	4603      	mov	r3, r0
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7fe fadd 	bl	8002978 <_ZN13STM32Hardware5flushEv>
	}
}
 80043be:	bf00      	nop
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	20000c60 	.word	0x20000c60
 80043cc:	200001a8 	.word	0x200001a8

080043d0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a07      	ldr	r2, [pc, #28]	@ (80043f8 <HAL_UART_RxCpltCallback+0x28>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d106      	bne.n	80043ee <HAL_UART_RxCpltCallback+0x1e>
	{
		nh.getHardware()->reset_rbuf();
 80043e0:	4806      	ldr	r0, [pc, #24]	@ (80043fc <HAL_UART_RxCpltCallback+0x2c>)
 80043e2:	f000 f8d5 	bl	8004590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80043e6:	4603      	mov	r3, r0
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fe fa86 	bl	80028fa <_ZN13STM32Hardware10reset_rbufEv>
	}
}
 80043ee:	bf00      	nop
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	20000c60 	.word	0x20000c60
 80043fc:	200001a8 	.word	0x200001a8

08004400 <setup>:

void setup(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
	nh.initNode();  // Inisialisasi node ROS
 8004404:	4808      	ldr	r0, [pc, #32]	@ (8004428 <setup+0x28>)
 8004406:	f000 f8ce 	bl	80045a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.subscribe(sub);
 800440a:	4908      	ldr	r1, [pc, #32]	@ (800442c <setup+0x2c>)
 800440c:	4806      	ldr	r0, [pc, #24]	@ (8004428 <setup+0x28>)
 800440e:	f000 f8e7 	bl	80045e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
	nh.advertise(pub);  // Advertise topik
 8004412:	4907      	ldr	r1, [pc, #28]	@ (8004430 <setup+0x30>)
 8004414:	4804      	ldr	r0, [pc, #16]	@ (8004428 <setup+0x28>)
 8004416:	f000 f90d 	bl	8004634 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(pub_outputControl);
 800441a:	4906      	ldr	r1, [pc, #24]	@ (8004434 <setup+0x34>)
 800441c:	4802      	ldr	r0, [pc, #8]	@ (8004428 <setup+0x28>)
 800441e:	f000 f909 	bl	8004634 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8004422:	bf00      	nop
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	200001a8 	.word	0x200001a8
 800442c:	20000b30 	.word	0x20000b30
 8004430:	20000aec 	.word	0x20000aec
 8004434:	20000b1c 	.word	0x20000b1c

08004438 <loop>:

void loop(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
	float_msg.data = camera.distance;  // Mengisi pesan dengan nilai float
 800443c:	4b12      	ldr	r3, [pc, #72]	@ (8004488 <loop+0x50>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a12      	ldr	r2, [pc, #72]	@ (800448c <loop+0x54>)
 8004442:	6053      	str	r3, [r2, #4]
	wheel_output.left_wheel_ccw = roda.aCCW;
 8004444:	4b12      	ldr	r3, [pc, #72]	@ (8004490 <loop+0x58>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4a12      	ldr	r2, [pc, #72]	@ (8004494 <loop+0x5c>)
 800444a:	6093      	str	r3, [r2, #8]
	wheel_output.left_wheel_cw = roda.aCW;
 800444c:	4b10      	ldr	r3, [pc, #64]	@ (8004490 <loop+0x58>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a10      	ldr	r2, [pc, #64]	@ (8004494 <loop+0x5c>)
 8004452:	6053      	str	r3, [r2, #4]
	wheel_output.right_wheel_ccw = roda.bCCW;
 8004454:	4b0e      	ldr	r3, [pc, #56]	@ (8004490 <loop+0x58>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	4a0e      	ldr	r2, [pc, #56]	@ (8004494 <loop+0x5c>)
 800445a:	6113      	str	r3, [r2, #16]
	wheel_output.right_wheel_cw = roda.bCW;
 800445c:	4b0c      	ldr	r3, [pc, #48]	@ (8004490 <loop+0x58>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	4a0c      	ldr	r2, [pc, #48]	@ (8004494 <loop+0x5c>)
 8004462:	60d3      	str	r3, [r2, #12]
	wheel_output.bottom_wheel_ccw = roda.cCCW;
 8004464:	4b0a      	ldr	r3, [pc, #40]	@ (8004490 <loop+0x58>)
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	4a0a      	ldr	r2, [pc, #40]	@ (8004494 <loop+0x5c>)
 800446a:	6193      	str	r3, [r2, #24]
	wheel_output.bottom_wheel_cw = roda.cCW;
 800446c:	4b08      	ldr	r3, [pc, #32]	@ (8004490 <loop+0x58>)
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	4a08      	ldr	r2, [pc, #32]	@ (8004494 <loop+0x5c>)
 8004472:	6153      	str	r3, [r2, #20]
	pub_outputControl.publish(&wheel_output);  // Mengirim pesan ke ROS
 8004474:	4907      	ldr	r1, [pc, #28]	@ (8004494 <loop+0x5c>)
 8004476:	4808      	ldr	r0, [pc, #32]	@ (8004498 <loop+0x60>)
 8004478:	f7fe f9e6 	bl	8002848 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	nh.spinOnce();  // Memproses komunikasi ROS;
 800447c:	4807      	ldr	r0, [pc, #28]	@ (800449c <loop+0x64>)
 800447e:	f000 f908 	bl	8004692 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

}
 8004482:	bf00      	nop
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	20000190 	.word	0x20000190
 800448c:	20000ae4 	.word	0x20000ae4
 8004490:	2000016c 	.word	0x2000016c
 8004494:	20000b00 	.word	0x20000b00
 8004498:	20000b1c 	.word	0x20000b1c
 800449c:	200001a8 	.word	0x200001a8

080044a0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80044aa:	2300      	movs	r3, #0
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	e00c      	b.n	80044ca <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	fa22 f103 	lsr.w	r1, r2, r3
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4413      	add	r3, r2
 80044c0:	b2ca      	uxtb	r2, r1
 80044c2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	3301      	adds	r3, #1
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2b03      	cmp	r3, #3
 80044ce:	d9ef      	bls.n	80044b0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 80044d0:	bf00      	nop
 80044d2:	bf00      	nop
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr

080044dc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80044ec:	2300      	movs	r3, #0
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	e010      	b.n	8004514 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6839      	ldr	r1, [r7, #0]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	440a      	add	r2, r1
 80044fc:	7812      	ldrb	r2, [r2, #0]
 80044fe:	4611      	mov	r1, r2
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	00d2      	lsls	r2, r2, #3
 8004504:	fa01 f202 	lsl.w	r2, r1, r2
 8004508:	431a      	orrs	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	3301      	adds	r3, #1
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2b03      	cmp	r3, #3
 8004518:	d9eb      	bls.n	80044f2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 800451a:	bf00      	nop
 800451c:	bf00      	nop
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	bc80      	pop	{r7}
 8004524:	4770      	bx	lr
	...

08004528 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	4a04      	ldr	r2, [pc, #16]	@ (8004544 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	601a      	str	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4618      	mov	r0, r3
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	bc80      	pop	{r7}
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	0800b120 	.word	0x0800b120

08004548 <_ZN3ros10SubscriberIN9krsbi202525BallPositionBasedOnCameraEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
 8004554:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff ffe5 	bl	8004528 <_ZN3ros11Subscriber_C1Ev>
 800455e:	4a0b      	ldr	r2, [pc, #44]	@ (800458c <_ZN3ros10SubscriberIN9krsbi202525BallPositionBasedOnCameraEvEC1EPKcPFvRKS2_Ei+0x44>)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	3310      	adds	r3, #16
 8004568:	4618      	mov	r0, r3
 800456a:	f7fe fb4b 	bl	8002c04 <_ZN9krsbi202525BallPositionBasedOnCameraC1Ev>
    cb_(cb),
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	649a      	str	r2, [r3, #72]	@ 0x48
    endpoint_(endpoint)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	64da      	str	r2, [r3, #76]	@ 0x4c
  {
    topic_ = topic_name;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	609a      	str	r2, [r3, #8]
  };
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	0800b0ac 	.word	0x0800b0ac

08004590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3304      	adds	r3, #4
  }
 800459c:	4618      	mov	r0, r3
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bc80      	pop	{r7}
 80045a4:	4770      	bx	lr

080045a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b082      	sub	sp, #8
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	3304      	adds	r3, #4
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fe f996 	bl	80028e4 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
    bytes_ = 0;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
    index_ = 0;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
    topic_ = 0;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
  };
 80045d8:	bf00      	nop
 80045da:	3708      	adds	r7, #8
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:
    }
    return false;
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80045ea:	2300      	movs	r3, #0
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	e018      	b.n	8004622 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80045f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10d      	bne.n	800461c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x3c>
      {
        subscribers[i] = &s;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8004608:	6839      	ldr	r1, [r7, #0]
 800460a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	605a      	str	r2, [r3, #4]
        return true;
 8004618:	2301      	movs	r3, #1
 800461a:	e006      	b.n	800462a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	3301      	adds	r3, #1
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2b18      	cmp	r3, #24
 8004626:	dde3      	ble.n	80045f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 8004628:	2300      	movs	r3, #0
  }
 800462a:	4618      	mov	r0, r3
 800462c:	3714      	adds	r7, #20
 800462e:	46bd      	mov	sp, r7
 8004630:	bc80      	pop	{r7}
 8004632:	4770      	bx	lr

08004634 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800463e:	2300      	movs	r3, #0
 8004640:	60fb      	str	r3, [r7, #12]
 8004642:	e01d      	b.n	8004680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
      if (publishers[i] == 0) // empty slot
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d111      	bne.n	800467a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
        publishers[i] = &p;
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	60da      	str	r2, [r3, #12]
        return true;
 8004676:	2301      	movs	r3, #1
 8004678:	e006      	b.n	8004688 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	3301      	adds	r3, #1
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b18      	cmp	r3, #24
 8004684:	ddde      	ble.n	8004644 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
    return false;
 8004686:	2300      	movs	r3, #0
  }
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	bc80      	pop	{r7}
 8004690:	4770      	bx	lr

08004692 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8004692:	b580      	push	{r7, lr}
 8004694:	b084      	sub	sp, #16
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3304      	adds	r3, #4
 800469e:	4618      	mov	r0, r3
 80046a0:	f7fe fa0f 	bl	8002ac2 <_ZN13STM32Hardware4timeEv>
 80046a4:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f8d3 3908 	ldr.w	r3, [r3, #2312]	@ 0x908
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d903      	bls.n	80046c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
    if (mode_ != MODE_FIRST_FF)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d009      	beq.n	80046de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d903      	bls.n	80046de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
      if (spin_timeout_ > 0)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d014      	beq.n	8004712 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	3304      	adds	r3, #4
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7fe f9e8 	bl	8002ac2 <_ZN13STM32Hardware4timeEv>
 80046f2:	4602      	mov	r2, r0
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	1ad2      	subs	r2, r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 80046fe:	429a      	cmp	r2, r3
 8004700:	bf8c      	ite	hi
 8004702:	2301      	movhi	r3, #1
 8004704:	2300      	movls	r3, #0
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 800470c:	f06f 0301 	mvn.w	r3, #1
 8004710:	e194      	b.n	8004a3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	3304      	adds	r3, #4
 8004716:	4618      	mov	r0, r3
 8004718:	f7fe f900 	bl	800291c <_ZN13STM32Hardware4readEv>
 800471c:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2b00      	cmp	r3, #0
 8004722:	f2c0 8174 	blt.w	8004a0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	@ 0x8fc
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	441a      	add	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800473c:	2b07      	cmp	r3, #7
 800473e:	d11e      	bne.n	800477e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 8004746:	1c59      	adds	r1, r3, #1
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	f8c2 18f8 	str.w	r1, [r2, #2296]	@ 0x8f8
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	b2d1      	uxtb	r1, r2
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	4413      	add	r3, r2
 8004756:	460a      	mov	r2, r1
 8004758:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
        bytes_--;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8004762:	1e5a      	subs	r2, r3, #1
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1b4      	bne.n	80046de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2208      	movs	r2, #8
 8004778:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 800477c:	e7af      	b.n	80046de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8004784:	2b00      	cmp	r3, #0
 8004786:	d128      	bne.n	80047da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2bff      	cmp	r3, #255	@ 0xff
 800478c:	d10d      	bne.n	80047aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8004794:	1c5a      	adds	r2, r3, #1
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f103 0214 	add.w	r2, r3, #20
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 80047a8:	e799      	b.n	80046de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	3304      	adds	r3, #4
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fe f987 	bl	8002ac2 <_ZN13STM32Hardware4timeEv>
 80047b4:	4602      	mov	r2, r0
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047be:	4293      	cmp	r3, r2
 80047c0:	bf8c      	ite	hi
 80047c2:	2301      	movhi	r3, #1
 80047c4:	2300      	movls	r3, #0
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d088      	beq.n	80046de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
          return SPIN_TIMEOUT;
 80047d4:	f06f 0301 	mvn.w	r3, #1
 80047d8:	e130      	b.n	8004a3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d118      	bne.n	8004816 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2bfe      	cmp	r3, #254	@ 0xfe
 80047e8:	d107      	bne.n	80047fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 80047f8:	e771      	b.n	80046de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          if (configured_ == false)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8004808:	2b00      	cmp	r3, #0
 800480a:	f47f af68 	bne.w	80046de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f918 	bl	8004a44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8004814:	e763      	b.n	80046de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800481c:	2b02      	cmp	r3, #2
 800481e:	d113      	bne.n	8004848 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        index_ = 0;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
        mode_++;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8004836:	1c5a      	adds	r2, r3, #1
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 8004846:	e74a      	b.n	80046de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800484e:	2b03      	cmp	r3, #3
 8004850:	d110      	bne.n	8004874 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	@ 0x8f0
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	021b      	lsls	r3, r3, #8
 800485c:	441a      	add	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        mode_++;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800486a:	1c5a      	adds	r2, r3, #1
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8004872:	e734      	b.n	80046de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800487a:	2b04      	cmp	r3, #4
 800487c:	d116      	bne.n	80048ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 8004884:	425a      	negs	r2, r3
 8004886:	b2db      	uxtb	r3, r3
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	bf58      	it	pl
 800488c:	4253      	negpl	r3, r2
 800488e:	2bff      	cmp	r3, #255	@ 0xff
 8004890:	d107      	bne.n	80048a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 80048a0:	e71d      	b.n	80046de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 80048aa:	e718      	b.n	80046de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80048b2:	2b05      	cmp	r3, #5
 80048b4:	d10f      	bne.n	80048d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_++;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80048c4:	1c5a      	adds	r2, r3, #1
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 80048d4:	e703      	b.n	80046de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80048dc:	2b06      	cmp	r3, #6
 80048de:	d117      	bne.n	8004910 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	@ 0x8f4
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	021b      	lsls	r3, r3, #8
 80048ea:	441a      	add	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_ = MODE_MESSAGE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2207      	movs	r2, #7
 80048f6:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if (bytes_ == 0)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8004900:	2b00      	cmp	r3, #0
 8004902:	f47f aeec 	bne.w	80046de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2208      	movs	r2, #8
 800490a:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 800490e:	e6e6      	b.n	80046de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8004916:	2b08      	cmp	r3, #8
 8004918:	f47f aee1 	bne.w	80046de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if ((checksum_ % 256) == 255)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 800492a:	425a      	negs	r2, r3
 800492c:	b2db      	uxtb	r3, r3
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	bf58      	it	pl
 8004932:	4253      	negpl	r3, r2
 8004934:	2bff      	cmp	r3, #255	@ 0xff
 8004936:	f47f aed2 	bne.w	80046de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8004940:	2b00      	cmp	r3, #0
 8004942:	d110      	bne.n	8004966 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f87d 	bl	8004a44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f898 	bl	8004a80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
            last_sync_receive_time = c_time;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
            return SPIN_ERR;
 8004960:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004964:	e06a      	b.n	8004a3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 800496c:	2b0a      	cmp	r3, #10
 800496e:	d107      	bne.n	8004980 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8004976:	4619      	mov	r1, r3
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f961 	bl	8004c40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800497e:	e6ae      	b.n	80046de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8004986:	2b06      	cmp	r3, #6
 8004988:	d10e      	bne.n	80049a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f603 1214 	addw	r2, r3, #2324	@ 0x914
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8004996:	4619      	mov	r1, r3
 8004998:	4610      	mov	r0, r2
 800499a:	f7fd fdb6 	bl	800250a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 80049a6:	e69a      	b.n	80046de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 80049ae:	2b0b      	cmp	r3, #11
 80049b0:	d104      	bne.n	80049bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 80049ba:	e690      	b.n	80046de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 80049c2:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80049cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f43f ae84 	beq.w	80046de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 80049dc:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80049e6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 80049f0:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80049fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	f202 4224 	addw	r2, r2, #1060	@ 0x424
 8004a08:	4611      	mov	r1, r2
 8004a0a:	4798      	blx	r3
    while (true)
 8004a0c:	e667      	b.n	80046de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8004a0e:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00f      	beq.n	8004a3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d906      	bls.n	8004a3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f809 	bl	8004a44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
    return SPIN_OK;
 8004a3a:	2300      	movs	r3, #0
  }
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004a4c:	f107 030c 	add.w	r3, r7, #12
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7fd f8c5 	bl	8001be0 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f107 020c 	add.w	r2, r7, #12
 8004a60:	210a      	movs	r1, #10
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	4798      	blx	r3
    rt_time = hardware_.time();
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	3304      	adds	r3, #4
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fe f829 	bl	8002ac2 <_ZN13STM32Hardware4timeEv>
 8004a70:	4602      	mov	r2, r0
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
  }
 8004a78:	bf00      	nop
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8004a80:	b590      	push	{r4, r7, lr}
 8004a82:	b08b      	sub	sp, #44	@ 0x2c
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004a88:	f107 030c 	add.w	r3, r7, #12
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fd f991 	bl	8001db4 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004a92:	2300      	movs	r3, #0
 8004a94:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a96:	e062      	b.n	8004b5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d056      	beq.n	8004b58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aae:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac2:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad4:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4413      	add	r3, r2
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	6859      	ldr	r1, [r3, #4]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae4:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	3308      	adds	r3, #8
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4608      	mov	r0, r1
 8004af8:	4798      	blx	r3
 8004afa:	4603      	mov	r3, r0
 8004afc:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b02:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	6859      	ldr	r1, [r3, #4]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b12:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	330c      	adds	r3, #12
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4608      	mov	r0, r1
 8004b26:	4798      	blx	r3
 8004b28:	4603      	mov	r3, r0
 8004b2a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004b2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b30:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681c      	ldr	r4, [r3, #0]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4413      	add	r3, r2
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fd fe92 	bl	8002870 <_ZN3ros9Publisher15getEndpointTypeEv>
 8004b4c:	4601      	mov	r1, r0
 8004b4e:	f107 030c 	add.w	r3, r7, #12
 8004b52:	461a      	mov	r2, r3
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b60:	2b18      	cmp	r3, #24
 8004b62:	dd99      	ble.n	8004a98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004b64:	2300      	movs	r3, #0
 8004b66:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b68:	e05e      	b.n	8004c28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b6e:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8004b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d053      	beq.n	8004c22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b7e:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8004b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b90:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8004b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ba0:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8004ba4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bac:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8004bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3308      	adds	r3, #8
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4608      	mov	r0, r1
 8004bbc:	4798      	blx	r3
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bc6:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8004bca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bd2:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8004bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	330c      	adds	r3, #12
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4608      	mov	r0, r1
 8004be2:	4798      	blx	r3
 8004be4:	4603      	mov	r3, r0
 8004be6:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004be8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004bec:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681c      	ldr	r4, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bf8:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8004bfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c04:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8004c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	3304      	adds	r3, #4
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4608      	mov	r0, r1
 8004c14:	4798      	blx	r3
 8004c16:	4601      	mov	r1, r0
 8004c18:	f107 030c 	add.w	r3, r7, #12
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c24:	3301      	adds	r3, #1
 8004c26:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2a:	2b18      	cmp	r3, #24
 8004c2c:	dd9d      	ble.n	8004b6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
  }
 8004c36:	bf00      	nop
 8004c38:	372c      	adds	r7, #44	@ 0x2c
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd90      	pop	{r4, r7, pc}
	...

08004c40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004c4a:	f107 0308 	add.w	r3, r7, #8
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fc ffc6 	bl	8001be0 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3304      	adds	r3, #4
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fd ff32 	bl	8002ac2 <_ZN13STM32Hardware4timeEv>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004c6a:	f107 0308 	add.w	r3, r7, #8
 8004c6e:	6839      	ldr	r1, [r7, #0]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7fd f824 	bl	8001cbe <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	4915      	ldr	r1, [pc, #84]	@ (8004cd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004c7c:	fba1 1303 	umull	r1, r3, r1, r3
 8004c80:	099b      	lsrs	r3, r3, #6
 8004c82:	4413      	add	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004c86:	6939      	ldr	r1, [r7, #16]
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	4b11      	ldr	r3, [pc, #68]	@ (8004cd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004c8c:	fba3 0302 	umull	r0, r3, r3, r2
 8004c90:	099b      	lsrs	r3, r3, #6
 8004c92:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004c96:	fb00 f303 	mul.w	r3, r0, r3
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	4a0d      	ldr	r2, [pc, #52]	@ (8004cd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004c9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ca2:	440b      	add	r3, r1
 8004ca4:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004ca6:	f107 0308 	add.w	r3, r7, #8
 8004caa:	3304      	adds	r3, #4
 8004cac:	4619      	mov	r1, r3
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f8a6 	bl	8004e00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fd ff02 	bl	8002ac2 <_ZN13STM32Hardware4timeEv>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
  }
 8004cc6:	bf00      	nop
 8004cc8:	3718      	adds	r7, #24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	10624dd3 	.word	0x10624dd3
 8004cd4:	000f4240 	.word	0x000f4240

08004cd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b088      	sub	sp, #32
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	2b63      	cmp	r3, #99	@ 0x63
 8004ce8:	dd09      	ble.n	8004cfe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8004cf0:	f083 0301 	eor.w	r3, r3, #1
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	e079      	b.n	8004df2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	f202 6224 	addw	r2, r2, #1572	@ 0x624
 8004d0a:	3207      	adds	r2, #7
 8004d0c:	4611      	mov	r1, r2
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	4798      	blx	r3
 8004d12:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	22ff      	movs	r2, #255	@ 0xff
 8004d18:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624
    message_out[1] = PROTOCOL_VER;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	22fe      	movs	r2, #254	@ 0xfe
 8004d20:	f883 2625 	strb.w	r2, [r3, #1573]	@ 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f883 2626 	strb.w	r2, [r3, #1574]	@ 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	0a1b      	lsrs	r3, r3, #8
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f883 2627 	strb.w	r2, [r3, #1575]	@ 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f893 2626 	ldrb.w	r2, [r3, #1574]	@ 0x626
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f893 3627 	ldrb.w	r3, [r3, #1575]	@ 0x627
 8004d4a:	4413      	add	r3, r2
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	43db      	mvns	r3, r3
 8004d50:	b2da      	uxtb	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f883 2628 	strb.w	r2, [r3, #1576]	@ 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	b2da      	uxtb	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f883 2629 	strb.w	r2, [r3, #1577]	@ 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	b21b      	sxth	r3, r3
 8004d66:	121b      	asrs	r3, r3, #8
 8004d68:	b21b      	sxth	r3, r3
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f883 262a 	strb.w	r2, [r3, #1578]	@ 0x62a

    /* calculate checksum */
    int chk = 0;
 8004d72:	2300      	movs	r3, #0
 8004d74:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004d76:	2305      	movs	r3, #5
 8004d78:	61bb      	str	r3, [r7, #24]
 8004d7a:	e00c      	b.n	8004d96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	4413      	add	r3, r2
 8004d82:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	461a      	mov	r2, r3
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	3301      	adds	r3, #1
 8004d94:	61bb      	str	r3, [r7, #24]
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	3306      	adds	r3, #6
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	dded      	ble.n	8004d7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	3307      	adds	r3, #7
 8004da4:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	425a      	negs	r2, r3
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	b2d2      	uxtb	r2, r2
 8004dae:	bf58      	it	pl
 8004db0:	4253      	negpl	r3, r2
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	1c59      	adds	r1, r3, #1
 8004db8:	6179      	str	r1, [r7, #20]
 8004dba:	43d2      	mvns	r2, r2
 8004dbc:	b2d1      	uxtb	r1, r2
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	460a      	mov	r2, r1
 8004dc4:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624

    if (l <= OUTPUT_SIZE)
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dce:	dc0a      	bgt.n	8004de6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	1d18      	adds	r0, r3, #4
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	4619      	mov	r1, r3
 8004dde:	f7fd fe29 	bl	8002a34 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	e005      	b.n	8004df2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004de6:	4905      	ldr	r1, [pc, #20]	@ (8004dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 f849 	bl	8004e80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004dee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
  }
 8004df2:	4618      	mov	r0, r3
 8004df4:	3720      	adds	r7, #32
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	0800b004 	.word	0x0800b004

08004e00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fd fe57 	bl	8002ac2 <_ZN13STM32Hardware4timeEv>
 8004e14:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4915      	ldr	r1, [pc, #84]	@ (8004e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8004e1e:	fba1 1303 	umull	r1, r3, r1, r3
 8004e22:	099b      	lsrs	r3, r3, #6
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	1e5a      	subs	r2, r3, #1
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	6859      	ldr	r1, [r3, #4]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4b0f      	ldr	r3, [pc, #60]	@ (8004e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8004e36:	fba3 0302 	umull	r0, r3, r3, r2
 8004e3a:	099b      	lsrs	r3, r3, #6
 8004e3c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004e40:	fb00 f303 	mul.w	r3, r0, r3
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	4a0c      	ldr	r2, [pc, #48]	@ (8004e78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8004e48:	fb02 f303 	mul.w	r3, r2, r3
 8004e4c:	1aca      	subs	r2, r1, r3
 8004e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8004e50:	4413      	add	r3, r2
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	f8c2 341c 	str.w	r3, [r2, #1052]	@ 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f503 6283 	add.w	r2, r3, #1048	@ 0x418
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8004e64:	4619      	mov	r1, r3
 8004e66:	4610      	mov	r0, r2
 8004e68:	f7fc f86c 	bl	8000f44 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004e6c:	bf00      	nop
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	10624dd3 	.word	0x10624dd3
 8004e78:	000f4240 	.word	0x000f4240
 8004e7c:	3b9aca00 	.word	0x3b9aca00

08004e80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	2103      	movs	r1, #3
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f804 	bl	8004e9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004e94:	bf00      	nop
 8004e96:	3708      	adds	r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b088      	sub	sp, #32
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	607a      	str	r2, [r7, #4]
 8004ea8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004eaa:	f107 0314 	add.w	r3, r7, #20
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7fd f940 	bl	8002134 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004eb4:	7afb      	ldrb	r3, [r7, #11]
 8004eb6:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f107 0214 	add.w	r2, r7, #20
 8004ec6:	2107      	movs	r1, #7
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	4798      	blx	r3
  }
 8004ecc:	bf00      	nop
 8004ece:	3720      	adds	r7, #32
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <_Z41__static_initialization_and_destruction_0ii>:
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d11f      	bne.n	8004f24 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d11a      	bne.n	8004f24 <_Z41__static_initialization_and_destruction_0ii+0x50>
ros::NodeHandle nh;
 8004eee:	480f      	ldr	r0, [pc, #60]	@ (8004f2c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004ef0:	f7ff f9de 	bl	80042b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Float32 float_msg;  // Tipe pesan ROS untuk data float
 8004ef4:	480e      	ldr	r0, [pc, #56]	@ (8004f30 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004ef6:	f7fd fdef 	bl	8002ad8 <_ZN8std_msgs7Float32C1Ev>
ros::Publisher pub("float_data", &float_msg);
 8004efa:	2300      	movs	r3, #0
 8004efc:	4a0c      	ldr	r2, [pc, #48]	@ (8004f30 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004efe:	490d      	ldr	r1, [pc, #52]	@ (8004f34 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004f00:	480d      	ldr	r0, [pc, #52]	@ (8004f38 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004f02:	f7fd fc8b 	bl	800281c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
krsbi2025::Wheel wheel_output;
 8004f06:	480d      	ldr	r0, [pc, #52]	@ (8004f3c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8004f08:	f7ff f886 	bl	8004018 <_ZN9krsbi20255WheelC1Ev>
ros::Publisher pub_outputControl("/arduino/topic_OutputControl", &wheel_output);  // Publisher dengan topik "float_data"
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	4a0b      	ldr	r2, [pc, #44]	@ (8004f3c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8004f10:	490b      	ldr	r1, [pc, #44]	@ (8004f40 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004f12:	480c      	ldr	r0, [pc, #48]	@ (8004f44 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004f14:	f7fd fc82 	bl	800281c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<krsbi2025::BallPositionBasedOnCamera> sub("BallPositionBasedOnCamera", &cam_data_callback);
 8004f18:	2301      	movs	r3, #1
 8004f1a:	4a0b      	ldr	r2, [pc, #44]	@ (8004f48 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004f1c:	490b      	ldr	r1, [pc, #44]	@ (8004f4c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004f1e:	480c      	ldr	r0, [pc, #48]	@ (8004f50 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004f20:	f7ff fb12 	bl	8004548 <_ZN3ros10SubscriberIN9krsbi202525BallPositionBasedOnCameraEvEC1EPKcPFvRKS2_Ei>
}
 8004f24:	bf00      	nop
 8004f26:	3708      	adds	r7, #8
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	200001a8 	.word	0x200001a8
 8004f30:	20000ae4 	.word	0x20000ae4
 8004f34:	0800b040 	.word	0x0800b040
 8004f38:	20000aec 	.word	0x20000aec
 8004f3c:	20000b00 	.word	0x20000b00
 8004f40:	0800b04c 	.word	0x0800b04c
 8004f44:	20000b1c 	.word	0x20000b1c
 8004f48:	08004205 	.word	0x08004205
 8004f4c:	0800b06c 	.word	0x0800b06c
 8004f50:	20000b30 	.word	0x20000b30

08004f54 <_ZN3ros10SubscriberIN9krsbi202525BallPositionBasedOnCameraEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	3310      	adds	r3, #16
 8004f62:	6839      	ldr	r1, [r7, #0]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7fe f960 	bl	800322a <_ZN9krsbi202525BallPositionBasedOnCamera11deserializeEPh>
    this->cb_(msg);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	3210      	adds	r2, #16
 8004f72:	4610      	mov	r0, r2
 8004f74:	4798      	blx	r3
  }
 8004f76:	bf00      	nop
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <_ZN3ros10SubscriberIN9krsbi202525BallPositionBasedOnCameraEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8004f7e:	b480      	push	{r7}
 8004f80:	b083      	sub	sp, #12
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
  }
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bc80      	pop	{r7}
 8004f92:	4770      	bx	lr

08004f94 <_ZN3ros10SubscriberIN9krsbi202525BallPositionBasedOnCameraEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3310      	adds	r3, #16
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7ff f821 	bl	8003fe8 <_ZN9krsbi202525BallPositionBasedOnCamera7getTypeEv>
 8004fa6:	4603      	mov	r3, r0
  }
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <_ZN3ros10SubscriberIN9krsbi202525BallPositionBasedOnCameraEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	3310      	adds	r3, #16
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7ff f81f 	bl	8004000 <_ZN9krsbi202525BallPositionBasedOnCamera6getMD5Ev>
 8004fc2:	4603      	mov	r3, r0
  }
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
    return configured_;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
  };
 8004fda:	4618      	mov	r0, r3
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bc80      	pop	{r7}
 8004fe2:	4770      	bx	lr

08004fe4 <_GLOBAL__sub_I_bno>:
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004fec:	2001      	movs	r0, #1
 8004fee:	f7ff ff71 	bl	8004ed4 <_Z41__static_initialization_and_destruction_0ii>
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <remap>:

#include "motor.h"
#include <math.h>


void remap(float *force, float fromMinMax[2], float toMinMax[2]){
 8004ff4:	b590      	push	{r4, r7, lr}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
	*force = ((*force - fromMinMax[0]) / (fromMinMax[1] - fromMinMax[0])) * (toMinMax[1] - toMinMax[0]) + toMinMax[0];
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4619      	mov	r1, r3
 800500a:	4610      	mov	r0, r2
 800500c:	f7fb fcca 	bl	80009a4 <__aeabi_fsub>
 8005010:	4603      	mov	r3, r0
 8005012:	461c      	mov	r4, r3
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	3304      	adds	r3, #4
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4619      	mov	r1, r3
 8005020:	4610      	mov	r0, r2
 8005022:	f7fb fcbf 	bl	80009a4 <__aeabi_fsub>
 8005026:	4603      	mov	r3, r0
 8005028:	4619      	mov	r1, r3
 800502a:	4620      	mov	r0, r4
 800502c:	f7fb fe78 	bl	8000d20 <__aeabi_fdiv>
 8005030:	4603      	mov	r3, r0
 8005032:	461c      	mov	r4, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3304      	adds	r3, #4
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4619      	mov	r1, r3
 8005040:	4610      	mov	r0, r2
 8005042:	f7fb fcaf 	bl	80009a4 <__aeabi_fsub>
 8005046:	4603      	mov	r3, r0
 8005048:	4619      	mov	r1, r3
 800504a:	4620      	mov	r0, r4
 800504c:	f7fb fdb4 	bl	8000bb8 <__aeabi_fmul>
 8005050:	4603      	mov	r3, r0
 8005052:	461a      	mov	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4619      	mov	r1, r3
 800505a:	4610      	mov	r0, r2
 800505c:	f7fb fca4 	bl	80009a8 <__addsf3>
 8005060:	4603      	mov	r3, r0
 8005062:	461a      	mov	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	601a      	str	r2, [r3, #0]
}
 8005068:	bf00      	nop
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	bd90      	pop	{r4, r7, pc}

08005070 <motor_calculation>:
//float error_jarak_calculation(float setPoint_jarak, float data_jarak){
//	return fabs(data_jarak - setPoint_jarak);
//}

	float force1, force2, force3, test;
void motor_calculation(float ax, float ay, float w) {
 8005070:	b5b0      	push	{r4, r5, r7, lr}
 8005072:	b09c      	sub	sp, #112	@ 0x70
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]

	// Menghitung force untuk setiap motor
	roda.force1 = ((-0.5773509529248335 * ax) + (-0.33333368867682667 * ay) + (0.33333368867682667 * w));
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f7fb f9d3 	bl	8000428 <__aeabi_f2d>
 8005082:	a3b5      	add	r3, pc, #724	@ (adr r3, 8005358 <motor_calculation+0x2e8>)
 8005084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005088:	f7fb fa26 	bl	80004d8 <__aeabi_dmul>
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	4614      	mov	r4, r2
 8005092:	461d      	mov	r5, r3
 8005094:	68b8      	ldr	r0, [r7, #8]
 8005096:	f7fb f9c7 	bl	8000428 <__aeabi_f2d>
 800509a:	a3b1      	add	r3, pc, #708	@ (adr r3, 8005360 <motor_calculation+0x2f0>)
 800509c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a0:	f7fb fa1a 	bl	80004d8 <__aeabi_dmul>
 80050a4:	4602      	mov	r2, r0
 80050a6:	460b      	mov	r3, r1
 80050a8:	4620      	mov	r0, r4
 80050aa:	4629      	mov	r1, r5
 80050ac:	f7fb f85e 	bl	800016c <__adddf3>
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	4614      	mov	r4, r2
 80050b6:	461d      	mov	r5, r3
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7fb f9b5 	bl	8000428 <__aeabi_f2d>
 80050be:	a3aa      	add	r3, pc, #680	@ (adr r3, 8005368 <motor_calculation+0x2f8>)
 80050c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c4:	f7fb fa08 	bl	80004d8 <__aeabi_dmul>
 80050c8:	4602      	mov	r2, r0
 80050ca:	460b      	mov	r3, r1
 80050cc:	4620      	mov	r0, r4
 80050ce:	4629      	mov	r1, r5
 80050d0:	f7fb f84c 	bl	800016c <__adddf3>
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	4610      	mov	r0, r2
 80050da:	4619      	mov	r1, r3
 80050dc:	f7fb fc0e 	bl	80008fc <__aeabi_d2f>
 80050e0:	4603      	mov	r3, r0
 80050e2:	4aad      	ldr	r2, [pc, #692]	@ (8005398 <motor_calculation+0x328>)
 80050e4:	6193      	str	r3, [r2, #24]
	roda.force2 = ((0.5773509529248335 * ax) + (-0.3333329779898402 * ay) + (0.3333329779898402 * w));
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f7fb f99e 	bl	8000428 <__aeabi_f2d>
 80050ec:	a3a0      	add	r3, pc, #640	@ (adr r3, 8005370 <motor_calculation+0x300>)
 80050ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f2:	f7fb f9f1 	bl	80004d8 <__aeabi_dmul>
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	4614      	mov	r4, r2
 80050fc:	461d      	mov	r5, r3
 80050fe:	68b8      	ldr	r0, [r7, #8]
 8005100:	f7fb f992 	bl	8000428 <__aeabi_f2d>
 8005104:	a39c      	add	r3, pc, #624	@ (adr r3, 8005378 <motor_calculation+0x308>)
 8005106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510a:	f7fb f9e5 	bl	80004d8 <__aeabi_dmul>
 800510e:	4602      	mov	r2, r0
 8005110:	460b      	mov	r3, r1
 8005112:	4620      	mov	r0, r4
 8005114:	4629      	mov	r1, r5
 8005116:	f7fb f829 	bl	800016c <__adddf3>
 800511a:	4602      	mov	r2, r0
 800511c:	460b      	mov	r3, r1
 800511e:	4614      	mov	r4, r2
 8005120:	461d      	mov	r5, r3
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7fb f980 	bl	8000428 <__aeabi_f2d>
 8005128:	a395      	add	r3, pc, #596	@ (adr r3, 8005380 <motor_calculation+0x310>)
 800512a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512e:	f7fb f9d3 	bl	80004d8 <__aeabi_dmul>
 8005132:	4602      	mov	r2, r0
 8005134:	460b      	mov	r3, r1
 8005136:	4620      	mov	r0, r4
 8005138:	4629      	mov	r1, r5
 800513a:	f7fb f817 	bl	800016c <__adddf3>
 800513e:	4602      	mov	r2, r0
 8005140:	460b      	mov	r3, r1
 8005142:	4610      	mov	r0, r2
 8005144:	4619      	mov	r1, r3
 8005146:	f7fb fbd9 	bl	80008fc <__aeabi_d2f>
 800514a:	4603      	mov	r3, r0
 800514c:	4a92      	ldr	r2, [pc, #584]	@ (8005398 <motor_calculation+0x328>)
 800514e:	61d3      	str	r3, [r2, #28]
	roda.force3 = ((0 * ax) + (0.6666666666666669 * ay) + (0.33333333333333326 * w));
 8005150:	f04f 0100 	mov.w	r1, #0
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f7fb fd2f 	bl	8000bb8 <__aeabi_fmul>
 800515a:	4603      	mov	r3, r0
 800515c:	4618      	mov	r0, r3
 800515e:	f7fb f963 	bl	8000428 <__aeabi_f2d>
 8005162:	4604      	mov	r4, r0
 8005164:	460d      	mov	r5, r1
 8005166:	68b8      	ldr	r0, [r7, #8]
 8005168:	f7fb f95e 	bl	8000428 <__aeabi_f2d>
 800516c:	a386      	add	r3, pc, #536	@ (adr r3, 8005388 <motor_calculation+0x318>)
 800516e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005172:	f7fb f9b1 	bl	80004d8 <__aeabi_dmul>
 8005176:	4602      	mov	r2, r0
 8005178:	460b      	mov	r3, r1
 800517a:	4620      	mov	r0, r4
 800517c:	4629      	mov	r1, r5
 800517e:	f7fa fff5 	bl	800016c <__adddf3>
 8005182:	4602      	mov	r2, r0
 8005184:	460b      	mov	r3, r1
 8005186:	4614      	mov	r4, r2
 8005188:	461d      	mov	r5, r3
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7fb f94c 	bl	8000428 <__aeabi_f2d>
 8005190:	a37f      	add	r3, pc, #508	@ (adr r3, 8005390 <motor_calculation+0x320>)
 8005192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005196:	f7fb f99f 	bl	80004d8 <__aeabi_dmul>
 800519a:	4602      	mov	r2, r0
 800519c:	460b      	mov	r3, r1
 800519e:	4620      	mov	r0, r4
 80051a0:	4629      	mov	r1, r5
 80051a2:	f7fa ffe3 	bl	800016c <__adddf3>
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	4610      	mov	r0, r2
 80051ac:	4619      	mov	r1, r3
 80051ae:	f7fb fba5 	bl	80008fc <__aeabi_d2f>
 80051b2:	4603      	mov	r3, r0
 80051b4:	4a78      	ldr	r2, [pc, #480]	@ (8005398 <motor_calculation+0x328>)
 80051b6:	6213      	str	r3, [r2, #32]

	// Remap jika force1 >= 0
	if (roda.force1 >= 0) {
 80051b8:	4b77      	ldr	r3, [pc, #476]	@ (8005398 <motor_calculation+0x328>)
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	f04f 0100 	mov.w	r1, #0
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7fb feab 	bl	8000f1c <__aeabi_fcmpge>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d01a      	beq.n	8005202 <motor_calculation+0x192>
		float fromRange[2] = {0, 0.91};
 80051cc:	f04f 0300 	mov.w	r3, #0
 80051d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051d2:	4b72      	ldr	r3, [pc, #456]	@ (800539c <motor_calculation+0x32c>)
 80051d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
		float toRange[2] = {0, 255};
 80051d6:	f04f 0300 	mov.w	r3, #0
 80051da:	663b      	str	r3, [r7, #96]	@ 0x60
 80051dc:	4b70      	ldr	r3, [pc, #448]	@ (80053a0 <motor_calculation+0x330>)
 80051de:	667b      	str	r3, [r7, #100]	@ 0x64
		remap(&roda.force1, fromRange, toRange);
 80051e0:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 80051e4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80051e8:	4619      	mov	r1, r3
 80051ea:	486e      	ldr	r0, [pc, #440]	@ (80053a4 <motor_calculation+0x334>)
 80051ec:	f7ff ff02 	bl	8004ff4 <remap>
		roda.aCW = roda.force1;
 80051f0:	4b69      	ldr	r3, [pc, #420]	@ (8005398 <motor_calculation+0x328>)
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	4a68      	ldr	r2, [pc, #416]	@ (8005398 <motor_calculation+0x328>)
 80051f6:	6013      	str	r3, [r2, #0]
		roda.aCCW = 0;
 80051f8:	4b67      	ldr	r3, [pc, #412]	@ (8005398 <motor_calculation+0x328>)
 80051fa:	f04f 0200 	mov.w	r2, #0
 80051fe:	605a      	str	r2, [r3, #4]
 8005200:	e029      	b.n	8005256 <motor_calculation+0x1e6>
	}
	else if(roda.force1 < 0){
 8005202:	4b65      	ldr	r3, [pc, #404]	@ (8005398 <motor_calculation+0x328>)
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	f04f 0100 	mov.w	r1, #0
 800520a:	4618      	mov	r0, r3
 800520c:	f7fb fe72 	bl	8000ef4 <__aeabi_fcmplt>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d01f      	beq.n	8005256 <motor_calculation+0x1e6>
		roda.force1 = fabs(roda.force1);
 8005216:	4b60      	ldr	r3, [pc, #384]	@ (8005398 <motor_calculation+0x328>)
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800521e:	4a5e      	ldr	r2, [pc, #376]	@ (8005398 <motor_calculation+0x328>)
 8005220:	6193      	str	r3, [r2, #24]
		float fromRange[2] = {0, 0.91};
 8005222:	f04f 0300 	mov.w	r3, #0
 8005226:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005228:	4b5c      	ldr	r3, [pc, #368]	@ (800539c <motor_calculation+0x32c>)
 800522a:	65fb      	str	r3, [r7, #92]	@ 0x5c
		float toRange[2] = {0, 255};
 800522c:	f04f 0300 	mov.w	r3, #0
 8005230:	653b      	str	r3, [r7, #80]	@ 0x50
 8005232:	4b5b      	ldr	r3, [pc, #364]	@ (80053a0 <motor_calculation+0x330>)
 8005234:	657b      	str	r3, [r7, #84]	@ 0x54
		remap(&roda.force1, fromRange, toRange);
 8005236:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800523a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800523e:	4619      	mov	r1, r3
 8005240:	4858      	ldr	r0, [pc, #352]	@ (80053a4 <motor_calculation+0x334>)
 8005242:	f7ff fed7 	bl	8004ff4 <remap>
		roda.aCW = 0;
 8005246:	4b54      	ldr	r3, [pc, #336]	@ (8005398 <motor_calculation+0x328>)
 8005248:	f04f 0200 	mov.w	r2, #0
 800524c:	601a      	str	r2, [r3, #0]
		roda.aCCW = roda.force1;
 800524e:	4b52      	ldr	r3, [pc, #328]	@ (8005398 <motor_calculation+0x328>)
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	4a51      	ldr	r2, [pc, #324]	@ (8005398 <motor_calculation+0x328>)
 8005254:	6053      	str	r3, [r2, #4]

	}
	if (roda.force2 >= 0) {
 8005256:	4b50      	ldr	r3, [pc, #320]	@ (8005398 <motor_calculation+0x328>)
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	f04f 0100 	mov.w	r1, #0
 800525e:	4618      	mov	r0, r3
 8005260:	f7fb fe5c 	bl	8000f1c <__aeabi_fcmpge>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d01a      	beq.n	80052a0 <motor_calculation+0x230>
		float fromRange[2] = {0, 0.91};
 800526a:	f04f 0300 	mov.w	r3, #0
 800526e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005270:	4b4a      	ldr	r3, [pc, #296]	@ (800539c <motor_calculation+0x32c>)
 8005272:	64fb      	str	r3, [r7, #76]	@ 0x4c
		float toRange[2] = {0, 255};
 8005274:	f04f 0300 	mov.w	r3, #0
 8005278:	643b      	str	r3, [r7, #64]	@ 0x40
 800527a:	4b49      	ldr	r3, [pc, #292]	@ (80053a0 <motor_calculation+0x330>)
 800527c:	647b      	str	r3, [r7, #68]	@ 0x44
		remap(&roda.force2, fromRange, toRange);
 800527e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8005282:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005286:	4619      	mov	r1, r3
 8005288:	4847      	ldr	r0, [pc, #284]	@ (80053a8 <motor_calculation+0x338>)
 800528a:	f7ff feb3 	bl	8004ff4 <remap>
		roda.bCW = roda.force2;
 800528e:	4b42      	ldr	r3, [pc, #264]	@ (8005398 <motor_calculation+0x328>)
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	4a41      	ldr	r2, [pc, #260]	@ (8005398 <motor_calculation+0x328>)
 8005294:	6093      	str	r3, [r2, #8]
		roda.bCCW = 0;
 8005296:	4b40      	ldr	r3, [pc, #256]	@ (8005398 <motor_calculation+0x328>)
 8005298:	f04f 0200 	mov.w	r2, #0
 800529c:	60da      	str	r2, [r3, #12]
 800529e:	e029      	b.n	80052f4 <motor_calculation+0x284>
	}
	else if(roda.force2 < 0){
 80052a0:	4b3d      	ldr	r3, [pc, #244]	@ (8005398 <motor_calculation+0x328>)
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	f04f 0100 	mov.w	r1, #0
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7fb fe23 	bl	8000ef4 <__aeabi_fcmplt>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d01f      	beq.n	80052f4 <motor_calculation+0x284>
		roda.force2 = fabs(roda.force2);
 80052b4:	4b38      	ldr	r3, [pc, #224]	@ (8005398 <motor_calculation+0x328>)
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80052bc:	4a36      	ldr	r2, [pc, #216]	@ (8005398 <motor_calculation+0x328>)
 80052be:	61d3      	str	r3, [r2, #28]
		float fromRange[2] = {0, 0.91};
 80052c0:	f04f 0300 	mov.w	r3, #0
 80052c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052c6:	4b35      	ldr	r3, [pc, #212]	@ (800539c <motor_calculation+0x32c>)
 80052c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
		float toRange[2] = {0, 255};
 80052ca:	f04f 0300 	mov.w	r3, #0
 80052ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80052d0:	4b33      	ldr	r3, [pc, #204]	@ (80053a0 <motor_calculation+0x330>)
 80052d2:	637b      	str	r3, [r7, #52]	@ 0x34
		remap(&roda.force2, fromRange, toRange);
 80052d4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80052d8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80052dc:	4619      	mov	r1, r3
 80052de:	4832      	ldr	r0, [pc, #200]	@ (80053a8 <motor_calculation+0x338>)
 80052e0:	f7ff fe88 	bl	8004ff4 <remap>
		roda.bCW = 0;
 80052e4:	4b2c      	ldr	r3, [pc, #176]	@ (8005398 <motor_calculation+0x328>)
 80052e6:	f04f 0200 	mov.w	r2, #0
 80052ea:	609a      	str	r2, [r3, #8]
		roda.bCCW = roda.force2;
 80052ec:	4b2a      	ldr	r3, [pc, #168]	@ (8005398 <motor_calculation+0x328>)
 80052ee:	69db      	ldr	r3, [r3, #28]
 80052f0:	4a29      	ldr	r2, [pc, #164]	@ (8005398 <motor_calculation+0x328>)
 80052f2:	60d3      	str	r3, [r2, #12]

	}if (roda.force3 >= 0) {
 80052f4:	4b28      	ldr	r3, [pc, #160]	@ (8005398 <motor_calculation+0x328>)
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	f04f 0100 	mov.w	r1, #0
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7fb fe0d 	bl	8000f1c <__aeabi_fcmpge>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d01a      	beq.n	800533e <motor_calculation+0x2ce>
		float fromRange[2] = {0, 0.91};
 8005308:	f04f 0300 	mov.w	r3, #0
 800530c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800530e:	4b23      	ldr	r3, [pc, #140]	@ (800539c <motor_calculation+0x32c>)
 8005310:	62fb      	str	r3, [r7, #44]	@ 0x2c
		float toRange[2] = {0, 255};
 8005312:	f04f 0300 	mov.w	r3, #0
 8005316:	623b      	str	r3, [r7, #32]
 8005318:	4b21      	ldr	r3, [pc, #132]	@ (80053a0 <motor_calculation+0x330>)
 800531a:	627b      	str	r3, [r7, #36]	@ 0x24
		remap(&roda.force3, fromRange, toRange);
 800531c:	f107 0220 	add.w	r2, r7, #32
 8005320:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005324:	4619      	mov	r1, r3
 8005326:	4821      	ldr	r0, [pc, #132]	@ (80053ac <motor_calculation+0x33c>)
 8005328:	f7ff fe64 	bl	8004ff4 <remap>
		roda.cCW = roda.force3;
 800532c:	4b1a      	ldr	r3, [pc, #104]	@ (8005398 <motor_calculation+0x328>)
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	4a19      	ldr	r2, [pc, #100]	@ (8005398 <motor_calculation+0x328>)
 8005332:	6113      	str	r3, [r2, #16]
		roda.cCCW = 0;
 8005334:	4b18      	ldr	r3, [pc, #96]	@ (8005398 <motor_calculation+0x328>)
 8005336:	f04f 0200 	mov.w	r2, #0
 800533a:	615a      	str	r2, [r3, #20]

	}


	// Lakukan hal yang sama untuk force2 dan force3 jika diperlukan
}
 800533c:	e058      	b.n	80053f0 <motor_calculation+0x380>
	else if(roda.force3 < 0){
 800533e:	4b16      	ldr	r3, [pc, #88]	@ (8005398 <motor_calculation+0x328>)
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	f04f 0100 	mov.w	r1, #0
 8005346:	4618      	mov	r0, r3
 8005348:	f7fb fdd4 	bl	8000ef4 <__aeabi_fcmplt>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d12e      	bne.n	80053b0 <motor_calculation+0x340>
}
 8005352:	e04d      	b.n	80053f0 <motor_calculation+0x380>
 8005354:	f3af 8000 	nop.w
 8005358:	b4a40d12 	.word	0xb4a40d12
 800535c:	bfe279a8 	.word	0xbfe279a8
 8005360:	d2e168b6 	.word	0xd2e168b6
 8005364:	bfd55556 	.word	0xbfd55556
 8005368:	d2e168b6 	.word	0xd2e168b6
 800536c:	3fd55556 	.word	0x3fd55556
 8005370:	b4a40d12 	.word	0xb4a40d12
 8005374:	3fe279a8 	.word	0x3fe279a8
 8005378:	d7c941f8 	.word	0xd7c941f8
 800537c:	bfd55553 	.word	0xbfd55553
 8005380:	d7c941f8 	.word	0xd7c941f8
 8005384:	3fd55553 	.word	0x3fd55553
 8005388:	55555557 	.word	0x55555557
 800538c:	3fe55555 	.word	0x3fe55555
 8005390:	55555554 	.word	0x55555554
 8005394:	3fd55555 	.word	0x3fd55555
 8005398:	2000016c 	.word	0x2000016c
 800539c:	3f68f5c3 	.word	0x3f68f5c3
 80053a0:	437f0000 	.word	0x437f0000
 80053a4:	20000184 	.word	0x20000184
 80053a8:	20000188 	.word	0x20000188
 80053ac:	2000018c 	.word	0x2000018c
		roda.force3 = fabs(roda.force3);
 80053b0:	4b11      	ldr	r3, [pc, #68]	@ (80053f8 <motor_calculation+0x388>)
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80053b8:	4a0f      	ldr	r2, [pc, #60]	@ (80053f8 <motor_calculation+0x388>)
 80053ba:	6213      	str	r3, [r2, #32]
		float fromRange[2] = {0, 0.91};
 80053bc:	f04f 0300 	mov.w	r3, #0
 80053c0:	61bb      	str	r3, [r7, #24]
 80053c2:	4b0e      	ldr	r3, [pc, #56]	@ (80053fc <motor_calculation+0x38c>)
 80053c4:	61fb      	str	r3, [r7, #28]
		float toRange[2] = {0, 255};
 80053c6:	f04f 0300 	mov.w	r3, #0
 80053ca:	613b      	str	r3, [r7, #16]
 80053cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005400 <motor_calculation+0x390>)
 80053ce:	617b      	str	r3, [r7, #20]
		remap(&roda.force3, fromRange, toRange);
 80053d0:	f107 0210 	add.w	r2, r7, #16
 80053d4:	f107 0318 	add.w	r3, r7, #24
 80053d8:	4619      	mov	r1, r3
 80053da:	480a      	ldr	r0, [pc, #40]	@ (8005404 <motor_calculation+0x394>)
 80053dc:	f7ff fe0a 	bl	8004ff4 <remap>
		roda.cCW = 0;
 80053e0:	4b05      	ldr	r3, [pc, #20]	@ (80053f8 <motor_calculation+0x388>)
 80053e2:	f04f 0200 	mov.w	r2, #0
 80053e6:	611a      	str	r2, [r3, #16]
		roda.cCCW = roda.force3;
 80053e8:	4b03      	ldr	r3, [pc, #12]	@ (80053f8 <motor_calculation+0x388>)
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	4a02      	ldr	r2, [pc, #8]	@ (80053f8 <motor_calculation+0x388>)
 80053ee:	6153      	str	r3, [r2, #20]
}
 80053f0:	bf00      	nop
 80053f2:	3770      	adds	r7, #112	@ 0x70
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bdb0      	pop	{r4, r5, r7, pc}
 80053f8:	2000016c 	.word	0x2000016c
 80053fc:	3f68f5c3 	.word	0x3f68f5c3
 8005400:	437f0000 	.word	0x437f0000
 8005404:	2000018c 	.word	0x2000018c

08005408 <PID_Init>:


#include "pid.h"
#include <math.h>
float error = 0, derivative;
void PID_Init(PID_Controller *pid, float kp, float ki, float kd, float min_output, float max_output) {
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
 8005414:	603b      	str	r3, [r7, #0]
    pid->kp = kp;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	601a      	str	r2, [r3, #0]
    pid->ki = ki;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	605a      	str	r2, [r3, #4]
    pid->kd = kd;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	609a      	str	r2, [r3, #8]
    pid->setpoint = 0.0;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f04f 0200 	mov.w	r2, #0
 800542e:	60da      	str	r2, [r3, #12]
    pid->integral = 0.0;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f04f 0200 	mov.w	r2, #0
 8005436:	611a      	str	r2, [r3, #16]
    pid->previous_error = 0.0;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f04f 0200 	mov.w	r2, #0
 800543e:	615a      	str	r2, [r3, #20]
    pid->output = 0.0;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f04f 0200 	mov.w	r2, #0
 8005446:	619a      	str	r2, [r3, #24]
    pid->max_output = max_output;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	69fa      	ldr	r2, [r7, #28]
 800544c:	621a      	str	r2, [r3, #32]
    pid->min_output = min_output;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	61da      	str	r2, [r3, #28]
    pid->error = 0.0;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f04f 0200 	mov.w	r2, #0
 800545a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800545c:	bf00      	nop
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	bc80      	pop	{r7}
 8005464:	4770      	bx	lr
	...

08005468 <PID_Update>:

float PID_Update(PID_Controller *pid, float current_value, float error) {
 8005468:	b590      	push	{r4, r7, lr}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
    pid->error = error;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	625a      	str	r2, [r3, #36]	@ 0x24
    pid->integral += pid->error;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	691a      	ldr	r2, [r3, #16]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005482:	4619      	mov	r1, r3
 8005484:	4610      	mov	r0, r2
 8005486:	f7fb fa8f 	bl	80009a8 <__addsf3>
 800548a:	4603      	mov	r3, r0
 800548c:	461a      	mov	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	611a      	str	r2, [r3, #16]
    derivative = (pid->error - pid->previous_error);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	4619      	mov	r1, r3
 800549c:	4610      	mov	r0, r2
 800549e:	f7fb fa81 	bl	80009a4 <__aeabi_fsub>
 80054a2:	4603      	mov	r3, r0
 80054a4:	461a      	mov	r2, r3
 80054a6:	4b3a      	ldr	r3, [pc, #232]	@ (8005590 <PID_Update+0x128>)
 80054a8:	601a      	str	r2, [r3, #0]

    pid->output = (pid->kp * pid->error) + (pid->ki * pid->integral) + (pid->kd * derivative);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b2:	4619      	mov	r1, r3
 80054b4:	4610      	mov	r0, r2
 80054b6:	f7fb fb7f 	bl	8000bb8 <__aeabi_fmul>
 80054ba:	4603      	mov	r3, r0
 80054bc:	461c      	mov	r4, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	4619      	mov	r1, r3
 80054c8:	4610      	mov	r0, r2
 80054ca:	f7fb fb75 	bl	8000bb8 <__aeabi_fmul>
 80054ce:	4603      	mov	r3, r0
 80054d0:	4619      	mov	r1, r3
 80054d2:	4620      	mov	r0, r4
 80054d4:	f7fb fa68 	bl	80009a8 <__addsf3>
 80054d8:	4603      	mov	r3, r0
 80054da:	461c      	mov	r4, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	4a2b      	ldr	r2, [pc, #172]	@ (8005590 <PID_Update+0x128>)
 80054e2:	6812      	ldr	r2, [r2, #0]
 80054e4:	4611      	mov	r1, r2
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7fb fb66 	bl	8000bb8 <__aeabi_fmul>
 80054ec:	4603      	mov	r3, r0
 80054ee:	4619      	mov	r1, r3
 80054f0:	4620      	mov	r0, r4
 80054f2:	f7fb fa59 	bl	80009a8 <__addsf3>
 80054f6:	4603      	mov	r3, r0
 80054f8:	461a      	mov	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	619a      	str	r2, [r3, #24]

    if(pid->integral > pid->max_output){
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	691a      	ldr	r2, [r3, #16]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	4619      	mov	r1, r3
 8005508:	4610      	mov	r0, r2
 800550a:	f7fb fd11 	bl	8000f30 <__aeabi_fcmpgt>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d004      	beq.n	800551e <PID_Update+0xb6>
    	pid->integral = pid->max_output;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6a1a      	ldr	r2, [r3, #32]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	611a      	str	r2, [r3, #16]
 800551c:	e00e      	b.n	800553c <PID_Update+0xd4>
    }else if (pid->output < pid->min_output) {
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	699a      	ldr	r2, [r3, #24]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	4619      	mov	r1, r3
 8005528:	4610      	mov	r0, r2
 800552a:	f7fb fce3 	bl	8000ef4 <__aeabi_fcmplt>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d003      	beq.n	800553c <PID_Update+0xd4>
        pid->integral = pid->min_output;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	69da      	ldr	r2, [r3, #28]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	611a      	str	r2, [r3, #16]
    }

    if (pid->output > pid->max_output) {
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	699a      	ldr	r2, [r3, #24]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	4619      	mov	r1, r3
 8005546:	4610      	mov	r0, r2
 8005548:	f7fb fcf2 	bl	8000f30 <__aeabi_fcmpgt>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d004      	beq.n	800555c <PID_Update+0xf4>
        pid->output = pid->max_output;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6a1a      	ldr	r2, [r3, #32]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	619a      	str	r2, [r3, #24]
 800555a:	e00e      	b.n	800557a <PID_Update+0x112>
    } else if (pid->output < pid->min_output) {
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	699a      	ldr	r2, [r3, #24]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	69db      	ldr	r3, [r3, #28]
 8005564:	4619      	mov	r1, r3
 8005566:	4610      	mov	r0, r2
 8005568:	f7fb fcc4 	bl	8000ef4 <__aeabi_fcmplt>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <PID_Update+0x112>
        pid->output = pid->min_output;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	69da      	ldr	r2, [r3, #28]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	619a      	str	r2, [r3, #24]
    }

    pid->previous_error = pid->error;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	615a      	str	r2, [r3, #20]

    return pid->output;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	699b      	ldr	r3, [r3, #24]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	bd90      	pop	{r4, r7, pc}
 800558e:	bf00      	nop
 8005590:	20000b80 	.word	0x20000b80

08005594 <error_sudut_calculation>:

float error_sudut, error_jarak;
float error_sudut_calculation(float setPoint_sudut, float data_sudut){
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
	if(setPoint_sudut - data_sudut > 180) data_sudut += 360;
 800559e:	6839      	ldr	r1, [r7, #0]
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7fb f9ff 	bl	80009a4 <__aeabi_fsub>
 80055a6:	4603      	mov	r3, r0
 80055a8:	4914      	ldr	r1, [pc, #80]	@ (80055fc <error_sudut_calculation+0x68>)
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7fb fcc0 	bl	8000f30 <__aeabi_fcmpgt>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d006      	beq.n	80055c4 <error_sudut_calculation+0x30>
 80055b6:	4912      	ldr	r1, [pc, #72]	@ (8005600 <error_sudut_calculation+0x6c>)
 80055b8:	6838      	ldr	r0, [r7, #0]
 80055ba:	f7fb f9f5 	bl	80009a8 <__addsf3>
 80055be:	4603      	mov	r3, r0
 80055c0:	603b      	str	r3, [r7, #0]
 80055c2:	e011      	b.n	80055e8 <error_sudut_calculation+0x54>
	else if ((data_sudut - setPoint_sudut > 180)) data_sudut -= 360;
 80055c4:	6879      	ldr	r1, [r7, #4]
 80055c6:	6838      	ldr	r0, [r7, #0]
 80055c8:	f7fb f9ec 	bl	80009a4 <__aeabi_fsub>
 80055cc:	4603      	mov	r3, r0
 80055ce:	490b      	ldr	r1, [pc, #44]	@ (80055fc <error_sudut_calculation+0x68>)
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7fb fcad 	bl	8000f30 <__aeabi_fcmpgt>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d005      	beq.n	80055e8 <error_sudut_calculation+0x54>
 80055dc:	4908      	ldr	r1, [pc, #32]	@ (8005600 <error_sudut_calculation+0x6c>)
 80055de:	6838      	ldr	r0, [r7, #0]
 80055e0:	f7fb f9e0 	bl	80009a4 <__aeabi_fsub>
 80055e4:	4603      	mov	r3, r0
 80055e6:	603b      	str	r3, [r7, #0]
	return setPoint_sudut - data_sudut;
 80055e8:	6839      	ldr	r1, [r7, #0]
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7fb f9da 	bl	80009a4 <__aeabi_fsub>
 80055f0:	4603      	mov	r3, r0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	43340000 	.word	0x43340000
 8005600:	43b40000 	.word	0x43b40000

08005604 <error_jarak_calculation>:

float error_jarak_calculation(float setPoint_jarak, float data_jarak){
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
	return fabs(data_jarak - setPoint_jarak);
 800560e:	6879      	ldr	r1, [r7, #4]
 8005610:	6838      	ldr	r0, [r7, #0]
 8005612:	f7fb f9c7 	bl	80009a4 <__aeabi_fsub>
 8005616:	4603      	mov	r3, r0
 8005618:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
}
 800561c:	4618      	mov	r0, r3
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800562a:	4b15      	ldr	r3, [pc, #84]	@ (8005680 <HAL_MspInit+0x5c>)
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	4a14      	ldr	r2, [pc, #80]	@ (8005680 <HAL_MspInit+0x5c>)
 8005630:	f043 0301 	orr.w	r3, r3, #1
 8005634:	6193      	str	r3, [r2, #24]
 8005636:	4b12      	ldr	r3, [pc, #72]	@ (8005680 <HAL_MspInit+0x5c>)
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	60bb      	str	r3, [r7, #8]
 8005640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005642:	4b0f      	ldr	r3, [pc, #60]	@ (8005680 <HAL_MspInit+0x5c>)
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	4a0e      	ldr	r2, [pc, #56]	@ (8005680 <HAL_MspInit+0x5c>)
 8005648:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800564c:	61d3      	str	r3, [r2, #28]
 800564e:	4b0c      	ldr	r3, [pc, #48]	@ (8005680 <HAL_MspInit+0x5c>)
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005656:	607b      	str	r3, [r7, #4]
 8005658:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800565a:	4b0a      	ldr	r3, [pc, #40]	@ (8005684 <HAL_MspInit+0x60>)
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800566e:	60fb      	str	r3, [r7, #12]
 8005670:	4a04      	ldr	r2, [pc, #16]	@ (8005684 <HAL_MspInit+0x60>)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005676:	bf00      	nop
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	bc80      	pop	{r7}
 800567e:	4770      	bx	lr
 8005680:	40021000 	.word	0x40021000
 8005684:	40010000 	.word	0x40010000

08005688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005688:	b480      	push	{r7}
 800568a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800568c:	bf00      	nop
 800568e:	e7fd      	b.n	800568c <NMI_Handler+0x4>

08005690 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005690:	b480      	push	{r7}
 8005692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005694:	bf00      	nop
 8005696:	e7fd      	b.n	8005694 <HardFault_Handler+0x4>

08005698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005698:	b480      	push	{r7}
 800569a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800569c:	bf00      	nop
 800569e:	e7fd      	b.n	800569c <MemManage_Handler+0x4>

080056a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80056a0:	b480      	push	{r7}
 80056a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80056a4:	bf00      	nop
 80056a6:	e7fd      	b.n	80056a4 <BusFault_Handler+0x4>

080056a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80056a8:	b480      	push	{r7}
 80056aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80056ac:	bf00      	nop
 80056ae:	e7fd      	b.n	80056ac <UsageFault_Handler+0x4>

080056b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80056b4:	bf00      	nop
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bc80      	pop	{r7}
 80056ba:	4770      	bx	lr

080056bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80056c0:	bf00      	nop
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bc80      	pop	{r7}
 80056c6:	4770      	bx	lr

080056c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80056c8:	b480      	push	{r7}
 80056ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80056cc:	bf00      	nop
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bc80      	pop	{r7}
 80056d2:	4770      	bx	lr

080056d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80056d8:	f000 fbca 	bl	8005e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80056dc:	bf00      	nop
 80056de:	bd80      	pop	{r7, pc}

080056e0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80056e4:	4802      	ldr	r0, [pc, #8]	@ (80056f0 <DMA1_Channel6_IRQHandler+0x10>)
 80056e6:	f000 fe7f 	bl	80063e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80056ea:	bf00      	nop
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	20000ca8 	.word	0x20000ca8

080056f4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80056f8:	4802      	ldr	r0, [pc, #8]	@ (8005704 <DMA1_Channel7_IRQHandler+0x10>)
 80056fa:	f000 fe75 	bl	80063e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80056fe:	bf00      	nop
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	20000cec 	.word	0x20000cec

08005708 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800570c:	4802      	ldr	r0, [pc, #8]	@ (8005718 <TIM1_BRK_IRQHandler+0x10>)
 800570e:	f002 ff51 	bl	80085b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8005712:	bf00      	nop
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	20000b88 	.word	0x20000b88

0800571c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005720:	4802      	ldr	r0, [pc, #8]	@ (800572c <TIM1_UP_IRQHandler+0x10>)
 8005722:	f002 ff47 	bl	80085b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8005726:	bf00      	nop
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	20000b88 	.word	0x20000b88

08005730 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005734:	4802      	ldr	r0, [pc, #8]	@ (8005740 <TIM1_TRG_COM_IRQHandler+0x10>)
 8005736:	f002 ff3d 	bl	80085b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800573a:	bf00      	nop
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	20000b88 	.word	0x20000b88

08005744 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005748:	4802      	ldr	r0, [pc, #8]	@ (8005754 <TIM1_CC_IRQHandler+0x10>)
 800574a:	f002 ff33 	bl	80085b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800574e:	bf00      	nop
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	20000b88 	.word	0x20000b88

08005758 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800575c:	4802      	ldr	r0, [pc, #8]	@ (8005768 <USART2_IRQHandler+0x10>)
 800575e:	f003 fb83 	bl	8008e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005762:	bf00      	nop
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	20000c60 	.word	0x20000c60

0800576c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005778:	2300      	movs	r3, #0
 800577a:	617b      	str	r3, [r7, #20]
 800577c:	e00a      	b.n	8005794 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800577e:	f3af 8000 	nop.w
 8005782:	4601      	mov	r1, r0
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	60ba      	str	r2, [r7, #8]
 800578a:	b2ca      	uxtb	r2, r1
 800578c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	3301      	adds	r3, #1
 8005792:	617b      	str	r3, [r7, #20]
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	429a      	cmp	r2, r3
 800579a:	dbf0      	blt.n	800577e <_read+0x12>
  }

  return len;
 800579c:	687b      	ldr	r3, [r7, #4]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3718      	adds	r7, #24
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b086      	sub	sp, #24
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	60f8      	str	r0, [r7, #12]
 80057ae:	60b9      	str	r1, [r7, #8]
 80057b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057b2:	2300      	movs	r3, #0
 80057b4:	617b      	str	r3, [r7, #20]
 80057b6:	e009      	b.n	80057cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	60ba      	str	r2, [r7, #8]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	4618      	mov	r0, r3
 80057c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	3301      	adds	r3, #1
 80057ca:	617b      	str	r3, [r7, #20]
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	dbf1      	blt.n	80057b8 <_write+0x12>
  }
  return len;
 80057d4:	687b      	ldr	r3, [r7, #4]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <_close>:

int _close(int file)
{
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80057e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bc80      	pop	{r7}
 80057f2:	4770      	bx	lr

080057f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005804:	605a      	str	r2, [r3, #4]
  return 0;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	bc80      	pop	{r7}
 8005810:	4770      	bx	lr

08005812 <_isatty>:

int _isatty(int file)
{
 8005812:	b480      	push	{r7}
 8005814:	b083      	sub	sp, #12
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800581a:	2301      	movs	r3, #1
}
 800581c:	4618      	mov	r0, r3
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	bc80      	pop	{r7}
 8005824:	4770      	bx	lr

08005826 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005826:	b480      	push	{r7}
 8005828:	b085      	sub	sp, #20
 800582a:	af00      	add	r7, sp, #0
 800582c:	60f8      	str	r0, [r7, #12]
 800582e:	60b9      	str	r1, [r7, #8]
 8005830:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	bc80      	pop	{r7}
 800583c:	4770      	bx	lr
	...

08005840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005848:	4a14      	ldr	r2, [pc, #80]	@ (800589c <_sbrk+0x5c>)
 800584a:	4b15      	ldr	r3, [pc, #84]	@ (80058a0 <_sbrk+0x60>)
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005854:	4b13      	ldr	r3, [pc, #76]	@ (80058a4 <_sbrk+0x64>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d102      	bne.n	8005862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800585c:	4b11      	ldr	r3, [pc, #68]	@ (80058a4 <_sbrk+0x64>)
 800585e:	4a12      	ldr	r2, [pc, #72]	@ (80058a8 <_sbrk+0x68>)
 8005860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005862:	4b10      	ldr	r3, [pc, #64]	@ (80058a4 <_sbrk+0x64>)
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4413      	add	r3, r2
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	429a      	cmp	r2, r3
 800586e:	d207      	bcs.n	8005880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005870:	f004 fc84 	bl	800a17c <__errno>
 8005874:	4603      	mov	r3, r0
 8005876:	220c      	movs	r2, #12
 8005878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800587a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800587e:	e009      	b.n	8005894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005880:	4b08      	ldr	r3, [pc, #32]	@ (80058a4 <_sbrk+0x64>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005886:	4b07      	ldr	r3, [pc, #28]	@ (80058a4 <_sbrk+0x64>)
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4413      	add	r3, r2
 800588e:	4a05      	ldr	r2, [pc, #20]	@ (80058a4 <_sbrk+0x64>)
 8005890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005892:	68fb      	ldr	r3, [r7, #12]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3718      	adds	r7, #24
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	20005000 	.word	0x20005000
 80058a0:	00000400 	.word	0x00000400
 80058a4:	20000b84 	.word	0x20000b84
 80058a8:	20000e80 	.word	0x20000e80

080058ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80058ac:	b480      	push	{r7}
 80058ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80058b0:	bf00      	nop
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bc80      	pop	{r7}
 80058b6:	4770      	bx	lr

080058b8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80058be:	f107 0308 	add.w	r3, r7, #8
 80058c2:	2200      	movs	r2, #0
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	605a      	str	r2, [r3, #4]
 80058c8:	609a      	str	r2, [r3, #8]
 80058ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058cc:	463b      	mov	r3, r7
 80058ce:	2200      	movs	r2, #0
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80058d4:	4b1e      	ldr	r3, [pc, #120]	@ (8005950 <MX_TIM1_Init+0x98>)
 80058d6:	4a1f      	ldr	r2, [pc, #124]	@ (8005954 <MX_TIM1_Init+0x9c>)
 80058d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80058da:	4b1d      	ldr	r3, [pc, #116]	@ (8005950 <MX_TIM1_Init+0x98>)
 80058dc:	2247      	movs	r2, #71	@ 0x47
 80058de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005950 <MX_TIM1_Init+0x98>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80058e6:	4b1a      	ldr	r3, [pc, #104]	@ (8005950 <MX_TIM1_Init+0x98>)
 80058e8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80058ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058ee:	4b18      	ldr	r3, [pc, #96]	@ (8005950 <MX_TIM1_Init+0x98>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80058f4:	4b16      	ldr	r3, [pc, #88]	@ (8005950 <MX_TIM1_Init+0x98>)
 80058f6:	2200      	movs	r2, #0
 80058f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058fa:	4b15      	ldr	r3, [pc, #84]	@ (8005950 <MX_TIM1_Init+0x98>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005900:	4813      	ldr	r0, [pc, #76]	@ (8005950 <MX_TIM1_Init+0x98>)
 8005902:	f002 fc85 	bl	8008210 <HAL_TIM_Base_Init>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800590c:	f7fc f80c 	bl	8001928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005910:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005914:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005916:	f107 0308 	add.w	r3, r7, #8
 800591a:	4619      	mov	r1, r3
 800591c:	480c      	ldr	r0, [pc, #48]	@ (8005950 <MX_TIM1_Init+0x98>)
 800591e:	f002 ff39 	bl	8008794 <HAL_TIM_ConfigClockSource>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8005928:	f7fb fffe 	bl	8001928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800592c:	2300      	movs	r3, #0
 800592e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005930:	2300      	movs	r3, #0
 8005932:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005934:	463b      	mov	r3, r7
 8005936:	4619      	mov	r1, r3
 8005938:	4805      	ldr	r0, [pc, #20]	@ (8005950 <MX_TIM1_Init+0x98>)
 800593a:	f003 f93f 	bl	8008bbc <HAL_TIMEx_MasterConfigSynchronization>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8005944:	f7fb fff0 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8005948:	bf00      	nop
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	20000b88 	.word	0x20000b88
 8005954:	40012c00 	.word	0x40012c00

08005958 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b08c      	sub	sp, #48	@ 0x30
 800595c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800595e:	f107 030c 	add.w	r3, r7, #12
 8005962:	2224      	movs	r2, #36	@ 0x24
 8005964:	2100      	movs	r1, #0
 8005966:	4618      	mov	r0, r3
 8005968:	f004 fbba 	bl	800a0e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800596c:	1d3b      	adds	r3, r7, #4
 800596e:	2200      	movs	r2, #0
 8005970:	601a      	str	r2, [r3, #0]
 8005972:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005974:	4b21      	ldr	r3, [pc, #132]	@ (80059fc <MX_TIM2_Init+0xa4>)
 8005976:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800597a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800597c:	4b1f      	ldr	r3, [pc, #124]	@ (80059fc <MX_TIM2_Init+0xa4>)
 800597e:	2200      	movs	r2, #0
 8005980:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005982:	4b1e      	ldr	r3, [pc, #120]	@ (80059fc <MX_TIM2_Init+0xa4>)
 8005984:	2200      	movs	r2, #0
 8005986:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8005988:	4b1c      	ldr	r3, [pc, #112]	@ (80059fc <MX_TIM2_Init+0xa4>)
 800598a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800598e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005990:	4b1a      	ldr	r3, [pc, #104]	@ (80059fc <MX_TIM2_Init+0xa4>)
 8005992:	2200      	movs	r2, #0
 8005994:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005996:	4b19      	ldr	r3, [pc, #100]	@ (80059fc <MX_TIM2_Init+0xa4>)
 8005998:	2200      	movs	r2, #0
 800599a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800599c:	2301      	movs	r3, #1
 800599e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80059a0:	2300      	movs	r3, #0
 80059a2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80059a4:	2301      	movs	r3, #1
 80059a6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80059a8:	2300      	movs	r3, #0
 80059aa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80059ac:	2300      	movs	r3, #0
 80059ae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80059b0:	2300      	movs	r3, #0
 80059b2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80059b4:	2301      	movs	r3, #1
 80059b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80059b8:	2300      	movs	r3, #0
 80059ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80059bc:	2300      	movs	r3, #0
 80059be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80059c0:	f107 030c 	add.w	r3, r7, #12
 80059c4:	4619      	mov	r1, r3
 80059c6:	480d      	ldr	r0, [pc, #52]	@ (80059fc <MX_TIM2_Init+0xa4>)
 80059c8:	f002 fcc4 	bl	8008354 <HAL_TIM_Encoder_Init>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80059d2:	f7fb ffa9 	bl	8001928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059d6:	2300      	movs	r3, #0
 80059d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059da:	2300      	movs	r3, #0
 80059dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80059de:	1d3b      	adds	r3, r7, #4
 80059e0:	4619      	mov	r1, r3
 80059e2:	4806      	ldr	r0, [pc, #24]	@ (80059fc <MX_TIM2_Init+0xa4>)
 80059e4:	f003 f8ea 	bl	8008bbc <HAL_TIMEx_MasterConfigSynchronization>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80059ee:	f7fb ff9b 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80059f2:	bf00      	nop
 80059f4:	3730      	adds	r7, #48	@ 0x30
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	20000bd0 	.word	0x20000bd0

08005a00 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b08c      	sub	sp, #48	@ 0x30
 8005a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005a06:	f107 030c 	add.w	r3, r7, #12
 8005a0a:	2224      	movs	r2, #36	@ 0x24
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f004 fb66 	bl	800a0e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a14:	1d3b      	adds	r3, r7, #4
 8005a16:	2200      	movs	r2, #0
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005a1c:	4b20      	ldr	r3, [pc, #128]	@ (8005aa0 <MX_TIM3_Init+0xa0>)
 8005a1e:	4a21      	ldr	r2, [pc, #132]	@ (8005aa4 <MX_TIM3_Init+0xa4>)
 8005a20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005a22:	4b1f      	ldr	r3, [pc, #124]	@ (8005aa0 <MX_TIM3_Init+0xa0>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a28:	4b1d      	ldr	r3, [pc, #116]	@ (8005aa0 <MX_TIM3_Init+0xa0>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8005aa0 <MX_TIM3_Init+0xa0>)
 8005a30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005a34:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a36:	4b1a      	ldr	r3, [pc, #104]	@ (8005aa0 <MX_TIM3_Init+0xa0>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a3c:	4b18      	ldr	r3, [pc, #96]	@ (8005aa0 <MX_TIM3_Init+0xa0>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005a42:	2301      	movs	r3, #1
 8005a44:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005a46:	2300      	movs	r3, #0
 8005a48:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005a52:	2300      	movs	r3, #0
 8005a54:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005a56:	2300      	movs	r3, #0
 8005a58:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005a62:	2300      	movs	r3, #0
 8005a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8005a66:	f107 030c 	add.w	r3, r7, #12
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	480c      	ldr	r0, [pc, #48]	@ (8005aa0 <MX_TIM3_Init+0xa0>)
 8005a6e:	f002 fc71 	bl	8008354 <HAL_TIM_Encoder_Init>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8005a78:	f7fb ff56 	bl	8001928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a80:	2300      	movs	r3, #0
 8005a82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005a84:	1d3b      	adds	r3, r7, #4
 8005a86:	4619      	mov	r1, r3
 8005a88:	4805      	ldr	r0, [pc, #20]	@ (8005aa0 <MX_TIM3_Init+0xa0>)
 8005a8a:	f003 f897 	bl	8008bbc <HAL_TIMEx_MasterConfigSynchronization>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d001      	beq.n	8005a98 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8005a94:	f7fb ff48 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005a98:	bf00      	nop
 8005a9a:	3730      	adds	r7, #48	@ 0x30
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	20000c18 	.word	0x20000c18
 8005aa4:	40000400 	.word	0x40000400

08005aa8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a19      	ldr	r2, [pc, #100]	@ (8005b1c <HAL_TIM_Base_MspInit+0x74>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d12b      	bne.n	8005b12 <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005aba:	4b19      	ldr	r3, [pc, #100]	@ (8005b20 <HAL_TIM_Base_MspInit+0x78>)
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	4a18      	ldr	r2, [pc, #96]	@ (8005b20 <HAL_TIM_Base_MspInit+0x78>)
 8005ac0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005ac4:	6193      	str	r3, [r2, #24]
 8005ac6:	4b16      	ldr	r3, [pc, #88]	@ (8005b20 <HAL_TIM_Base_MspInit+0x78>)
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ace:	60fb      	str	r3, [r7, #12]
 8005ad0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	2018      	movs	r0, #24
 8005ad8:	f000 fae1 	bl	800609e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8005adc:	2018      	movs	r0, #24
 8005ade:	f000 fafa 	bl	80060d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	2019      	movs	r0, #25
 8005ae8:	f000 fad9 	bl	800609e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8005aec:	2019      	movs	r0, #25
 8005aee:	f000 faf2 	bl	80060d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8005af2:	2200      	movs	r2, #0
 8005af4:	2100      	movs	r1, #0
 8005af6:	201a      	movs	r0, #26
 8005af8:	f000 fad1 	bl	800609e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8005afc:	201a      	movs	r0, #26
 8005afe:	f000 faea 	bl	80060d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8005b02:	2200      	movs	r2, #0
 8005b04:	2100      	movs	r1, #0
 8005b06:	201b      	movs	r0, #27
 8005b08:	f000 fac9 	bl	800609e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8005b0c:	201b      	movs	r0, #27
 8005b0e:	f000 fae2 	bl	80060d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8005b12:	bf00      	nop
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	40012c00 	.word	0x40012c00
 8005b20:	40021000 	.word	0x40021000

08005b24 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b08a      	sub	sp, #40	@ 0x28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b2c:	f107 0318 	add.w	r3, r7, #24
 8005b30:	2200      	movs	r2, #0
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	605a      	str	r2, [r3, #4]
 8005b36:	609a      	str	r2, [r3, #8]
 8005b38:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b42:	d124      	bne.n	8005b8e <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005b44:	4b28      	ldr	r3, [pc, #160]	@ (8005be8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	4a27      	ldr	r2, [pc, #156]	@ (8005be8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8005b4a:	f043 0301 	orr.w	r3, r3, #1
 8005b4e:	61d3      	str	r3, [r2, #28]
 8005b50:	4b25      	ldr	r3, [pc, #148]	@ (8005be8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8005b52:	69db      	ldr	r3, [r3, #28]
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	617b      	str	r3, [r7, #20]
 8005b5a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b5c:	4b22      	ldr	r3, [pc, #136]	@ (8005be8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	4a21      	ldr	r2, [pc, #132]	@ (8005be8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8005b62:	f043 0304 	orr.w	r3, r3, #4
 8005b66:	6193      	str	r3, [r2, #24]
 8005b68:	4b1f      	ldr	r3, [pc, #124]	@ (8005be8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	f003 0304 	and.w	r3, r3, #4
 8005b70:	613b      	str	r3, [r7, #16]
 8005b72:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005b74:	2303      	movs	r3, #3
 8005b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b80:	f107 0318 	add.w	r3, r7, #24
 8005b84:	4619      	mov	r1, r3
 8005b86:	4819      	ldr	r0, [pc, #100]	@ (8005bec <HAL_TIM_Encoder_MspInit+0xc8>)
 8005b88:	f000 fd62 	bl	8006650 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005b8c:	e028      	b.n	8005be0 <HAL_TIM_Encoder_MspInit+0xbc>
  else if(tim_encoderHandle->Instance==TIM3)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a17      	ldr	r2, [pc, #92]	@ (8005bf0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d123      	bne.n	8005be0 <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005b98:	4b13      	ldr	r3, [pc, #76]	@ (8005be8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8005b9a:	69db      	ldr	r3, [r3, #28]
 8005b9c:	4a12      	ldr	r2, [pc, #72]	@ (8005be8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8005b9e:	f043 0302 	orr.w	r3, r3, #2
 8005ba2:	61d3      	str	r3, [r2, #28]
 8005ba4:	4b10      	ldr	r3, [pc, #64]	@ (8005be8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	f003 0302 	and.w	r3, r3, #2
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8005be8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	4a0c      	ldr	r2, [pc, #48]	@ (8005be8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8005bb6:	f043 0304 	orr.w	r3, r3, #4
 8005bba:	6193      	str	r3, [r2, #24]
 8005bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8005be8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	f003 0304 	and.w	r3, r3, #4
 8005bc4:	60bb      	str	r3, [r7, #8]
 8005bc6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005bc8:	23c0      	movs	r3, #192	@ 0xc0
 8005bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bd4:	f107 0318 	add.w	r3, r7, #24
 8005bd8:	4619      	mov	r1, r3
 8005bda:	4804      	ldr	r0, [pc, #16]	@ (8005bec <HAL_TIM_Encoder_MspInit+0xc8>)
 8005bdc:	f000 fd38 	bl	8006650 <HAL_GPIO_Init>
}
 8005be0:	bf00      	nop
 8005be2:	3728      	adds	r7, #40	@ 0x28
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	40021000 	.word	0x40021000
 8005bec:	40010800 	.word	0x40010800
 8005bf0:	40000400 	.word	0x40000400

08005bf4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005bf8:	4b11      	ldr	r3, [pc, #68]	@ (8005c40 <MX_USART2_UART_Init+0x4c>)
 8005bfa:	4a12      	ldr	r2, [pc, #72]	@ (8005c44 <MX_USART2_UART_Init+0x50>)
 8005bfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8005bfe:	4b10      	ldr	r3, [pc, #64]	@ (8005c40 <MX_USART2_UART_Init+0x4c>)
 8005c00:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8005c04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005c06:	4b0e      	ldr	r3, [pc, #56]	@ (8005c40 <MX_USART2_UART_Init+0x4c>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005c40 <MX_USART2_UART_Init+0x4c>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005c12:	4b0b      	ldr	r3, [pc, #44]	@ (8005c40 <MX_USART2_UART_Init+0x4c>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005c18:	4b09      	ldr	r3, [pc, #36]	@ (8005c40 <MX_USART2_UART_Init+0x4c>)
 8005c1a:	220c      	movs	r2, #12
 8005c1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c1e:	4b08      	ldr	r3, [pc, #32]	@ (8005c40 <MX_USART2_UART_Init+0x4c>)
 8005c20:	2200      	movs	r2, #0
 8005c22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c24:	4b06      	ldr	r3, [pc, #24]	@ (8005c40 <MX_USART2_UART_Init+0x4c>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005c2a:	4805      	ldr	r0, [pc, #20]	@ (8005c40 <MX_USART2_UART_Init+0x4c>)
 8005c2c:	f003 f836 	bl	8008c9c <HAL_UART_Init>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005c36:	f7fb fe77 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005c3a:	bf00      	nop
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	20000c60 	.word	0x20000c60
 8005c44:	40004400 	.word	0x40004400

08005c48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b088      	sub	sp, #32
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c50:	f107 0310 	add.w	r3, r7, #16
 8005c54:	2200      	movs	r2, #0
 8005c56:	601a      	str	r2, [r3, #0]
 8005c58:	605a      	str	r2, [r3, #4]
 8005c5a:	609a      	str	r2, [r3, #8]
 8005c5c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a46      	ldr	r2, [pc, #280]	@ (8005d7c <HAL_UART_MspInit+0x134>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	f040 8084 	bne.w	8005d72 <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005c6a:	4b45      	ldr	r3, [pc, #276]	@ (8005d80 <HAL_UART_MspInit+0x138>)
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	4a44      	ldr	r2, [pc, #272]	@ (8005d80 <HAL_UART_MspInit+0x138>)
 8005c70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c74:	61d3      	str	r3, [r2, #28]
 8005c76:	4b42      	ldr	r3, [pc, #264]	@ (8005d80 <HAL_UART_MspInit+0x138>)
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c7e:	60fb      	str	r3, [r7, #12]
 8005c80:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c82:	4b3f      	ldr	r3, [pc, #252]	@ (8005d80 <HAL_UART_MspInit+0x138>)
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	4a3e      	ldr	r2, [pc, #248]	@ (8005d80 <HAL_UART_MspInit+0x138>)
 8005c88:	f043 0304 	orr.w	r3, r3, #4
 8005c8c:	6193      	str	r3, [r2, #24]
 8005c8e:	4b3c      	ldr	r3, [pc, #240]	@ (8005d80 <HAL_UART_MspInit+0x138>)
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	f003 0304 	and.w	r3, r3, #4
 8005c96:	60bb      	str	r3, [r7, #8]
 8005c98:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005c9a:	2304      	movs	r3, #4
 8005c9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ca6:	f107 0310 	add.w	r3, r7, #16
 8005caa:	4619      	mov	r1, r3
 8005cac:	4835      	ldr	r0, [pc, #212]	@ (8005d84 <HAL_UART_MspInit+0x13c>)
 8005cae:	f000 fccf 	bl	8006650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005cb2:	2308      	movs	r3, #8
 8005cb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cbe:	f107 0310 	add.w	r3, r7, #16
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	482f      	ldr	r0, [pc, #188]	@ (8005d84 <HAL_UART_MspInit+0x13c>)
 8005cc6:	f000 fcc3 	bl	8006650 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8005cca:	4b2f      	ldr	r3, [pc, #188]	@ (8005d88 <HAL_UART_MspInit+0x140>)
 8005ccc:	4a2f      	ldr	r2, [pc, #188]	@ (8005d8c <HAL_UART_MspInit+0x144>)
 8005cce:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005cd0:	4b2d      	ldr	r3, [pc, #180]	@ (8005d88 <HAL_UART_MspInit+0x140>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005cd6:	4b2c      	ldr	r3, [pc, #176]	@ (8005d88 <HAL_UART_MspInit+0x140>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005cdc:	4b2a      	ldr	r3, [pc, #168]	@ (8005d88 <HAL_UART_MspInit+0x140>)
 8005cde:	2280      	movs	r2, #128	@ 0x80
 8005ce0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ce2:	4b29      	ldr	r3, [pc, #164]	@ (8005d88 <HAL_UART_MspInit+0x140>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ce8:	4b27      	ldr	r3, [pc, #156]	@ (8005d88 <HAL_UART_MspInit+0x140>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005cee:	4b26      	ldr	r3, [pc, #152]	@ (8005d88 <HAL_UART_MspInit+0x140>)
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005cf4:	4b24      	ldr	r3, [pc, #144]	@ (8005d88 <HAL_UART_MspInit+0x140>)
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005cfa:	4823      	ldr	r0, [pc, #140]	@ (8005d88 <HAL_UART_MspInit+0x140>)
 8005cfc:	f000 fa06 	bl	800610c <HAL_DMA_Init>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d001      	beq.n	8005d0a <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8005d06:	f7fb fe0f 	bl	8001928 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a1e      	ldr	r2, [pc, #120]	@ (8005d88 <HAL_UART_MspInit+0x140>)
 8005d0e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005d10:	4a1d      	ldr	r2, [pc, #116]	@ (8005d88 <HAL_UART_MspInit+0x140>)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8005d16:	4b1e      	ldr	r3, [pc, #120]	@ (8005d90 <HAL_UART_MspInit+0x148>)
 8005d18:	4a1e      	ldr	r2, [pc, #120]	@ (8005d94 <HAL_UART_MspInit+0x14c>)
 8005d1a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8005d90 <HAL_UART_MspInit+0x148>)
 8005d1e:	2210      	movs	r2, #16
 8005d20:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d22:	4b1b      	ldr	r3, [pc, #108]	@ (8005d90 <HAL_UART_MspInit+0x148>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005d28:	4b19      	ldr	r3, [pc, #100]	@ (8005d90 <HAL_UART_MspInit+0x148>)
 8005d2a:	2280      	movs	r2, #128	@ 0x80
 8005d2c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d2e:	4b18      	ldr	r3, [pc, #96]	@ (8005d90 <HAL_UART_MspInit+0x148>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d34:	4b16      	ldr	r3, [pc, #88]	@ (8005d90 <HAL_UART_MspInit+0x148>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005d3a:	4b15      	ldr	r3, [pc, #84]	@ (8005d90 <HAL_UART_MspInit+0x148>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005d40:	4b13      	ldr	r3, [pc, #76]	@ (8005d90 <HAL_UART_MspInit+0x148>)
 8005d42:	2200      	movs	r2, #0
 8005d44:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005d46:	4812      	ldr	r0, [pc, #72]	@ (8005d90 <HAL_UART_MspInit+0x148>)
 8005d48:	f000 f9e0 	bl	800610c <HAL_DMA_Init>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8005d52:	f7fb fde9 	bl	8001928 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a0d      	ldr	r2, [pc, #52]	@ (8005d90 <HAL_UART_MspInit+0x148>)
 8005d5a:	639a      	str	r2, [r3, #56]	@ 0x38
 8005d5c:	4a0c      	ldr	r2, [pc, #48]	@ (8005d90 <HAL_UART_MspInit+0x148>)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005d62:	2200      	movs	r2, #0
 8005d64:	2100      	movs	r1, #0
 8005d66:	2026      	movs	r0, #38	@ 0x26
 8005d68:	f000 f999 	bl	800609e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005d6c:	2026      	movs	r0, #38	@ 0x26
 8005d6e:	f000 f9b2 	bl	80060d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005d72:	bf00      	nop
 8005d74:	3720      	adds	r7, #32
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	40004400 	.word	0x40004400
 8005d80:	40021000 	.word	0x40021000
 8005d84:	40010800 	.word	0x40010800
 8005d88:	20000ca8 	.word	0x20000ca8
 8005d8c:	4002006c 	.word	0x4002006c
 8005d90:	20000cec 	.word	0x20000cec
 8005d94:	40020080 	.word	0x40020080

08005d98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005d98:	f7ff fd88 	bl	80058ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005d9c:	480b      	ldr	r0, [pc, #44]	@ (8005dcc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005d9e:	490c      	ldr	r1, [pc, #48]	@ (8005dd0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005da0:	4a0c      	ldr	r2, [pc, #48]	@ (8005dd4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8005da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005da4:	e002      	b.n	8005dac <LoopCopyDataInit>

08005da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005daa:	3304      	adds	r3, #4

08005dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005db0:	d3f9      	bcc.n	8005da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005db2:	4a09      	ldr	r2, [pc, #36]	@ (8005dd8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005db4:	4c09      	ldr	r4, [pc, #36]	@ (8005ddc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005db8:	e001      	b.n	8005dbe <LoopFillZerobss>

08005dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005dbc:	3204      	adds	r2, #4

08005dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005dc0:	d3fb      	bcc.n	8005dba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005dc2:	f004 f9e1 	bl	800a188 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005dc6:	f7fb fc5f 	bl	8001688 <main>
  bx lr
 8005dca:	4770      	bx	lr
  ldr r0, =_sdata
 8005dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005dd0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8005dd4:	0800b230 	.word	0x0800b230
  ldr r2, =_sbss
 8005dd8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8005ddc:	20000e80 	.word	0x20000e80

08005de0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005de0:	e7fe      	b.n	8005de0 <ADC1_2_IRQHandler>
	...

08005de4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005de8:	4b08      	ldr	r3, [pc, #32]	@ (8005e0c <HAL_Init+0x28>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a07      	ldr	r2, [pc, #28]	@ (8005e0c <HAL_Init+0x28>)
 8005dee:	f043 0310 	orr.w	r3, r3, #16
 8005df2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005df4:	2003      	movs	r0, #3
 8005df6:	f000 f947 	bl	8006088 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005dfa:	200f      	movs	r0, #15
 8005dfc:	f000 f808 	bl	8005e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005e00:	f7ff fc10 	bl	8005624 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	40022000 	.word	0x40022000

08005e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005e18:	4b12      	ldr	r3, [pc, #72]	@ (8005e64 <HAL_InitTick+0x54>)
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	4b12      	ldr	r3, [pc, #72]	@ (8005e68 <HAL_InitTick+0x58>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	4619      	mov	r1, r3
 8005e22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 f95f 	bl	80060f2 <HAL_SYSTICK_Config>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d001      	beq.n	8005e3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e00e      	b.n	8005e5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2b0f      	cmp	r3, #15
 8005e42:	d80a      	bhi.n	8005e5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005e44:	2200      	movs	r2, #0
 8005e46:	6879      	ldr	r1, [r7, #4]
 8005e48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e4c:	f000 f927 	bl	800609e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005e50:	4a06      	ldr	r2, [pc, #24]	@ (8005e6c <HAL_InitTick+0x5c>)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
 8005e58:	e000      	b.n	8005e5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3708      	adds	r7, #8
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	2000000c 	.word	0x2000000c
 8005e68:	20000014 	.word	0x20000014
 8005e6c:	20000010 	.word	0x20000010

08005e70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e70:	b480      	push	{r7}
 8005e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e74:	4b05      	ldr	r3, [pc, #20]	@ (8005e8c <HAL_IncTick+0x1c>)
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	461a      	mov	r2, r3
 8005e7a:	4b05      	ldr	r3, [pc, #20]	@ (8005e90 <HAL_IncTick+0x20>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4413      	add	r3, r2
 8005e80:	4a03      	ldr	r2, [pc, #12]	@ (8005e90 <HAL_IncTick+0x20>)
 8005e82:	6013      	str	r3, [r2, #0]
}
 8005e84:	bf00      	nop
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bc80      	pop	{r7}
 8005e8a:	4770      	bx	lr
 8005e8c:	20000014 	.word	0x20000014
 8005e90:	20000d30 	.word	0x20000d30

08005e94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e94:	b480      	push	{r7}
 8005e96:	af00      	add	r7, sp, #0
  return uwTick;
 8005e98:	4b02      	ldr	r3, [pc, #8]	@ (8005ea4 <HAL_GetTick+0x10>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bc80      	pop	{r7}
 8005ea2:	4770      	bx	lr
 8005ea4:	20000d30 	.word	0x20000d30

08005ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005eb0:	f7ff fff0 	bl	8005e94 <HAL_GetTick>
 8005eb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ec0:	d005      	beq.n	8005ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8005eec <HAL_Delay+0x44>)
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4413      	add	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005ece:	bf00      	nop
 8005ed0:	f7ff ffe0 	bl	8005e94 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d8f7      	bhi.n	8005ed0 <HAL_Delay+0x28>
  {
  }
}
 8005ee0:	bf00      	nop
 8005ee2:	bf00      	nop
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	20000014 	.word	0x20000014

08005ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f003 0307 	and.w	r3, r3, #7
 8005efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f00:	4b0c      	ldr	r3, [pc, #48]	@ (8005f34 <__NVIC_SetPriorityGrouping+0x44>)
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005f1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f22:	4a04      	ldr	r2, [pc, #16]	@ (8005f34 <__NVIC_SetPriorityGrouping+0x44>)
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	60d3      	str	r3, [r2, #12]
}
 8005f28:	bf00      	nop
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bc80      	pop	{r7}
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	e000ed00 	.word	0xe000ed00

08005f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f3c:	4b04      	ldr	r3, [pc, #16]	@ (8005f50 <__NVIC_GetPriorityGrouping+0x18>)
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	0a1b      	lsrs	r3, r3, #8
 8005f42:	f003 0307 	and.w	r3, r3, #7
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bc80      	pop	{r7}
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	e000ed00 	.word	0xe000ed00

08005f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	db0b      	blt.n	8005f7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f66:	79fb      	ldrb	r3, [r7, #7]
 8005f68:	f003 021f 	and.w	r2, r3, #31
 8005f6c:	4906      	ldr	r1, [pc, #24]	@ (8005f88 <__NVIC_EnableIRQ+0x34>)
 8005f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f72:	095b      	lsrs	r3, r3, #5
 8005f74:	2001      	movs	r0, #1
 8005f76:	fa00 f202 	lsl.w	r2, r0, r2
 8005f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005f7e:	bf00      	nop
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bc80      	pop	{r7}
 8005f86:	4770      	bx	lr
 8005f88:	e000e100 	.word	0xe000e100

08005f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	4603      	mov	r3, r0
 8005f94:	6039      	str	r1, [r7, #0]
 8005f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	db0a      	blt.n	8005fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	490c      	ldr	r1, [pc, #48]	@ (8005fd8 <__NVIC_SetPriority+0x4c>)
 8005fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005faa:	0112      	lsls	r2, r2, #4
 8005fac:	b2d2      	uxtb	r2, r2
 8005fae:	440b      	add	r3, r1
 8005fb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005fb4:	e00a      	b.n	8005fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	b2da      	uxtb	r2, r3
 8005fba:	4908      	ldr	r1, [pc, #32]	@ (8005fdc <__NVIC_SetPriority+0x50>)
 8005fbc:	79fb      	ldrb	r3, [r7, #7]
 8005fbe:	f003 030f 	and.w	r3, r3, #15
 8005fc2:	3b04      	subs	r3, #4
 8005fc4:	0112      	lsls	r2, r2, #4
 8005fc6:	b2d2      	uxtb	r2, r2
 8005fc8:	440b      	add	r3, r1
 8005fca:	761a      	strb	r2, [r3, #24]
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bc80      	pop	{r7}
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	e000e100 	.word	0xe000e100
 8005fdc:	e000ed00 	.word	0xe000ed00

08005fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b089      	sub	sp, #36	@ 0x24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f003 0307 	and.w	r3, r3, #7
 8005ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	f1c3 0307 	rsb	r3, r3, #7
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	bf28      	it	cs
 8005ffe:	2304      	movcs	r3, #4
 8006000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	3304      	adds	r3, #4
 8006006:	2b06      	cmp	r3, #6
 8006008:	d902      	bls.n	8006010 <NVIC_EncodePriority+0x30>
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	3b03      	subs	r3, #3
 800600e:	e000      	b.n	8006012 <NVIC_EncodePriority+0x32>
 8006010:	2300      	movs	r3, #0
 8006012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006014:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	fa02 f303 	lsl.w	r3, r2, r3
 800601e:	43da      	mvns	r2, r3
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	401a      	ands	r2, r3
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006028:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	fa01 f303 	lsl.w	r3, r1, r3
 8006032:	43d9      	mvns	r1, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006038:	4313      	orrs	r3, r2
         );
}
 800603a:	4618      	mov	r0, r3
 800603c:	3724      	adds	r7, #36	@ 0x24
 800603e:	46bd      	mov	sp, r7
 8006040:	bc80      	pop	{r7}
 8006042:	4770      	bx	lr

08006044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	3b01      	subs	r3, #1
 8006050:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006054:	d301      	bcc.n	800605a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006056:	2301      	movs	r3, #1
 8006058:	e00f      	b.n	800607a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800605a:	4a0a      	ldr	r2, [pc, #40]	@ (8006084 <SysTick_Config+0x40>)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	3b01      	subs	r3, #1
 8006060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006062:	210f      	movs	r1, #15
 8006064:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006068:	f7ff ff90 	bl	8005f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800606c:	4b05      	ldr	r3, [pc, #20]	@ (8006084 <SysTick_Config+0x40>)
 800606e:	2200      	movs	r2, #0
 8006070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006072:	4b04      	ldr	r3, [pc, #16]	@ (8006084 <SysTick_Config+0x40>)
 8006074:	2207      	movs	r2, #7
 8006076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3708      	adds	r7, #8
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	e000e010 	.word	0xe000e010

08006088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f7ff ff2d 	bl	8005ef0 <__NVIC_SetPriorityGrouping>
}
 8006096:	bf00      	nop
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800609e:	b580      	push	{r7, lr}
 80060a0:	b086      	sub	sp, #24
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	4603      	mov	r3, r0
 80060a6:	60b9      	str	r1, [r7, #8]
 80060a8:	607a      	str	r2, [r7, #4]
 80060aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80060ac:	2300      	movs	r3, #0
 80060ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80060b0:	f7ff ff42 	bl	8005f38 <__NVIC_GetPriorityGrouping>
 80060b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	68b9      	ldr	r1, [r7, #8]
 80060ba:	6978      	ldr	r0, [r7, #20]
 80060bc:	f7ff ff90 	bl	8005fe0 <NVIC_EncodePriority>
 80060c0:	4602      	mov	r2, r0
 80060c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060c6:	4611      	mov	r1, r2
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7ff ff5f 	bl	8005f8c <__NVIC_SetPriority>
}
 80060ce:	bf00      	nop
 80060d0:	3718      	adds	r7, #24
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b082      	sub	sp, #8
 80060da:	af00      	add	r7, sp, #0
 80060dc:	4603      	mov	r3, r0
 80060de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80060e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7ff ff35 	bl	8005f54 <__NVIC_EnableIRQ>
}
 80060ea:	bf00      	nop
 80060ec:	3708      	adds	r7, #8
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b082      	sub	sp, #8
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7ff ffa2 	bl	8006044 <SysTick_Config>
 8006100:	4603      	mov	r3, r0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
	...

0800610c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006114:	2300      	movs	r3, #0
 8006116:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e043      	b.n	80061aa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	461a      	mov	r2, r3
 8006128:	4b22      	ldr	r3, [pc, #136]	@ (80061b4 <HAL_DMA_Init+0xa8>)
 800612a:	4413      	add	r3, r2
 800612c:	4a22      	ldr	r2, [pc, #136]	@ (80061b8 <HAL_DMA_Init+0xac>)
 800612e:	fba2 2303 	umull	r2, r3, r2, r3
 8006132:	091b      	lsrs	r3, r3, #4
 8006134:	009a      	lsls	r2, r3, #2
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a1f      	ldr	r2, [pc, #124]	@ (80061bc <HAL_DMA_Init+0xb0>)
 800613e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2202      	movs	r2, #2
 8006144:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006156:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800615a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006164:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006170:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800617c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	4313      	orrs	r3, r2
 8006188:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3714      	adds	r7, #20
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bc80      	pop	{r7}
 80061b2:	4770      	bx	lr
 80061b4:	bffdfff8 	.word	0xbffdfff8
 80061b8:	cccccccd 	.word	0xcccccccd
 80061bc:	40020000 	.word	0x40020000

080061c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
 80061cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d101      	bne.n	80061e0 <HAL_DMA_Start_IT+0x20>
 80061dc:	2302      	movs	r3, #2
 80061de:	e04b      	b.n	8006278 <HAL_DMA_Start_IT+0xb8>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d13a      	bne.n	800626a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f022 0201 	bic.w	r2, r2, #1
 8006210:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	68b9      	ldr	r1, [r7, #8]
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 f9eb 	bl	80065f4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006222:	2b00      	cmp	r3, #0
 8006224:	d008      	beq.n	8006238 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f042 020e 	orr.w	r2, r2, #14
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	e00f      	b.n	8006258 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f022 0204 	bic.w	r2, r2, #4
 8006246:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f042 020a 	orr.w	r2, r2, #10
 8006256:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f042 0201 	orr.w	r2, r2, #1
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	e005      	b.n	8006276 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006272:	2302      	movs	r3, #2
 8006274:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006276:	7dfb      	ldrb	r3, [r7, #23]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006288:	2300      	movs	r3, #0
 800628a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b02      	cmp	r3, #2
 8006296:	d008      	beq.n	80062aa <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2204      	movs	r2, #4
 800629c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e020      	b.n	80062ec <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f022 020e 	bic.w	r2, r2, #14
 80062b8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f022 0201 	bic.w	r2, r2, #1
 80062c8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062d2:	2101      	movs	r1, #1
 80062d4:	fa01 f202 	lsl.w	r2, r1, r2
 80062d8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3714      	adds	r7, #20
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bc80      	pop	{r7}
 80062f4:	4770      	bx	lr
	...

080062f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006300:	2300      	movs	r3, #0
 8006302:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2b02      	cmp	r3, #2
 800630e:	d005      	beq.n	800631c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2204      	movs	r2, #4
 8006314:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	73fb      	strb	r3, [r7, #15]
 800631a:	e051      	b.n	80063c0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 020e 	bic.w	r2, r2, #14
 800632a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f022 0201 	bic.w	r2, r2, #1
 800633a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a22      	ldr	r2, [pc, #136]	@ (80063cc <HAL_DMA_Abort_IT+0xd4>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d029      	beq.n	800639a <HAL_DMA_Abort_IT+0xa2>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a21      	ldr	r2, [pc, #132]	@ (80063d0 <HAL_DMA_Abort_IT+0xd8>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d022      	beq.n	8006396 <HAL_DMA_Abort_IT+0x9e>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a1f      	ldr	r2, [pc, #124]	@ (80063d4 <HAL_DMA_Abort_IT+0xdc>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d01a      	beq.n	8006390 <HAL_DMA_Abort_IT+0x98>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a1e      	ldr	r2, [pc, #120]	@ (80063d8 <HAL_DMA_Abort_IT+0xe0>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d012      	beq.n	800638a <HAL_DMA_Abort_IT+0x92>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a1c      	ldr	r2, [pc, #112]	@ (80063dc <HAL_DMA_Abort_IT+0xe4>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d00a      	beq.n	8006384 <HAL_DMA_Abort_IT+0x8c>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a1b      	ldr	r2, [pc, #108]	@ (80063e0 <HAL_DMA_Abort_IT+0xe8>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d102      	bne.n	800637e <HAL_DMA_Abort_IT+0x86>
 8006378:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800637c:	e00e      	b.n	800639c <HAL_DMA_Abort_IT+0xa4>
 800637e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006382:	e00b      	b.n	800639c <HAL_DMA_Abort_IT+0xa4>
 8006384:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006388:	e008      	b.n	800639c <HAL_DMA_Abort_IT+0xa4>
 800638a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800638e:	e005      	b.n	800639c <HAL_DMA_Abort_IT+0xa4>
 8006390:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006394:	e002      	b.n	800639c <HAL_DMA_Abort_IT+0xa4>
 8006396:	2310      	movs	r3, #16
 8006398:	e000      	b.n	800639c <HAL_DMA_Abort_IT+0xa4>
 800639a:	2301      	movs	r3, #1
 800639c:	4a11      	ldr	r2, [pc, #68]	@ (80063e4 <HAL_DMA_Abort_IT+0xec>)
 800639e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d003      	beq.n	80063c0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	4798      	blx	r3
    } 
  }
  return status;
 80063c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	40020008 	.word	0x40020008
 80063d0:	4002001c 	.word	0x4002001c
 80063d4:	40020030 	.word	0x40020030
 80063d8:	40020044 	.word	0x40020044
 80063dc:	40020058 	.word	0x40020058
 80063e0:	4002006c 	.word	0x4002006c
 80063e4:	40020000 	.word	0x40020000

080063e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006404:	2204      	movs	r2, #4
 8006406:	409a      	lsls	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	4013      	ands	r3, r2
 800640c:	2b00      	cmp	r3, #0
 800640e:	d04f      	beq.n	80064b0 <HAL_DMA_IRQHandler+0xc8>
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	f003 0304 	and.w	r3, r3, #4
 8006416:	2b00      	cmp	r3, #0
 8006418:	d04a      	beq.n	80064b0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0320 	and.w	r3, r3, #32
 8006424:	2b00      	cmp	r3, #0
 8006426:	d107      	bne.n	8006438 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f022 0204 	bic.w	r2, r2, #4
 8006436:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a66      	ldr	r2, [pc, #408]	@ (80065d8 <HAL_DMA_IRQHandler+0x1f0>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d029      	beq.n	8006496 <HAL_DMA_IRQHandler+0xae>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a65      	ldr	r2, [pc, #404]	@ (80065dc <HAL_DMA_IRQHandler+0x1f4>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d022      	beq.n	8006492 <HAL_DMA_IRQHandler+0xaa>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a63      	ldr	r2, [pc, #396]	@ (80065e0 <HAL_DMA_IRQHandler+0x1f8>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d01a      	beq.n	800648c <HAL_DMA_IRQHandler+0xa4>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a62      	ldr	r2, [pc, #392]	@ (80065e4 <HAL_DMA_IRQHandler+0x1fc>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d012      	beq.n	8006486 <HAL_DMA_IRQHandler+0x9e>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a60      	ldr	r2, [pc, #384]	@ (80065e8 <HAL_DMA_IRQHandler+0x200>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d00a      	beq.n	8006480 <HAL_DMA_IRQHandler+0x98>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a5f      	ldr	r2, [pc, #380]	@ (80065ec <HAL_DMA_IRQHandler+0x204>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d102      	bne.n	800647a <HAL_DMA_IRQHandler+0x92>
 8006474:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006478:	e00e      	b.n	8006498 <HAL_DMA_IRQHandler+0xb0>
 800647a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800647e:	e00b      	b.n	8006498 <HAL_DMA_IRQHandler+0xb0>
 8006480:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006484:	e008      	b.n	8006498 <HAL_DMA_IRQHandler+0xb0>
 8006486:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800648a:	e005      	b.n	8006498 <HAL_DMA_IRQHandler+0xb0>
 800648c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006490:	e002      	b.n	8006498 <HAL_DMA_IRQHandler+0xb0>
 8006492:	2340      	movs	r3, #64	@ 0x40
 8006494:	e000      	b.n	8006498 <HAL_DMA_IRQHandler+0xb0>
 8006496:	2304      	movs	r3, #4
 8006498:	4a55      	ldr	r2, [pc, #340]	@ (80065f0 <HAL_DMA_IRQHandler+0x208>)
 800649a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 8094 	beq.w	80065ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80064ae:	e08e      	b.n	80065ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b4:	2202      	movs	r2, #2
 80064b6:	409a      	lsls	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4013      	ands	r3, r2
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d056      	beq.n	800656e <HAL_DMA_IRQHandler+0x186>
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d051      	beq.n	800656e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0320 	and.w	r3, r3, #32
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10b      	bne.n	80064f0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 020a 	bic.w	r2, r2, #10
 80064e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a38      	ldr	r2, [pc, #224]	@ (80065d8 <HAL_DMA_IRQHandler+0x1f0>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d029      	beq.n	800654e <HAL_DMA_IRQHandler+0x166>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a37      	ldr	r2, [pc, #220]	@ (80065dc <HAL_DMA_IRQHandler+0x1f4>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d022      	beq.n	800654a <HAL_DMA_IRQHandler+0x162>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a35      	ldr	r2, [pc, #212]	@ (80065e0 <HAL_DMA_IRQHandler+0x1f8>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d01a      	beq.n	8006544 <HAL_DMA_IRQHandler+0x15c>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a34      	ldr	r2, [pc, #208]	@ (80065e4 <HAL_DMA_IRQHandler+0x1fc>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d012      	beq.n	800653e <HAL_DMA_IRQHandler+0x156>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a32      	ldr	r2, [pc, #200]	@ (80065e8 <HAL_DMA_IRQHandler+0x200>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d00a      	beq.n	8006538 <HAL_DMA_IRQHandler+0x150>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a31      	ldr	r2, [pc, #196]	@ (80065ec <HAL_DMA_IRQHandler+0x204>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d102      	bne.n	8006532 <HAL_DMA_IRQHandler+0x14a>
 800652c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006530:	e00e      	b.n	8006550 <HAL_DMA_IRQHandler+0x168>
 8006532:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006536:	e00b      	b.n	8006550 <HAL_DMA_IRQHandler+0x168>
 8006538:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800653c:	e008      	b.n	8006550 <HAL_DMA_IRQHandler+0x168>
 800653e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006542:	e005      	b.n	8006550 <HAL_DMA_IRQHandler+0x168>
 8006544:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006548:	e002      	b.n	8006550 <HAL_DMA_IRQHandler+0x168>
 800654a:	2320      	movs	r3, #32
 800654c:	e000      	b.n	8006550 <HAL_DMA_IRQHandler+0x168>
 800654e:	2302      	movs	r3, #2
 8006550:	4a27      	ldr	r2, [pc, #156]	@ (80065f0 <HAL_DMA_IRQHandler+0x208>)
 8006552:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006560:	2b00      	cmp	r3, #0
 8006562:	d034      	beq.n	80065ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800656c:	e02f      	b.n	80065ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006572:	2208      	movs	r2, #8
 8006574:	409a      	lsls	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	4013      	ands	r3, r2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d028      	beq.n	80065d0 <HAL_DMA_IRQHandler+0x1e8>
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	f003 0308 	and.w	r3, r3, #8
 8006584:	2b00      	cmp	r3, #0
 8006586:	d023      	beq.n	80065d0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f022 020e 	bic.w	r2, r2, #14
 8006596:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065a0:	2101      	movs	r1, #1
 80065a2:	fa01 f202 	lsl.w	r2, r1, r2
 80065a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d004      	beq.n	80065d0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	4798      	blx	r3
    }
  }
  return;
 80065ce:	bf00      	nop
 80065d0:	bf00      	nop
}
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	40020008 	.word	0x40020008
 80065dc:	4002001c 	.word	0x4002001c
 80065e0:	40020030 	.word	0x40020030
 80065e4:	40020044 	.word	0x40020044
 80065e8:	40020058 	.word	0x40020058
 80065ec:	4002006c 	.word	0x4002006c
 80065f0:	40020000 	.word	0x40020000

080065f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
 8006600:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800660a:	2101      	movs	r1, #1
 800660c:	fa01 f202 	lsl.w	r2, r1, r2
 8006610:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	2b10      	cmp	r3, #16
 8006620:	d108      	bne.n	8006634 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006632:	e007      	b.n	8006644 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	60da      	str	r2, [r3, #12]
}
 8006644:	bf00      	nop
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	bc80      	pop	{r7}
 800664c:	4770      	bx	lr
	...

08006650 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006650:	b480      	push	{r7}
 8006652:	b08b      	sub	sp, #44	@ 0x2c
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800665a:	2300      	movs	r3, #0
 800665c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800665e:	2300      	movs	r3, #0
 8006660:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006662:	e169      	b.n	8006938 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006664:	2201      	movs	r2, #1
 8006666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006668:	fa02 f303 	lsl.w	r3, r2, r3
 800666c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	69fa      	ldr	r2, [r7, #28]
 8006674:	4013      	ands	r3, r2
 8006676:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006678:	69ba      	ldr	r2, [r7, #24]
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	429a      	cmp	r2, r3
 800667e:	f040 8158 	bne.w	8006932 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	4a9a      	ldr	r2, [pc, #616]	@ (80068f0 <HAL_GPIO_Init+0x2a0>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d05e      	beq.n	800674a <HAL_GPIO_Init+0xfa>
 800668c:	4a98      	ldr	r2, [pc, #608]	@ (80068f0 <HAL_GPIO_Init+0x2a0>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d875      	bhi.n	800677e <HAL_GPIO_Init+0x12e>
 8006692:	4a98      	ldr	r2, [pc, #608]	@ (80068f4 <HAL_GPIO_Init+0x2a4>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d058      	beq.n	800674a <HAL_GPIO_Init+0xfa>
 8006698:	4a96      	ldr	r2, [pc, #600]	@ (80068f4 <HAL_GPIO_Init+0x2a4>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d86f      	bhi.n	800677e <HAL_GPIO_Init+0x12e>
 800669e:	4a96      	ldr	r2, [pc, #600]	@ (80068f8 <HAL_GPIO_Init+0x2a8>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d052      	beq.n	800674a <HAL_GPIO_Init+0xfa>
 80066a4:	4a94      	ldr	r2, [pc, #592]	@ (80068f8 <HAL_GPIO_Init+0x2a8>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d869      	bhi.n	800677e <HAL_GPIO_Init+0x12e>
 80066aa:	4a94      	ldr	r2, [pc, #592]	@ (80068fc <HAL_GPIO_Init+0x2ac>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d04c      	beq.n	800674a <HAL_GPIO_Init+0xfa>
 80066b0:	4a92      	ldr	r2, [pc, #584]	@ (80068fc <HAL_GPIO_Init+0x2ac>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d863      	bhi.n	800677e <HAL_GPIO_Init+0x12e>
 80066b6:	4a92      	ldr	r2, [pc, #584]	@ (8006900 <HAL_GPIO_Init+0x2b0>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d046      	beq.n	800674a <HAL_GPIO_Init+0xfa>
 80066bc:	4a90      	ldr	r2, [pc, #576]	@ (8006900 <HAL_GPIO_Init+0x2b0>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d85d      	bhi.n	800677e <HAL_GPIO_Init+0x12e>
 80066c2:	2b12      	cmp	r3, #18
 80066c4:	d82a      	bhi.n	800671c <HAL_GPIO_Init+0xcc>
 80066c6:	2b12      	cmp	r3, #18
 80066c8:	d859      	bhi.n	800677e <HAL_GPIO_Init+0x12e>
 80066ca:	a201      	add	r2, pc, #4	@ (adr r2, 80066d0 <HAL_GPIO_Init+0x80>)
 80066cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d0:	0800674b 	.word	0x0800674b
 80066d4:	08006725 	.word	0x08006725
 80066d8:	08006737 	.word	0x08006737
 80066dc:	08006779 	.word	0x08006779
 80066e0:	0800677f 	.word	0x0800677f
 80066e4:	0800677f 	.word	0x0800677f
 80066e8:	0800677f 	.word	0x0800677f
 80066ec:	0800677f 	.word	0x0800677f
 80066f0:	0800677f 	.word	0x0800677f
 80066f4:	0800677f 	.word	0x0800677f
 80066f8:	0800677f 	.word	0x0800677f
 80066fc:	0800677f 	.word	0x0800677f
 8006700:	0800677f 	.word	0x0800677f
 8006704:	0800677f 	.word	0x0800677f
 8006708:	0800677f 	.word	0x0800677f
 800670c:	0800677f 	.word	0x0800677f
 8006710:	0800677f 	.word	0x0800677f
 8006714:	0800672d 	.word	0x0800672d
 8006718:	08006741 	.word	0x08006741
 800671c:	4a79      	ldr	r2, [pc, #484]	@ (8006904 <HAL_GPIO_Init+0x2b4>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d013      	beq.n	800674a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006722:	e02c      	b.n	800677e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	623b      	str	r3, [r7, #32]
          break;
 800672a:	e029      	b.n	8006780 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	3304      	adds	r3, #4
 8006732:	623b      	str	r3, [r7, #32]
          break;
 8006734:	e024      	b.n	8006780 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	3308      	adds	r3, #8
 800673c:	623b      	str	r3, [r7, #32]
          break;
 800673e:	e01f      	b.n	8006780 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	330c      	adds	r3, #12
 8006746:	623b      	str	r3, [r7, #32]
          break;
 8006748:	e01a      	b.n	8006780 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d102      	bne.n	8006758 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006752:	2304      	movs	r3, #4
 8006754:	623b      	str	r3, [r7, #32]
          break;
 8006756:	e013      	b.n	8006780 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d105      	bne.n	800676c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006760:	2308      	movs	r3, #8
 8006762:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	69fa      	ldr	r2, [r7, #28]
 8006768:	611a      	str	r2, [r3, #16]
          break;
 800676a:	e009      	b.n	8006780 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800676c:	2308      	movs	r3, #8
 800676e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	69fa      	ldr	r2, [r7, #28]
 8006774:	615a      	str	r2, [r3, #20]
          break;
 8006776:	e003      	b.n	8006780 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006778:	2300      	movs	r3, #0
 800677a:	623b      	str	r3, [r7, #32]
          break;
 800677c:	e000      	b.n	8006780 <HAL_GPIO_Init+0x130>
          break;
 800677e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	2bff      	cmp	r3, #255	@ 0xff
 8006784:	d801      	bhi.n	800678a <HAL_GPIO_Init+0x13a>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	e001      	b.n	800678e <HAL_GPIO_Init+0x13e>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	3304      	adds	r3, #4
 800678e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	2bff      	cmp	r3, #255	@ 0xff
 8006794:	d802      	bhi.n	800679c <HAL_GPIO_Init+0x14c>
 8006796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	e002      	b.n	80067a2 <HAL_GPIO_Init+0x152>
 800679c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679e:	3b08      	subs	r3, #8
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	210f      	movs	r1, #15
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	fa01 f303 	lsl.w	r3, r1, r3
 80067b0:	43db      	mvns	r3, r3
 80067b2:	401a      	ands	r2, r3
 80067b4:	6a39      	ldr	r1, [r7, #32]
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	fa01 f303 	lsl.w	r3, r1, r3
 80067bc:	431a      	orrs	r2, r3
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f000 80b1 	beq.w	8006932 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80067d0:	4b4d      	ldr	r3, [pc, #308]	@ (8006908 <HAL_GPIO_Init+0x2b8>)
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	4a4c      	ldr	r2, [pc, #304]	@ (8006908 <HAL_GPIO_Init+0x2b8>)
 80067d6:	f043 0301 	orr.w	r3, r3, #1
 80067da:	6193      	str	r3, [r2, #24]
 80067dc:	4b4a      	ldr	r3, [pc, #296]	@ (8006908 <HAL_GPIO_Init+0x2b8>)
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	60bb      	str	r3, [r7, #8]
 80067e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80067e8:	4a48      	ldr	r2, [pc, #288]	@ (800690c <HAL_GPIO_Init+0x2bc>)
 80067ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ec:	089b      	lsrs	r3, r3, #2
 80067ee:	3302      	adds	r3, #2
 80067f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80067f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f8:	f003 0303 	and.w	r3, r3, #3
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	220f      	movs	r2, #15
 8006800:	fa02 f303 	lsl.w	r3, r2, r3
 8006804:	43db      	mvns	r3, r3
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	4013      	ands	r3, r2
 800680a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a40      	ldr	r2, [pc, #256]	@ (8006910 <HAL_GPIO_Init+0x2c0>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d013      	beq.n	800683c <HAL_GPIO_Init+0x1ec>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a3f      	ldr	r2, [pc, #252]	@ (8006914 <HAL_GPIO_Init+0x2c4>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d00d      	beq.n	8006838 <HAL_GPIO_Init+0x1e8>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a3e      	ldr	r2, [pc, #248]	@ (8006918 <HAL_GPIO_Init+0x2c8>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d007      	beq.n	8006834 <HAL_GPIO_Init+0x1e4>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a3d      	ldr	r2, [pc, #244]	@ (800691c <HAL_GPIO_Init+0x2cc>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d101      	bne.n	8006830 <HAL_GPIO_Init+0x1e0>
 800682c:	2303      	movs	r3, #3
 800682e:	e006      	b.n	800683e <HAL_GPIO_Init+0x1ee>
 8006830:	2304      	movs	r3, #4
 8006832:	e004      	b.n	800683e <HAL_GPIO_Init+0x1ee>
 8006834:	2302      	movs	r3, #2
 8006836:	e002      	b.n	800683e <HAL_GPIO_Init+0x1ee>
 8006838:	2301      	movs	r3, #1
 800683a:	e000      	b.n	800683e <HAL_GPIO_Init+0x1ee>
 800683c:	2300      	movs	r3, #0
 800683e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006840:	f002 0203 	and.w	r2, r2, #3
 8006844:	0092      	lsls	r2, r2, #2
 8006846:	4093      	lsls	r3, r2
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	4313      	orrs	r3, r2
 800684c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800684e:	492f      	ldr	r1, [pc, #188]	@ (800690c <HAL_GPIO_Init+0x2bc>)
 8006850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006852:	089b      	lsrs	r3, r3, #2
 8006854:	3302      	adds	r3, #2
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d006      	beq.n	8006876 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006868:	4b2d      	ldr	r3, [pc, #180]	@ (8006920 <HAL_GPIO_Init+0x2d0>)
 800686a:	689a      	ldr	r2, [r3, #8]
 800686c:	492c      	ldr	r1, [pc, #176]	@ (8006920 <HAL_GPIO_Init+0x2d0>)
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	4313      	orrs	r3, r2
 8006872:	608b      	str	r3, [r1, #8]
 8006874:	e006      	b.n	8006884 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006876:	4b2a      	ldr	r3, [pc, #168]	@ (8006920 <HAL_GPIO_Init+0x2d0>)
 8006878:	689a      	ldr	r2, [r3, #8]
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	43db      	mvns	r3, r3
 800687e:	4928      	ldr	r1, [pc, #160]	@ (8006920 <HAL_GPIO_Init+0x2d0>)
 8006880:	4013      	ands	r3, r2
 8006882:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d006      	beq.n	800689e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006890:	4b23      	ldr	r3, [pc, #140]	@ (8006920 <HAL_GPIO_Init+0x2d0>)
 8006892:	68da      	ldr	r2, [r3, #12]
 8006894:	4922      	ldr	r1, [pc, #136]	@ (8006920 <HAL_GPIO_Init+0x2d0>)
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	4313      	orrs	r3, r2
 800689a:	60cb      	str	r3, [r1, #12]
 800689c:	e006      	b.n	80068ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800689e:	4b20      	ldr	r3, [pc, #128]	@ (8006920 <HAL_GPIO_Init+0x2d0>)
 80068a0:	68da      	ldr	r2, [r3, #12]
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	43db      	mvns	r3, r3
 80068a6:	491e      	ldr	r1, [pc, #120]	@ (8006920 <HAL_GPIO_Init+0x2d0>)
 80068a8:	4013      	ands	r3, r2
 80068aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d006      	beq.n	80068c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80068b8:	4b19      	ldr	r3, [pc, #100]	@ (8006920 <HAL_GPIO_Init+0x2d0>)
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	4918      	ldr	r1, [pc, #96]	@ (8006920 <HAL_GPIO_Init+0x2d0>)
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	604b      	str	r3, [r1, #4]
 80068c4:	e006      	b.n	80068d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80068c6:	4b16      	ldr	r3, [pc, #88]	@ (8006920 <HAL_GPIO_Init+0x2d0>)
 80068c8:	685a      	ldr	r2, [r3, #4]
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	43db      	mvns	r3, r3
 80068ce:	4914      	ldr	r1, [pc, #80]	@ (8006920 <HAL_GPIO_Init+0x2d0>)
 80068d0:	4013      	ands	r3, r2
 80068d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d021      	beq.n	8006924 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80068e0:	4b0f      	ldr	r3, [pc, #60]	@ (8006920 <HAL_GPIO_Init+0x2d0>)
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	490e      	ldr	r1, [pc, #56]	@ (8006920 <HAL_GPIO_Init+0x2d0>)
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	600b      	str	r3, [r1, #0]
 80068ec:	e021      	b.n	8006932 <HAL_GPIO_Init+0x2e2>
 80068ee:	bf00      	nop
 80068f0:	10320000 	.word	0x10320000
 80068f4:	10310000 	.word	0x10310000
 80068f8:	10220000 	.word	0x10220000
 80068fc:	10210000 	.word	0x10210000
 8006900:	10120000 	.word	0x10120000
 8006904:	10110000 	.word	0x10110000
 8006908:	40021000 	.word	0x40021000
 800690c:	40010000 	.word	0x40010000
 8006910:	40010800 	.word	0x40010800
 8006914:	40010c00 	.word	0x40010c00
 8006918:	40011000 	.word	0x40011000
 800691c:	40011400 	.word	0x40011400
 8006920:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006924:	4b0b      	ldr	r3, [pc, #44]	@ (8006954 <HAL_GPIO_Init+0x304>)
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	43db      	mvns	r3, r3
 800692c:	4909      	ldr	r1, [pc, #36]	@ (8006954 <HAL_GPIO_Init+0x304>)
 800692e:	4013      	ands	r3, r2
 8006930:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006934:	3301      	adds	r3, #1
 8006936:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693e:	fa22 f303 	lsr.w	r3, r2, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	f47f ae8e 	bne.w	8006664 <HAL_GPIO_Init+0x14>
  }
}
 8006948:	bf00      	nop
 800694a:	bf00      	nop
 800694c:	372c      	adds	r7, #44	@ 0x2c
 800694e:	46bd      	mov	sp, r7
 8006950:	bc80      	pop	{r7}
 8006952:	4770      	bx	lr
 8006954:	40010400 	.word	0x40010400

08006958 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d101      	bne.n	800696a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e12b      	b.n	8006bc2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	d106      	bne.n	8006984 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7fa fd1c 	bl	80013bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2224      	movs	r2, #36	@ 0x24
 8006988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f022 0201 	bic.w	r2, r2, #1
 800699a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80069aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80069ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80069bc:	f001 fbe2 	bl	8008184 <HAL_RCC_GetPCLK1Freq>
 80069c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	4a81      	ldr	r2, [pc, #516]	@ (8006bcc <HAL_I2C_Init+0x274>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d807      	bhi.n	80069dc <HAL_I2C_Init+0x84>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4a80      	ldr	r2, [pc, #512]	@ (8006bd0 <HAL_I2C_Init+0x278>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	bf94      	ite	ls
 80069d4:	2301      	movls	r3, #1
 80069d6:	2300      	movhi	r3, #0
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	e006      	b.n	80069ea <HAL_I2C_Init+0x92>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4a7d      	ldr	r2, [pc, #500]	@ (8006bd4 <HAL_I2C_Init+0x27c>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	bf94      	ite	ls
 80069e4:	2301      	movls	r3, #1
 80069e6:	2300      	movhi	r3, #0
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d001      	beq.n	80069f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e0e7      	b.n	8006bc2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	4a78      	ldr	r2, [pc, #480]	@ (8006bd8 <HAL_I2C_Init+0x280>)
 80069f6:	fba2 2303 	umull	r2, r3, r2, r3
 80069fa:	0c9b      	lsrs	r3, r3, #18
 80069fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6a1b      	ldr	r3, [r3, #32]
 8006a18:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	4a6a      	ldr	r2, [pc, #424]	@ (8006bcc <HAL_I2C_Init+0x274>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d802      	bhi.n	8006a2c <HAL_I2C_Init+0xd4>
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	e009      	b.n	8006a40 <HAL_I2C_Init+0xe8>
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006a32:	fb02 f303 	mul.w	r3, r2, r3
 8006a36:	4a69      	ldr	r2, [pc, #420]	@ (8006bdc <HAL_I2C_Init+0x284>)
 8006a38:	fba2 2303 	umull	r2, r3, r2, r3
 8006a3c:	099b      	lsrs	r3, r3, #6
 8006a3e:	3301      	adds	r3, #1
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	6812      	ldr	r2, [r2, #0]
 8006a44:	430b      	orrs	r3, r1
 8006a46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006a52:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	495c      	ldr	r1, [pc, #368]	@ (8006bcc <HAL_I2C_Init+0x274>)
 8006a5c:	428b      	cmp	r3, r1
 8006a5e:	d819      	bhi.n	8006a94 <HAL_I2C_Init+0x13c>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	1e59      	subs	r1, r3, #1
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a6e:	1c59      	adds	r1, r3, #1
 8006a70:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006a74:	400b      	ands	r3, r1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00a      	beq.n	8006a90 <HAL_I2C_Init+0x138>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	1e59      	subs	r1, r3, #1
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	005b      	lsls	r3, r3, #1
 8006a84:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a88:	3301      	adds	r3, #1
 8006a8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a8e:	e051      	b.n	8006b34 <HAL_I2C_Init+0x1dc>
 8006a90:	2304      	movs	r3, #4
 8006a92:	e04f      	b.n	8006b34 <HAL_I2C_Init+0x1dc>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d111      	bne.n	8006ac0 <HAL_I2C_Init+0x168>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	1e58      	subs	r0, r3, #1
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6859      	ldr	r1, [r3, #4]
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	005b      	lsls	r3, r3, #1
 8006aa8:	440b      	add	r3, r1
 8006aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8006aae:	3301      	adds	r3, #1
 8006ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	bf0c      	ite	eq
 8006ab8:	2301      	moveq	r3, #1
 8006aba:	2300      	movne	r3, #0
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	e012      	b.n	8006ae6 <HAL_I2C_Init+0x18e>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	1e58      	subs	r0, r3, #1
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6859      	ldr	r1, [r3, #4]
 8006ac8:	460b      	mov	r3, r1
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	440b      	add	r3, r1
 8006ace:	0099      	lsls	r1, r3, #2
 8006ad0:	440b      	add	r3, r1
 8006ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	bf0c      	ite	eq
 8006ae0:	2301      	moveq	r3, #1
 8006ae2:	2300      	movne	r3, #0
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d001      	beq.n	8006aee <HAL_I2C_Init+0x196>
 8006aea:	2301      	movs	r3, #1
 8006aec:	e022      	b.n	8006b34 <HAL_I2C_Init+0x1dc>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10e      	bne.n	8006b14 <HAL_I2C_Init+0x1bc>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	1e58      	subs	r0, r3, #1
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6859      	ldr	r1, [r3, #4]
 8006afe:	460b      	mov	r3, r1
 8006b00:	005b      	lsls	r3, r3, #1
 8006b02:	440b      	add	r3, r1
 8006b04:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b08:	3301      	adds	r3, #1
 8006b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b12:	e00f      	b.n	8006b34 <HAL_I2C_Init+0x1dc>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	1e58      	subs	r0, r3, #1
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6859      	ldr	r1, [r3, #4]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	440b      	add	r3, r1
 8006b22:	0099      	lsls	r1, r3, #2
 8006b24:	440b      	add	r3, r1
 8006b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b34:	6879      	ldr	r1, [r7, #4]
 8006b36:	6809      	ldr	r1, [r1, #0]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	69da      	ldr	r2, [r3, #28]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	430a      	orrs	r2, r1
 8006b56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006b62:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	6911      	ldr	r1, [r2, #16]
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	68d2      	ldr	r2, [r2, #12]
 8006b6e:	4311      	orrs	r1, r2
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	6812      	ldr	r2, [r2, #0]
 8006b74:	430b      	orrs	r3, r1
 8006b76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	695a      	ldr	r2, [r3, #20]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	431a      	orrs	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	430a      	orrs	r2, r1
 8006b92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f042 0201 	orr.w	r2, r2, #1
 8006ba2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2220      	movs	r2, #32
 8006bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	000186a0 	.word	0x000186a0
 8006bd0:	001e847f 	.word	0x001e847f
 8006bd4:	003d08ff 	.word	0x003d08ff
 8006bd8:	431bde83 	.word	0x431bde83
 8006bdc:	10624dd3 	.word	0x10624dd3

08006be0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b088      	sub	sp, #32
 8006be4:	af02      	add	r7, sp, #8
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	607a      	str	r2, [r7, #4]
 8006bea:	461a      	mov	r2, r3
 8006bec:	460b      	mov	r3, r1
 8006bee:	817b      	strh	r3, [r7, #10]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006bf4:	f7ff f94e 	bl	8005e94 <HAL_GetTick>
 8006bf8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b20      	cmp	r3, #32
 8006c04:	f040 80e0 	bne.w	8006dc8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	2319      	movs	r3, #25
 8006c0e:	2201      	movs	r2, #1
 8006c10:	4970      	ldr	r1, [pc, #448]	@ (8006dd4 <HAL_I2C_Master_Transmit+0x1f4>)
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f000 fcb6 	bl	8007584 <I2C_WaitOnFlagUntilTimeout>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d001      	beq.n	8006c22 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006c1e:	2302      	movs	r3, #2
 8006c20:	e0d3      	b.n	8006dca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d101      	bne.n	8006c30 <HAL_I2C_Master_Transmit+0x50>
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	e0cc      	b.n	8006dca <HAL_I2C_Master_Transmit+0x1ea>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0301 	and.w	r3, r3, #1
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d007      	beq.n	8006c56 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f042 0201 	orr.w	r2, r2, #1
 8006c54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2221      	movs	r2, #33	@ 0x21
 8006c6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2210      	movs	r2, #16
 8006c72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	893a      	ldrh	r2, [r7, #8]
 8006c86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	4a50      	ldr	r2, [pc, #320]	@ (8006dd8 <HAL_I2C_Master_Transmit+0x1f8>)
 8006c96:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006c98:	8979      	ldrh	r1, [r7, #10]
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	6a3a      	ldr	r2, [r7, #32]
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f000 fb20 	bl	80072e4 <I2C_MasterRequestWrite>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d001      	beq.n	8006cae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e08d      	b.n	8006dca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cae:	2300      	movs	r3, #0
 8006cb0:	613b      	str	r3, [r7, #16]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	695b      	ldr	r3, [r3, #20]
 8006cb8:	613b      	str	r3, [r7, #16]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	613b      	str	r3, [r7, #16]
 8006cc2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006cc4:	e066      	b.n	8006d94 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	6a39      	ldr	r1, [r7, #32]
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f000 fd74 	bl	80077b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00d      	beq.n	8006cf2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cda:	2b04      	cmp	r3, #4
 8006cdc:	d107      	bne.n	8006cee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e06b      	b.n	8006dca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf6:	781a      	ldrb	r2, [r3, #0]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d02:	1c5a      	adds	r2, r3, #1
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	b29a      	uxth	r2, r3
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	f003 0304 	and.w	r3, r3, #4
 8006d2c:	2b04      	cmp	r3, #4
 8006d2e:	d11b      	bne.n	8006d68 <HAL_I2C_Master_Transmit+0x188>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d017      	beq.n	8006d68 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d3c:	781a      	ldrb	r2, [r3, #0]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d48:	1c5a      	adds	r2, r3, #1
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	3b01      	subs	r3, #1
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d60:	3b01      	subs	r3, #1
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	6a39      	ldr	r1, [r7, #32]
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f000 fd6b 	bl	8007848 <I2C_WaitOnBTFFlagUntilTimeout>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00d      	beq.n	8006d94 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d7c:	2b04      	cmp	r3, #4
 8006d7e:	d107      	bne.n	8006d90 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d8e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e01a      	b.n	8006dca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d194      	bne.n	8006cc6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006daa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2220      	movs	r2, #32
 8006db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	e000      	b.n	8006dca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006dc8:	2302      	movs	r3, #2
  }
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3718      	adds	r7, #24
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	00100002 	.word	0x00100002
 8006dd8:	ffff0000 	.word	0xffff0000

08006ddc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b08c      	sub	sp, #48	@ 0x30
 8006de0:	af02      	add	r7, sp, #8
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	607a      	str	r2, [r7, #4]
 8006de6:	461a      	mov	r2, r3
 8006de8:	460b      	mov	r3, r1
 8006dea:	817b      	strh	r3, [r7, #10]
 8006dec:	4613      	mov	r3, r2
 8006dee:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006df0:	2300      	movs	r3, #0
 8006df2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006df4:	f7ff f84e 	bl	8005e94 <HAL_GetTick>
 8006df8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b20      	cmp	r3, #32
 8006e04:	f040 824b 	bne.w	800729e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	2319      	movs	r3, #25
 8006e0e:	2201      	movs	r2, #1
 8006e10:	497f      	ldr	r1, [pc, #508]	@ (8007010 <HAL_I2C_Master_Receive+0x234>)
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f000 fbb6 	bl	8007584 <I2C_WaitOnFlagUntilTimeout>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d001      	beq.n	8006e22 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8006e1e:	2302      	movs	r3, #2
 8006e20:	e23e      	b.n	80072a0 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d101      	bne.n	8006e30 <HAL_I2C_Master_Receive+0x54>
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	e237      	b.n	80072a0 <HAL_I2C_Master_Receive+0x4c4>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 0301 	and.w	r3, r3, #1
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d007      	beq.n	8006e56 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f042 0201 	orr.w	r2, r2, #1
 8006e54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2222      	movs	r2, #34	@ 0x22
 8006e6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2210      	movs	r2, #16
 8006e72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	893a      	ldrh	r2, [r7, #8]
 8006e86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	4a5f      	ldr	r2, [pc, #380]	@ (8007014 <HAL_I2C_Master_Receive+0x238>)
 8006e96:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006e98:	8979      	ldrh	r1, [r7, #10]
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f000 faa2 	bl	80073e8 <I2C_MasterRequestRead>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d001      	beq.n	8006eae <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e1f8      	b.n	80072a0 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d113      	bne.n	8006ede <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	61fb      	str	r3, [r7, #28]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	695b      	ldr	r3, [r3, #20]
 8006ec0:	61fb      	str	r3, [r7, #28]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	61fb      	str	r3, [r7, #28]
 8006eca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006eda:	601a      	str	r2, [r3, #0]
 8006edc:	e1cc      	b.n	8007278 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d11e      	bne.n	8006f24 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ef4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006ef6:	b672      	cpsid	i
}
 8006ef8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006efa:	2300      	movs	r3, #0
 8006efc:	61bb      	str	r3, [r7, #24]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	695b      	ldr	r3, [r3, #20]
 8006f04:	61bb      	str	r3, [r7, #24]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	61bb      	str	r3, [r7, #24]
 8006f0e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006f20:	b662      	cpsie	i
}
 8006f22:	e035      	b.n	8006f90 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d11e      	bne.n	8006f6a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f3a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006f3c:	b672      	cpsid	i
}
 8006f3e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f40:	2300      	movs	r3, #0
 8006f42:	617b      	str	r3, [r7, #20]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	617b      	str	r3, [r7, #20]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	617b      	str	r3, [r7, #20]
 8006f54:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f64:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006f66:	b662      	cpsie	i
}
 8006f68:	e012      	b.n	8006f90 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006f78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	613b      	str	r3, [r7, #16]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	695b      	ldr	r3, [r3, #20]
 8006f84:	613b      	str	r3, [r7, #16]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	613b      	str	r3, [r7, #16]
 8006f8e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8006f90:	e172      	b.n	8007278 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f96:	2b03      	cmp	r3, #3
 8006f98:	f200 811f 	bhi.w	80071da <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d123      	bne.n	8006fec <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fa6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f000 fc95 	bl	80078d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d001      	beq.n	8006fb8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e173      	b.n	80072a0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	691a      	ldr	r2, [r3, #16]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fc2:	b2d2      	uxtb	r2, r2
 8006fc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fca:	1c5a      	adds	r2, r3, #1
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006fea:	e145      	b.n	8007278 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d152      	bne.n	800709a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff6:	9300      	str	r3, [sp, #0]
 8006ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	4906      	ldr	r1, [pc, #24]	@ (8007018 <HAL_I2C_Master_Receive+0x23c>)
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f000 fac0 	bl	8007584 <I2C_WaitOnFlagUntilTimeout>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d008      	beq.n	800701c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e148      	b.n	80072a0 <HAL_I2C_Master_Receive+0x4c4>
 800700e:	bf00      	nop
 8007010:	00100002 	.word	0x00100002
 8007014:	ffff0000 	.word	0xffff0000
 8007018:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800701c:	b672      	cpsid	i
}
 800701e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800702e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	691a      	ldr	r2, [r3, #16]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800703a:	b2d2      	uxtb	r2, r2
 800703c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007042:	1c5a      	adds	r2, r3, #1
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800704c:	3b01      	subs	r3, #1
 800704e:	b29a      	uxth	r2, r3
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007058:	b29b      	uxth	r3, r3
 800705a:	3b01      	subs	r3, #1
 800705c:	b29a      	uxth	r2, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007062:	b662      	cpsie	i
}
 8007064:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	691a      	ldr	r2, [r3, #16]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007070:	b2d2      	uxtb	r2, r2
 8007072:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007078:	1c5a      	adds	r2, r3, #1
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007082:	3b01      	subs	r3, #1
 8007084:	b29a      	uxth	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800708e:	b29b      	uxth	r3, r3
 8007090:	3b01      	subs	r3, #1
 8007092:	b29a      	uxth	r2, r3
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007098:	e0ee      	b.n	8007278 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800709a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a0:	2200      	movs	r2, #0
 80070a2:	4981      	ldr	r1, [pc, #516]	@ (80072a8 <HAL_I2C_Master_Receive+0x4cc>)
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f000 fa6d 	bl	8007584 <I2C_WaitOnFlagUntilTimeout>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d001      	beq.n	80070b4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e0f5      	b.n	80072a0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80070c4:	b672      	cpsid	i
}
 80070c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	691a      	ldr	r2, [r3, #16]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d2:	b2d2      	uxtb	r2, r2
 80070d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070da:	1c5a      	adds	r2, r3, #1
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070e4:	3b01      	subs	r3, #1
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	3b01      	subs	r3, #1
 80070f4:	b29a      	uxth	r2, r3
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80070fa:	4b6c      	ldr	r3, [pc, #432]	@ (80072ac <HAL_I2C_Master_Receive+0x4d0>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	08db      	lsrs	r3, r3, #3
 8007100:	4a6b      	ldr	r2, [pc, #428]	@ (80072b0 <HAL_I2C_Master_Receive+0x4d4>)
 8007102:	fba2 2303 	umull	r2, r3, r2, r3
 8007106:	0a1a      	lsrs	r2, r3, #8
 8007108:	4613      	mov	r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	4413      	add	r3, r2
 800710e:	00da      	lsls	r2, r3, #3
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8007114:	6a3b      	ldr	r3, [r7, #32]
 8007116:	3b01      	subs	r3, #1
 8007118:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800711a:	6a3b      	ldr	r3, [r7, #32]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d118      	bne.n	8007152 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2220      	movs	r2, #32
 800712a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800713a:	f043 0220 	orr.w	r2, r3, #32
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8007142:	b662      	cpsie	i
}
 8007144:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e0a6      	b.n	80072a0 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	695b      	ldr	r3, [r3, #20]
 8007158:	f003 0304 	and.w	r3, r3, #4
 800715c:	2b04      	cmp	r3, #4
 800715e:	d1d9      	bne.n	8007114 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800716e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	691a      	ldr	r2, [r3, #16]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800717a:	b2d2      	uxtb	r2, r2
 800717c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007182:	1c5a      	adds	r2, r3, #1
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800718c:	3b01      	subs	r3, #1
 800718e:	b29a      	uxth	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007198:	b29b      	uxth	r3, r3
 800719a:	3b01      	subs	r3, #1
 800719c:	b29a      	uxth	r2, r3
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80071a2:	b662      	cpsie	i
}
 80071a4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	691a      	ldr	r2, [r3, #16]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b0:	b2d2      	uxtb	r2, r2
 80071b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b8:	1c5a      	adds	r2, r3, #1
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071c2:	3b01      	subs	r3, #1
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	3b01      	subs	r3, #1
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80071d8:	e04e      	b.n	8007278 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f000 fb7a 	bl	80078d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d001      	beq.n	80071ee <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e058      	b.n	80072a0 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	691a      	ldr	r2, [r3, #16]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f8:	b2d2      	uxtb	r2, r2
 80071fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007200:	1c5a      	adds	r2, r3, #1
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800720a:	3b01      	subs	r3, #1
 800720c:	b29a      	uxth	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007216:	b29b      	uxth	r3, r3
 8007218:	3b01      	subs	r3, #1
 800721a:	b29a      	uxth	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	f003 0304 	and.w	r3, r3, #4
 800722a:	2b04      	cmp	r3, #4
 800722c:	d124      	bne.n	8007278 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007232:	2b03      	cmp	r3, #3
 8007234:	d107      	bne.n	8007246 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007244:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	691a      	ldr	r2, [r3, #16]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007250:	b2d2      	uxtb	r2, r2
 8007252:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007258:	1c5a      	adds	r2, r3, #1
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007262:	3b01      	subs	r3, #1
 8007264:	b29a      	uxth	r2, r3
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800726e:	b29b      	uxth	r3, r3
 8007270:	3b01      	subs	r3, #1
 8007272:	b29a      	uxth	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800727c:	2b00      	cmp	r3, #0
 800727e:	f47f ae88 	bne.w	8006f92 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2220      	movs	r2, #32
 8007286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	e000      	b.n	80072a0 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800729e:	2302      	movs	r3, #2
  }
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3728      	adds	r7, #40	@ 0x28
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	00010004 	.word	0x00010004
 80072ac:	2000000c 	.word	0x2000000c
 80072b0:	14f8b589 	.word	0x14f8b589

080072b4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072c2:	b2db      	uxtb	r3, r3
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bc80      	pop	{r7}
 80072cc:	4770      	bx	lr

080072ce <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80072ce:	b480      	push	{r7}
 80072d0:	b083      	sub	sp, #12
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80072da:	4618      	mov	r0, r3
 80072dc:	370c      	adds	r7, #12
 80072de:	46bd      	mov	sp, r7
 80072e0:	bc80      	pop	{r7}
 80072e2:	4770      	bx	lr

080072e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b088      	sub	sp, #32
 80072e8:	af02      	add	r7, sp, #8
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	607a      	str	r2, [r7, #4]
 80072ee:	603b      	str	r3, [r7, #0]
 80072f0:	460b      	mov	r3, r1
 80072f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	2b08      	cmp	r3, #8
 80072fe:	d006      	beq.n	800730e <I2C_MasterRequestWrite+0x2a>
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d003      	beq.n	800730e <I2C_MasterRequestWrite+0x2a>
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800730c:	d108      	bne.n	8007320 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800731c:	601a      	str	r2, [r3, #0]
 800731e:	e00b      	b.n	8007338 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007324:	2b12      	cmp	r3, #18
 8007326:	d107      	bne.n	8007338 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007336:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f000 f91d 	bl	8007584 <I2C_WaitOnFlagUntilTimeout>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00d      	beq.n	800736c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800735a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800735e:	d103      	bne.n	8007368 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007366:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007368:	2303      	movs	r3, #3
 800736a:	e035      	b.n	80073d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007374:	d108      	bne.n	8007388 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007376:	897b      	ldrh	r3, [r7, #10]
 8007378:	b2db      	uxtb	r3, r3
 800737a:	461a      	mov	r2, r3
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007384:	611a      	str	r2, [r3, #16]
 8007386:	e01b      	b.n	80073c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007388:	897b      	ldrh	r3, [r7, #10]
 800738a:	11db      	asrs	r3, r3, #7
 800738c:	b2db      	uxtb	r3, r3
 800738e:	f003 0306 	and.w	r3, r3, #6
 8007392:	b2db      	uxtb	r3, r3
 8007394:	f063 030f 	orn	r3, r3, #15
 8007398:	b2da      	uxtb	r2, r3
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	490e      	ldr	r1, [pc, #56]	@ (80073e0 <I2C_MasterRequestWrite+0xfc>)
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f000 f966 	bl	8007678 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d001      	beq.n	80073b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e010      	b.n	80073d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80073b6:	897b      	ldrh	r3, [r7, #10]
 80073b8:	b2da      	uxtb	r2, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	4907      	ldr	r1, [pc, #28]	@ (80073e4 <I2C_MasterRequestWrite+0x100>)
 80073c6:	68f8      	ldr	r0, [r7, #12]
 80073c8:	f000 f956 	bl	8007678 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d001      	beq.n	80073d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e000      	b.n	80073d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3718      	adds	r7, #24
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	00010008 	.word	0x00010008
 80073e4:	00010002 	.word	0x00010002

080073e8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b088      	sub	sp, #32
 80073ec:	af02      	add	r7, sp, #8
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	607a      	str	r2, [r7, #4]
 80073f2:	603b      	str	r3, [r7, #0]
 80073f4:	460b      	mov	r3, r1
 80073f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073fc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800740c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	2b08      	cmp	r3, #8
 8007412:	d006      	beq.n	8007422 <I2C_MasterRequestRead+0x3a>
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	2b01      	cmp	r3, #1
 8007418:	d003      	beq.n	8007422 <I2C_MasterRequestRead+0x3a>
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007420:	d108      	bne.n	8007434 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007430:	601a      	str	r2, [r3, #0]
 8007432:	e00b      	b.n	800744c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007438:	2b11      	cmp	r3, #17
 800743a:	d107      	bne.n	800744c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800744a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	9300      	str	r3, [sp, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f000 f893 	bl	8007584 <I2C_WaitOnFlagUntilTimeout>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00d      	beq.n	8007480 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800746e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007472:	d103      	bne.n	800747c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800747a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e079      	b.n	8007574 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007488:	d108      	bne.n	800749c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800748a:	897b      	ldrh	r3, [r7, #10]
 800748c:	b2db      	uxtb	r3, r3
 800748e:	f043 0301 	orr.w	r3, r3, #1
 8007492:	b2da      	uxtb	r2, r3
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	611a      	str	r2, [r3, #16]
 800749a:	e05f      	b.n	800755c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800749c:	897b      	ldrh	r3, [r7, #10]
 800749e:	11db      	asrs	r3, r3, #7
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	f003 0306 	and.w	r3, r3, #6
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	f063 030f 	orn	r3, r3, #15
 80074ac:	b2da      	uxtb	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	4930      	ldr	r1, [pc, #192]	@ (800757c <I2C_MasterRequestRead+0x194>)
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f000 f8dc 	bl	8007678 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e054      	b.n	8007574 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80074ca:	897b      	ldrh	r3, [r7, #10]
 80074cc:	b2da      	uxtb	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	4929      	ldr	r1, [pc, #164]	@ (8007580 <I2C_MasterRequestRead+0x198>)
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f000 f8cc 	bl	8007678 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d001      	beq.n	80074ea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e044      	b.n	8007574 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074ea:	2300      	movs	r3, #0
 80074ec:	613b      	str	r3, [r7, #16]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	695b      	ldr	r3, [r3, #20]
 80074f4:	613b      	str	r3, [r7, #16]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	613b      	str	r3, [r7, #16]
 80074fe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800750e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	9300      	str	r3, [sp, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f000 f831 	bl	8007584 <I2C_WaitOnFlagUntilTimeout>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00d      	beq.n	8007544 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007532:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007536:	d103      	bne.n	8007540 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800753e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8007540:	2303      	movs	r3, #3
 8007542:	e017      	b.n	8007574 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007544:	897b      	ldrh	r3, [r7, #10]
 8007546:	11db      	asrs	r3, r3, #7
 8007548:	b2db      	uxtb	r3, r3
 800754a:	f003 0306 	and.w	r3, r3, #6
 800754e:	b2db      	uxtb	r3, r3
 8007550:	f063 030e 	orn	r3, r3, #14
 8007554:	b2da      	uxtb	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	4907      	ldr	r1, [pc, #28]	@ (8007580 <I2C_MasterRequestRead+0x198>)
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f000 f888 	bl	8007678 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d001      	beq.n	8007572 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e000      	b.n	8007574 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3718      	adds	r7, #24
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}
 800757c:	00010008 	.word	0x00010008
 8007580:	00010002 	.word	0x00010002

08007584 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	603b      	str	r3, [r7, #0]
 8007590:	4613      	mov	r3, r2
 8007592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007594:	e048      	b.n	8007628 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800759c:	d044      	beq.n	8007628 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800759e:	f7fe fc79 	bl	8005e94 <HAL_GetTick>
 80075a2:	4602      	mov	r2, r0
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	683a      	ldr	r2, [r7, #0]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d302      	bcc.n	80075b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d139      	bne.n	8007628 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	0c1b      	lsrs	r3, r3, #16
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d10d      	bne.n	80075da <I2C_WaitOnFlagUntilTimeout+0x56>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	43da      	mvns	r2, r3
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	4013      	ands	r3, r2
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	bf0c      	ite	eq
 80075d0:	2301      	moveq	r3, #1
 80075d2:	2300      	movne	r3, #0
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	461a      	mov	r2, r3
 80075d8:	e00c      	b.n	80075f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	43da      	mvns	r2, r3
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	4013      	ands	r3, r2
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	bf0c      	ite	eq
 80075ec:	2301      	moveq	r3, #1
 80075ee:	2300      	movne	r3, #0
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	461a      	mov	r2, r3
 80075f4:	79fb      	ldrb	r3, [r7, #7]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d116      	bne.n	8007628 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2220      	movs	r2, #32
 8007604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007614:	f043 0220 	orr.w	r2, r3, #32
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e023      	b.n	8007670 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	0c1b      	lsrs	r3, r3, #16
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b01      	cmp	r3, #1
 8007630:	d10d      	bne.n	800764e <I2C_WaitOnFlagUntilTimeout+0xca>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	695b      	ldr	r3, [r3, #20]
 8007638:	43da      	mvns	r2, r3
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	4013      	ands	r3, r2
 800763e:	b29b      	uxth	r3, r3
 8007640:	2b00      	cmp	r3, #0
 8007642:	bf0c      	ite	eq
 8007644:	2301      	moveq	r3, #1
 8007646:	2300      	movne	r3, #0
 8007648:	b2db      	uxtb	r3, r3
 800764a:	461a      	mov	r2, r3
 800764c:	e00c      	b.n	8007668 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	43da      	mvns	r2, r3
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	4013      	ands	r3, r2
 800765a:	b29b      	uxth	r3, r3
 800765c:	2b00      	cmp	r3, #0
 800765e:	bf0c      	ite	eq
 8007660:	2301      	moveq	r3, #1
 8007662:	2300      	movne	r3, #0
 8007664:	b2db      	uxtb	r3, r3
 8007666:	461a      	mov	r2, r3
 8007668:	79fb      	ldrb	r3, [r7, #7]
 800766a:	429a      	cmp	r2, r3
 800766c:	d093      	beq.n	8007596 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
 8007684:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007686:	e071      	b.n	800776c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007692:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007696:	d123      	bne.n	80076e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80076b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2220      	movs	r2, #32
 80076bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076cc:	f043 0204 	orr.w	r2, r3, #4
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e067      	b.n	80077b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076e6:	d041      	beq.n	800776c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076e8:	f7fe fbd4 	bl	8005e94 <HAL_GetTick>
 80076ec:	4602      	mov	r2, r0
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d302      	bcc.n	80076fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d136      	bne.n	800776c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	0c1b      	lsrs	r3, r3, #16
 8007702:	b2db      	uxtb	r3, r3
 8007704:	2b01      	cmp	r3, #1
 8007706:	d10c      	bne.n	8007722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	43da      	mvns	r2, r3
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	4013      	ands	r3, r2
 8007714:	b29b      	uxth	r3, r3
 8007716:	2b00      	cmp	r3, #0
 8007718:	bf14      	ite	ne
 800771a:	2301      	movne	r3, #1
 800771c:	2300      	moveq	r3, #0
 800771e:	b2db      	uxtb	r3, r3
 8007720:	e00b      	b.n	800773a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	43da      	mvns	r2, r3
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	4013      	ands	r3, r2
 800772e:	b29b      	uxth	r3, r3
 8007730:	2b00      	cmp	r3, #0
 8007732:	bf14      	ite	ne
 8007734:	2301      	movne	r3, #1
 8007736:	2300      	moveq	r3, #0
 8007738:	b2db      	uxtb	r3, r3
 800773a:	2b00      	cmp	r3, #0
 800773c:	d016      	beq.n	800776c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2220      	movs	r2, #32
 8007748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007758:	f043 0220 	orr.w	r2, r3, #32
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e021      	b.n	80077b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	0c1b      	lsrs	r3, r3, #16
 8007770:	b2db      	uxtb	r3, r3
 8007772:	2b01      	cmp	r3, #1
 8007774:	d10c      	bne.n	8007790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	695b      	ldr	r3, [r3, #20]
 800777c:	43da      	mvns	r2, r3
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	4013      	ands	r3, r2
 8007782:	b29b      	uxth	r3, r3
 8007784:	2b00      	cmp	r3, #0
 8007786:	bf14      	ite	ne
 8007788:	2301      	movne	r3, #1
 800778a:	2300      	moveq	r3, #0
 800778c:	b2db      	uxtb	r3, r3
 800778e:	e00b      	b.n	80077a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	43da      	mvns	r2, r3
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	4013      	ands	r3, r2
 800779c:	b29b      	uxth	r3, r3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	bf14      	ite	ne
 80077a2:	2301      	movne	r3, #1
 80077a4:	2300      	moveq	r3, #0
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f47f af6d 	bne.w	8007688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80077c4:	e034      	b.n	8007830 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f000 f8e3 	bl	8007992 <I2C_IsAcknowledgeFailed>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e034      	b.n	8007840 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077dc:	d028      	beq.n	8007830 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077de:	f7fe fb59 	bl	8005e94 <HAL_GetTick>
 80077e2:	4602      	mov	r2, r0
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d302      	bcc.n	80077f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d11d      	bne.n	8007830 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077fe:	2b80      	cmp	r3, #128	@ 0x80
 8007800:	d016      	beq.n	8007830 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2220      	movs	r2, #32
 800780c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800781c:	f043 0220 	orr.w	r2, r3, #32
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e007      	b.n	8007840 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800783a:	2b80      	cmp	r3, #128	@ 0x80
 800783c:	d1c3      	bne.n	80077c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007854:	e034      	b.n	80078c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f000 f89b 	bl	8007992 <I2C_IsAcknowledgeFailed>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d001      	beq.n	8007866 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e034      	b.n	80078d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800786c:	d028      	beq.n	80078c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800786e:	f7fe fb11 	bl	8005e94 <HAL_GetTick>
 8007872:	4602      	mov	r2, r0
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	429a      	cmp	r2, r3
 800787c:	d302      	bcc.n	8007884 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d11d      	bne.n	80078c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	f003 0304 	and.w	r3, r3, #4
 800788e:	2b04      	cmp	r3, #4
 8007890:	d016      	beq.n	80078c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2220      	movs	r2, #32
 800789c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ac:	f043 0220 	orr.w	r2, r3, #32
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e007      	b.n	80078d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	f003 0304 	and.w	r3, r3, #4
 80078ca:	2b04      	cmp	r3, #4
 80078cc:	d1c3      	bne.n	8007856 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80078e4:	e049      	b.n	800797a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	f003 0310 	and.w	r3, r3, #16
 80078f0:	2b10      	cmp	r3, #16
 80078f2:	d119      	bne.n	8007928 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f06f 0210 	mvn.w	r2, #16
 80078fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2220      	movs	r2, #32
 8007908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e030      	b.n	800798a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007928:	f7fe fab4 	bl	8005e94 <HAL_GetTick>
 800792c:	4602      	mov	r2, r0
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	429a      	cmp	r2, r3
 8007936:	d302      	bcc.n	800793e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d11d      	bne.n	800797a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	695b      	ldr	r3, [r3, #20]
 8007944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007948:	2b40      	cmp	r3, #64	@ 0x40
 800794a:	d016      	beq.n	800797a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2220      	movs	r2, #32
 8007956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007966:	f043 0220 	orr.w	r2, r3, #32
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e007      	b.n	800798a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	695b      	ldr	r3, [r3, #20]
 8007980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007984:	2b40      	cmp	r3, #64	@ 0x40
 8007986:	d1ae      	bne.n	80078e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007992:	b480      	push	{r7}
 8007994:	b083      	sub	sp, #12
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	695b      	ldr	r3, [r3, #20]
 80079a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079a8:	d11b      	bne.n	80079e2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80079b2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2220      	movs	r2, #32
 80079be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ce:	f043 0204 	orr.w	r2, r3, #4
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e000      	b.n	80079e4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bc80      	pop	{r7}
 80079ec:	4770      	bx	lr
	...

080079f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d101      	bne.n	8007a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	e272      	b.n	8007ee8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f003 0301 	and.w	r3, r3, #1
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f000 8087 	beq.w	8007b1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007a10:	4b92      	ldr	r3, [pc, #584]	@ (8007c5c <HAL_RCC_OscConfig+0x26c>)
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	f003 030c 	and.w	r3, r3, #12
 8007a18:	2b04      	cmp	r3, #4
 8007a1a:	d00c      	beq.n	8007a36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007a1c:	4b8f      	ldr	r3, [pc, #572]	@ (8007c5c <HAL_RCC_OscConfig+0x26c>)
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	f003 030c 	and.w	r3, r3, #12
 8007a24:	2b08      	cmp	r3, #8
 8007a26:	d112      	bne.n	8007a4e <HAL_RCC_OscConfig+0x5e>
 8007a28:	4b8c      	ldr	r3, [pc, #560]	@ (8007c5c <HAL_RCC_OscConfig+0x26c>)
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a34:	d10b      	bne.n	8007a4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a36:	4b89      	ldr	r3, [pc, #548]	@ (8007c5c <HAL_RCC_OscConfig+0x26c>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d06c      	beq.n	8007b1c <HAL_RCC_OscConfig+0x12c>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d168      	bne.n	8007b1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e24c      	b.n	8007ee8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a56:	d106      	bne.n	8007a66 <HAL_RCC_OscConfig+0x76>
 8007a58:	4b80      	ldr	r3, [pc, #512]	@ (8007c5c <HAL_RCC_OscConfig+0x26c>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a7f      	ldr	r2, [pc, #508]	@ (8007c5c <HAL_RCC_OscConfig+0x26c>)
 8007a5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a62:	6013      	str	r3, [r2, #0]
 8007a64:	e02e      	b.n	8007ac4 <HAL_RCC_OscConfig+0xd4>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10c      	bne.n	8007a88 <HAL_RCC_OscConfig+0x98>
 8007a6e:	4b7b      	ldr	r3, [pc, #492]	@ (8007c5c <HAL_RCC_OscConfig+0x26c>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a7a      	ldr	r2, [pc, #488]	@ (8007c5c <HAL_RCC_OscConfig+0x26c>)
 8007a74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a78:	6013      	str	r3, [r2, #0]
 8007a7a:	4b78      	ldr	r3, [pc, #480]	@ (8007c5c <HAL_RCC_OscConfig+0x26c>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a77      	ldr	r2, [pc, #476]	@ (8007c5c <HAL_RCC_OscConfig+0x26c>)
 8007a80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a84:	6013      	str	r3, [r2, #0]
 8007a86:	e01d      	b.n	8007ac4 <HAL_RCC_OscConfig+0xd4>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a90:	d10c      	bne.n	8007aac <HAL_RCC_OscConfig+0xbc>
 8007a92:	4b72      	ldr	r3, [pc, #456]	@ (8007c5c <HAL_RCC_OscConfig+0x26c>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a71      	ldr	r2, [pc, #452]	@ (8007c5c <HAL_RCC_OscConfig+0x26c>)
 8007a98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007a9c:	6013      	str	r3, [r2, #0]
 8007a9e:	4b6f      	ldr	r3, [pc, #444]	@ (8007c5c <HAL_RCC_OscConfig+0x26c>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a6e      	ldr	r2, [pc, #440]	@ (8007c5c <HAL_RCC_OscConfig+0x26c>)
 8007aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007aa8:	6013      	str	r3, [r2, #0]
 8007aaa:	e00b      	b.n	8007ac4 <HAL_RCC_OscConfig+0xd4>
 8007aac:	4b6b      	ldr	r3, [pc, #428]	@ (8007c5c <HAL_RCC_OscConfig+0x26c>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a6a      	ldr	r2, [pc, #424]	@ (8007c5c <HAL_RCC_OscConfig+0x26c>)
 8007ab2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ab6:	6013      	str	r3, [r2, #0]
 8007ab8:	4b68      	ldr	r3, [pc, #416]	@ (8007c5c <HAL_RCC_OscConfig+0x26c>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a67      	ldr	r2, [pc, #412]	@ (8007c5c <HAL_RCC_OscConfig+0x26c>)
 8007abe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007ac2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d013      	beq.n	8007af4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007acc:	f7fe f9e2 	bl	8005e94 <HAL_GetTick>
 8007ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ad2:	e008      	b.n	8007ae6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ad4:	f7fe f9de 	bl	8005e94 <HAL_GetTick>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	1ad3      	subs	r3, r2, r3
 8007ade:	2b64      	cmp	r3, #100	@ 0x64
 8007ae0:	d901      	bls.n	8007ae6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	e200      	b.n	8007ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ae6:	4b5d      	ldr	r3, [pc, #372]	@ (8007c5c <HAL_RCC_OscConfig+0x26c>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d0f0      	beq.n	8007ad4 <HAL_RCC_OscConfig+0xe4>
 8007af2:	e014      	b.n	8007b1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007af4:	f7fe f9ce 	bl	8005e94 <HAL_GetTick>
 8007af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007afa:	e008      	b.n	8007b0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007afc:	f7fe f9ca 	bl	8005e94 <HAL_GetTick>
 8007b00:	4602      	mov	r2, r0
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	2b64      	cmp	r3, #100	@ 0x64
 8007b08:	d901      	bls.n	8007b0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e1ec      	b.n	8007ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b0e:	4b53      	ldr	r3, [pc, #332]	@ (8007c5c <HAL_RCC_OscConfig+0x26c>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1f0      	bne.n	8007afc <HAL_RCC_OscConfig+0x10c>
 8007b1a:	e000      	b.n	8007b1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 0302 	and.w	r3, r3, #2
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d063      	beq.n	8007bf2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007b2a:	4b4c      	ldr	r3, [pc, #304]	@ (8007c5c <HAL_RCC_OscConfig+0x26c>)
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	f003 030c 	and.w	r3, r3, #12
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00b      	beq.n	8007b4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007b36:	4b49      	ldr	r3, [pc, #292]	@ (8007c5c <HAL_RCC_OscConfig+0x26c>)
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	f003 030c 	and.w	r3, r3, #12
 8007b3e:	2b08      	cmp	r3, #8
 8007b40:	d11c      	bne.n	8007b7c <HAL_RCC_OscConfig+0x18c>
 8007b42:	4b46      	ldr	r3, [pc, #280]	@ (8007c5c <HAL_RCC_OscConfig+0x26c>)
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d116      	bne.n	8007b7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b4e:	4b43      	ldr	r3, [pc, #268]	@ (8007c5c <HAL_RCC_OscConfig+0x26c>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 0302 	and.w	r3, r3, #2
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d005      	beq.n	8007b66 <HAL_RCC_OscConfig+0x176>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d001      	beq.n	8007b66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e1c0      	b.n	8007ee8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b66:	4b3d      	ldr	r3, [pc, #244]	@ (8007c5c <HAL_RCC_OscConfig+0x26c>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	00db      	lsls	r3, r3, #3
 8007b74:	4939      	ldr	r1, [pc, #228]	@ (8007c5c <HAL_RCC_OscConfig+0x26c>)
 8007b76:	4313      	orrs	r3, r2
 8007b78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b7a:	e03a      	b.n	8007bf2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d020      	beq.n	8007bc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b84:	4b36      	ldr	r3, [pc, #216]	@ (8007c60 <HAL_RCC_OscConfig+0x270>)
 8007b86:	2201      	movs	r2, #1
 8007b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b8a:	f7fe f983 	bl	8005e94 <HAL_GetTick>
 8007b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b90:	e008      	b.n	8007ba4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b92:	f7fe f97f 	bl	8005e94 <HAL_GetTick>
 8007b96:	4602      	mov	r2, r0
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	1ad3      	subs	r3, r2, r3
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d901      	bls.n	8007ba4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e1a1      	b.n	8007ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ba4:	4b2d      	ldr	r3, [pc, #180]	@ (8007c5c <HAL_RCC_OscConfig+0x26c>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 0302 	and.w	r3, r3, #2
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d0f0      	beq.n	8007b92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8007c5c <HAL_RCC_OscConfig+0x26c>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	00db      	lsls	r3, r3, #3
 8007bbe:	4927      	ldr	r1, [pc, #156]	@ (8007c5c <HAL_RCC_OscConfig+0x26c>)
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	600b      	str	r3, [r1, #0]
 8007bc4:	e015      	b.n	8007bf2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007bc6:	4b26      	ldr	r3, [pc, #152]	@ (8007c60 <HAL_RCC_OscConfig+0x270>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bcc:	f7fe f962 	bl	8005e94 <HAL_GetTick>
 8007bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bd2:	e008      	b.n	8007be6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bd4:	f7fe f95e 	bl	8005e94 <HAL_GetTick>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d901      	bls.n	8007be6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e180      	b.n	8007ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007be6:	4b1d      	ldr	r3, [pc, #116]	@ (8007c5c <HAL_RCC_OscConfig+0x26c>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 0302 	and.w	r3, r3, #2
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1f0      	bne.n	8007bd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 0308 	and.w	r3, r3, #8
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d03a      	beq.n	8007c74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	699b      	ldr	r3, [r3, #24]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d019      	beq.n	8007c3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c06:	4b17      	ldr	r3, [pc, #92]	@ (8007c64 <HAL_RCC_OscConfig+0x274>)
 8007c08:	2201      	movs	r2, #1
 8007c0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c0c:	f7fe f942 	bl	8005e94 <HAL_GetTick>
 8007c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c12:	e008      	b.n	8007c26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c14:	f7fe f93e 	bl	8005e94 <HAL_GetTick>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	1ad3      	subs	r3, r2, r3
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d901      	bls.n	8007c26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e160      	b.n	8007ee8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c26:	4b0d      	ldr	r3, [pc, #52]	@ (8007c5c <HAL_RCC_OscConfig+0x26c>)
 8007c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c2a:	f003 0302 	and.w	r3, r3, #2
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d0f0      	beq.n	8007c14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007c32:	2001      	movs	r0, #1
 8007c34:	f000 face 	bl	80081d4 <RCC_Delay>
 8007c38:	e01c      	b.n	8007c74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8007c64 <HAL_RCC_OscConfig+0x274>)
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c40:	f7fe f928 	bl	8005e94 <HAL_GetTick>
 8007c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c46:	e00f      	b.n	8007c68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c48:	f7fe f924 	bl	8005e94 <HAL_GetTick>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	1ad3      	subs	r3, r2, r3
 8007c52:	2b02      	cmp	r3, #2
 8007c54:	d908      	bls.n	8007c68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007c56:	2303      	movs	r3, #3
 8007c58:	e146      	b.n	8007ee8 <HAL_RCC_OscConfig+0x4f8>
 8007c5a:	bf00      	nop
 8007c5c:	40021000 	.word	0x40021000
 8007c60:	42420000 	.word	0x42420000
 8007c64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c68:	4b92      	ldr	r3, [pc, #584]	@ (8007eb4 <HAL_RCC_OscConfig+0x4c4>)
 8007c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c6c:	f003 0302 	and.w	r3, r3, #2
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1e9      	bne.n	8007c48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 0304 	and.w	r3, r3, #4
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f000 80a6 	beq.w	8007dce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c82:	2300      	movs	r3, #0
 8007c84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c86:	4b8b      	ldr	r3, [pc, #556]	@ (8007eb4 <HAL_RCC_OscConfig+0x4c4>)
 8007c88:	69db      	ldr	r3, [r3, #28]
 8007c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10d      	bne.n	8007cae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c92:	4b88      	ldr	r3, [pc, #544]	@ (8007eb4 <HAL_RCC_OscConfig+0x4c4>)
 8007c94:	69db      	ldr	r3, [r3, #28]
 8007c96:	4a87      	ldr	r2, [pc, #540]	@ (8007eb4 <HAL_RCC_OscConfig+0x4c4>)
 8007c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c9c:	61d3      	str	r3, [r2, #28]
 8007c9e:	4b85      	ldr	r3, [pc, #532]	@ (8007eb4 <HAL_RCC_OscConfig+0x4c4>)
 8007ca0:	69db      	ldr	r3, [r3, #28]
 8007ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ca6:	60bb      	str	r3, [r7, #8]
 8007ca8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007caa:	2301      	movs	r3, #1
 8007cac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cae:	4b82      	ldr	r3, [pc, #520]	@ (8007eb8 <HAL_RCC_OscConfig+0x4c8>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d118      	bne.n	8007cec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007cba:	4b7f      	ldr	r3, [pc, #508]	@ (8007eb8 <HAL_RCC_OscConfig+0x4c8>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a7e      	ldr	r2, [pc, #504]	@ (8007eb8 <HAL_RCC_OscConfig+0x4c8>)
 8007cc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007cc6:	f7fe f8e5 	bl	8005e94 <HAL_GetTick>
 8007cca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ccc:	e008      	b.n	8007ce0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cce:	f7fe f8e1 	bl	8005e94 <HAL_GetTick>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	2b64      	cmp	r3, #100	@ 0x64
 8007cda:	d901      	bls.n	8007ce0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e103      	b.n	8007ee8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ce0:	4b75      	ldr	r3, [pc, #468]	@ (8007eb8 <HAL_RCC_OscConfig+0x4c8>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d0f0      	beq.n	8007cce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d106      	bne.n	8007d02 <HAL_RCC_OscConfig+0x312>
 8007cf4:	4b6f      	ldr	r3, [pc, #444]	@ (8007eb4 <HAL_RCC_OscConfig+0x4c4>)
 8007cf6:	6a1b      	ldr	r3, [r3, #32]
 8007cf8:	4a6e      	ldr	r2, [pc, #440]	@ (8007eb4 <HAL_RCC_OscConfig+0x4c4>)
 8007cfa:	f043 0301 	orr.w	r3, r3, #1
 8007cfe:	6213      	str	r3, [r2, #32]
 8007d00:	e02d      	b.n	8007d5e <HAL_RCC_OscConfig+0x36e>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d10c      	bne.n	8007d24 <HAL_RCC_OscConfig+0x334>
 8007d0a:	4b6a      	ldr	r3, [pc, #424]	@ (8007eb4 <HAL_RCC_OscConfig+0x4c4>)
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	4a69      	ldr	r2, [pc, #420]	@ (8007eb4 <HAL_RCC_OscConfig+0x4c4>)
 8007d10:	f023 0301 	bic.w	r3, r3, #1
 8007d14:	6213      	str	r3, [r2, #32]
 8007d16:	4b67      	ldr	r3, [pc, #412]	@ (8007eb4 <HAL_RCC_OscConfig+0x4c4>)
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	4a66      	ldr	r2, [pc, #408]	@ (8007eb4 <HAL_RCC_OscConfig+0x4c4>)
 8007d1c:	f023 0304 	bic.w	r3, r3, #4
 8007d20:	6213      	str	r3, [r2, #32]
 8007d22:	e01c      	b.n	8007d5e <HAL_RCC_OscConfig+0x36e>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	2b05      	cmp	r3, #5
 8007d2a:	d10c      	bne.n	8007d46 <HAL_RCC_OscConfig+0x356>
 8007d2c:	4b61      	ldr	r3, [pc, #388]	@ (8007eb4 <HAL_RCC_OscConfig+0x4c4>)
 8007d2e:	6a1b      	ldr	r3, [r3, #32]
 8007d30:	4a60      	ldr	r2, [pc, #384]	@ (8007eb4 <HAL_RCC_OscConfig+0x4c4>)
 8007d32:	f043 0304 	orr.w	r3, r3, #4
 8007d36:	6213      	str	r3, [r2, #32]
 8007d38:	4b5e      	ldr	r3, [pc, #376]	@ (8007eb4 <HAL_RCC_OscConfig+0x4c4>)
 8007d3a:	6a1b      	ldr	r3, [r3, #32]
 8007d3c:	4a5d      	ldr	r2, [pc, #372]	@ (8007eb4 <HAL_RCC_OscConfig+0x4c4>)
 8007d3e:	f043 0301 	orr.w	r3, r3, #1
 8007d42:	6213      	str	r3, [r2, #32]
 8007d44:	e00b      	b.n	8007d5e <HAL_RCC_OscConfig+0x36e>
 8007d46:	4b5b      	ldr	r3, [pc, #364]	@ (8007eb4 <HAL_RCC_OscConfig+0x4c4>)
 8007d48:	6a1b      	ldr	r3, [r3, #32]
 8007d4a:	4a5a      	ldr	r2, [pc, #360]	@ (8007eb4 <HAL_RCC_OscConfig+0x4c4>)
 8007d4c:	f023 0301 	bic.w	r3, r3, #1
 8007d50:	6213      	str	r3, [r2, #32]
 8007d52:	4b58      	ldr	r3, [pc, #352]	@ (8007eb4 <HAL_RCC_OscConfig+0x4c4>)
 8007d54:	6a1b      	ldr	r3, [r3, #32]
 8007d56:	4a57      	ldr	r2, [pc, #348]	@ (8007eb4 <HAL_RCC_OscConfig+0x4c4>)
 8007d58:	f023 0304 	bic.w	r3, r3, #4
 8007d5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d015      	beq.n	8007d92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d66:	f7fe f895 	bl	8005e94 <HAL_GetTick>
 8007d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d6c:	e00a      	b.n	8007d84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d6e:	f7fe f891 	bl	8005e94 <HAL_GetTick>
 8007d72:	4602      	mov	r2, r0
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d901      	bls.n	8007d84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e0b1      	b.n	8007ee8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d84:	4b4b      	ldr	r3, [pc, #300]	@ (8007eb4 <HAL_RCC_OscConfig+0x4c4>)
 8007d86:	6a1b      	ldr	r3, [r3, #32]
 8007d88:	f003 0302 	and.w	r3, r3, #2
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d0ee      	beq.n	8007d6e <HAL_RCC_OscConfig+0x37e>
 8007d90:	e014      	b.n	8007dbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d92:	f7fe f87f 	bl	8005e94 <HAL_GetTick>
 8007d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d98:	e00a      	b.n	8007db0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d9a:	f7fe f87b 	bl	8005e94 <HAL_GetTick>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d901      	bls.n	8007db0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007dac:	2303      	movs	r3, #3
 8007dae:	e09b      	b.n	8007ee8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007db0:	4b40      	ldr	r3, [pc, #256]	@ (8007eb4 <HAL_RCC_OscConfig+0x4c4>)
 8007db2:	6a1b      	ldr	r3, [r3, #32]
 8007db4:	f003 0302 	and.w	r3, r3, #2
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1ee      	bne.n	8007d9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007dbc:	7dfb      	ldrb	r3, [r7, #23]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d105      	bne.n	8007dce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007dc2:	4b3c      	ldr	r3, [pc, #240]	@ (8007eb4 <HAL_RCC_OscConfig+0x4c4>)
 8007dc4:	69db      	ldr	r3, [r3, #28]
 8007dc6:	4a3b      	ldr	r2, [pc, #236]	@ (8007eb4 <HAL_RCC_OscConfig+0x4c4>)
 8007dc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007dcc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	69db      	ldr	r3, [r3, #28]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	f000 8087 	beq.w	8007ee6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007dd8:	4b36      	ldr	r3, [pc, #216]	@ (8007eb4 <HAL_RCC_OscConfig+0x4c4>)
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	f003 030c 	and.w	r3, r3, #12
 8007de0:	2b08      	cmp	r3, #8
 8007de2:	d061      	beq.n	8007ea8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	69db      	ldr	r3, [r3, #28]
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d146      	bne.n	8007e7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dec:	4b33      	ldr	r3, [pc, #204]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007dee:	2200      	movs	r2, #0
 8007df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007df2:	f7fe f84f 	bl	8005e94 <HAL_GetTick>
 8007df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007df8:	e008      	b.n	8007e0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dfa:	f7fe f84b 	bl	8005e94 <HAL_GetTick>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d901      	bls.n	8007e0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e06d      	b.n	8007ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007e0c:	4b29      	ldr	r3, [pc, #164]	@ (8007eb4 <HAL_RCC_OscConfig+0x4c4>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1f0      	bne.n	8007dfa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a1b      	ldr	r3, [r3, #32]
 8007e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e20:	d108      	bne.n	8007e34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007e22:	4b24      	ldr	r3, [pc, #144]	@ (8007eb4 <HAL_RCC_OscConfig+0x4c4>)
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	4921      	ldr	r1, [pc, #132]	@ (8007eb4 <HAL_RCC_OscConfig+0x4c4>)
 8007e30:	4313      	orrs	r3, r2
 8007e32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e34:	4b1f      	ldr	r3, [pc, #124]	@ (8007eb4 <HAL_RCC_OscConfig+0x4c4>)
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6a19      	ldr	r1, [r3, #32]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e44:	430b      	orrs	r3, r1
 8007e46:	491b      	ldr	r1, [pc, #108]	@ (8007eb4 <HAL_RCC_OscConfig+0x4c4>)
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007e4e:	2201      	movs	r2, #1
 8007e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e52:	f7fe f81f 	bl	8005e94 <HAL_GetTick>
 8007e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007e58:	e008      	b.n	8007e6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e5a:	f7fe f81b 	bl	8005e94 <HAL_GetTick>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d901      	bls.n	8007e6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e03d      	b.n	8007ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007e6c:	4b11      	ldr	r3, [pc, #68]	@ (8007eb4 <HAL_RCC_OscConfig+0x4c4>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d0f0      	beq.n	8007e5a <HAL_RCC_OscConfig+0x46a>
 8007e78:	e035      	b.n	8007ee6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e7a:	4b10      	ldr	r3, [pc, #64]	@ (8007ebc <HAL_RCC_OscConfig+0x4cc>)
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e80:	f7fe f808 	bl	8005e94 <HAL_GetTick>
 8007e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007e86:	e008      	b.n	8007e9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e88:	f7fe f804 	bl	8005e94 <HAL_GetTick>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d901      	bls.n	8007e9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e026      	b.n	8007ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007e9a:	4b06      	ldr	r3, [pc, #24]	@ (8007eb4 <HAL_RCC_OscConfig+0x4c4>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1f0      	bne.n	8007e88 <HAL_RCC_OscConfig+0x498>
 8007ea6:	e01e      	b.n	8007ee6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	69db      	ldr	r3, [r3, #28]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d107      	bne.n	8007ec0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e019      	b.n	8007ee8 <HAL_RCC_OscConfig+0x4f8>
 8007eb4:	40021000 	.word	0x40021000
 8007eb8:	40007000 	.word	0x40007000
 8007ebc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8007ef0 <HAL_RCC_OscConfig+0x500>)
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a1b      	ldr	r3, [r3, #32]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d106      	bne.n	8007ee2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d001      	beq.n	8007ee6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e000      	b.n	8007ee8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3718      	adds	r7, #24
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	40021000 	.word	0x40021000

08007ef4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d101      	bne.n	8007f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	e0d0      	b.n	80080aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007f08:	4b6a      	ldr	r3, [pc, #424]	@ (80080b4 <HAL_RCC_ClockConfig+0x1c0>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f003 0307 	and.w	r3, r3, #7
 8007f10:	683a      	ldr	r2, [r7, #0]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d910      	bls.n	8007f38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f16:	4b67      	ldr	r3, [pc, #412]	@ (80080b4 <HAL_RCC_ClockConfig+0x1c0>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f023 0207 	bic.w	r2, r3, #7
 8007f1e:	4965      	ldr	r1, [pc, #404]	@ (80080b4 <HAL_RCC_ClockConfig+0x1c0>)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f26:	4b63      	ldr	r3, [pc, #396]	@ (80080b4 <HAL_RCC_ClockConfig+0x1c0>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 0307 	and.w	r3, r3, #7
 8007f2e:	683a      	ldr	r2, [r7, #0]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d001      	beq.n	8007f38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e0b8      	b.n	80080aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0302 	and.w	r3, r3, #2
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d020      	beq.n	8007f86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 0304 	and.w	r3, r3, #4
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d005      	beq.n	8007f5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f50:	4b59      	ldr	r3, [pc, #356]	@ (80080b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	4a58      	ldr	r2, [pc, #352]	@ (80080b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007f56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007f5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f003 0308 	and.w	r3, r3, #8
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d005      	beq.n	8007f74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f68:	4b53      	ldr	r3, [pc, #332]	@ (80080b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	4a52      	ldr	r2, [pc, #328]	@ (80080b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007f6e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8007f72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f74:	4b50      	ldr	r3, [pc, #320]	@ (80080b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	494d      	ldr	r1, [pc, #308]	@ (80080b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007f82:	4313      	orrs	r3, r2
 8007f84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0301 	and.w	r3, r3, #1
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d040      	beq.n	8008014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d107      	bne.n	8007faa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f9a:	4b47      	ldr	r3, [pc, #284]	@ (80080b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d115      	bne.n	8007fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e07f      	b.n	80080aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d107      	bne.n	8007fc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fb2:	4b41      	ldr	r3, [pc, #260]	@ (80080b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d109      	bne.n	8007fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e073      	b.n	80080aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fc2:	4b3d      	ldr	r3, [pc, #244]	@ (80080b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f003 0302 	and.w	r3, r3, #2
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d101      	bne.n	8007fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e06b      	b.n	80080aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007fd2:	4b39      	ldr	r3, [pc, #228]	@ (80080b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	f023 0203 	bic.w	r2, r3, #3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	4936      	ldr	r1, [pc, #216]	@ (80080b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007fe4:	f7fd ff56 	bl	8005e94 <HAL_GetTick>
 8007fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fea:	e00a      	b.n	8008002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fec:	f7fd ff52 	bl	8005e94 <HAL_GetTick>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d901      	bls.n	8008002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e053      	b.n	80080aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008002:	4b2d      	ldr	r3, [pc, #180]	@ (80080b8 <HAL_RCC_ClockConfig+0x1c4>)
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	f003 020c 	and.w	r2, r3, #12
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	429a      	cmp	r2, r3
 8008012:	d1eb      	bne.n	8007fec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008014:	4b27      	ldr	r3, [pc, #156]	@ (80080b4 <HAL_RCC_ClockConfig+0x1c0>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 0307 	and.w	r3, r3, #7
 800801c:	683a      	ldr	r2, [r7, #0]
 800801e:	429a      	cmp	r2, r3
 8008020:	d210      	bcs.n	8008044 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008022:	4b24      	ldr	r3, [pc, #144]	@ (80080b4 <HAL_RCC_ClockConfig+0x1c0>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f023 0207 	bic.w	r2, r3, #7
 800802a:	4922      	ldr	r1, [pc, #136]	@ (80080b4 <HAL_RCC_ClockConfig+0x1c0>)
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	4313      	orrs	r3, r2
 8008030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008032:	4b20      	ldr	r3, [pc, #128]	@ (80080b4 <HAL_RCC_ClockConfig+0x1c0>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 0307 	and.w	r3, r3, #7
 800803a:	683a      	ldr	r2, [r7, #0]
 800803c:	429a      	cmp	r2, r3
 800803e:	d001      	beq.n	8008044 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	e032      	b.n	80080aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 0304 	and.w	r3, r3, #4
 800804c:	2b00      	cmp	r3, #0
 800804e:	d008      	beq.n	8008062 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008050:	4b19      	ldr	r3, [pc, #100]	@ (80080b8 <HAL_RCC_ClockConfig+0x1c4>)
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	4916      	ldr	r1, [pc, #88]	@ (80080b8 <HAL_RCC_ClockConfig+0x1c4>)
 800805e:	4313      	orrs	r3, r2
 8008060:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f003 0308 	and.w	r3, r3, #8
 800806a:	2b00      	cmp	r3, #0
 800806c:	d009      	beq.n	8008082 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800806e:	4b12      	ldr	r3, [pc, #72]	@ (80080b8 <HAL_RCC_ClockConfig+0x1c4>)
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	00db      	lsls	r3, r3, #3
 800807c:	490e      	ldr	r1, [pc, #56]	@ (80080b8 <HAL_RCC_ClockConfig+0x1c4>)
 800807e:	4313      	orrs	r3, r2
 8008080:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008082:	f000 f821 	bl	80080c8 <HAL_RCC_GetSysClockFreq>
 8008086:	4602      	mov	r2, r0
 8008088:	4b0b      	ldr	r3, [pc, #44]	@ (80080b8 <HAL_RCC_ClockConfig+0x1c4>)
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	091b      	lsrs	r3, r3, #4
 800808e:	f003 030f 	and.w	r3, r3, #15
 8008092:	490a      	ldr	r1, [pc, #40]	@ (80080bc <HAL_RCC_ClockConfig+0x1c8>)
 8008094:	5ccb      	ldrb	r3, [r1, r3]
 8008096:	fa22 f303 	lsr.w	r3, r2, r3
 800809a:	4a09      	ldr	r2, [pc, #36]	@ (80080c0 <HAL_RCC_ClockConfig+0x1cc>)
 800809c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800809e:	4b09      	ldr	r3, [pc, #36]	@ (80080c4 <HAL_RCC_ClockConfig+0x1d0>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fd feb4 	bl	8005e10 <HAL_InitTick>

  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	40022000 	.word	0x40022000
 80080b8:	40021000 	.word	0x40021000
 80080bc:	0800b1bc 	.word	0x0800b1bc
 80080c0:	2000000c 	.word	0x2000000c
 80080c4:	20000010 	.word	0x20000010

080080c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b087      	sub	sp, #28
 80080cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80080ce:	2300      	movs	r3, #0
 80080d0:	60fb      	str	r3, [r7, #12]
 80080d2:	2300      	movs	r3, #0
 80080d4:	60bb      	str	r3, [r7, #8]
 80080d6:	2300      	movs	r3, #0
 80080d8:	617b      	str	r3, [r7, #20]
 80080da:	2300      	movs	r3, #0
 80080dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80080de:	2300      	movs	r3, #0
 80080e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80080e2:	4b1e      	ldr	r3, [pc, #120]	@ (800815c <HAL_RCC_GetSysClockFreq+0x94>)
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f003 030c 	and.w	r3, r3, #12
 80080ee:	2b04      	cmp	r3, #4
 80080f0:	d002      	beq.n	80080f8 <HAL_RCC_GetSysClockFreq+0x30>
 80080f2:	2b08      	cmp	r3, #8
 80080f4:	d003      	beq.n	80080fe <HAL_RCC_GetSysClockFreq+0x36>
 80080f6:	e027      	b.n	8008148 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80080f8:	4b19      	ldr	r3, [pc, #100]	@ (8008160 <HAL_RCC_GetSysClockFreq+0x98>)
 80080fa:	613b      	str	r3, [r7, #16]
      break;
 80080fc:	e027      	b.n	800814e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	0c9b      	lsrs	r3, r3, #18
 8008102:	f003 030f 	and.w	r3, r3, #15
 8008106:	4a17      	ldr	r2, [pc, #92]	@ (8008164 <HAL_RCC_GetSysClockFreq+0x9c>)
 8008108:	5cd3      	ldrb	r3, [r2, r3]
 800810a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008112:	2b00      	cmp	r3, #0
 8008114:	d010      	beq.n	8008138 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008116:	4b11      	ldr	r3, [pc, #68]	@ (800815c <HAL_RCC_GetSysClockFreq+0x94>)
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	0c5b      	lsrs	r3, r3, #17
 800811c:	f003 0301 	and.w	r3, r3, #1
 8008120:	4a11      	ldr	r2, [pc, #68]	@ (8008168 <HAL_RCC_GetSysClockFreq+0xa0>)
 8008122:	5cd3      	ldrb	r3, [r2, r3]
 8008124:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a0d      	ldr	r2, [pc, #52]	@ (8008160 <HAL_RCC_GetSysClockFreq+0x98>)
 800812a:	fb03 f202 	mul.w	r2, r3, r2
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	fbb2 f3f3 	udiv	r3, r2, r3
 8008134:	617b      	str	r3, [r7, #20]
 8008136:	e004      	b.n	8008142 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a0c      	ldr	r2, [pc, #48]	@ (800816c <HAL_RCC_GetSysClockFreq+0xa4>)
 800813c:	fb02 f303 	mul.w	r3, r2, r3
 8008140:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	613b      	str	r3, [r7, #16]
      break;
 8008146:	e002      	b.n	800814e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008148:	4b05      	ldr	r3, [pc, #20]	@ (8008160 <HAL_RCC_GetSysClockFreq+0x98>)
 800814a:	613b      	str	r3, [r7, #16]
      break;
 800814c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800814e:	693b      	ldr	r3, [r7, #16]
}
 8008150:	4618      	mov	r0, r3
 8008152:	371c      	adds	r7, #28
 8008154:	46bd      	mov	sp, r7
 8008156:	bc80      	pop	{r7}
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop
 800815c:	40021000 	.word	0x40021000
 8008160:	007a1200 	.word	0x007a1200
 8008164:	0800b1d4 	.word	0x0800b1d4
 8008168:	0800b1e4 	.word	0x0800b1e4
 800816c:	003d0900 	.word	0x003d0900

08008170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008170:	b480      	push	{r7}
 8008172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008174:	4b02      	ldr	r3, [pc, #8]	@ (8008180 <HAL_RCC_GetHCLKFreq+0x10>)
 8008176:	681b      	ldr	r3, [r3, #0]
}
 8008178:	4618      	mov	r0, r3
 800817a:	46bd      	mov	sp, r7
 800817c:	bc80      	pop	{r7}
 800817e:	4770      	bx	lr
 8008180:	2000000c 	.word	0x2000000c

08008184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008188:	f7ff fff2 	bl	8008170 <HAL_RCC_GetHCLKFreq>
 800818c:	4602      	mov	r2, r0
 800818e:	4b05      	ldr	r3, [pc, #20]	@ (80081a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	0a1b      	lsrs	r3, r3, #8
 8008194:	f003 0307 	and.w	r3, r3, #7
 8008198:	4903      	ldr	r1, [pc, #12]	@ (80081a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800819a:	5ccb      	ldrb	r3, [r1, r3]
 800819c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	40021000 	.word	0x40021000
 80081a8:	0800b1cc 	.word	0x0800b1cc

080081ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80081b0:	f7ff ffde 	bl	8008170 <HAL_RCC_GetHCLKFreq>
 80081b4:	4602      	mov	r2, r0
 80081b6:	4b05      	ldr	r3, [pc, #20]	@ (80081cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	0adb      	lsrs	r3, r3, #11
 80081bc:	f003 0307 	and.w	r3, r3, #7
 80081c0:	4903      	ldr	r1, [pc, #12]	@ (80081d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80081c2:	5ccb      	ldrb	r3, [r1, r3]
 80081c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	40021000 	.word	0x40021000
 80081d0:	0800b1cc 	.word	0x0800b1cc

080081d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80081dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008208 <RCC_Delay+0x34>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a0a      	ldr	r2, [pc, #40]	@ (800820c <RCC_Delay+0x38>)
 80081e2:	fba2 2303 	umull	r2, r3, r2, r3
 80081e6:	0a5b      	lsrs	r3, r3, #9
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	fb02 f303 	mul.w	r3, r2, r3
 80081ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80081f0:	bf00      	nop
  }
  while (Delay --);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	1e5a      	subs	r2, r3, #1
 80081f6:	60fa      	str	r2, [r7, #12]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1f9      	bne.n	80081f0 <RCC_Delay+0x1c>
}
 80081fc:	bf00      	nop
 80081fe:	bf00      	nop
 8008200:	3714      	adds	r7, #20
 8008202:	46bd      	mov	sp, r7
 8008204:	bc80      	pop	{r7}
 8008206:	4770      	bx	lr
 8008208:	2000000c 	.word	0x2000000c
 800820c:	10624dd3 	.word	0x10624dd3

08008210 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d101      	bne.n	8008222 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e041      	b.n	80082a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d106      	bne.n	800823c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f7fd fc36 	bl	8005aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2202      	movs	r2, #2
 8008240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	3304      	adds	r3, #4
 800824c:	4619      	mov	r1, r3
 800824e:	4610      	mov	r0, r2
 8008250:	f000 fb8c 	bl	800896c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3708      	adds	r7, #8
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
	...

080082b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b085      	sub	sp, #20
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d001      	beq.n	80082c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	e03a      	b.n	800833e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2202      	movs	r2, #2
 80082cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	68da      	ldr	r2, [r3, #12]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f042 0201 	orr.w	r2, r2, #1
 80082de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a18      	ldr	r2, [pc, #96]	@ (8008348 <HAL_TIM_Base_Start_IT+0x98>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d00e      	beq.n	8008308 <HAL_TIM_Base_Start_IT+0x58>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082f2:	d009      	beq.n	8008308 <HAL_TIM_Base_Start_IT+0x58>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a14      	ldr	r2, [pc, #80]	@ (800834c <HAL_TIM_Base_Start_IT+0x9c>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d004      	beq.n	8008308 <HAL_TIM_Base_Start_IT+0x58>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a13      	ldr	r2, [pc, #76]	@ (8008350 <HAL_TIM_Base_Start_IT+0xa0>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d111      	bne.n	800832c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	f003 0307 	and.w	r3, r3, #7
 8008312:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2b06      	cmp	r3, #6
 8008318:	d010      	beq.n	800833c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f042 0201 	orr.w	r2, r2, #1
 8008328:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800832a:	e007      	b.n	800833c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f042 0201 	orr.w	r2, r2, #1
 800833a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3714      	adds	r7, #20
 8008342:	46bd      	mov	sp, r7
 8008344:	bc80      	pop	{r7}
 8008346:	4770      	bx	lr
 8008348:	40012c00 	.word	0x40012c00
 800834c:	40000400 	.word	0x40000400
 8008350:	40000800 	.word	0x40000800

08008354 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b086      	sub	sp, #24
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d101      	bne.n	8008368 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	e093      	b.n	8008490 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800836e:	b2db      	uxtb	r3, r3
 8008370:	2b00      	cmp	r3, #0
 8008372:	d106      	bne.n	8008382 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f7fd fbd1 	bl	8005b24 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2202      	movs	r2, #2
 8008386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	6812      	ldr	r2, [r2, #0]
 8008394:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008398:	f023 0307 	bic.w	r3, r3, #7
 800839c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	3304      	adds	r3, #4
 80083a6:	4619      	mov	r1, r3
 80083a8:	4610      	mov	r0, r2
 80083aa:	f000 fadf 	bl	800896c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	6a1b      	ldr	r3, [r3, #32]
 80083c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	697a      	ldr	r2, [r7, #20]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083d6:	f023 0303 	bic.w	r3, r3, #3
 80083da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	689a      	ldr	r2, [r3, #8]
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	699b      	ldr	r3, [r3, #24]
 80083e4:	021b      	lsls	r3, r3, #8
 80083e6:	4313      	orrs	r3, r2
 80083e8:	693a      	ldr	r2, [r7, #16]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80083f4:	f023 030c 	bic.w	r3, r3, #12
 80083f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008400:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008404:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	68da      	ldr	r2, [r3, #12]
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	69db      	ldr	r3, [r3, #28]
 800840e:	021b      	lsls	r3, r3, #8
 8008410:	4313      	orrs	r3, r2
 8008412:	693a      	ldr	r2, [r7, #16]
 8008414:	4313      	orrs	r3, r2
 8008416:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	691b      	ldr	r3, [r3, #16]
 800841c:	011a      	lsls	r2, r3, #4
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	6a1b      	ldr	r3, [r3, #32]
 8008422:	031b      	lsls	r3, r3, #12
 8008424:	4313      	orrs	r3, r2
 8008426:	693a      	ldr	r2, [r7, #16]
 8008428:	4313      	orrs	r3, r2
 800842a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008432:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	685a      	ldr	r2, [r3, #4]
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	695b      	ldr	r3, [r3, #20]
 800843c:	011b      	lsls	r3, r3, #4
 800843e:	4313      	orrs	r3, r2
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	4313      	orrs	r3, r2
 8008444:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	697a      	ldr	r2, [r7, #20]
 800844c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2201      	movs	r2, #1
 8008462:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2201      	movs	r2, #1
 800846a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2201      	movs	r2, #1
 8008482:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3718      	adds	r7, #24
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80084a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80084b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80084b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80084c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d110      	bne.n	80084ea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80084c8:	7bfb      	ldrb	r3, [r7, #15]
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d102      	bne.n	80084d4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80084ce:	7b7b      	ldrb	r3, [r7, #13]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d001      	beq.n	80084d8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	e069      	b.n	80085ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2202      	movs	r2, #2
 80084dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2202      	movs	r2, #2
 80084e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80084e8:	e031      	b.n	800854e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	2b04      	cmp	r3, #4
 80084ee:	d110      	bne.n	8008512 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80084f0:	7bbb      	ldrb	r3, [r7, #14]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d102      	bne.n	80084fc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80084f6:	7b3b      	ldrb	r3, [r7, #12]
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d001      	beq.n	8008500 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	e055      	b.n	80085ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2202      	movs	r2, #2
 8008504:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2202      	movs	r2, #2
 800850c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008510:	e01d      	b.n	800854e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008512:	7bfb      	ldrb	r3, [r7, #15]
 8008514:	2b01      	cmp	r3, #1
 8008516:	d108      	bne.n	800852a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008518:	7bbb      	ldrb	r3, [r7, #14]
 800851a:	2b01      	cmp	r3, #1
 800851c:	d105      	bne.n	800852a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800851e:	7b7b      	ldrb	r3, [r7, #13]
 8008520:	2b01      	cmp	r3, #1
 8008522:	d102      	bne.n	800852a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008524:	7b3b      	ldrb	r3, [r7, #12]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d001      	beq.n	800852e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e03e      	b.n	80085ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2202      	movs	r2, #2
 8008532:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2202      	movs	r2, #2
 800853a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2202      	movs	r2, #2
 8008542:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2202      	movs	r2, #2
 800854a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d003      	beq.n	800855c <HAL_TIM_Encoder_Start+0xc4>
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	2b04      	cmp	r3, #4
 8008558:	d008      	beq.n	800856c <HAL_TIM_Encoder_Start+0xd4>
 800855a:	e00f      	b.n	800857c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2201      	movs	r2, #1
 8008562:	2100      	movs	r1, #0
 8008564:	4618      	mov	r0, r3
 8008566:	f000 fb05 	bl	8008b74 <TIM_CCxChannelCmd>
      break;
 800856a:	e016      	b.n	800859a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2201      	movs	r2, #1
 8008572:	2104      	movs	r1, #4
 8008574:	4618      	mov	r0, r3
 8008576:	f000 fafd 	bl	8008b74 <TIM_CCxChannelCmd>
      break;
 800857a:	e00e      	b.n	800859a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2201      	movs	r2, #1
 8008582:	2100      	movs	r1, #0
 8008584:	4618      	mov	r0, r3
 8008586:	f000 faf5 	bl	8008b74 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2201      	movs	r2, #1
 8008590:	2104      	movs	r1, #4
 8008592:	4618      	mov	r0, r3
 8008594:	f000 faee 	bl	8008b74 <TIM_CCxChannelCmd>
      break;
 8008598:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f042 0201 	orr.w	r2, r2, #1
 80085a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	f003 0302 	and.w	r3, r3, #2
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d020      	beq.n	8008618 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f003 0302 	and.w	r3, r3, #2
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d01b      	beq.n	8008618 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f06f 0202 	mvn.w	r2, #2
 80085e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2201      	movs	r2, #1
 80085ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	699b      	ldr	r3, [r3, #24]
 80085f6:	f003 0303 	and.w	r3, r3, #3
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d003      	beq.n	8008606 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f998 	bl	8008934 <HAL_TIM_IC_CaptureCallback>
 8008604:	e005      	b.n	8008612 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 f98b 	bl	8008922 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 f99a 	bl	8008946 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	f003 0304 	and.w	r3, r3, #4
 800861e:	2b00      	cmp	r3, #0
 8008620:	d020      	beq.n	8008664 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f003 0304 	and.w	r3, r3, #4
 8008628:	2b00      	cmp	r3, #0
 800862a:	d01b      	beq.n	8008664 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f06f 0204 	mvn.w	r2, #4
 8008634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2202      	movs	r2, #2
 800863a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	699b      	ldr	r3, [r3, #24]
 8008642:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008646:	2b00      	cmp	r3, #0
 8008648:	d003      	beq.n	8008652 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 f972 	bl	8008934 <HAL_TIM_IC_CaptureCallback>
 8008650:	e005      	b.n	800865e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 f965 	bl	8008922 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 f974 	bl	8008946 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	f003 0308 	and.w	r3, r3, #8
 800866a:	2b00      	cmp	r3, #0
 800866c:	d020      	beq.n	80086b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f003 0308 	and.w	r3, r3, #8
 8008674:	2b00      	cmp	r3, #0
 8008676:	d01b      	beq.n	80086b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f06f 0208 	mvn.w	r2, #8
 8008680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2204      	movs	r2, #4
 8008686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	69db      	ldr	r3, [r3, #28]
 800868e:	f003 0303 	and.w	r3, r3, #3
 8008692:	2b00      	cmp	r3, #0
 8008694:	d003      	beq.n	800869e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 f94c 	bl	8008934 <HAL_TIM_IC_CaptureCallback>
 800869c:	e005      	b.n	80086aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 f93f 	bl	8008922 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 f94e 	bl	8008946 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	f003 0310 	and.w	r3, r3, #16
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d020      	beq.n	80086fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f003 0310 	and.w	r3, r3, #16
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d01b      	beq.n	80086fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f06f 0210 	mvn.w	r2, #16
 80086cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2208      	movs	r2, #8
 80086d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	69db      	ldr	r3, [r3, #28]
 80086da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d003      	beq.n	80086ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f926 	bl	8008934 <HAL_TIM_IC_CaptureCallback>
 80086e8:	e005      	b.n	80086f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 f919 	bl	8008922 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 f928 	bl	8008946 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	f003 0301 	and.w	r3, r3, #1
 8008702:	2b00      	cmp	r3, #0
 8008704:	d00c      	beq.n	8008720 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f003 0301 	and.w	r3, r3, #1
 800870c:	2b00      	cmp	r3, #0
 800870e:	d007      	beq.n	8008720 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f06f 0201 	mvn.w	r2, #1
 8008718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f7f9 f8ac 	bl	8001878 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00c      	beq.n	8008744 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008730:	2b00      	cmp	r3, #0
 8008732:	d007      	beq.n	8008744 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800873c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 faa3 	bl	8008c8a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00c      	beq.n	8008768 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008754:	2b00      	cmp	r3, #0
 8008756:	d007      	beq.n	8008768 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f8f8 	bl	8008958 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	f003 0320 	and.w	r3, r3, #32
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00c      	beq.n	800878c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f003 0320 	and.w	r3, r3, #32
 8008778:	2b00      	cmp	r3, #0
 800877a:	d007      	beq.n	800878c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f06f 0220 	mvn.w	r2, #32
 8008784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 fa76 	bl	8008c78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800878c:	bf00      	nop
 800878e:	3710      	adds	r7, #16
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800879e:	2300      	movs	r3, #0
 80087a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d101      	bne.n	80087b0 <HAL_TIM_ConfigClockSource+0x1c>
 80087ac:	2302      	movs	r3, #2
 80087ae:	e0b4      	b.n	800891a <HAL_TIM_ConfigClockSource+0x186>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2202      	movs	r2, #2
 80087bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80087ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80087d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	68ba      	ldr	r2, [r7, #8]
 80087de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087e8:	d03e      	beq.n	8008868 <HAL_TIM_ConfigClockSource+0xd4>
 80087ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087ee:	f200 8087 	bhi.w	8008900 <HAL_TIM_ConfigClockSource+0x16c>
 80087f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087f6:	f000 8086 	beq.w	8008906 <HAL_TIM_ConfigClockSource+0x172>
 80087fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087fe:	d87f      	bhi.n	8008900 <HAL_TIM_ConfigClockSource+0x16c>
 8008800:	2b70      	cmp	r3, #112	@ 0x70
 8008802:	d01a      	beq.n	800883a <HAL_TIM_ConfigClockSource+0xa6>
 8008804:	2b70      	cmp	r3, #112	@ 0x70
 8008806:	d87b      	bhi.n	8008900 <HAL_TIM_ConfigClockSource+0x16c>
 8008808:	2b60      	cmp	r3, #96	@ 0x60
 800880a:	d050      	beq.n	80088ae <HAL_TIM_ConfigClockSource+0x11a>
 800880c:	2b60      	cmp	r3, #96	@ 0x60
 800880e:	d877      	bhi.n	8008900 <HAL_TIM_ConfigClockSource+0x16c>
 8008810:	2b50      	cmp	r3, #80	@ 0x50
 8008812:	d03c      	beq.n	800888e <HAL_TIM_ConfigClockSource+0xfa>
 8008814:	2b50      	cmp	r3, #80	@ 0x50
 8008816:	d873      	bhi.n	8008900 <HAL_TIM_ConfigClockSource+0x16c>
 8008818:	2b40      	cmp	r3, #64	@ 0x40
 800881a:	d058      	beq.n	80088ce <HAL_TIM_ConfigClockSource+0x13a>
 800881c:	2b40      	cmp	r3, #64	@ 0x40
 800881e:	d86f      	bhi.n	8008900 <HAL_TIM_ConfigClockSource+0x16c>
 8008820:	2b30      	cmp	r3, #48	@ 0x30
 8008822:	d064      	beq.n	80088ee <HAL_TIM_ConfigClockSource+0x15a>
 8008824:	2b30      	cmp	r3, #48	@ 0x30
 8008826:	d86b      	bhi.n	8008900 <HAL_TIM_ConfigClockSource+0x16c>
 8008828:	2b20      	cmp	r3, #32
 800882a:	d060      	beq.n	80088ee <HAL_TIM_ConfigClockSource+0x15a>
 800882c:	2b20      	cmp	r3, #32
 800882e:	d867      	bhi.n	8008900 <HAL_TIM_ConfigClockSource+0x16c>
 8008830:	2b00      	cmp	r3, #0
 8008832:	d05c      	beq.n	80088ee <HAL_TIM_ConfigClockSource+0x15a>
 8008834:	2b10      	cmp	r3, #16
 8008836:	d05a      	beq.n	80088ee <HAL_TIM_ConfigClockSource+0x15a>
 8008838:	e062      	b.n	8008900 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800884a:	f000 f974 	bl	8008b36 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800885c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	68ba      	ldr	r2, [r7, #8]
 8008864:	609a      	str	r2, [r3, #8]
      break;
 8008866:	e04f      	b.n	8008908 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008878:	f000 f95d 	bl	8008b36 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	689a      	ldr	r2, [r3, #8]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800888a:	609a      	str	r2, [r3, #8]
      break;
 800888c:	e03c      	b.n	8008908 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800889a:	461a      	mov	r2, r3
 800889c:	f000 f8d4 	bl	8008a48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2150      	movs	r1, #80	@ 0x50
 80088a6:	4618      	mov	r0, r3
 80088a8:	f000 f92b 	bl	8008b02 <TIM_ITRx_SetConfig>
      break;
 80088ac:	e02c      	b.n	8008908 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80088ba:	461a      	mov	r2, r3
 80088bc:	f000 f8f2 	bl	8008aa4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2160      	movs	r1, #96	@ 0x60
 80088c6:	4618      	mov	r0, r3
 80088c8:	f000 f91b 	bl	8008b02 <TIM_ITRx_SetConfig>
      break;
 80088cc:	e01c      	b.n	8008908 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088da:	461a      	mov	r2, r3
 80088dc:	f000 f8b4 	bl	8008a48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2140      	movs	r1, #64	@ 0x40
 80088e6:	4618      	mov	r0, r3
 80088e8:	f000 f90b 	bl	8008b02 <TIM_ITRx_SetConfig>
      break;
 80088ec:	e00c      	b.n	8008908 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4619      	mov	r1, r3
 80088f8:	4610      	mov	r0, r2
 80088fa:	f000 f902 	bl	8008b02 <TIM_ITRx_SetConfig>
      break;
 80088fe:	e003      	b.n	8008908 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	73fb      	strb	r3, [r7, #15]
      break;
 8008904:	e000      	b.n	8008908 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008906:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008918:	7bfb      	ldrb	r3, [r7, #15]
}
 800891a:	4618      	mov	r0, r3
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008922:	b480      	push	{r7}
 8008924:	b083      	sub	sp, #12
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800892a:	bf00      	nop
 800892c:	370c      	adds	r7, #12
 800892e:	46bd      	mov	sp, r7
 8008930:	bc80      	pop	{r7}
 8008932:	4770      	bx	lr

08008934 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	bc80      	pop	{r7}
 8008944:	4770      	bx	lr

08008946 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008946:	b480      	push	{r7}
 8008948:	b083      	sub	sp, #12
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800894e:	bf00      	nop
 8008950:	370c      	adds	r7, #12
 8008952:	46bd      	mov	sp, r7
 8008954:	bc80      	pop	{r7}
 8008956:	4770      	bx	lr

08008958 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008960:	bf00      	nop
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	bc80      	pop	{r7}
 8008968:	4770      	bx	lr
	...

0800896c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a2f      	ldr	r2, [pc, #188]	@ (8008a3c <TIM_Base_SetConfig+0xd0>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d00b      	beq.n	800899c <TIM_Base_SetConfig+0x30>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800898a:	d007      	beq.n	800899c <TIM_Base_SetConfig+0x30>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a2c      	ldr	r2, [pc, #176]	@ (8008a40 <TIM_Base_SetConfig+0xd4>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d003      	beq.n	800899c <TIM_Base_SetConfig+0x30>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a2b      	ldr	r2, [pc, #172]	@ (8008a44 <TIM_Base_SetConfig+0xd8>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d108      	bne.n	80089ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a22      	ldr	r2, [pc, #136]	@ (8008a3c <TIM_Base_SetConfig+0xd0>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d00b      	beq.n	80089ce <TIM_Base_SetConfig+0x62>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089bc:	d007      	beq.n	80089ce <TIM_Base_SetConfig+0x62>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4a1f      	ldr	r2, [pc, #124]	@ (8008a40 <TIM_Base_SetConfig+0xd4>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d003      	beq.n	80089ce <TIM_Base_SetConfig+0x62>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a1e      	ldr	r2, [pc, #120]	@ (8008a44 <TIM_Base_SetConfig+0xd8>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d108      	bne.n	80089e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	4313      	orrs	r3, r2
 80089de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	695b      	ldr	r3, [r3, #20]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	68fa      	ldr	r2, [r7, #12]
 80089f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	689a      	ldr	r2, [r3, #8]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a0d      	ldr	r2, [pc, #52]	@ (8008a3c <TIM_Base_SetConfig+0xd0>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d103      	bne.n	8008a14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	691a      	ldr	r2, [r3, #16]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	f003 0301 	and.w	r3, r3, #1
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d005      	beq.n	8008a32 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	f023 0201 	bic.w	r2, r3, #1
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	611a      	str	r2, [r3, #16]
  }
}
 8008a32:	bf00      	nop
 8008a34:	3714      	adds	r7, #20
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bc80      	pop	{r7}
 8008a3a:	4770      	bx	lr
 8008a3c:	40012c00 	.word	0x40012c00
 8008a40:	40000400 	.word	0x40000400
 8008a44:	40000800 	.word	0x40000800

08008a48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b087      	sub	sp, #28
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6a1b      	ldr	r3, [r3, #32]
 8008a58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	6a1b      	ldr	r3, [r3, #32]
 8008a5e:	f023 0201 	bic.w	r2, r3, #1
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	699b      	ldr	r3, [r3, #24]
 8008a6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008a72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	011b      	lsls	r3, r3, #4
 8008a78:	693a      	ldr	r2, [r7, #16]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	f023 030a 	bic.w	r3, r3, #10
 8008a84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	693a      	ldr	r2, [r7, #16]
 8008a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	697a      	ldr	r2, [r7, #20]
 8008a98:	621a      	str	r2, [r3, #32]
}
 8008a9a:	bf00      	nop
 8008a9c:	371c      	adds	r7, #28
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bc80      	pop	{r7}
 8008aa2:	4770      	bx	lr

08008aa4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b087      	sub	sp, #28
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	6a1b      	ldr	r3, [r3, #32]
 8008ab4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6a1b      	ldr	r3, [r3, #32]
 8008aba:	f023 0210 	bic.w	r2, r3, #16
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	699b      	ldr	r3, [r3, #24]
 8008ac6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008ace:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	031b      	lsls	r3, r3, #12
 8008ad4:	693a      	ldr	r2, [r7, #16]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008ae0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	011b      	lsls	r3, r3, #4
 8008ae6:	697a      	ldr	r2, [r7, #20]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	693a      	ldr	r2, [r7, #16]
 8008af0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	697a      	ldr	r2, [r7, #20]
 8008af6:	621a      	str	r2, [r3, #32]
}
 8008af8:	bf00      	nop
 8008afa:	371c      	adds	r7, #28
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bc80      	pop	{r7}
 8008b00:	4770      	bx	lr

08008b02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b02:	b480      	push	{r7}
 8008b04:	b085      	sub	sp, #20
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
 8008b0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b1a:	683a      	ldr	r2, [r7, #0]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	f043 0307 	orr.w	r3, r3, #7
 8008b24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	609a      	str	r2, [r3, #8]
}
 8008b2c:	bf00      	nop
 8008b2e:	3714      	adds	r7, #20
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bc80      	pop	{r7}
 8008b34:	4770      	bx	lr

08008b36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b36:	b480      	push	{r7}
 8008b38:	b087      	sub	sp, #28
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	60f8      	str	r0, [r7, #12]
 8008b3e:	60b9      	str	r1, [r7, #8]
 8008b40:	607a      	str	r2, [r7, #4]
 8008b42:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008b50:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	021a      	lsls	r2, r3, #8
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	431a      	orrs	r2, r3
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	697a      	ldr	r2, [r7, #20]
 8008b60:	4313      	orrs	r3, r2
 8008b62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	697a      	ldr	r2, [r7, #20]
 8008b68:	609a      	str	r2, [r3, #8]
}
 8008b6a:	bf00      	nop
 8008b6c:	371c      	adds	r7, #28
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bc80      	pop	{r7}
 8008b72:	4770      	bx	lr

08008b74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b087      	sub	sp, #28
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	f003 031f 	and.w	r3, r3, #31
 8008b86:	2201      	movs	r2, #1
 8008b88:	fa02 f303 	lsl.w	r3, r2, r3
 8008b8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6a1a      	ldr	r2, [r3, #32]
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	43db      	mvns	r3, r3
 8008b96:	401a      	ands	r2, r3
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6a1a      	ldr	r2, [r3, #32]
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	f003 031f 	and.w	r3, r3, #31
 8008ba6:	6879      	ldr	r1, [r7, #4]
 8008ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8008bac:	431a      	orrs	r2, r3
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	621a      	str	r2, [r3, #32]
}
 8008bb2:	bf00      	nop
 8008bb4:	371c      	adds	r7, #28
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bc80      	pop	{r7}
 8008bba:	4770      	bx	lr

08008bbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b085      	sub	sp, #20
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d101      	bne.n	8008bd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008bd0:	2302      	movs	r3, #2
 8008bd2:	e046      	b.n	8008c62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2202      	movs	r2, #2
 8008be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	68fa      	ldr	r2, [r7, #12]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a16      	ldr	r2, [pc, #88]	@ (8008c6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d00e      	beq.n	8008c36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c20:	d009      	beq.n	8008c36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a12      	ldr	r2, [pc, #72]	@ (8008c70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d004      	beq.n	8008c36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a10      	ldr	r2, [pc, #64]	@ (8008c74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d10c      	bne.n	8008c50 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	68ba      	ldr	r2, [r7, #8]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	68ba      	ldr	r2, [r7, #8]
 8008c4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3714      	adds	r7, #20
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bc80      	pop	{r7}
 8008c6a:	4770      	bx	lr
 8008c6c:	40012c00 	.word	0x40012c00
 8008c70:	40000400 	.word	0x40000400
 8008c74:	40000800 	.word	0x40000800

08008c78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c80:	bf00      	nop
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bc80      	pop	{r7}
 8008c88:	4770      	bx	lr

08008c8a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c8a:	b480      	push	{r7}
 8008c8c:	b083      	sub	sp, #12
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c92:	bf00      	nop
 8008c94:	370c      	adds	r7, #12
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bc80      	pop	{r7}
 8008c9a:	4770      	bx	lr

08008c9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d101      	bne.n	8008cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	e042      	b.n	8008d34 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d106      	bne.n	8008cc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f7fc ffc0 	bl	8005c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2224      	movs	r2, #36	@ 0x24
 8008ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68da      	ldr	r2, [r3, #12]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008cde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 ff2f 	bl	8009b44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	691a      	ldr	r2, [r3, #16]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008cf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	695a      	ldr	r2, [r3, #20]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008d04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	68da      	ldr	r2, [r3, #12]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008d14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2220      	movs	r2, #32
 8008d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2220      	movs	r2, #32
 8008d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3708      	adds	r7, #8
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b08c      	sub	sp, #48	@ 0x30
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	4613      	mov	r3, r2
 8008d48:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	2b20      	cmp	r3, #32
 8008d54:	d156      	bne.n	8008e04 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d002      	beq.n	8008d62 <HAL_UART_Transmit_DMA+0x26>
 8008d5c:	88fb      	ldrh	r3, [r7, #6]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d101      	bne.n	8008d66 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	e04f      	b.n	8008e06 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8008d66:	68ba      	ldr	r2, [r7, #8]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	88fa      	ldrh	r2, [r7, #6]
 8008d70:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	88fa      	ldrh	r2, [r7, #6]
 8008d76:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2221      	movs	r2, #33	@ 0x21
 8008d82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d8a:	4a21      	ldr	r2, [pc, #132]	@ (8008e10 <HAL_UART_Transmit_DMA+0xd4>)
 8008d8c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d92:	4a20      	ldr	r2, [pc, #128]	@ (8008e14 <HAL_UART_Transmit_DMA+0xd8>)
 8008d94:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d9a:	4a1f      	ldr	r2, [pc, #124]	@ (8008e18 <HAL_UART_Transmit_DMA+0xdc>)
 8008d9c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008da2:	2200      	movs	r2, #0
 8008da4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8008da6:	f107 0308 	add.w	r3, r7, #8
 8008daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db2:	6819      	ldr	r1, [r3, #0]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	3304      	adds	r3, #4
 8008dba:	461a      	mov	r2, r3
 8008dbc:	88fb      	ldrh	r3, [r7, #6]
 8008dbe:	f7fd f9ff 	bl	80061c0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008dca:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	3314      	adds	r3, #20
 8008dd2:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd4:	69bb      	ldr	r3, [r7, #24]
 8008dd6:	e853 3f00 	ldrex	r3, [r3]
 8008dda:	617b      	str	r3, [r7, #20]
   return(result);
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008de2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	3314      	adds	r3, #20
 8008dea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008dec:	627a      	str	r2, [r7, #36]	@ 0x24
 8008dee:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df0:	6a39      	ldr	r1, [r7, #32]
 8008df2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008df4:	e841 2300 	strex	r3, r2, [r1]
 8008df8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d1e5      	bne.n	8008dcc <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8008e00:	2300      	movs	r3, #0
 8008e02:	e000      	b.n	8008e06 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8008e04:	2302      	movs	r3, #2
  }
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3730      	adds	r7, #48	@ 0x30
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	080093d9 	.word	0x080093d9
 8008e14:	08009473 	.word	0x08009473
 8008e18:	080095f7 	.word	0x080095f7

08008e1c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	4613      	mov	r3, r2
 8008e28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	2b20      	cmp	r3, #32
 8008e34:	d112      	bne.n	8008e5c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d002      	beq.n	8008e42 <HAL_UART_Receive_DMA+0x26>
 8008e3c:	88fb      	ldrh	r3, [r7, #6]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d101      	bne.n	8008e46 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e00b      	b.n	8008e5e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008e4c:	88fb      	ldrh	r3, [r7, #6]
 8008e4e:	461a      	mov	r2, r3
 8008e50:	68b9      	ldr	r1, [r7, #8]
 8008e52:	68f8      	ldr	r0, [r7, #12]
 8008e54:	f000 fc1a 	bl	800968c <UART_Start_Receive_DMA>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	e000      	b.n	8008e5e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008e5c:	2302      	movs	r3, #2
  }
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
	...

08008e68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b0ba      	sub	sp, #232	@ 0xe8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	695b      	ldr	r3, [r3, #20]
 8008e8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008e94:	2300      	movs	r3, #0
 8008e96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e9e:	f003 030f 	and.w	r3, r3, #15
 8008ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008ea6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d10f      	bne.n	8008ece <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008eb2:	f003 0320 	and.w	r3, r3, #32
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d009      	beq.n	8008ece <HAL_UART_IRQHandler+0x66>
 8008eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ebe:	f003 0320 	and.w	r3, r3, #32
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d003      	beq.n	8008ece <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 fd7e 	bl	80099c8 <UART_Receive_IT>
      return;
 8008ecc:	e25b      	b.n	8009386 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008ece:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f000 80de 	beq.w	8009094 <HAL_UART_IRQHandler+0x22c>
 8008ed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008edc:	f003 0301 	and.w	r3, r3, #1
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d106      	bne.n	8008ef2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ee8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f000 80d1 	beq.w	8009094 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ef6:	f003 0301 	and.w	r3, r3, #1
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00b      	beq.n	8008f16 <HAL_UART_IRQHandler+0xae>
 8008efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d005      	beq.n	8008f16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f0e:	f043 0201 	orr.w	r2, r3, #1
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f1a:	f003 0304 	and.w	r3, r3, #4
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00b      	beq.n	8008f3a <HAL_UART_IRQHandler+0xd2>
 8008f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f26:	f003 0301 	and.w	r3, r3, #1
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d005      	beq.n	8008f3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f32:	f043 0202 	orr.w	r2, r3, #2
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f3e:	f003 0302 	and.w	r3, r3, #2
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00b      	beq.n	8008f5e <HAL_UART_IRQHandler+0xf6>
 8008f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f4a:	f003 0301 	and.w	r3, r3, #1
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d005      	beq.n	8008f5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f56:	f043 0204 	orr.w	r2, r3, #4
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f62:	f003 0308 	and.w	r3, r3, #8
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d011      	beq.n	8008f8e <HAL_UART_IRQHandler+0x126>
 8008f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f6e:	f003 0320 	and.w	r3, r3, #32
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d105      	bne.n	8008f82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d005      	beq.n	8008f8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f86:	f043 0208 	orr.w	r2, r3, #8
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	f000 81f2 	beq.w	800937c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f9c:	f003 0320 	and.w	r3, r3, #32
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d008      	beq.n	8008fb6 <HAL_UART_IRQHandler+0x14e>
 8008fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fa8:	f003 0320 	and.w	r3, r3, #32
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d002      	beq.n	8008fb6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 fd09 	bl	80099c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	695b      	ldr	r3, [r3, #20]
 8008fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	bf14      	ite	ne
 8008fc4:	2301      	movne	r3, #1
 8008fc6:	2300      	moveq	r3, #0
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fd2:	f003 0308 	and.w	r3, r3, #8
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d103      	bne.n	8008fe2 <HAL_UART_IRQHandler+0x17a>
 8008fda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d04f      	beq.n	8009082 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 fc13 	bl	800980e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	695b      	ldr	r3, [r3, #20]
 8008fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d041      	beq.n	800907a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	3314      	adds	r3, #20
 8008ffc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009000:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009004:	e853 3f00 	ldrex	r3, [r3]
 8009008:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800900c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009010:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009014:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	3314      	adds	r3, #20
 800901e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009022:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009026:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800902e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009032:	e841 2300 	strex	r3, r2, [r1]
 8009036:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800903a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d1d9      	bne.n	8008ff6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009046:	2b00      	cmp	r3, #0
 8009048:	d013      	beq.n	8009072 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800904e:	4a7e      	ldr	r2, [pc, #504]	@ (8009248 <HAL_UART_IRQHandler+0x3e0>)
 8009050:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009056:	4618      	mov	r0, r3
 8009058:	f7fd f94e 	bl	80062f8 <HAL_DMA_Abort_IT>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d016      	beq.n	8009090 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800906c:	4610      	mov	r0, r2
 800906e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009070:	e00e      	b.n	8009090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 f99c 	bl	80093b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009078:	e00a      	b.n	8009090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f998 	bl	80093b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009080:	e006      	b.n	8009090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 f994 	bl	80093b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800908e:	e175      	b.n	800937c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009090:	bf00      	nop
    return;
 8009092:	e173      	b.n	800937c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009098:	2b01      	cmp	r3, #1
 800909a:	f040 814f 	bne.w	800933c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800909e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090a2:	f003 0310 	and.w	r3, r3, #16
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f000 8148 	beq.w	800933c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80090ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090b0:	f003 0310 	and.w	r3, r3, #16
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	f000 8141 	beq.w	800933c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80090ba:	2300      	movs	r3, #0
 80090bc:	60bb      	str	r3, [r7, #8]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	60bb      	str	r3, [r7, #8]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	60bb      	str	r3, [r7, #8]
 80090ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	695b      	ldr	r3, [r3, #20]
 80090d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090da:	2b00      	cmp	r3, #0
 80090dc:	f000 80b6 	beq.w	800924c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80090ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f000 8145 	beq.w	8009380 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80090fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80090fe:	429a      	cmp	r2, r3
 8009100:	f080 813e 	bcs.w	8009380 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800910a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009110:	699b      	ldr	r3, [r3, #24]
 8009112:	2b20      	cmp	r3, #32
 8009114:	f000 8088 	beq.w	8009228 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	330c      	adds	r3, #12
 800911e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009122:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009126:	e853 3f00 	ldrex	r3, [r3]
 800912a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800912e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009132:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009136:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	330c      	adds	r3, #12
 8009140:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009144:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009148:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009150:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009154:	e841 2300 	strex	r3, r2, [r1]
 8009158:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800915c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009160:	2b00      	cmp	r3, #0
 8009162:	d1d9      	bne.n	8009118 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	3314      	adds	r3, #20
 800916a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800916c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800916e:	e853 3f00 	ldrex	r3, [r3]
 8009172:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009174:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009176:	f023 0301 	bic.w	r3, r3, #1
 800917a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	3314      	adds	r3, #20
 8009184:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009188:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800918c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009190:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009194:	e841 2300 	strex	r3, r2, [r1]
 8009198:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800919a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800919c:	2b00      	cmp	r3, #0
 800919e:	d1e1      	bne.n	8009164 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	3314      	adds	r3, #20
 80091a6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80091aa:	e853 3f00 	ldrex	r3, [r3]
 80091ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80091b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	3314      	adds	r3, #20
 80091c0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80091c4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80091c6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80091ca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80091cc:	e841 2300 	strex	r3, r2, [r1]
 80091d0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80091d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d1e3      	bne.n	80091a0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2220      	movs	r2, #32
 80091dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	330c      	adds	r3, #12
 80091ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091f0:	e853 3f00 	ldrex	r3, [r3]
 80091f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80091f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091f8:	f023 0310 	bic.w	r3, r3, #16
 80091fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	330c      	adds	r3, #12
 8009206:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800920a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800920c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009210:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009212:	e841 2300 	strex	r3, r2, [r1]
 8009216:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009218:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800921a:	2b00      	cmp	r3, #0
 800921c:	d1e3      	bne.n	80091e6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009222:	4618      	mov	r0, r3
 8009224:	f7fd f82c 	bl	8006280 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2202      	movs	r2, #2
 800922c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009236:	b29b      	uxth	r3, r3
 8009238:	1ad3      	subs	r3, r2, r3
 800923a:	b29b      	uxth	r3, r3
 800923c:	4619      	mov	r1, r3
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f8bf 	bl	80093c2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009244:	e09c      	b.n	8009380 <HAL_UART_IRQHandler+0x518>
 8009246:	bf00      	nop
 8009248:	080098d3 	.word	0x080098d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009254:	b29b      	uxth	r3, r3
 8009256:	1ad3      	subs	r3, r2, r3
 8009258:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009260:	b29b      	uxth	r3, r3
 8009262:	2b00      	cmp	r3, #0
 8009264:	f000 808e 	beq.w	8009384 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009268:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800926c:	2b00      	cmp	r3, #0
 800926e:	f000 8089 	beq.w	8009384 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	330c      	adds	r3, #12
 8009278:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800927a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800927c:	e853 3f00 	ldrex	r3, [r3]
 8009280:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009284:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009288:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	330c      	adds	r3, #12
 8009292:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009296:	647a      	str	r2, [r7, #68]	@ 0x44
 8009298:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800929a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800929c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800929e:	e841 2300 	strex	r3, r2, [r1]
 80092a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80092a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d1e3      	bne.n	8009272 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	3314      	adds	r3, #20
 80092b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b4:	e853 3f00 	ldrex	r3, [r3]
 80092b8:	623b      	str	r3, [r7, #32]
   return(result);
 80092ba:	6a3b      	ldr	r3, [r7, #32]
 80092bc:	f023 0301 	bic.w	r3, r3, #1
 80092c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	3314      	adds	r3, #20
 80092ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80092ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80092d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092d6:	e841 2300 	strex	r3, r2, [r1]
 80092da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80092dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d1e3      	bne.n	80092aa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2220      	movs	r2, #32
 80092e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	330c      	adds	r3, #12
 80092f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	e853 3f00 	ldrex	r3, [r3]
 80092fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f023 0310 	bic.w	r3, r3, #16
 8009306:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	330c      	adds	r3, #12
 8009310:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009314:	61fa      	str	r2, [r7, #28]
 8009316:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009318:	69b9      	ldr	r1, [r7, #24]
 800931a:	69fa      	ldr	r2, [r7, #28]
 800931c:	e841 2300 	strex	r3, r2, [r1]
 8009320:	617b      	str	r3, [r7, #20]
   return(result);
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d1e3      	bne.n	80092f0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2202      	movs	r2, #2
 800932c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800932e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009332:	4619      	mov	r1, r3
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 f844 	bl	80093c2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800933a:	e023      	b.n	8009384 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800933c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009344:	2b00      	cmp	r3, #0
 8009346:	d009      	beq.n	800935c <HAL_UART_IRQHandler+0x4f4>
 8009348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800934c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009350:	2b00      	cmp	r3, #0
 8009352:	d003      	beq.n	800935c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 fad0 	bl	80098fa <UART_Transmit_IT>
    return;
 800935a:	e014      	b.n	8009386 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800935c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009364:	2b00      	cmp	r3, #0
 8009366:	d00e      	beq.n	8009386 <HAL_UART_IRQHandler+0x51e>
 8009368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800936c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009370:	2b00      	cmp	r3, #0
 8009372:	d008      	beq.n	8009386 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 fb0f 	bl	8009998 <UART_EndTransmit_IT>
    return;
 800937a:	e004      	b.n	8009386 <HAL_UART_IRQHandler+0x51e>
    return;
 800937c:	bf00      	nop
 800937e:	e002      	b.n	8009386 <HAL_UART_IRQHandler+0x51e>
      return;
 8009380:	bf00      	nop
 8009382:	e000      	b.n	8009386 <HAL_UART_IRQHandler+0x51e>
      return;
 8009384:	bf00      	nop
  }
}
 8009386:	37e8      	adds	r7, #232	@ 0xe8
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009394:	bf00      	nop
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	bc80      	pop	{r7}
 800939c:	4770      	bx	lr

0800939e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800939e:	b480      	push	{r7}
 80093a0:	b083      	sub	sp, #12
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80093a6:	bf00      	nop
 80093a8:	370c      	adds	r7, #12
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bc80      	pop	{r7}
 80093ae:	4770      	bx	lr

080093b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80093b8:	bf00      	nop
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	bc80      	pop	{r7}
 80093c0:	4770      	bx	lr

080093c2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80093c2:	b480      	push	{r7}
 80093c4:	b083      	sub	sp, #12
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
 80093ca:	460b      	mov	r3, r1
 80093cc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80093ce:	bf00      	nop
 80093d0:	370c      	adds	r7, #12
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bc80      	pop	{r7}
 80093d6:	4770      	bx	lr

080093d8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b090      	sub	sp, #64	@ 0x40
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 0320 	and.w	r3, r3, #32
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d137      	bne.n	8009464 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80093f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093f6:	2200      	movs	r2, #0
 80093f8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80093fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	3314      	adds	r3, #20
 8009400:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009404:	e853 3f00 	ldrex	r3, [r3]
 8009408:	623b      	str	r3, [r7, #32]
   return(result);
 800940a:	6a3b      	ldr	r3, [r7, #32]
 800940c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009410:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	3314      	adds	r3, #20
 8009418:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800941a:	633a      	str	r2, [r7, #48]	@ 0x30
 800941c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009420:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009422:	e841 2300 	strex	r3, r2, [r1]
 8009426:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800942a:	2b00      	cmp	r3, #0
 800942c:	d1e5      	bne.n	80093fa <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800942e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	330c      	adds	r3, #12
 8009434:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	e853 3f00 	ldrex	r3, [r3]
 800943c:	60fb      	str	r3, [r7, #12]
   return(result);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009444:	637b      	str	r3, [r7, #52]	@ 0x34
 8009446:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	330c      	adds	r3, #12
 800944c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800944e:	61fa      	str	r2, [r7, #28]
 8009450:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009452:	69b9      	ldr	r1, [r7, #24]
 8009454:	69fa      	ldr	r2, [r7, #28]
 8009456:	e841 2300 	strex	r3, r2, [r1]
 800945a:	617b      	str	r3, [r7, #20]
   return(result);
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1e5      	bne.n	800942e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009462:	e002      	b.n	800946a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009464:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009466:	f7fa ff9b 	bl	80043a0 <HAL_UART_TxCpltCallback>
}
 800946a:	bf00      	nop
 800946c:	3740      	adds	r7, #64	@ 0x40
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}

08009472 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009472:	b580      	push	{r7, lr}
 8009474:	b084      	sub	sp, #16
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800947e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009480:	68f8      	ldr	r0, [r7, #12]
 8009482:	f7ff ff83 	bl	800938c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009486:	bf00      	nop
 8009488:	3710      	adds	r7, #16
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800948e:	b580      	push	{r7, lr}
 8009490:	b09c      	sub	sp, #112	@ 0x70
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800949a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f003 0320 	and.w	r3, r3, #32
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d172      	bne.n	8009590 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80094aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094ac:	2200      	movs	r2, #0
 80094ae:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	330c      	adds	r3, #12
 80094b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094ba:	e853 3f00 	ldrex	r3, [r3]
 80094be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80094c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80094c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80094c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	330c      	adds	r3, #12
 80094ce:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80094d0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80094d2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80094d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80094d8:	e841 2300 	strex	r3, r2, [r1]
 80094dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80094de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d1e5      	bne.n	80094b0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	3314      	adds	r3, #20
 80094ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ee:	e853 3f00 	ldrex	r3, [r3]
 80094f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094f6:	f023 0301 	bic.w	r3, r3, #1
 80094fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80094fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	3314      	adds	r3, #20
 8009502:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009504:	647a      	str	r2, [r7, #68]	@ 0x44
 8009506:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009508:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800950a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800950c:	e841 2300 	strex	r3, r2, [r1]
 8009510:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009514:	2b00      	cmp	r3, #0
 8009516:	d1e5      	bne.n	80094e4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009518:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	3314      	adds	r3, #20
 800951e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009522:	e853 3f00 	ldrex	r3, [r3]
 8009526:	623b      	str	r3, [r7, #32]
   return(result);
 8009528:	6a3b      	ldr	r3, [r7, #32]
 800952a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800952e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009530:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	3314      	adds	r3, #20
 8009536:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009538:	633a      	str	r2, [r7, #48]	@ 0x30
 800953a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800953e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009540:	e841 2300 	strex	r3, r2, [r1]
 8009544:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1e5      	bne.n	8009518 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800954c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800954e:	2220      	movs	r2, #32
 8009550:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009554:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009558:	2b01      	cmp	r3, #1
 800955a:	d119      	bne.n	8009590 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800955c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	330c      	adds	r3, #12
 8009562:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	e853 3f00 	ldrex	r3, [r3]
 800956a:	60fb      	str	r3, [r7, #12]
   return(result);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f023 0310 	bic.w	r3, r3, #16
 8009572:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009574:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	330c      	adds	r3, #12
 800957a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800957c:	61fa      	str	r2, [r7, #28]
 800957e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009580:	69b9      	ldr	r1, [r7, #24]
 8009582:	69fa      	ldr	r2, [r7, #28]
 8009584:	e841 2300 	strex	r3, r2, [r1]
 8009588:	617b      	str	r3, [r7, #20]
   return(result);
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d1e5      	bne.n	800955c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009590:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009592:	2200      	movs	r2, #0
 8009594:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009596:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800959a:	2b01      	cmp	r3, #1
 800959c:	d106      	bne.n	80095ac <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800959e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80095a2:	4619      	mov	r1, r3
 80095a4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80095a6:	f7ff ff0c 	bl	80093c2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80095aa:	e002      	b.n	80095b2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80095ac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80095ae:	f7fa ff0f 	bl	80043d0 <HAL_UART_RxCpltCallback>
}
 80095b2:	bf00      	nop
 80095b4:	3770      	adds	r7, #112	@ 0x70
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b084      	sub	sp, #16
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095c6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2201      	movs	r2, #1
 80095cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d108      	bne.n	80095e8 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80095da:	085b      	lsrs	r3, r3, #1
 80095dc:	b29b      	uxth	r3, r3
 80095de:	4619      	mov	r1, r3
 80095e0:	68f8      	ldr	r0, [r7, #12]
 80095e2:	f7ff feee 	bl	80093c2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80095e6:	e002      	b.n	80095ee <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80095e8:	68f8      	ldr	r0, [r7, #12]
 80095ea:	f7ff fed8 	bl	800939e <HAL_UART_RxHalfCpltCallback>
}
 80095ee:	bf00      	nop
 80095f0:	3710      	adds	r7, #16
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b084      	sub	sp, #16
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80095fe:	2300      	movs	r3, #0
 8009600:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009606:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	695b      	ldr	r3, [r3, #20]
 800960e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009612:	2b00      	cmp	r3, #0
 8009614:	bf14      	ite	ne
 8009616:	2301      	movne	r3, #1
 8009618:	2300      	moveq	r3, #0
 800961a:	b2db      	uxtb	r3, r3
 800961c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009624:	b2db      	uxtb	r3, r3
 8009626:	2b21      	cmp	r3, #33	@ 0x21
 8009628:	d108      	bne.n	800963c <UART_DMAError+0x46>
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d005      	beq.n	800963c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	2200      	movs	r2, #0
 8009634:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8009636:	68b8      	ldr	r0, [r7, #8]
 8009638:	f000 f8c2 	bl	80097c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	695b      	ldr	r3, [r3, #20]
 8009642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009646:	2b00      	cmp	r3, #0
 8009648:	bf14      	ite	ne
 800964a:	2301      	movne	r3, #1
 800964c:	2300      	moveq	r3, #0
 800964e:	b2db      	uxtb	r3, r3
 8009650:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009658:	b2db      	uxtb	r3, r3
 800965a:	2b22      	cmp	r3, #34	@ 0x22
 800965c:	d108      	bne.n	8009670 <UART_DMAError+0x7a>
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d005      	beq.n	8009670 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	2200      	movs	r2, #0
 8009668:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800966a:	68b8      	ldr	r0, [r7, #8]
 800966c:	f000 f8cf 	bl	800980e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009674:	f043 0210 	orr.w	r2, r3, #16
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800967c:	68b8      	ldr	r0, [r7, #8]
 800967e:	f7ff fe97 	bl	80093b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009682:	bf00      	nop
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
	...

0800968c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b098      	sub	sp, #96	@ 0x60
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	4613      	mov	r3, r2
 8009698:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800969a:	68ba      	ldr	r2, [r7, #8]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	88fa      	ldrh	r2, [r7, #6]
 80096a4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2200      	movs	r2, #0
 80096aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2222      	movs	r2, #34	@ 0x22
 80096b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096b8:	4a3e      	ldr	r2, [pc, #248]	@ (80097b4 <UART_Start_Receive_DMA+0x128>)
 80096ba:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096c0:	4a3d      	ldr	r2, [pc, #244]	@ (80097b8 <UART_Start_Receive_DMA+0x12c>)
 80096c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096c8:	4a3c      	ldr	r2, [pc, #240]	@ (80097bc <UART_Start_Receive_DMA+0x130>)
 80096ca:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096d0:	2200      	movs	r2, #0
 80096d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80096d4:	f107 0308 	add.w	r3, r7, #8
 80096d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	3304      	adds	r3, #4
 80096e4:	4619      	mov	r1, r3
 80096e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	88fb      	ldrh	r3, [r7, #6]
 80096ec:	f7fc fd68 	bl	80061c0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80096f0:	2300      	movs	r3, #0
 80096f2:	613b      	str	r3, [r7, #16]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	613b      	str	r3, [r7, #16]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	613b      	str	r3, [r7, #16]
 8009704:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	691b      	ldr	r3, [r3, #16]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d019      	beq.n	8009742 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	330c      	adds	r3, #12
 8009714:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009716:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009718:	e853 3f00 	ldrex	r3, [r3]
 800971c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800971e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009720:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009724:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	330c      	adds	r3, #12
 800972c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800972e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009730:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009732:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009734:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009736:	e841 2300 	strex	r3, r2, [r1]
 800973a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800973c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800973e:	2b00      	cmp	r3, #0
 8009740:	d1e5      	bne.n	800970e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	3314      	adds	r3, #20
 8009748:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800974a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800974c:	e853 3f00 	ldrex	r3, [r3]
 8009750:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009754:	f043 0301 	orr.w	r3, r3, #1
 8009758:	657b      	str	r3, [r7, #84]	@ 0x54
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	3314      	adds	r3, #20
 8009760:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009762:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009764:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009766:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009768:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800976a:	e841 2300 	strex	r3, r2, [r1]
 800976e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009772:	2b00      	cmp	r3, #0
 8009774:	d1e5      	bne.n	8009742 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	3314      	adds	r3, #20
 800977c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	e853 3f00 	ldrex	r3, [r3]
 8009784:	617b      	str	r3, [r7, #20]
   return(result);
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800978c:	653b      	str	r3, [r7, #80]	@ 0x50
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	3314      	adds	r3, #20
 8009794:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009796:	627a      	str	r2, [r7, #36]	@ 0x24
 8009798:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979a:	6a39      	ldr	r1, [r7, #32]
 800979c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800979e:	e841 2300 	strex	r3, r2, [r1]
 80097a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80097a4:	69fb      	ldr	r3, [r7, #28]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d1e5      	bne.n	8009776 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3760      	adds	r7, #96	@ 0x60
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	0800948f 	.word	0x0800948f
 80097b8:	080095bb 	.word	0x080095bb
 80097bc:	080095f7 	.word	0x080095f7

080097c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b089      	sub	sp, #36	@ 0x24
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	330c      	adds	r3, #12
 80097ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	e853 3f00 	ldrex	r3, [r3]
 80097d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80097de:	61fb      	str	r3, [r7, #28]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	330c      	adds	r3, #12
 80097e6:	69fa      	ldr	r2, [r7, #28]
 80097e8:	61ba      	str	r2, [r7, #24]
 80097ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ec:	6979      	ldr	r1, [r7, #20]
 80097ee:	69ba      	ldr	r2, [r7, #24]
 80097f0:	e841 2300 	strex	r3, r2, [r1]
 80097f4:	613b      	str	r3, [r7, #16]
   return(result);
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d1e5      	bne.n	80097c8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2220      	movs	r2, #32
 8009800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8009804:	bf00      	nop
 8009806:	3724      	adds	r7, #36	@ 0x24
 8009808:	46bd      	mov	sp, r7
 800980a:	bc80      	pop	{r7}
 800980c:	4770      	bx	lr

0800980e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800980e:	b480      	push	{r7}
 8009810:	b095      	sub	sp, #84	@ 0x54
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	330c      	adds	r3, #12
 800981c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009820:	e853 3f00 	ldrex	r3, [r3]
 8009824:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009828:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800982c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	330c      	adds	r3, #12
 8009834:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009836:	643a      	str	r2, [r7, #64]	@ 0x40
 8009838:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800983c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800983e:	e841 2300 	strex	r3, r2, [r1]
 8009842:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1e5      	bne.n	8009816 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	3314      	adds	r3, #20
 8009850:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009852:	6a3b      	ldr	r3, [r7, #32]
 8009854:	e853 3f00 	ldrex	r3, [r3]
 8009858:	61fb      	str	r3, [r7, #28]
   return(result);
 800985a:	69fb      	ldr	r3, [r7, #28]
 800985c:	f023 0301 	bic.w	r3, r3, #1
 8009860:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	3314      	adds	r3, #20
 8009868:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800986a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800986c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009870:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009872:	e841 2300 	strex	r3, r2, [r1]
 8009876:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800987a:	2b00      	cmp	r3, #0
 800987c:	d1e5      	bne.n	800984a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009882:	2b01      	cmp	r3, #1
 8009884:	d119      	bne.n	80098ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	330c      	adds	r3, #12
 800988c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	e853 3f00 	ldrex	r3, [r3]
 8009894:	60bb      	str	r3, [r7, #8]
   return(result);
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	f023 0310 	bic.w	r3, r3, #16
 800989c:	647b      	str	r3, [r7, #68]	@ 0x44
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	330c      	adds	r3, #12
 80098a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098a6:	61ba      	str	r2, [r7, #24]
 80098a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098aa:	6979      	ldr	r1, [r7, #20]
 80098ac:	69ba      	ldr	r2, [r7, #24]
 80098ae:	e841 2300 	strex	r3, r2, [r1]
 80098b2:	613b      	str	r3, [r7, #16]
   return(result);
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1e5      	bne.n	8009886 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2220      	movs	r2, #32
 80098be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2200      	movs	r2, #0
 80098c6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80098c8:	bf00      	nop
 80098ca:	3754      	adds	r7, #84	@ 0x54
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bc80      	pop	{r7}
 80098d0:	4770      	bx	lr

080098d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b084      	sub	sp, #16
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2200      	movs	r2, #0
 80098e4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2200      	movs	r2, #0
 80098ea:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f7ff fd5f 	bl	80093b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098f2:	bf00      	nop
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80098fa:	b480      	push	{r7}
 80098fc:	b085      	sub	sp, #20
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009908:	b2db      	uxtb	r3, r3
 800990a:	2b21      	cmp	r3, #33	@ 0x21
 800990c:	d13e      	bne.n	800998c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009916:	d114      	bne.n	8009942 <UART_Transmit_IT+0x48>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	691b      	ldr	r3, [r3, #16]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d110      	bne.n	8009942 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6a1b      	ldr	r3, [r3, #32]
 8009924:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	881b      	ldrh	r3, [r3, #0]
 800992a:	461a      	mov	r2, r3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009934:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6a1b      	ldr	r3, [r3, #32]
 800993a:	1c9a      	adds	r2, r3, #2
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	621a      	str	r2, [r3, #32]
 8009940:	e008      	b.n	8009954 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6a1b      	ldr	r3, [r3, #32]
 8009946:	1c59      	adds	r1, r3, #1
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	6211      	str	r1, [r2, #32]
 800994c:	781a      	ldrb	r2, [r3, #0]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009958:	b29b      	uxth	r3, r3
 800995a:	3b01      	subs	r3, #1
 800995c:	b29b      	uxth	r3, r3
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	4619      	mov	r1, r3
 8009962:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009964:	2b00      	cmp	r3, #0
 8009966:	d10f      	bne.n	8009988 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	68da      	ldr	r2, [r3, #12]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009976:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	68da      	ldr	r2, [r3, #12]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009986:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009988:	2300      	movs	r3, #0
 800998a:	e000      	b.n	800998e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800998c:	2302      	movs	r3, #2
  }
}
 800998e:	4618      	mov	r0, r3
 8009990:	3714      	adds	r7, #20
 8009992:	46bd      	mov	sp, r7
 8009994:	bc80      	pop	{r7}
 8009996:	4770      	bx	lr

08009998 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68da      	ldr	r2, [r3, #12]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80099ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2220      	movs	r2, #32
 80099b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f7fa fcf1 	bl	80043a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3708      	adds	r7, #8
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b08c      	sub	sp, #48	@ 0x30
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	2b22      	cmp	r3, #34	@ 0x22
 80099da:	f040 80ae 	bne.w	8009b3a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099e6:	d117      	bne.n	8009a18 <UART_Receive_IT+0x50>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	691b      	ldr	r3, [r3, #16]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d113      	bne.n	8009a18 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80099f0:	2300      	movs	r3, #0
 80099f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a06:	b29a      	uxth	r2, r3
 8009a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a0a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a10:	1c9a      	adds	r2, r3, #2
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	629a      	str	r2, [r3, #40]	@ 0x28
 8009a16:	e026      	b.n	8009a66 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a2a:	d007      	beq.n	8009a3c <UART_Receive_IT+0x74>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d10a      	bne.n	8009a4a <UART_Receive_IT+0x82>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	691b      	ldr	r3, [r3, #16]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d106      	bne.n	8009a4a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	b2da      	uxtb	r2, r3
 8009a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a46:	701a      	strb	r2, [r3, #0]
 8009a48:	e008      	b.n	8009a5c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a56:	b2da      	uxtb	r2, r3
 8009a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a5a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a60:	1c5a      	adds	r2, r3, #1
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	4619      	mov	r1, r3
 8009a74:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d15d      	bne.n	8009b36 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	68da      	ldr	r2, [r3, #12]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f022 0220 	bic.w	r2, r2, #32
 8009a88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	68da      	ldr	r2, [r3, #12]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009a98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	695a      	ldr	r2, [r3, #20]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f022 0201 	bic.w	r2, r2, #1
 8009aa8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2220      	movs	r2, #32
 8009aae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d135      	bne.n	8009b2c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	330c      	adds	r3, #12
 8009acc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	e853 3f00 	ldrex	r3, [r3]
 8009ad4:	613b      	str	r3, [r7, #16]
   return(result);
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	f023 0310 	bic.w	r3, r3, #16
 8009adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	330c      	adds	r3, #12
 8009ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ae6:	623a      	str	r2, [r7, #32]
 8009ae8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aea:	69f9      	ldr	r1, [r7, #28]
 8009aec:	6a3a      	ldr	r2, [r7, #32]
 8009aee:	e841 2300 	strex	r3, r2, [r1]
 8009af2:	61bb      	str	r3, [r7, #24]
   return(result);
 8009af4:	69bb      	ldr	r3, [r7, #24]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1e5      	bne.n	8009ac6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f003 0310 	and.w	r3, r3, #16
 8009b04:	2b10      	cmp	r3, #16
 8009b06:	d10a      	bne.n	8009b1e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b08:	2300      	movs	r3, #0
 8009b0a:	60fb      	str	r3, [r7, #12]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	60fb      	str	r3, [r7, #12]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	60fb      	str	r3, [r7, #12]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009b22:	4619      	mov	r1, r3
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f7ff fc4c 	bl	80093c2 <HAL_UARTEx_RxEventCallback>
 8009b2a:	e002      	b.n	8009b32 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f7fa fc4f 	bl	80043d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009b32:	2300      	movs	r3, #0
 8009b34:	e002      	b.n	8009b3c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009b36:	2300      	movs	r3, #0
 8009b38:	e000      	b.n	8009b3c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009b3a:	2302      	movs	r3, #2
  }
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3730      	adds	r7, #48	@ 0x30
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	68da      	ldr	r2, [r3, #12]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	430a      	orrs	r2, r1
 8009b60:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	689a      	ldr	r2, [r3, #8]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	691b      	ldr	r3, [r3, #16]
 8009b6a:	431a      	orrs	r2, r3
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	695b      	ldr	r3, [r3, #20]
 8009b70:	4313      	orrs	r3, r2
 8009b72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8009b7e:	f023 030c 	bic.w	r3, r3, #12
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	6812      	ldr	r2, [r2, #0]
 8009b86:	68b9      	ldr	r1, [r7, #8]
 8009b88:	430b      	orrs	r3, r1
 8009b8a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	695b      	ldr	r3, [r3, #20]
 8009b92:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	699a      	ldr	r2, [r3, #24]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	430a      	orrs	r2, r1
 8009ba0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a2c      	ldr	r2, [pc, #176]	@ (8009c58 <UART_SetConfig+0x114>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d103      	bne.n	8009bb4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009bac:	f7fe fafe 	bl	80081ac <HAL_RCC_GetPCLK2Freq>
 8009bb0:	60f8      	str	r0, [r7, #12]
 8009bb2:	e002      	b.n	8009bba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009bb4:	f7fe fae6 	bl	8008184 <HAL_RCC_GetPCLK1Freq>
 8009bb8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009bba:	68fa      	ldr	r2, [r7, #12]
 8009bbc:	4613      	mov	r3, r2
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	4413      	add	r3, r2
 8009bc2:	009a      	lsls	r2, r3, #2
 8009bc4:	441a      	add	r2, r3
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bd0:	4a22      	ldr	r2, [pc, #136]	@ (8009c5c <UART_SetConfig+0x118>)
 8009bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8009bd6:	095b      	lsrs	r3, r3, #5
 8009bd8:	0119      	lsls	r1, r3, #4
 8009bda:	68fa      	ldr	r2, [r7, #12]
 8009bdc:	4613      	mov	r3, r2
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	4413      	add	r3, r2
 8009be2:	009a      	lsls	r2, r3, #2
 8009be4:	441a      	add	r2, r3
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	fbb2 f2f3 	udiv	r2, r2, r3
 8009bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8009c5c <UART_SetConfig+0x118>)
 8009bf2:	fba3 0302 	umull	r0, r3, r3, r2
 8009bf6:	095b      	lsrs	r3, r3, #5
 8009bf8:	2064      	movs	r0, #100	@ 0x64
 8009bfa:	fb00 f303 	mul.w	r3, r0, r3
 8009bfe:	1ad3      	subs	r3, r2, r3
 8009c00:	011b      	lsls	r3, r3, #4
 8009c02:	3332      	adds	r3, #50	@ 0x32
 8009c04:	4a15      	ldr	r2, [pc, #84]	@ (8009c5c <UART_SetConfig+0x118>)
 8009c06:	fba2 2303 	umull	r2, r3, r2, r3
 8009c0a:	095b      	lsrs	r3, r3, #5
 8009c0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009c10:	4419      	add	r1, r3
 8009c12:	68fa      	ldr	r2, [r7, #12]
 8009c14:	4613      	mov	r3, r2
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	4413      	add	r3, r2
 8009c1a:	009a      	lsls	r2, r3, #2
 8009c1c:	441a      	add	r2, r3
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c28:	4b0c      	ldr	r3, [pc, #48]	@ (8009c5c <UART_SetConfig+0x118>)
 8009c2a:	fba3 0302 	umull	r0, r3, r3, r2
 8009c2e:	095b      	lsrs	r3, r3, #5
 8009c30:	2064      	movs	r0, #100	@ 0x64
 8009c32:	fb00 f303 	mul.w	r3, r0, r3
 8009c36:	1ad3      	subs	r3, r2, r3
 8009c38:	011b      	lsls	r3, r3, #4
 8009c3a:	3332      	adds	r3, #50	@ 0x32
 8009c3c:	4a07      	ldr	r2, [pc, #28]	@ (8009c5c <UART_SetConfig+0x118>)
 8009c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c42:	095b      	lsrs	r3, r3, #5
 8009c44:	f003 020f 	and.w	r2, r3, #15
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	440a      	add	r2, r1
 8009c4e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009c50:	bf00      	nop
 8009c52:	3710      	adds	r7, #16
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	40013800 	.word	0x40013800
 8009c5c:	51eb851f 	.word	0x51eb851f

08009c60 <realloc>:
 8009c60:	4b02      	ldr	r3, [pc, #8]	@ (8009c6c <realloc+0xc>)
 8009c62:	460a      	mov	r2, r1
 8009c64:	4601      	mov	r1, r0
 8009c66:	6818      	ldr	r0, [r3, #0]
 8009c68:	f000 b802 	b.w	8009c70 <_realloc_r>
 8009c6c:	20000024 	.word	0x20000024

08009c70 <_realloc_r>:
 8009c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c74:	4680      	mov	r8, r0
 8009c76:	4615      	mov	r5, r2
 8009c78:	460c      	mov	r4, r1
 8009c7a:	b921      	cbnz	r1, 8009c86 <_realloc_r+0x16>
 8009c7c:	4611      	mov	r1, r2
 8009c7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c82:	f000 bb21 	b.w	800a2c8 <_malloc_r>
 8009c86:	b92a      	cbnz	r2, 8009c94 <_realloc_r+0x24>
 8009c88:	f000 fab4 	bl	800a1f4 <_free_r>
 8009c8c:	2400      	movs	r4, #0
 8009c8e:	4620      	mov	r0, r4
 8009c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c94:	f000 fba4 	bl	800a3e0 <_malloc_usable_size_r>
 8009c98:	4285      	cmp	r5, r0
 8009c9a:	4606      	mov	r6, r0
 8009c9c:	d802      	bhi.n	8009ca4 <_realloc_r+0x34>
 8009c9e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009ca2:	d8f4      	bhi.n	8009c8e <_realloc_r+0x1e>
 8009ca4:	4629      	mov	r1, r5
 8009ca6:	4640      	mov	r0, r8
 8009ca8:	f000 fb0e 	bl	800a2c8 <_malloc_r>
 8009cac:	4607      	mov	r7, r0
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	d0ec      	beq.n	8009c8c <_realloc_r+0x1c>
 8009cb2:	42b5      	cmp	r5, r6
 8009cb4:	462a      	mov	r2, r5
 8009cb6:	4621      	mov	r1, r4
 8009cb8:	bf28      	it	cs
 8009cba:	4632      	movcs	r2, r6
 8009cbc:	f000 fa8b 	bl	800a1d6 <memcpy>
 8009cc0:	4621      	mov	r1, r4
 8009cc2:	4640      	mov	r0, r8
 8009cc4:	f000 fa96 	bl	800a1f4 <_free_r>
 8009cc8:	463c      	mov	r4, r7
 8009cca:	e7e0      	b.n	8009c8e <_realloc_r+0x1e>

08009ccc <std>:
 8009ccc:	2300      	movs	r3, #0
 8009cce:	b510      	push	{r4, lr}
 8009cd0:	4604      	mov	r4, r0
 8009cd2:	e9c0 3300 	strd	r3, r3, [r0]
 8009cd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009cda:	6083      	str	r3, [r0, #8]
 8009cdc:	8181      	strh	r1, [r0, #12]
 8009cde:	6643      	str	r3, [r0, #100]	@ 0x64
 8009ce0:	81c2      	strh	r2, [r0, #14]
 8009ce2:	6183      	str	r3, [r0, #24]
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	2208      	movs	r2, #8
 8009ce8:	305c      	adds	r0, #92	@ 0x5c
 8009cea:	f000 f9f9 	bl	800a0e0 <memset>
 8009cee:	4b0d      	ldr	r3, [pc, #52]	@ (8009d24 <std+0x58>)
 8009cf0:	6224      	str	r4, [r4, #32]
 8009cf2:	6263      	str	r3, [r4, #36]	@ 0x24
 8009cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8009d28 <std+0x5c>)
 8009cf6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8009d2c <std+0x60>)
 8009cfa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8009d30 <std+0x64>)
 8009cfe:	6323      	str	r3, [r4, #48]	@ 0x30
 8009d00:	4b0c      	ldr	r3, [pc, #48]	@ (8009d34 <std+0x68>)
 8009d02:	429c      	cmp	r4, r3
 8009d04:	d006      	beq.n	8009d14 <std+0x48>
 8009d06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009d0a:	4294      	cmp	r4, r2
 8009d0c:	d002      	beq.n	8009d14 <std+0x48>
 8009d0e:	33d0      	adds	r3, #208	@ 0xd0
 8009d10:	429c      	cmp	r4, r3
 8009d12:	d105      	bne.n	8009d20 <std+0x54>
 8009d14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d1c:	f000 ba58 	b.w	800a1d0 <__retarget_lock_init_recursive>
 8009d20:	bd10      	pop	{r4, pc}
 8009d22:	bf00      	nop
 8009d24:	08009f31 	.word	0x08009f31
 8009d28:	08009f53 	.word	0x08009f53
 8009d2c:	08009f8b 	.word	0x08009f8b
 8009d30:	08009faf 	.word	0x08009faf
 8009d34:	20000d34 	.word	0x20000d34

08009d38 <stdio_exit_handler>:
 8009d38:	4a02      	ldr	r2, [pc, #8]	@ (8009d44 <stdio_exit_handler+0xc>)
 8009d3a:	4903      	ldr	r1, [pc, #12]	@ (8009d48 <stdio_exit_handler+0x10>)
 8009d3c:	4803      	ldr	r0, [pc, #12]	@ (8009d4c <stdio_exit_handler+0x14>)
 8009d3e:	f000 b869 	b.w	8009e14 <_fwalk_sglue>
 8009d42:	bf00      	nop
 8009d44:	20000018 	.word	0x20000018
 8009d48:	0800aa95 	.word	0x0800aa95
 8009d4c:	20000028 	.word	0x20000028

08009d50 <cleanup_stdio>:
 8009d50:	6841      	ldr	r1, [r0, #4]
 8009d52:	4b0c      	ldr	r3, [pc, #48]	@ (8009d84 <cleanup_stdio+0x34>)
 8009d54:	b510      	push	{r4, lr}
 8009d56:	4299      	cmp	r1, r3
 8009d58:	4604      	mov	r4, r0
 8009d5a:	d001      	beq.n	8009d60 <cleanup_stdio+0x10>
 8009d5c:	f000 fe9a 	bl	800aa94 <_fflush_r>
 8009d60:	68a1      	ldr	r1, [r4, #8]
 8009d62:	4b09      	ldr	r3, [pc, #36]	@ (8009d88 <cleanup_stdio+0x38>)
 8009d64:	4299      	cmp	r1, r3
 8009d66:	d002      	beq.n	8009d6e <cleanup_stdio+0x1e>
 8009d68:	4620      	mov	r0, r4
 8009d6a:	f000 fe93 	bl	800aa94 <_fflush_r>
 8009d6e:	68e1      	ldr	r1, [r4, #12]
 8009d70:	4b06      	ldr	r3, [pc, #24]	@ (8009d8c <cleanup_stdio+0x3c>)
 8009d72:	4299      	cmp	r1, r3
 8009d74:	d004      	beq.n	8009d80 <cleanup_stdio+0x30>
 8009d76:	4620      	mov	r0, r4
 8009d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d7c:	f000 be8a 	b.w	800aa94 <_fflush_r>
 8009d80:	bd10      	pop	{r4, pc}
 8009d82:	bf00      	nop
 8009d84:	20000d34 	.word	0x20000d34
 8009d88:	20000d9c 	.word	0x20000d9c
 8009d8c:	20000e04 	.word	0x20000e04

08009d90 <global_stdio_init.part.0>:
 8009d90:	b510      	push	{r4, lr}
 8009d92:	4b0b      	ldr	r3, [pc, #44]	@ (8009dc0 <global_stdio_init.part.0+0x30>)
 8009d94:	4c0b      	ldr	r4, [pc, #44]	@ (8009dc4 <global_stdio_init.part.0+0x34>)
 8009d96:	4a0c      	ldr	r2, [pc, #48]	@ (8009dc8 <global_stdio_init.part.0+0x38>)
 8009d98:	4620      	mov	r0, r4
 8009d9a:	601a      	str	r2, [r3, #0]
 8009d9c:	2104      	movs	r1, #4
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f7ff ff94 	bl	8009ccc <std>
 8009da4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009da8:	2201      	movs	r2, #1
 8009daa:	2109      	movs	r1, #9
 8009dac:	f7ff ff8e 	bl	8009ccc <std>
 8009db0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009db4:	2202      	movs	r2, #2
 8009db6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dba:	2112      	movs	r1, #18
 8009dbc:	f7ff bf86 	b.w	8009ccc <std>
 8009dc0:	20000e6c 	.word	0x20000e6c
 8009dc4:	20000d34 	.word	0x20000d34
 8009dc8:	08009d39 	.word	0x08009d39

08009dcc <__sfp_lock_acquire>:
 8009dcc:	4801      	ldr	r0, [pc, #4]	@ (8009dd4 <__sfp_lock_acquire+0x8>)
 8009dce:	f000 ba00 	b.w	800a1d2 <__retarget_lock_acquire_recursive>
 8009dd2:	bf00      	nop
 8009dd4:	20000e75 	.word	0x20000e75

08009dd8 <__sfp_lock_release>:
 8009dd8:	4801      	ldr	r0, [pc, #4]	@ (8009de0 <__sfp_lock_release+0x8>)
 8009dda:	f000 b9fb 	b.w	800a1d4 <__retarget_lock_release_recursive>
 8009dde:	bf00      	nop
 8009de0:	20000e75 	.word	0x20000e75

08009de4 <__sinit>:
 8009de4:	b510      	push	{r4, lr}
 8009de6:	4604      	mov	r4, r0
 8009de8:	f7ff fff0 	bl	8009dcc <__sfp_lock_acquire>
 8009dec:	6a23      	ldr	r3, [r4, #32]
 8009dee:	b11b      	cbz	r3, 8009df8 <__sinit+0x14>
 8009df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009df4:	f7ff bff0 	b.w	8009dd8 <__sfp_lock_release>
 8009df8:	4b04      	ldr	r3, [pc, #16]	@ (8009e0c <__sinit+0x28>)
 8009dfa:	6223      	str	r3, [r4, #32]
 8009dfc:	4b04      	ldr	r3, [pc, #16]	@ (8009e10 <__sinit+0x2c>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d1f5      	bne.n	8009df0 <__sinit+0xc>
 8009e04:	f7ff ffc4 	bl	8009d90 <global_stdio_init.part.0>
 8009e08:	e7f2      	b.n	8009df0 <__sinit+0xc>
 8009e0a:	bf00      	nop
 8009e0c:	08009d51 	.word	0x08009d51
 8009e10:	20000e6c 	.word	0x20000e6c

08009e14 <_fwalk_sglue>:
 8009e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e18:	4607      	mov	r7, r0
 8009e1a:	4688      	mov	r8, r1
 8009e1c:	4614      	mov	r4, r2
 8009e1e:	2600      	movs	r6, #0
 8009e20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e24:	f1b9 0901 	subs.w	r9, r9, #1
 8009e28:	d505      	bpl.n	8009e36 <_fwalk_sglue+0x22>
 8009e2a:	6824      	ldr	r4, [r4, #0]
 8009e2c:	2c00      	cmp	r4, #0
 8009e2e:	d1f7      	bne.n	8009e20 <_fwalk_sglue+0xc>
 8009e30:	4630      	mov	r0, r6
 8009e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e36:	89ab      	ldrh	r3, [r5, #12]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d907      	bls.n	8009e4c <_fwalk_sglue+0x38>
 8009e3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e40:	3301      	adds	r3, #1
 8009e42:	d003      	beq.n	8009e4c <_fwalk_sglue+0x38>
 8009e44:	4629      	mov	r1, r5
 8009e46:	4638      	mov	r0, r7
 8009e48:	47c0      	blx	r8
 8009e4a:	4306      	orrs	r6, r0
 8009e4c:	3568      	adds	r5, #104	@ 0x68
 8009e4e:	e7e9      	b.n	8009e24 <_fwalk_sglue+0x10>

08009e50 <iprintf>:
 8009e50:	b40f      	push	{r0, r1, r2, r3}
 8009e52:	b507      	push	{r0, r1, r2, lr}
 8009e54:	4906      	ldr	r1, [pc, #24]	@ (8009e70 <iprintf+0x20>)
 8009e56:	ab04      	add	r3, sp, #16
 8009e58:	6808      	ldr	r0, [r1, #0]
 8009e5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e5e:	6881      	ldr	r1, [r0, #8]
 8009e60:	9301      	str	r3, [sp, #4]
 8009e62:	f000 faed 	bl	800a440 <_vfiprintf_r>
 8009e66:	b003      	add	sp, #12
 8009e68:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e6c:	b004      	add	sp, #16
 8009e6e:	4770      	bx	lr
 8009e70:	20000024 	.word	0x20000024

08009e74 <_puts_r>:
 8009e74:	6a03      	ldr	r3, [r0, #32]
 8009e76:	b570      	push	{r4, r5, r6, lr}
 8009e78:	4605      	mov	r5, r0
 8009e7a:	460e      	mov	r6, r1
 8009e7c:	6884      	ldr	r4, [r0, #8]
 8009e7e:	b90b      	cbnz	r3, 8009e84 <_puts_r+0x10>
 8009e80:	f7ff ffb0 	bl	8009de4 <__sinit>
 8009e84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e86:	07db      	lsls	r3, r3, #31
 8009e88:	d405      	bmi.n	8009e96 <_puts_r+0x22>
 8009e8a:	89a3      	ldrh	r3, [r4, #12]
 8009e8c:	0598      	lsls	r0, r3, #22
 8009e8e:	d402      	bmi.n	8009e96 <_puts_r+0x22>
 8009e90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e92:	f000 f99e 	bl	800a1d2 <__retarget_lock_acquire_recursive>
 8009e96:	89a3      	ldrh	r3, [r4, #12]
 8009e98:	0719      	lsls	r1, r3, #28
 8009e9a:	d502      	bpl.n	8009ea2 <_puts_r+0x2e>
 8009e9c:	6923      	ldr	r3, [r4, #16]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d135      	bne.n	8009f0e <_puts_r+0x9a>
 8009ea2:	4621      	mov	r1, r4
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	f000 f8c5 	bl	800a034 <__swsetup_r>
 8009eaa:	b380      	cbz	r0, 8009f0e <_puts_r+0x9a>
 8009eac:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8009eb0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009eb2:	07da      	lsls	r2, r3, #31
 8009eb4:	d405      	bmi.n	8009ec2 <_puts_r+0x4e>
 8009eb6:	89a3      	ldrh	r3, [r4, #12]
 8009eb8:	059b      	lsls	r3, r3, #22
 8009eba:	d402      	bmi.n	8009ec2 <_puts_r+0x4e>
 8009ebc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ebe:	f000 f989 	bl	800a1d4 <__retarget_lock_release_recursive>
 8009ec2:	4628      	mov	r0, r5
 8009ec4:	bd70      	pop	{r4, r5, r6, pc}
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	da04      	bge.n	8009ed4 <_puts_r+0x60>
 8009eca:	69a2      	ldr	r2, [r4, #24]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	dc17      	bgt.n	8009f00 <_puts_r+0x8c>
 8009ed0:	290a      	cmp	r1, #10
 8009ed2:	d015      	beq.n	8009f00 <_puts_r+0x8c>
 8009ed4:	6823      	ldr	r3, [r4, #0]
 8009ed6:	1c5a      	adds	r2, r3, #1
 8009ed8:	6022      	str	r2, [r4, #0]
 8009eda:	7019      	strb	r1, [r3, #0]
 8009edc:	68a3      	ldr	r3, [r4, #8]
 8009ede:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009ee2:	3b01      	subs	r3, #1
 8009ee4:	60a3      	str	r3, [r4, #8]
 8009ee6:	2900      	cmp	r1, #0
 8009ee8:	d1ed      	bne.n	8009ec6 <_puts_r+0x52>
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	da11      	bge.n	8009f12 <_puts_r+0x9e>
 8009eee:	4622      	mov	r2, r4
 8009ef0:	210a      	movs	r1, #10
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	f000 f85f 	bl	8009fb6 <__swbuf_r>
 8009ef8:	3001      	adds	r0, #1
 8009efa:	d0d7      	beq.n	8009eac <_puts_r+0x38>
 8009efc:	250a      	movs	r5, #10
 8009efe:	e7d7      	b.n	8009eb0 <_puts_r+0x3c>
 8009f00:	4622      	mov	r2, r4
 8009f02:	4628      	mov	r0, r5
 8009f04:	f000 f857 	bl	8009fb6 <__swbuf_r>
 8009f08:	3001      	adds	r0, #1
 8009f0a:	d1e7      	bne.n	8009edc <_puts_r+0x68>
 8009f0c:	e7ce      	b.n	8009eac <_puts_r+0x38>
 8009f0e:	3e01      	subs	r6, #1
 8009f10:	e7e4      	b.n	8009edc <_puts_r+0x68>
 8009f12:	6823      	ldr	r3, [r4, #0]
 8009f14:	1c5a      	adds	r2, r3, #1
 8009f16:	6022      	str	r2, [r4, #0]
 8009f18:	220a      	movs	r2, #10
 8009f1a:	701a      	strb	r2, [r3, #0]
 8009f1c:	e7ee      	b.n	8009efc <_puts_r+0x88>
	...

08009f20 <puts>:
 8009f20:	4b02      	ldr	r3, [pc, #8]	@ (8009f2c <puts+0xc>)
 8009f22:	4601      	mov	r1, r0
 8009f24:	6818      	ldr	r0, [r3, #0]
 8009f26:	f7ff bfa5 	b.w	8009e74 <_puts_r>
 8009f2a:	bf00      	nop
 8009f2c:	20000024 	.word	0x20000024

08009f30 <__sread>:
 8009f30:	b510      	push	{r4, lr}
 8009f32:	460c      	mov	r4, r1
 8009f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f38:	f000 f8fc 	bl	800a134 <_read_r>
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	bfab      	itete	ge
 8009f40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009f42:	89a3      	ldrhlt	r3, [r4, #12]
 8009f44:	181b      	addge	r3, r3, r0
 8009f46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009f4a:	bfac      	ite	ge
 8009f4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009f4e:	81a3      	strhlt	r3, [r4, #12]
 8009f50:	bd10      	pop	{r4, pc}

08009f52 <__swrite>:
 8009f52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f56:	461f      	mov	r7, r3
 8009f58:	898b      	ldrh	r3, [r1, #12]
 8009f5a:	4605      	mov	r5, r0
 8009f5c:	05db      	lsls	r3, r3, #23
 8009f5e:	460c      	mov	r4, r1
 8009f60:	4616      	mov	r6, r2
 8009f62:	d505      	bpl.n	8009f70 <__swrite+0x1e>
 8009f64:	2302      	movs	r3, #2
 8009f66:	2200      	movs	r2, #0
 8009f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f6c:	f000 f8d0 	bl	800a110 <_lseek_r>
 8009f70:	89a3      	ldrh	r3, [r4, #12]
 8009f72:	4632      	mov	r2, r6
 8009f74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009f78:	81a3      	strh	r3, [r4, #12]
 8009f7a:	4628      	mov	r0, r5
 8009f7c:	463b      	mov	r3, r7
 8009f7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f86:	f000 b8e7 	b.w	800a158 <_write_r>

08009f8a <__sseek>:
 8009f8a:	b510      	push	{r4, lr}
 8009f8c:	460c      	mov	r4, r1
 8009f8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f92:	f000 f8bd 	bl	800a110 <_lseek_r>
 8009f96:	1c43      	adds	r3, r0, #1
 8009f98:	89a3      	ldrh	r3, [r4, #12]
 8009f9a:	bf15      	itete	ne
 8009f9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009f9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009fa2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009fa6:	81a3      	strheq	r3, [r4, #12]
 8009fa8:	bf18      	it	ne
 8009faa:	81a3      	strhne	r3, [r4, #12]
 8009fac:	bd10      	pop	{r4, pc}

08009fae <__sclose>:
 8009fae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fb2:	f000 b89d 	b.w	800a0f0 <_close_r>

08009fb6 <__swbuf_r>:
 8009fb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fb8:	460e      	mov	r6, r1
 8009fba:	4614      	mov	r4, r2
 8009fbc:	4605      	mov	r5, r0
 8009fbe:	b118      	cbz	r0, 8009fc8 <__swbuf_r+0x12>
 8009fc0:	6a03      	ldr	r3, [r0, #32]
 8009fc2:	b90b      	cbnz	r3, 8009fc8 <__swbuf_r+0x12>
 8009fc4:	f7ff ff0e 	bl	8009de4 <__sinit>
 8009fc8:	69a3      	ldr	r3, [r4, #24]
 8009fca:	60a3      	str	r3, [r4, #8]
 8009fcc:	89a3      	ldrh	r3, [r4, #12]
 8009fce:	071a      	lsls	r2, r3, #28
 8009fd0:	d501      	bpl.n	8009fd6 <__swbuf_r+0x20>
 8009fd2:	6923      	ldr	r3, [r4, #16]
 8009fd4:	b943      	cbnz	r3, 8009fe8 <__swbuf_r+0x32>
 8009fd6:	4621      	mov	r1, r4
 8009fd8:	4628      	mov	r0, r5
 8009fda:	f000 f82b 	bl	800a034 <__swsetup_r>
 8009fde:	b118      	cbz	r0, 8009fe8 <__swbuf_r+0x32>
 8009fe0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009fe4:	4638      	mov	r0, r7
 8009fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fe8:	6823      	ldr	r3, [r4, #0]
 8009fea:	6922      	ldr	r2, [r4, #16]
 8009fec:	b2f6      	uxtb	r6, r6
 8009fee:	1a98      	subs	r0, r3, r2
 8009ff0:	6963      	ldr	r3, [r4, #20]
 8009ff2:	4637      	mov	r7, r6
 8009ff4:	4283      	cmp	r3, r0
 8009ff6:	dc05      	bgt.n	800a004 <__swbuf_r+0x4e>
 8009ff8:	4621      	mov	r1, r4
 8009ffa:	4628      	mov	r0, r5
 8009ffc:	f000 fd4a 	bl	800aa94 <_fflush_r>
 800a000:	2800      	cmp	r0, #0
 800a002:	d1ed      	bne.n	8009fe0 <__swbuf_r+0x2a>
 800a004:	68a3      	ldr	r3, [r4, #8]
 800a006:	3b01      	subs	r3, #1
 800a008:	60a3      	str	r3, [r4, #8]
 800a00a:	6823      	ldr	r3, [r4, #0]
 800a00c:	1c5a      	adds	r2, r3, #1
 800a00e:	6022      	str	r2, [r4, #0]
 800a010:	701e      	strb	r6, [r3, #0]
 800a012:	6962      	ldr	r2, [r4, #20]
 800a014:	1c43      	adds	r3, r0, #1
 800a016:	429a      	cmp	r2, r3
 800a018:	d004      	beq.n	800a024 <__swbuf_r+0x6e>
 800a01a:	89a3      	ldrh	r3, [r4, #12]
 800a01c:	07db      	lsls	r3, r3, #31
 800a01e:	d5e1      	bpl.n	8009fe4 <__swbuf_r+0x2e>
 800a020:	2e0a      	cmp	r6, #10
 800a022:	d1df      	bne.n	8009fe4 <__swbuf_r+0x2e>
 800a024:	4621      	mov	r1, r4
 800a026:	4628      	mov	r0, r5
 800a028:	f000 fd34 	bl	800aa94 <_fflush_r>
 800a02c:	2800      	cmp	r0, #0
 800a02e:	d0d9      	beq.n	8009fe4 <__swbuf_r+0x2e>
 800a030:	e7d6      	b.n	8009fe0 <__swbuf_r+0x2a>
	...

0800a034 <__swsetup_r>:
 800a034:	b538      	push	{r3, r4, r5, lr}
 800a036:	4b29      	ldr	r3, [pc, #164]	@ (800a0dc <__swsetup_r+0xa8>)
 800a038:	4605      	mov	r5, r0
 800a03a:	6818      	ldr	r0, [r3, #0]
 800a03c:	460c      	mov	r4, r1
 800a03e:	b118      	cbz	r0, 800a048 <__swsetup_r+0x14>
 800a040:	6a03      	ldr	r3, [r0, #32]
 800a042:	b90b      	cbnz	r3, 800a048 <__swsetup_r+0x14>
 800a044:	f7ff fece 	bl	8009de4 <__sinit>
 800a048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a04c:	0719      	lsls	r1, r3, #28
 800a04e:	d422      	bmi.n	800a096 <__swsetup_r+0x62>
 800a050:	06da      	lsls	r2, r3, #27
 800a052:	d407      	bmi.n	800a064 <__swsetup_r+0x30>
 800a054:	2209      	movs	r2, #9
 800a056:	602a      	str	r2, [r5, #0]
 800a058:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a05c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a060:	81a3      	strh	r3, [r4, #12]
 800a062:	e033      	b.n	800a0cc <__swsetup_r+0x98>
 800a064:	0758      	lsls	r0, r3, #29
 800a066:	d512      	bpl.n	800a08e <__swsetup_r+0x5a>
 800a068:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a06a:	b141      	cbz	r1, 800a07e <__swsetup_r+0x4a>
 800a06c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a070:	4299      	cmp	r1, r3
 800a072:	d002      	beq.n	800a07a <__swsetup_r+0x46>
 800a074:	4628      	mov	r0, r5
 800a076:	f000 f8bd 	bl	800a1f4 <_free_r>
 800a07a:	2300      	movs	r3, #0
 800a07c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a07e:	89a3      	ldrh	r3, [r4, #12]
 800a080:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a084:	81a3      	strh	r3, [r4, #12]
 800a086:	2300      	movs	r3, #0
 800a088:	6063      	str	r3, [r4, #4]
 800a08a:	6923      	ldr	r3, [r4, #16]
 800a08c:	6023      	str	r3, [r4, #0]
 800a08e:	89a3      	ldrh	r3, [r4, #12]
 800a090:	f043 0308 	orr.w	r3, r3, #8
 800a094:	81a3      	strh	r3, [r4, #12]
 800a096:	6923      	ldr	r3, [r4, #16]
 800a098:	b94b      	cbnz	r3, 800a0ae <__swsetup_r+0x7a>
 800a09a:	89a3      	ldrh	r3, [r4, #12]
 800a09c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a0a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0a4:	d003      	beq.n	800a0ae <__swsetup_r+0x7a>
 800a0a6:	4621      	mov	r1, r4
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	f000 fd40 	bl	800ab2e <__smakebuf_r>
 800a0ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0b2:	f013 0201 	ands.w	r2, r3, #1
 800a0b6:	d00a      	beq.n	800a0ce <__swsetup_r+0x9a>
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	60a2      	str	r2, [r4, #8]
 800a0bc:	6962      	ldr	r2, [r4, #20]
 800a0be:	4252      	negs	r2, r2
 800a0c0:	61a2      	str	r2, [r4, #24]
 800a0c2:	6922      	ldr	r2, [r4, #16]
 800a0c4:	b942      	cbnz	r2, 800a0d8 <__swsetup_r+0xa4>
 800a0c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a0ca:	d1c5      	bne.n	800a058 <__swsetup_r+0x24>
 800a0cc:	bd38      	pop	{r3, r4, r5, pc}
 800a0ce:	0799      	lsls	r1, r3, #30
 800a0d0:	bf58      	it	pl
 800a0d2:	6962      	ldrpl	r2, [r4, #20]
 800a0d4:	60a2      	str	r2, [r4, #8]
 800a0d6:	e7f4      	b.n	800a0c2 <__swsetup_r+0x8e>
 800a0d8:	2000      	movs	r0, #0
 800a0da:	e7f7      	b.n	800a0cc <__swsetup_r+0x98>
 800a0dc:	20000024 	.word	0x20000024

0800a0e0 <memset>:
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	4402      	add	r2, r0
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d100      	bne.n	800a0ea <memset+0xa>
 800a0e8:	4770      	bx	lr
 800a0ea:	f803 1b01 	strb.w	r1, [r3], #1
 800a0ee:	e7f9      	b.n	800a0e4 <memset+0x4>

0800a0f0 <_close_r>:
 800a0f0:	b538      	push	{r3, r4, r5, lr}
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	4d05      	ldr	r5, [pc, #20]	@ (800a10c <_close_r+0x1c>)
 800a0f6:	4604      	mov	r4, r0
 800a0f8:	4608      	mov	r0, r1
 800a0fa:	602b      	str	r3, [r5, #0]
 800a0fc:	f7fb fb6f 	bl	80057de <_close>
 800a100:	1c43      	adds	r3, r0, #1
 800a102:	d102      	bne.n	800a10a <_close_r+0x1a>
 800a104:	682b      	ldr	r3, [r5, #0]
 800a106:	b103      	cbz	r3, 800a10a <_close_r+0x1a>
 800a108:	6023      	str	r3, [r4, #0]
 800a10a:	bd38      	pop	{r3, r4, r5, pc}
 800a10c:	20000e70 	.word	0x20000e70

0800a110 <_lseek_r>:
 800a110:	b538      	push	{r3, r4, r5, lr}
 800a112:	4604      	mov	r4, r0
 800a114:	4608      	mov	r0, r1
 800a116:	4611      	mov	r1, r2
 800a118:	2200      	movs	r2, #0
 800a11a:	4d05      	ldr	r5, [pc, #20]	@ (800a130 <_lseek_r+0x20>)
 800a11c:	602a      	str	r2, [r5, #0]
 800a11e:	461a      	mov	r2, r3
 800a120:	f7fb fb81 	bl	8005826 <_lseek>
 800a124:	1c43      	adds	r3, r0, #1
 800a126:	d102      	bne.n	800a12e <_lseek_r+0x1e>
 800a128:	682b      	ldr	r3, [r5, #0]
 800a12a:	b103      	cbz	r3, 800a12e <_lseek_r+0x1e>
 800a12c:	6023      	str	r3, [r4, #0]
 800a12e:	bd38      	pop	{r3, r4, r5, pc}
 800a130:	20000e70 	.word	0x20000e70

0800a134 <_read_r>:
 800a134:	b538      	push	{r3, r4, r5, lr}
 800a136:	4604      	mov	r4, r0
 800a138:	4608      	mov	r0, r1
 800a13a:	4611      	mov	r1, r2
 800a13c:	2200      	movs	r2, #0
 800a13e:	4d05      	ldr	r5, [pc, #20]	@ (800a154 <_read_r+0x20>)
 800a140:	602a      	str	r2, [r5, #0]
 800a142:	461a      	mov	r2, r3
 800a144:	f7fb fb12 	bl	800576c <_read>
 800a148:	1c43      	adds	r3, r0, #1
 800a14a:	d102      	bne.n	800a152 <_read_r+0x1e>
 800a14c:	682b      	ldr	r3, [r5, #0]
 800a14e:	b103      	cbz	r3, 800a152 <_read_r+0x1e>
 800a150:	6023      	str	r3, [r4, #0]
 800a152:	bd38      	pop	{r3, r4, r5, pc}
 800a154:	20000e70 	.word	0x20000e70

0800a158 <_write_r>:
 800a158:	b538      	push	{r3, r4, r5, lr}
 800a15a:	4604      	mov	r4, r0
 800a15c:	4608      	mov	r0, r1
 800a15e:	4611      	mov	r1, r2
 800a160:	2200      	movs	r2, #0
 800a162:	4d05      	ldr	r5, [pc, #20]	@ (800a178 <_write_r+0x20>)
 800a164:	602a      	str	r2, [r5, #0]
 800a166:	461a      	mov	r2, r3
 800a168:	f7fb fb1d 	bl	80057a6 <_write>
 800a16c:	1c43      	adds	r3, r0, #1
 800a16e:	d102      	bne.n	800a176 <_write_r+0x1e>
 800a170:	682b      	ldr	r3, [r5, #0]
 800a172:	b103      	cbz	r3, 800a176 <_write_r+0x1e>
 800a174:	6023      	str	r3, [r4, #0]
 800a176:	bd38      	pop	{r3, r4, r5, pc}
 800a178:	20000e70 	.word	0x20000e70

0800a17c <__errno>:
 800a17c:	4b01      	ldr	r3, [pc, #4]	@ (800a184 <__errno+0x8>)
 800a17e:	6818      	ldr	r0, [r3, #0]
 800a180:	4770      	bx	lr
 800a182:	bf00      	nop
 800a184:	20000024 	.word	0x20000024

0800a188 <__libc_init_array>:
 800a188:	b570      	push	{r4, r5, r6, lr}
 800a18a:	2600      	movs	r6, #0
 800a18c:	4d0c      	ldr	r5, [pc, #48]	@ (800a1c0 <__libc_init_array+0x38>)
 800a18e:	4c0d      	ldr	r4, [pc, #52]	@ (800a1c4 <__libc_init_array+0x3c>)
 800a190:	1b64      	subs	r4, r4, r5
 800a192:	10a4      	asrs	r4, r4, #2
 800a194:	42a6      	cmp	r6, r4
 800a196:	d109      	bne.n	800a1ac <__libc_init_array+0x24>
 800a198:	f000 fd46 	bl	800ac28 <_init>
 800a19c:	2600      	movs	r6, #0
 800a19e:	4d0a      	ldr	r5, [pc, #40]	@ (800a1c8 <__libc_init_array+0x40>)
 800a1a0:	4c0a      	ldr	r4, [pc, #40]	@ (800a1cc <__libc_init_array+0x44>)
 800a1a2:	1b64      	subs	r4, r4, r5
 800a1a4:	10a4      	asrs	r4, r4, #2
 800a1a6:	42a6      	cmp	r6, r4
 800a1a8:	d105      	bne.n	800a1b6 <__libc_init_array+0x2e>
 800a1aa:	bd70      	pop	{r4, r5, r6, pc}
 800a1ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1b0:	4798      	blx	r3
 800a1b2:	3601      	adds	r6, #1
 800a1b4:	e7ee      	b.n	800a194 <__libc_init_array+0xc>
 800a1b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1ba:	4798      	blx	r3
 800a1bc:	3601      	adds	r6, #1
 800a1be:	e7f2      	b.n	800a1a6 <__libc_init_array+0x1e>
 800a1c0:	0800b224 	.word	0x0800b224
 800a1c4:	0800b224 	.word	0x0800b224
 800a1c8:	0800b224 	.word	0x0800b224
 800a1cc:	0800b22c 	.word	0x0800b22c

0800a1d0 <__retarget_lock_init_recursive>:
 800a1d0:	4770      	bx	lr

0800a1d2 <__retarget_lock_acquire_recursive>:
 800a1d2:	4770      	bx	lr

0800a1d4 <__retarget_lock_release_recursive>:
 800a1d4:	4770      	bx	lr

0800a1d6 <memcpy>:
 800a1d6:	440a      	add	r2, r1
 800a1d8:	4291      	cmp	r1, r2
 800a1da:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a1de:	d100      	bne.n	800a1e2 <memcpy+0xc>
 800a1e0:	4770      	bx	lr
 800a1e2:	b510      	push	{r4, lr}
 800a1e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1e8:	4291      	cmp	r1, r2
 800a1ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1ee:	d1f9      	bne.n	800a1e4 <memcpy+0xe>
 800a1f0:	bd10      	pop	{r4, pc}
	...

0800a1f4 <_free_r>:
 800a1f4:	b538      	push	{r3, r4, r5, lr}
 800a1f6:	4605      	mov	r5, r0
 800a1f8:	2900      	cmp	r1, #0
 800a1fa:	d040      	beq.n	800a27e <_free_r+0x8a>
 800a1fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a200:	1f0c      	subs	r4, r1, #4
 800a202:	2b00      	cmp	r3, #0
 800a204:	bfb8      	it	lt
 800a206:	18e4      	addlt	r4, r4, r3
 800a208:	f000 f8de 	bl	800a3c8 <__malloc_lock>
 800a20c:	4a1c      	ldr	r2, [pc, #112]	@ (800a280 <_free_r+0x8c>)
 800a20e:	6813      	ldr	r3, [r2, #0]
 800a210:	b933      	cbnz	r3, 800a220 <_free_r+0x2c>
 800a212:	6063      	str	r3, [r4, #4]
 800a214:	6014      	str	r4, [r2, #0]
 800a216:	4628      	mov	r0, r5
 800a218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a21c:	f000 b8da 	b.w	800a3d4 <__malloc_unlock>
 800a220:	42a3      	cmp	r3, r4
 800a222:	d908      	bls.n	800a236 <_free_r+0x42>
 800a224:	6820      	ldr	r0, [r4, #0]
 800a226:	1821      	adds	r1, r4, r0
 800a228:	428b      	cmp	r3, r1
 800a22a:	bf01      	itttt	eq
 800a22c:	6819      	ldreq	r1, [r3, #0]
 800a22e:	685b      	ldreq	r3, [r3, #4]
 800a230:	1809      	addeq	r1, r1, r0
 800a232:	6021      	streq	r1, [r4, #0]
 800a234:	e7ed      	b.n	800a212 <_free_r+0x1e>
 800a236:	461a      	mov	r2, r3
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	b10b      	cbz	r3, 800a240 <_free_r+0x4c>
 800a23c:	42a3      	cmp	r3, r4
 800a23e:	d9fa      	bls.n	800a236 <_free_r+0x42>
 800a240:	6811      	ldr	r1, [r2, #0]
 800a242:	1850      	adds	r0, r2, r1
 800a244:	42a0      	cmp	r0, r4
 800a246:	d10b      	bne.n	800a260 <_free_r+0x6c>
 800a248:	6820      	ldr	r0, [r4, #0]
 800a24a:	4401      	add	r1, r0
 800a24c:	1850      	adds	r0, r2, r1
 800a24e:	4283      	cmp	r3, r0
 800a250:	6011      	str	r1, [r2, #0]
 800a252:	d1e0      	bne.n	800a216 <_free_r+0x22>
 800a254:	6818      	ldr	r0, [r3, #0]
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	4408      	add	r0, r1
 800a25a:	6010      	str	r0, [r2, #0]
 800a25c:	6053      	str	r3, [r2, #4]
 800a25e:	e7da      	b.n	800a216 <_free_r+0x22>
 800a260:	d902      	bls.n	800a268 <_free_r+0x74>
 800a262:	230c      	movs	r3, #12
 800a264:	602b      	str	r3, [r5, #0]
 800a266:	e7d6      	b.n	800a216 <_free_r+0x22>
 800a268:	6820      	ldr	r0, [r4, #0]
 800a26a:	1821      	adds	r1, r4, r0
 800a26c:	428b      	cmp	r3, r1
 800a26e:	bf01      	itttt	eq
 800a270:	6819      	ldreq	r1, [r3, #0]
 800a272:	685b      	ldreq	r3, [r3, #4]
 800a274:	1809      	addeq	r1, r1, r0
 800a276:	6021      	streq	r1, [r4, #0]
 800a278:	6063      	str	r3, [r4, #4]
 800a27a:	6054      	str	r4, [r2, #4]
 800a27c:	e7cb      	b.n	800a216 <_free_r+0x22>
 800a27e:	bd38      	pop	{r3, r4, r5, pc}
 800a280:	20000e7c 	.word	0x20000e7c

0800a284 <sbrk_aligned>:
 800a284:	b570      	push	{r4, r5, r6, lr}
 800a286:	4e0f      	ldr	r6, [pc, #60]	@ (800a2c4 <sbrk_aligned+0x40>)
 800a288:	460c      	mov	r4, r1
 800a28a:	6831      	ldr	r1, [r6, #0]
 800a28c:	4605      	mov	r5, r0
 800a28e:	b911      	cbnz	r1, 800a296 <sbrk_aligned+0x12>
 800a290:	f000 fcac 	bl	800abec <_sbrk_r>
 800a294:	6030      	str	r0, [r6, #0]
 800a296:	4621      	mov	r1, r4
 800a298:	4628      	mov	r0, r5
 800a29a:	f000 fca7 	bl	800abec <_sbrk_r>
 800a29e:	1c43      	adds	r3, r0, #1
 800a2a0:	d103      	bne.n	800a2aa <sbrk_aligned+0x26>
 800a2a2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	bd70      	pop	{r4, r5, r6, pc}
 800a2aa:	1cc4      	adds	r4, r0, #3
 800a2ac:	f024 0403 	bic.w	r4, r4, #3
 800a2b0:	42a0      	cmp	r0, r4
 800a2b2:	d0f8      	beq.n	800a2a6 <sbrk_aligned+0x22>
 800a2b4:	1a21      	subs	r1, r4, r0
 800a2b6:	4628      	mov	r0, r5
 800a2b8:	f000 fc98 	bl	800abec <_sbrk_r>
 800a2bc:	3001      	adds	r0, #1
 800a2be:	d1f2      	bne.n	800a2a6 <sbrk_aligned+0x22>
 800a2c0:	e7ef      	b.n	800a2a2 <sbrk_aligned+0x1e>
 800a2c2:	bf00      	nop
 800a2c4:	20000e78 	.word	0x20000e78

0800a2c8 <_malloc_r>:
 800a2c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2cc:	1ccd      	adds	r5, r1, #3
 800a2ce:	f025 0503 	bic.w	r5, r5, #3
 800a2d2:	3508      	adds	r5, #8
 800a2d4:	2d0c      	cmp	r5, #12
 800a2d6:	bf38      	it	cc
 800a2d8:	250c      	movcc	r5, #12
 800a2da:	2d00      	cmp	r5, #0
 800a2dc:	4606      	mov	r6, r0
 800a2de:	db01      	blt.n	800a2e4 <_malloc_r+0x1c>
 800a2e0:	42a9      	cmp	r1, r5
 800a2e2:	d904      	bls.n	800a2ee <_malloc_r+0x26>
 800a2e4:	230c      	movs	r3, #12
 800a2e6:	6033      	str	r3, [r6, #0]
 800a2e8:	2000      	movs	r0, #0
 800a2ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a3c4 <_malloc_r+0xfc>
 800a2f2:	f000 f869 	bl	800a3c8 <__malloc_lock>
 800a2f6:	f8d8 3000 	ldr.w	r3, [r8]
 800a2fa:	461c      	mov	r4, r3
 800a2fc:	bb44      	cbnz	r4, 800a350 <_malloc_r+0x88>
 800a2fe:	4629      	mov	r1, r5
 800a300:	4630      	mov	r0, r6
 800a302:	f7ff ffbf 	bl	800a284 <sbrk_aligned>
 800a306:	1c43      	adds	r3, r0, #1
 800a308:	4604      	mov	r4, r0
 800a30a:	d158      	bne.n	800a3be <_malloc_r+0xf6>
 800a30c:	f8d8 4000 	ldr.w	r4, [r8]
 800a310:	4627      	mov	r7, r4
 800a312:	2f00      	cmp	r7, #0
 800a314:	d143      	bne.n	800a39e <_malloc_r+0xd6>
 800a316:	2c00      	cmp	r4, #0
 800a318:	d04b      	beq.n	800a3b2 <_malloc_r+0xea>
 800a31a:	6823      	ldr	r3, [r4, #0]
 800a31c:	4639      	mov	r1, r7
 800a31e:	4630      	mov	r0, r6
 800a320:	eb04 0903 	add.w	r9, r4, r3
 800a324:	f000 fc62 	bl	800abec <_sbrk_r>
 800a328:	4581      	cmp	r9, r0
 800a32a:	d142      	bne.n	800a3b2 <_malloc_r+0xea>
 800a32c:	6821      	ldr	r1, [r4, #0]
 800a32e:	4630      	mov	r0, r6
 800a330:	1a6d      	subs	r5, r5, r1
 800a332:	4629      	mov	r1, r5
 800a334:	f7ff ffa6 	bl	800a284 <sbrk_aligned>
 800a338:	3001      	adds	r0, #1
 800a33a:	d03a      	beq.n	800a3b2 <_malloc_r+0xea>
 800a33c:	6823      	ldr	r3, [r4, #0]
 800a33e:	442b      	add	r3, r5
 800a340:	6023      	str	r3, [r4, #0]
 800a342:	f8d8 3000 	ldr.w	r3, [r8]
 800a346:	685a      	ldr	r2, [r3, #4]
 800a348:	bb62      	cbnz	r2, 800a3a4 <_malloc_r+0xdc>
 800a34a:	f8c8 7000 	str.w	r7, [r8]
 800a34e:	e00f      	b.n	800a370 <_malloc_r+0xa8>
 800a350:	6822      	ldr	r2, [r4, #0]
 800a352:	1b52      	subs	r2, r2, r5
 800a354:	d420      	bmi.n	800a398 <_malloc_r+0xd0>
 800a356:	2a0b      	cmp	r2, #11
 800a358:	d917      	bls.n	800a38a <_malloc_r+0xc2>
 800a35a:	1961      	adds	r1, r4, r5
 800a35c:	42a3      	cmp	r3, r4
 800a35e:	6025      	str	r5, [r4, #0]
 800a360:	bf18      	it	ne
 800a362:	6059      	strne	r1, [r3, #4]
 800a364:	6863      	ldr	r3, [r4, #4]
 800a366:	bf08      	it	eq
 800a368:	f8c8 1000 	streq.w	r1, [r8]
 800a36c:	5162      	str	r2, [r4, r5]
 800a36e:	604b      	str	r3, [r1, #4]
 800a370:	4630      	mov	r0, r6
 800a372:	f000 f82f 	bl	800a3d4 <__malloc_unlock>
 800a376:	f104 000b 	add.w	r0, r4, #11
 800a37a:	1d23      	adds	r3, r4, #4
 800a37c:	f020 0007 	bic.w	r0, r0, #7
 800a380:	1ac2      	subs	r2, r0, r3
 800a382:	bf1c      	itt	ne
 800a384:	1a1b      	subne	r3, r3, r0
 800a386:	50a3      	strne	r3, [r4, r2]
 800a388:	e7af      	b.n	800a2ea <_malloc_r+0x22>
 800a38a:	6862      	ldr	r2, [r4, #4]
 800a38c:	42a3      	cmp	r3, r4
 800a38e:	bf0c      	ite	eq
 800a390:	f8c8 2000 	streq.w	r2, [r8]
 800a394:	605a      	strne	r2, [r3, #4]
 800a396:	e7eb      	b.n	800a370 <_malloc_r+0xa8>
 800a398:	4623      	mov	r3, r4
 800a39a:	6864      	ldr	r4, [r4, #4]
 800a39c:	e7ae      	b.n	800a2fc <_malloc_r+0x34>
 800a39e:	463c      	mov	r4, r7
 800a3a0:	687f      	ldr	r7, [r7, #4]
 800a3a2:	e7b6      	b.n	800a312 <_malloc_r+0x4a>
 800a3a4:	461a      	mov	r2, r3
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	42a3      	cmp	r3, r4
 800a3aa:	d1fb      	bne.n	800a3a4 <_malloc_r+0xdc>
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	6053      	str	r3, [r2, #4]
 800a3b0:	e7de      	b.n	800a370 <_malloc_r+0xa8>
 800a3b2:	230c      	movs	r3, #12
 800a3b4:	4630      	mov	r0, r6
 800a3b6:	6033      	str	r3, [r6, #0]
 800a3b8:	f000 f80c 	bl	800a3d4 <__malloc_unlock>
 800a3bc:	e794      	b.n	800a2e8 <_malloc_r+0x20>
 800a3be:	6005      	str	r5, [r0, #0]
 800a3c0:	e7d6      	b.n	800a370 <_malloc_r+0xa8>
 800a3c2:	bf00      	nop
 800a3c4:	20000e7c 	.word	0x20000e7c

0800a3c8 <__malloc_lock>:
 800a3c8:	4801      	ldr	r0, [pc, #4]	@ (800a3d0 <__malloc_lock+0x8>)
 800a3ca:	f7ff bf02 	b.w	800a1d2 <__retarget_lock_acquire_recursive>
 800a3ce:	bf00      	nop
 800a3d0:	20000e74 	.word	0x20000e74

0800a3d4 <__malloc_unlock>:
 800a3d4:	4801      	ldr	r0, [pc, #4]	@ (800a3dc <__malloc_unlock+0x8>)
 800a3d6:	f7ff befd 	b.w	800a1d4 <__retarget_lock_release_recursive>
 800a3da:	bf00      	nop
 800a3dc:	20000e74 	.word	0x20000e74

0800a3e0 <_malloc_usable_size_r>:
 800a3e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3e4:	1f18      	subs	r0, r3, #4
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	bfbc      	itt	lt
 800a3ea:	580b      	ldrlt	r3, [r1, r0]
 800a3ec:	18c0      	addlt	r0, r0, r3
 800a3ee:	4770      	bx	lr

0800a3f0 <__sfputc_r>:
 800a3f0:	6893      	ldr	r3, [r2, #8]
 800a3f2:	b410      	push	{r4}
 800a3f4:	3b01      	subs	r3, #1
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	6093      	str	r3, [r2, #8]
 800a3fa:	da07      	bge.n	800a40c <__sfputc_r+0x1c>
 800a3fc:	6994      	ldr	r4, [r2, #24]
 800a3fe:	42a3      	cmp	r3, r4
 800a400:	db01      	blt.n	800a406 <__sfputc_r+0x16>
 800a402:	290a      	cmp	r1, #10
 800a404:	d102      	bne.n	800a40c <__sfputc_r+0x1c>
 800a406:	bc10      	pop	{r4}
 800a408:	f7ff bdd5 	b.w	8009fb6 <__swbuf_r>
 800a40c:	6813      	ldr	r3, [r2, #0]
 800a40e:	1c58      	adds	r0, r3, #1
 800a410:	6010      	str	r0, [r2, #0]
 800a412:	7019      	strb	r1, [r3, #0]
 800a414:	4608      	mov	r0, r1
 800a416:	bc10      	pop	{r4}
 800a418:	4770      	bx	lr

0800a41a <__sfputs_r>:
 800a41a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a41c:	4606      	mov	r6, r0
 800a41e:	460f      	mov	r7, r1
 800a420:	4614      	mov	r4, r2
 800a422:	18d5      	adds	r5, r2, r3
 800a424:	42ac      	cmp	r4, r5
 800a426:	d101      	bne.n	800a42c <__sfputs_r+0x12>
 800a428:	2000      	movs	r0, #0
 800a42a:	e007      	b.n	800a43c <__sfputs_r+0x22>
 800a42c:	463a      	mov	r2, r7
 800a42e:	4630      	mov	r0, r6
 800a430:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a434:	f7ff ffdc 	bl	800a3f0 <__sfputc_r>
 800a438:	1c43      	adds	r3, r0, #1
 800a43a:	d1f3      	bne.n	800a424 <__sfputs_r+0xa>
 800a43c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a440 <_vfiprintf_r>:
 800a440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a444:	460d      	mov	r5, r1
 800a446:	4614      	mov	r4, r2
 800a448:	4698      	mov	r8, r3
 800a44a:	4606      	mov	r6, r0
 800a44c:	b09d      	sub	sp, #116	@ 0x74
 800a44e:	b118      	cbz	r0, 800a458 <_vfiprintf_r+0x18>
 800a450:	6a03      	ldr	r3, [r0, #32]
 800a452:	b90b      	cbnz	r3, 800a458 <_vfiprintf_r+0x18>
 800a454:	f7ff fcc6 	bl	8009de4 <__sinit>
 800a458:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a45a:	07d9      	lsls	r1, r3, #31
 800a45c:	d405      	bmi.n	800a46a <_vfiprintf_r+0x2a>
 800a45e:	89ab      	ldrh	r3, [r5, #12]
 800a460:	059a      	lsls	r2, r3, #22
 800a462:	d402      	bmi.n	800a46a <_vfiprintf_r+0x2a>
 800a464:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a466:	f7ff feb4 	bl	800a1d2 <__retarget_lock_acquire_recursive>
 800a46a:	89ab      	ldrh	r3, [r5, #12]
 800a46c:	071b      	lsls	r3, r3, #28
 800a46e:	d501      	bpl.n	800a474 <_vfiprintf_r+0x34>
 800a470:	692b      	ldr	r3, [r5, #16]
 800a472:	b99b      	cbnz	r3, 800a49c <_vfiprintf_r+0x5c>
 800a474:	4629      	mov	r1, r5
 800a476:	4630      	mov	r0, r6
 800a478:	f7ff fddc 	bl	800a034 <__swsetup_r>
 800a47c:	b170      	cbz	r0, 800a49c <_vfiprintf_r+0x5c>
 800a47e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a480:	07dc      	lsls	r4, r3, #31
 800a482:	d504      	bpl.n	800a48e <_vfiprintf_r+0x4e>
 800a484:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a488:	b01d      	add	sp, #116	@ 0x74
 800a48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a48e:	89ab      	ldrh	r3, [r5, #12]
 800a490:	0598      	lsls	r0, r3, #22
 800a492:	d4f7      	bmi.n	800a484 <_vfiprintf_r+0x44>
 800a494:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a496:	f7ff fe9d 	bl	800a1d4 <__retarget_lock_release_recursive>
 800a49a:	e7f3      	b.n	800a484 <_vfiprintf_r+0x44>
 800a49c:	2300      	movs	r3, #0
 800a49e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4a0:	2320      	movs	r3, #32
 800a4a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a4a6:	2330      	movs	r3, #48	@ 0x30
 800a4a8:	f04f 0901 	mov.w	r9, #1
 800a4ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4b0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a65c <_vfiprintf_r+0x21c>
 800a4b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a4b8:	4623      	mov	r3, r4
 800a4ba:	469a      	mov	sl, r3
 800a4bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4c0:	b10a      	cbz	r2, 800a4c6 <_vfiprintf_r+0x86>
 800a4c2:	2a25      	cmp	r2, #37	@ 0x25
 800a4c4:	d1f9      	bne.n	800a4ba <_vfiprintf_r+0x7a>
 800a4c6:	ebba 0b04 	subs.w	fp, sl, r4
 800a4ca:	d00b      	beq.n	800a4e4 <_vfiprintf_r+0xa4>
 800a4cc:	465b      	mov	r3, fp
 800a4ce:	4622      	mov	r2, r4
 800a4d0:	4629      	mov	r1, r5
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	f7ff ffa1 	bl	800a41a <__sfputs_r>
 800a4d8:	3001      	adds	r0, #1
 800a4da:	f000 80a7 	beq.w	800a62c <_vfiprintf_r+0x1ec>
 800a4de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4e0:	445a      	add	r2, fp
 800a4e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a4e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	f000 809f 	beq.w	800a62c <_vfiprintf_r+0x1ec>
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a4f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4f8:	f10a 0a01 	add.w	sl, sl, #1
 800a4fc:	9304      	str	r3, [sp, #16]
 800a4fe:	9307      	str	r3, [sp, #28]
 800a500:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a504:	931a      	str	r3, [sp, #104]	@ 0x68
 800a506:	4654      	mov	r4, sl
 800a508:	2205      	movs	r2, #5
 800a50a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a50e:	4853      	ldr	r0, [pc, #332]	@ (800a65c <_vfiprintf_r+0x21c>)
 800a510:	f000 fb7c 	bl	800ac0c <memchr>
 800a514:	9a04      	ldr	r2, [sp, #16]
 800a516:	b9d8      	cbnz	r0, 800a550 <_vfiprintf_r+0x110>
 800a518:	06d1      	lsls	r1, r2, #27
 800a51a:	bf44      	itt	mi
 800a51c:	2320      	movmi	r3, #32
 800a51e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a522:	0713      	lsls	r3, r2, #28
 800a524:	bf44      	itt	mi
 800a526:	232b      	movmi	r3, #43	@ 0x2b
 800a528:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a52c:	f89a 3000 	ldrb.w	r3, [sl]
 800a530:	2b2a      	cmp	r3, #42	@ 0x2a
 800a532:	d015      	beq.n	800a560 <_vfiprintf_r+0x120>
 800a534:	4654      	mov	r4, sl
 800a536:	2000      	movs	r0, #0
 800a538:	f04f 0c0a 	mov.w	ip, #10
 800a53c:	9a07      	ldr	r2, [sp, #28]
 800a53e:	4621      	mov	r1, r4
 800a540:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a544:	3b30      	subs	r3, #48	@ 0x30
 800a546:	2b09      	cmp	r3, #9
 800a548:	d94b      	bls.n	800a5e2 <_vfiprintf_r+0x1a2>
 800a54a:	b1b0      	cbz	r0, 800a57a <_vfiprintf_r+0x13a>
 800a54c:	9207      	str	r2, [sp, #28]
 800a54e:	e014      	b.n	800a57a <_vfiprintf_r+0x13a>
 800a550:	eba0 0308 	sub.w	r3, r0, r8
 800a554:	fa09 f303 	lsl.w	r3, r9, r3
 800a558:	4313      	orrs	r3, r2
 800a55a:	46a2      	mov	sl, r4
 800a55c:	9304      	str	r3, [sp, #16]
 800a55e:	e7d2      	b.n	800a506 <_vfiprintf_r+0xc6>
 800a560:	9b03      	ldr	r3, [sp, #12]
 800a562:	1d19      	adds	r1, r3, #4
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	9103      	str	r1, [sp, #12]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	bfbb      	ittet	lt
 800a56c:	425b      	neglt	r3, r3
 800a56e:	f042 0202 	orrlt.w	r2, r2, #2
 800a572:	9307      	strge	r3, [sp, #28]
 800a574:	9307      	strlt	r3, [sp, #28]
 800a576:	bfb8      	it	lt
 800a578:	9204      	strlt	r2, [sp, #16]
 800a57a:	7823      	ldrb	r3, [r4, #0]
 800a57c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a57e:	d10a      	bne.n	800a596 <_vfiprintf_r+0x156>
 800a580:	7863      	ldrb	r3, [r4, #1]
 800a582:	2b2a      	cmp	r3, #42	@ 0x2a
 800a584:	d132      	bne.n	800a5ec <_vfiprintf_r+0x1ac>
 800a586:	9b03      	ldr	r3, [sp, #12]
 800a588:	3402      	adds	r4, #2
 800a58a:	1d1a      	adds	r2, r3, #4
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	9203      	str	r2, [sp, #12]
 800a590:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a594:	9305      	str	r3, [sp, #20]
 800a596:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a660 <_vfiprintf_r+0x220>
 800a59a:	2203      	movs	r2, #3
 800a59c:	4650      	mov	r0, sl
 800a59e:	7821      	ldrb	r1, [r4, #0]
 800a5a0:	f000 fb34 	bl	800ac0c <memchr>
 800a5a4:	b138      	cbz	r0, 800a5b6 <_vfiprintf_r+0x176>
 800a5a6:	2240      	movs	r2, #64	@ 0x40
 800a5a8:	9b04      	ldr	r3, [sp, #16]
 800a5aa:	eba0 000a 	sub.w	r0, r0, sl
 800a5ae:	4082      	lsls	r2, r0
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	3401      	adds	r4, #1
 800a5b4:	9304      	str	r3, [sp, #16]
 800a5b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5ba:	2206      	movs	r2, #6
 800a5bc:	4829      	ldr	r0, [pc, #164]	@ (800a664 <_vfiprintf_r+0x224>)
 800a5be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a5c2:	f000 fb23 	bl	800ac0c <memchr>
 800a5c6:	2800      	cmp	r0, #0
 800a5c8:	d03f      	beq.n	800a64a <_vfiprintf_r+0x20a>
 800a5ca:	4b27      	ldr	r3, [pc, #156]	@ (800a668 <_vfiprintf_r+0x228>)
 800a5cc:	bb1b      	cbnz	r3, 800a616 <_vfiprintf_r+0x1d6>
 800a5ce:	9b03      	ldr	r3, [sp, #12]
 800a5d0:	3307      	adds	r3, #7
 800a5d2:	f023 0307 	bic.w	r3, r3, #7
 800a5d6:	3308      	adds	r3, #8
 800a5d8:	9303      	str	r3, [sp, #12]
 800a5da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5dc:	443b      	add	r3, r7
 800a5de:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5e0:	e76a      	b.n	800a4b8 <_vfiprintf_r+0x78>
 800a5e2:	460c      	mov	r4, r1
 800a5e4:	2001      	movs	r0, #1
 800a5e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5ea:	e7a8      	b.n	800a53e <_vfiprintf_r+0xfe>
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	f04f 0c0a 	mov.w	ip, #10
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	3401      	adds	r4, #1
 800a5f6:	9305      	str	r3, [sp, #20]
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5fe:	3a30      	subs	r2, #48	@ 0x30
 800a600:	2a09      	cmp	r2, #9
 800a602:	d903      	bls.n	800a60c <_vfiprintf_r+0x1cc>
 800a604:	2b00      	cmp	r3, #0
 800a606:	d0c6      	beq.n	800a596 <_vfiprintf_r+0x156>
 800a608:	9105      	str	r1, [sp, #20]
 800a60a:	e7c4      	b.n	800a596 <_vfiprintf_r+0x156>
 800a60c:	4604      	mov	r4, r0
 800a60e:	2301      	movs	r3, #1
 800a610:	fb0c 2101 	mla	r1, ip, r1, r2
 800a614:	e7f0      	b.n	800a5f8 <_vfiprintf_r+0x1b8>
 800a616:	ab03      	add	r3, sp, #12
 800a618:	9300      	str	r3, [sp, #0]
 800a61a:	462a      	mov	r2, r5
 800a61c:	4630      	mov	r0, r6
 800a61e:	4b13      	ldr	r3, [pc, #76]	@ (800a66c <_vfiprintf_r+0x22c>)
 800a620:	a904      	add	r1, sp, #16
 800a622:	f3af 8000 	nop.w
 800a626:	4607      	mov	r7, r0
 800a628:	1c78      	adds	r0, r7, #1
 800a62a:	d1d6      	bne.n	800a5da <_vfiprintf_r+0x19a>
 800a62c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a62e:	07d9      	lsls	r1, r3, #31
 800a630:	d405      	bmi.n	800a63e <_vfiprintf_r+0x1fe>
 800a632:	89ab      	ldrh	r3, [r5, #12]
 800a634:	059a      	lsls	r2, r3, #22
 800a636:	d402      	bmi.n	800a63e <_vfiprintf_r+0x1fe>
 800a638:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a63a:	f7ff fdcb 	bl	800a1d4 <__retarget_lock_release_recursive>
 800a63e:	89ab      	ldrh	r3, [r5, #12]
 800a640:	065b      	lsls	r3, r3, #25
 800a642:	f53f af1f 	bmi.w	800a484 <_vfiprintf_r+0x44>
 800a646:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a648:	e71e      	b.n	800a488 <_vfiprintf_r+0x48>
 800a64a:	ab03      	add	r3, sp, #12
 800a64c:	9300      	str	r3, [sp, #0]
 800a64e:	462a      	mov	r2, r5
 800a650:	4630      	mov	r0, r6
 800a652:	4b06      	ldr	r3, [pc, #24]	@ (800a66c <_vfiprintf_r+0x22c>)
 800a654:	a904      	add	r1, sp, #16
 800a656:	f000 f87d 	bl	800a754 <_printf_i>
 800a65a:	e7e4      	b.n	800a626 <_vfiprintf_r+0x1e6>
 800a65c:	0800b1e6 	.word	0x0800b1e6
 800a660:	0800b1ec 	.word	0x0800b1ec
 800a664:	0800b1f0 	.word	0x0800b1f0
 800a668:	00000000 	.word	0x00000000
 800a66c:	0800a41b 	.word	0x0800a41b

0800a670 <_printf_common>:
 800a670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a674:	4616      	mov	r6, r2
 800a676:	4698      	mov	r8, r3
 800a678:	688a      	ldr	r2, [r1, #8]
 800a67a:	690b      	ldr	r3, [r1, #16]
 800a67c:	4607      	mov	r7, r0
 800a67e:	4293      	cmp	r3, r2
 800a680:	bfb8      	it	lt
 800a682:	4613      	movlt	r3, r2
 800a684:	6033      	str	r3, [r6, #0]
 800a686:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a68a:	460c      	mov	r4, r1
 800a68c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a690:	b10a      	cbz	r2, 800a696 <_printf_common+0x26>
 800a692:	3301      	adds	r3, #1
 800a694:	6033      	str	r3, [r6, #0]
 800a696:	6823      	ldr	r3, [r4, #0]
 800a698:	0699      	lsls	r1, r3, #26
 800a69a:	bf42      	ittt	mi
 800a69c:	6833      	ldrmi	r3, [r6, #0]
 800a69e:	3302      	addmi	r3, #2
 800a6a0:	6033      	strmi	r3, [r6, #0]
 800a6a2:	6825      	ldr	r5, [r4, #0]
 800a6a4:	f015 0506 	ands.w	r5, r5, #6
 800a6a8:	d106      	bne.n	800a6b8 <_printf_common+0x48>
 800a6aa:	f104 0a19 	add.w	sl, r4, #25
 800a6ae:	68e3      	ldr	r3, [r4, #12]
 800a6b0:	6832      	ldr	r2, [r6, #0]
 800a6b2:	1a9b      	subs	r3, r3, r2
 800a6b4:	42ab      	cmp	r3, r5
 800a6b6:	dc2b      	bgt.n	800a710 <_printf_common+0xa0>
 800a6b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a6bc:	6822      	ldr	r2, [r4, #0]
 800a6be:	3b00      	subs	r3, #0
 800a6c0:	bf18      	it	ne
 800a6c2:	2301      	movne	r3, #1
 800a6c4:	0692      	lsls	r2, r2, #26
 800a6c6:	d430      	bmi.n	800a72a <_printf_common+0xba>
 800a6c8:	4641      	mov	r1, r8
 800a6ca:	4638      	mov	r0, r7
 800a6cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a6d0:	47c8      	blx	r9
 800a6d2:	3001      	adds	r0, #1
 800a6d4:	d023      	beq.n	800a71e <_printf_common+0xae>
 800a6d6:	6823      	ldr	r3, [r4, #0]
 800a6d8:	6922      	ldr	r2, [r4, #16]
 800a6da:	f003 0306 	and.w	r3, r3, #6
 800a6de:	2b04      	cmp	r3, #4
 800a6e0:	bf14      	ite	ne
 800a6e2:	2500      	movne	r5, #0
 800a6e4:	6833      	ldreq	r3, [r6, #0]
 800a6e6:	f04f 0600 	mov.w	r6, #0
 800a6ea:	bf08      	it	eq
 800a6ec:	68e5      	ldreq	r5, [r4, #12]
 800a6ee:	f104 041a 	add.w	r4, r4, #26
 800a6f2:	bf08      	it	eq
 800a6f4:	1aed      	subeq	r5, r5, r3
 800a6f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a6fa:	bf08      	it	eq
 800a6fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a700:	4293      	cmp	r3, r2
 800a702:	bfc4      	itt	gt
 800a704:	1a9b      	subgt	r3, r3, r2
 800a706:	18ed      	addgt	r5, r5, r3
 800a708:	42b5      	cmp	r5, r6
 800a70a:	d11a      	bne.n	800a742 <_printf_common+0xd2>
 800a70c:	2000      	movs	r0, #0
 800a70e:	e008      	b.n	800a722 <_printf_common+0xb2>
 800a710:	2301      	movs	r3, #1
 800a712:	4652      	mov	r2, sl
 800a714:	4641      	mov	r1, r8
 800a716:	4638      	mov	r0, r7
 800a718:	47c8      	blx	r9
 800a71a:	3001      	adds	r0, #1
 800a71c:	d103      	bne.n	800a726 <_printf_common+0xb6>
 800a71e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a726:	3501      	adds	r5, #1
 800a728:	e7c1      	b.n	800a6ae <_printf_common+0x3e>
 800a72a:	2030      	movs	r0, #48	@ 0x30
 800a72c:	18e1      	adds	r1, r4, r3
 800a72e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a732:	1c5a      	adds	r2, r3, #1
 800a734:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a738:	4422      	add	r2, r4
 800a73a:	3302      	adds	r3, #2
 800a73c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a740:	e7c2      	b.n	800a6c8 <_printf_common+0x58>
 800a742:	2301      	movs	r3, #1
 800a744:	4622      	mov	r2, r4
 800a746:	4641      	mov	r1, r8
 800a748:	4638      	mov	r0, r7
 800a74a:	47c8      	blx	r9
 800a74c:	3001      	adds	r0, #1
 800a74e:	d0e6      	beq.n	800a71e <_printf_common+0xae>
 800a750:	3601      	adds	r6, #1
 800a752:	e7d9      	b.n	800a708 <_printf_common+0x98>

0800a754 <_printf_i>:
 800a754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a758:	7e0f      	ldrb	r7, [r1, #24]
 800a75a:	4691      	mov	r9, r2
 800a75c:	2f78      	cmp	r7, #120	@ 0x78
 800a75e:	4680      	mov	r8, r0
 800a760:	460c      	mov	r4, r1
 800a762:	469a      	mov	sl, r3
 800a764:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a766:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a76a:	d807      	bhi.n	800a77c <_printf_i+0x28>
 800a76c:	2f62      	cmp	r7, #98	@ 0x62
 800a76e:	d80a      	bhi.n	800a786 <_printf_i+0x32>
 800a770:	2f00      	cmp	r7, #0
 800a772:	f000 80d3 	beq.w	800a91c <_printf_i+0x1c8>
 800a776:	2f58      	cmp	r7, #88	@ 0x58
 800a778:	f000 80ba 	beq.w	800a8f0 <_printf_i+0x19c>
 800a77c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a780:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a784:	e03a      	b.n	800a7fc <_printf_i+0xa8>
 800a786:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a78a:	2b15      	cmp	r3, #21
 800a78c:	d8f6      	bhi.n	800a77c <_printf_i+0x28>
 800a78e:	a101      	add	r1, pc, #4	@ (adr r1, 800a794 <_printf_i+0x40>)
 800a790:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a794:	0800a7ed 	.word	0x0800a7ed
 800a798:	0800a801 	.word	0x0800a801
 800a79c:	0800a77d 	.word	0x0800a77d
 800a7a0:	0800a77d 	.word	0x0800a77d
 800a7a4:	0800a77d 	.word	0x0800a77d
 800a7a8:	0800a77d 	.word	0x0800a77d
 800a7ac:	0800a801 	.word	0x0800a801
 800a7b0:	0800a77d 	.word	0x0800a77d
 800a7b4:	0800a77d 	.word	0x0800a77d
 800a7b8:	0800a77d 	.word	0x0800a77d
 800a7bc:	0800a77d 	.word	0x0800a77d
 800a7c0:	0800a903 	.word	0x0800a903
 800a7c4:	0800a82b 	.word	0x0800a82b
 800a7c8:	0800a8bd 	.word	0x0800a8bd
 800a7cc:	0800a77d 	.word	0x0800a77d
 800a7d0:	0800a77d 	.word	0x0800a77d
 800a7d4:	0800a925 	.word	0x0800a925
 800a7d8:	0800a77d 	.word	0x0800a77d
 800a7dc:	0800a82b 	.word	0x0800a82b
 800a7e0:	0800a77d 	.word	0x0800a77d
 800a7e4:	0800a77d 	.word	0x0800a77d
 800a7e8:	0800a8c5 	.word	0x0800a8c5
 800a7ec:	6833      	ldr	r3, [r6, #0]
 800a7ee:	1d1a      	adds	r2, r3, #4
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	6032      	str	r2, [r6, #0]
 800a7f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a7f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e09e      	b.n	800a93e <_printf_i+0x1ea>
 800a800:	6833      	ldr	r3, [r6, #0]
 800a802:	6820      	ldr	r0, [r4, #0]
 800a804:	1d19      	adds	r1, r3, #4
 800a806:	6031      	str	r1, [r6, #0]
 800a808:	0606      	lsls	r6, r0, #24
 800a80a:	d501      	bpl.n	800a810 <_printf_i+0xbc>
 800a80c:	681d      	ldr	r5, [r3, #0]
 800a80e:	e003      	b.n	800a818 <_printf_i+0xc4>
 800a810:	0645      	lsls	r5, r0, #25
 800a812:	d5fb      	bpl.n	800a80c <_printf_i+0xb8>
 800a814:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a818:	2d00      	cmp	r5, #0
 800a81a:	da03      	bge.n	800a824 <_printf_i+0xd0>
 800a81c:	232d      	movs	r3, #45	@ 0x2d
 800a81e:	426d      	negs	r5, r5
 800a820:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a824:	230a      	movs	r3, #10
 800a826:	4859      	ldr	r0, [pc, #356]	@ (800a98c <_printf_i+0x238>)
 800a828:	e011      	b.n	800a84e <_printf_i+0xfa>
 800a82a:	6821      	ldr	r1, [r4, #0]
 800a82c:	6833      	ldr	r3, [r6, #0]
 800a82e:	0608      	lsls	r0, r1, #24
 800a830:	f853 5b04 	ldr.w	r5, [r3], #4
 800a834:	d402      	bmi.n	800a83c <_printf_i+0xe8>
 800a836:	0649      	lsls	r1, r1, #25
 800a838:	bf48      	it	mi
 800a83a:	b2ad      	uxthmi	r5, r5
 800a83c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a83e:	6033      	str	r3, [r6, #0]
 800a840:	bf14      	ite	ne
 800a842:	230a      	movne	r3, #10
 800a844:	2308      	moveq	r3, #8
 800a846:	4851      	ldr	r0, [pc, #324]	@ (800a98c <_printf_i+0x238>)
 800a848:	2100      	movs	r1, #0
 800a84a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a84e:	6866      	ldr	r6, [r4, #4]
 800a850:	2e00      	cmp	r6, #0
 800a852:	bfa8      	it	ge
 800a854:	6821      	ldrge	r1, [r4, #0]
 800a856:	60a6      	str	r6, [r4, #8]
 800a858:	bfa4      	itt	ge
 800a85a:	f021 0104 	bicge.w	r1, r1, #4
 800a85e:	6021      	strge	r1, [r4, #0]
 800a860:	b90d      	cbnz	r5, 800a866 <_printf_i+0x112>
 800a862:	2e00      	cmp	r6, #0
 800a864:	d04b      	beq.n	800a8fe <_printf_i+0x1aa>
 800a866:	4616      	mov	r6, r2
 800a868:	fbb5 f1f3 	udiv	r1, r5, r3
 800a86c:	fb03 5711 	mls	r7, r3, r1, r5
 800a870:	5dc7      	ldrb	r7, [r0, r7]
 800a872:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a876:	462f      	mov	r7, r5
 800a878:	42bb      	cmp	r3, r7
 800a87a:	460d      	mov	r5, r1
 800a87c:	d9f4      	bls.n	800a868 <_printf_i+0x114>
 800a87e:	2b08      	cmp	r3, #8
 800a880:	d10b      	bne.n	800a89a <_printf_i+0x146>
 800a882:	6823      	ldr	r3, [r4, #0]
 800a884:	07df      	lsls	r7, r3, #31
 800a886:	d508      	bpl.n	800a89a <_printf_i+0x146>
 800a888:	6923      	ldr	r3, [r4, #16]
 800a88a:	6861      	ldr	r1, [r4, #4]
 800a88c:	4299      	cmp	r1, r3
 800a88e:	bfde      	ittt	le
 800a890:	2330      	movle	r3, #48	@ 0x30
 800a892:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a896:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a89a:	1b92      	subs	r2, r2, r6
 800a89c:	6122      	str	r2, [r4, #16]
 800a89e:	464b      	mov	r3, r9
 800a8a0:	4621      	mov	r1, r4
 800a8a2:	4640      	mov	r0, r8
 800a8a4:	f8cd a000 	str.w	sl, [sp]
 800a8a8:	aa03      	add	r2, sp, #12
 800a8aa:	f7ff fee1 	bl	800a670 <_printf_common>
 800a8ae:	3001      	adds	r0, #1
 800a8b0:	d14a      	bne.n	800a948 <_printf_i+0x1f4>
 800a8b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a8b6:	b004      	add	sp, #16
 800a8b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8bc:	6823      	ldr	r3, [r4, #0]
 800a8be:	f043 0320 	orr.w	r3, r3, #32
 800a8c2:	6023      	str	r3, [r4, #0]
 800a8c4:	2778      	movs	r7, #120	@ 0x78
 800a8c6:	4832      	ldr	r0, [pc, #200]	@ (800a990 <_printf_i+0x23c>)
 800a8c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a8cc:	6823      	ldr	r3, [r4, #0]
 800a8ce:	6831      	ldr	r1, [r6, #0]
 800a8d0:	061f      	lsls	r7, r3, #24
 800a8d2:	f851 5b04 	ldr.w	r5, [r1], #4
 800a8d6:	d402      	bmi.n	800a8de <_printf_i+0x18a>
 800a8d8:	065f      	lsls	r7, r3, #25
 800a8da:	bf48      	it	mi
 800a8dc:	b2ad      	uxthmi	r5, r5
 800a8de:	6031      	str	r1, [r6, #0]
 800a8e0:	07d9      	lsls	r1, r3, #31
 800a8e2:	bf44      	itt	mi
 800a8e4:	f043 0320 	orrmi.w	r3, r3, #32
 800a8e8:	6023      	strmi	r3, [r4, #0]
 800a8ea:	b11d      	cbz	r5, 800a8f4 <_printf_i+0x1a0>
 800a8ec:	2310      	movs	r3, #16
 800a8ee:	e7ab      	b.n	800a848 <_printf_i+0xf4>
 800a8f0:	4826      	ldr	r0, [pc, #152]	@ (800a98c <_printf_i+0x238>)
 800a8f2:	e7e9      	b.n	800a8c8 <_printf_i+0x174>
 800a8f4:	6823      	ldr	r3, [r4, #0]
 800a8f6:	f023 0320 	bic.w	r3, r3, #32
 800a8fa:	6023      	str	r3, [r4, #0]
 800a8fc:	e7f6      	b.n	800a8ec <_printf_i+0x198>
 800a8fe:	4616      	mov	r6, r2
 800a900:	e7bd      	b.n	800a87e <_printf_i+0x12a>
 800a902:	6833      	ldr	r3, [r6, #0]
 800a904:	6825      	ldr	r5, [r4, #0]
 800a906:	1d18      	adds	r0, r3, #4
 800a908:	6961      	ldr	r1, [r4, #20]
 800a90a:	6030      	str	r0, [r6, #0]
 800a90c:	062e      	lsls	r6, r5, #24
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	d501      	bpl.n	800a916 <_printf_i+0x1c2>
 800a912:	6019      	str	r1, [r3, #0]
 800a914:	e002      	b.n	800a91c <_printf_i+0x1c8>
 800a916:	0668      	lsls	r0, r5, #25
 800a918:	d5fb      	bpl.n	800a912 <_printf_i+0x1be>
 800a91a:	8019      	strh	r1, [r3, #0]
 800a91c:	2300      	movs	r3, #0
 800a91e:	4616      	mov	r6, r2
 800a920:	6123      	str	r3, [r4, #16]
 800a922:	e7bc      	b.n	800a89e <_printf_i+0x14a>
 800a924:	6833      	ldr	r3, [r6, #0]
 800a926:	2100      	movs	r1, #0
 800a928:	1d1a      	adds	r2, r3, #4
 800a92a:	6032      	str	r2, [r6, #0]
 800a92c:	681e      	ldr	r6, [r3, #0]
 800a92e:	6862      	ldr	r2, [r4, #4]
 800a930:	4630      	mov	r0, r6
 800a932:	f000 f96b 	bl	800ac0c <memchr>
 800a936:	b108      	cbz	r0, 800a93c <_printf_i+0x1e8>
 800a938:	1b80      	subs	r0, r0, r6
 800a93a:	6060      	str	r0, [r4, #4]
 800a93c:	6863      	ldr	r3, [r4, #4]
 800a93e:	6123      	str	r3, [r4, #16]
 800a940:	2300      	movs	r3, #0
 800a942:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a946:	e7aa      	b.n	800a89e <_printf_i+0x14a>
 800a948:	4632      	mov	r2, r6
 800a94a:	4649      	mov	r1, r9
 800a94c:	4640      	mov	r0, r8
 800a94e:	6923      	ldr	r3, [r4, #16]
 800a950:	47d0      	blx	sl
 800a952:	3001      	adds	r0, #1
 800a954:	d0ad      	beq.n	800a8b2 <_printf_i+0x15e>
 800a956:	6823      	ldr	r3, [r4, #0]
 800a958:	079b      	lsls	r3, r3, #30
 800a95a:	d413      	bmi.n	800a984 <_printf_i+0x230>
 800a95c:	68e0      	ldr	r0, [r4, #12]
 800a95e:	9b03      	ldr	r3, [sp, #12]
 800a960:	4298      	cmp	r0, r3
 800a962:	bfb8      	it	lt
 800a964:	4618      	movlt	r0, r3
 800a966:	e7a6      	b.n	800a8b6 <_printf_i+0x162>
 800a968:	2301      	movs	r3, #1
 800a96a:	4632      	mov	r2, r6
 800a96c:	4649      	mov	r1, r9
 800a96e:	4640      	mov	r0, r8
 800a970:	47d0      	blx	sl
 800a972:	3001      	adds	r0, #1
 800a974:	d09d      	beq.n	800a8b2 <_printf_i+0x15e>
 800a976:	3501      	adds	r5, #1
 800a978:	68e3      	ldr	r3, [r4, #12]
 800a97a:	9903      	ldr	r1, [sp, #12]
 800a97c:	1a5b      	subs	r3, r3, r1
 800a97e:	42ab      	cmp	r3, r5
 800a980:	dcf2      	bgt.n	800a968 <_printf_i+0x214>
 800a982:	e7eb      	b.n	800a95c <_printf_i+0x208>
 800a984:	2500      	movs	r5, #0
 800a986:	f104 0619 	add.w	r6, r4, #25
 800a98a:	e7f5      	b.n	800a978 <_printf_i+0x224>
 800a98c:	0800b1f7 	.word	0x0800b1f7
 800a990:	0800b208 	.word	0x0800b208

0800a994 <__sflush_r>:
 800a994:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a99a:	0716      	lsls	r6, r2, #28
 800a99c:	4605      	mov	r5, r0
 800a99e:	460c      	mov	r4, r1
 800a9a0:	d454      	bmi.n	800aa4c <__sflush_r+0xb8>
 800a9a2:	684b      	ldr	r3, [r1, #4]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	dc02      	bgt.n	800a9ae <__sflush_r+0x1a>
 800a9a8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	dd48      	ble.n	800aa40 <__sflush_r+0xac>
 800a9ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a9b0:	2e00      	cmp	r6, #0
 800a9b2:	d045      	beq.n	800aa40 <__sflush_r+0xac>
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a9ba:	682f      	ldr	r7, [r5, #0]
 800a9bc:	6a21      	ldr	r1, [r4, #32]
 800a9be:	602b      	str	r3, [r5, #0]
 800a9c0:	d030      	beq.n	800aa24 <__sflush_r+0x90>
 800a9c2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a9c4:	89a3      	ldrh	r3, [r4, #12]
 800a9c6:	0759      	lsls	r1, r3, #29
 800a9c8:	d505      	bpl.n	800a9d6 <__sflush_r+0x42>
 800a9ca:	6863      	ldr	r3, [r4, #4]
 800a9cc:	1ad2      	subs	r2, r2, r3
 800a9ce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a9d0:	b10b      	cbz	r3, 800a9d6 <__sflush_r+0x42>
 800a9d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a9d4:	1ad2      	subs	r2, r2, r3
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	4628      	mov	r0, r5
 800a9da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a9dc:	6a21      	ldr	r1, [r4, #32]
 800a9de:	47b0      	blx	r6
 800a9e0:	1c43      	adds	r3, r0, #1
 800a9e2:	89a3      	ldrh	r3, [r4, #12]
 800a9e4:	d106      	bne.n	800a9f4 <__sflush_r+0x60>
 800a9e6:	6829      	ldr	r1, [r5, #0]
 800a9e8:	291d      	cmp	r1, #29
 800a9ea:	d82b      	bhi.n	800aa44 <__sflush_r+0xb0>
 800a9ec:	4a28      	ldr	r2, [pc, #160]	@ (800aa90 <__sflush_r+0xfc>)
 800a9ee:	410a      	asrs	r2, r1
 800a9f0:	07d6      	lsls	r6, r2, #31
 800a9f2:	d427      	bmi.n	800aa44 <__sflush_r+0xb0>
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	6062      	str	r2, [r4, #4]
 800a9f8:	6922      	ldr	r2, [r4, #16]
 800a9fa:	04d9      	lsls	r1, r3, #19
 800a9fc:	6022      	str	r2, [r4, #0]
 800a9fe:	d504      	bpl.n	800aa0a <__sflush_r+0x76>
 800aa00:	1c42      	adds	r2, r0, #1
 800aa02:	d101      	bne.n	800aa08 <__sflush_r+0x74>
 800aa04:	682b      	ldr	r3, [r5, #0]
 800aa06:	b903      	cbnz	r3, 800aa0a <__sflush_r+0x76>
 800aa08:	6560      	str	r0, [r4, #84]	@ 0x54
 800aa0a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa0c:	602f      	str	r7, [r5, #0]
 800aa0e:	b1b9      	cbz	r1, 800aa40 <__sflush_r+0xac>
 800aa10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa14:	4299      	cmp	r1, r3
 800aa16:	d002      	beq.n	800aa1e <__sflush_r+0x8a>
 800aa18:	4628      	mov	r0, r5
 800aa1a:	f7ff fbeb 	bl	800a1f4 <_free_r>
 800aa1e:	2300      	movs	r3, #0
 800aa20:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa22:	e00d      	b.n	800aa40 <__sflush_r+0xac>
 800aa24:	2301      	movs	r3, #1
 800aa26:	4628      	mov	r0, r5
 800aa28:	47b0      	blx	r6
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	1c50      	adds	r0, r2, #1
 800aa2e:	d1c9      	bne.n	800a9c4 <__sflush_r+0x30>
 800aa30:	682b      	ldr	r3, [r5, #0]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d0c6      	beq.n	800a9c4 <__sflush_r+0x30>
 800aa36:	2b1d      	cmp	r3, #29
 800aa38:	d001      	beq.n	800aa3e <__sflush_r+0xaa>
 800aa3a:	2b16      	cmp	r3, #22
 800aa3c:	d11d      	bne.n	800aa7a <__sflush_r+0xe6>
 800aa3e:	602f      	str	r7, [r5, #0]
 800aa40:	2000      	movs	r0, #0
 800aa42:	e021      	b.n	800aa88 <__sflush_r+0xf4>
 800aa44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa48:	b21b      	sxth	r3, r3
 800aa4a:	e01a      	b.n	800aa82 <__sflush_r+0xee>
 800aa4c:	690f      	ldr	r7, [r1, #16]
 800aa4e:	2f00      	cmp	r7, #0
 800aa50:	d0f6      	beq.n	800aa40 <__sflush_r+0xac>
 800aa52:	0793      	lsls	r3, r2, #30
 800aa54:	bf18      	it	ne
 800aa56:	2300      	movne	r3, #0
 800aa58:	680e      	ldr	r6, [r1, #0]
 800aa5a:	bf08      	it	eq
 800aa5c:	694b      	ldreq	r3, [r1, #20]
 800aa5e:	1bf6      	subs	r6, r6, r7
 800aa60:	600f      	str	r7, [r1, #0]
 800aa62:	608b      	str	r3, [r1, #8]
 800aa64:	2e00      	cmp	r6, #0
 800aa66:	ddeb      	ble.n	800aa40 <__sflush_r+0xac>
 800aa68:	4633      	mov	r3, r6
 800aa6a:	463a      	mov	r2, r7
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	6a21      	ldr	r1, [r4, #32]
 800aa70:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800aa74:	47e0      	blx	ip
 800aa76:	2800      	cmp	r0, #0
 800aa78:	dc07      	bgt.n	800aa8a <__sflush_r+0xf6>
 800aa7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa86:	81a3      	strh	r3, [r4, #12]
 800aa88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa8a:	4407      	add	r7, r0
 800aa8c:	1a36      	subs	r6, r6, r0
 800aa8e:	e7e9      	b.n	800aa64 <__sflush_r+0xd0>
 800aa90:	dfbffffe 	.word	0xdfbffffe

0800aa94 <_fflush_r>:
 800aa94:	b538      	push	{r3, r4, r5, lr}
 800aa96:	690b      	ldr	r3, [r1, #16]
 800aa98:	4605      	mov	r5, r0
 800aa9a:	460c      	mov	r4, r1
 800aa9c:	b913      	cbnz	r3, 800aaa4 <_fflush_r+0x10>
 800aa9e:	2500      	movs	r5, #0
 800aaa0:	4628      	mov	r0, r5
 800aaa2:	bd38      	pop	{r3, r4, r5, pc}
 800aaa4:	b118      	cbz	r0, 800aaae <_fflush_r+0x1a>
 800aaa6:	6a03      	ldr	r3, [r0, #32]
 800aaa8:	b90b      	cbnz	r3, 800aaae <_fflush_r+0x1a>
 800aaaa:	f7ff f99b 	bl	8009de4 <__sinit>
 800aaae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d0f3      	beq.n	800aa9e <_fflush_r+0xa>
 800aab6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aab8:	07d0      	lsls	r0, r2, #31
 800aaba:	d404      	bmi.n	800aac6 <_fflush_r+0x32>
 800aabc:	0599      	lsls	r1, r3, #22
 800aabe:	d402      	bmi.n	800aac6 <_fflush_r+0x32>
 800aac0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aac2:	f7ff fb86 	bl	800a1d2 <__retarget_lock_acquire_recursive>
 800aac6:	4628      	mov	r0, r5
 800aac8:	4621      	mov	r1, r4
 800aaca:	f7ff ff63 	bl	800a994 <__sflush_r>
 800aace:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aad0:	4605      	mov	r5, r0
 800aad2:	07da      	lsls	r2, r3, #31
 800aad4:	d4e4      	bmi.n	800aaa0 <_fflush_r+0xc>
 800aad6:	89a3      	ldrh	r3, [r4, #12]
 800aad8:	059b      	lsls	r3, r3, #22
 800aada:	d4e1      	bmi.n	800aaa0 <_fflush_r+0xc>
 800aadc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aade:	f7ff fb79 	bl	800a1d4 <__retarget_lock_release_recursive>
 800aae2:	e7dd      	b.n	800aaa0 <_fflush_r+0xc>

0800aae4 <__swhatbuf_r>:
 800aae4:	b570      	push	{r4, r5, r6, lr}
 800aae6:	460c      	mov	r4, r1
 800aae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaec:	4615      	mov	r5, r2
 800aaee:	2900      	cmp	r1, #0
 800aaf0:	461e      	mov	r6, r3
 800aaf2:	b096      	sub	sp, #88	@ 0x58
 800aaf4:	da0c      	bge.n	800ab10 <__swhatbuf_r+0x2c>
 800aaf6:	89a3      	ldrh	r3, [r4, #12]
 800aaf8:	2100      	movs	r1, #0
 800aafa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aafe:	bf14      	ite	ne
 800ab00:	2340      	movne	r3, #64	@ 0x40
 800ab02:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ab06:	2000      	movs	r0, #0
 800ab08:	6031      	str	r1, [r6, #0]
 800ab0a:	602b      	str	r3, [r5, #0]
 800ab0c:	b016      	add	sp, #88	@ 0x58
 800ab0e:	bd70      	pop	{r4, r5, r6, pc}
 800ab10:	466a      	mov	r2, sp
 800ab12:	f000 f849 	bl	800aba8 <_fstat_r>
 800ab16:	2800      	cmp	r0, #0
 800ab18:	dbed      	blt.n	800aaf6 <__swhatbuf_r+0x12>
 800ab1a:	9901      	ldr	r1, [sp, #4]
 800ab1c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ab20:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ab24:	4259      	negs	r1, r3
 800ab26:	4159      	adcs	r1, r3
 800ab28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab2c:	e7eb      	b.n	800ab06 <__swhatbuf_r+0x22>

0800ab2e <__smakebuf_r>:
 800ab2e:	898b      	ldrh	r3, [r1, #12]
 800ab30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab32:	079d      	lsls	r5, r3, #30
 800ab34:	4606      	mov	r6, r0
 800ab36:	460c      	mov	r4, r1
 800ab38:	d507      	bpl.n	800ab4a <__smakebuf_r+0x1c>
 800ab3a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ab3e:	6023      	str	r3, [r4, #0]
 800ab40:	6123      	str	r3, [r4, #16]
 800ab42:	2301      	movs	r3, #1
 800ab44:	6163      	str	r3, [r4, #20]
 800ab46:	b003      	add	sp, #12
 800ab48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab4a:	466a      	mov	r2, sp
 800ab4c:	ab01      	add	r3, sp, #4
 800ab4e:	f7ff ffc9 	bl	800aae4 <__swhatbuf_r>
 800ab52:	9f00      	ldr	r7, [sp, #0]
 800ab54:	4605      	mov	r5, r0
 800ab56:	4639      	mov	r1, r7
 800ab58:	4630      	mov	r0, r6
 800ab5a:	f7ff fbb5 	bl	800a2c8 <_malloc_r>
 800ab5e:	b948      	cbnz	r0, 800ab74 <__smakebuf_r+0x46>
 800ab60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab64:	059a      	lsls	r2, r3, #22
 800ab66:	d4ee      	bmi.n	800ab46 <__smakebuf_r+0x18>
 800ab68:	f023 0303 	bic.w	r3, r3, #3
 800ab6c:	f043 0302 	orr.w	r3, r3, #2
 800ab70:	81a3      	strh	r3, [r4, #12]
 800ab72:	e7e2      	b.n	800ab3a <__smakebuf_r+0xc>
 800ab74:	89a3      	ldrh	r3, [r4, #12]
 800ab76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ab7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab7e:	81a3      	strh	r3, [r4, #12]
 800ab80:	9b01      	ldr	r3, [sp, #4]
 800ab82:	6020      	str	r0, [r4, #0]
 800ab84:	b15b      	cbz	r3, 800ab9e <__smakebuf_r+0x70>
 800ab86:	4630      	mov	r0, r6
 800ab88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab8c:	f000 f81e 	bl	800abcc <_isatty_r>
 800ab90:	b128      	cbz	r0, 800ab9e <__smakebuf_r+0x70>
 800ab92:	89a3      	ldrh	r3, [r4, #12]
 800ab94:	f023 0303 	bic.w	r3, r3, #3
 800ab98:	f043 0301 	orr.w	r3, r3, #1
 800ab9c:	81a3      	strh	r3, [r4, #12]
 800ab9e:	89a3      	ldrh	r3, [r4, #12]
 800aba0:	431d      	orrs	r5, r3
 800aba2:	81a5      	strh	r5, [r4, #12]
 800aba4:	e7cf      	b.n	800ab46 <__smakebuf_r+0x18>
	...

0800aba8 <_fstat_r>:
 800aba8:	b538      	push	{r3, r4, r5, lr}
 800abaa:	2300      	movs	r3, #0
 800abac:	4d06      	ldr	r5, [pc, #24]	@ (800abc8 <_fstat_r+0x20>)
 800abae:	4604      	mov	r4, r0
 800abb0:	4608      	mov	r0, r1
 800abb2:	4611      	mov	r1, r2
 800abb4:	602b      	str	r3, [r5, #0]
 800abb6:	f7fa fe1d 	bl	80057f4 <_fstat>
 800abba:	1c43      	adds	r3, r0, #1
 800abbc:	d102      	bne.n	800abc4 <_fstat_r+0x1c>
 800abbe:	682b      	ldr	r3, [r5, #0]
 800abc0:	b103      	cbz	r3, 800abc4 <_fstat_r+0x1c>
 800abc2:	6023      	str	r3, [r4, #0]
 800abc4:	bd38      	pop	{r3, r4, r5, pc}
 800abc6:	bf00      	nop
 800abc8:	20000e70 	.word	0x20000e70

0800abcc <_isatty_r>:
 800abcc:	b538      	push	{r3, r4, r5, lr}
 800abce:	2300      	movs	r3, #0
 800abd0:	4d05      	ldr	r5, [pc, #20]	@ (800abe8 <_isatty_r+0x1c>)
 800abd2:	4604      	mov	r4, r0
 800abd4:	4608      	mov	r0, r1
 800abd6:	602b      	str	r3, [r5, #0]
 800abd8:	f7fa fe1b 	bl	8005812 <_isatty>
 800abdc:	1c43      	adds	r3, r0, #1
 800abde:	d102      	bne.n	800abe6 <_isatty_r+0x1a>
 800abe0:	682b      	ldr	r3, [r5, #0]
 800abe2:	b103      	cbz	r3, 800abe6 <_isatty_r+0x1a>
 800abe4:	6023      	str	r3, [r4, #0]
 800abe6:	bd38      	pop	{r3, r4, r5, pc}
 800abe8:	20000e70 	.word	0x20000e70

0800abec <_sbrk_r>:
 800abec:	b538      	push	{r3, r4, r5, lr}
 800abee:	2300      	movs	r3, #0
 800abf0:	4d05      	ldr	r5, [pc, #20]	@ (800ac08 <_sbrk_r+0x1c>)
 800abf2:	4604      	mov	r4, r0
 800abf4:	4608      	mov	r0, r1
 800abf6:	602b      	str	r3, [r5, #0]
 800abf8:	f7fa fe22 	bl	8005840 <_sbrk>
 800abfc:	1c43      	adds	r3, r0, #1
 800abfe:	d102      	bne.n	800ac06 <_sbrk_r+0x1a>
 800ac00:	682b      	ldr	r3, [r5, #0]
 800ac02:	b103      	cbz	r3, 800ac06 <_sbrk_r+0x1a>
 800ac04:	6023      	str	r3, [r4, #0]
 800ac06:	bd38      	pop	{r3, r4, r5, pc}
 800ac08:	20000e70 	.word	0x20000e70

0800ac0c <memchr>:
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	b510      	push	{r4, lr}
 800ac10:	b2c9      	uxtb	r1, r1
 800ac12:	4402      	add	r2, r0
 800ac14:	4293      	cmp	r3, r2
 800ac16:	4618      	mov	r0, r3
 800ac18:	d101      	bne.n	800ac1e <memchr+0x12>
 800ac1a:	2000      	movs	r0, #0
 800ac1c:	e003      	b.n	800ac26 <memchr+0x1a>
 800ac1e:	7804      	ldrb	r4, [r0, #0]
 800ac20:	3301      	adds	r3, #1
 800ac22:	428c      	cmp	r4, r1
 800ac24:	d1f6      	bne.n	800ac14 <memchr+0x8>
 800ac26:	bd10      	pop	{r4, pc}

0800ac28 <_init>:
 800ac28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac2a:	bf00      	nop
 800ac2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac2e:	bc08      	pop	{r3}
 800ac30:	469e      	mov	lr, r3
 800ac32:	4770      	bx	lr

0800ac34 <_fini>:
 800ac34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac36:	bf00      	nop
 800ac38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac3a:	bc08      	pop	{r3}
 800ac3c:	469e      	mov	lr, r3
 800ac3e:	4770      	bx	lr
