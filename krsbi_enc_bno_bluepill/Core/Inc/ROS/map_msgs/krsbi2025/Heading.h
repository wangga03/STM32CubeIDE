// Generated by gencpp from file krsbi2025/Heading.msg
// DO NOT EDIT!


#ifndef KRSBI2025_MESSAGE_HEADING_H
#define KRSBI2025_MESSAGE_HEADING_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace krsbi2025
{
template <class ContainerAllocator>
struct Heading_
{
  typedef Heading_<ContainerAllocator> Type;

  Heading_()
    : mag_x(0)
    , mag_y(0)
    , mag_z(0)
    , yaw(0.0)  {
    }
  Heading_(const ContainerAllocator& _alloc)
    : mag_x(0)
    , mag_y(0)
    , mag_z(0)
    , yaw(0.0)  {
  (void)_alloc;
    }



   typedef int16_t _mag_x_type;
  _mag_x_type mag_x;

   typedef int16_t _mag_y_type;
  _mag_y_type mag_y;

   typedef int16_t _mag_z_type;
  _mag_z_type mag_z;

   typedef float _yaw_type;
  _yaw_type yaw;





  typedef boost::shared_ptr< ::krsbi2025::Heading_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::krsbi2025::Heading_<ContainerAllocator> const> ConstPtr;

}; // struct Heading_

typedef ::krsbi2025::Heading_<std::allocator<void> > Heading;

typedef boost::shared_ptr< ::krsbi2025::Heading > HeadingPtr;
typedef boost::shared_ptr< ::krsbi2025::Heading const> HeadingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::krsbi2025::Heading_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::krsbi2025::Heading_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::krsbi2025::Heading_<ContainerAllocator1> & lhs, const ::krsbi2025::Heading_<ContainerAllocator2> & rhs)
{
  return lhs.mag_x == rhs.mag_x &&
    lhs.mag_y == rhs.mag_y &&
    lhs.mag_z == rhs.mag_z &&
    lhs.yaw == rhs.yaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::krsbi2025::Heading_<ContainerAllocator1> & lhs, const ::krsbi2025::Heading_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace krsbi2025

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::krsbi2025::Heading_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::krsbi2025::Heading_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::krsbi2025::Heading_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::krsbi2025::Heading_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::krsbi2025::Heading_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::krsbi2025::Heading_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::krsbi2025::Heading_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac8000ea2849b8c02f2b22d742581502";
  }

  static const char* value(const ::krsbi2025::Heading_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac8000ea2849b8c0ULL;
  static const uint64_t static_value2 = 0x2f2b22d742581502ULL;
};

template<class ContainerAllocator>
struct DataType< ::krsbi2025::Heading_<ContainerAllocator> >
{
  static const char* value()
  {
    return "krsbi2025/Heading";
  }

  static const char* value(const ::krsbi2025::Heading_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::krsbi2025::Heading_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 mag_x\n"
"int16 mag_y\n"
"int16 mag_z\n"
"float32 yaw\n"
;
  }

  static const char* value(const ::krsbi2025::Heading_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::krsbi2025::Heading_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mag_x);
      stream.next(m.mag_y);
      stream.next(m.mag_z);
      stream.next(m.yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Heading_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::krsbi2025::Heading_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::krsbi2025::Heading_<ContainerAllocator>& v)
  {
    s << indent << "mag_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mag_x);
    s << indent << "mag_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mag_y);
    s << indent << "mag_z: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mag_z);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KRSBI2025_MESSAGE_HEADING_H
