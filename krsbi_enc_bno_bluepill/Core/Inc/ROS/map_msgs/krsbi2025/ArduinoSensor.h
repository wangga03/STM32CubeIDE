// Generated by gencpp from file krsbi2025/ArduinoSensor.msg
// DO NOT EDIT!


#ifndef KRSBI2025_MESSAGE_ARDUINOSENSOR_H
#define KRSBI2025_MESSAGE_ARDUINOSENSOR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace krsbi2025
{
template <class ContainerAllocator>
struct ArduinoSensor_
{
  typedef ArduinoSensor_<ContainerAllocator> Type;

  ArduinoSensor_()
    : depth(0.0)
    , busvoltage(0.0)
    , shuntvoltage(0.0)
    , loadvoltage(0.0)
    , current_mA(0.0)
    , power_mW(0.0)
    , temperature(0.0)
    , humidity(0.0)
    , pressure_abs(0.0)
    , pressure_relative(0.0)
    , altitude_delta(0.0)  {
    }
  ArduinoSensor_(const ContainerAllocator& _alloc)
    : depth(0.0)
    , busvoltage(0.0)
    , shuntvoltage(0.0)
    , loadvoltage(0.0)
    , current_mA(0.0)
    , power_mW(0.0)
    , temperature(0.0)
    , humidity(0.0)
    , pressure_abs(0.0)
    , pressure_relative(0.0)
    , altitude_delta(0.0)  {
  (void)_alloc;
    }



   typedef float _depth_type;
  _depth_type depth;

   typedef float _busvoltage_type;
  _busvoltage_type busvoltage;

   typedef float _shuntvoltage_type;
  _shuntvoltage_type shuntvoltage;

   typedef float _loadvoltage_type;
  _loadvoltage_type loadvoltage;

   typedef float _current_mA_type;
  _current_mA_type current_mA;

   typedef float _power_mW_type;
  _power_mW_type power_mW;

   typedef float _temperature_type;
  _temperature_type temperature;

   typedef float _humidity_type;
  _humidity_type humidity;

   typedef float _pressure_abs_type;
  _pressure_abs_type pressure_abs;

   typedef float _pressure_relative_type;
  _pressure_relative_type pressure_relative;

   typedef float _altitude_delta_type;
  _altitude_delta_type altitude_delta;





  typedef boost::shared_ptr< ::krsbi2025::ArduinoSensor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::krsbi2025::ArduinoSensor_<ContainerAllocator> const> ConstPtr;

}; // struct ArduinoSensor_

typedef ::krsbi2025::ArduinoSensor_<std::allocator<void> > ArduinoSensor;

typedef boost::shared_ptr< ::krsbi2025::ArduinoSensor > ArduinoSensorPtr;
typedef boost::shared_ptr< ::krsbi2025::ArduinoSensor const> ArduinoSensorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::krsbi2025::ArduinoSensor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::krsbi2025::ArduinoSensor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::krsbi2025::ArduinoSensor_<ContainerAllocator1> & lhs, const ::krsbi2025::ArduinoSensor_<ContainerAllocator2> & rhs)
{
  return lhs.depth == rhs.depth &&
    lhs.busvoltage == rhs.busvoltage &&
    lhs.shuntvoltage == rhs.shuntvoltage &&
    lhs.loadvoltage == rhs.loadvoltage &&
    lhs.current_mA == rhs.current_mA &&
    lhs.power_mW == rhs.power_mW &&
    lhs.temperature == rhs.temperature &&
    lhs.humidity == rhs.humidity &&
    lhs.pressure_abs == rhs.pressure_abs &&
    lhs.pressure_relative == rhs.pressure_relative &&
    lhs.altitude_delta == rhs.altitude_delta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::krsbi2025::ArduinoSensor_<ContainerAllocator1> & lhs, const ::krsbi2025::ArduinoSensor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace krsbi2025

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::krsbi2025::ArduinoSensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::krsbi2025::ArduinoSensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::krsbi2025::ArduinoSensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::krsbi2025::ArduinoSensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::krsbi2025::ArduinoSensor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::krsbi2025::ArduinoSensor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::krsbi2025::ArduinoSensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9964b1e9ff85fb1be300e253456f6d75";
  }

  static const char* value(const ::krsbi2025::ArduinoSensor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9964b1e9ff85fb1bULL;
  static const uint64_t static_value2 = 0xe300e253456f6d75ULL;
};

template<class ContainerAllocator>
struct DataType< ::krsbi2025::ArduinoSensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "krsbi2025/ArduinoSensor";
  }

  static const char* value(const ::krsbi2025::ArduinoSensor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::krsbi2025::ArduinoSensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 depth\n"
"float32 busvoltage\n"
"float32 shuntvoltage\n"
"float32 loadvoltage\n"
"float32 current_mA\n"
"float32 power_mW\n"
"float32 temperature\n"
"float32 humidity\n"
"float32 pressure_abs\n"
"float32 pressure_relative\n"
"float32 altitude_delta\n"
;
  }

  static const char* value(const ::krsbi2025::ArduinoSensor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::krsbi2025::ArduinoSensor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.depth);
      stream.next(m.busvoltage);
      stream.next(m.shuntvoltage);
      stream.next(m.loadvoltage);
      stream.next(m.current_mA);
      stream.next(m.power_mW);
      stream.next(m.temperature);
      stream.next(m.humidity);
      stream.next(m.pressure_abs);
      stream.next(m.pressure_relative);
      stream.next(m.altitude_delta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArduinoSensor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::krsbi2025::ArduinoSensor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::krsbi2025::ArduinoSensor_<ContainerAllocator>& v)
  {
    s << indent << "depth: ";
    Printer<float>::stream(s, indent + "  ", v.depth);
    s << indent << "busvoltage: ";
    Printer<float>::stream(s, indent + "  ", v.busvoltage);
    s << indent << "shuntvoltage: ";
    Printer<float>::stream(s, indent + "  ", v.shuntvoltage);
    s << indent << "loadvoltage: ";
    Printer<float>::stream(s, indent + "  ", v.loadvoltage);
    s << indent << "current_mA: ";
    Printer<float>::stream(s, indent + "  ", v.current_mA);
    s << indent << "power_mW: ";
    Printer<float>::stream(s, indent + "  ", v.power_mW);
    s << indent << "temperature: ";
    Printer<float>::stream(s, indent + "  ", v.temperature);
    s << indent << "humidity: ";
    Printer<float>::stream(s, indent + "  ", v.humidity);
    s << indent << "pressure_abs: ";
    Printer<float>::stream(s, indent + "  ", v.pressure_abs);
    s << indent << "pressure_relative: ";
    Printer<float>::stream(s, indent + "  ", v.pressure_relative);
    s << indent << "altitude_delta: ";
    Printer<float>::stream(s, indent + "  ", v.altitude_delta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KRSBI2025_MESSAGE_ARDUINOSENSOR_H
