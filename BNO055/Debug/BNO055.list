
BNO055.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004048  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  08004154  08004154  00005154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043f0  080043f0  00006074  2**0
                  CONTENTS
  4 .ARM          00000000  080043f0  080043f0  00006074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043f0  080043f0  00006074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043f0  080043f0  000053f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080043f4  080043f4  000053f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  080043f8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000074  0800446c  00006074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  0800446c  0000624c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006db9  00000000  00000000  0000609d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018bb  00000000  00000000  0000ce56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a0  00000000  00000000  0000e718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000067e  00000000  00000000  0000efb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018241  00000000  00000000  0000f636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a4d6  00000000  00000000  00027877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000851f2  00000000  00000000  00031d4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6f3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ab0  00000000  00000000  000b6f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000b9a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	0800413c 	.word	0x0800413c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	0800413c 	.word	0x0800413c

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	4619      	mov	r1, r3
 8000996:	2007      	movs	r0, #7
 8000998:	f000 fa38 	bl	8000e0c <bno055_writeData>
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	4619      	mov	r1, r3
 80009b2:	203d      	movs	r0, #61	@ 0x3d
 80009b4:	f000 fa2a 	bl	8000e0c <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d103      	bne.n	80009c6 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 80009be:	2013      	movs	r0, #19
 80009c0:	f000 fa18 	bl	8000df4 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 80009c4:	e002      	b.n	80009cc <bno055_setOperationMode+0x28>
    bno055_delay(7);
 80009c6:	2007      	movs	r0, #7
 80009c8:	f000 fa14 	bl	8000df4 <bno055_delay>
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 80009d8:	2000      	movs	r0, #0
 80009da:	f7ff ffe3 	bl	80009a4 <bno055_setOperationMode>
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 80009e2:	b580      	push	{r7, lr}
 80009e4:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 80009e6:	200c      	movs	r0, #12
 80009e8:	f7ff ffdc 	bl	80009a4 <bno055_setOperationMode>
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 80009f4:	2120      	movs	r1, #32
 80009f6:	203f      	movs	r0, #63	@ 0x3f
 80009f8:	f000 fa08 	bl	8000e0c <bno055_writeData>
  bno055_delay(700);
 80009fc:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8000a00:	f000 f9f8 	bl	8000df4 <bno055_delay>
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
  bno055_reset();
 8000a0e:	f7ff ffef 	bl	80009f0 <bno055_reset>

  uint8_t id = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000a16:	1dfb      	adds	r3, r7, #7
 8000a18:	2201      	movs	r2, #1
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f000 fae1 	bl	8000fe4 <bno055_readData>
  if (id != BNO055_ID) {
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	2ba0      	cmp	r3, #160	@ 0xa0
 8000a26:	d004      	beq.n	8000a32 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4809      	ldr	r0, [pc, #36]	@ (8000a54 <bno055_setup+0x4c>)
 8000a2e:	f002 fcaf 	bl	8003390 <iprintf>
  }
  bno055_setPage(0);
 8000a32:	2000      	movs	r0, #0
 8000a34:	f7ff ffa8 	bl	8000988 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000a38:	2100      	movs	r1, #0
 8000a3a:	203f      	movs	r0, #63	@ 0x3f
 8000a3c:	f000 f9e6 	bl	8000e0c <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000a40:	f7ff ffc8 	bl	80009d4 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8000a44:	200a      	movs	r0, #10
 8000a46:	f000 f9d5 	bl	8000df4 <bno055_delay>
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	08004154 	.word	0x08004154

08000a58 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8000a58:	b5b0      	push	{r4, r5, r7, lr}
 8000a5a:	b08e      	sub	sp, #56	@ 0x38
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	460b      	mov	r3, r1
 8000a62:	70fb      	strb	r3, [r7, #3]
  bno055_setPage(0);
 8000a64:	2000      	movs	r0, #0
 8000a66:	f7ff ff8f 	bl	8000988 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8000a6a:	78fb      	ldrb	r3, [r7, #3]
 8000a6c:	2b20      	cmp	r3, #32
 8000a6e:	d107      	bne.n	8000a80 <bno055_getVector+0x28>
    bno055_readData(vec, buffer, 8);
 8000a70:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000a74:	78fb      	ldrb	r3, [r7, #3]
 8000a76:	2208      	movs	r2, #8
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f000 fab3 	bl	8000fe4 <bno055_readData>
 8000a7e:	e006      	b.n	8000a8e <bno055_getVector+0x36>
  else
    bno055_readData(vec, buffer, 6);
 8000a80:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000a84:	78fb      	ldrb	r3, [r7, #3]
 8000a86:	2206      	movs	r2, #6
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 faab 	bl	8000fe4 <bno055_readData>

  double scale = 1;
 8000a8e:	f04f 0200 	mov.w	r2, #0
 8000a92:	4b77      	ldr	r3, [pc, #476]	@ (8000c70 <bno055_getVector+0x218>)
 8000a94:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8000a98:	78fb      	ldrb	r3, [r7, #3]
 8000a9a:	2b0e      	cmp	r3, #14
 8000a9c:	d109      	bne.n	8000ab2 <bno055_getVector+0x5a>
    scale = magScale;
 8000a9e:	4b75      	ldr	r3, [pc, #468]	@ (8000c74 <bno055_getVector+0x21c>)
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fc94 	bl	80003d0 <__aeabi_ui2d>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	460b      	mov	r3, r1
 8000aac:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8000ab0:	e038      	b.n	8000b24 <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000ab2:	78fb      	ldrb	r3, [r7, #3]
 8000ab4:	2b08      	cmp	r3, #8
 8000ab6:	d005      	beq.n	8000ac4 <bno055_getVector+0x6c>
 8000ab8:	78fb      	ldrb	r3, [r7, #3]
 8000aba:	2b28      	cmp	r3, #40	@ 0x28
 8000abc:	d002      	beq.n	8000ac4 <bno055_getVector+0x6c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8000abe:	78fb      	ldrb	r3, [r7, #3]
 8000ac0:	2b2e      	cmp	r3, #46	@ 0x2e
 8000ac2:	d109      	bne.n	8000ad8 <bno055_getVector+0x80>
    scale = accelScale;
 8000ac4:	4b6c      	ldr	r3, [pc, #432]	@ (8000c78 <bno055_getVector+0x220>)
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fc81 	bl	80003d0 <__aeabi_ui2d>
 8000ace:	4602      	mov	r2, r0
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8000ad6:	e025      	b.n	8000b24 <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8000ad8:	78fb      	ldrb	r3, [r7, #3]
 8000ada:	2b14      	cmp	r3, #20
 8000adc:	d109      	bne.n	8000af2 <bno055_getVector+0x9a>
    scale = angularRateScale;
 8000ade:	4b67      	ldr	r3, [pc, #412]	@ (8000c7c <bno055_getVector+0x224>)
 8000ae0:	881b      	ldrh	r3, [r3, #0]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff fc74 	bl	80003d0 <__aeabi_ui2d>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	460b      	mov	r3, r1
 8000aec:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8000af0:	e018      	b.n	8000b24 <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_EULER) {
 8000af2:	78fb      	ldrb	r3, [r7, #3]
 8000af4:	2b1a      	cmp	r3, #26
 8000af6:	d109      	bne.n	8000b0c <bno055_getVector+0xb4>
    scale = eulerScale;
 8000af8:	4b61      	ldr	r3, [pc, #388]	@ (8000c80 <bno055_getVector+0x228>)
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fc67 	bl	80003d0 <__aeabi_ui2d>
 8000b02:	4602      	mov	r2, r0
 8000b04:	460b      	mov	r3, r1
 8000b06:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8000b0a:	e00b      	b.n	8000b24 <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8000b0c:	78fb      	ldrb	r3, [r7, #3]
 8000b0e:	2b20      	cmp	r3, #32
 8000b10:	d108      	bne.n	8000b24 <bno055_getVector+0xcc>
    scale = quaScale;
 8000b12:	4b5c      	ldr	r3, [pc, #368]	@ (8000c84 <bno055_getVector+0x22c>)
 8000b14:	881b      	ldrh	r3, [r3, #0]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff fc5a 	bl	80003d0 <__aeabi_ui2d>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	460b      	mov	r3, r1
 8000b20:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8000b24:	f107 0308 	add.w	r3, r7, #8
 8000b28:	2220      	movs	r2, #32
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f002 fd77 	bl	8003620 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8000b32:	78fb      	ldrb	r3, [r7, #3]
 8000b34:	2b20      	cmp	r3, #32
 8000b36:	d150      	bne.n	8000bda <bno055_getVector+0x182>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000b38:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000b3c:	021b      	lsls	r3, r3, #8
 8000b3e:	b21a      	sxth	r2, r3
 8000b40:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000b44:	b21b      	sxth	r3, r3
 8000b46:	4313      	orrs	r3, r2
 8000b48:	b21b      	sxth	r3, r3
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fc50 	bl	80003f0 <__aeabi_i2d>
 8000b50:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000b54:	f7ff fde0 	bl	8000718 <__aeabi_ddiv>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000b60:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000b64:	021b      	lsls	r3, r3, #8
 8000b66:	b21a      	sxth	r2, r3
 8000b68:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000b6c:	b21b      	sxth	r3, r3
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	b21b      	sxth	r3, r3
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fc3c 	bl	80003f0 <__aeabi_i2d>
 8000b78:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000b7c:	f7ff fdcc 	bl	8000718 <__aeabi_ddiv>
 8000b80:	4602      	mov	r2, r0
 8000b82:	460b      	mov	r3, r1
 8000b84:	e9c7 2304 	strd	r2, r3, [r7, #16]
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000b88:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000b8c:	021b      	lsls	r3, r3, #8
 8000b8e:	b21a      	sxth	r2, r3
 8000b90:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000b94:	b21b      	sxth	r3, r3
 8000b96:	4313      	orrs	r3, r2
 8000b98:	b21b      	sxth	r3, r3
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff fc28 	bl	80003f0 <__aeabi_i2d>
 8000ba0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000ba4:	f7ff fdb8 	bl	8000718 <__aeabi_ddiv>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	460b      	mov	r3, r1
 8000bac:	e9c7 2306 	strd	r2, r3, [r7, #24]
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8000bb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bb4:	021b      	lsls	r3, r3, #8
 8000bb6:	b21a      	sxth	r2, r3
 8000bb8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000bbc:	b21b      	sxth	r3, r3
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	b21b      	sxth	r3, r3
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fc14 	bl	80003f0 <__aeabi_i2d>
 8000bc8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000bcc:	f7ff fda4 	bl	8000718 <__aeabi_ddiv>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8000bd8:	e03b      	b.n	8000c52 <bno055_getVector+0x1fa>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000bda:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000bde:	021b      	lsls	r3, r3, #8
 8000be0:	b21a      	sxth	r2, r3
 8000be2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000be6:	b21b      	sxth	r3, r3
 8000be8:	4313      	orrs	r3, r2
 8000bea:	b21b      	sxth	r3, r3
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fbff 	bl	80003f0 <__aeabi_i2d>
 8000bf2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000bf6:	f7ff fd8f 	bl	8000718 <__aeabi_ddiv>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	e9c7 2304 	strd	r2, r3, [r7, #16]
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000c02:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000c06:	021b      	lsls	r3, r3, #8
 8000c08:	b21a      	sxth	r2, r3
 8000c0a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000c0e:	b21b      	sxth	r3, r3
 8000c10:	4313      	orrs	r3, r2
 8000c12:	b21b      	sxth	r3, r3
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fbeb 	bl	80003f0 <__aeabi_i2d>
 8000c1a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000c1e:	f7ff fd7b 	bl	8000718 <__aeabi_ddiv>
 8000c22:	4602      	mov	r2, r0
 8000c24:	460b      	mov	r3, r1
 8000c26:	e9c7 2306 	strd	r2, r3, [r7, #24]
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000c2a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000c2e:	021b      	lsls	r3, r3, #8
 8000c30:	b21a      	sxth	r2, r3
 8000c32:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000c36:	b21b      	sxth	r3, r3
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	b21b      	sxth	r3, r3
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fbd7 	bl	80003f0 <__aeabi_i2d>
 8000c42:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000c46:	f7ff fd67 	bl	8000718 <__aeabi_ddiv>
 8000c4a:	4602      	mov	r2, r0
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  return xyz;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	461d      	mov	r5, r3
 8000c56:	f107 0408 	add.w	r4, r7, #8
 8000c5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c5e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c62:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	3738      	adds	r7, #56	@ 0x38
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bdb0      	pop	{r4, r5, r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	3ff00000 	.word	0x3ff00000
 8000c74:	20000006 	.word	0x20000006
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000002 	.word	0x20000002
 8000c80:	20000004 	.word	0x20000004
 8000c84:	20000008 	.word	0x20000008

08000c88 <bno055_getVectorGyroscope>:
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
}
bno055_vector_t bno055_getVectorMagnetometer() {
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2114      	movs	r1, #20
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fedf 	bl	8000a58 <bno055_getVector>
}
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000caa:	4b14      	ldr	r3, [pc, #80]	@ (8000cfc <MX_GPIO_Init+0x58>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	4a13      	ldr	r2, [pc, #76]	@ (8000cfc <MX_GPIO_Init+0x58>)
 8000cb0:	f043 0320 	orr.w	r3, r3, #32
 8000cb4:	6193      	str	r3, [r2, #24]
 8000cb6:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <MX_GPIO_Init+0x58>)
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	f003 0320 	and.w	r3, r3, #32
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cfc <MX_GPIO_Init+0x58>)
 8000cc4:	699b      	ldr	r3, [r3, #24]
 8000cc6:	4a0d      	ldr	r2, [pc, #52]	@ (8000cfc <MX_GPIO_Init+0x58>)
 8000cc8:	f043 0304 	orr.w	r3, r3, #4
 8000ccc:	6193      	str	r3, [r2, #24]
 8000cce:	4b0b      	ldr	r3, [pc, #44]	@ (8000cfc <MX_GPIO_Init+0x58>)
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	f003 0304 	and.w	r3, r3, #4
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cda:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <MX_GPIO_Init+0x58>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	4a07      	ldr	r2, [pc, #28]	@ (8000cfc <MX_GPIO_Init+0x58>)
 8000ce0:	f043 0308 	orr.w	r3, r3, #8
 8000ce4:	6193      	str	r3, [r2, #24]
 8000ce6:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <MX_GPIO_Init+0x58>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	f003 0308 	and.w	r3, r3, #8
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]

}
 8000cf2:	bf00      	nop
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr
 8000cfc:	40021000 	.word	0x40021000

08000d00 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <MX_I2C1_Init+0x50>)
 8000d06:	4a13      	ldr	r2, [pc, #76]	@ (8000d54 <MX_I2C1_Init+0x54>)
 8000d08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <MX_I2C1_Init+0x50>)
 8000d0c:	4a12      	ldr	r2, [pc, #72]	@ (8000d58 <MX_I2C1_Init+0x58>)
 8000d0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	@ (8000d50 <MX_I2C1_Init+0x50>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <MX_I2C1_Init+0x50>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <MX_I2C1_Init+0x50>)
 8000d1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d24:	4b0a      	ldr	r3, [pc, #40]	@ (8000d50 <MX_I2C1_Init+0x50>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d2a:	4b09      	ldr	r3, [pc, #36]	@ (8000d50 <MX_I2C1_Init+0x50>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <MX_I2C1_Init+0x50>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d36:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <MX_I2C1_Init+0x50>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d3c:	4804      	ldr	r0, [pc, #16]	@ (8000d50 <MX_I2C1_Init+0x50>)
 8000d3e:	f000 fe1d 	bl	800197c <HAL_I2C_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d48:	f000 f9f9 	bl	800113e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000090 	.word	0x20000090
 8000d54:	40005400 	.word	0x40005400
 8000d58:	000186a0 	.word	0x000186a0

08000d5c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a15      	ldr	r2, [pc, #84]	@ (8000dcc <HAL_I2C_MspInit+0x70>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d123      	bne.n	8000dc4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7c:	4b14      	ldr	r3, [pc, #80]	@ (8000dd0 <HAL_I2C_MspInit+0x74>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	4a13      	ldr	r2, [pc, #76]	@ (8000dd0 <HAL_I2C_MspInit+0x74>)
 8000d82:	f043 0308 	orr.w	r3, r3, #8
 8000d86:	6193      	str	r3, [r2, #24]
 8000d88:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <HAL_I2C_MspInit+0x74>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f003 0308 	and.w	r3, r3, #8
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d94:	23c0      	movs	r3, #192	@ 0xc0
 8000d96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d98:	2312      	movs	r3, #18
 8000d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	4619      	mov	r1, r3
 8000da6:	480b      	ldr	r0, [pc, #44]	@ (8000dd4 <HAL_I2C_MspInit+0x78>)
 8000da8:	f000 fc64 	bl	8001674 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dac:	4b08      	ldr	r3, [pc, #32]	@ (8000dd0 <HAL_I2C_MspInit+0x74>)
 8000dae:	69db      	ldr	r3, [r3, #28]
 8000db0:	4a07      	ldr	r2, [pc, #28]	@ (8000dd0 <HAL_I2C_MspInit+0x74>)
 8000db2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000db6:	61d3      	str	r3, [r2, #28]
 8000db8:	4b05      	ldr	r3, [pc, #20]	@ (8000dd0 <HAL_I2C_MspInit+0x74>)
 8000dba:	69db      	ldr	r3, [r3, #28]
 8000dbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	3720      	adds	r7, #32
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40005400 	.word	0x40005400
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40010c00 	.word	0x40010c00

08000dd8 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8000de0:	4a03      	ldr	r2, [pc, #12]	@ (8000df0 <bno055_assignI2C+0x18>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6013      	str	r3, [r2, #0]
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	200000e4 	.word	0x200000e4

08000df4 <bno055_delay>:

void bno055_delay(int time) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 fb30 	bl	8001464 <HAL_Delay>
#endif
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af02      	add	r7, sp, #8
 8000e12:	4603      	mov	r3, r0
 8000e14:	460a      	mov	r2, r1
 8000e16:	71fb      	strb	r3, [r7, #7]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	733b      	strb	r3, [r7, #12]
 8000e20:	79bb      	ldrb	r3, [r7, #6]
 8000e22:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8000e24:	4b5a      	ldr	r3, [pc, #360]	@ (8000f90 <bno055_writeData+0x184>)
 8000e26:	6818      	ldr	r0, [r3, #0]
 8000e28:	f107 020c 	add.w	r2, r7, #12
 8000e2c:	230a      	movs	r3, #10
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	2302      	movs	r3, #2
 8000e32:	2150      	movs	r1, #80	@ 0x50
 8000e34:	f000 fee6 	bl	8001c04 <HAL_I2C_Master_Transmit>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8000e3c:	7dfb      	ldrb	r3, [r7, #23]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f000 80a0 	beq.w	8000f84 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8000e44:	7dfb      	ldrb	r3, [r7, #23]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d103      	bne.n	8000e52 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8000e4a:	4852      	ldr	r0, [pc, #328]	@ (8000f94 <bno055_writeData+0x188>)
 8000e4c:	f002 fb08 	bl	8003460 <puts>
 8000e50:	e012      	b.n	8000e78 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8000e52:	7dfb      	ldrb	r3, [r7, #23]
 8000e54:	2b03      	cmp	r3, #3
 8000e56:	d103      	bne.n	8000e60 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8000e58:	484f      	ldr	r0, [pc, #316]	@ (8000f98 <bno055_writeData+0x18c>)
 8000e5a:	f002 fb01 	bl	8003460 <puts>
 8000e5e:	e00b      	b.n	8000e78 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8000e60:	7dfb      	ldrb	r3, [r7, #23]
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d103      	bne.n	8000e6e <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8000e66:	484d      	ldr	r0, [pc, #308]	@ (8000f9c <bno055_writeData+0x190>)
 8000e68:	f002 fafa 	bl	8003460 <puts>
 8000e6c:	e004      	b.n	8000e78 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8000e6e:	7dfb      	ldrb	r3, [r7, #23]
 8000e70:	4619      	mov	r1, r3
 8000e72:	484b      	ldr	r0, [pc, #300]	@ (8000fa0 <bno055_writeData+0x194>)
 8000e74:	f002 fa8c 	bl	8003390 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8000e78:	4b45      	ldr	r3, [pc, #276]	@ (8000f90 <bno055_writeData+0x184>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f001 fa38 	bl	80022f2 <HAL_I2C_GetError>
 8000e82:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d07e      	beq.n	8000f88 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d103      	bne.n	8000e98 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8000e90:	4844      	ldr	r0, [pc, #272]	@ (8000fa4 <bno055_writeData+0x198>)
 8000e92:	f002 fae5 	bl	8003460 <puts>
 8000e96:	e021      	b.n	8000edc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d103      	bne.n	8000ea6 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8000e9e:	4842      	ldr	r0, [pc, #264]	@ (8000fa8 <bno055_writeData+0x19c>)
 8000ea0:	f002 fade 	bl	8003460 <puts>
 8000ea4:	e01a      	b.n	8000edc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	2b04      	cmp	r3, #4
 8000eaa:	d103      	bne.n	8000eb4 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8000eac:	483f      	ldr	r0, [pc, #252]	@ (8000fac <bno055_writeData+0x1a0>)
 8000eae:	f002 fad7 	bl	8003460 <puts>
 8000eb2:	e013      	b.n	8000edc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	2b08      	cmp	r3, #8
 8000eb8:	d103      	bne.n	8000ec2 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8000eba:	483d      	ldr	r0, [pc, #244]	@ (8000fb0 <bno055_writeData+0x1a4>)
 8000ebc:	f002 fad0 	bl	8003460 <puts>
 8000ec0:	e00c      	b.n	8000edc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	2b10      	cmp	r3, #16
 8000ec6:	d103      	bne.n	8000ed0 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8000ec8:	483a      	ldr	r0, [pc, #232]	@ (8000fb4 <bno055_writeData+0x1a8>)
 8000eca:	f002 fac9 	bl	8003460 <puts>
 8000ece:	e005      	b.n	8000edc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	2b20      	cmp	r3, #32
 8000ed4:	d102      	bne.n	8000edc <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8000ed6:	4838      	ldr	r0, [pc, #224]	@ (8000fb8 <bno055_writeData+0x1ac>)
 8000ed8:	f002 fac2 	bl	8003460 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8000edc:	4b2c      	ldr	r3, [pc, #176]	@ (8000f90 <bno055_writeData+0x184>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f001 f9f9 	bl	80022d8 <HAL_I2C_GetState>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d103      	bne.n	8000ef8 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000ef0:	4832      	ldr	r0, [pc, #200]	@ (8000fbc <bno055_writeData+0x1b0>)
 8000ef2:	f002 fab5 	bl	8003460 <puts>
 8000ef6:	e048      	b.n	8000f8a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	2b20      	cmp	r3, #32
 8000efc:	d103      	bne.n	8000f06 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000efe:	482f      	ldr	r0, [pc, #188]	@ (8000fbc <bno055_writeData+0x1b0>)
 8000f00:	f002 faae 	bl	8003460 <puts>
 8000f04:	e041      	b.n	8000f8a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	2b24      	cmp	r3, #36	@ 0x24
 8000f0a:	d103      	bne.n	8000f14 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8000f0c:	482c      	ldr	r0, [pc, #176]	@ (8000fc0 <bno055_writeData+0x1b4>)
 8000f0e:	f002 faa7 	bl	8003460 <puts>
 8000f12:	e03a      	b.n	8000f8a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	2b21      	cmp	r3, #33	@ 0x21
 8000f18:	d103      	bne.n	8000f22 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8000f1a:	482a      	ldr	r0, [pc, #168]	@ (8000fc4 <bno055_writeData+0x1b8>)
 8000f1c:	f002 faa0 	bl	8003460 <puts>
 8000f20:	e033      	b.n	8000f8a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	2b22      	cmp	r3, #34	@ 0x22
 8000f26:	d103      	bne.n	8000f30 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8000f28:	4827      	ldr	r0, [pc, #156]	@ (8000fc8 <bno055_writeData+0x1bc>)
 8000f2a:	f002 fa99 	bl	8003460 <puts>
 8000f2e:	e02c      	b.n	8000f8a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	2b28      	cmp	r3, #40	@ 0x28
 8000f34:	d103      	bne.n	8000f3e <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8000f36:	4825      	ldr	r0, [pc, #148]	@ (8000fcc <bno055_writeData+0x1c0>)
 8000f38:	f002 fa92 	bl	8003460 <puts>
 8000f3c:	e025      	b.n	8000f8a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	2b29      	cmp	r3, #41	@ 0x29
 8000f42:	d103      	bne.n	8000f4c <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8000f44:	4822      	ldr	r0, [pc, #136]	@ (8000fd0 <bno055_writeData+0x1c4>)
 8000f46:	f002 fa8b 	bl	8003460 <puts>
 8000f4a:	e01e      	b.n	8000f8a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000f50:	d103      	bne.n	8000f5a <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8000f52:	4820      	ldr	r0, [pc, #128]	@ (8000fd4 <bno055_writeData+0x1c8>)
 8000f54:	f002 fa84 	bl	8003460 <puts>
 8000f58:	e017      	b.n	8000f8a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	2b60      	cmp	r3, #96	@ 0x60
 8000f5e:	d103      	bne.n	8000f68 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8000f60:	481d      	ldr	r0, [pc, #116]	@ (8000fd8 <bno055_writeData+0x1cc>)
 8000f62:	f002 fa7d 	bl	8003460 <puts>
 8000f66:	e010      	b.n	8000f8a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	2ba0      	cmp	r3, #160	@ 0xa0
 8000f6c:	d103      	bne.n	8000f76 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8000f6e:	481b      	ldr	r0, [pc, #108]	@ (8000fdc <bno055_writeData+0x1d0>)
 8000f70:	f002 fa76 	bl	8003460 <puts>
 8000f74:	e009      	b.n	8000f8a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	2be0      	cmp	r3, #224	@ 0xe0
 8000f7a:	d106      	bne.n	8000f8a <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8000f7c:	4818      	ldr	r0, [pc, #96]	@ (8000fe0 <bno055_writeData+0x1d4>)
 8000f7e:	f002 fa6f 	bl	8003460 <puts>
 8000f82:	e002      	b.n	8000f8a <bno055_writeData+0x17e>
    return;
 8000f84:	bf00      	nop
 8000f86:	e000      	b.n	8000f8a <bno055_writeData+0x17e>
    return;
 8000f88:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	200000e4 	.word	0x200000e4
 8000f94:	08004190 	.word	0x08004190
 8000f98:	080041b4 	.word	0x080041b4
 8000f9c:	080041dc 	.word	0x080041dc
 8000fa0:	08004200 	.word	0x08004200
 8000fa4:	08004218 	.word	0x08004218
 8000fa8:	0800422c 	.word	0x0800422c
 8000fac:	08004240 	.word	0x08004240
 8000fb0:	08004254 	.word	0x08004254
 8000fb4:	08004268 	.word	0x08004268
 8000fb8:	0800427c 	.word	0x0800427c
 8000fbc:	08004294 	.word	0x08004294
 8000fc0:	080042ac 	.word	0x080042ac
 8000fc4:	080042c0 	.word	0x080042c0
 8000fc8:	080042d8 	.word	0x080042d8
 8000fcc:	080042f0 	.word	0x080042f0
 8000fd0:	08004308 	.word	0x08004308
 8000fd4:	08004328 	.word	0x08004328
 8000fd8:	08004348 	.word	0x08004348
 8000fdc:	08004360 	.word	0x08004360
 8000fe0:	08004378 	.word	0x08004378

08000fe4 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	4603      	mov	r3, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8001024 <bno055_readData+0x40>)
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	1dfa      	adds	r2, r7, #7
 8000ffa:	2364      	movs	r3, #100	@ 0x64
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	2301      	movs	r3, #1
 8001000:	2150      	movs	r1, #80	@ 0x50
 8001002:	f000 fdff 	bl	8001c04 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8001006:	4b07      	ldr	r3, [pc, #28]	@ (8001024 <bno055_readData+0x40>)
 8001008:	6818      	ldr	r0, [r3, #0]
 800100a:	79bb      	ldrb	r3, [r7, #6]
 800100c:	b29b      	uxth	r3, r3
 800100e:	2264      	movs	r2, #100	@ 0x64
 8001010:	9200      	str	r2, [sp, #0]
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	2150      	movs	r1, #80	@ 0x50
 8001016:	f000 fef3 	bl	8001e00 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200000e4 	.word	0x200000e4

08001028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102e:	f000 f9b7 	bl	80013a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001032:	f000 f83f 	bl	80010b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001036:	f7ff fe35 	bl	8000ca4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800103a:	f7ff fe61 	bl	8000d00 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  bno055_assignI2C(&hi2c1);
 800103e:	4818      	ldr	r0, [pc, #96]	@ (80010a0 <main+0x78>)
 8001040:	f7ff feca 	bl	8000dd8 <bno055_assignI2C>
    bno055_setup();
 8001044:	f7ff fce0 	bl	8000a08 <bno055_setup>
    bno055_setOperationModeNDOF();
 8001048:	f7ff fccb 	bl	80009e2 <bno055_setOperationModeNDOF>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  bno055_vector_t v = bno055_getVectorGyroscope();
 800104c:	463b      	mov	r3, r7
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fe1a 	bl	8000c88 <bno055_getVectorGyroscope>
//	      printf("Heading: %.2f Roll: %.2f Pitch: %.2f\r\n", v.x, v.y, v.z);

	  x = v.x;
 8001054:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001058:	4610      	mov	r0, r2
 800105a:	4619      	mov	r1, r3
 800105c:	f7ff fc44 	bl	80008e8 <__aeabi_d2f>
 8001060:	4603      	mov	r3, r0
 8001062:	4a10      	ldr	r2, [pc, #64]	@ (80010a4 <main+0x7c>)
 8001064:	6013      	str	r3, [r2, #0]
	  y = v.y;
 8001066:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800106a:	4610      	mov	r0, r2
 800106c:	4619      	mov	r1, r3
 800106e:	f7ff fc3b 	bl	80008e8 <__aeabi_d2f>
 8001072:	4603      	mov	r3, r0
 8001074:	4a0c      	ldr	r2, [pc, #48]	@ (80010a8 <main+0x80>)
 8001076:	6013      	str	r3, [r2, #0]
	  z = v.z;
 8001078:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800107c:	4610      	mov	r0, r2
 800107e:	4619      	mov	r1, r3
 8001080:	f7ff fc32 	bl	80008e8 <__aeabi_d2f>
 8001084:	4603      	mov	r3, r0
 8001086:	4a09      	ldr	r2, [pc, #36]	@ (80010ac <main+0x84>)
 8001088:	6013      	str	r3, [r2, #0]
	  w = v.w;
 800108a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800108e:	4610      	mov	r0, r2
 8001090:	4619      	mov	r1, r3
 8001092:	f7ff fc29 	bl	80008e8 <__aeabi_d2f>
 8001096:	4603      	mov	r3, r0
 8001098:	4a05      	ldr	r2, [pc, #20]	@ (80010b0 <main+0x88>)
 800109a:	6013      	str	r3, [r2, #0]
  {
 800109c:	bf00      	nop
 800109e:	e7d5      	b.n	800104c <main+0x24>
 80010a0:	20000090 	.word	0x20000090
 80010a4:	200000e8 	.word	0x200000e8
 80010a8:	200000ec 	.word	0x200000ec
 80010ac:	200000f0 	.word	0x200000f0
 80010b0:	200000f4 	.word	0x200000f4

080010b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b090      	sub	sp, #64	@ 0x40
 80010b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ba:	f107 0318 	add.w	r3, r7, #24
 80010be:	2228      	movs	r2, #40	@ 0x28
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f002 faac 	bl	8003620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
 80010d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010d6:	2301      	movs	r3, #1
 80010d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e4:	2301      	movs	r3, #1
 80010e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e8:	2302      	movs	r3, #2
 80010ea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010f2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80010f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f8:	f107 0318 	add.w	r3, r7, #24
 80010fc:	4618      	mov	r0, r3
 80010fe:	f001 fc89 	bl	8002a14 <HAL_RCC_OscConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001108:	f000 f819 	bl	800113e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110c:	230f      	movs	r3, #15
 800110e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001110:	2302      	movs	r3, #2
 8001112:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001118:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800111c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	2102      	movs	r1, #2
 8001126:	4618      	mov	r0, r3
 8001128:	f001 fef6 	bl	8002f18 <HAL_RCC_ClockConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001132:	f000 f804 	bl	800113e <Error_Handler>
  }
}
 8001136:	bf00      	nop
 8001138:	3740      	adds	r7, #64	@ 0x40
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001142:	b672      	cpsid	i
}
 8001144:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001146:	bf00      	nop
 8001148:	e7fd      	b.n	8001146 <Error_Handler+0x8>
	...

0800114c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001152:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <HAL_MspInit+0x5c>)
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	4a14      	ldr	r2, [pc, #80]	@ (80011a8 <HAL_MspInit+0x5c>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6193      	str	r3, [r2, #24]
 800115e:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <HAL_MspInit+0x5c>)
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <HAL_MspInit+0x5c>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	4a0e      	ldr	r2, [pc, #56]	@ (80011a8 <HAL_MspInit+0x5c>)
 8001170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001174:	61d3      	str	r3, [r2, #28]
 8001176:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <HAL_MspInit+0x5c>)
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001182:	4b0a      	ldr	r3, [pc, #40]	@ (80011ac <HAL_MspInit+0x60>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	4a04      	ldr	r2, [pc, #16]	@ (80011ac <HAL_MspInit+0x60>)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119e:	bf00      	nop
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40010000 	.word	0x40010000

080011b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011b4:	bf00      	nop
 80011b6:	e7fd      	b.n	80011b4 <NMI_Handler+0x4>

080011b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <HardFault_Handler+0x4>

080011c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <MemManage_Handler+0x4>

080011c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <BusFault_Handler+0x4>

080011d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <UsageFault_Handler+0x4>

080011d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr

080011e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr

080011f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr

080011fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001200:	f000 f914 	bl	800142c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}

08001208 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	e00a      	b.n	8001230 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800121a:	f3af 8000 	nop.w
 800121e:	4601      	mov	r1, r0
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	1c5a      	adds	r2, r3, #1
 8001224:	60ba      	str	r2, [r7, #8]
 8001226:	b2ca      	uxtb	r2, r1
 8001228:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	3301      	adds	r3, #1
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	429a      	cmp	r2, r3
 8001236:	dbf0      	blt.n	800121a <_read+0x12>
  }

  return len;
 8001238:	687b      	ldr	r3, [r7, #4]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b086      	sub	sp, #24
 8001246:	af00      	add	r7, sp, #0
 8001248:	60f8      	str	r0, [r7, #12]
 800124a:	60b9      	str	r1, [r7, #8]
 800124c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	e009      	b.n	8001268 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	60ba      	str	r2, [r7, #8]
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	3301      	adds	r3, #1
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	697a      	ldr	r2, [r7, #20]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	429a      	cmp	r2, r3
 800126e:	dbf1      	blt.n	8001254 <_write+0x12>
  }
  return len;
 8001270:	687b      	ldr	r3, [r7, #4]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <_close>:

int _close(int file)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001282:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr

08001290 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012a0:	605a      	str	r2, [r3, #4]
  return 0;
 80012a2:	2300      	movs	r3, #0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr

080012ae <_isatty>:

int _isatty(int file)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012b6:	2301      	movs	r3, #1
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr

080012c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b085      	sub	sp, #20
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	60f8      	str	r0, [r7, #12]
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr
	...

080012dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e4:	4a14      	ldr	r2, [pc, #80]	@ (8001338 <_sbrk+0x5c>)
 80012e6:	4b15      	ldr	r3, [pc, #84]	@ (800133c <_sbrk+0x60>)
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f0:	4b13      	ldr	r3, [pc, #76]	@ (8001340 <_sbrk+0x64>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d102      	bne.n	80012fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f8:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <_sbrk+0x64>)
 80012fa:	4a12      	ldr	r2, [pc, #72]	@ (8001344 <_sbrk+0x68>)
 80012fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012fe:	4b10      	ldr	r3, [pc, #64]	@ (8001340 <_sbrk+0x64>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	429a      	cmp	r2, r3
 800130a:	d207      	bcs.n	800131c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800130c:	f002 f9d6 	bl	80036bc <__errno>
 8001310:	4603      	mov	r3, r0
 8001312:	220c      	movs	r2, #12
 8001314:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001316:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800131a:	e009      	b.n	8001330 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800131c:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <_sbrk+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001322:	4b07      	ldr	r3, [pc, #28]	@ (8001340 <_sbrk+0x64>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	4a05      	ldr	r2, [pc, #20]	@ (8001340 <_sbrk+0x64>)
 800132c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800132e:	68fb      	ldr	r3, [r7, #12]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20005000 	.word	0x20005000
 800133c:	00000400 	.word	0x00000400
 8001340:	200000f8 	.word	0x200000f8
 8001344:	20000250 	.word	0x20000250

08001348 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr

08001354 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001354:	f7ff fff8 	bl	8001348 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001358:	480b      	ldr	r0, [pc, #44]	@ (8001388 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800135a:	490c      	ldr	r1, [pc, #48]	@ (800138c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800135c:	4a0c      	ldr	r2, [pc, #48]	@ (8001390 <LoopFillZerobss+0x16>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001360:	e002      	b.n	8001368 <LoopCopyDataInit>

08001362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001366:	3304      	adds	r3, #4

08001368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800136c:	d3f9      	bcc.n	8001362 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136e:	4a09      	ldr	r2, [pc, #36]	@ (8001394 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001370:	4c09      	ldr	r4, [pc, #36]	@ (8001398 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001374:	e001      	b.n	800137a <LoopFillZerobss>

08001376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001378:	3204      	adds	r2, #4

0800137a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800137c:	d3fb      	bcc.n	8001376 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800137e:	f002 f9a3 	bl	80036c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001382:	f7ff fe51 	bl	8001028 <main>
  bx lr
 8001386:	4770      	bx	lr
  ldr r0, =_sdata
 8001388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800138c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001390:	080043f8 	.word	0x080043f8
  ldr r2, =_sbss
 8001394:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001398:	2000024c 	.word	0x2000024c

0800139c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800139c:	e7fe      	b.n	800139c <ADC1_2_IRQHandler>
	...

080013a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a4:	4b08      	ldr	r3, [pc, #32]	@ (80013c8 <HAL_Init+0x28>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a07      	ldr	r2, [pc, #28]	@ (80013c8 <HAL_Init+0x28>)
 80013aa:	f043 0310 	orr.w	r3, r3, #16
 80013ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b0:	2003      	movs	r0, #3
 80013b2:	f000 f92b 	bl	800160c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b6:	200f      	movs	r0, #15
 80013b8:	f000 f808 	bl	80013cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013bc:	f7ff fec6 	bl	800114c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40022000 	.word	0x40022000

080013cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d4:	4b12      	ldr	r3, [pc, #72]	@ (8001420 <HAL_InitTick+0x54>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b12      	ldr	r3, [pc, #72]	@ (8001424 <HAL_InitTick+0x58>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4619      	mov	r1, r3
 80013de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f935 	bl	800165a <HAL_SYSTICK_Config>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e00e      	b.n	8001418 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b0f      	cmp	r3, #15
 80013fe:	d80a      	bhi.n	8001416 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001400:	2200      	movs	r2, #0
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001408:	f000 f90b 	bl	8001622 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800140c:	4a06      	ldr	r2, [pc, #24]	@ (8001428 <HAL_InitTick+0x5c>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001412:	2300      	movs	r3, #0
 8001414:	e000      	b.n	8001418 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	2000000c 	.word	0x2000000c
 8001424:	20000014 	.word	0x20000014
 8001428:	20000010 	.word	0x20000010

0800142c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001430:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <HAL_IncTick+0x1c>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	4b05      	ldr	r3, [pc, #20]	@ (800144c <HAL_IncTick+0x20>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4413      	add	r3, r2
 800143c:	4a03      	ldr	r2, [pc, #12]	@ (800144c <HAL_IncTick+0x20>)
 800143e:	6013      	str	r3, [r2, #0]
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	20000014 	.word	0x20000014
 800144c:	200000fc 	.word	0x200000fc

08001450 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return uwTick;
 8001454:	4b02      	ldr	r3, [pc, #8]	@ (8001460 <HAL_GetTick+0x10>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	200000fc 	.word	0x200000fc

08001464 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800146c:	f7ff fff0 	bl	8001450 <HAL_GetTick>
 8001470:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800147c:	d005      	beq.n	800148a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800147e:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <HAL_Delay+0x44>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4413      	add	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800148a:	bf00      	nop
 800148c:	f7ff ffe0 	bl	8001450 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	429a      	cmp	r2, r3
 800149a:	d8f7      	bhi.n	800148c <HAL_Delay+0x28>
  {
  }
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000014 	.word	0x20000014

080014ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014bc:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014c8:	4013      	ands	r3, r2
 80014ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014de:	4a04      	ldr	r2, [pc, #16]	@ (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	60d3      	str	r3, [r2, #12]
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f8:	4b04      	ldr	r3, [pc, #16]	@ (800150c <__NVIC_GetPriorityGrouping+0x18>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	0a1b      	lsrs	r3, r3, #8
 80014fe:	f003 0307 	and.w	r3, r3, #7
}
 8001502:	4618      	mov	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	2b00      	cmp	r3, #0
 8001522:	db0a      	blt.n	800153a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	b2da      	uxtb	r2, r3
 8001528:	490c      	ldr	r1, [pc, #48]	@ (800155c <__NVIC_SetPriority+0x4c>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	0112      	lsls	r2, r2, #4
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	440b      	add	r3, r1
 8001534:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001538:	e00a      	b.n	8001550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4908      	ldr	r1, [pc, #32]	@ (8001560 <__NVIC_SetPriority+0x50>)
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	3b04      	subs	r3, #4
 8001548:	0112      	lsls	r2, r2, #4
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	440b      	add	r3, r1
 800154e:	761a      	strb	r2, [r3, #24]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000e100 	.word	0xe000e100
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001564:	b480      	push	{r7}
 8001566:	b089      	sub	sp, #36	@ 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f1c3 0307 	rsb	r3, r3, #7
 800157e:	2b04      	cmp	r3, #4
 8001580:	bf28      	it	cs
 8001582:	2304      	movcs	r3, #4
 8001584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3304      	adds	r3, #4
 800158a:	2b06      	cmp	r3, #6
 800158c:	d902      	bls.n	8001594 <NVIC_EncodePriority+0x30>
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3b03      	subs	r3, #3
 8001592:	e000      	b.n	8001596 <NVIC_EncodePriority+0x32>
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43da      	mvns	r2, r3
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	401a      	ands	r2, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	43d9      	mvns	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	4313      	orrs	r3, r2
         );
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3724      	adds	r7, #36	@ 0x24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr

080015c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015d8:	d301      	bcc.n	80015de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015da:	2301      	movs	r3, #1
 80015dc:	e00f      	b.n	80015fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015de:	4a0a      	ldr	r2, [pc, #40]	@ (8001608 <SysTick_Config+0x40>)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015e6:	210f      	movs	r1, #15
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015ec:	f7ff ff90 	bl	8001510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f0:	4b05      	ldr	r3, [pc, #20]	@ (8001608 <SysTick_Config+0x40>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f6:	4b04      	ldr	r3, [pc, #16]	@ (8001608 <SysTick_Config+0x40>)
 80015f8:	2207      	movs	r2, #7
 80015fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	e000e010 	.word	0xe000e010

0800160c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff ff49 	bl	80014ac <__NVIC_SetPriorityGrouping>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001622:	b580      	push	{r7, lr}
 8001624:	b086      	sub	sp, #24
 8001626:	af00      	add	r7, sp, #0
 8001628:	4603      	mov	r3, r0
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
 800162e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001634:	f7ff ff5e 	bl	80014f4 <__NVIC_GetPriorityGrouping>
 8001638:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	68b9      	ldr	r1, [r7, #8]
 800163e:	6978      	ldr	r0, [r7, #20]
 8001640:	f7ff ff90 	bl	8001564 <NVIC_EncodePriority>
 8001644:	4602      	mov	r2, r0
 8001646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff5f 	bl	8001510 <__NVIC_SetPriority>
}
 8001652:	bf00      	nop
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ffb0 	bl	80015c8 <SysTick_Config>
 8001668:	4603      	mov	r3, r0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001674:	b480      	push	{r7}
 8001676:	b08b      	sub	sp, #44	@ 0x2c
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800167e:	2300      	movs	r3, #0
 8001680:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001682:	2300      	movs	r3, #0
 8001684:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001686:	e169      	b.n	800195c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001688:	2201      	movs	r2, #1
 800168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	69fa      	ldr	r2, [r7, #28]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	f040 8158 	bne.w	8001956 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	4a9a      	ldr	r2, [pc, #616]	@ (8001914 <HAL_GPIO_Init+0x2a0>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d05e      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 80016b0:	4a98      	ldr	r2, [pc, #608]	@ (8001914 <HAL_GPIO_Init+0x2a0>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d875      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016b6:	4a98      	ldr	r2, [pc, #608]	@ (8001918 <HAL_GPIO_Init+0x2a4>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d058      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 80016bc:	4a96      	ldr	r2, [pc, #600]	@ (8001918 <HAL_GPIO_Init+0x2a4>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d86f      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016c2:	4a96      	ldr	r2, [pc, #600]	@ (800191c <HAL_GPIO_Init+0x2a8>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d052      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 80016c8:	4a94      	ldr	r2, [pc, #592]	@ (800191c <HAL_GPIO_Init+0x2a8>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d869      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016ce:	4a94      	ldr	r2, [pc, #592]	@ (8001920 <HAL_GPIO_Init+0x2ac>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d04c      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 80016d4:	4a92      	ldr	r2, [pc, #584]	@ (8001920 <HAL_GPIO_Init+0x2ac>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d863      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016da:	4a92      	ldr	r2, [pc, #584]	@ (8001924 <HAL_GPIO_Init+0x2b0>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d046      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 80016e0:	4a90      	ldr	r2, [pc, #576]	@ (8001924 <HAL_GPIO_Init+0x2b0>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d85d      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016e6:	2b12      	cmp	r3, #18
 80016e8:	d82a      	bhi.n	8001740 <HAL_GPIO_Init+0xcc>
 80016ea:	2b12      	cmp	r3, #18
 80016ec:	d859      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016ee:	a201      	add	r2, pc, #4	@ (adr r2, 80016f4 <HAL_GPIO_Init+0x80>)
 80016f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f4:	0800176f 	.word	0x0800176f
 80016f8:	08001749 	.word	0x08001749
 80016fc:	0800175b 	.word	0x0800175b
 8001700:	0800179d 	.word	0x0800179d
 8001704:	080017a3 	.word	0x080017a3
 8001708:	080017a3 	.word	0x080017a3
 800170c:	080017a3 	.word	0x080017a3
 8001710:	080017a3 	.word	0x080017a3
 8001714:	080017a3 	.word	0x080017a3
 8001718:	080017a3 	.word	0x080017a3
 800171c:	080017a3 	.word	0x080017a3
 8001720:	080017a3 	.word	0x080017a3
 8001724:	080017a3 	.word	0x080017a3
 8001728:	080017a3 	.word	0x080017a3
 800172c:	080017a3 	.word	0x080017a3
 8001730:	080017a3 	.word	0x080017a3
 8001734:	080017a3 	.word	0x080017a3
 8001738:	08001751 	.word	0x08001751
 800173c:	08001765 	.word	0x08001765
 8001740:	4a79      	ldr	r2, [pc, #484]	@ (8001928 <HAL_GPIO_Init+0x2b4>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d013      	beq.n	800176e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001746:	e02c      	b.n	80017a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	623b      	str	r3, [r7, #32]
          break;
 800174e:	e029      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	3304      	adds	r3, #4
 8001756:	623b      	str	r3, [r7, #32]
          break;
 8001758:	e024      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	3308      	adds	r3, #8
 8001760:	623b      	str	r3, [r7, #32]
          break;
 8001762:	e01f      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	330c      	adds	r3, #12
 800176a:	623b      	str	r3, [r7, #32]
          break;
 800176c:	e01a      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d102      	bne.n	800177c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001776:	2304      	movs	r3, #4
 8001778:	623b      	str	r3, [r7, #32]
          break;
 800177a:	e013      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d105      	bne.n	8001790 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001784:	2308      	movs	r3, #8
 8001786:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69fa      	ldr	r2, [r7, #28]
 800178c:	611a      	str	r2, [r3, #16]
          break;
 800178e:	e009      	b.n	80017a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001790:	2308      	movs	r3, #8
 8001792:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69fa      	ldr	r2, [r7, #28]
 8001798:	615a      	str	r2, [r3, #20]
          break;
 800179a:	e003      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800179c:	2300      	movs	r3, #0
 800179e:	623b      	str	r3, [r7, #32]
          break;
 80017a0:	e000      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          break;
 80017a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	2bff      	cmp	r3, #255	@ 0xff
 80017a8:	d801      	bhi.n	80017ae <HAL_GPIO_Init+0x13a>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	e001      	b.n	80017b2 <HAL_GPIO_Init+0x13e>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3304      	adds	r3, #4
 80017b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	2bff      	cmp	r3, #255	@ 0xff
 80017b8:	d802      	bhi.n	80017c0 <HAL_GPIO_Init+0x14c>
 80017ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	e002      	b.n	80017c6 <HAL_GPIO_Init+0x152>
 80017c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c2:	3b08      	subs	r3, #8
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	210f      	movs	r1, #15
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	fa01 f303 	lsl.w	r3, r1, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	401a      	ands	r2, r3
 80017d8:	6a39      	ldr	r1, [r7, #32]
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	fa01 f303 	lsl.w	r3, r1, r3
 80017e0:	431a      	orrs	r2, r3
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 80b1 	beq.w	8001956 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017f4:	4b4d      	ldr	r3, [pc, #308]	@ (800192c <HAL_GPIO_Init+0x2b8>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	4a4c      	ldr	r2, [pc, #304]	@ (800192c <HAL_GPIO_Init+0x2b8>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6193      	str	r3, [r2, #24]
 8001800:	4b4a      	ldr	r3, [pc, #296]	@ (800192c <HAL_GPIO_Init+0x2b8>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800180c:	4a48      	ldr	r2, [pc, #288]	@ (8001930 <HAL_GPIO_Init+0x2bc>)
 800180e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001810:	089b      	lsrs	r3, r3, #2
 8001812:	3302      	adds	r3, #2
 8001814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001818:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800181a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	220f      	movs	r2, #15
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	4013      	ands	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a40      	ldr	r2, [pc, #256]	@ (8001934 <HAL_GPIO_Init+0x2c0>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d013      	beq.n	8001860 <HAL_GPIO_Init+0x1ec>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a3f      	ldr	r2, [pc, #252]	@ (8001938 <HAL_GPIO_Init+0x2c4>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d00d      	beq.n	800185c <HAL_GPIO_Init+0x1e8>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a3e      	ldr	r2, [pc, #248]	@ (800193c <HAL_GPIO_Init+0x2c8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d007      	beq.n	8001858 <HAL_GPIO_Init+0x1e4>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a3d      	ldr	r2, [pc, #244]	@ (8001940 <HAL_GPIO_Init+0x2cc>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d101      	bne.n	8001854 <HAL_GPIO_Init+0x1e0>
 8001850:	2303      	movs	r3, #3
 8001852:	e006      	b.n	8001862 <HAL_GPIO_Init+0x1ee>
 8001854:	2304      	movs	r3, #4
 8001856:	e004      	b.n	8001862 <HAL_GPIO_Init+0x1ee>
 8001858:	2302      	movs	r3, #2
 800185a:	e002      	b.n	8001862 <HAL_GPIO_Init+0x1ee>
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <HAL_GPIO_Init+0x1ee>
 8001860:	2300      	movs	r3, #0
 8001862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001864:	f002 0203 	and.w	r2, r2, #3
 8001868:	0092      	lsls	r2, r2, #2
 800186a:	4093      	lsls	r3, r2
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	4313      	orrs	r3, r2
 8001870:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001872:	492f      	ldr	r1, [pc, #188]	@ (8001930 <HAL_GPIO_Init+0x2bc>)
 8001874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	3302      	adds	r3, #2
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d006      	beq.n	800189a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800188c:	4b2d      	ldr	r3, [pc, #180]	@ (8001944 <HAL_GPIO_Init+0x2d0>)
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	492c      	ldr	r1, [pc, #176]	@ (8001944 <HAL_GPIO_Init+0x2d0>)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	4313      	orrs	r3, r2
 8001896:	608b      	str	r3, [r1, #8]
 8001898:	e006      	b.n	80018a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800189a:	4b2a      	ldr	r3, [pc, #168]	@ (8001944 <HAL_GPIO_Init+0x2d0>)
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	4928      	ldr	r1, [pc, #160]	@ (8001944 <HAL_GPIO_Init+0x2d0>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d006      	beq.n	80018c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018b4:	4b23      	ldr	r3, [pc, #140]	@ (8001944 <HAL_GPIO_Init+0x2d0>)
 80018b6:	68da      	ldr	r2, [r3, #12]
 80018b8:	4922      	ldr	r1, [pc, #136]	@ (8001944 <HAL_GPIO_Init+0x2d0>)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	60cb      	str	r3, [r1, #12]
 80018c0:	e006      	b.n	80018d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018c2:	4b20      	ldr	r3, [pc, #128]	@ (8001944 <HAL_GPIO_Init+0x2d0>)
 80018c4:	68da      	ldr	r2, [r3, #12]
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	491e      	ldr	r1, [pc, #120]	@ (8001944 <HAL_GPIO_Init+0x2d0>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d006      	beq.n	80018ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018dc:	4b19      	ldr	r3, [pc, #100]	@ (8001944 <HAL_GPIO_Init+0x2d0>)
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	4918      	ldr	r1, [pc, #96]	@ (8001944 <HAL_GPIO_Init+0x2d0>)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	604b      	str	r3, [r1, #4]
 80018e8:	e006      	b.n	80018f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018ea:	4b16      	ldr	r3, [pc, #88]	@ (8001944 <HAL_GPIO_Init+0x2d0>)
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	4914      	ldr	r1, [pc, #80]	@ (8001944 <HAL_GPIO_Init+0x2d0>)
 80018f4:	4013      	ands	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d021      	beq.n	8001948 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001904:	4b0f      	ldr	r3, [pc, #60]	@ (8001944 <HAL_GPIO_Init+0x2d0>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	490e      	ldr	r1, [pc, #56]	@ (8001944 <HAL_GPIO_Init+0x2d0>)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	600b      	str	r3, [r1, #0]
 8001910:	e021      	b.n	8001956 <HAL_GPIO_Init+0x2e2>
 8001912:	bf00      	nop
 8001914:	10320000 	.word	0x10320000
 8001918:	10310000 	.word	0x10310000
 800191c:	10220000 	.word	0x10220000
 8001920:	10210000 	.word	0x10210000
 8001924:	10120000 	.word	0x10120000
 8001928:	10110000 	.word	0x10110000
 800192c:	40021000 	.word	0x40021000
 8001930:	40010000 	.word	0x40010000
 8001934:	40010800 	.word	0x40010800
 8001938:	40010c00 	.word	0x40010c00
 800193c:	40011000 	.word	0x40011000
 8001940:	40011400 	.word	0x40011400
 8001944:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001948:	4b0b      	ldr	r3, [pc, #44]	@ (8001978 <HAL_GPIO_Init+0x304>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	43db      	mvns	r3, r3
 8001950:	4909      	ldr	r1, [pc, #36]	@ (8001978 <HAL_GPIO_Init+0x304>)
 8001952:	4013      	ands	r3, r2
 8001954:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001958:	3301      	adds	r3, #1
 800195a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001962:	fa22 f303 	lsr.w	r3, r2, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	f47f ae8e 	bne.w	8001688 <HAL_GPIO_Init+0x14>
  }
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	372c      	adds	r7, #44	@ 0x2c
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	40010400 	.word	0x40010400

0800197c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e12b      	b.n	8001be6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d106      	bne.n	80019a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff f9da 	bl	8000d5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2224      	movs	r2, #36	@ 0x24
 80019ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0201 	bic.w	r2, r2, #1
 80019be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80019de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019e0:	f001 fbe2 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 80019e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	4a81      	ldr	r2, [pc, #516]	@ (8001bf0 <HAL_I2C_Init+0x274>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d807      	bhi.n	8001a00 <HAL_I2C_Init+0x84>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4a80      	ldr	r2, [pc, #512]	@ (8001bf4 <HAL_I2C_Init+0x278>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	bf94      	ite	ls
 80019f8:	2301      	movls	r3, #1
 80019fa:	2300      	movhi	r3, #0
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	e006      	b.n	8001a0e <HAL_I2C_Init+0x92>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4a7d      	ldr	r2, [pc, #500]	@ (8001bf8 <HAL_I2C_Init+0x27c>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	bf94      	ite	ls
 8001a08:	2301      	movls	r3, #1
 8001a0a:	2300      	movhi	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e0e7      	b.n	8001be6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	4a78      	ldr	r2, [pc, #480]	@ (8001bfc <HAL_I2C_Init+0x280>)
 8001a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1e:	0c9b      	lsrs	r3, r3, #18
 8001a20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68ba      	ldr	r2, [r7, #8]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	4a6a      	ldr	r2, [pc, #424]	@ (8001bf0 <HAL_I2C_Init+0x274>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d802      	bhi.n	8001a50 <HAL_I2C_Init+0xd4>
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	e009      	b.n	8001a64 <HAL_I2C_Init+0xe8>
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001a56:	fb02 f303 	mul.w	r3, r2, r3
 8001a5a:	4a69      	ldr	r2, [pc, #420]	@ (8001c00 <HAL_I2C_Init+0x284>)
 8001a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a60:	099b      	lsrs	r3, r3, #6
 8001a62:	3301      	adds	r3, #1
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	430b      	orrs	r3, r1
 8001a6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001a76:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	495c      	ldr	r1, [pc, #368]	@ (8001bf0 <HAL_I2C_Init+0x274>)
 8001a80:	428b      	cmp	r3, r1
 8001a82:	d819      	bhi.n	8001ab8 <HAL_I2C_Init+0x13c>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	1e59      	subs	r1, r3, #1
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a92:	1c59      	adds	r1, r3, #1
 8001a94:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a98:	400b      	ands	r3, r1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00a      	beq.n	8001ab4 <HAL_I2C_Init+0x138>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	1e59      	subs	r1, r3, #1
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aac:	3301      	adds	r3, #1
 8001aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab2:	e051      	b.n	8001b58 <HAL_I2C_Init+0x1dc>
 8001ab4:	2304      	movs	r3, #4
 8001ab6:	e04f      	b.n	8001b58 <HAL_I2C_Init+0x1dc>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d111      	bne.n	8001ae4 <HAL_I2C_Init+0x168>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	1e58      	subs	r0, r3, #1
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6859      	ldr	r1, [r3, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	440b      	add	r3, r1
 8001ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	bf0c      	ite	eq
 8001adc:	2301      	moveq	r3, #1
 8001ade:	2300      	movne	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	e012      	b.n	8001b0a <HAL_I2C_Init+0x18e>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	1e58      	subs	r0, r3, #1
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6859      	ldr	r1, [r3, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	0099      	lsls	r1, r3, #2
 8001af4:	440b      	add	r3, r1
 8001af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001afa:	3301      	adds	r3, #1
 8001afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	bf0c      	ite	eq
 8001b04:	2301      	moveq	r3, #1
 8001b06:	2300      	movne	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_I2C_Init+0x196>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e022      	b.n	8001b58 <HAL_I2C_Init+0x1dc>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10e      	bne.n	8001b38 <HAL_I2C_Init+0x1bc>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	1e58      	subs	r0, r3, #1
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6859      	ldr	r1, [r3, #4]
 8001b22:	460b      	mov	r3, r1
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	440b      	add	r3, r1
 8001b28:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b36:	e00f      	b.n	8001b58 <HAL_I2C_Init+0x1dc>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	1e58      	subs	r0, r3, #1
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6859      	ldr	r1, [r3, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	0099      	lsls	r1, r3, #2
 8001b48:	440b      	add	r3, r1
 8001b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b4e:	3301      	adds	r3, #1
 8001b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	6809      	ldr	r1, [r1, #0]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69da      	ldr	r2, [r3, #28]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001b86:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6911      	ldr	r1, [r2, #16]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	68d2      	ldr	r2, [r2, #12]
 8001b92:	4311      	orrs	r1, r2
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	430b      	orrs	r3, r1
 8001b9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	695a      	ldr	r2, [r3, #20]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0201 	orr.w	r2, r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	000186a0 	.word	0x000186a0
 8001bf4:	001e847f 	.word	0x001e847f
 8001bf8:	003d08ff 	.word	0x003d08ff
 8001bfc:	431bde83 	.word	0x431bde83
 8001c00:	10624dd3 	.word	0x10624dd3

08001c04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af02      	add	r7, sp, #8
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	607a      	str	r2, [r7, #4]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	460b      	mov	r3, r1
 8001c12:	817b      	strh	r3, [r7, #10]
 8001c14:	4613      	mov	r3, r2
 8001c16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c18:	f7ff fc1a 	bl	8001450 <HAL_GetTick>
 8001c1c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b20      	cmp	r3, #32
 8001c28:	f040 80e0 	bne.w	8001dec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	2319      	movs	r3, #25
 8001c32:	2201      	movs	r2, #1
 8001c34:	4970      	ldr	r1, [pc, #448]	@ (8001df8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f000 fcb6 	bl	80025a8 <I2C_WaitOnFlagUntilTimeout>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c42:	2302      	movs	r3, #2
 8001c44:	e0d3      	b.n	8001dee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_I2C_Master_Transmit+0x50>
 8001c50:	2302      	movs	r3, #2
 8001c52:	e0cc      	b.n	8001dee <HAL_I2C_Master_Transmit+0x1ea>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d007      	beq.n	8001c7a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f042 0201 	orr.w	r2, r2, #1
 8001c78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2221      	movs	r2, #33	@ 0x21
 8001c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2210      	movs	r2, #16
 8001c96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	893a      	ldrh	r2, [r7, #8]
 8001caa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4a50      	ldr	r2, [pc, #320]	@ (8001dfc <HAL_I2C_Master_Transmit+0x1f8>)
 8001cba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001cbc:	8979      	ldrh	r1, [r7, #10]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	6a3a      	ldr	r2, [r7, #32]
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f000 fb20 	bl	8002308 <I2C_MasterRequestWrite>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e08d      	b.n	8001dee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ce8:	e066      	b.n	8001db8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	6a39      	ldr	r1, [r7, #32]
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f000 fd74 	bl	80027dc <I2C_WaitOnTXEFlagUntilTimeout>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00d      	beq.n	8001d16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d107      	bne.n	8001d12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e06b      	b.n	8001dee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1a:	781a      	ldrb	r2, [r3, #0]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	3b01      	subs	r3, #1
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d11b      	bne.n	8001d8c <HAL_I2C_Master_Transmit+0x188>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d017      	beq.n	8001d8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d60:	781a      	ldrb	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	6a39      	ldr	r1, [r7, #32]
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 fd6b 	bl	800286c <I2C_WaitOnBTFFlagUntilTimeout>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00d      	beq.n	8001db8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d107      	bne.n	8001db4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001db2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e01a      	b.n	8001dee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d194      	bne.n	8001cea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001de8:	2300      	movs	r3, #0
 8001dea:	e000      	b.n	8001dee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001dec:	2302      	movs	r3, #2
  }
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	00100002 	.word	0x00100002
 8001dfc:	ffff0000 	.word	0xffff0000

08001e00 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08c      	sub	sp, #48	@ 0x30
 8001e04:	af02      	add	r7, sp, #8
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	817b      	strh	r3, [r7, #10]
 8001e10:	4613      	mov	r3, r2
 8001e12:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e18:	f7ff fb1a 	bl	8001450 <HAL_GetTick>
 8001e1c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b20      	cmp	r3, #32
 8001e28:	f040 824b 	bne.w	80022c2 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	2319      	movs	r3, #25
 8001e32:	2201      	movs	r2, #1
 8001e34:	497f      	ldr	r1, [pc, #508]	@ (8002034 <HAL_I2C_Master_Receive+0x234>)
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 fbb6 	bl	80025a8 <I2C_WaitOnFlagUntilTimeout>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001e42:	2302      	movs	r3, #2
 8001e44:	e23e      	b.n	80022c4 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <HAL_I2C_Master_Receive+0x54>
 8001e50:	2302      	movs	r3, #2
 8001e52:	e237      	b.n	80022c4 <HAL_I2C_Master_Receive+0x4c4>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d007      	beq.n	8001e7a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f042 0201 	orr.w	r2, r2, #1
 8001e78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2222      	movs	r2, #34	@ 0x22
 8001e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2210      	movs	r2, #16
 8001e96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	893a      	ldrh	r2, [r7, #8]
 8001eaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4a5f      	ldr	r2, [pc, #380]	@ (8002038 <HAL_I2C_Master_Receive+0x238>)
 8001eba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ebc:	8979      	ldrh	r1, [r7, #10]
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f000 faa2 	bl	800240c <I2C_MasterRequestRead>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e1f8      	b.n	80022c4 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d113      	bne.n	8001f02 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	e1cc      	b.n	800229c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d11e      	bne.n	8001f48 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f18:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f1a:	b672      	cpsid	i
}
 8001f1c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61bb      	str	r3, [r7, #24]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	61bb      	str	r3, [r7, #24]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	61bb      	str	r3, [r7, #24]
 8001f32:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f42:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f44:	b662      	cpsie	i
}
 8001f46:	e035      	b.n	8001fb4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d11e      	bne.n	8001f8e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f5e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f60:	b672      	cpsid	i
}
 8001f62:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f8a:	b662      	cpsie	i
}
 8001f8c:	e012      	b.n	8001fb4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001f9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001fb4:	e172      	b.n	800229c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	f200 811f 	bhi.w	80021fe <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d123      	bne.n	8002010 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f000 fc95 	bl	80028fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e173      	b.n	80022c4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	691a      	ldr	r2, [r3, #16]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fee:	1c5a      	adds	r2, r3, #1
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002004:	b29b      	uxth	r3, r3
 8002006:	3b01      	subs	r3, #1
 8002008:	b29a      	uxth	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800200e:	e145      	b.n	800229c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002014:	2b02      	cmp	r3, #2
 8002016:	d152      	bne.n	80020be <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800201e:	2200      	movs	r2, #0
 8002020:	4906      	ldr	r1, [pc, #24]	@ (800203c <HAL_I2C_Master_Receive+0x23c>)
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f000 fac0 	bl	80025a8 <I2C_WaitOnFlagUntilTimeout>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d008      	beq.n	8002040 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e148      	b.n	80022c4 <HAL_I2C_Master_Receive+0x4c4>
 8002032:	bf00      	nop
 8002034:	00100002 	.word	0x00100002
 8002038:	ffff0000 	.word	0xffff0000
 800203c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002040:	b672      	cpsid	i
}
 8002042:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002052:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691a      	ldr	r2, [r3, #16]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002066:	1c5a      	adds	r2, r3, #1
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002070:	3b01      	subs	r3, #1
 8002072:	b29a      	uxth	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800207c:	b29b      	uxth	r3, r3
 800207e:	3b01      	subs	r3, #1
 8002080:	b29a      	uxth	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002086:	b662      	cpsie	i
}
 8002088:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020a6:	3b01      	subs	r3, #1
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80020bc:	e0ee      	b.n	800229c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020c4:	2200      	movs	r2, #0
 80020c6:	4981      	ldr	r1, [pc, #516]	@ (80022cc <HAL_I2C_Master_Receive+0x4cc>)
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 fa6d 	bl	80025a8 <I2C_WaitOnFlagUntilTimeout>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e0f5      	b.n	80022c4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80020e8:	b672      	cpsid	i
}
 80020ea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	691a      	ldr	r2, [r3, #16]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fe:	1c5a      	adds	r2, r3, #1
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002108:	3b01      	subs	r3, #1
 800210a:	b29a      	uxth	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002114:	b29b      	uxth	r3, r3
 8002116:	3b01      	subs	r3, #1
 8002118:	b29a      	uxth	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800211e:	4b6c      	ldr	r3, [pc, #432]	@ (80022d0 <HAL_I2C_Master_Receive+0x4d0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	08db      	lsrs	r3, r3, #3
 8002124:	4a6b      	ldr	r2, [pc, #428]	@ (80022d4 <HAL_I2C_Master_Receive+0x4d4>)
 8002126:	fba2 2303 	umull	r2, r3, r2, r3
 800212a:	0a1a      	lsrs	r2, r3, #8
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	00da      	lsls	r2, r3, #3
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002138:	6a3b      	ldr	r3, [r7, #32]
 800213a:	3b01      	subs	r3, #1
 800213c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d118      	bne.n	8002176 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2220      	movs	r2, #32
 800214e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215e:	f043 0220 	orr.w	r2, r3, #32
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002166:	b662      	cpsie	i
}
 8002168:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e0a6      	b.n	80022c4 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b04      	cmp	r3, #4
 8002182:	d1d9      	bne.n	8002138 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002192:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	691a      	ldr	r2, [r3, #16]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021b0:	3b01      	subs	r3, #1
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021bc:	b29b      	uxth	r3, r3
 80021be:	3b01      	subs	r3, #1
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80021c6:	b662      	cpsie	i
}
 80021c8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021dc:	1c5a      	adds	r2, r3, #1
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	3b01      	subs	r3, #1
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80021fc:	e04e      	b.n	800229c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002200:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 fb7a 	bl	80028fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e058      	b.n	80022c4 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002224:	1c5a      	adds	r2, r3, #1
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800222e:	3b01      	subs	r3, #1
 8002230:	b29a      	uxth	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800223a:	b29b      	uxth	r3, r3
 800223c:	3b01      	subs	r3, #1
 800223e:	b29a      	uxth	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	2b04      	cmp	r3, #4
 8002250:	d124      	bne.n	800229c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002256:	2b03      	cmp	r3, #3
 8002258:	d107      	bne.n	800226a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002268:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	691a      	ldr	r2, [r3, #16]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227c:	1c5a      	adds	r2, r3, #1
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002286:	3b01      	subs	r3, #1
 8002288:	b29a      	uxth	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002292:	b29b      	uxth	r3, r3
 8002294:	3b01      	subs	r3, #1
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f47f ae88 	bne.w	8001fb6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2220      	movs	r2, #32
 80022aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	e000      	b.n	80022c4 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80022c2:	2302      	movs	r3, #2
  }
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3728      	adds	r7, #40	@ 0x28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	00010004 	.word	0x00010004
 80022d0:	2000000c 	.word	0x2000000c
 80022d4:	14f8b589 	.word	0x14f8b589

080022d8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022e6:	b2db      	uxtb	r3, r3
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr

080022f2 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr

08002308 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af02      	add	r7, sp, #8
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	607a      	str	r2, [r7, #4]
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	460b      	mov	r3, r1
 8002316:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800231c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2b08      	cmp	r3, #8
 8002322:	d006      	beq.n	8002332 <I2C_MasterRequestWrite+0x2a>
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d003      	beq.n	8002332 <I2C_MasterRequestWrite+0x2a>
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002330:	d108      	bne.n	8002344 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	e00b      	b.n	800235c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002348:	2b12      	cmp	r3, #18
 800234a:	d107      	bne.n	800235c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800235a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f000 f91d 	bl	80025a8 <I2C_WaitOnFlagUntilTimeout>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00d      	beq.n	8002390 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800237e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002382:	d103      	bne.n	800238c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800238a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e035      	b.n	80023fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002398:	d108      	bne.n	80023ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800239a:	897b      	ldrh	r3, [r7, #10]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80023a8:	611a      	str	r2, [r3, #16]
 80023aa:	e01b      	b.n	80023e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80023ac:	897b      	ldrh	r3, [r7, #10]
 80023ae:	11db      	asrs	r3, r3, #7
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	f003 0306 	and.w	r3, r3, #6
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	f063 030f 	orn	r3, r3, #15
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	490e      	ldr	r1, [pc, #56]	@ (8002404 <I2C_MasterRequestWrite+0xfc>)
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 f966 	bl	800269c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e010      	b.n	80023fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023da:	897b      	ldrh	r3, [r7, #10]
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	4907      	ldr	r1, [pc, #28]	@ (8002408 <I2C_MasterRequestWrite+0x100>)
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 f956 	bl	800269c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	00010008 	.word	0x00010008
 8002408:	00010002 	.word	0x00010002

0800240c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af02      	add	r7, sp, #8
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	460b      	mov	r3, r1
 800241a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002420:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002430:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	2b08      	cmp	r3, #8
 8002436:	d006      	beq.n	8002446 <I2C_MasterRequestRead+0x3a>
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d003      	beq.n	8002446 <I2C_MasterRequestRead+0x3a>
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002444:	d108      	bne.n	8002458 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	e00b      	b.n	8002470 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245c:	2b11      	cmp	r3, #17
 800245e:	d107      	bne.n	8002470 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800246e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 f893 	bl	80025a8 <I2C_WaitOnFlagUntilTimeout>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00d      	beq.n	80024a4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002492:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002496:	d103      	bne.n	80024a0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800249e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e079      	b.n	8002598 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80024ac:	d108      	bne.n	80024c0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80024ae:	897b      	ldrh	r3, [r7, #10]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	611a      	str	r2, [r3, #16]
 80024be:	e05f      	b.n	8002580 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024c0:	897b      	ldrh	r3, [r7, #10]
 80024c2:	11db      	asrs	r3, r3, #7
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	f003 0306 	and.w	r3, r3, #6
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	f063 030f 	orn	r3, r3, #15
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	4930      	ldr	r1, [pc, #192]	@ (80025a0 <I2C_MasterRequestRead+0x194>)
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 f8dc 	bl	800269c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e054      	b.n	8002598 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024ee:	897b      	ldrh	r3, [r7, #10]
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	4929      	ldr	r1, [pc, #164]	@ (80025a4 <I2C_MasterRequestRead+0x198>)
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 f8cc 	bl	800269c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e044      	b.n	8002598 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800250e:	2300      	movs	r3, #0
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	613b      	str	r3, [r7, #16]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002532:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 f831 	bl	80025a8 <I2C_WaitOnFlagUntilTimeout>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00d      	beq.n	8002568 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002556:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800255a:	d103      	bne.n	8002564 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002562:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e017      	b.n	8002598 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002568:	897b      	ldrh	r3, [r7, #10]
 800256a:	11db      	asrs	r3, r3, #7
 800256c:	b2db      	uxtb	r3, r3
 800256e:	f003 0306 	and.w	r3, r3, #6
 8002572:	b2db      	uxtb	r3, r3
 8002574:	f063 030e 	orn	r3, r3, #14
 8002578:	b2da      	uxtb	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	4907      	ldr	r1, [pc, #28]	@ (80025a4 <I2C_MasterRequestRead+0x198>)
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 f888 	bl	800269c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	00010008 	.word	0x00010008
 80025a4:	00010002 	.word	0x00010002

080025a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	4613      	mov	r3, r2
 80025b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025b8:	e048      	b.n	800264c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025c0:	d044      	beq.n	800264c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025c2:	f7fe ff45 	bl	8001450 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d302      	bcc.n	80025d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d139      	bne.n	800264c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	0c1b      	lsrs	r3, r3, #16
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d10d      	bne.n	80025fe <I2C_WaitOnFlagUntilTimeout+0x56>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	43da      	mvns	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	4013      	ands	r3, r2
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	bf0c      	ite	eq
 80025f4:	2301      	moveq	r3, #1
 80025f6:	2300      	movne	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	e00c      	b.n	8002618 <I2C_WaitOnFlagUntilTimeout+0x70>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	43da      	mvns	r2, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	4013      	ands	r3, r2
 800260a:	b29b      	uxth	r3, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	bf0c      	ite	eq
 8002610:	2301      	moveq	r3, #1
 8002612:	2300      	movne	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	461a      	mov	r2, r3
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	429a      	cmp	r2, r3
 800261c:	d116      	bne.n	800264c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002638:	f043 0220 	orr.w	r2, r3, #32
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e023      	b.n	8002694 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	0c1b      	lsrs	r3, r3, #16
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b01      	cmp	r3, #1
 8002654:	d10d      	bne.n	8002672 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	43da      	mvns	r2, r3
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	4013      	ands	r3, r2
 8002662:	b29b      	uxth	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	bf0c      	ite	eq
 8002668:	2301      	moveq	r3, #1
 800266a:	2300      	movne	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	461a      	mov	r2, r3
 8002670:	e00c      	b.n	800268c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	43da      	mvns	r2, r3
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	4013      	ands	r3, r2
 800267e:	b29b      	uxth	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	bf0c      	ite	eq
 8002684:	2301      	moveq	r3, #1
 8002686:	2300      	movne	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	429a      	cmp	r2, r3
 8002690:	d093      	beq.n	80025ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
 80026a8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026aa:	e071      	b.n	8002790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026ba:	d123      	bne.n	8002704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026ca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80026d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f0:	f043 0204 	orr.w	r2, r3, #4
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e067      	b.n	80027d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800270a:	d041      	beq.n	8002790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800270c:	f7fe fea0 	bl	8001450 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	429a      	cmp	r2, r3
 800271a:	d302      	bcc.n	8002722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d136      	bne.n	8002790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	0c1b      	lsrs	r3, r3, #16
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b01      	cmp	r3, #1
 800272a:	d10c      	bne.n	8002746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	43da      	mvns	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	4013      	ands	r3, r2
 8002738:	b29b      	uxth	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	bf14      	ite	ne
 800273e:	2301      	movne	r3, #1
 8002740:	2300      	moveq	r3, #0
 8002742:	b2db      	uxtb	r3, r3
 8002744:	e00b      	b.n	800275e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	43da      	mvns	r2, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	4013      	ands	r3, r2
 8002752:	b29b      	uxth	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	bf14      	ite	ne
 8002758:	2301      	movne	r3, #1
 800275a:	2300      	moveq	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d016      	beq.n	8002790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277c:	f043 0220 	orr.w	r2, r3, #32
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e021      	b.n	80027d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	0c1b      	lsrs	r3, r3, #16
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b01      	cmp	r3, #1
 8002798:	d10c      	bne.n	80027b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	43da      	mvns	r2, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	4013      	ands	r3, r2
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	bf14      	ite	ne
 80027ac:	2301      	movne	r3, #1
 80027ae:	2300      	moveq	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	e00b      	b.n	80027cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	43da      	mvns	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4013      	ands	r3, r2
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	bf14      	ite	ne
 80027c6:	2301      	movne	r3, #1
 80027c8:	2300      	moveq	r3, #0
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f47f af6d 	bne.w	80026ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027e8:	e034      	b.n	8002854 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 f8e3 	bl	80029b6 <I2C_IsAcknowledgeFailed>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e034      	b.n	8002864 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002800:	d028      	beq.n	8002854 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002802:	f7fe fe25 	bl	8001450 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	429a      	cmp	r2, r3
 8002810:	d302      	bcc.n	8002818 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d11d      	bne.n	8002854 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002822:	2b80      	cmp	r3, #128	@ 0x80
 8002824:	d016      	beq.n	8002854 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002840:	f043 0220 	orr.w	r2, r3, #32
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e007      	b.n	8002864 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800285e:	2b80      	cmp	r3, #128	@ 0x80
 8002860:	d1c3      	bne.n	80027ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002878:	e034      	b.n	80028e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 f89b 	bl	80029b6 <I2C_IsAcknowledgeFailed>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e034      	b.n	80028f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002890:	d028      	beq.n	80028e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002892:	f7fe fddd 	bl	8001450 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d302      	bcc.n	80028a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d11d      	bne.n	80028e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d016      	beq.n	80028e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d0:	f043 0220 	orr.w	r2, r3, #32
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e007      	b.n	80028f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d1c3      	bne.n	800287a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002908:	e049      	b.n	800299e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	f003 0310 	and.w	r3, r3, #16
 8002914:	2b10      	cmp	r3, #16
 8002916:	d119      	bne.n	800294c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f06f 0210 	mvn.w	r2, #16
 8002920:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2220      	movs	r2, #32
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e030      	b.n	80029ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294c:	f7fe fd80 	bl	8001450 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	429a      	cmp	r2, r3
 800295a:	d302      	bcc.n	8002962 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d11d      	bne.n	800299e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800296c:	2b40      	cmp	r3, #64	@ 0x40
 800296e:	d016      	beq.n	800299e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2220      	movs	r2, #32
 800297a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	f043 0220 	orr.w	r2, r3, #32
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e007      	b.n	80029ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029a8:	2b40      	cmp	r3, #64	@ 0x40
 80029aa:	d1ae      	bne.n	800290a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029cc:	d11b      	bne.n	8002a06 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80029d6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2220      	movs	r2, #32
 80029e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	f043 0204 	orr.w	r2, r3, #4
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e000      	b.n	8002a08 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr
	...

08002a14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e272      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 8087 	beq.w	8002b42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a34:	4b92      	ldr	r3, [pc, #584]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 030c 	and.w	r3, r3, #12
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	d00c      	beq.n	8002a5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a40:	4b8f      	ldr	r3, [pc, #572]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 030c 	and.w	r3, r3, #12
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d112      	bne.n	8002a72 <HAL_RCC_OscConfig+0x5e>
 8002a4c:	4b8c      	ldr	r3, [pc, #560]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a58:	d10b      	bne.n	8002a72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5a:	4b89      	ldr	r3, [pc, #548]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d06c      	beq.n	8002b40 <HAL_RCC_OscConfig+0x12c>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d168      	bne.n	8002b40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e24c      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a7a:	d106      	bne.n	8002a8a <HAL_RCC_OscConfig+0x76>
 8002a7c:	4b80      	ldr	r3, [pc, #512]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a7f      	ldr	r2, [pc, #508]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002a82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	e02e      	b.n	8002ae8 <HAL_RCC_OscConfig+0xd4>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10c      	bne.n	8002aac <HAL_RCC_OscConfig+0x98>
 8002a92:	4b7b      	ldr	r3, [pc, #492]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a7a      	ldr	r2, [pc, #488]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002a98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	4b78      	ldr	r3, [pc, #480]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a77      	ldr	r2, [pc, #476]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	e01d      	b.n	8002ae8 <HAL_RCC_OscConfig+0xd4>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0xbc>
 8002ab6:	4b72      	ldr	r3, [pc, #456]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a71      	ldr	r2, [pc, #452]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	4b6f      	ldr	r3, [pc, #444]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a6e      	ldr	r2, [pc, #440]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	e00b      	b.n	8002ae8 <HAL_RCC_OscConfig+0xd4>
 8002ad0:	4b6b      	ldr	r3, [pc, #428]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a6a      	ldr	r2, [pc, #424]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002ad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	4b68      	ldr	r3, [pc, #416]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a67      	ldr	r2, [pc, #412]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002ae2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ae6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d013      	beq.n	8002b18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7fe fcae 	bl	8001450 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af8:	f7fe fcaa 	bl	8001450 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b64      	cmp	r3, #100	@ 0x64
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e200      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0a:	4b5d      	ldr	r3, [pc, #372]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0xe4>
 8002b16:	e014      	b.n	8002b42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b18:	f7fe fc9a 	bl	8001450 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b20:	f7fe fc96 	bl	8001450 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	@ 0x64
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e1ec      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b32:	4b53      	ldr	r3, [pc, #332]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x10c>
 8002b3e:	e000      	b.n	8002b42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d063      	beq.n	8002c16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b4e:	4b4c      	ldr	r3, [pc, #304]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00b      	beq.n	8002b72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b5a:	4b49      	ldr	r3, [pc, #292]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d11c      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x18c>
 8002b66:	4b46      	ldr	r3, [pc, #280]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d116      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b72:	4b43      	ldr	r3, [pc, #268]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d005      	beq.n	8002b8a <HAL_RCC_OscConfig+0x176>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d001      	beq.n	8002b8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e1c0      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	4939      	ldr	r1, [pc, #228]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9e:	e03a      	b.n	8002c16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d020      	beq.n	8002bea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba8:	4b36      	ldr	r3, [pc, #216]	@ (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bae:	f7fe fc4f 	bl	8001450 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb6:	f7fe fc4b 	bl	8001450 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e1a1      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc8:	4b2d      	ldr	r3, [pc, #180]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd4:	4b2a      	ldr	r3, [pc, #168]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4927      	ldr	r1, [pc, #156]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	600b      	str	r3, [r1, #0]
 8002be8:	e015      	b.n	8002c16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bea:	4b26      	ldr	r3, [pc, #152]	@ (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf0:	f7fe fc2e 	bl	8001450 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf8:	f7fe fc2a 	bl	8001450 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e180      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0a:	4b1d      	ldr	r3, [pc, #116]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d03a      	beq.n	8002c98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d019      	beq.n	8002c5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c2a:	4b17      	ldr	r3, [pc, #92]	@ (8002c88 <HAL_RCC_OscConfig+0x274>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c30:	f7fe fc0e 	bl	8001450 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c38:	f7fe fc0a 	bl	8001450 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e160      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c56:	2001      	movs	r0, #1
 8002c58:	f000 faba 	bl	80031d0 <RCC_Delay>
 8002c5c:	e01c      	b.n	8002c98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c88 <HAL_RCC_OscConfig+0x274>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c64:	f7fe fbf4 	bl	8001450 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c6a:	e00f      	b.n	8002c8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c6c:	f7fe fbf0 	bl	8001450 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d908      	bls.n	8002c8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e146      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
 8002c7e:	bf00      	nop
 8002c80:	40021000 	.word	0x40021000
 8002c84:	42420000 	.word	0x42420000
 8002c88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c8c:	4b92      	ldr	r3, [pc, #584]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1e9      	bne.n	8002c6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 80a6 	beq.w	8002df2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002caa:	4b8b      	ldr	r3, [pc, #556]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10d      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb6:	4b88      	ldr	r3, [pc, #544]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	4a87      	ldr	r2, [pc, #540]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002cbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cc0:	61d3      	str	r3, [r2, #28]
 8002cc2:	4b85      	ldr	r3, [pc, #532]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cca:	60bb      	str	r3, [r7, #8]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd2:	4b82      	ldr	r3, [pc, #520]	@ (8002edc <HAL_RCC_OscConfig+0x4c8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d118      	bne.n	8002d10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cde:	4b7f      	ldr	r3, [pc, #508]	@ (8002edc <HAL_RCC_OscConfig+0x4c8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a7e      	ldr	r2, [pc, #504]	@ (8002edc <HAL_RCC_OscConfig+0x4c8>)
 8002ce4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ce8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cea:	f7fe fbb1 	bl	8001450 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf2:	f7fe fbad 	bl	8001450 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b64      	cmp	r3, #100	@ 0x64
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e103      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d04:	4b75      	ldr	r3, [pc, #468]	@ (8002edc <HAL_RCC_OscConfig+0x4c8>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0f0      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d106      	bne.n	8002d26 <HAL_RCC_OscConfig+0x312>
 8002d18:	4b6f      	ldr	r3, [pc, #444]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	4a6e      	ldr	r2, [pc, #440]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	6213      	str	r3, [r2, #32]
 8002d24:	e02d      	b.n	8002d82 <HAL_RCC_OscConfig+0x36e>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10c      	bne.n	8002d48 <HAL_RCC_OscConfig+0x334>
 8002d2e:	4b6a      	ldr	r3, [pc, #424]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	4a69      	ldr	r2, [pc, #420]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d34:	f023 0301 	bic.w	r3, r3, #1
 8002d38:	6213      	str	r3, [r2, #32]
 8002d3a:	4b67      	ldr	r3, [pc, #412]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	4a66      	ldr	r2, [pc, #408]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d40:	f023 0304 	bic.w	r3, r3, #4
 8002d44:	6213      	str	r3, [r2, #32]
 8002d46:	e01c      	b.n	8002d82 <HAL_RCC_OscConfig+0x36e>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	2b05      	cmp	r3, #5
 8002d4e:	d10c      	bne.n	8002d6a <HAL_RCC_OscConfig+0x356>
 8002d50:	4b61      	ldr	r3, [pc, #388]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	4a60      	ldr	r2, [pc, #384]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d56:	f043 0304 	orr.w	r3, r3, #4
 8002d5a:	6213      	str	r3, [r2, #32]
 8002d5c:	4b5e      	ldr	r3, [pc, #376]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	4a5d      	ldr	r2, [pc, #372]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d62:	f043 0301 	orr.w	r3, r3, #1
 8002d66:	6213      	str	r3, [r2, #32]
 8002d68:	e00b      	b.n	8002d82 <HAL_RCC_OscConfig+0x36e>
 8002d6a:	4b5b      	ldr	r3, [pc, #364]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	4a5a      	ldr	r2, [pc, #360]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d70:	f023 0301 	bic.w	r3, r3, #1
 8002d74:	6213      	str	r3, [r2, #32]
 8002d76:	4b58      	ldr	r3, [pc, #352]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	4a57      	ldr	r2, [pc, #348]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d7c:	f023 0304 	bic.w	r3, r3, #4
 8002d80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d015      	beq.n	8002db6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8a:	f7fe fb61 	bl	8001450 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d90:	e00a      	b.n	8002da8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d92:	f7fe fb5d 	bl	8001450 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e0b1      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da8:	4b4b      	ldr	r3, [pc, #300]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0ee      	beq.n	8002d92 <HAL_RCC_OscConfig+0x37e>
 8002db4:	e014      	b.n	8002de0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db6:	f7fe fb4b 	bl	8001450 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dbc:	e00a      	b.n	8002dd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dbe:	f7fe fb47 	bl	8001450 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e09b      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd4:	4b40      	ldr	r3, [pc, #256]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1ee      	bne.n	8002dbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002de0:	7dfb      	ldrb	r3, [r7, #23]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d105      	bne.n	8002df2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de6:	4b3c      	ldr	r3, [pc, #240]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	4a3b      	ldr	r2, [pc, #236]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002dec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002df0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 8087 	beq.w	8002f0a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dfc:	4b36      	ldr	r3, [pc, #216]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 030c 	and.w	r3, r3, #12
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d061      	beq.n	8002ecc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d146      	bne.n	8002e9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e10:	4b33      	ldr	r3, [pc, #204]	@ (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e16:	f7fe fb1b 	bl	8001450 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1e:	f7fe fb17 	bl	8001450 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e06d      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e30:	4b29      	ldr	r3, [pc, #164]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1f0      	bne.n	8002e1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e44:	d108      	bne.n	8002e58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e46:	4b24      	ldr	r3, [pc, #144]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	4921      	ldr	r1, [pc, #132]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e58:	4b1f      	ldr	r3, [pc, #124]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a19      	ldr	r1, [r3, #32]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e68:	430b      	orrs	r3, r1
 8002e6a:	491b      	ldr	r1, [pc, #108]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e70:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e76:	f7fe faeb 	bl	8001450 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7e:	f7fe fae7 	bl	8001450 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e03d      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e90:	4b11      	ldr	r3, [pc, #68]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCC_OscConfig+0x46a>
 8002e9c:	e035      	b.n	8002f0a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea4:	f7fe fad4 	bl	8001450 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eac:	f7fe fad0 	bl	8001450 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e026      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ebe:	4b06      	ldr	r3, [pc, #24]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x498>
 8002eca:	e01e      	b.n	8002f0a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d107      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e019      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	40007000 	.word	0x40007000
 8002ee0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f14 <HAL_RCC_OscConfig+0x500>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d106      	bne.n	8002f06 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d001      	beq.n	8002f0a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40021000 	.word	0x40021000

08002f18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e0d0      	b.n	80030ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f2c:	4b6a      	ldr	r3, [pc, #424]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d910      	bls.n	8002f5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3a:	4b67      	ldr	r3, [pc, #412]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f023 0207 	bic.w	r2, r3, #7
 8002f42:	4965      	ldr	r1, [pc, #404]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4a:	4b63      	ldr	r3, [pc, #396]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d001      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e0b8      	b.n	80030ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d020      	beq.n	8002faa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d005      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f74:	4b59      	ldr	r3, [pc, #356]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	4a58      	ldr	r2, [pc, #352]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002f7a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0308 	and.w	r3, r3, #8
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d005      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f8c:	4b53      	ldr	r3, [pc, #332]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	4a52      	ldr	r2, [pc, #328]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002f92:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002f96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f98:	4b50      	ldr	r3, [pc, #320]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	494d      	ldr	r1, [pc, #308]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d040      	beq.n	8003038 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d107      	bne.n	8002fce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fbe:	4b47      	ldr	r3, [pc, #284]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d115      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e07f      	b.n	80030ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d107      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd6:	4b41      	ldr	r3, [pc, #260]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d109      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e073      	b.n	80030ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe6:	4b3d      	ldr	r3, [pc, #244]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e06b      	b.n	80030ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ff6:	4b39      	ldr	r3, [pc, #228]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f023 0203 	bic.w	r2, r3, #3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	4936      	ldr	r1, [pc, #216]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8003004:	4313      	orrs	r3, r2
 8003006:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003008:	f7fe fa22 	bl	8001450 <HAL_GetTick>
 800300c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300e:	e00a      	b.n	8003026 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003010:	f7fe fa1e 	bl	8001450 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800301e:	4293      	cmp	r3, r2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e053      	b.n	80030ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003026:	4b2d      	ldr	r3, [pc, #180]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f003 020c 	and.w	r2, r3, #12
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	429a      	cmp	r2, r3
 8003036:	d1eb      	bne.n	8003010 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003038:	4b27      	ldr	r3, [pc, #156]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d210      	bcs.n	8003068 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003046:	4b24      	ldr	r3, [pc, #144]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f023 0207 	bic.w	r2, r3, #7
 800304e:	4922      	ldr	r1, [pc, #136]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	4313      	orrs	r3, r2
 8003054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003056:	4b20      	ldr	r3, [pc, #128]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	429a      	cmp	r2, r3
 8003062:	d001      	beq.n	8003068 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e032      	b.n	80030ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d008      	beq.n	8003086 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003074:	4b19      	ldr	r3, [pc, #100]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	4916      	ldr	r1, [pc, #88]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8003082:	4313      	orrs	r3, r2
 8003084:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d009      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003092:	4b12      	ldr	r3, [pc, #72]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	490e      	ldr	r1, [pc, #56]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030a6:	f000 f821 	bl	80030ec <HAL_RCC_GetSysClockFreq>
 80030aa:	4602      	mov	r2, r0
 80030ac:	4b0b      	ldr	r3, [pc, #44]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	091b      	lsrs	r3, r3, #4
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	490a      	ldr	r1, [pc, #40]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 80030b8:	5ccb      	ldrb	r3, [r1, r3]
 80030ba:	fa22 f303 	lsr.w	r3, r2, r3
 80030be:	4a09      	ldr	r2, [pc, #36]	@ (80030e4 <HAL_RCC_ClockConfig+0x1cc>)
 80030c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030c2:	4b09      	ldr	r3, [pc, #36]	@ (80030e8 <HAL_RCC_ClockConfig+0x1d0>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fe f980 	bl	80013cc <HAL_InitTick>

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40022000 	.word	0x40022000
 80030dc:	40021000 	.word	0x40021000
 80030e0:	08004390 	.word	0x08004390
 80030e4:	2000000c 	.word	0x2000000c
 80030e8:	20000010 	.word	0x20000010

080030ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	2300      	movs	r3, #0
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	2300      	movs	r3, #0
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	2300      	movs	r3, #0
 8003100:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003106:	4b1e      	ldr	r3, [pc, #120]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x94>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	2b04      	cmp	r3, #4
 8003114:	d002      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0x30>
 8003116:	2b08      	cmp	r3, #8
 8003118:	d003      	beq.n	8003122 <HAL_RCC_GetSysClockFreq+0x36>
 800311a:	e027      	b.n	800316c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800311c:	4b19      	ldr	r3, [pc, #100]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x98>)
 800311e:	613b      	str	r3, [r7, #16]
      break;
 8003120:	e027      	b.n	8003172 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	0c9b      	lsrs	r3, r3, #18
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	4a17      	ldr	r2, [pc, #92]	@ (8003188 <HAL_RCC_GetSysClockFreq+0x9c>)
 800312c:	5cd3      	ldrb	r3, [r2, r3]
 800312e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d010      	beq.n	800315c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800313a:	4b11      	ldr	r3, [pc, #68]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x94>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	0c5b      	lsrs	r3, r3, #17
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	4a11      	ldr	r2, [pc, #68]	@ (800318c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003146:	5cd3      	ldrb	r3, [r2, r3]
 8003148:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a0d      	ldr	r2, [pc, #52]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x98>)
 800314e:	fb03 f202 	mul.w	r2, r3, r2
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	fbb2 f3f3 	udiv	r3, r2, r3
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	e004      	b.n	8003166 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a0c      	ldr	r2, [pc, #48]	@ (8003190 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003160:	fb02 f303 	mul.w	r3, r2, r3
 8003164:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	613b      	str	r3, [r7, #16]
      break;
 800316a:	e002      	b.n	8003172 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800316c:	4b05      	ldr	r3, [pc, #20]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x98>)
 800316e:	613b      	str	r3, [r7, #16]
      break;
 8003170:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003172:	693b      	ldr	r3, [r7, #16]
}
 8003174:	4618      	mov	r0, r3
 8003176:	371c      	adds	r7, #28
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40021000 	.word	0x40021000
 8003184:	007a1200 	.word	0x007a1200
 8003188:	080043a8 	.word	0x080043a8
 800318c:	080043b8 	.word	0x080043b8
 8003190:	003d0900 	.word	0x003d0900

08003194 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003198:	4b02      	ldr	r3, [pc, #8]	@ (80031a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800319a:	681b      	ldr	r3, [r3, #0]
}
 800319c:	4618      	mov	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	bc80      	pop	{r7}
 80031a2:	4770      	bx	lr
 80031a4:	2000000c 	.word	0x2000000c

080031a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031ac:	f7ff fff2 	bl	8003194 <HAL_RCC_GetHCLKFreq>
 80031b0:	4602      	mov	r2, r0
 80031b2:	4b05      	ldr	r3, [pc, #20]	@ (80031c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	0a1b      	lsrs	r3, r3, #8
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	4903      	ldr	r1, [pc, #12]	@ (80031cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031be:	5ccb      	ldrb	r3, [r1, r3]
 80031c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40021000 	.word	0x40021000
 80031cc:	080043a0 	.word	0x080043a0

080031d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003204 <RCC_Delay+0x34>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003208 <RCC_Delay+0x38>)
 80031de:	fba2 2303 	umull	r2, r3, r2, r3
 80031e2:	0a5b      	lsrs	r3, r3, #9
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	fb02 f303 	mul.w	r3, r2, r3
 80031ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031ec:	bf00      	nop
  }
  while (Delay --);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1e5a      	subs	r2, r3, #1
 80031f2:	60fa      	str	r2, [r7, #12]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1f9      	bne.n	80031ec <RCC_Delay+0x1c>
}
 80031f8:	bf00      	nop
 80031fa:	bf00      	nop
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr
 8003204:	2000000c 	.word	0x2000000c
 8003208:	10624dd3 	.word	0x10624dd3

0800320c <std>:
 800320c:	2300      	movs	r3, #0
 800320e:	b510      	push	{r4, lr}
 8003210:	4604      	mov	r4, r0
 8003212:	e9c0 3300 	strd	r3, r3, [r0]
 8003216:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800321a:	6083      	str	r3, [r0, #8]
 800321c:	8181      	strh	r1, [r0, #12]
 800321e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003220:	81c2      	strh	r2, [r0, #14]
 8003222:	6183      	str	r3, [r0, #24]
 8003224:	4619      	mov	r1, r3
 8003226:	2208      	movs	r2, #8
 8003228:	305c      	adds	r0, #92	@ 0x5c
 800322a:	f000 f9f9 	bl	8003620 <memset>
 800322e:	4b0d      	ldr	r3, [pc, #52]	@ (8003264 <std+0x58>)
 8003230:	6224      	str	r4, [r4, #32]
 8003232:	6263      	str	r3, [r4, #36]	@ 0x24
 8003234:	4b0c      	ldr	r3, [pc, #48]	@ (8003268 <std+0x5c>)
 8003236:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003238:	4b0c      	ldr	r3, [pc, #48]	@ (800326c <std+0x60>)
 800323a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800323c:	4b0c      	ldr	r3, [pc, #48]	@ (8003270 <std+0x64>)
 800323e:	6323      	str	r3, [r4, #48]	@ 0x30
 8003240:	4b0c      	ldr	r3, [pc, #48]	@ (8003274 <std+0x68>)
 8003242:	429c      	cmp	r4, r3
 8003244:	d006      	beq.n	8003254 <std+0x48>
 8003246:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800324a:	4294      	cmp	r4, r2
 800324c:	d002      	beq.n	8003254 <std+0x48>
 800324e:	33d0      	adds	r3, #208	@ 0xd0
 8003250:	429c      	cmp	r4, r3
 8003252:	d105      	bne.n	8003260 <std+0x54>
 8003254:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800325c:	f000 ba58 	b.w	8003710 <__retarget_lock_init_recursive>
 8003260:	bd10      	pop	{r4, pc}
 8003262:	bf00      	nop
 8003264:	08003471 	.word	0x08003471
 8003268:	08003493 	.word	0x08003493
 800326c:	080034cb 	.word	0x080034cb
 8003270:	080034ef 	.word	0x080034ef
 8003274:	20000100 	.word	0x20000100

08003278 <stdio_exit_handler>:
 8003278:	4a02      	ldr	r2, [pc, #8]	@ (8003284 <stdio_exit_handler+0xc>)
 800327a:	4903      	ldr	r1, [pc, #12]	@ (8003288 <stdio_exit_handler+0x10>)
 800327c:	4803      	ldr	r0, [pc, #12]	@ (800328c <stdio_exit_handler+0x14>)
 800327e:	f000 b869 	b.w	8003354 <_fwalk_sglue>
 8003282:	bf00      	nop
 8003284:	20000018 	.word	0x20000018
 8003288:	08003fa9 	.word	0x08003fa9
 800328c:	20000028 	.word	0x20000028

08003290 <cleanup_stdio>:
 8003290:	6841      	ldr	r1, [r0, #4]
 8003292:	4b0c      	ldr	r3, [pc, #48]	@ (80032c4 <cleanup_stdio+0x34>)
 8003294:	b510      	push	{r4, lr}
 8003296:	4299      	cmp	r1, r3
 8003298:	4604      	mov	r4, r0
 800329a:	d001      	beq.n	80032a0 <cleanup_stdio+0x10>
 800329c:	f000 fe84 	bl	8003fa8 <_fflush_r>
 80032a0:	68a1      	ldr	r1, [r4, #8]
 80032a2:	4b09      	ldr	r3, [pc, #36]	@ (80032c8 <cleanup_stdio+0x38>)
 80032a4:	4299      	cmp	r1, r3
 80032a6:	d002      	beq.n	80032ae <cleanup_stdio+0x1e>
 80032a8:	4620      	mov	r0, r4
 80032aa:	f000 fe7d 	bl	8003fa8 <_fflush_r>
 80032ae:	68e1      	ldr	r1, [r4, #12]
 80032b0:	4b06      	ldr	r3, [pc, #24]	@ (80032cc <cleanup_stdio+0x3c>)
 80032b2:	4299      	cmp	r1, r3
 80032b4:	d004      	beq.n	80032c0 <cleanup_stdio+0x30>
 80032b6:	4620      	mov	r0, r4
 80032b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032bc:	f000 be74 	b.w	8003fa8 <_fflush_r>
 80032c0:	bd10      	pop	{r4, pc}
 80032c2:	bf00      	nop
 80032c4:	20000100 	.word	0x20000100
 80032c8:	20000168 	.word	0x20000168
 80032cc:	200001d0 	.word	0x200001d0

080032d0 <global_stdio_init.part.0>:
 80032d0:	b510      	push	{r4, lr}
 80032d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003300 <global_stdio_init.part.0+0x30>)
 80032d4:	4c0b      	ldr	r4, [pc, #44]	@ (8003304 <global_stdio_init.part.0+0x34>)
 80032d6:	4a0c      	ldr	r2, [pc, #48]	@ (8003308 <global_stdio_init.part.0+0x38>)
 80032d8:	4620      	mov	r0, r4
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	2104      	movs	r1, #4
 80032de:	2200      	movs	r2, #0
 80032e0:	f7ff ff94 	bl	800320c <std>
 80032e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80032e8:	2201      	movs	r2, #1
 80032ea:	2109      	movs	r1, #9
 80032ec:	f7ff ff8e 	bl	800320c <std>
 80032f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80032f4:	2202      	movs	r2, #2
 80032f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032fa:	2112      	movs	r1, #18
 80032fc:	f7ff bf86 	b.w	800320c <std>
 8003300:	20000238 	.word	0x20000238
 8003304:	20000100 	.word	0x20000100
 8003308:	08003279 	.word	0x08003279

0800330c <__sfp_lock_acquire>:
 800330c:	4801      	ldr	r0, [pc, #4]	@ (8003314 <__sfp_lock_acquire+0x8>)
 800330e:	f000 ba00 	b.w	8003712 <__retarget_lock_acquire_recursive>
 8003312:	bf00      	nop
 8003314:	20000241 	.word	0x20000241

08003318 <__sfp_lock_release>:
 8003318:	4801      	ldr	r0, [pc, #4]	@ (8003320 <__sfp_lock_release+0x8>)
 800331a:	f000 b9fb 	b.w	8003714 <__retarget_lock_release_recursive>
 800331e:	bf00      	nop
 8003320:	20000241 	.word	0x20000241

08003324 <__sinit>:
 8003324:	b510      	push	{r4, lr}
 8003326:	4604      	mov	r4, r0
 8003328:	f7ff fff0 	bl	800330c <__sfp_lock_acquire>
 800332c:	6a23      	ldr	r3, [r4, #32]
 800332e:	b11b      	cbz	r3, 8003338 <__sinit+0x14>
 8003330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003334:	f7ff bff0 	b.w	8003318 <__sfp_lock_release>
 8003338:	4b04      	ldr	r3, [pc, #16]	@ (800334c <__sinit+0x28>)
 800333a:	6223      	str	r3, [r4, #32]
 800333c:	4b04      	ldr	r3, [pc, #16]	@ (8003350 <__sinit+0x2c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1f5      	bne.n	8003330 <__sinit+0xc>
 8003344:	f7ff ffc4 	bl	80032d0 <global_stdio_init.part.0>
 8003348:	e7f2      	b.n	8003330 <__sinit+0xc>
 800334a:	bf00      	nop
 800334c:	08003291 	.word	0x08003291
 8003350:	20000238 	.word	0x20000238

08003354 <_fwalk_sglue>:
 8003354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003358:	4607      	mov	r7, r0
 800335a:	4688      	mov	r8, r1
 800335c:	4614      	mov	r4, r2
 800335e:	2600      	movs	r6, #0
 8003360:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003364:	f1b9 0901 	subs.w	r9, r9, #1
 8003368:	d505      	bpl.n	8003376 <_fwalk_sglue+0x22>
 800336a:	6824      	ldr	r4, [r4, #0]
 800336c:	2c00      	cmp	r4, #0
 800336e:	d1f7      	bne.n	8003360 <_fwalk_sglue+0xc>
 8003370:	4630      	mov	r0, r6
 8003372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003376:	89ab      	ldrh	r3, [r5, #12]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d907      	bls.n	800338c <_fwalk_sglue+0x38>
 800337c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003380:	3301      	adds	r3, #1
 8003382:	d003      	beq.n	800338c <_fwalk_sglue+0x38>
 8003384:	4629      	mov	r1, r5
 8003386:	4638      	mov	r0, r7
 8003388:	47c0      	blx	r8
 800338a:	4306      	orrs	r6, r0
 800338c:	3568      	adds	r5, #104	@ 0x68
 800338e:	e7e9      	b.n	8003364 <_fwalk_sglue+0x10>

08003390 <iprintf>:
 8003390:	b40f      	push	{r0, r1, r2, r3}
 8003392:	b507      	push	{r0, r1, r2, lr}
 8003394:	4906      	ldr	r1, [pc, #24]	@ (80033b0 <iprintf+0x20>)
 8003396:	ab04      	add	r3, sp, #16
 8003398:	6808      	ldr	r0, [r1, #0]
 800339a:	f853 2b04 	ldr.w	r2, [r3], #4
 800339e:	6881      	ldr	r1, [r0, #8]
 80033a0:	9301      	str	r3, [sp, #4]
 80033a2:	f000 fad7 	bl	8003954 <_vfiprintf_r>
 80033a6:	b003      	add	sp, #12
 80033a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80033ac:	b004      	add	sp, #16
 80033ae:	4770      	bx	lr
 80033b0:	20000024 	.word	0x20000024

080033b4 <_puts_r>:
 80033b4:	6a03      	ldr	r3, [r0, #32]
 80033b6:	b570      	push	{r4, r5, r6, lr}
 80033b8:	4605      	mov	r5, r0
 80033ba:	460e      	mov	r6, r1
 80033bc:	6884      	ldr	r4, [r0, #8]
 80033be:	b90b      	cbnz	r3, 80033c4 <_puts_r+0x10>
 80033c0:	f7ff ffb0 	bl	8003324 <__sinit>
 80033c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80033c6:	07db      	lsls	r3, r3, #31
 80033c8:	d405      	bmi.n	80033d6 <_puts_r+0x22>
 80033ca:	89a3      	ldrh	r3, [r4, #12]
 80033cc:	0598      	lsls	r0, r3, #22
 80033ce:	d402      	bmi.n	80033d6 <_puts_r+0x22>
 80033d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80033d2:	f000 f99e 	bl	8003712 <__retarget_lock_acquire_recursive>
 80033d6:	89a3      	ldrh	r3, [r4, #12]
 80033d8:	0719      	lsls	r1, r3, #28
 80033da:	d502      	bpl.n	80033e2 <_puts_r+0x2e>
 80033dc:	6923      	ldr	r3, [r4, #16]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d135      	bne.n	800344e <_puts_r+0x9a>
 80033e2:	4621      	mov	r1, r4
 80033e4:	4628      	mov	r0, r5
 80033e6:	f000 f8c5 	bl	8003574 <__swsetup_r>
 80033ea:	b380      	cbz	r0, 800344e <_puts_r+0x9a>
 80033ec:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80033f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80033f2:	07da      	lsls	r2, r3, #31
 80033f4:	d405      	bmi.n	8003402 <_puts_r+0x4e>
 80033f6:	89a3      	ldrh	r3, [r4, #12]
 80033f8:	059b      	lsls	r3, r3, #22
 80033fa:	d402      	bmi.n	8003402 <_puts_r+0x4e>
 80033fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80033fe:	f000 f989 	bl	8003714 <__retarget_lock_release_recursive>
 8003402:	4628      	mov	r0, r5
 8003404:	bd70      	pop	{r4, r5, r6, pc}
 8003406:	2b00      	cmp	r3, #0
 8003408:	da04      	bge.n	8003414 <_puts_r+0x60>
 800340a:	69a2      	ldr	r2, [r4, #24]
 800340c:	429a      	cmp	r2, r3
 800340e:	dc17      	bgt.n	8003440 <_puts_r+0x8c>
 8003410:	290a      	cmp	r1, #10
 8003412:	d015      	beq.n	8003440 <_puts_r+0x8c>
 8003414:	6823      	ldr	r3, [r4, #0]
 8003416:	1c5a      	adds	r2, r3, #1
 8003418:	6022      	str	r2, [r4, #0]
 800341a:	7019      	strb	r1, [r3, #0]
 800341c:	68a3      	ldr	r3, [r4, #8]
 800341e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003422:	3b01      	subs	r3, #1
 8003424:	60a3      	str	r3, [r4, #8]
 8003426:	2900      	cmp	r1, #0
 8003428:	d1ed      	bne.n	8003406 <_puts_r+0x52>
 800342a:	2b00      	cmp	r3, #0
 800342c:	da11      	bge.n	8003452 <_puts_r+0x9e>
 800342e:	4622      	mov	r2, r4
 8003430:	210a      	movs	r1, #10
 8003432:	4628      	mov	r0, r5
 8003434:	f000 f85f 	bl	80034f6 <__swbuf_r>
 8003438:	3001      	adds	r0, #1
 800343a:	d0d7      	beq.n	80033ec <_puts_r+0x38>
 800343c:	250a      	movs	r5, #10
 800343e:	e7d7      	b.n	80033f0 <_puts_r+0x3c>
 8003440:	4622      	mov	r2, r4
 8003442:	4628      	mov	r0, r5
 8003444:	f000 f857 	bl	80034f6 <__swbuf_r>
 8003448:	3001      	adds	r0, #1
 800344a:	d1e7      	bne.n	800341c <_puts_r+0x68>
 800344c:	e7ce      	b.n	80033ec <_puts_r+0x38>
 800344e:	3e01      	subs	r6, #1
 8003450:	e7e4      	b.n	800341c <_puts_r+0x68>
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	1c5a      	adds	r2, r3, #1
 8003456:	6022      	str	r2, [r4, #0]
 8003458:	220a      	movs	r2, #10
 800345a:	701a      	strb	r2, [r3, #0]
 800345c:	e7ee      	b.n	800343c <_puts_r+0x88>
	...

08003460 <puts>:
 8003460:	4b02      	ldr	r3, [pc, #8]	@ (800346c <puts+0xc>)
 8003462:	4601      	mov	r1, r0
 8003464:	6818      	ldr	r0, [r3, #0]
 8003466:	f7ff bfa5 	b.w	80033b4 <_puts_r>
 800346a:	bf00      	nop
 800346c:	20000024 	.word	0x20000024

08003470 <__sread>:
 8003470:	b510      	push	{r4, lr}
 8003472:	460c      	mov	r4, r1
 8003474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003478:	f000 f8fc 	bl	8003674 <_read_r>
 800347c:	2800      	cmp	r0, #0
 800347e:	bfab      	itete	ge
 8003480:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003482:	89a3      	ldrhlt	r3, [r4, #12]
 8003484:	181b      	addge	r3, r3, r0
 8003486:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800348a:	bfac      	ite	ge
 800348c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800348e:	81a3      	strhlt	r3, [r4, #12]
 8003490:	bd10      	pop	{r4, pc}

08003492 <__swrite>:
 8003492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003496:	461f      	mov	r7, r3
 8003498:	898b      	ldrh	r3, [r1, #12]
 800349a:	4605      	mov	r5, r0
 800349c:	05db      	lsls	r3, r3, #23
 800349e:	460c      	mov	r4, r1
 80034a0:	4616      	mov	r6, r2
 80034a2:	d505      	bpl.n	80034b0 <__swrite+0x1e>
 80034a4:	2302      	movs	r3, #2
 80034a6:	2200      	movs	r2, #0
 80034a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034ac:	f000 f8d0 	bl	8003650 <_lseek_r>
 80034b0:	89a3      	ldrh	r3, [r4, #12]
 80034b2:	4632      	mov	r2, r6
 80034b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80034b8:	81a3      	strh	r3, [r4, #12]
 80034ba:	4628      	mov	r0, r5
 80034bc:	463b      	mov	r3, r7
 80034be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034c6:	f000 b8e7 	b.w	8003698 <_write_r>

080034ca <__sseek>:
 80034ca:	b510      	push	{r4, lr}
 80034cc:	460c      	mov	r4, r1
 80034ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034d2:	f000 f8bd 	bl	8003650 <_lseek_r>
 80034d6:	1c43      	adds	r3, r0, #1
 80034d8:	89a3      	ldrh	r3, [r4, #12]
 80034da:	bf15      	itete	ne
 80034dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80034de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80034e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80034e6:	81a3      	strheq	r3, [r4, #12]
 80034e8:	bf18      	it	ne
 80034ea:	81a3      	strhne	r3, [r4, #12]
 80034ec:	bd10      	pop	{r4, pc}

080034ee <__sclose>:
 80034ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034f2:	f000 b89d 	b.w	8003630 <_close_r>

080034f6 <__swbuf_r>:
 80034f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034f8:	460e      	mov	r6, r1
 80034fa:	4614      	mov	r4, r2
 80034fc:	4605      	mov	r5, r0
 80034fe:	b118      	cbz	r0, 8003508 <__swbuf_r+0x12>
 8003500:	6a03      	ldr	r3, [r0, #32]
 8003502:	b90b      	cbnz	r3, 8003508 <__swbuf_r+0x12>
 8003504:	f7ff ff0e 	bl	8003324 <__sinit>
 8003508:	69a3      	ldr	r3, [r4, #24]
 800350a:	60a3      	str	r3, [r4, #8]
 800350c:	89a3      	ldrh	r3, [r4, #12]
 800350e:	071a      	lsls	r2, r3, #28
 8003510:	d501      	bpl.n	8003516 <__swbuf_r+0x20>
 8003512:	6923      	ldr	r3, [r4, #16]
 8003514:	b943      	cbnz	r3, 8003528 <__swbuf_r+0x32>
 8003516:	4621      	mov	r1, r4
 8003518:	4628      	mov	r0, r5
 800351a:	f000 f82b 	bl	8003574 <__swsetup_r>
 800351e:	b118      	cbz	r0, 8003528 <__swbuf_r+0x32>
 8003520:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003524:	4638      	mov	r0, r7
 8003526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003528:	6823      	ldr	r3, [r4, #0]
 800352a:	6922      	ldr	r2, [r4, #16]
 800352c:	b2f6      	uxtb	r6, r6
 800352e:	1a98      	subs	r0, r3, r2
 8003530:	6963      	ldr	r3, [r4, #20]
 8003532:	4637      	mov	r7, r6
 8003534:	4283      	cmp	r3, r0
 8003536:	dc05      	bgt.n	8003544 <__swbuf_r+0x4e>
 8003538:	4621      	mov	r1, r4
 800353a:	4628      	mov	r0, r5
 800353c:	f000 fd34 	bl	8003fa8 <_fflush_r>
 8003540:	2800      	cmp	r0, #0
 8003542:	d1ed      	bne.n	8003520 <__swbuf_r+0x2a>
 8003544:	68a3      	ldr	r3, [r4, #8]
 8003546:	3b01      	subs	r3, #1
 8003548:	60a3      	str	r3, [r4, #8]
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	1c5a      	adds	r2, r3, #1
 800354e:	6022      	str	r2, [r4, #0]
 8003550:	701e      	strb	r6, [r3, #0]
 8003552:	6962      	ldr	r2, [r4, #20]
 8003554:	1c43      	adds	r3, r0, #1
 8003556:	429a      	cmp	r2, r3
 8003558:	d004      	beq.n	8003564 <__swbuf_r+0x6e>
 800355a:	89a3      	ldrh	r3, [r4, #12]
 800355c:	07db      	lsls	r3, r3, #31
 800355e:	d5e1      	bpl.n	8003524 <__swbuf_r+0x2e>
 8003560:	2e0a      	cmp	r6, #10
 8003562:	d1df      	bne.n	8003524 <__swbuf_r+0x2e>
 8003564:	4621      	mov	r1, r4
 8003566:	4628      	mov	r0, r5
 8003568:	f000 fd1e 	bl	8003fa8 <_fflush_r>
 800356c:	2800      	cmp	r0, #0
 800356e:	d0d9      	beq.n	8003524 <__swbuf_r+0x2e>
 8003570:	e7d6      	b.n	8003520 <__swbuf_r+0x2a>
	...

08003574 <__swsetup_r>:
 8003574:	b538      	push	{r3, r4, r5, lr}
 8003576:	4b29      	ldr	r3, [pc, #164]	@ (800361c <__swsetup_r+0xa8>)
 8003578:	4605      	mov	r5, r0
 800357a:	6818      	ldr	r0, [r3, #0]
 800357c:	460c      	mov	r4, r1
 800357e:	b118      	cbz	r0, 8003588 <__swsetup_r+0x14>
 8003580:	6a03      	ldr	r3, [r0, #32]
 8003582:	b90b      	cbnz	r3, 8003588 <__swsetup_r+0x14>
 8003584:	f7ff fece 	bl	8003324 <__sinit>
 8003588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800358c:	0719      	lsls	r1, r3, #28
 800358e:	d422      	bmi.n	80035d6 <__swsetup_r+0x62>
 8003590:	06da      	lsls	r2, r3, #27
 8003592:	d407      	bmi.n	80035a4 <__swsetup_r+0x30>
 8003594:	2209      	movs	r2, #9
 8003596:	602a      	str	r2, [r5, #0]
 8003598:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800359c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80035a0:	81a3      	strh	r3, [r4, #12]
 80035a2:	e033      	b.n	800360c <__swsetup_r+0x98>
 80035a4:	0758      	lsls	r0, r3, #29
 80035a6:	d512      	bpl.n	80035ce <__swsetup_r+0x5a>
 80035a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80035aa:	b141      	cbz	r1, 80035be <__swsetup_r+0x4a>
 80035ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80035b0:	4299      	cmp	r1, r3
 80035b2:	d002      	beq.n	80035ba <__swsetup_r+0x46>
 80035b4:	4628      	mov	r0, r5
 80035b6:	f000 f8af 	bl	8003718 <_free_r>
 80035ba:	2300      	movs	r3, #0
 80035bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80035be:	89a3      	ldrh	r3, [r4, #12]
 80035c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80035c4:	81a3      	strh	r3, [r4, #12]
 80035c6:	2300      	movs	r3, #0
 80035c8:	6063      	str	r3, [r4, #4]
 80035ca:	6923      	ldr	r3, [r4, #16]
 80035cc:	6023      	str	r3, [r4, #0]
 80035ce:	89a3      	ldrh	r3, [r4, #12]
 80035d0:	f043 0308 	orr.w	r3, r3, #8
 80035d4:	81a3      	strh	r3, [r4, #12]
 80035d6:	6923      	ldr	r3, [r4, #16]
 80035d8:	b94b      	cbnz	r3, 80035ee <__swsetup_r+0x7a>
 80035da:	89a3      	ldrh	r3, [r4, #12]
 80035dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80035e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035e4:	d003      	beq.n	80035ee <__swsetup_r+0x7a>
 80035e6:	4621      	mov	r1, r4
 80035e8:	4628      	mov	r0, r5
 80035ea:	f000 fd2a 	bl	8004042 <__smakebuf_r>
 80035ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035f2:	f013 0201 	ands.w	r2, r3, #1
 80035f6:	d00a      	beq.n	800360e <__swsetup_r+0x9a>
 80035f8:	2200      	movs	r2, #0
 80035fa:	60a2      	str	r2, [r4, #8]
 80035fc:	6962      	ldr	r2, [r4, #20]
 80035fe:	4252      	negs	r2, r2
 8003600:	61a2      	str	r2, [r4, #24]
 8003602:	6922      	ldr	r2, [r4, #16]
 8003604:	b942      	cbnz	r2, 8003618 <__swsetup_r+0xa4>
 8003606:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800360a:	d1c5      	bne.n	8003598 <__swsetup_r+0x24>
 800360c:	bd38      	pop	{r3, r4, r5, pc}
 800360e:	0799      	lsls	r1, r3, #30
 8003610:	bf58      	it	pl
 8003612:	6962      	ldrpl	r2, [r4, #20]
 8003614:	60a2      	str	r2, [r4, #8]
 8003616:	e7f4      	b.n	8003602 <__swsetup_r+0x8e>
 8003618:	2000      	movs	r0, #0
 800361a:	e7f7      	b.n	800360c <__swsetup_r+0x98>
 800361c:	20000024 	.word	0x20000024

08003620 <memset>:
 8003620:	4603      	mov	r3, r0
 8003622:	4402      	add	r2, r0
 8003624:	4293      	cmp	r3, r2
 8003626:	d100      	bne.n	800362a <memset+0xa>
 8003628:	4770      	bx	lr
 800362a:	f803 1b01 	strb.w	r1, [r3], #1
 800362e:	e7f9      	b.n	8003624 <memset+0x4>

08003630 <_close_r>:
 8003630:	b538      	push	{r3, r4, r5, lr}
 8003632:	2300      	movs	r3, #0
 8003634:	4d05      	ldr	r5, [pc, #20]	@ (800364c <_close_r+0x1c>)
 8003636:	4604      	mov	r4, r0
 8003638:	4608      	mov	r0, r1
 800363a:	602b      	str	r3, [r5, #0]
 800363c:	f7fd fe1d 	bl	800127a <_close>
 8003640:	1c43      	adds	r3, r0, #1
 8003642:	d102      	bne.n	800364a <_close_r+0x1a>
 8003644:	682b      	ldr	r3, [r5, #0]
 8003646:	b103      	cbz	r3, 800364a <_close_r+0x1a>
 8003648:	6023      	str	r3, [r4, #0]
 800364a:	bd38      	pop	{r3, r4, r5, pc}
 800364c:	2000023c 	.word	0x2000023c

08003650 <_lseek_r>:
 8003650:	b538      	push	{r3, r4, r5, lr}
 8003652:	4604      	mov	r4, r0
 8003654:	4608      	mov	r0, r1
 8003656:	4611      	mov	r1, r2
 8003658:	2200      	movs	r2, #0
 800365a:	4d05      	ldr	r5, [pc, #20]	@ (8003670 <_lseek_r+0x20>)
 800365c:	602a      	str	r2, [r5, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	f7fd fe2f 	bl	80012c2 <_lseek>
 8003664:	1c43      	adds	r3, r0, #1
 8003666:	d102      	bne.n	800366e <_lseek_r+0x1e>
 8003668:	682b      	ldr	r3, [r5, #0]
 800366a:	b103      	cbz	r3, 800366e <_lseek_r+0x1e>
 800366c:	6023      	str	r3, [r4, #0]
 800366e:	bd38      	pop	{r3, r4, r5, pc}
 8003670:	2000023c 	.word	0x2000023c

08003674 <_read_r>:
 8003674:	b538      	push	{r3, r4, r5, lr}
 8003676:	4604      	mov	r4, r0
 8003678:	4608      	mov	r0, r1
 800367a:	4611      	mov	r1, r2
 800367c:	2200      	movs	r2, #0
 800367e:	4d05      	ldr	r5, [pc, #20]	@ (8003694 <_read_r+0x20>)
 8003680:	602a      	str	r2, [r5, #0]
 8003682:	461a      	mov	r2, r3
 8003684:	f7fd fdc0 	bl	8001208 <_read>
 8003688:	1c43      	adds	r3, r0, #1
 800368a:	d102      	bne.n	8003692 <_read_r+0x1e>
 800368c:	682b      	ldr	r3, [r5, #0]
 800368e:	b103      	cbz	r3, 8003692 <_read_r+0x1e>
 8003690:	6023      	str	r3, [r4, #0]
 8003692:	bd38      	pop	{r3, r4, r5, pc}
 8003694:	2000023c 	.word	0x2000023c

08003698 <_write_r>:
 8003698:	b538      	push	{r3, r4, r5, lr}
 800369a:	4604      	mov	r4, r0
 800369c:	4608      	mov	r0, r1
 800369e:	4611      	mov	r1, r2
 80036a0:	2200      	movs	r2, #0
 80036a2:	4d05      	ldr	r5, [pc, #20]	@ (80036b8 <_write_r+0x20>)
 80036a4:	602a      	str	r2, [r5, #0]
 80036a6:	461a      	mov	r2, r3
 80036a8:	f7fd fdcb 	bl	8001242 <_write>
 80036ac:	1c43      	adds	r3, r0, #1
 80036ae:	d102      	bne.n	80036b6 <_write_r+0x1e>
 80036b0:	682b      	ldr	r3, [r5, #0]
 80036b2:	b103      	cbz	r3, 80036b6 <_write_r+0x1e>
 80036b4:	6023      	str	r3, [r4, #0]
 80036b6:	bd38      	pop	{r3, r4, r5, pc}
 80036b8:	2000023c 	.word	0x2000023c

080036bc <__errno>:
 80036bc:	4b01      	ldr	r3, [pc, #4]	@ (80036c4 <__errno+0x8>)
 80036be:	6818      	ldr	r0, [r3, #0]
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	20000024 	.word	0x20000024

080036c8 <__libc_init_array>:
 80036c8:	b570      	push	{r4, r5, r6, lr}
 80036ca:	2600      	movs	r6, #0
 80036cc:	4d0c      	ldr	r5, [pc, #48]	@ (8003700 <__libc_init_array+0x38>)
 80036ce:	4c0d      	ldr	r4, [pc, #52]	@ (8003704 <__libc_init_array+0x3c>)
 80036d0:	1b64      	subs	r4, r4, r5
 80036d2:	10a4      	asrs	r4, r4, #2
 80036d4:	42a6      	cmp	r6, r4
 80036d6:	d109      	bne.n	80036ec <__libc_init_array+0x24>
 80036d8:	f000 fd30 	bl	800413c <_init>
 80036dc:	2600      	movs	r6, #0
 80036de:	4d0a      	ldr	r5, [pc, #40]	@ (8003708 <__libc_init_array+0x40>)
 80036e0:	4c0a      	ldr	r4, [pc, #40]	@ (800370c <__libc_init_array+0x44>)
 80036e2:	1b64      	subs	r4, r4, r5
 80036e4:	10a4      	asrs	r4, r4, #2
 80036e6:	42a6      	cmp	r6, r4
 80036e8:	d105      	bne.n	80036f6 <__libc_init_array+0x2e>
 80036ea:	bd70      	pop	{r4, r5, r6, pc}
 80036ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80036f0:	4798      	blx	r3
 80036f2:	3601      	adds	r6, #1
 80036f4:	e7ee      	b.n	80036d4 <__libc_init_array+0xc>
 80036f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80036fa:	4798      	blx	r3
 80036fc:	3601      	adds	r6, #1
 80036fe:	e7f2      	b.n	80036e6 <__libc_init_array+0x1e>
 8003700:	080043f0 	.word	0x080043f0
 8003704:	080043f0 	.word	0x080043f0
 8003708:	080043f0 	.word	0x080043f0
 800370c:	080043f4 	.word	0x080043f4

08003710 <__retarget_lock_init_recursive>:
 8003710:	4770      	bx	lr

08003712 <__retarget_lock_acquire_recursive>:
 8003712:	4770      	bx	lr

08003714 <__retarget_lock_release_recursive>:
 8003714:	4770      	bx	lr
	...

08003718 <_free_r>:
 8003718:	b538      	push	{r3, r4, r5, lr}
 800371a:	4605      	mov	r5, r0
 800371c:	2900      	cmp	r1, #0
 800371e:	d040      	beq.n	80037a2 <_free_r+0x8a>
 8003720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003724:	1f0c      	subs	r4, r1, #4
 8003726:	2b00      	cmp	r3, #0
 8003728:	bfb8      	it	lt
 800372a:	18e4      	addlt	r4, r4, r3
 800372c:	f000 f8de 	bl	80038ec <__malloc_lock>
 8003730:	4a1c      	ldr	r2, [pc, #112]	@ (80037a4 <_free_r+0x8c>)
 8003732:	6813      	ldr	r3, [r2, #0]
 8003734:	b933      	cbnz	r3, 8003744 <_free_r+0x2c>
 8003736:	6063      	str	r3, [r4, #4]
 8003738:	6014      	str	r4, [r2, #0]
 800373a:	4628      	mov	r0, r5
 800373c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003740:	f000 b8da 	b.w	80038f8 <__malloc_unlock>
 8003744:	42a3      	cmp	r3, r4
 8003746:	d908      	bls.n	800375a <_free_r+0x42>
 8003748:	6820      	ldr	r0, [r4, #0]
 800374a:	1821      	adds	r1, r4, r0
 800374c:	428b      	cmp	r3, r1
 800374e:	bf01      	itttt	eq
 8003750:	6819      	ldreq	r1, [r3, #0]
 8003752:	685b      	ldreq	r3, [r3, #4]
 8003754:	1809      	addeq	r1, r1, r0
 8003756:	6021      	streq	r1, [r4, #0]
 8003758:	e7ed      	b.n	8003736 <_free_r+0x1e>
 800375a:	461a      	mov	r2, r3
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	b10b      	cbz	r3, 8003764 <_free_r+0x4c>
 8003760:	42a3      	cmp	r3, r4
 8003762:	d9fa      	bls.n	800375a <_free_r+0x42>
 8003764:	6811      	ldr	r1, [r2, #0]
 8003766:	1850      	adds	r0, r2, r1
 8003768:	42a0      	cmp	r0, r4
 800376a:	d10b      	bne.n	8003784 <_free_r+0x6c>
 800376c:	6820      	ldr	r0, [r4, #0]
 800376e:	4401      	add	r1, r0
 8003770:	1850      	adds	r0, r2, r1
 8003772:	4283      	cmp	r3, r0
 8003774:	6011      	str	r1, [r2, #0]
 8003776:	d1e0      	bne.n	800373a <_free_r+0x22>
 8003778:	6818      	ldr	r0, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	4408      	add	r0, r1
 800377e:	6010      	str	r0, [r2, #0]
 8003780:	6053      	str	r3, [r2, #4]
 8003782:	e7da      	b.n	800373a <_free_r+0x22>
 8003784:	d902      	bls.n	800378c <_free_r+0x74>
 8003786:	230c      	movs	r3, #12
 8003788:	602b      	str	r3, [r5, #0]
 800378a:	e7d6      	b.n	800373a <_free_r+0x22>
 800378c:	6820      	ldr	r0, [r4, #0]
 800378e:	1821      	adds	r1, r4, r0
 8003790:	428b      	cmp	r3, r1
 8003792:	bf01      	itttt	eq
 8003794:	6819      	ldreq	r1, [r3, #0]
 8003796:	685b      	ldreq	r3, [r3, #4]
 8003798:	1809      	addeq	r1, r1, r0
 800379a:	6021      	streq	r1, [r4, #0]
 800379c:	6063      	str	r3, [r4, #4]
 800379e:	6054      	str	r4, [r2, #4]
 80037a0:	e7cb      	b.n	800373a <_free_r+0x22>
 80037a2:	bd38      	pop	{r3, r4, r5, pc}
 80037a4:	20000248 	.word	0x20000248

080037a8 <sbrk_aligned>:
 80037a8:	b570      	push	{r4, r5, r6, lr}
 80037aa:	4e0f      	ldr	r6, [pc, #60]	@ (80037e8 <sbrk_aligned+0x40>)
 80037ac:	460c      	mov	r4, r1
 80037ae:	6831      	ldr	r1, [r6, #0]
 80037b0:	4605      	mov	r5, r0
 80037b2:	b911      	cbnz	r1, 80037ba <sbrk_aligned+0x12>
 80037b4:	f000 fca4 	bl	8004100 <_sbrk_r>
 80037b8:	6030      	str	r0, [r6, #0]
 80037ba:	4621      	mov	r1, r4
 80037bc:	4628      	mov	r0, r5
 80037be:	f000 fc9f 	bl	8004100 <_sbrk_r>
 80037c2:	1c43      	adds	r3, r0, #1
 80037c4:	d103      	bne.n	80037ce <sbrk_aligned+0x26>
 80037c6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80037ca:	4620      	mov	r0, r4
 80037cc:	bd70      	pop	{r4, r5, r6, pc}
 80037ce:	1cc4      	adds	r4, r0, #3
 80037d0:	f024 0403 	bic.w	r4, r4, #3
 80037d4:	42a0      	cmp	r0, r4
 80037d6:	d0f8      	beq.n	80037ca <sbrk_aligned+0x22>
 80037d8:	1a21      	subs	r1, r4, r0
 80037da:	4628      	mov	r0, r5
 80037dc:	f000 fc90 	bl	8004100 <_sbrk_r>
 80037e0:	3001      	adds	r0, #1
 80037e2:	d1f2      	bne.n	80037ca <sbrk_aligned+0x22>
 80037e4:	e7ef      	b.n	80037c6 <sbrk_aligned+0x1e>
 80037e6:	bf00      	nop
 80037e8:	20000244 	.word	0x20000244

080037ec <_malloc_r>:
 80037ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037f0:	1ccd      	adds	r5, r1, #3
 80037f2:	f025 0503 	bic.w	r5, r5, #3
 80037f6:	3508      	adds	r5, #8
 80037f8:	2d0c      	cmp	r5, #12
 80037fa:	bf38      	it	cc
 80037fc:	250c      	movcc	r5, #12
 80037fe:	2d00      	cmp	r5, #0
 8003800:	4606      	mov	r6, r0
 8003802:	db01      	blt.n	8003808 <_malloc_r+0x1c>
 8003804:	42a9      	cmp	r1, r5
 8003806:	d904      	bls.n	8003812 <_malloc_r+0x26>
 8003808:	230c      	movs	r3, #12
 800380a:	6033      	str	r3, [r6, #0]
 800380c:	2000      	movs	r0, #0
 800380e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003812:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80038e8 <_malloc_r+0xfc>
 8003816:	f000 f869 	bl	80038ec <__malloc_lock>
 800381a:	f8d8 3000 	ldr.w	r3, [r8]
 800381e:	461c      	mov	r4, r3
 8003820:	bb44      	cbnz	r4, 8003874 <_malloc_r+0x88>
 8003822:	4629      	mov	r1, r5
 8003824:	4630      	mov	r0, r6
 8003826:	f7ff ffbf 	bl	80037a8 <sbrk_aligned>
 800382a:	1c43      	adds	r3, r0, #1
 800382c:	4604      	mov	r4, r0
 800382e:	d158      	bne.n	80038e2 <_malloc_r+0xf6>
 8003830:	f8d8 4000 	ldr.w	r4, [r8]
 8003834:	4627      	mov	r7, r4
 8003836:	2f00      	cmp	r7, #0
 8003838:	d143      	bne.n	80038c2 <_malloc_r+0xd6>
 800383a:	2c00      	cmp	r4, #0
 800383c:	d04b      	beq.n	80038d6 <_malloc_r+0xea>
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	4639      	mov	r1, r7
 8003842:	4630      	mov	r0, r6
 8003844:	eb04 0903 	add.w	r9, r4, r3
 8003848:	f000 fc5a 	bl	8004100 <_sbrk_r>
 800384c:	4581      	cmp	r9, r0
 800384e:	d142      	bne.n	80038d6 <_malloc_r+0xea>
 8003850:	6821      	ldr	r1, [r4, #0]
 8003852:	4630      	mov	r0, r6
 8003854:	1a6d      	subs	r5, r5, r1
 8003856:	4629      	mov	r1, r5
 8003858:	f7ff ffa6 	bl	80037a8 <sbrk_aligned>
 800385c:	3001      	adds	r0, #1
 800385e:	d03a      	beq.n	80038d6 <_malloc_r+0xea>
 8003860:	6823      	ldr	r3, [r4, #0]
 8003862:	442b      	add	r3, r5
 8003864:	6023      	str	r3, [r4, #0]
 8003866:	f8d8 3000 	ldr.w	r3, [r8]
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	bb62      	cbnz	r2, 80038c8 <_malloc_r+0xdc>
 800386e:	f8c8 7000 	str.w	r7, [r8]
 8003872:	e00f      	b.n	8003894 <_malloc_r+0xa8>
 8003874:	6822      	ldr	r2, [r4, #0]
 8003876:	1b52      	subs	r2, r2, r5
 8003878:	d420      	bmi.n	80038bc <_malloc_r+0xd0>
 800387a:	2a0b      	cmp	r2, #11
 800387c:	d917      	bls.n	80038ae <_malloc_r+0xc2>
 800387e:	1961      	adds	r1, r4, r5
 8003880:	42a3      	cmp	r3, r4
 8003882:	6025      	str	r5, [r4, #0]
 8003884:	bf18      	it	ne
 8003886:	6059      	strne	r1, [r3, #4]
 8003888:	6863      	ldr	r3, [r4, #4]
 800388a:	bf08      	it	eq
 800388c:	f8c8 1000 	streq.w	r1, [r8]
 8003890:	5162      	str	r2, [r4, r5]
 8003892:	604b      	str	r3, [r1, #4]
 8003894:	4630      	mov	r0, r6
 8003896:	f000 f82f 	bl	80038f8 <__malloc_unlock>
 800389a:	f104 000b 	add.w	r0, r4, #11
 800389e:	1d23      	adds	r3, r4, #4
 80038a0:	f020 0007 	bic.w	r0, r0, #7
 80038a4:	1ac2      	subs	r2, r0, r3
 80038a6:	bf1c      	itt	ne
 80038a8:	1a1b      	subne	r3, r3, r0
 80038aa:	50a3      	strne	r3, [r4, r2]
 80038ac:	e7af      	b.n	800380e <_malloc_r+0x22>
 80038ae:	6862      	ldr	r2, [r4, #4]
 80038b0:	42a3      	cmp	r3, r4
 80038b2:	bf0c      	ite	eq
 80038b4:	f8c8 2000 	streq.w	r2, [r8]
 80038b8:	605a      	strne	r2, [r3, #4]
 80038ba:	e7eb      	b.n	8003894 <_malloc_r+0xa8>
 80038bc:	4623      	mov	r3, r4
 80038be:	6864      	ldr	r4, [r4, #4]
 80038c0:	e7ae      	b.n	8003820 <_malloc_r+0x34>
 80038c2:	463c      	mov	r4, r7
 80038c4:	687f      	ldr	r7, [r7, #4]
 80038c6:	e7b6      	b.n	8003836 <_malloc_r+0x4a>
 80038c8:	461a      	mov	r2, r3
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	42a3      	cmp	r3, r4
 80038ce:	d1fb      	bne.n	80038c8 <_malloc_r+0xdc>
 80038d0:	2300      	movs	r3, #0
 80038d2:	6053      	str	r3, [r2, #4]
 80038d4:	e7de      	b.n	8003894 <_malloc_r+0xa8>
 80038d6:	230c      	movs	r3, #12
 80038d8:	4630      	mov	r0, r6
 80038da:	6033      	str	r3, [r6, #0]
 80038dc:	f000 f80c 	bl	80038f8 <__malloc_unlock>
 80038e0:	e794      	b.n	800380c <_malloc_r+0x20>
 80038e2:	6005      	str	r5, [r0, #0]
 80038e4:	e7d6      	b.n	8003894 <_malloc_r+0xa8>
 80038e6:	bf00      	nop
 80038e8:	20000248 	.word	0x20000248

080038ec <__malloc_lock>:
 80038ec:	4801      	ldr	r0, [pc, #4]	@ (80038f4 <__malloc_lock+0x8>)
 80038ee:	f7ff bf10 	b.w	8003712 <__retarget_lock_acquire_recursive>
 80038f2:	bf00      	nop
 80038f4:	20000240 	.word	0x20000240

080038f8 <__malloc_unlock>:
 80038f8:	4801      	ldr	r0, [pc, #4]	@ (8003900 <__malloc_unlock+0x8>)
 80038fa:	f7ff bf0b 	b.w	8003714 <__retarget_lock_release_recursive>
 80038fe:	bf00      	nop
 8003900:	20000240 	.word	0x20000240

08003904 <__sfputc_r>:
 8003904:	6893      	ldr	r3, [r2, #8]
 8003906:	b410      	push	{r4}
 8003908:	3b01      	subs	r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	6093      	str	r3, [r2, #8]
 800390e:	da07      	bge.n	8003920 <__sfputc_r+0x1c>
 8003910:	6994      	ldr	r4, [r2, #24]
 8003912:	42a3      	cmp	r3, r4
 8003914:	db01      	blt.n	800391a <__sfputc_r+0x16>
 8003916:	290a      	cmp	r1, #10
 8003918:	d102      	bne.n	8003920 <__sfputc_r+0x1c>
 800391a:	bc10      	pop	{r4}
 800391c:	f7ff bdeb 	b.w	80034f6 <__swbuf_r>
 8003920:	6813      	ldr	r3, [r2, #0]
 8003922:	1c58      	adds	r0, r3, #1
 8003924:	6010      	str	r0, [r2, #0]
 8003926:	7019      	strb	r1, [r3, #0]
 8003928:	4608      	mov	r0, r1
 800392a:	bc10      	pop	{r4}
 800392c:	4770      	bx	lr

0800392e <__sfputs_r>:
 800392e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003930:	4606      	mov	r6, r0
 8003932:	460f      	mov	r7, r1
 8003934:	4614      	mov	r4, r2
 8003936:	18d5      	adds	r5, r2, r3
 8003938:	42ac      	cmp	r4, r5
 800393a:	d101      	bne.n	8003940 <__sfputs_r+0x12>
 800393c:	2000      	movs	r0, #0
 800393e:	e007      	b.n	8003950 <__sfputs_r+0x22>
 8003940:	463a      	mov	r2, r7
 8003942:	4630      	mov	r0, r6
 8003944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003948:	f7ff ffdc 	bl	8003904 <__sfputc_r>
 800394c:	1c43      	adds	r3, r0, #1
 800394e:	d1f3      	bne.n	8003938 <__sfputs_r+0xa>
 8003950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003954 <_vfiprintf_r>:
 8003954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003958:	460d      	mov	r5, r1
 800395a:	4614      	mov	r4, r2
 800395c:	4698      	mov	r8, r3
 800395e:	4606      	mov	r6, r0
 8003960:	b09d      	sub	sp, #116	@ 0x74
 8003962:	b118      	cbz	r0, 800396c <_vfiprintf_r+0x18>
 8003964:	6a03      	ldr	r3, [r0, #32]
 8003966:	b90b      	cbnz	r3, 800396c <_vfiprintf_r+0x18>
 8003968:	f7ff fcdc 	bl	8003324 <__sinit>
 800396c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800396e:	07d9      	lsls	r1, r3, #31
 8003970:	d405      	bmi.n	800397e <_vfiprintf_r+0x2a>
 8003972:	89ab      	ldrh	r3, [r5, #12]
 8003974:	059a      	lsls	r2, r3, #22
 8003976:	d402      	bmi.n	800397e <_vfiprintf_r+0x2a>
 8003978:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800397a:	f7ff feca 	bl	8003712 <__retarget_lock_acquire_recursive>
 800397e:	89ab      	ldrh	r3, [r5, #12]
 8003980:	071b      	lsls	r3, r3, #28
 8003982:	d501      	bpl.n	8003988 <_vfiprintf_r+0x34>
 8003984:	692b      	ldr	r3, [r5, #16]
 8003986:	b99b      	cbnz	r3, 80039b0 <_vfiprintf_r+0x5c>
 8003988:	4629      	mov	r1, r5
 800398a:	4630      	mov	r0, r6
 800398c:	f7ff fdf2 	bl	8003574 <__swsetup_r>
 8003990:	b170      	cbz	r0, 80039b0 <_vfiprintf_r+0x5c>
 8003992:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003994:	07dc      	lsls	r4, r3, #31
 8003996:	d504      	bpl.n	80039a2 <_vfiprintf_r+0x4e>
 8003998:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800399c:	b01d      	add	sp, #116	@ 0x74
 800399e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039a2:	89ab      	ldrh	r3, [r5, #12]
 80039a4:	0598      	lsls	r0, r3, #22
 80039a6:	d4f7      	bmi.n	8003998 <_vfiprintf_r+0x44>
 80039a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80039aa:	f7ff feb3 	bl	8003714 <__retarget_lock_release_recursive>
 80039ae:	e7f3      	b.n	8003998 <_vfiprintf_r+0x44>
 80039b0:	2300      	movs	r3, #0
 80039b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80039b4:	2320      	movs	r3, #32
 80039b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80039ba:	2330      	movs	r3, #48	@ 0x30
 80039bc:	f04f 0901 	mov.w	r9, #1
 80039c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80039c4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003b70 <_vfiprintf_r+0x21c>
 80039c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80039cc:	4623      	mov	r3, r4
 80039ce:	469a      	mov	sl, r3
 80039d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039d4:	b10a      	cbz	r2, 80039da <_vfiprintf_r+0x86>
 80039d6:	2a25      	cmp	r2, #37	@ 0x25
 80039d8:	d1f9      	bne.n	80039ce <_vfiprintf_r+0x7a>
 80039da:	ebba 0b04 	subs.w	fp, sl, r4
 80039de:	d00b      	beq.n	80039f8 <_vfiprintf_r+0xa4>
 80039e0:	465b      	mov	r3, fp
 80039e2:	4622      	mov	r2, r4
 80039e4:	4629      	mov	r1, r5
 80039e6:	4630      	mov	r0, r6
 80039e8:	f7ff ffa1 	bl	800392e <__sfputs_r>
 80039ec:	3001      	adds	r0, #1
 80039ee:	f000 80a7 	beq.w	8003b40 <_vfiprintf_r+0x1ec>
 80039f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80039f4:	445a      	add	r2, fp
 80039f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80039f8:	f89a 3000 	ldrb.w	r3, [sl]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 809f 	beq.w	8003b40 <_vfiprintf_r+0x1ec>
 8003a02:	2300      	movs	r3, #0
 8003a04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003a08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a0c:	f10a 0a01 	add.w	sl, sl, #1
 8003a10:	9304      	str	r3, [sp, #16]
 8003a12:	9307      	str	r3, [sp, #28]
 8003a14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003a18:	931a      	str	r3, [sp, #104]	@ 0x68
 8003a1a:	4654      	mov	r4, sl
 8003a1c:	2205      	movs	r2, #5
 8003a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a22:	4853      	ldr	r0, [pc, #332]	@ (8003b70 <_vfiprintf_r+0x21c>)
 8003a24:	f000 fb7c 	bl	8004120 <memchr>
 8003a28:	9a04      	ldr	r2, [sp, #16]
 8003a2a:	b9d8      	cbnz	r0, 8003a64 <_vfiprintf_r+0x110>
 8003a2c:	06d1      	lsls	r1, r2, #27
 8003a2e:	bf44      	itt	mi
 8003a30:	2320      	movmi	r3, #32
 8003a32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a36:	0713      	lsls	r3, r2, #28
 8003a38:	bf44      	itt	mi
 8003a3a:	232b      	movmi	r3, #43	@ 0x2b
 8003a3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a40:	f89a 3000 	ldrb.w	r3, [sl]
 8003a44:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a46:	d015      	beq.n	8003a74 <_vfiprintf_r+0x120>
 8003a48:	4654      	mov	r4, sl
 8003a4a:	2000      	movs	r0, #0
 8003a4c:	f04f 0c0a 	mov.w	ip, #10
 8003a50:	9a07      	ldr	r2, [sp, #28]
 8003a52:	4621      	mov	r1, r4
 8003a54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a58:	3b30      	subs	r3, #48	@ 0x30
 8003a5a:	2b09      	cmp	r3, #9
 8003a5c:	d94b      	bls.n	8003af6 <_vfiprintf_r+0x1a2>
 8003a5e:	b1b0      	cbz	r0, 8003a8e <_vfiprintf_r+0x13a>
 8003a60:	9207      	str	r2, [sp, #28]
 8003a62:	e014      	b.n	8003a8e <_vfiprintf_r+0x13a>
 8003a64:	eba0 0308 	sub.w	r3, r0, r8
 8003a68:	fa09 f303 	lsl.w	r3, r9, r3
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	46a2      	mov	sl, r4
 8003a70:	9304      	str	r3, [sp, #16]
 8003a72:	e7d2      	b.n	8003a1a <_vfiprintf_r+0xc6>
 8003a74:	9b03      	ldr	r3, [sp, #12]
 8003a76:	1d19      	adds	r1, r3, #4
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	9103      	str	r1, [sp, #12]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	bfbb      	ittet	lt
 8003a80:	425b      	neglt	r3, r3
 8003a82:	f042 0202 	orrlt.w	r2, r2, #2
 8003a86:	9307      	strge	r3, [sp, #28]
 8003a88:	9307      	strlt	r3, [sp, #28]
 8003a8a:	bfb8      	it	lt
 8003a8c:	9204      	strlt	r2, [sp, #16]
 8003a8e:	7823      	ldrb	r3, [r4, #0]
 8003a90:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a92:	d10a      	bne.n	8003aaa <_vfiprintf_r+0x156>
 8003a94:	7863      	ldrb	r3, [r4, #1]
 8003a96:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a98:	d132      	bne.n	8003b00 <_vfiprintf_r+0x1ac>
 8003a9a:	9b03      	ldr	r3, [sp, #12]
 8003a9c:	3402      	adds	r4, #2
 8003a9e:	1d1a      	adds	r2, r3, #4
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	9203      	str	r2, [sp, #12]
 8003aa4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003aa8:	9305      	str	r3, [sp, #20]
 8003aaa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003b74 <_vfiprintf_r+0x220>
 8003aae:	2203      	movs	r2, #3
 8003ab0:	4650      	mov	r0, sl
 8003ab2:	7821      	ldrb	r1, [r4, #0]
 8003ab4:	f000 fb34 	bl	8004120 <memchr>
 8003ab8:	b138      	cbz	r0, 8003aca <_vfiprintf_r+0x176>
 8003aba:	2240      	movs	r2, #64	@ 0x40
 8003abc:	9b04      	ldr	r3, [sp, #16]
 8003abe:	eba0 000a 	sub.w	r0, r0, sl
 8003ac2:	4082      	lsls	r2, r0
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	3401      	adds	r4, #1
 8003ac8:	9304      	str	r3, [sp, #16]
 8003aca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ace:	2206      	movs	r2, #6
 8003ad0:	4829      	ldr	r0, [pc, #164]	@ (8003b78 <_vfiprintf_r+0x224>)
 8003ad2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003ad6:	f000 fb23 	bl	8004120 <memchr>
 8003ada:	2800      	cmp	r0, #0
 8003adc:	d03f      	beq.n	8003b5e <_vfiprintf_r+0x20a>
 8003ade:	4b27      	ldr	r3, [pc, #156]	@ (8003b7c <_vfiprintf_r+0x228>)
 8003ae0:	bb1b      	cbnz	r3, 8003b2a <_vfiprintf_r+0x1d6>
 8003ae2:	9b03      	ldr	r3, [sp, #12]
 8003ae4:	3307      	adds	r3, #7
 8003ae6:	f023 0307 	bic.w	r3, r3, #7
 8003aea:	3308      	adds	r3, #8
 8003aec:	9303      	str	r3, [sp, #12]
 8003aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003af0:	443b      	add	r3, r7
 8003af2:	9309      	str	r3, [sp, #36]	@ 0x24
 8003af4:	e76a      	b.n	80039cc <_vfiprintf_r+0x78>
 8003af6:	460c      	mov	r4, r1
 8003af8:	2001      	movs	r0, #1
 8003afa:	fb0c 3202 	mla	r2, ip, r2, r3
 8003afe:	e7a8      	b.n	8003a52 <_vfiprintf_r+0xfe>
 8003b00:	2300      	movs	r3, #0
 8003b02:	f04f 0c0a 	mov.w	ip, #10
 8003b06:	4619      	mov	r1, r3
 8003b08:	3401      	adds	r4, #1
 8003b0a:	9305      	str	r3, [sp, #20]
 8003b0c:	4620      	mov	r0, r4
 8003b0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b12:	3a30      	subs	r2, #48	@ 0x30
 8003b14:	2a09      	cmp	r2, #9
 8003b16:	d903      	bls.n	8003b20 <_vfiprintf_r+0x1cc>
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0c6      	beq.n	8003aaa <_vfiprintf_r+0x156>
 8003b1c:	9105      	str	r1, [sp, #20]
 8003b1e:	e7c4      	b.n	8003aaa <_vfiprintf_r+0x156>
 8003b20:	4604      	mov	r4, r0
 8003b22:	2301      	movs	r3, #1
 8003b24:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b28:	e7f0      	b.n	8003b0c <_vfiprintf_r+0x1b8>
 8003b2a:	ab03      	add	r3, sp, #12
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	462a      	mov	r2, r5
 8003b30:	4630      	mov	r0, r6
 8003b32:	4b13      	ldr	r3, [pc, #76]	@ (8003b80 <_vfiprintf_r+0x22c>)
 8003b34:	a904      	add	r1, sp, #16
 8003b36:	f3af 8000 	nop.w
 8003b3a:	4607      	mov	r7, r0
 8003b3c:	1c78      	adds	r0, r7, #1
 8003b3e:	d1d6      	bne.n	8003aee <_vfiprintf_r+0x19a>
 8003b40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003b42:	07d9      	lsls	r1, r3, #31
 8003b44:	d405      	bmi.n	8003b52 <_vfiprintf_r+0x1fe>
 8003b46:	89ab      	ldrh	r3, [r5, #12]
 8003b48:	059a      	lsls	r2, r3, #22
 8003b4a:	d402      	bmi.n	8003b52 <_vfiprintf_r+0x1fe>
 8003b4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003b4e:	f7ff fde1 	bl	8003714 <__retarget_lock_release_recursive>
 8003b52:	89ab      	ldrh	r3, [r5, #12]
 8003b54:	065b      	lsls	r3, r3, #25
 8003b56:	f53f af1f 	bmi.w	8003998 <_vfiprintf_r+0x44>
 8003b5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003b5c:	e71e      	b.n	800399c <_vfiprintf_r+0x48>
 8003b5e:	ab03      	add	r3, sp, #12
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	462a      	mov	r2, r5
 8003b64:	4630      	mov	r0, r6
 8003b66:	4b06      	ldr	r3, [pc, #24]	@ (8003b80 <_vfiprintf_r+0x22c>)
 8003b68:	a904      	add	r1, sp, #16
 8003b6a:	f000 f87d 	bl	8003c68 <_printf_i>
 8003b6e:	e7e4      	b.n	8003b3a <_vfiprintf_r+0x1e6>
 8003b70:	080043ba 	.word	0x080043ba
 8003b74:	080043c0 	.word	0x080043c0
 8003b78:	080043c4 	.word	0x080043c4
 8003b7c:	00000000 	.word	0x00000000
 8003b80:	0800392f 	.word	0x0800392f

08003b84 <_printf_common>:
 8003b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b88:	4616      	mov	r6, r2
 8003b8a:	4698      	mov	r8, r3
 8003b8c:	688a      	ldr	r2, [r1, #8]
 8003b8e:	690b      	ldr	r3, [r1, #16]
 8003b90:	4607      	mov	r7, r0
 8003b92:	4293      	cmp	r3, r2
 8003b94:	bfb8      	it	lt
 8003b96:	4613      	movlt	r3, r2
 8003b98:	6033      	str	r3, [r6, #0]
 8003b9a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b9e:	460c      	mov	r4, r1
 8003ba0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ba4:	b10a      	cbz	r2, 8003baa <_printf_common+0x26>
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	6033      	str	r3, [r6, #0]
 8003baa:	6823      	ldr	r3, [r4, #0]
 8003bac:	0699      	lsls	r1, r3, #26
 8003bae:	bf42      	ittt	mi
 8003bb0:	6833      	ldrmi	r3, [r6, #0]
 8003bb2:	3302      	addmi	r3, #2
 8003bb4:	6033      	strmi	r3, [r6, #0]
 8003bb6:	6825      	ldr	r5, [r4, #0]
 8003bb8:	f015 0506 	ands.w	r5, r5, #6
 8003bbc:	d106      	bne.n	8003bcc <_printf_common+0x48>
 8003bbe:	f104 0a19 	add.w	sl, r4, #25
 8003bc2:	68e3      	ldr	r3, [r4, #12]
 8003bc4:	6832      	ldr	r2, [r6, #0]
 8003bc6:	1a9b      	subs	r3, r3, r2
 8003bc8:	42ab      	cmp	r3, r5
 8003bca:	dc2b      	bgt.n	8003c24 <_printf_common+0xa0>
 8003bcc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003bd0:	6822      	ldr	r2, [r4, #0]
 8003bd2:	3b00      	subs	r3, #0
 8003bd4:	bf18      	it	ne
 8003bd6:	2301      	movne	r3, #1
 8003bd8:	0692      	lsls	r2, r2, #26
 8003bda:	d430      	bmi.n	8003c3e <_printf_common+0xba>
 8003bdc:	4641      	mov	r1, r8
 8003bde:	4638      	mov	r0, r7
 8003be0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003be4:	47c8      	blx	r9
 8003be6:	3001      	adds	r0, #1
 8003be8:	d023      	beq.n	8003c32 <_printf_common+0xae>
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	6922      	ldr	r2, [r4, #16]
 8003bee:	f003 0306 	and.w	r3, r3, #6
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	bf14      	ite	ne
 8003bf6:	2500      	movne	r5, #0
 8003bf8:	6833      	ldreq	r3, [r6, #0]
 8003bfa:	f04f 0600 	mov.w	r6, #0
 8003bfe:	bf08      	it	eq
 8003c00:	68e5      	ldreq	r5, [r4, #12]
 8003c02:	f104 041a 	add.w	r4, r4, #26
 8003c06:	bf08      	it	eq
 8003c08:	1aed      	subeq	r5, r5, r3
 8003c0a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003c0e:	bf08      	it	eq
 8003c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c14:	4293      	cmp	r3, r2
 8003c16:	bfc4      	itt	gt
 8003c18:	1a9b      	subgt	r3, r3, r2
 8003c1a:	18ed      	addgt	r5, r5, r3
 8003c1c:	42b5      	cmp	r5, r6
 8003c1e:	d11a      	bne.n	8003c56 <_printf_common+0xd2>
 8003c20:	2000      	movs	r0, #0
 8003c22:	e008      	b.n	8003c36 <_printf_common+0xb2>
 8003c24:	2301      	movs	r3, #1
 8003c26:	4652      	mov	r2, sl
 8003c28:	4641      	mov	r1, r8
 8003c2a:	4638      	mov	r0, r7
 8003c2c:	47c8      	blx	r9
 8003c2e:	3001      	adds	r0, #1
 8003c30:	d103      	bne.n	8003c3a <_printf_common+0xb6>
 8003c32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c3a:	3501      	adds	r5, #1
 8003c3c:	e7c1      	b.n	8003bc2 <_printf_common+0x3e>
 8003c3e:	2030      	movs	r0, #48	@ 0x30
 8003c40:	18e1      	adds	r1, r4, r3
 8003c42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c4c:	4422      	add	r2, r4
 8003c4e:	3302      	adds	r3, #2
 8003c50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c54:	e7c2      	b.n	8003bdc <_printf_common+0x58>
 8003c56:	2301      	movs	r3, #1
 8003c58:	4622      	mov	r2, r4
 8003c5a:	4641      	mov	r1, r8
 8003c5c:	4638      	mov	r0, r7
 8003c5e:	47c8      	blx	r9
 8003c60:	3001      	adds	r0, #1
 8003c62:	d0e6      	beq.n	8003c32 <_printf_common+0xae>
 8003c64:	3601      	adds	r6, #1
 8003c66:	e7d9      	b.n	8003c1c <_printf_common+0x98>

08003c68 <_printf_i>:
 8003c68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c6c:	7e0f      	ldrb	r7, [r1, #24]
 8003c6e:	4691      	mov	r9, r2
 8003c70:	2f78      	cmp	r7, #120	@ 0x78
 8003c72:	4680      	mov	r8, r0
 8003c74:	460c      	mov	r4, r1
 8003c76:	469a      	mov	sl, r3
 8003c78:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003c7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003c7e:	d807      	bhi.n	8003c90 <_printf_i+0x28>
 8003c80:	2f62      	cmp	r7, #98	@ 0x62
 8003c82:	d80a      	bhi.n	8003c9a <_printf_i+0x32>
 8003c84:	2f00      	cmp	r7, #0
 8003c86:	f000 80d3 	beq.w	8003e30 <_printf_i+0x1c8>
 8003c8a:	2f58      	cmp	r7, #88	@ 0x58
 8003c8c:	f000 80ba 	beq.w	8003e04 <_printf_i+0x19c>
 8003c90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c98:	e03a      	b.n	8003d10 <_printf_i+0xa8>
 8003c9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c9e:	2b15      	cmp	r3, #21
 8003ca0:	d8f6      	bhi.n	8003c90 <_printf_i+0x28>
 8003ca2:	a101      	add	r1, pc, #4	@ (adr r1, 8003ca8 <_printf_i+0x40>)
 8003ca4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ca8:	08003d01 	.word	0x08003d01
 8003cac:	08003d15 	.word	0x08003d15
 8003cb0:	08003c91 	.word	0x08003c91
 8003cb4:	08003c91 	.word	0x08003c91
 8003cb8:	08003c91 	.word	0x08003c91
 8003cbc:	08003c91 	.word	0x08003c91
 8003cc0:	08003d15 	.word	0x08003d15
 8003cc4:	08003c91 	.word	0x08003c91
 8003cc8:	08003c91 	.word	0x08003c91
 8003ccc:	08003c91 	.word	0x08003c91
 8003cd0:	08003c91 	.word	0x08003c91
 8003cd4:	08003e17 	.word	0x08003e17
 8003cd8:	08003d3f 	.word	0x08003d3f
 8003cdc:	08003dd1 	.word	0x08003dd1
 8003ce0:	08003c91 	.word	0x08003c91
 8003ce4:	08003c91 	.word	0x08003c91
 8003ce8:	08003e39 	.word	0x08003e39
 8003cec:	08003c91 	.word	0x08003c91
 8003cf0:	08003d3f 	.word	0x08003d3f
 8003cf4:	08003c91 	.word	0x08003c91
 8003cf8:	08003c91 	.word	0x08003c91
 8003cfc:	08003dd9 	.word	0x08003dd9
 8003d00:	6833      	ldr	r3, [r6, #0]
 8003d02:	1d1a      	adds	r2, r3, #4
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6032      	str	r2, [r6, #0]
 8003d08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d10:	2301      	movs	r3, #1
 8003d12:	e09e      	b.n	8003e52 <_printf_i+0x1ea>
 8003d14:	6833      	ldr	r3, [r6, #0]
 8003d16:	6820      	ldr	r0, [r4, #0]
 8003d18:	1d19      	adds	r1, r3, #4
 8003d1a:	6031      	str	r1, [r6, #0]
 8003d1c:	0606      	lsls	r6, r0, #24
 8003d1e:	d501      	bpl.n	8003d24 <_printf_i+0xbc>
 8003d20:	681d      	ldr	r5, [r3, #0]
 8003d22:	e003      	b.n	8003d2c <_printf_i+0xc4>
 8003d24:	0645      	lsls	r5, r0, #25
 8003d26:	d5fb      	bpl.n	8003d20 <_printf_i+0xb8>
 8003d28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d2c:	2d00      	cmp	r5, #0
 8003d2e:	da03      	bge.n	8003d38 <_printf_i+0xd0>
 8003d30:	232d      	movs	r3, #45	@ 0x2d
 8003d32:	426d      	negs	r5, r5
 8003d34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d38:	230a      	movs	r3, #10
 8003d3a:	4859      	ldr	r0, [pc, #356]	@ (8003ea0 <_printf_i+0x238>)
 8003d3c:	e011      	b.n	8003d62 <_printf_i+0xfa>
 8003d3e:	6821      	ldr	r1, [r4, #0]
 8003d40:	6833      	ldr	r3, [r6, #0]
 8003d42:	0608      	lsls	r0, r1, #24
 8003d44:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d48:	d402      	bmi.n	8003d50 <_printf_i+0xe8>
 8003d4a:	0649      	lsls	r1, r1, #25
 8003d4c:	bf48      	it	mi
 8003d4e:	b2ad      	uxthmi	r5, r5
 8003d50:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d52:	6033      	str	r3, [r6, #0]
 8003d54:	bf14      	ite	ne
 8003d56:	230a      	movne	r3, #10
 8003d58:	2308      	moveq	r3, #8
 8003d5a:	4851      	ldr	r0, [pc, #324]	@ (8003ea0 <_printf_i+0x238>)
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d62:	6866      	ldr	r6, [r4, #4]
 8003d64:	2e00      	cmp	r6, #0
 8003d66:	bfa8      	it	ge
 8003d68:	6821      	ldrge	r1, [r4, #0]
 8003d6a:	60a6      	str	r6, [r4, #8]
 8003d6c:	bfa4      	itt	ge
 8003d6e:	f021 0104 	bicge.w	r1, r1, #4
 8003d72:	6021      	strge	r1, [r4, #0]
 8003d74:	b90d      	cbnz	r5, 8003d7a <_printf_i+0x112>
 8003d76:	2e00      	cmp	r6, #0
 8003d78:	d04b      	beq.n	8003e12 <_printf_i+0x1aa>
 8003d7a:	4616      	mov	r6, r2
 8003d7c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d80:	fb03 5711 	mls	r7, r3, r1, r5
 8003d84:	5dc7      	ldrb	r7, [r0, r7]
 8003d86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d8a:	462f      	mov	r7, r5
 8003d8c:	42bb      	cmp	r3, r7
 8003d8e:	460d      	mov	r5, r1
 8003d90:	d9f4      	bls.n	8003d7c <_printf_i+0x114>
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	d10b      	bne.n	8003dae <_printf_i+0x146>
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	07df      	lsls	r7, r3, #31
 8003d9a:	d508      	bpl.n	8003dae <_printf_i+0x146>
 8003d9c:	6923      	ldr	r3, [r4, #16]
 8003d9e:	6861      	ldr	r1, [r4, #4]
 8003da0:	4299      	cmp	r1, r3
 8003da2:	bfde      	ittt	le
 8003da4:	2330      	movle	r3, #48	@ 0x30
 8003da6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003daa:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003dae:	1b92      	subs	r2, r2, r6
 8003db0:	6122      	str	r2, [r4, #16]
 8003db2:	464b      	mov	r3, r9
 8003db4:	4621      	mov	r1, r4
 8003db6:	4640      	mov	r0, r8
 8003db8:	f8cd a000 	str.w	sl, [sp]
 8003dbc:	aa03      	add	r2, sp, #12
 8003dbe:	f7ff fee1 	bl	8003b84 <_printf_common>
 8003dc2:	3001      	adds	r0, #1
 8003dc4:	d14a      	bne.n	8003e5c <_printf_i+0x1f4>
 8003dc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003dca:	b004      	add	sp, #16
 8003dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dd0:	6823      	ldr	r3, [r4, #0]
 8003dd2:	f043 0320 	orr.w	r3, r3, #32
 8003dd6:	6023      	str	r3, [r4, #0]
 8003dd8:	2778      	movs	r7, #120	@ 0x78
 8003dda:	4832      	ldr	r0, [pc, #200]	@ (8003ea4 <_printf_i+0x23c>)
 8003ddc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	6831      	ldr	r1, [r6, #0]
 8003de4:	061f      	lsls	r7, r3, #24
 8003de6:	f851 5b04 	ldr.w	r5, [r1], #4
 8003dea:	d402      	bmi.n	8003df2 <_printf_i+0x18a>
 8003dec:	065f      	lsls	r7, r3, #25
 8003dee:	bf48      	it	mi
 8003df0:	b2ad      	uxthmi	r5, r5
 8003df2:	6031      	str	r1, [r6, #0]
 8003df4:	07d9      	lsls	r1, r3, #31
 8003df6:	bf44      	itt	mi
 8003df8:	f043 0320 	orrmi.w	r3, r3, #32
 8003dfc:	6023      	strmi	r3, [r4, #0]
 8003dfe:	b11d      	cbz	r5, 8003e08 <_printf_i+0x1a0>
 8003e00:	2310      	movs	r3, #16
 8003e02:	e7ab      	b.n	8003d5c <_printf_i+0xf4>
 8003e04:	4826      	ldr	r0, [pc, #152]	@ (8003ea0 <_printf_i+0x238>)
 8003e06:	e7e9      	b.n	8003ddc <_printf_i+0x174>
 8003e08:	6823      	ldr	r3, [r4, #0]
 8003e0a:	f023 0320 	bic.w	r3, r3, #32
 8003e0e:	6023      	str	r3, [r4, #0]
 8003e10:	e7f6      	b.n	8003e00 <_printf_i+0x198>
 8003e12:	4616      	mov	r6, r2
 8003e14:	e7bd      	b.n	8003d92 <_printf_i+0x12a>
 8003e16:	6833      	ldr	r3, [r6, #0]
 8003e18:	6825      	ldr	r5, [r4, #0]
 8003e1a:	1d18      	adds	r0, r3, #4
 8003e1c:	6961      	ldr	r1, [r4, #20]
 8003e1e:	6030      	str	r0, [r6, #0]
 8003e20:	062e      	lsls	r6, r5, #24
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	d501      	bpl.n	8003e2a <_printf_i+0x1c2>
 8003e26:	6019      	str	r1, [r3, #0]
 8003e28:	e002      	b.n	8003e30 <_printf_i+0x1c8>
 8003e2a:	0668      	lsls	r0, r5, #25
 8003e2c:	d5fb      	bpl.n	8003e26 <_printf_i+0x1be>
 8003e2e:	8019      	strh	r1, [r3, #0]
 8003e30:	2300      	movs	r3, #0
 8003e32:	4616      	mov	r6, r2
 8003e34:	6123      	str	r3, [r4, #16]
 8003e36:	e7bc      	b.n	8003db2 <_printf_i+0x14a>
 8003e38:	6833      	ldr	r3, [r6, #0]
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	1d1a      	adds	r2, r3, #4
 8003e3e:	6032      	str	r2, [r6, #0]
 8003e40:	681e      	ldr	r6, [r3, #0]
 8003e42:	6862      	ldr	r2, [r4, #4]
 8003e44:	4630      	mov	r0, r6
 8003e46:	f000 f96b 	bl	8004120 <memchr>
 8003e4a:	b108      	cbz	r0, 8003e50 <_printf_i+0x1e8>
 8003e4c:	1b80      	subs	r0, r0, r6
 8003e4e:	6060      	str	r0, [r4, #4]
 8003e50:	6863      	ldr	r3, [r4, #4]
 8003e52:	6123      	str	r3, [r4, #16]
 8003e54:	2300      	movs	r3, #0
 8003e56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e5a:	e7aa      	b.n	8003db2 <_printf_i+0x14a>
 8003e5c:	4632      	mov	r2, r6
 8003e5e:	4649      	mov	r1, r9
 8003e60:	4640      	mov	r0, r8
 8003e62:	6923      	ldr	r3, [r4, #16]
 8003e64:	47d0      	blx	sl
 8003e66:	3001      	adds	r0, #1
 8003e68:	d0ad      	beq.n	8003dc6 <_printf_i+0x15e>
 8003e6a:	6823      	ldr	r3, [r4, #0]
 8003e6c:	079b      	lsls	r3, r3, #30
 8003e6e:	d413      	bmi.n	8003e98 <_printf_i+0x230>
 8003e70:	68e0      	ldr	r0, [r4, #12]
 8003e72:	9b03      	ldr	r3, [sp, #12]
 8003e74:	4298      	cmp	r0, r3
 8003e76:	bfb8      	it	lt
 8003e78:	4618      	movlt	r0, r3
 8003e7a:	e7a6      	b.n	8003dca <_printf_i+0x162>
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	4632      	mov	r2, r6
 8003e80:	4649      	mov	r1, r9
 8003e82:	4640      	mov	r0, r8
 8003e84:	47d0      	blx	sl
 8003e86:	3001      	adds	r0, #1
 8003e88:	d09d      	beq.n	8003dc6 <_printf_i+0x15e>
 8003e8a:	3501      	adds	r5, #1
 8003e8c:	68e3      	ldr	r3, [r4, #12]
 8003e8e:	9903      	ldr	r1, [sp, #12]
 8003e90:	1a5b      	subs	r3, r3, r1
 8003e92:	42ab      	cmp	r3, r5
 8003e94:	dcf2      	bgt.n	8003e7c <_printf_i+0x214>
 8003e96:	e7eb      	b.n	8003e70 <_printf_i+0x208>
 8003e98:	2500      	movs	r5, #0
 8003e9a:	f104 0619 	add.w	r6, r4, #25
 8003e9e:	e7f5      	b.n	8003e8c <_printf_i+0x224>
 8003ea0:	080043cb 	.word	0x080043cb
 8003ea4:	080043dc 	.word	0x080043dc

08003ea8 <__sflush_r>:
 8003ea8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eae:	0716      	lsls	r6, r2, #28
 8003eb0:	4605      	mov	r5, r0
 8003eb2:	460c      	mov	r4, r1
 8003eb4:	d454      	bmi.n	8003f60 <__sflush_r+0xb8>
 8003eb6:	684b      	ldr	r3, [r1, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	dc02      	bgt.n	8003ec2 <__sflush_r+0x1a>
 8003ebc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	dd48      	ble.n	8003f54 <__sflush_r+0xac>
 8003ec2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003ec4:	2e00      	cmp	r6, #0
 8003ec6:	d045      	beq.n	8003f54 <__sflush_r+0xac>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003ece:	682f      	ldr	r7, [r5, #0]
 8003ed0:	6a21      	ldr	r1, [r4, #32]
 8003ed2:	602b      	str	r3, [r5, #0]
 8003ed4:	d030      	beq.n	8003f38 <__sflush_r+0x90>
 8003ed6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003ed8:	89a3      	ldrh	r3, [r4, #12]
 8003eda:	0759      	lsls	r1, r3, #29
 8003edc:	d505      	bpl.n	8003eea <__sflush_r+0x42>
 8003ede:	6863      	ldr	r3, [r4, #4]
 8003ee0:	1ad2      	subs	r2, r2, r3
 8003ee2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003ee4:	b10b      	cbz	r3, 8003eea <__sflush_r+0x42>
 8003ee6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003ee8:	1ad2      	subs	r2, r2, r3
 8003eea:	2300      	movs	r3, #0
 8003eec:	4628      	mov	r0, r5
 8003eee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003ef0:	6a21      	ldr	r1, [r4, #32]
 8003ef2:	47b0      	blx	r6
 8003ef4:	1c43      	adds	r3, r0, #1
 8003ef6:	89a3      	ldrh	r3, [r4, #12]
 8003ef8:	d106      	bne.n	8003f08 <__sflush_r+0x60>
 8003efa:	6829      	ldr	r1, [r5, #0]
 8003efc:	291d      	cmp	r1, #29
 8003efe:	d82b      	bhi.n	8003f58 <__sflush_r+0xb0>
 8003f00:	4a28      	ldr	r2, [pc, #160]	@ (8003fa4 <__sflush_r+0xfc>)
 8003f02:	410a      	asrs	r2, r1
 8003f04:	07d6      	lsls	r6, r2, #31
 8003f06:	d427      	bmi.n	8003f58 <__sflush_r+0xb0>
 8003f08:	2200      	movs	r2, #0
 8003f0a:	6062      	str	r2, [r4, #4]
 8003f0c:	6922      	ldr	r2, [r4, #16]
 8003f0e:	04d9      	lsls	r1, r3, #19
 8003f10:	6022      	str	r2, [r4, #0]
 8003f12:	d504      	bpl.n	8003f1e <__sflush_r+0x76>
 8003f14:	1c42      	adds	r2, r0, #1
 8003f16:	d101      	bne.n	8003f1c <__sflush_r+0x74>
 8003f18:	682b      	ldr	r3, [r5, #0]
 8003f1a:	b903      	cbnz	r3, 8003f1e <__sflush_r+0x76>
 8003f1c:	6560      	str	r0, [r4, #84]	@ 0x54
 8003f1e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003f20:	602f      	str	r7, [r5, #0]
 8003f22:	b1b9      	cbz	r1, 8003f54 <__sflush_r+0xac>
 8003f24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003f28:	4299      	cmp	r1, r3
 8003f2a:	d002      	beq.n	8003f32 <__sflush_r+0x8a>
 8003f2c:	4628      	mov	r0, r5
 8003f2e:	f7ff fbf3 	bl	8003718 <_free_r>
 8003f32:	2300      	movs	r3, #0
 8003f34:	6363      	str	r3, [r4, #52]	@ 0x34
 8003f36:	e00d      	b.n	8003f54 <__sflush_r+0xac>
 8003f38:	2301      	movs	r3, #1
 8003f3a:	4628      	mov	r0, r5
 8003f3c:	47b0      	blx	r6
 8003f3e:	4602      	mov	r2, r0
 8003f40:	1c50      	adds	r0, r2, #1
 8003f42:	d1c9      	bne.n	8003ed8 <__sflush_r+0x30>
 8003f44:	682b      	ldr	r3, [r5, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0c6      	beq.n	8003ed8 <__sflush_r+0x30>
 8003f4a:	2b1d      	cmp	r3, #29
 8003f4c:	d001      	beq.n	8003f52 <__sflush_r+0xaa>
 8003f4e:	2b16      	cmp	r3, #22
 8003f50:	d11d      	bne.n	8003f8e <__sflush_r+0xe6>
 8003f52:	602f      	str	r7, [r5, #0]
 8003f54:	2000      	movs	r0, #0
 8003f56:	e021      	b.n	8003f9c <__sflush_r+0xf4>
 8003f58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f5c:	b21b      	sxth	r3, r3
 8003f5e:	e01a      	b.n	8003f96 <__sflush_r+0xee>
 8003f60:	690f      	ldr	r7, [r1, #16]
 8003f62:	2f00      	cmp	r7, #0
 8003f64:	d0f6      	beq.n	8003f54 <__sflush_r+0xac>
 8003f66:	0793      	lsls	r3, r2, #30
 8003f68:	bf18      	it	ne
 8003f6a:	2300      	movne	r3, #0
 8003f6c:	680e      	ldr	r6, [r1, #0]
 8003f6e:	bf08      	it	eq
 8003f70:	694b      	ldreq	r3, [r1, #20]
 8003f72:	1bf6      	subs	r6, r6, r7
 8003f74:	600f      	str	r7, [r1, #0]
 8003f76:	608b      	str	r3, [r1, #8]
 8003f78:	2e00      	cmp	r6, #0
 8003f7a:	ddeb      	ble.n	8003f54 <__sflush_r+0xac>
 8003f7c:	4633      	mov	r3, r6
 8003f7e:	463a      	mov	r2, r7
 8003f80:	4628      	mov	r0, r5
 8003f82:	6a21      	ldr	r1, [r4, #32]
 8003f84:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003f88:	47e0      	blx	ip
 8003f8a:	2800      	cmp	r0, #0
 8003f8c:	dc07      	bgt.n	8003f9e <__sflush_r+0xf6>
 8003f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f9a:	81a3      	strh	r3, [r4, #12]
 8003f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f9e:	4407      	add	r7, r0
 8003fa0:	1a36      	subs	r6, r6, r0
 8003fa2:	e7e9      	b.n	8003f78 <__sflush_r+0xd0>
 8003fa4:	dfbffffe 	.word	0xdfbffffe

08003fa8 <_fflush_r>:
 8003fa8:	b538      	push	{r3, r4, r5, lr}
 8003faa:	690b      	ldr	r3, [r1, #16]
 8003fac:	4605      	mov	r5, r0
 8003fae:	460c      	mov	r4, r1
 8003fb0:	b913      	cbnz	r3, 8003fb8 <_fflush_r+0x10>
 8003fb2:	2500      	movs	r5, #0
 8003fb4:	4628      	mov	r0, r5
 8003fb6:	bd38      	pop	{r3, r4, r5, pc}
 8003fb8:	b118      	cbz	r0, 8003fc2 <_fflush_r+0x1a>
 8003fba:	6a03      	ldr	r3, [r0, #32]
 8003fbc:	b90b      	cbnz	r3, 8003fc2 <_fflush_r+0x1a>
 8003fbe:	f7ff f9b1 	bl	8003324 <__sinit>
 8003fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0f3      	beq.n	8003fb2 <_fflush_r+0xa>
 8003fca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003fcc:	07d0      	lsls	r0, r2, #31
 8003fce:	d404      	bmi.n	8003fda <_fflush_r+0x32>
 8003fd0:	0599      	lsls	r1, r3, #22
 8003fd2:	d402      	bmi.n	8003fda <_fflush_r+0x32>
 8003fd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003fd6:	f7ff fb9c 	bl	8003712 <__retarget_lock_acquire_recursive>
 8003fda:	4628      	mov	r0, r5
 8003fdc:	4621      	mov	r1, r4
 8003fde:	f7ff ff63 	bl	8003ea8 <__sflush_r>
 8003fe2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003fe4:	4605      	mov	r5, r0
 8003fe6:	07da      	lsls	r2, r3, #31
 8003fe8:	d4e4      	bmi.n	8003fb4 <_fflush_r+0xc>
 8003fea:	89a3      	ldrh	r3, [r4, #12]
 8003fec:	059b      	lsls	r3, r3, #22
 8003fee:	d4e1      	bmi.n	8003fb4 <_fflush_r+0xc>
 8003ff0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ff2:	f7ff fb8f 	bl	8003714 <__retarget_lock_release_recursive>
 8003ff6:	e7dd      	b.n	8003fb4 <_fflush_r+0xc>

08003ff8 <__swhatbuf_r>:
 8003ff8:	b570      	push	{r4, r5, r6, lr}
 8003ffa:	460c      	mov	r4, r1
 8003ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004000:	4615      	mov	r5, r2
 8004002:	2900      	cmp	r1, #0
 8004004:	461e      	mov	r6, r3
 8004006:	b096      	sub	sp, #88	@ 0x58
 8004008:	da0c      	bge.n	8004024 <__swhatbuf_r+0x2c>
 800400a:	89a3      	ldrh	r3, [r4, #12]
 800400c:	2100      	movs	r1, #0
 800400e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004012:	bf14      	ite	ne
 8004014:	2340      	movne	r3, #64	@ 0x40
 8004016:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800401a:	2000      	movs	r0, #0
 800401c:	6031      	str	r1, [r6, #0]
 800401e:	602b      	str	r3, [r5, #0]
 8004020:	b016      	add	sp, #88	@ 0x58
 8004022:	bd70      	pop	{r4, r5, r6, pc}
 8004024:	466a      	mov	r2, sp
 8004026:	f000 f849 	bl	80040bc <_fstat_r>
 800402a:	2800      	cmp	r0, #0
 800402c:	dbed      	blt.n	800400a <__swhatbuf_r+0x12>
 800402e:	9901      	ldr	r1, [sp, #4]
 8004030:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004034:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004038:	4259      	negs	r1, r3
 800403a:	4159      	adcs	r1, r3
 800403c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004040:	e7eb      	b.n	800401a <__swhatbuf_r+0x22>

08004042 <__smakebuf_r>:
 8004042:	898b      	ldrh	r3, [r1, #12]
 8004044:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004046:	079d      	lsls	r5, r3, #30
 8004048:	4606      	mov	r6, r0
 800404a:	460c      	mov	r4, r1
 800404c:	d507      	bpl.n	800405e <__smakebuf_r+0x1c>
 800404e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004052:	6023      	str	r3, [r4, #0]
 8004054:	6123      	str	r3, [r4, #16]
 8004056:	2301      	movs	r3, #1
 8004058:	6163      	str	r3, [r4, #20]
 800405a:	b003      	add	sp, #12
 800405c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800405e:	466a      	mov	r2, sp
 8004060:	ab01      	add	r3, sp, #4
 8004062:	f7ff ffc9 	bl	8003ff8 <__swhatbuf_r>
 8004066:	9f00      	ldr	r7, [sp, #0]
 8004068:	4605      	mov	r5, r0
 800406a:	4639      	mov	r1, r7
 800406c:	4630      	mov	r0, r6
 800406e:	f7ff fbbd 	bl	80037ec <_malloc_r>
 8004072:	b948      	cbnz	r0, 8004088 <__smakebuf_r+0x46>
 8004074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004078:	059a      	lsls	r2, r3, #22
 800407a:	d4ee      	bmi.n	800405a <__smakebuf_r+0x18>
 800407c:	f023 0303 	bic.w	r3, r3, #3
 8004080:	f043 0302 	orr.w	r3, r3, #2
 8004084:	81a3      	strh	r3, [r4, #12]
 8004086:	e7e2      	b.n	800404e <__smakebuf_r+0xc>
 8004088:	89a3      	ldrh	r3, [r4, #12]
 800408a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800408e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004092:	81a3      	strh	r3, [r4, #12]
 8004094:	9b01      	ldr	r3, [sp, #4]
 8004096:	6020      	str	r0, [r4, #0]
 8004098:	b15b      	cbz	r3, 80040b2 <__smakebuf_r+0x70>
 800409a:	4630      	mov	r0, r6
 800409c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040a0:	f000 f81e 	bl	80040e0 <_isatty_r>
 80040a4:	b128      	cbz	r0, 80040b2 <__smakebuf_r+0x70>
 80040a6:	89a3      	ldrh	r3, [r4, #12]
 80040a8:	f023 0303 	bic.w	r3, r3, #3
 80040ac:	f043 0301 	orr.w	r3, r3, #1
 80040b0:	81a3      	strh	r3, [r4, #12]
 80040b2:	89a3      	ldrh	r3, [r4, #12]
 80040b4:	431d      	orrs	r5, r3
 80040b6:	81a5      	strh	r5, [r4, #12]
 80040b8:	e7cf      	b.n	800405a <__smakebuf_r+0x18>
	...

080040bc <_fstat_r>:
 80040bc:	b538      	push	{r3, r4, r5, lr}
 80040be:	2300      	movs	r3, #0
 80040c0:	4d06      	ldr	r5, [pc, #24]	@ (80040dc <_fstat_r+0x20>)
 80040c2:	4604      	mov	r4, r0
 80040c4:	4608      	mov	r0, r1
 80040c6:	4611      	mov	r1, r2
 80040c8:	602b      	str	r3, [r5, #0]
 80040ca:	f7fd f8e1 	bl	8001290 <_fstat>
 80040ce:	1c43      	adds	r3, r0, #1
 80040d0:	d102      	bne.n	80040d8 <_fstat_r+0x1c>
 80040d2:	682b      	ldr	r3, [r5, #0]
 80040d4:	b103      	cbz	r3, 80040d8 <_fstat_r+0x1c>
 80040d6:	6023      	str	r3, [r4, #0]
 80040d8:	bd38      	pop	{r3, r4, r5, pc}
 80040da:	bf00      	nop
 80040dc:	2000023c 	.word	0x2000023c

080040e0 <_isatty_r>:
 80040e0:	b538      	push	{r3, r4, r5, lr}
 80040e2:	2300      	movs	r3, #0
 80040e4:	4d05      	ldr	r5, [pc, #20]	@ (80040fc <_isatty_r+0x1c>)
 80040e6:	4604      	mov	r4, r0
 80040e8:	4608      	mov	r0, r1
 80040ea:	602b      	str	r3, [r5, #0]
 80040ec:	f7fd f8df 	bl	80012ae <_isatty>
 80040f0:	1c43      	adds	r3, r0, #1
 80040f2:	d102      	bne.n	80040fa <_isatty_r+0x1a>
 80040f4:	682b      	ldr	r3, [r5, #0]
 80040f6:	b103      	cbz	r3, 80040fa <_isatty_r+0x1a>
 80040f8:	6023      	str	r3, [r4, #0]
 80040fa:	bd38      	pop	{r3, r4, r5, pc}
 80040fc:	2000023c 	.word	0x2000023c

08004100 <_sbrk_r>:
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	2300      	movs	r3, #0
 8004104:	4d05      	ldr	r5, [pc, #20]	@ (800411c <_sbrk_r+0x1c>)
 8004106:	4604      	mov	r4, r0
 8004108:	4608      	mov	r0, r1
 800410a:	602b      	str	r3, [r5, #0]
 800410c:	f7fd f8e6 	bl	80012dc <_sbrk>
 8004110:	1c43      	adds	r3, r0, #1
 8004112:	d102      	bne.n	800411a <_sbrk_r+0x1a>
 8004114:	682b      	ldr	r3, [r5, #0]
 8004116:	b103      	cbz	r3, 800411a <_sbrk_r+0x1a>
 8004118:	6023      	str	r3, [r4, #0]
 800411a:	bd38      	pop	{r3, r4, r5, pc}
 800411c:	2000023c 	.word	0x2000023c

08004120 <memchr>:
 8004120:	4603      	mov	r3, r0
 8004122:	b510      	push	{r4, lr}
 8004124:	b2c9      	uxtb	r1, r1
 8004126:	4402      	add	r2, r0
 8004128:	4293      	cmp	r3, r2
 800412a:	4618      	mov	r0, r3
 800412c:	d101      	bne.n	8004132 <memchr+0x12>
 800412e:	2000      	movs	r0, #0
 8004130:	e003      	b.n	800413a <memchr+0x1a>
 8004132:	7804      	ldrb	r4, [r0, #0]
 8004134:	3301      	adds	r3, #1
 8004136:	428c      	cmp	r4, r1
 8004138:	d1f6      	bne.n	8004128 <memchr+0x8>
 800413a:	bd10      	pop	{r4, pc}

0800413c <_init>:
 800413c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413e:	bf00      	nop
 8004140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004142:	bc08      	pop	{r3}
 8004144:	469e      	mov	lr, r3
 8004146:	4770      	bx	lr

08004148 <_fini>:
 8004148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800414a:	bf00      	nop
 800414c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800414e:	bc08      	pop	{r3}
 8004150:	469e      	mov	lr, r3
 8004152:	4770      	bx	lr
