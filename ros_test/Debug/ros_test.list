
ros_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002180  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800228c  0800228c  0000328c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022b8  080022b8  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080022b8  080022b8  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022b8  080022b8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022b8  080022b8  000032b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080022bc  080022bc  000032bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080022c0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  080022cc  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  080022cc  000040fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006f82  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000177e  00000000  00000000  0000afb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  0000c738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000052a  00000000  00000000  0000ce10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000160ce  00000000  00000000  0000d33a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008c4c  00000000  00000000  00023408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e558  00000000  00000000  0002c054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aa5ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001988  00000000  00000000  000aa5f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000abf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002274 	.word	0x08002274

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002274 	.word	0x08002274

0800014c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000152:	4b10      	ldr	r3, [pc, #64]	@ (8000194 <MX_DMA_Init+0x48>)
 8000154:	695b      	ldr	r3, [r3, #20]
 8000156:	4a0f      	ldr	r2, [pc, #60]	@ (8000194 <MX_DMA_Init+0x48>)
 8000158:	f043 0301 	orr.w	r3, r3, #1
 800015c:	6153      	str	r3, [r2, #20]
 800015e:	4b0d      	ldr	r3, [pc, #52]	@ (8000194 <MX_DMA_Init+0x48>)
 8000160:	695b      	ldr	r3, [r3, #20]
 8000162:	f003 0301 	and.w	r3, r3, #1
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800016a:	2200      	movs	r2, #0
 800016c:	2100      	movs	r1, #0
 800016e:	200e      	movs	r0, #14
 8000170:	f000 fb43 	bl	80007fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000174:	200e      	movs	r0, #14
 8000176:	f000 fb5c 	bl	8000832 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800017a:	2200      	movs	r2, #0
 800017c:	2100      	movs	r1, #0
 800017e:	200f      	movs	r0, #15
 8000180:	f000 fb3b 	bl	80007fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000184:	200f      	movs	r0, #15
 8000186:	f000 fb54 	bl	8000832 <HAL_NVIC_EnableIRQ>

}
 800018a:	bf00      	nop
 800018c:	3708      	adds	r7, #8
 800018e:	46bd      	mov	sp, r7
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	40021000 	.word	0x40021000

08000198 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000198:	b480      	push	{r7}
 800019a:	b083      	sub	sp, #12
 800019c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800019e:	4b0e      	ldr	r3, [pc, #56]	@ (80001d8 <MX_GPIO_Init+0x40>)
 80001a0:	699b      	ldr	r3, [r3, #24]
 80001a2:	4a0d      	ldr	r2, [pc, #52]	@ (80001d8 <MX_GPIO_Init+0x40>)
 80001a4:	f043 0320 	orr.w	r3, r3, #32
 80001a8:	6193      	str	r3, [r2, #24]
 80001aa:	4b0b      	ldr	r3, [pc, #44]	@ (80001d8 <MX_GPIO_Init+0x40>)
 80001ac:	699b      	ldr	r3, [r3, #24]
 80001ae:	f003 0320 	and.w	r3, r3, #32
 80001b2:	607b      	str	r3, [r7, #4]
 80001b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001b6:	4b08      	ldr	r3, [pc, #32]	@ (80001d8 <MX_GPIO_Init+0x40>)
 80001b8:	699b      	ldr	r3, [r3, #24]
 80001ba:	4a07      	ldr	r2, [pc, #28]	@ (80001d8 <MX_GPIO_Init+0x40>)
 80001bc:	f043 0304 	orr.w	r3, r3, #4
 80001c0:	6193      	str	r3, [r2, #24]
 80001c2:	4b05      	ldr	r3, [pc, #20]	@ (80001d8 <MX_GPIO_Init+0x40>)
 80001c4:	699b      	ldr	r3, [r3, #24]
 80001c6:	f003 0304 	and.w	r3, r3, #4
 80001ca:	603b      	str	r3, [r7, #0]
 80001cc:	683b      	ldr	r3, [r7, #0]

}
 80001ce:	bf00      	nop
 80001d0:	370c      	adds	r7, #12
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	40021000 	.word	0x40021000

080001dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e0:	f000 f9d2 	bl	8000588 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e4:	f000 f808 	bl	80001f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e8:	f7ff ffd6 	bl	8000198 <MX_GPIO_Init>
  MX_DMA_Init();
 80001ec:	f7ff ffae 	bl	800014c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80001f0:	f000 f8d0 	bl	8000394 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f4:	bf00      	nop
 80001f6:	e7fd      	b.n	80001f4 <main+0x18>

080001f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b090      	sub	sp, #64	@ 0x40
 80001fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fe:	f107 0318 	add.w	r3, r7, #24
 8000202:	2228      	movs	r2, #40	@ 0x28
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f002 f808 	bl	800221c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]
 8000218:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800021a:	2301      	movs	r3, #1
 800021c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800021e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000222:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000224:	2300      	movs	r3, #0
 8000226:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000228:	2301      	movs	r3, #1
 800022a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800022c:	2302      	movs	r3, #2
 800022e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000230:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000234:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000236:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800023a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023c:	f107 0318 	add.w	r3, r7, #24
 8000240:	4618      	mov	r0, r3
 8000242:	f000 fea9 	bl	8000f98 <HAL_RCC_OscConfig>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800024c:	f000 f819 	bl	8000282 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000250:	230f      	movs	r3, #15
 8000252:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000254:	2302      	movs	r3, #2
 8000256:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800025c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000260:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	2102      	movs	r1, #2
 800026a:	4618      	mov	r0, r3
 800026c:	f001 f916 	bl	800149c <HAL_RCC_ClockConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000276:	f000 f804 	bl	8000282 <Error_Handler>
  }
}
 800027a:	bf00      	nop
 800027c:	3740      	adds	r7, #64	@ 0x40
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}

08000282 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000282:	b480      	push	{r7}
 8000284:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000286:	b672      	cpsid	i
}
 8000288:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800028a:	bf00      	nop
 800028c:	e7fd      	b.n	800028a <Error_Handler+0x8>
	...

08000290 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000290:	b480      	push	{r7}
 8000292:	b085      	sub	sp, #20
 8000294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000296:	4b15      	ldr	r3, [pc, #84]	@ (80002ec <HAL_MspInit+0x5c>)
 8000298:	699b      	ldr	r3, [r3, #24]
 800029a:	4a14      	ldr	r2, [pc, #80]	@ (80002ec <HAL_MspInit+0x5c>)
 800029c:	f043 0301 	orr.w	r3, r3, #1
 80002a0:	6193      	str	r3, [r2, #24]
 80002a2:	4b12      	ldr	r3, [pc, #72]	@ (80002ec <HAL_MspInit+0x5c>)
 80002a4:	699b      	ldr	r3, [r3, #24]
 80002a6:	f003 0301 	and.w	r3, r3, #1
 80002aa:	60bb      	str	r3, [r7, #8]
 80002ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002ae:	4b0f      	ldr	r3, [pc, #60]	@ (80002ec <HAL_MspInit+0x5c>)
 80002b0:	69db      	ldr	r3, [r3, #28]
 80002b2:	4a0e      	ldr	r2, [pc, #56]	@ (80002ec <HAL_MspInit+0x5c>)
 80002b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002b8:	61d3      	str	r3, [r2, #28]
 80002ba:	4b0c      	ldr	r3, [pc, #48]	@ (80002ec <HAL_MspInit+0x5c>)
 80002bc:	69db      	ldr	r3, [r3, #28]
 80002be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80002c2:	607b      	str	r3, [r7, #4]
 80002c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002c6:	4b0a      	ldr	r3, [pc, #40]	@ (80002f0 <HAL_MspInit+0x60>)
 80002c8:	685b      	ldr	r3, [r3, #4]
 80002ca:	60fb      	str	r3, [r7, #12]
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80002da:	60fb      	str	r3, [r7, #12]
 80002dc:	4a04      	ldr	r2, [pc, #16]	@ (80002f0 <HAL_MspInit+0x60>)
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002e2:	bf00      	nop
 80002e4:	3714      	adds	r7, #20
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	40021000 	.word	0x40021000
 80002f0:	40010000 	.word	0x40010000

080002f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002f8:	bf00      	nop
 80002fa:	e7fd      	b.n	80002f8 <NMI_Handler+0x4>

080002fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000300:	bf00      	nop
 8000302:	e7fd      	b.n	8000300 <HardFault_Handler+0x4>

08000304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000308:	bf00      	nop
 800030a:	e7fd      	b.n	8000308 <MemManage_Handler+0x4>

0800030c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000310:	bf00      	nop
 8000312:	e7fd      	b.n	8000310 <BusFault_Handler+0x4>

08000314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000318:	bf00      	nop
 800031a:	e7fd      	b.n	8000318 <UsageFault_Handler+0x4>

0800031c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	bc80      	pop	{r7}
 8000326:	4770      	bx	lr

08000328 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800032c:	bf00      	nop
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr

08000334 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	bc80      	pop	{r7}
 800033e:	4770      	bx	lr

08000340 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000344:	f000 f966 	bl	8000614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000348:	bf00      	nop
 800034a:	bd80      	pop	{r7, pc}

0800034c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000350:	4802      	ldr	r0, [pc, #8]	@ (800035c <DMA1_Channel4_IRQHandler+0x10>)
 8000352:	f000 fb97 	bl	8000a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	200000b4 	.word	0x200000b4

08000360 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000364:	4802      	ldr	r0, [pc, #8]	@ (8000370 <DMA1_Channel5_IRQHandler+0x10>)
 8000366:	f000 fb8d 	bl	8000a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	20000070 	.word	0x20000070

08000374 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000378:	4802      	ldr	r0, [pc, #8]	@ (8000384 <USART1_IRQHandler+0x10>)
 800037a:	f001 fa6d 	bl	8001858 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	20000028 	.word	0x20000028

08000388 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr

08000394 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000398:	4b11      	ldr	r3, [pc, #68]	@ (80003e0 <MX_USART1_UART_Init+0x4c>)
 800039a:	4a12      	ldr	r2, [pc, #72]	@ (80003e4 <MX_USART1_UART_Init+0x50>)
 800039c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800039e:	4b10      	ldr	r3, [pc, #64]	@ (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003a0:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80003a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003a6:	4b0e      	ldr	r3, [pc, #56]	@ (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003ac:	4b0c      	ldr	r3, [pc, #48]	@ (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003b2:	4b0b      	ldr	r3, [pc, #44]	@ (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003b8:	4b09      	ldr	r3, [pc, #36]	@ (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003ba:	220c      	movs	r2, #12
 80003bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003be:	4b08      	ldr	r3, [pc, #32]	@ (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003c4:	4b06      	ldr	r3, [pc, #24]	@ (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003ca:	4805      	ldr	r0, [pc, #20]	@ (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003cc:	f001 f9f4 	bl	80017b8 <HAL_UART_Init>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003d6:	f7ff ff54 	bl	8000282 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20000028 	.word	0x20000028
 80003e4:	40013800 	.word	0x40013800

080003e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f0:	f107 0310 	add.w	r3, r7, #16
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	605a      	str	r2, [r3, #4]
 80003fa:	609a      	str	r2, [r3, #8]
 80003fc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4a47      	ldr	r2, [pc, #284]	@ (8000520 <HAL_UART_MspInit+0x138>)
 8000404:	4293      	cmp	r3, r2
 8000406:	f040 8086 	bne.w	8000516 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800040a:	4b46      	ldr	r3, [pc, #280]	@ (8000524 <HAL_UART_MspInit+0x13c>)
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	4a45      	ldr	r2, [pc, #276]	@ (8000524 <HAL_UART_MspInit+0x13c>)
 8000410:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000414:	6193      	str	r3, [r2, #24]
 8000416:	4b43      	ldr	r3, [pc, #268]	@ (8000524 <HAL_UART_MspInit+0x13c>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000422:	4b40      	ldr	r3, [pc, #256]	@ (8000524 <HAL_UART_MspInit+0x13c>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	4a3f      	ldr	r2, [pc, #252]	@ (8000524 <HAL_UART_MspInit+0x13c>)
 8000428:	f043 0304 	orr.w	r3, r3, #4
 800042c:	6193      	str	r3, [r2, #24]
 800042e:	4b3d      	ldr	r3, [pc, #244]	@ (8000524 <HAL_UART_MspInit+0x13c>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	f003 0304 	and.w	r3, r3, #4
 8000436:	60bb      	str	r3, [r7, #8]
 8000438:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800043a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800043e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000440:	2302      	movs	r3, #2
 8000442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000444:	2303      	movs	r3, #3
 8000446:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000448:	f107 0310 	add.w	r3, r7, #16
 800044c:	4619      	mov	r1, r3
 800044e:	4836      	ldr	r0, [pc, #216]	@ (8000528 <HAL_UART_MspInit+0x140>)
 8000450:	f000 fc1e 	bl	8000c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000454:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000458:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800045a:	2300      	movs	r3, #0
 800045c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045e:	2300      	movs	r3, #0
 8000460:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000462:	f107 0310 	add.w	r3, r7, #16
 8000466:	4619      	mov	r1, r3
 8000468:	482f      	ldr	r0, [pc, #188]	@ (8000528 <HAL_UART_MspInit+0x140>)
 800046a:	f000 fc11 	bl	8000c90 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800046e:	4b2f      	ldr	r3, [pc, #188]	@ (800052c <HAL_UART_MspInit+0x144>)
 8000470:	4a2f      	ldr	r2, [pc, #188]	@ (8000530 <HAL_UART_MspInit+0x148>)
 8000472:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000474:	4b2d      	ldr	r3, [pc, #180]	@ (800052c <HAL_UART_MspInit+0x144>)
 8000476:	2200      	movs	r2, #0
 8000478:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800047a:	4b2c      	ldr	r3, [pc, #176]	@ (800052c <HAL_UART_MspInit+0x144>)
 800047c:	2200      	movs	r2, #0
 800047e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000480:	4b2a      	ldr	r3, [pc, #168]	@ (800052c <HAL_UART_MspInit+0x144>)
 8000482:	2280      	movs	r2, #128	@ 0x80
 8000484:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000486:	4b29      	ldr	r3, [pc, #164]	@ (800052c <HAL_UART_MspInit+0x144>)
 8000488:	2200      	movs	r2, #0
 800048a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800048c:	4b27      	ldr	r3, [pc, #156]	@ (800052c <HAL_UART_MspInit+0x144>)
 800048e:	2200      	movs	r2, #0
 8000490:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000492:	4b26      	ldr	r3, [pc, #152]	@ (800052c <HAL_UART_MspInit+0x144>)
 8000494:	2200      	movs	r2, #0
 8000496:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000498:	4b24      	ldr	r3, [pc, #144]	@ (800052c <HAL_UART_MspInit+0x144>)
 800049a:	2200      	movs	r2, #0
 800049c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800049e:	4823      	ldr	r0, [pc, #140]	@ (800052c <HAL_UART_MspInit+0x144>)
 80004a0:	f000 f9e2 	bl	8000868 <HAL_DMA_Init>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80004aa:	f7ff feea 	bl	8000282 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4a1e      	ldr	r2, [pc, #120]	@ (800052c <HAL_UART_MspInit+0x144>)
 80004b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80004b4:	4a1d      	ldr	r2, [pc, #116]	@ (800052c <HAL_UART_MspInit+0x144>)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80004ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000534 <HAL_UART_MspInit+0x14c>)
 80004bc:	4a1e      	ldr	r2, [pc, #120]	@ (8000538 <HAL_UART_MspInit+0x150>)
 80004be:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80004c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000534 <HAL_UART_MspInit+0x14c>)
 80004c2:	2210      	movs	r2, #16
 80004c4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80004c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000534 <HAL_UART_MspInit+0x14c>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80004cc:	4b19      	ldr	r3, [pc, #100]	@ (8000534 <HAL_UART_MspInit+0x14c>)
 80004ce:	2280      	movs	r2, #128	@ 0x80
 80004d0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80004d2:	4b18      	ldr	r3, [pc, #96]	@ (8000534 <HAL_UART_MspInit+0x14c>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80004d8:	4b16      	ldr	r3, [pc, #88]	@ (8000534 <HAL_UART_MspInit+0x14c>)
 80004da:	2200      	movs	r2, #0
 80004dc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80004de:	4b15      	ldr	r3, [pc, #84]	@ (8000534 <HAL_UART_MspInit+0x14c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80004e4:	4b13      	ldr	r3, [pc, #76]	@ (8000534 <HAL_UART_MspInit+0x14c>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80004ea:	4812      	ldr	r0, [pc, #72]	@ (8000534 <HAL_UART_MspInit+0x14c>)
 80004ec:	f000 f9bc 	bl	8000868 <HAL_DMA_Init>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80004f6:	f7ff fec4 	bl	8000282 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000534 <HAL_UART_MspInit+0x14c>)
 80004fe:	639a      	str	r2, [r3, #56]	@ 0x38
 8000500:	4a0c      	ldr	r2, [pc, #48]	@ (8000534 <HAL_UART_MspInit+0x14c>)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000506:	2200      	movs	r2, #0
 8000508:	2100      	movs	r1, #0
 800050a:	2025      	movs	r0, #37	@ 0x25
 800050c:	f000 f975 	bl	80007fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000510:	2025      	movs	r0, #37	@ 0x25
 8000512:	f000 f98e 	bl	8000832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000516:	bf00      	nop
 8000518:	3720      	adds	r7, #32
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40013800 	.word	0x40013800
 8000524:	40021000 	.word	0x40021000
 8000528:	40010800 	.word	0x40010800
 800052c:	20000070 	.word	0x20000070
 8000530:	40020058 	.word	0x40020058
 8000534:	200000b4 	.word	0x200000b4
 8000538:	40020044 	.word	0x40020044

0800053c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800053c:	f7ff ff24 	bl	8000388 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000540:	480b      	ldr	r0, [pc, #44]	@ (8000570 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000542:	490c      	ldr	r1, [pc, #48]	@ (8000574 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000544:	4a0c      	ldr	r2, [pc, #48]	@ (8000578 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000548:	e002      	b.n	8000550 <LoopCopyDataInit>

0800054a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800054a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800054c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800054e:	3304      	adds	r3, #4

08000550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000554:	d3f9      	bcc.n	800054a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000556:	4a09      	ldr	r2, [pc, #36]	@ (800057c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000558:	4c09      	ldr	r4, [pc, #36]	@ (8000580 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800055a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800055c:	e001      	b.n	8000562 <LoopFillZerobss>

0800055e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800055e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000560:	3204      	adds	r2, #4

08000562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000564:	d3fb      	bcc.n	800055e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000566:	f001 fe61 	bl	800222c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800056a:	f7ff fe37 	bl	80001dc <main>
  bx lr
 800056e:	4770      	bx	lr
  ldr r0, =_sdata
 8000570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000574:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000578:	080022c0 	.word	0x080022c0
  ldr r2, =_sbss
 800057c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000580:	200000fc 	.word	0x200000fc

08000584 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000584:	e7fe      	b.n	8000584 <ADC1_2_IRQHandler>
	...

08000588 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800058c:	4b08      	ldr	r3, [pc, #32]	@ (80005b0 <HAL_Init+0x28>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a07      	ldr	r2, [pc, #28]	@ (80005b0 <HAL_Init+0x28>)
 8000592:	f043 0310 	orr.w	r3, r3, #16
 8000596:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000598:	2003      	movs	r0, #3
 800059a:	f000 f923 	bl	80007e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800059e:	200f      	movs	r0, #15
 80005a0:	f000 f808 	bl	80005b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a4:	f7ff fe74 	bl	8000290 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40022000 	.word	0x40022000

080005b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005bc:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <HAL_InitTick+0x54>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b12      	ldr	r3, [pc, #72]	@ (800060c <HAL_InitTick+0x58>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	4619      	mov	r1, r3
 80005c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 f93b 	bl	800084e <HAL_SYSTICK_Config>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005de:	2301      	movs	r3, #1
 80005e0:	e00e      	b.n	8000600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2b0f      	cmp	r3, #15
 80005e6:	d80a      	bhi.n	80005fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e8:	2200      	movs	r2, #0
 80005ea:	6879      	ldr	r1, [r7, #4]
 80005ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80005f0:	f000 f903 	bl	80007fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f4:	4a06      	ldr	r2, [pc, #24]	@ (8000610 <HAL_InitTick+0x5c>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005fa:	2300      	movs	r3, #0
 80005fc:	e000      	b.n	8000600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
}
 8000600:	4618      	mov	r0, r3
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000000 	.word	0x20000000
 800060c:	20000008 	.word	0x20000008
 8000610:	20000004 	.word	0x20000004

08000614 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000618:	4b05      	ldr	r3, [pc, #20]	@ (8000630 <HAL_IncTick+0x1c>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	4b05      	ldr	r3, [pc, #20]	@ (8000634 <HAL_IncTick+0x20>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4413      	add	r3, r2
 8000624:	4a03      	ldr	r2, [pc, #12]	@ (8000634 <HAL_IncTick+0x20>)
 8000626:	6013      	str	r3, [r2, #0]
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr
 8000630:	20000008 	.word	0x20000008
 8000634:	200000f8 	.word	0x200000f8

08000638 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return uwTick;
 800063c:	4b02      	ldr	r3, [pc, #8]	@ (8000648 <HAL_GetTick+0x10>)
 800063e:	681b      	ldr	r3, [r3, #0]
}
 8000640:	4618      	mov	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	200000f8 	.word	0x200000f8

0800064c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f003 0307 	and.w	r3, r3, #7
 800065a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800065c:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <__NVIC_SetPriorityGrouping+0x44>)
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000662:	68ba      	ldr	r2, [r7, #8]
 8000664:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000668:	4013      	ands	r3, r2
 800066a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000674:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000678:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800067c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800067e:	4a04      	ldr	r2, [pc, #16]	@ (8000690 <__NVIC_SetPriorityGrouping+0x44>)
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	60d3      	str	r3, [r2, #12]
}
 8000684:	bf00      	nop
 8000686:	3714      	adds	r7, #20
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000698:	4b04      	ldr	r3, [pc, #16]	@ (80006ac <__NVIC_GetPriorityGrouping+0x18>)
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	0a1b      	lsrs	r3, r3, #8
 800069e:	f003 0307 	and.w	r3, r3, #7
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	db0b      	blt.n	80006da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	f003 021f 	and.w	r2, r3, #31
 80006c8:	4906      	ldr	r1, [pc, #24]	@ (80006e4 <__NVIC_EnableIRQ+0x34>)
 80006ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ce:	095b      	lsrs	r3, r3, #5
 80006d0:	2001      	movs	r0, #1
 80006d2:	fa00 f202 	lsl.w	r2, r0, r2
 80006d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr
 80006e4:	e000e100 	.word	0xe000e100

080006e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	6039      	str	r1, [r7, #0]
 80006f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	db0a      	blt.n	8000712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	490c      	ldr	r1, [pc, #48]	@ (8000734 <__NVIC_SetPriority+0x4c>)
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	0112      	lsls	r2, r2, #4
 8000708:	b2d2      	uxtb	r2, r2
 800070a:	440b      	add	r3, r1
 800070c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000710:	e00a      	b.n	8000728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4908      	ldr	r1, [pc, #32]	@ (8000738 <__NVIC_SetPriority+0x50>)
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	f003 030f 	and.w	r3, r3, #15
 800071e:	3b04      	subs	r3, #4
 8000720:	0112      	lsls	r2, r2, #4
 8000722:	b2d2      	uxtb	r2, r2
 8000724:	440b      	add	r3, r1
 8000726:	761a      	strb	r2, [r3, #24]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000e100 	.word	0xe000e100
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800073c:	b480      	push	{r7}
 800073e:	b089      	sub	sp, #36	@ 0x24
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	f1c3 0307 	rsb	r3, r3, #7
 8000756:	2b04      	cmp	r3, #4
 8000758:	bf28      	it	cs
 800075a:	2304      	movcs	r3, #4
 800075c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3304      	adds	r3, #4
 8000762:	2b06      	cmp	r3, #6
 8000764:	d902      	bls.n	800076c <NVIC_EncodePriority+0x30>
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	3b03      	subs	r3, #3
 800076a:	e000      	b.n	800076e <NVIC_EncodePriority+0x32>
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000770:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	fa02 f303 	lsl.w	r3, r2, r3
 800077a:	43da      	mvns	r2, r3
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	401a      	ands	r2, r3
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000784:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	fa01 f303 	lsl.w	r3, r1, r3
 800078e:	43d9      	mvns	r1, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000794:	4313      	orrs	r3, r2
         );
}
 8000796:	4618      	mov	r0, r3
 8000798:	3724      	adds	r7, #36	@ 0x24
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr

080007a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	3b01      	subs	r3, #1
 80007ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007b0:	d301      	bcc.n	80007b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007b2:	2301      	movs	r3, #1
 80007b4:	e00f      	b.n	80007d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007b6:	4a0a      	ldr	r2, [pc, #40]	@ (80007e0 <SysTick_Config+0x40>)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3b01      	subs	r3, #1
 80007bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007be:	210f      	movs	r1, #15
 80007c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80007c4:	f7ff ff90 	bl	80006e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c8:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <SysTick_Config+0x40>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ce:	4b04      	ldr	r3, [pc, #16]	@ (80007e0 <SysTick_Config+0x40>)
 80007d0:	2207      	movs	r2, #7
 80007d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	e000e010 	.word	0xe000e010

080007e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f7ff ff2d 	bl	800064c <__NVIC_SetPriorityGrouping>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b086      	sub	sp, #24
 80007fe:	af00      	add	r7, sp, #0
 8000800:	4603      	mov	r3, r0
 8000802:	60b9      	str	r1, [r7, #8]
 8000804:	607a      	str	r2, [r7, #4]
 8000806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800080c:	f7ff ff42 	bl	8000694 <__NVIC_GetPriorityGrouping>
 8000810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	68b9      	ldr	r1, [r7, #8]
 8000816:	6978      	ldr	r0, [r7, #20]
 8000818:	f7ff ff90 	bl	800073c <NVIC_EncodePriority>
 800081c:	4602      	mov	r2, r0
 800081e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000822:	4611      	mov	r1, r2
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff5f 	bl	80006e8 <__NVIC_SetPriority>
}
 800082a:	bf00      	nop
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800083c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ff35 	bl	80006b0 <__NVIC_EnableIRQ>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b082      	sub	sp, #8
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f7ff ffa2 	bl	80007a0 <SysTick_Config>
 800085c:	4603      	mov	r3, r0
}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d101      	bne.n	800087e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
 800087c:	e043      	b.n	8000906 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	461a      	mov	r2, r3
 8000884:	4b22      	ldr	r3, [pc, #136]	@ (8000910 <HAL_DMA_Init+0xa8>)
 8000886:	4413      	add	r3, r2
 8000888:	4a22      	ldr	r2, [pc, #136]	@ (8000914 <HAL_DMA_Init+0xac>)
 800088a:	fba2 2303 	umull	r2, r3, r2, r3
 800088e:	091b      	lsrs	r3, r3, #4
 8000890:	009a      	lsls	r2, r3, #2
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4a1f      	ldr	r2, [pc, #124]	@ (8000918 <HAL_DMA_Init+0xb0>)
 800089a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2202      	movs	r2, #2
 80008a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80008b2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80008b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80008c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	68db      	ldr	r3, [r3, #12]
 80008c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80008e0:	68fa      	ldr	r2, [r7, #12]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2200      	movs	r2, #0
 80008f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2201      	movs	r2, #1
 80008f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2200      	movs	r2, #0
 8000900:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	3714      	adds	r7, #20
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	bffdfff8 	.word	0xbffdfff8
 8000914:	cccccccd 	.word	0xcccccccd
 8000918:	40020000 	.word	0x40020000

0800091c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000924:	2300      	movs	r3, #0
 8000926:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800092e:	b2db      	uxtb	r3, r3
 8000930:	2b02      	cmp	r3, #2
 8000932:	d008      	beq.n	8000946 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2204      	movs	r2, #4
 8000938:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2200      	movs	r2, #0
 800093e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
 8000944:	e020      	b.n	8000988 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f022 020e 	bic.w	r2, r2, #14
 8000954:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f022 0201 	bic.w	r2, r2, #1
 8000964:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800096e:	2101      	movs	r1, #1
 8000970:	fa01 f202 	lsl.w	r2, r1, r2
 8000974:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2201      	movs	r2, #1
 800097a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2200      	movs	r2, #0
 8000982:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000986:	7bfb      	ldrb	r3, [r7, #15]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr
	...

08000994 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800099c:	2300      	movs	r3, #0
 800099e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	d005      	beq.n	80009b8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2204      	movs	r2, #4
 80009b0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
 80009b4:	73fb      	strb	r3, [r7, #15]
 80009b6:	e051      	b.n	8000a5c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f022 020e 	bic.w	r2, r2, #14
 80009c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f022 0201 	bic.w	r2, r2, #1
 80009d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a22      	ldr	r2, [pc, #136]	@ (8000a68 <HAL_DMA_Abort_IT+0xd4>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d029      	beq.n	8000a36 <HAL_DMA_Abort_IT+0xa2>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a21      	ldr	r2, [pc, #132]	@ (8000a6c <HAL_DMA_Abort_IT+0xd8>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d022      	beq.n	8000a32 <HAL_DMA_Abort_IT+0x9e>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a1f      	ldr	r2, [pc, #124]	@ (8000a70 <HAL_DMA_Abort_IT+0xdc>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d01a      	beq.n	8000a2c <HAL_DMA_Abort_IT+0x98>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a1e      	ldr	r2, [pc, #120]	@ (8000a74 <HAL_DMA_Abort_IT+0xe0>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d012      	beq.n	8000a26 <HAL_DMA_Abort_IT+0x92>
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a1c      	ldr	r2, [pc, #112]	@ (8000a78 <HAL_DMA_Abort_IT+0xe4>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d00a      	beq.n	8000a20 <HAL_DMA_Abort_IT+0x8c>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a1b      	ldr	r2, [pc, #108]	@ (8000a7c <HAL_DMA_Abort_IT+0xe8>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d102      	bne.n	8000a1a <HAL_DMA_Abort_IT+0x86>
 8000a14:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000a18:	e00e      	b.n	8000a38 <HAL_DMA_Abort_IT+0xa4>
 8000a1a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000a1e:	e00b      	b.n	8000a38 <HAL_DMA_Abort_IT+0xa4>
 8000a20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a24:	e008      	b.n	8000a38 <HAL_DMA_Abort_IT+0xa4>
 8000a26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a2a:	e005      	b.n	8000a38 <HAL_DMA_Abort_IT+0xa4>
 8000a2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a30:	e002      	b.n	8000a38 <HAL_DMA_Abort_IT+0xa4>
 8000a32:	2310      	movs	r3, #16
 8000a34:	e000      	b.n	8000a38 <HAL_DMA_Abort_IT+0xa4>
 8000a36:	2301      	movs	r3, #1
 8000a38:	4a11      	ldr	r2, [pc, #68]	@ (8000a80 <HAL_DMA_Abort_IT+0xec>)
 8000a3a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2201      	movs	r2, #1
 8000a40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2200      	movs	r2, #0
 8000a48:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d003      	beq.n	8000a5c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	4798      	blx	r3
    } 
  }
  return status;
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40020008 	.word	0x40020008
 8000a6c:	4002001c 	.word	0x4002001c
 8000a70:	40020030 	.word	0x40020030
 8000a74:	40020044 	.word	0x40020044
 8000a78:	40020058 	.word	0x40020058
 8000a7c:	4002006c 	.word	0x4002006c
 8000a80:	40020000 	.word	0x40020000

08000a84 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	409a      	lsls	r2, r3
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d04f      	beq.n	8000b4c <HAL_DMA_IRQHandler+0xc8>
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	f003 0304 	and.w	r3, r3, #4
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d04a      	beq.n	8000b4c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f003 0320 	and.w	r3, r3, #32
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d107      	bne.n	8000ad4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f022 0204 	bic.w	r2, r2, #4
 8000ad2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a66      	ldr	r2, [pc, #408]	@ (8000c74 <HAL_DMA_IRQHandler+0x1f0>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d029      	beq.n	8000b32 <HAL_DMA_IRQHandler+0xae>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a65      	ldr	r2, [pc, #404]	@ (8000c78 <HAL_DMA_IRQHandler+0x1f4>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d022      	beq.n	8000b2e <HAL_DMA_IRQHandler+0xaa>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a63      	ldr	r2, [pc, #396]	@ (8000c7c <HAL_DMA_IRQHandler+0x1f8>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d01a      	beq.n	8000b28 <HAL_DMA_IRQHandler+0xa4>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a62      	ldr	r2, [pc, #392]	@ (8000c80 <HAL_DMA_IRQHandler+0x1fc>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d012      	beq.n	8000b22 <HAL_DMA_IRQHandler+0x9e>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a60      	ldr	r2, [pc, #384]	@ (8000c84 <HAL_DMA_IRQHandler+0x200>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d00a      	beq.n	8000b1c <HAL_DMA_IRQHandler+0x98>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a5f      	ldr	r2, [pc, #380]	@ (8000c88 <HAL_DMA_IRQHandler+0x204>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d102      	bne.n	8000b16 <HAL_DMA_IRQHandler+0x92>
 8000b10:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b14:	e00e      	b.n	8000b34 <HAL_DMA_IRQHandler+0xb0>
 8000b16:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000b1a:	e00b      	b.n	8000b34 <HAL_DMA_IRQHandler+0xb0>
 8000b1c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000b20:	e008      	b.n	8000b34 <HAL_DMA_IRQHandler+0xb0>
 8000b22:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b26:	e005      	b.n	8000b34 <HAL_DMA_IRQHandler+0xb0>
 8000b28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b2c:	e002      	b.n	8000b34 <HAL_DMA_IRQHandler+0xb0>
 8000b2e:	2340      	movs	r3, #64	@ 0x40
 8000b30:	e000      	b.n	8000b34 <HAL_DMA_IRQHandler+0xb0>
 8000b32:	2304      	movs	r3, #4
 8000b34:	4a55      	ldr	r2, [pc, #340]	@ (8000c8c <HAL_DMA_IRQHandler+0x208>)
 8000b36:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	f000 8094 	beq.w	8000c6a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000b4a:	e08e      	b.n	8000c6a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b50:	2202      	movs	r2, #2
 8000b52:	409a      	lsls	r2, r3
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	4013      	ands	r3, r2
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d056      	beq.n	8000c0a <HAL_DMA_IRQHandler+0x186>
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d051      	beq.n	8000c0a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f003 0320 	and.w	r3, r3, #32
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d10b      	bne.n	8000b8c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f022 020a 	bic.w	r2, r2, #10
 8000b82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2201      	movs	r2, #1
 8000b88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a38      	ldr	r2, [pc, #224]	@ (8000c74 <HAL_DMA_IRQHandler+0x1f0>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d029      	beq.n	8000bea <HAL_DMA_IRQHandler+0x166>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a37      	ldr	r2, [pc, #220]	@ (8000c78 <HAL_DMA_IRQHandler+0x1f4>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d022      	beq.n	8000be6 <HAL_DMA_IRQHandler+0x162>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a35      	ldr	r2, [pc, #212]	@ (8000c7c <HAL_DMA_IRQHandler+0x1f8>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d01a      	beq.n	8000be0 <HAL_DMA_IRQHandler+0x15c>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a34      	ldr	r2, [pc, #208]	@ (8000c80 <HAL_DMA_IRQHandler+0x1fc>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d012      	beq.n	8000bda <HAL_DMA_IRQHandler+0x156>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a32      	ldr	r2, [pc, #200]	@ (8000c84 <HAL_DMA_IRQHandler+0x200>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d00a      	beq.n	8000bd4 <HAL_DMA_IRQHandler+0x150>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a31      	ldr	r2, [pc, #196]	@ (8000c88 <HAL_DMA_IRQHandler+0x204>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d102      	bne.n	8000bce <HAL_DMA_IRQHandler+0x14a>
 8000bc8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000bcc:	e00e      	b.n	8000bec <HAL_DMA_IRQHandler+0x168>
 8000bce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000bd2:	e00b      	b.n	8000bec <HAL_DMA_IRQHandler+0x168>
 8000bd4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000bd8:	e008      	b.n	8000bec <HAL_DMA_IRQHandler+0x168>
 8000bda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bde:	e005      	b.n	8000bec <HAL_DMA_IRQHandler+0x168>
 8000be0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000be4:	e002      	b.n	8000bec <HAL_DMA_IRQHandler+0x168>
 8000be6:	2320      	movs	r3, #32
 8000be8:	e000      	b.n	8000bec <HAL_DMA_IRQHandler+0x168>
 8000bea:	2302      	movs	r3, #2
 8000bec:	4a27      	ldr	r2, [pc, #156]	@ (8000c8c <HAL_DMA_IRQHandler+0x208>)
 8000bee:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d034      	beq.n	8000c6a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000c08:	e02f      	b.n	8000c6a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0e:	2208      	movs	r2, #8
 8000c10:	409a      	lsls	r2, r3
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	4013      	ands	r3, r2
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d028      	beq.n	8000c6c <HAL_DMA_IRQHandler+0x1e8>
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	f003 0308 	and.w	r3, r3, #8
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d023      	beq.n	8000c6c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f022 020e 	bic.w	r2, r2, #14
 8000c32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c42:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2201      	movs	r2, #1
 8000c48:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2200      	movs	r2, #0
 8000c56:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d004      	beq.n	8000c6c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	4798      	blx	r3
    }
  }
  return;
 8000c6a:	bf00      	nop
 8000c6c:	bf00      	nop
}
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40020008 	.word	0x40020008
 8000c78:	4002001c 	.word	0x4002001c
 8000c7c:	40020030 	.word	0x40020030
 8000c80:	40020044 	.word	0x40020044
 8000c84:	40020058 	.word	0x40020058
 8000c88:	4002006c 	.word	0x4002006c
 8000c8c:	40020000 	.word	0x40020000

08000c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b08b      	sub	sp, #44	@ 0x2c
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ca2:	e169      	b.n	8000f78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	69fa      	ldr	r2, [r7, #28]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	f040 8158 	bne.w	8000f72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	4a9a      	ldr	r2, [pc, #616]	@ (8000f30 <HAL_GPIO_Init+0x2a0>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d05e      	beq.n	8000d8a <HAL_GPIO_Init+0xfa>
 8000ccc:	4a98      	ldr	r2, [pc, #608]	@ (8000f30 <HAL_GPIO_Init+0x2a0>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d875      	bhi.n	8000dbe <HAL_GPIO_Init+0x12e>
 8000cd2:	4a98      	ldr	r2, [pc, #608]	@ (8000f34 <HAL_GPIO_Init+0x2a4>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d058      	beq.n	8000d8a <HAL_GPIO_Init+0xfa>
 8000cd8:	4a96      	ldr	r2, [pc, #600]	@ (8000f34 <HAL_GPIO_Init+0x2a4>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d86f      	bhi.n	8000dbe <HAL_GPIO_Init+0x12e>
 8000cde:	4a96      	ldr	r2, [pc, #600]	@ (8000f38 <HAL_GPIO_Init+0x2a8>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d052      	beq.n	8000d8a <HAL_GPIO_Init+0xfa>
 8000ce4:	4a94      	ldr	r2, [pc, #592]	@ (8000f38 <HAL_GPIO_Init+0x2a8>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d869      	bhi.n	8000dbe <HAL_GPIO_Init+0x12e>
 8000cea:	4a94      	ldr	r2, [pc, #592]	@ (8000f3c <HAL_GPIO_Init+0x2ac>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d04c      	beq.n	8000d8a <HAL_GPIO_Init+0xfa>
 8000cf0:	4a92      	ldr	r2, [pc, #584]	@ (8000f3c <HAL_GPIO_Init+0x2ac>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d863      	bhi.n	8000dbe <HAL_GPIO_Init+0x12e>
 8000cf6:	4a92      	ldr	r2, [pc, #584]	@ (8000f40 <HAL_GPIO_Init+0x2b0>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d046      	beq.n	8000d8a <HAL_GPIO_Init+0xfa>
 8000cfc:	4a90      	ldr	r2, [pc, #576]	@ (8000f40 <HAL_GPIO_Init+0x2b0>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d85d      	bhi.n	8000dbe <HAL_GPIO_Init+0x12e>
 8000d02:	2b12      	cmp	r3, #18
 8000d04:	d82a      	bhi.n	8000d5c <HAL_GPIO_Init+0xcc>
 8000d06:	2b12      	cmp	r3, #18
 8000d08:	d859      	bhi.n	8000dbe <HAL_GPIO_Init+0x12e>
 8000d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8000d10 <HAL_GPIO_Init+0x80>)
 8000d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d10:	08000d8b 	.word	0x08000d8b
 8000d14:	08000d65 	.word	0x08000d65
 8000d18:	08000d77 	.word	0x08000d77
 8000d1c:	08000db9 	.word	0x08000db9
 8000d20:	08000dbf 	.word	0x08000dbf
 8000d24:	08000dbf 	.word	0x08000dbf
 8000d28:	08000dbf 	.word	0x08000dbf
 8000d2c:	08000dbf 	.word	0x08000dbf
 8000d30:	08000dbf 	.word	0x08000dbf
 8000d34:	08000dbf 	.word	0x08000dbf
 8000d38:	08000dbf 	.word	0x08000dbf
 8000d3c:	08000dbf 	.word	0x08000dbf
 8000d40:	08000dbf 	.word	0x08000dbf
 8000d44:	08000dbf 	.word	0x08000dbf
 8000d48:	08000dbf 	.word	0x08000dbf
 8000d4c:	08000dbf 	.word	0x08000dbf
 8000d50:	08000dbf 	.word	0x08000dbf
 8000d54:	08000d6d 	.word	0x08000d6d
 8000d58:	08000d81 	.word	0x08000d81
 8000d5c:	4a79      	ldr	r2, [pc, #484]	@ (8000f44 <HAL_GPIO_Init+0x2b4>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d013      	beq.n	8000d8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d62:	e02c      	b.n	8000dbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	623b      	str	r3, [r7, #32]
          break;
 8000d6a:	e029      	b.n	8000dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	3304      	adds	r3, #4
 8000d72:	623b      	str	r3, [r7, #32]
          break;
 8000d74:	e024      	b.n	8000dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	3308      	adds	r3, #8
 8000d7c:	623b      	str	r3, [r7, #32]
          break;
 8000d7e:	e01f      	b.n	8000dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	330c      	adds	r3, #12
 8000d86:	623b      	str	r3, [r7, #32]
          break;
 8000d88:	e01a      	b.n	8000dc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d102      	bne.n	8000d98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d92:	2304      	movs	r3, #4
 8000d94:	623b      	str	r3, [r7, #32]
          break;
 8000d96:	e013      	b.n	8000dc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d105      	bne.n	8000dac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000da0:	2308      	movs	r3, #8
 8000da2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	69fa      	ldr	r2, [r7, #28]
 8000da8:	611a      	str	r2, [r3, #16]
          break;
 8000daa:	e009      	b.n	8000dc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dac:	2308      	movs	r3, #8
 8000dae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	69fa      	ldr	r2, [r7, #28]
 8000db4:	615a      	str	r2, [r3, #20]
          break;
 8000db6:	e003      	b.n	8000dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
          break;
 8000dbc:	e000      	b.n	8000dc0 <HAL_GPIO_Init+0x130>
          break;
 8000dbe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	2bff      	cmp	r3, #255	@ 0xff
 8000dc4:	d801      	bhi.n	8000dca <HAL_GPIO_Init+0x13a>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	e001      	b.n	8000dce <HAL_GPIO_Init+0x13e>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	2bff      	cmp	r3, #255	@ 0xff
 8000dd4:	d802      	bhi.n	8000ddc <HAL_GPIO_Init+0x14c>
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	e002      	b.n	8000de2 <HAL_GPIO_Init+0x152>
 8000ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dde:	3b08      	subs	r3, #8
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	210f      	movs	r1, #15
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	fa01 f303 	lsl.w	r3, r1, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	401a      	ands	r2, r3
 8000df4:	6a39      	ldr	r1, [r7, #32]
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfc:	431a      	orrs	r2, r3
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f000 80b1 	beq.w	8000f72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e10:	4b4d      	ldr	r3, [pc, #308]	@ (8000f48 <HAL_GPIO_Init+0x2b8>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	4a4c      	ldr	r2, [pc, #304]	@ (8000f48 <HAL_GPIO_Init+0x2b8>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	6193      	str	r3, [r2, #24]
 8000e1c:	4b4a      	ldr	r3, [pc, #296]	@ (8000f48 <HAL_GPIO_Init+0x2b8>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e28:	4a48      	ldr	r2, [pc, #288]	@ (8000f4c <HAL_GPIO_Init+0x2bc>)
 8000e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e2c:	089b      	lsrs	r3, r3, #2
 8000e2e:	3302      	adds	r3, #2
 8000e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e38:	f003 0303 	and.w	r3, r3, #3
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	220f      	movs	r2, #15
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a40      	ldr	r2, [pc, #256]	@ (8000f50 <HAL_GPIO_Init+0x2c0>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d013      	beq.n	8000e7c <HAL_GPIO_Init+0x1ec>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a3f      	ldr	r2, [pc, #252]	@ (8000f54 <HAL_GPIO_Init+0x2c4>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d00d      	beq.n	8000e78 <HAL_GPIO_Init+0x1e8>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a3e      	ldr	r2, [pc, #248]	@ (8000f58 <HAL_GPIO_Init+0x2c8>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d007      	beq.n	8000e74 <HAL_GPIO_Init+0x1e4>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a3d      	ldr	r2, [pc, #244]	@ (8000f5c <HAL_GPIO_Init+0x2cc>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d101      	bne.n	8000e70 <HAL_GPIO_Init+0x1e0>
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e006      	b.n	8000e7e <HAL_GPIO_Init+0x1ee>
 8000e70:	2304      	movs	r3, #4
 8000e72:	e004      	b.n	8000e7e <HAL_GPIO_Init+0x1ee>
 8000e74:	2302      	movs	r3, #2
 8000e76:	e002      	b.n	8000e7e <HAL_GPIO_Init+0x1ee>
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e000      	b.n	8000e7e <HAL_GPIO_Init+0x1ee>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e80:	f002 0203 	and.w	r2, r2, #3
 8000e84:	0092      	lsls	r2, r2, #2
 8000e86:	4093      	lsls	r3, r2
 8000e88:	68fa      	ldr	r2, [r7, #12]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e8e:	492f      	ldr	r1, [pc, #188]	@ (8000f4c <HAL_GPIO_Init+0x2bc>)
 8000e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e92:	089b      	lsrs	r3, r3, #2
 8000e94:	3302      	adds	r3, #2
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d006      	beq.n	8000eb6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ea8:	4b2d      	ldr	r3, [pc, #180]	@ (8000f60 <HAL_GPIO_Init+0x2d0>)
 8000eaa:	689a      	ldr	r2, [r3, #8]
 8000eac:	492c      	ldr	r1, [pc, #176]	@ (8000f60 <HAL_GPIO_Init+0x2d0>)
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	608b      	str	r3, [r1, #8]
 8000eb4:	e006      	b.n	8000ec4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000eb6:	4b2a      	ldr	r3, [pc, #168]	@ (8000f60 <HAL_GPIO_Init+0x2d0>)
 8000eb8:	689a      	ldr	r2, [r3, #8]
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	4928      	ldr	r1, [pc, #160]	@ (8000f60 <HAL_GPIO_Init+0x2d0>)
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d006      	beq.n	8000ede <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ed0:	4b23      	ldr	r3, [pc, #140]	@ (8000f60 <HAL_GPIO_Init+0x2d0>)
 8000ed2:	68da      	ldr	r2, [r3, #12]
 8000ed4:	4922      	ldr	r1, [pc, #136]	@ (8000f60 <HAL_GPIO_Init+0x2d0>)
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	60cb      	str	r3, [r1, #12]
 8000edc:	e006      	b.n	8000eec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ede:	4b20      	ldr	r3, [pc, #128]	@ (8000f60 <HAL_GPIO_Init+0x2d0>)
 8000ee0:	68da      	ldr	r2, [r3, #12]
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	491e      	ldr	r1, [pc, #120]	@ (8000f60 <HAL_GPIO_Init+0x2d0>)
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d006      	beq.n	8000f06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ef8:	4b19      	ldr	r3, [pc, #100]	@ (8000f60 <HAL_GPIO_Init+0x2d0>)
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	4918      	ldr	r1, [pc, #96]	@ (8000f60 <HAL_GPIO_Init+0x2d0>)
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	604b      	str	r3, [r1, #4]
 8000f04:	e006      	b.n	8000f14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f06:	4b16      	ldr	r3, [pc, #88]	@ (8000f60 <HAL_GPIO_Init+0x2d0>)
 8000f08:	685a      	ldr	r2, [r3, #4]
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	4914      	ldr	r1, [pc, #80]	@ (8000f60 <HAL_GPIO_Init+0x2d0>)
 8000f10:	4013      	ands	r3, r2
 8000f12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d021      	beq.n	8000f64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f20:	4b0f      	ldr	r3, [pc, #60]	@ (8000f60 <HAL_GPIO_Init+0x2d0>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	490e      	ldr	r1, [pc, #56]	@ (8000f60 <HAL_GPIO_Init+0x2d0>)
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	600b      	str	r3, [r1, #0]
 8000f2c:	e021      	b.n	8000f72 <HAL_GPIO_Init+0x2e2>
 8000f2e:	bf00      	nop
 8000f30:	10320000 	.word	0x10320000
 8000f34:	10310000 	.word	0x10310000
 8000f38:	10220000 	.word	0x10220000
 8000f3c:	10210000 	.word	0x10210000
 8000f40:	10120000 	.word	0x10120000
 8000f44:	10110000 	.word	0x10110000
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	40010000 	.word	0x40010000
 8000f50:	40010800 	.word	0x40010800
 8000f54:	40010c00 	.word	0x40010c00
 8000f58:	40011000 	.word	0x40011000
 8000f5c:	40011400 	.word	0x40011400
 8000f60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f64:	4b0b      	ldr	r3, [pc, #44]	@ (8000f94 <HAL_GPIO_Init+0x304>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	4909      	ldr	r1, [pc, #36]	@ (8000f94 <HAL_GPIO_Init+0x304>)
 8000f6e:	4013      	ands	r3, r2
 8000f70:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f74:	3301      	adds	r3, #1
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f47f ae8e 	bne.w	8000ca4 <HAL_GPIO_Init+0x14>
  }
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	372c      	adds	r7, #44	@ 0x2c
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	40010400 	.word	0x40010400

08000f98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d101      	bne.n	8000faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e272      	b.n	8001490 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f000 8087 	beq.w	80010c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fb8:	4b92      	ldr	r3, [pc, #584]	@ (8001204 <HAL_RCC_OscConfig+0x26c>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 030c 	and.w	r3, r3, #12
 8000fc0:	2b04      	cmp	r3, #4
 8000fc2:	d00c      	beq.n	8000fde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fc4:	4b8f      	ldr	r3, [pc, #572]	@ (8001204 <HAL_RCC_OscConfig+0x26c>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 030c 	and.w	r3, r3, #12
 8000fcc:	2b08      	cmp	r3, #8
 8000fce:	d112      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x5e>
 8000fd0:	4b8c      	ldr	r3, [pc, #560]	@ (8001204 <HAL_RCC_OscConfig+0x26c>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fdc:	d10b      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fde:	4b89      	ldr	r3, [pc, #548]	@ (8001204 <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d06c      	beq.n	80010c4 <HAL_RCC_OscConfig+0x12c>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d168      	bne.n	80010c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e24c      	b.n	8001490 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ffe:	d106      	bne.n	800100e <HAL_RCC_OscConfig+0x76>
 8001000:	4b80      	ldr	r3, [pc, #512]	@ (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a7f      	ldr	r2, [pc, #508]	@ (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001006:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	e02e      	b.n	800106c <HAL_RCC_OscConfig+0xd4>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d10c      	bne.n	8001030 <HAL_RCC_OscConfig+0x98>
 8001016:	4b7b      	ldr	r3, [pc, #492]	@ (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a7a      	ldr	r2, [pc, #488]	@ (8001204 <HAL_RCC_OscConfig+0x26c>)
 800101c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	4b78      	ldr	r3, [pc, #480]	@ (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a77      	ldr	r2, [pc, #476]	@ (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001028:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	e01d      	b.n	800106c <HAL_RCC_OscConfig+0xd4>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001038:	d10c      	bne.n	8001054 <HAL_RCC_OscConfig+0xbc>
 800103a:	4b72      	ldr	r3, [pc, #456]	@ (8001204 <HAL_RCC_OscConfig+0x26c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a71      	ldr	r2, [pc, #452]	@ (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001040:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	4b6f      	ldr	r3, [pc, #444]	@ (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a6e      	ldr	r2, [pc, #440]	@ (8001204 <HAL_RCC_OscConfig+0x26c>)
 800104c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	e00b      	b.n	800106c <HAL_RCC_OscConfig+0xd4>
 8001054:	4b6b      	ldr	r3, [pc, #428]	@ (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a6a      	ldr	r2, [pc, #424]	@ (8001204 <HAL_RCC_OscConfig+0x26c>)
 800105a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	4b68      	ldr	r3, [pc, #416]	@ (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a67      	ldr	r2, [pc, #412]	@ (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001066:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800106a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d013      	beq.n	800109c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001074:	f7ff fae0 	bl	8000638 <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800107c:	f7ff fadc 	bl	8000638 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b64      	cmp	r3, #100	@ 0x64
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e200      	b.n	8001490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800108e:	4b5d      	ldr	r3, [pc, #372]	@ (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d0f0      	beq.n	800107c <HAL_RCC_OscConfig+0xe4>
 800109a:	e014      	b.n	80010c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109c:	f7ff facc 	bl	8000638 <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010a4:	f7ff fac8 	bl	8000638 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b64      	cmp	r3, #100	@ 0x64
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e1ec      	b.n	8001490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010b6:	4b53      	ldr	r3, [pc, #332]	@ (8001204 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1f0      	bne.n	80010a4 <HAL_RCC_OscConfig+0x10c>
 80010c2:	e000      	b.n	80010c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d063      	beq.n	800119a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010d2:	4b4c      	ldr	r3, [pc, #304]	@ (8001204 <HAL_RCC_OscConfig+0x26c>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 030c 	and.w	r3, r3, #12
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d00b      	beq.n	80010f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010de:	4b49      	ldr	r3, [pc, #292]	@ (8001204 <HAL_RCC_OscConfig+0x26c>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 030c 	and.w	r3, r3, #12
 80010e6:	2b08      	cmp	r3, #8
 80010e8:	d11c      	bne.n	8001124 <HAL_RCC_OscConfig+0x18c>
 80010ea:	4b46      	ldr	r3, [pc, #280]	@ (8001204 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d116      	bne.n	8001124 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f6:	4b43      	ldr	r3, [pc, #268]	@ (8001204 <HAL_RCC_OscConfig+0x26c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d005      	beq.n	800110e <HAL_RCC_OscConfig+0x176>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	691b      	ldr	r3, [r3, #16]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d001      	beq.n	800110e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e1c0      	b.n	8001490 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800110e:	4b3d      	ldr	r3, [pc, #244]	@ (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	4939      	ldr	r1, [pc, #228]	@ (8001204 <HAL_RCC_OscConfig+0x26c>)
 800111e:	4313      	orrs	r3, r2
 8001120:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001122:	e03a      	b.n	800119a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d020      	beq.n	800116e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800112c:	4b36      	ldr	r3, [pc, #216]	@ (8001208 <HAL_RCC_OscConfig+0x270>)
 800112e:	2201      	movs	r2, #1
 8001130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001132:	f7ff fa81 	bl	8000638 <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001138:	e008      	b.n	800114c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800113a:	f7ff fa7d 	bl	8000638 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e1a1      	b.n	8001490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800114c:	4b2d      	ldr	r3, [pc, #180]	@ (8001204 <HAL_RCC_OscConfig+0x26c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d0f0      	beq.n	800113a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001158:	4b2a      	ldr	r3, [pc, #168]	@ (8001204 <HAL_RCC_OscConfig+0x26c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	4927      	ldr	r1, [pc, #156]	@ (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001168:	4313      	orrs	r3, r2
 800116a:	600b      	str	r3, [r1, #0]
 800116c:	e015      	b.n	800119a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800116e:	4b26      	ldr	r3, [pc, #152]	@ (8001208 <HAL_RCC_OscConfig+0x270>)
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001174:	f7ff fa60 	bl	8000638 <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800117c:	f7ff fa5c 	bl	8000638 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e180      	b.n	8001490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800118e:	4b1d      	ldr	r3, [pc, #116]	@ (8001204 <HAL_RCC_OscConfig+0x26c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f0      	bne.n	800117c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0308 	and.w	r3, r3, #8
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d03a      	beq.n	800121c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d019      	beq.n	80011e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ae:	4b17      	ldr	r3, [pc, #92]	@ (800120c <HAL_RCC_OscConfig+0x274>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b4:	f7ff fa40 	bl	8000638 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011bc:	f7ff fa3c 	bl	8000638 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e160      	b.n	8001490 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001204 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0f0      	beq.n	80011bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011da:	2001      	movs	r0, #1
 80011dc:	f000 face 	bl	800177c <RCC_Delay>
 80011e0:	e01c      	b.n	800121c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011e2:	4b0a      	ldr	r3, [pc, #40]	@ (800120c <HAL_RCC_OscConfig+0x274>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e8:	f7ff fa26 	bl	8000638 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ee:	e00f      	b.n	8001210 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011f0:	f7ff fa22 	bl	8000638 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d908      	bls.n	8001210 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e146      	b.n	8001490 <HAL_RCC_OscConfig+0x4f8>
 8001202:	bf00      	nop
 8001204:	40021000 	.word	0x40021000
 8001208:	42420000 	.word	0x42420000
 800120c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001210:	4b92      	ldr	r3, [pc, #584]	@ (800145c <HAL_RCC_OscConfig+0x4c4>)
 8001212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1e9      	bne.n	80011f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 80a6 	beq.w	8001376 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800122a:	2300      	movs	r3, #0
 800122c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800122e:	4b8b      	ldr	r3, [pc, #556]	@ (800145c <HAL_RCC_OscConfig+0x4c4>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10d      	bne.n	8001256 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800123a:	4b88      	ldr	r3, [pc, #544]	@ (800145c <HAL_RCC_OscConfig+0x4c4>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	4a87      	ldr	r2, [pc, #540]	@ (800145c <HAL_RCC_OscConfig+0x4c4>)
 8001240:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001244:	61d3      	str	r3, [r2, #28]
 8001246:	4b85      	ldr	r3, [pc, #532]	@ (800145c <HAL_RCC_OscConfig+0x4c4>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001252:	2301      	movs	r3, #1
 8001254:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001256:	4b82      	ldr	r3, [pc, #520]	@ (8001460 <HAL_RCC_OscConfig+0x4c8>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800125e:	2b00      	cmp	r3, #0
 8001260:	d118      	bne.n	8001294 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001262:	4b7f      	ldr	r3, [pc, #508]	@ (8001460 <HAL_RCC_OscConfig+0x4c8>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a7e      	ldr	r2, [pc, #504]	@ (8001460 <HAL_RCC_OscConfig+0x4c8>)
 8001268:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800126c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800126e:	f7ff f9e3 	bl	8000638 <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001274:	e008      	b.n	8001288 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001276:	f7ff f9df 	bl	8000638 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	2b64      	cmp	r3, #100	@ 0x64
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e103      	b.n	8001490 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001288:	4b75      	ldr	r3, [pc, #468]	@ (8001460 <HAL_RCC_OscConfig+0x4c8>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0f0      	beq.n	8001276 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d106      	bne.n	80012aa <HAL_RCC_OscConfig+0x312>
 800129c:	4b6f      	ldr	r3, [pc, #444]	@ (800145c <HAL_RCC_OscConfig+0x4c4>)
 800129e:	6a1b      	ldr	r3, [r3, #32]
 80012a0:	4a6e      	ldr	r2, [pc, #440]	@ (800145c <HAL_RCC_OscConfig+0x4c4>)
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	6213      	str	r3, [r2, #32]
 80012a8:	e02d      	b.n	8001306 <HAL_RCC_OscConfig+0x36e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10c      	bne.n	80012cc <HAL_RCC_OscConfig+0x334>
 80012b2:	4b6a      	ldr	r3, [pc, #424]	@ (800145c <HAL_RCC_OscConfig+0x4c4>)
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	4a69      	ldr	r2, [pc, #420]	@ (800145c <HAL_RCC_OscConfig+0x4c4>)
 80012b8:	f023 0301 	bic.w	r3, r3, #1
 80012bc:	6213      	str	r3, [r2, #32]
 80012be:	4b67      	ldr	r3, [pc, #412]	@ (800145c <HAL_RCC_OscConfig+0x4c4>)
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	4a66      	ldr	r2, [pc, #408]	@ (800145c <HAL_RCC_OscConfig+0x4c4>)
 80012c4:	f023 0304 	bic.w	r3, r3, #4
 80012c8:	6213      	str	r3, [r2, #32]
 80012ca:	e01c      	b.n	8001306 <HAL_RCC_OscConfig+0x36e>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	2b05      	cmp	r3, #5
 80012d2:	d10c      	bne.n	80012ee <HAL_RCC_OscConfig+0x356>
 80012d4:	4b61      	ldr	r3, [pc, #388]	@ (800145c <HAL_RCC_OscConfig+0x4c4>)
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	4a60      	ldr	r2, [pc, #384]	@ (800145c <HAL_RCC_OscConfig+0x4c4>)
 80012da:	f043 0304 	orr.w	r3, r3, #4
 80012de:	6213      	str	r3, [r2, #32]
 80012e0:	4b5e      	ldr	r3, [pc, #376]	@ (800145c <HAL_RCC_OscConfig+0x4c4>)
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	4a5d      	ldr	r2, [pc, #372]	@ (800145c <HAL_RCC_OscConfig+0x4c4>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	6213      	str	r3, [r2, #32]
 80012ec:	e00b      	b.n	8001306 <HAL_RCC_OscConfig+0x36e>
 80012ee:	4b5b      	ldr	r3, [pc, #364]	@ (800145c <HAL_RCC_OscConfig+0x4c4>)
 80012f0:	6a1b      	ldr	r3, [r3, #32]
 80012f2:	4a5a      	ldr	r2, [pc, #360]	@ (800145c <HAL_RCC_OscConfig+0x4c4>)
 80012f4:	f023 0301 	bic.w	r3, r3, #1
 80012f8:	6213      	str	r3, [r2, #32]
 80012fa:	4b58      	ldr	r3, [pc, #352]	@ (800145c <HAL_RCC_OscConfig+0x4c4>)
 80012fc:	6a1b      	ldr	r3, [r3, #32]
 80012fe:	4a57      	ldr	r2, [pc, #348]	@ (800145c <HAL_RCC_OscConfig+0x4c4>)
 8001300:	f023 0304 	bic.w	r3, r3, #4
 8001304:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d015      	beq.n	800133a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130e:	f7ff f993 	bl	8000638 <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001314:	e00a      	b.n	800132c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001316:	f7ff f98f 	bl	8000638 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001324:	4293      	cmp	r3, r2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e0b1      	b.n	8001490 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800132c:	4b4b      	ldr	r3, [pc, #300]	@ (800145c <HAL_RCC_OscConfig+0x4c4>)
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0ee      	beq.n	8001316 <HAL_RCC_OscConfig+0x37e>
 8001338:	e014      	b.n	8001364 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133a:	f7ff f97d 	bl	8000638 <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001340:	e00a      	b.n	8001358 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001342:	f7ff f979 	bl	8000638 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001350:	4293      	cmp	r3, r2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e09b      	b.n	8001490 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001358:	4b40      	ldr	r3, [pc, #256]	@ (800145c <HAL_RCC_OscConfig+0x4c4>)
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1ee      	bne.n	8001342 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001364:	7dfb      	ldrb	r3, [r7, #23]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d105      	bne.n	8001376 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800136a:	4b3c      	ldr	r3, [pc, #240]	@ (800145c <HAL_RCC_OscConfig+0x4c4>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	4a3b      	ldr	r2, [pc, #236]	@ (800145c <HAL_RCC_OscConfig+0x4c4>)
 8001370:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001374:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	2b00      	cmp	r3, #0
 800137c:	f000 8087 	beq.w	800148e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001380:	4b36      	ldr	r3, [pc, #216]	@ (800145c <HAL_RCC_OscConfig+0x4c4>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 030c 	and.w	r3, r3, #12
 8001388:	2b08      	cmp	r3, #8
 800138a:	d061      	beq.n	8001450 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69db      	ldr	r3, [r3, #28]
 8001390:	2b02      	cmp	r3, #2
 8001392:	d146      	bne.n	8001422 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001394:	4b33      	ldr	r3, [pc, #204]	@ (8001464 <HAL_RCC_OscConfig+0x4cc>)
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139a:	f7ff f94d 	bl	8000638 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a2:	f7ff f949 	bl	8000638 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e06d      	b.n	8001490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013b4:	4b29      	ldr	r3, [pc, #164]	@ (800145c <HAL_RCC_OscConfig+0x4c4>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1f0      	bne.n	80013a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013c8:	d108      	bne.n	80013dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013ca:	4b24      	ldr	r3, [pc, #144]	@ (800145c <HAL_RCC_OscConfig+0x4c4>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	4921      	ldr	r1, [pc, #132]	@ (800145c <HAL_RCC_OscConfig+0x4c4>)
 80013d8:	4313      	orrs	r3, r2
 80013da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013dc:	4b1f      	ldr	r3, [pc, #124]	@ (800145c <HAL_RCC_OscConfig+0x4c4>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a19      	ldr	r1, [r3, #32]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ec:	430b      	orrs	r3, r1
 80013ee:	491b      	ldr	r1, [pc, #108]	@ (800145c <HAL_RCC_OscConfig+0x4c4>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001464 <HAL_RCC_OscConfig+0x4cc>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fa:	f7ff f91d 	bl	8000638 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001402:	f7ff f919 	bl	8000638 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e03d      	b.n	8001490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001414:	4b11      	ldr	r3, [pc, #68]	@ (800145c <HAL_RCC_OscConfig+0x4c4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0f0      	beq.n	8001402 <HAL_RCC_OscConfig+0x46a>
 8001420:	e035      	b.n	800148e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001422:	4b10      	ldr	r3, [pc, #64]	@ (8001464 <HAL_RCC_OscConfig+0x4cc>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff f906 	bl	8000638 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001430:	f7ff f902 	bl	8000638 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e026      	b.n	8001490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001442:	4b06      	ldr	r3, [pc, #24]	@ (800145c <HAL_RCC_OscConfig+0x4c4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f0      	bne.n	8001430 <HAL_RCC_OscConfig+0x498>
 800144e:	e01e      	b.n	800148e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d107      	bne.n	8001468 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e019      	b.n	8001490 <HAL_RCC_OscConfig+0x4f8>
 800145c:	40021000 	.word	0x40021000
 8001460:	40007000 	.word	0x40007000
 8001464:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001468:	4b0b      	ldr	r3, [pc, #44]	@ (8001498 <HAL_RCC_OscConfig+0x500>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	429a      	cmp	r2, r3
 800147a:	d106      	bne.n	800148a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001486:	429a      	cmp	r2, r3
 8001488:	d001      	beq.n	800148e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e000      	b.n	8001490 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40021000 	.word	0x40021000

0800149c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e0d0      	b.n	8001652 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014b0:	4b6a      	ldr	r3, [pc, #424]	@ (800165c <HAL_RCC_ClockConfig+0x1c0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d910      	bls.n	80014e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014be:	4b67      	ldr	r3, [pc, #412]	@ (800165c <HAL_RCC_ClockConfig+0x1c0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f023 0207 	bic.w	r2, r3, #7
 80014c6:	4965      	ldr	r1, [pc, #404]	@ (800165c <HAL_RCC_ClockConfig+0x1c0>)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ce:	4b63      	ldr	r3, [pc, #396]	@ (800165c <HAL_RCC_ClockConfig+0x1c0>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d001      	beq.n	80014e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e0b8      	b.n	8001652 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d020      	beq.n	800152e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d005      	beq.n	8001504 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014f8:	4b59      	ldr	r3, [pc, #356]	@ (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	4a58      	ldr	r2, [pc, #352]	@ (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 80014fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001502:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0308 	and.w	r3, r3, #8
 800150c:	2b00      	cmp	r3, #0
 800150e:	d005      	beq.n	800151c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001510:	4b53      	ldr	r3, [pc, #332]	@ (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	4a52      	ldr	r2, [pc, #328]	@ (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 8001516:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800151a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800151c:	4b50      	ldr	r3, [pc, #320]	@ (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	494d      	ldr	r1, [pc, #308]	@ (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 800152a:	4313      	orrs	r3, r2
 800152c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d040      	beq.n	80015bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d107      	bne.n	8001552 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001542:	4b47      	ldr	r3, [pc, #284]	@ (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d115      	bne.n	800157a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e07f      	b.n	8001652 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d107      	bne.n	800156a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800155a:	4b41      	ldr	r3, [pc, #260]	@ (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d109      	bne.n	800157a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e073      	b.n	8001652 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800156a:	4b3d      	ldr	r3, [pc, #244]	@ (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e06b      	b.n	8001652 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800157a:	4b39      	ldr	r3, [pc, #228]	@ (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f023 0203 	bic.w	r2, r3, #3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	4936      	ldr	r1, [pc, #216]	@ (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 8001588:	4313      	orrs	r3, r2
 800158a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800158c:	f7ff f854 	bl	8000638 <HAL_GetTick>
 8001590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001592:	e00a      	b.n	80015aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001594:	f7ff f850 	bl	8000638 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e053      	b.n	8001652 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 020c 	and.w	r2, r3, #12
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d1eb      	bne.n	8001594 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015bc:	4b27      	ldr	r3, [pc, #156]	@ (800165c <HAL_RCC_ClockConfig+0x1c0>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0307 	and.w	r3, r3, #7
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d210      	bcs.n	80015ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ca:	4b24      	ldr	r3, [pc, #144]	@ (800165c <HAL_RCC_ClockConfig+0x1c0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f023 0207 	bic.w	r2, r3, #7
 80015d2:	4922      	ldr	r1, [pc, #136]	@ (800165c <HAL_RCC_ClockConfig+0x1c0>)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015da:	4b20      	ldr	r3, [pc, #128]	@ (800165c <HAL_RCC_ClockConfig+0x1c0>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d001      	beq.n	80015ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e032      	b.n	8001652 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d008      	beq.n	800160a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015f8:	4b19      	ldr	r3, [pc, #100]	@ (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	4916      	ldr	r1, [pc, #88]	@ (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 8001606:	4313      	orrs	r3, r2
 8001608:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	2b00      	cmp	r3, #0
 8001614:	d009      	beq.n	800162a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001616:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	490e      	ldr	r1, [pc, #56]	@ (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 8001626:	4313      	orrs	r3, r2
 8001628:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800162a:	f000 f821 	bl	8001670 <HAL_RCC_GetSysClockFreq>
 800162e:	4602      	mov	r2, r0
 8001630:	4b0b      	ldr	r3, [pc, #44]	@ (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	091b      	lsrs	r3, r3, #4
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	490a      	ldr	r1, [pc, #40]	@ (8001664 <HAL_RCC_ClockConfig+0x1c8>)
 800163c:	5ccb      	ldrb	r3, [r1, r3]
 800163e:	fa22 f303 	lsr.w	r3, r2, r3
 8001642:	4a09      	ldr	r2, [pc, #36]	@ (8001668 <HAL_RCC_ClockConfig+0x1cc>)
 8001644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001646:	4b09      	ldr	r3, [pc, #36]	@ (800166c <HAL_RCC_ClockConfig+0x1d0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe ffb2 	bl	80005b4 <HAL_InitTick>

  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40022000 	.word	0x40022000
 8001660:	40021000 	.word	0x40021000
 8001664:	0800228c 	.word	0x0800228c
 8001668:	20000000 	.word	0x20000000
 800166c:	20000004 	.word	0x20000004

08001670 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001670:	b480      	push	{r7}
 8001672:	b087      	sub	sp, #28
 8001674:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	2300      	movs	r3, #0
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	2300      	movs	r3, #0
 8001684:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800168a:	4b1e      	ldr	r3, [pc, #120]	@ (8001704 <HAL_RCC_GetSysClockFreq+0x94>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	2b04      	cmp	r3, #4
 8001698:	d002      	beq.n	80016a0 <HAL_RCC_GetSysClockFreq+0x30>
 800169a:	2b08      	cmp	r3, #8
 800169c:	d003      	beq.n	80016a6 <HAL_RCC_GetSysClockFreq+0x36>
 800169e:	e027      	b.n	80016f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016a0:	4b19      	ldr	r3, [pc, #100]	@ (8001708 <HAL_RCC_GetSysClockFreq+0x98>)
 80016a2:	613b      	str	r3, [r7, #16]
      break;
 80016a4:	e027      	b.n	80016f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	0c9b      	lsrs	r3, r3, #18
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	4a17      	ldr	r2, [pc, #92]	@ (800170c <HAL_RCC_GetSysClockFreq+0x9c>)
 80016b0:	5cd3      	ldrb	r3, [r2, r3]
 80016b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d010      	beq.n	80016e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016be:	4b11      	ldr	r3, [pc, #68]	@ (8001704 <HAL_RCC_GetSysClockFreq+0x94>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	0c5b      	lsrs	r3, r3, #17
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	4a11      	ldr	r2, [pc, #68]	@ (8001710 <HAL_RCC_GetSysClockFreq+0xa0>)
 80016ca:	5cd3      	ldrb	r3, [r2, r3]
 80016cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001708 <HAL_RCC_GetSysClockFreq+0x98>)
 80016d2:	fb03 f202 	mul.w	r2, r3, r2
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	e004      	b.n	80016ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001714 <HAL_RCC_GetSysClockFreq+0xa4>)
 80016e4:	fb02 f303 	mul.w	r3, r2, r3
 80016e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	613b      	str	r3, [r7, #16]
      break;
 80016ee:	e002      	b.n	80016f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016f0:	4b05      	ldr	r3, [pc, #20]	@ (8001708 <HAL_RCC_GetSysClockFreq+0x98>)
 80016f2:	613b      	str	r3, [r7, #16]
      break;
 80016f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016f6:	693b      	ldr	r3, [r7, #16]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40021000 	.word	0x40021000
 8001708:	007a1200 	.word	0x007a1200
 800170c:	080022a4 	.word	0x080022a4
 8001710:	080022b4 	.word	0x080022b4
 8001714:	003d0900 	.word	0x003d0900

08001718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800171c:	4b02      	ldr	r3, [pc, #8]	@ (8001728 <HAL_RCC_GetHCLKFreq+0x10>)
 800171e:	681b      	ldr	r3, [r3, #0]
}
 8001720:	4618      	mov	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr
 8001728:	20000000 	.word	0x20000000

0800172c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001730:	f7ff fff2 	bl	8001718 <HAL_RCC_GetHCLKFreq>
 8001734:	4602      	mov	r2, r0
 8001736:	4b05      	ldr	r3, [pc, #20]	@ (800174c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	0a1b      	lsrs	r3, r3, #8
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	4903      	ldr	r1, [pc, #12]	@ (8001750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001742:	5ccb      	ldrb	r3, [r1, r3]
 8001744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001748:	4618      	mov	r0, r3
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40021000 	.word	0x40021000
 8001750:	0800229c 	.word	0x0800229c

08001754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001758:	f7ff ffde 	bl	8001718 <HAL_RCC_GetHCLKFreq>
 800175c:	4602      	mov	r2, r0
 800175e:	4b05      	ldr	r3, [pc, #20]	@ (8001774 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	0adb      	lsrs	r3, r3, #11
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	4903      	ldr	r1, [pc, #12]	@ (8001778 <HAL_RCC_GetPCLK2Freq+0x24>)
 800176a:	5ccb      	ldrb	r3, [r1, r3]
 800176c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001770:	4618      	mov	r0, r3
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40021000 	.word	0x40021000
 8001778:	0800229c 	.word	0x0800229c

0800177c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001784:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <RCC_Delay+0x34>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0a      	ldr	r2, [pc, #40]	@ (80017b4 <RCC_Delay+0x38>)
 800178a:	fba2 2303 	umull	r2, r3, r2, r3
 800178e:	0a5b      	lsrs	r3, r3, #9
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	fb02 f303 	mul.w	r3, r2, r3
 8001796:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001798:	bf00      	nop
  }
  while (Delay --);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	1e5a      	subs	r2, r3, #1
 800179e:	60fa      	str	r2, [r7, #12]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1f9      	bne.n	8001798 <RCC_Delay+0x1c>
}
 80017a4:	bf00      	nop
 80017a6:	bf00      	nop
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr
 80017b0:	20000000 	.word	0x20000000
 80017b4:	10624dd3 	.word	0x10624dd3

080017b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e042      	b.n	8001850 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d106      	bne.n	80017e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7fe fe02 	bl	80003e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2224      	movs	r2, #36	@ 0x24
 80017e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68da      	ldr	r2, [r3, #12]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80017fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 fc7f 	bl	8002100 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	691a      	ldr	r2, [r3, #16]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001810:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	695a      	ldr	r2, [r3, #20]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001820:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001830:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2220      	movs	r2, #32
 800183c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2220      	movs	r2, #32
 8001844:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b0ba      	sub	sp, #232	@ 0xe8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800187e:	2300      	movs	r3, #0
 8001880:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001884:	2300      	movs	r3, #0
 8001886:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800188a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001896:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10f      	bne.n	80018be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800189e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80018a2:	f003 0320 	and.w	r3, r3, #32
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d009      	beq.n	80018be <HAL_UART_IRQHandler+0x66>
 80018aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80018ae:	f003 0320 	and.w	r3, r3, #32
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 fb63 	bl	8001f82 <UART_Receive_IT>
      return;
 80018bc:	e25b      	b.n	8001d76 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80018be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 80de 	beq.w	8001a84 <HAL_UART_IRQHandler+0x22c>
 80018c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d106      	bne.n	80018e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80018d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80018d8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 80d1 	beq.w	8001a84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80018e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00b      	beq.n	8001906 <HAL_UART_IRQHandler+0xae>
 80018ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80018f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d005      	beq.n	8001906 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fe:	f043 0201 	orr.w	r2, r3, #1
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800190a:	f003 0304 	and.w	r3, r3, #4
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00b      	beq.n	800192a <HAL_UART_IRQHandler+0xd2>
 8001912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d005      	beq.n	800192a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001922:	f043 0202 	orr.w	r2, r3, #2
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800192a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00b      	beq.n	800194e <HAL_UART_IRQHandler+0xf6>
 8001936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d005      	beq.n	800194e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001946:	f043 0204 	orr.w	r2, r3, #4
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800194e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	2b00      	cmp	r3, #0
 8001958:	d011      	beq.n	800197e <HAL_UART_IRQHandler+0x126>
 800195a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800195e:	f003 0320 	and.w	r3, r3, #32
 8001962:	2b00      	cmp	r3, #0
 8001964:	d105      	bne.n	8001972 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001966:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	d005      	beq.n	800197e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001976:	f043 0208 	orr.w	r2, r3, #8
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 81f2 	beq.w	8001d6c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800198c:	f003 0320 	and.w	r3, r3, #32
 8001990:	2b00      	cmp	r3, #0
 8001992:	d008      	beq.n	80019a6 <HAL_UART_IRQHandler+0x14e>
 8001994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001998:	f003 0320 	and.w	r3, r3, #32
 800199c:	2b00      	cmp	r3, #0
 800199e:	d002      	beq.n	80019a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 faee 	bl	8001f82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	bf14      	ite	ne
 80019b4:	2301      	movne	r3, #1
 80019b6:	2300      	moveq	r3, #0
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d103      	bne.n	80019d2 <HAL_UART_IRQHandler+0x17a>
 80019ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d04f      	beq.n	8001a72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f9f8 	bl	8001dc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d041      	beq.n	8001a6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	3314      	adds	r3, #20
 80019ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80019f4:	e853 3f00 	ldrex	r3, [r3]
 80019f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80019fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001a04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	3314      	adds	r3, #20
 8001a0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001a12:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001a16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001a1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001a22:	e841 2300 	strex	r3, r2, [r1]
 8001a26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001a2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1d9      	bne.n	80019e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d013      	beq.n	8001a62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a3e:	4a7e      	ldr	r2, [pc, #504]	@ (8001c38 <HAL_UART_IRQHandler+0x3e0>)
 8001a40:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe ffa4 	bl	8000994 <HAL_DMA_Abort_IT>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d016      	beq.n	8001a80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a60:	e00e      	b.n	8001a80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 f99c 	bl	8001da0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a68:	e00a      	b.n	8001a80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f998 	bl	8001da0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a70:	e006      	b.n	8001a80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f994 	bl	8001da0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001a7e:	e175      	b.n	8001d6c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a80:	bf00      	nop
    return;
 8001a82:	e173      	b.n	8001d6c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	f040 814f 	bne.w	8001d2c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a92:	f003 0310 	and.w	r3, r3, #16
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 8148 	beq.w	8001d2c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001aa0:	f003 0310 	and.w	r3, r3, #16
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 8141 	beq.w	8001d2c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 80b6 	beq.w	8001c3c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001adc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 8145 	beq.w	8001d70 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001aea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001aee:	429a      	cmp	r2, r3
 8001af0:	f080 813e 	bcs.w	8001d70 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001afa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	2b20      	cmp	r3, #32
 8001b04:	f000 8088 	beq.w	8001c18 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	330c      	adds	r3, #12
 8001b0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b12:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b16:	e853 3f00 	ldrex	r3, [r3]
 8001b1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001b1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b26:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	330c      	adds	r3, #12
 8001b30:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001b34:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001b38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b3c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001b40:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001b44:	e841 2300 	strex	r3, r2, [r1]
 8001b48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001b4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1d9      	bne.n	8001b08 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	3314      	adds	r3, #20
 8001b5a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b5e:	e853 3f00 	ldrex	r3, [r3]
 8001b62:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001b64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b66:	f023 0301 	bic.w	r3, r3, #1
 8001b6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	3314      	adds	r3, #20
 8001b74:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001b78:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001b7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b7e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001b80:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001b84:	e841 2300 	strex	r3, r2, [r1]
 8001b88:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8001b8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1e1      	bne.n	8001b54 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	3314      	adds	r3, #20
 8001b96:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001b9a:	e853 3f00 	ldrex	r3, [r3]
 8001b9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8001ba0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ba2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	3314      	adds	r3, #20
 8001bb0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001bb4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001bb6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bb8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001bba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001bbc:	e841 2300 	strex	r3, r2, [r1]
 8001bc0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001bc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1e3      	bne.n	8001b90 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2220      	movs	r2, #32
 8001bcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	330c      	adds	r3, #12
 8001bdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001be0:	e853 3f00 	ldrex	r3, [r3]
 8001be4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001be6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001be8:	f023 0310 	bic.w	r3, r3, #16
 8001bec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	330c      	adds	r3, #12
 8001bf6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001bfa:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001bfc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bfe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001c00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001c02:	e841 2300 	strex	r3, r2, [r1]
 8001c06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001c08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1e3      	bne.n	8001bd6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fe82 	bl	800091c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f8bf 	bl	8001db2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001c34:	e09c      	b.n	8001d70 <HAL_UART_IRQHandler+0x518>
 8001c36:	bf00      	nop
 8001c38:	08001e8d 	.word	0x08001e8d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 808e 	beq.w	8001d74 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001c58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 8089 	beq.w	8001d74 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	330c      	adds	r3, #12
 8001c68:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c6c:	e853 3f00 	ldrex	r3, [r3]
 8001c70:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001c78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	330c      	adds	r3, #12
 8001c82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8001c86:	647a      	str	r2, [r7, #68]	@ 0x44
 8001c88:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001c8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001c8e:	e841 2300 	strex	r3, r2, [r1]
 8001c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001c94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1e3      	bne.n	8001c62 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	3314      	adds	r3, #20
 8001ca0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca4:	e853 3f00 	ldrex	r3, [r3]
 8001ca8:	623b      	str	r3, [r7, #32]
   return(result);
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	3314      	adds	r3, #20
 8001cba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001cbe:	633a      	str	r2, [r7, #48]	@ 0x30
 8001cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001cc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001cc6:	e841 2300 	strex	r3, r2, [r1]
 8001cca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1e3      	bne.n	8001c9a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	330c      	adds	r3, #12
 8001ce6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	e853 3f00 	ldrex	r3, [r3]
 8001cee:	60fb      	str	r3, [r7, #12]
   return(result);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f023 0310 	bic.w	r3, r3, #16
 8001cf6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	330c      	adds	r3, #12
 8001d00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8001d04:	61fa      	str	r2, [r7, #28]
 8001d06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d08:	69b9      	ldr	r1, [r7, #24]
 8001d0a:	69fa      	ldr	r2, [r7, #28]
 8001d0c:	e841 2300 	strex	r3, r2, [r1]
 8001d10:	617b      	str	r3, [r7, #20]
   return(result);
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1e3      	bne.n	8001ce0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001d1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001d22:	4619      	mov	r1, r3
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f844 	bl	8001db2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001d2a:	e023      	b.n	8001d74 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d009      	beq.n	8001d4c <HAL_UART_IRQHandler+0x4f4>
 8001d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f8b5 	bl	8001eb4 <UART_Transmit_IT>
    return;
 8001d4a:	e014      	b.n	8001d76 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00e      	beq.n	8001d76 <HAL_UART_IRQHandler+0x51e>
 8001d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d008      	beq.n	8001d76 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f8f4 	bl	8001f52 <UART_EndTransmit_IT>
    return;
 8001d6a:	e004      	b.n	8001d76 <HAL_UART_IRQHandler+0x51e>
    return;
 8001d6c:	bf00      	nop
 8001d6e:	e002      	b.n	8001d76 <HAL_UART_IRQHandler+0x51e>
      return;
 8001d70:	bf00      	nop
 8001d72:	e000      	b.n	8001d76 <HAL_UART_IRQHandler+0x51e>
      return;
 8001d74:	bf00      	nop
  }
}
 8001d76:	37e8      	adds	r7, #232	@ 0xe8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr

08001d8e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr

08001da0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr

08001db2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr

08001dc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b095      	sub	sp, #84	@ 0x54
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	330c      	adds	r3, #12
 8001dd6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dda:	e853 3f00 	ldrex	r3, [r3]
 8001dde:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001de2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	330c      	adds	r3, #12
 8001dee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001df0:	643a      	str	r2, [r7, #64]	@ 0x40
 8001df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001df4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001df6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001df8:	e841 2300 	strex	r3, r2, [r1]
 8001dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1e5      	bne.n	8001dd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	3314      	adds	r3, #20
 8001e0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e0c:	6a3b      	ldr	r3, [r7, #32]
 8001e0e:	e853 3f00 	ldrex	r3, [r3]
 8001e12:	61fb      	str	r3, [r7, #28]
   return(result);
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f023 0301 	bic.w	r3, r3, #1
 8001e1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	3314      	adds	r3, #20
 8001e22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e2c:	e841 2300 	strex	r3, r2, [r1]
 8001e30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1e5      	bne.n	8001e04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d119      	bne.n	8001e74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	330c      	adds	r3, #12
 8001e46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	e853 3f00 	ldrex	r3, [r3]
 8001e4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	f023 0310 	bic.w	r3, r3, #16
 8001e56:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	330c      	adds	r3, #12
 8001e5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001e60:	61ba      	str	r2, [r7, #24]
 8001e62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e64:	6979      	ldr	r1, [r7, #20]
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	e841 2300 	strex	r3, r2, [r1]
 8001e6c:	613b      	str	r3, [r7, #16]
   return(result);
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1e5      	bne.n	8001e40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2220      	movs	r2, #32
 8001e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001e82:	bf00      	nop
 8001e84:	3754      	adds	r7, #84	@ 0x54
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f7ff ff7a 	bl	8001da0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001eac:	bf00      	nop
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b21      	cmp	r3, #33	@ 0x21
 8001ec6:	d13e      	bne.n	8001f46 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ed0:	d114      	bne.n	8001efc <UART_Transmit_IT+0x48>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d110      	bne.n	8001efc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001eee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	1c9a      	adds	r2, r3, #2
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	621a      	str	r2, [r3, #32]
 8001efa:	e008      	b.n	8001f0e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	1c59      	adds	r1, r3, #1
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6211      	str	r1, [r2, #32]
 8001f06:	781a      	ldrb	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	3b01      	subs	r3, #1
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10f      	bne.n	8001f42 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f30:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68da      	ldr	r2, [r3, #12]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f40:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	e000      	b.n	8001f48 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001f46:	2302      	movs	r3, #2
  }
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff ff02 	bl	8001d7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b08c      	sub	sp, #48	@ 0x30
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b22      	cmp	r3, #34	@ 0x22
 8001f94:	f040 80ae 	bne.w	80020f4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fa0:	d117      	bne.n	8001fd2 <UART_Receive_IT+0x50>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d113      	bne.n	8001fd2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fc4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fca:	1c9a      	adds	r2, r3, #2
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	629a      	str	r2, [r3, #40]	@ 0x28
 8001fd0:	e026      	b.n	8002020 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fe4:	d007      	beq.n	8001ff6 <UART_Receive_IT+0x74>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10a      	bne.n	8002004 <UART_Receive_IT+0x82>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d106      	bne.n	8002004 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002000:	701a      	strb	r2, [r3, #0]
 8002002:	e008      	b.n	8002016 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	b2db      	uxtb	r3, r3
 800200c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002010:	b2da      	uxtb	r2, r3
 8002012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002014:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201a:	1c5a      	adds	r2, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002024:	b29b      	uxth	r3, r3
 8002026:	3b01      	subs	r3, #1
 8002028:	b29b      	uxth	r3, r3
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	4619      	mov	r1, r3
 800202e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002030:	2b00      	cmp	r3, #0
 8002032:	d15d      	bne.n	80020f0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0220 	bic.w	r2, r2, #32
 8002042:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002052:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	695a      	ldr	r2, [r3, #20]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0201 	bic.w	r2, r2, #1
 8002062:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2220      	movs	r2, #32
 8002068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	2b01      	cmp	r3, #1
 8002078:	d135      	bne.n	80020e6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	330c      	adds	r3, #12
 8002086:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	e853 3f00 	ldrex	r3, [r3]
 800208e:	613b      	str	r3, [r7, #16]
   return(result);
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	f023 0310 	bic.w	r3, r3, #16
 8002096:	627b      	str	r3, [r7, #36]	@ 0x24
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	330c      	adds	r3, #12
 800209e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020a0:	623a      	str	r2, [r7, #32]
 80020a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020a4:	69f9      	ldr	r1, [r7, #28]
 80020a6:	6a3a      	ldr	r2, [r7, #32]
 80020a8:	e841 2300 	strex	r3, r2, [r1]
 80020ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1e5      	bne.n	8002080 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0310 	and.w	r3, r3, #16
 80020be:	2b10      	cmp	r3, #16
 80020c0:	d10a      	bne.n	80020d8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80020dc:	4619      	mov	r1, r3
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff fe67 	bl	8001db2 <HAL_UARTEx_RxEventCallback>
 80020e4:	e002      	b.n	80020ec <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff fe51 	bl	8001d8e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80020ec:	2300      	movs	r3, #0
 80020ee:	e002      	b.n	80020f6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	e000      	b.n	80020f6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80020f4:	2302      	movs	r3, #2
  }
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3730      	adds	r7, #48	@ 0x30
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	4313      	orrs	r3, r2
 800212e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800213a:	f023 030c 	bic.w	r3, r3, #12
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	68b9      	ldr	r1, [r7, #8]
 8002144:	430b      	orrs	r3, r1
 8002146:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	699a      	ldr	r2, [r3, #24]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a2c      	ldr	r2, [pc, #176]	@ (8002214 <UART_SetConfig+0x114>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d103      	bne.n	8002170 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002168:	f7ff faf4 	bl	8001754 <HAL_RCC_GetPCLK2Freq>
 800216c:	60f8      	str	r0, [r7, #12]
 800216e:	e002      	b.n	8002176 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002170:	f7ff fadc 	bl	800172c <HAL_RCC_GetPCLK1Freq>
 8002174:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	4613      	mov	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	009a      	lsls	r2, r3, #2
 8002180:	441a      	add	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	fbb2 f3f3 	udiv	r3, r2, r3
 800218c:	4a22      	ldr	r2, [pc, #136]	@ (8002218 <UART_SetConfig+0x118>)
 800218e:	fba2 2303 	umull	r2, r3, r2, r3
 8002192:	095b      	lsrs	r3, r3, #5
 8002194:	0119      	lsls	r1, r3, #4
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	009a      	lsls	r2, r3, #2
 80021a0:	441a      	add	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80021ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002218 <UART_SetConfig+0x118>)
 80021ae:	fba3 0302 	umull	r0, r3, r3, r2
 80021b2:	095b      	lsrs	r3, r3, #5
 80021b4:	2064      	movs	r0, #100	@ 0x64
 80021b6:	fb00 f303 	mul.w	r3, r0, r3
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	3332      	adds	r3, #50	@ 0x32
 80021c0:	4a15      	ldr	r2, [pc, #84]	@ (8002218 <UART_SetConfig+0x118>)
 80021c2:	fba2 2303 	umull	r2, r3, r2, r3
 80021c6:	095b      	lsrs	r3, r3, #5
 80021c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021cc:	4419      	add	r1, r3
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	009a      	lsls	r2, r3, #2
 80021d8:	441a      	add	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80021e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002218 <UART_SetConfig+0x118>)
 80021e6:	fba3 0302 	umull	r0, r3, r3, r2
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	2064      	movs	r0, #100	@ 0x64
 80021ee:	fb00 f303 	mul.w	r3, r0, r3
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	011b      	lsls	r3, r3, #4
 80021f6:	3332      	adds	r3, #50	@ 0x32
 80021f8:	4a07      	ldr	r2, [pc, #28]	@ (8002218 <UART_SetConfig+0x118>)
 80021fa:	fba2 2303 	umull	r2, r3, r2, r3
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	f003 020f 	and.w	r2, r3, #15
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	440a      	add	r2, r1
 800220a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800220c:	bf00      	nop
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40013800 	.word	0x40013800
 8002218:	51eb851f 	.word	0x51eb851f

0800221c <memset>:
 800221c:	4603      	mov	r3, r0
 800221e:	4402      	add	r2, r0
 8002220:	4293      	cmp	r3, r2
 8002222:	d100      	bne.n	8002226 <memset+0xa>
 8002224:	4770      	bx	lr
 8002226:	f803 1b01 	strb.w	r1, [r3], #1
 800222a:	e7f9      	b.n	8002220 <memset+0x4>

0800222c <__libc_init_array>:
 800222c:	b570      	push	{r4, r5, r6, lr}
 800222e:	2600      	movs	r6, #0
 8002230:	4d0c      	ldr	r5, [pc, #48]	@ (8002264 <__libc_init_array+0x38>)
 8002232:	4c0d      	ldr	r4, [pc, #52]	@ (8002268 <__libc_init_array+0x3c>)
 8002234:	1b64      	subs	r4, r4, r5
 8002236:	10a4      	asrs	r4, r4, #2
 8002238:	42a6      	cmp	r6, r4
 800223a:	d109      	bne.n	8002250 <__libc_init_array+0x24>
 800223c:	f000 f81a 	bl	8002274 <_init>
 8002240:	2600      	movs	r6, #0
 8002242:	4d0a      	ldr	r5, [pc, #40]	@ (800226c <__libc_init_array+0x40>)
 8002244:	4c0a      	ldr	r4, [pc, #40]	@ (8002270 <__libc_init_array+0x44>)
 8002246:	1b64      	subs	r4, r4, r5
 8002248:	10a4      	asrs	r4, r4, #2
 800224a:	42a6      	cmp	r6, r4
 800224c:	d105      	bne.n	800225a <__libc_init_array+0x2e>
 800224e:	bd70      	pop	{r4, r5, r6, pc}
 8002250:	f855 3b04 	ldr.w	r3, [r5], #4
 8002254:	4798      	blx	r3
 8002256:	3601      	adds	r6, #1
 8002258:	e7ee      	b.n	8002238 <__libc_init_array+0xc>
 800225a:	f855 3b04 	ldr.w	r3, [r5], #4
 800225e:	4798      	blx	r3
 8002260:	3601      	adds	r6, #1
 8002262:	e7f2      	b.n	800224a <__libc_init_array+0x1e>
 8002264:	080022b8 	.word	0x080022b8
 8002268:	080022b8 	.word	0x080022b8
 800226c:	080022b8 	.word	0x080022b8
 8002270:	080022bc 	.word	0x080022bc

08002274 <_init>:
 8002274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002276:	bf00      	nop
 8002278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800227a:	bc08      	pop	{r3}
 800227c:	469e      	mov	lr, r3
 800227e:	4770      	bx	lr

08002280 <_fini>:
 8002280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002282:	bf00      	nop
 8002284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002286:	bc08      	pop	{r3}
 8002288:	469e      	mov	lr, r3
 800228a:	4770      	bx	lr
