
krsbi_bno_kicker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006008  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  080061a0  080061a0  000071a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063e0  080063e0  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  080063e0  080063e0  000073e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063e8  080063e8  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080063e8  080063e8  000073e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080063f0  080063f0  000073f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080063f4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c88  2000005c  08006450  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ce4  08006450  00008ce4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001774f  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003273  00000000  00000000  0001f7db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  00022a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e2c  00000000  00000000  00023c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a5c  00000000  00000000  00024a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000165db  00000000  00000000  0003c4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000979f9  00000000  00000000  00052abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ea4b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fa0  00000000  00000000  000ea4f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000ef498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000005c 	.word	0x2000005c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006188 	.word	0x08006188

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	08006188 	.word	0x08006188

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001fc:	f000 b96a 	b.w	80004d4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	460c      	mov	r4, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14e      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000224:	4694      	mov	ip, r2
 8000226:	458c      	cmp	ip, r1
 8000228:	4686      	mov	lr, r0
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	d962      	bls.n	80002f6 <__udivmoddi4+0xde>
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0320 	rsb	r3, r2, #32
 8000236:	4091      	lsls	r1, r2
 8000238:	fa20 f303 	lsr.w	r3, r0, r3
 800023c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000240:	4319      	orrs	r1, r3
 8000242:	fa00 fe02 	lsl.w	lr, r0, r2
 8000246:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024a:	fa1f f68c 	uxth.w	r6, ip
 800024e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000252:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000256:	fb07 1114 	mls	r1, r7, r4, r1
 800025a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025e:	fb04 f106 	mul.w	r1, r4, r6
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800026e:	f080 8112 	bcs.w	8000496 <__udivmoddi4+0x27e>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 810f 	bls.w	8000496 <__udivmoddi4+0x27e>
 8000278:	3c02      	subs	r4, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a59      	subs	r1, r3, r1
 800027e:	fa1f f38e 	uxth.w	r3, lr
 8000282:	fbb1 f0f7 	udiv	r0, r1, r7
 8000286:	fb07 1110 	mls	r1, r7, r0, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb00 f606 	mul.w	r6, r0, r6
 8000292:	429e      	cmp	r6, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x94>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800029e:	f080 80fc 	bcs.w	800049a <__udivmoddi4+0x282>
 80002a2:	429e      	cmp	r6, r3
 80002a4:	f240 80f9 	bls.w	800049a <__udivmoddi4+0x282>
 80002a8:	4463      	add	r3, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	1b9b      	subs	r3, r3, r6
 80002ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa6>
 80002b6:	40d3      	lsrs	r3, r2
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xba>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb4>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa6>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x150>
 80002da:	42a3      	cmp	r3, r4
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xcc>
 80002de:	4290      	cmp	r0, r2
 80002e0:	f0c0 80f0 	bcc.w	80004c4 <__udivmoddi4+0x2ac>
 80002e4:	1a86      	subs	r6, r0, r2
 80002e6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	2d00      	cmp	r5, #0
 80002ee:	d0e6      	beq.n	80002be <__udivmoddi4+0xa6>
 80002f0:	e9c5 6300 	strd	r6, r3, [r5]
 80002f4:	e7e3      	b.n	80002be <__udivmoddi4+0xa6>
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x204>
 80002fc:	eba1 040c 	sub.w	r4, r1, ip
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	fa1f f78c 	uxth.w	r7, ip
 8000308:	2101      	movs	r1, #1
 800030a:	fbb4 f6f8 	udiv	r6, r4, r8
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	fb08 4416 	mls	r4, r8, r6, r4
 8000316:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031a:	fb07 f006 	mul.w	r0, r7, r6
 800031e:	4298      	cmp	r0, r3
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x11c>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x11a>
 800032c:	4298      	cmp	r0, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 8000332:	4626      	mov	r6, r4
 8000334:	1a1c      	subs	r4, r3, r0
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb4 f0f8 	udiv	r0, r4, r8
 800033e:	fb08 4410 	mls	r4, r8, r0, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb00 f707 	mul.w	r7, r0, r7
 800034a:	429f      	cmp	r7, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x148>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x146>
 8000358:	429f      	cmp	r7, r3
 800035a:	f200 80b0 	bhi.w	80004be <__udivmoddi4+0x2a6>
 800035e:	4620      	mov	r0, r4
 8000360:	1bdb      	subs	r3, r3, r7
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x9c>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa20 fc06 	lsr.w	ip, r0, r6
 8000378:	fa04 f301 	lsl.w	r3, r4, r1
 800037c:	ea43 030c 	orr.w	r3, r3, ip
 8000380:	40f4      	lsrs	r4, r6
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	0c38      	lsrs	r0, r7, #16
 8000388:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800038c:	fbb4 fef0 	udiv	lr, r4, r0
 8000390:	fa1f fc87 	uxth.w	ip, r7
 8000394:	fb00 441e 	mls	r4, r0, lr, r4
 8000398:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800039c:	fb0e f90c 	mul.w	r9, lr, ip
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90a      	bls.n	80003be <__udivmoddi4+0x1a6>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ae:	f080 8084 	bcs.w	80004ba <__udivmoddi4+0x2a2>
 80003b2:	45a1      	cmp	r9, r4
 80003b4:	f240 8081 	bls.w	80004ba <__udivmoddi4+0x2a2>
 80003b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003bc:	443c      	add	r4, r7
 80003be:	eba4 0409 	sub.w	r4, r4, r9
 80003c2:	fa1f f983 	uxth.w	r9, r3
 80003c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ca:	fb00 4413 	mls	r4, r0, r3, r4
 80003ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1d2>
 80003da:	193c      	adds	r4, r7, r4
 80003dc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e0:	d267      	bcs.n	80004b2 <__udivmoddi4+0x29a>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0x29a>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ee:	fba0 9302 	umull	r9, r3, r0, r2
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	429c      	cmp	r4, r3
 80003f8:	46ce      	mov	lr, r9
 80003fa:	469c      	mov	ip, r3
 80003fc:	d351      	bcc.n	80004a2 <__udivmoddi4+0x28a>
 80003fe:	d04e      	beq.n	800049e <__udivmoddi4+0x286>
 8000400:	b155      	cbz	r5, 8000418 <__udivmoddi4+0x200>
 8000402:	ebb8 030e 	subs.w	r3, r8, lr
 8000406:	eb64 040c 	sbc.w	r4, r4, ip
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	40cb      	lsrs	r3, r1
 8000410:	431e      	orrs	r6, r3
 8000412:	40cc      	lsrs	r4, r1
 8000414:	e9c5 6400 	strd	r6, r4, [r5]
 8000418:	2100      	movs	r1, #0
 800041a:	e750      	b.n	80002be <__udivmoddi4+0xa6>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f103 	lsr.w	r1, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa24 f303 	lsr.w	r3, r4, r3
 800042c:	4094      	lsls	r4, r2
 800042e:	430c      	orrs	r4, r1
 8000430:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000434:	fa00 fe02 	lsl.w	lr, r0, r2
 8000438:	fa1f f78c 	uxth.w	r7, ip
 800043c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000440:	fb08 3110 	mls	r1, r8, r0, r3
 8000444:	0c23      	lsrs	r3, r4, #16
 8000446:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044a:	fb00 f107 	mul.w	r1, r0, r7
 800044e:	4299      	cmp	r1, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x24c>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800045a:	d22c      	bcs.n	80004b6 <__udivmoddi4+0x29e>
 800045c:	4299      	cmp	r1, r3
 800045e:	d92a      	bls.n	80004b6 <__udivmoddi4+0x29e>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a5b      	subs	r3, r3, r1
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb3 f1f8 	udiv	r1, r3, r8
 800046c:	fb08 3311 	mls	r3, r8, r1, r3
 8000470:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000474:	fb01 f307 	mul.w	r3, r1, r7
 8000478:	42a3      	cmp	r3, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x276>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000484:	d213      	bcs.n	80004ae <__udivmoddi4+0x296>
 8000486:	42a3      	cmp	r3, r4
 8000488:	d911      	bls.n	80004ae <__udivmoddi4+0x296>
 800048a:	3902      	subs	r1, #2
 800048c:	4464      	add	r4, ip
 800048e:	1ae4      	subs	r4, r4, r3
 8000490:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000494:	e739      	b.n	800030a <__udivmoddi4+0xf2>
 8000496:	4604      	mov	r4, r0
 8000498:	e6f0      	b.n	800027c <__udivmoddi4+0x64>
 800049a:	4608      	mov	r0, r1
 800049c:	e706      	b.n	80002ac <__udivmoddi4+0x94>
 800049e:	45c8      	cmp	r8, r9
 80004a0:	d2ae      	bcs.n	8000400 <__udivmoddi4+0x1e8>
 80004a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004aa:	3801      	subs	r0, #1
 80004ac:	e7a8      	b.n	8000400 <__udivmoddi4+0x1e8>
 80004ae:	4631      	mov	r1, r6
 80004b0:	e7ed      	b.n	800048e <__udivmoddi4+0x276>
 80004b2:	4603      	mov	r3, r0
 80004b4:	e799      	b.n	80003ea <__udivmoddi4+0x1d2>
 80004b6:	4630      	mov	r0, r6
 80004b8:	e7d4      	b.n	8000464 <__udivmoddi4+0x24c>
 80004ba:	46d6      	mov	lr, sl
 80004bc:	e77f      	b.n	80003be <__udivmoddi4+0x1a6>
 80004be:	4463      	add	r3, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e74d      	b.n	8000360 <__udivmoddi4+0x148>
 80004c4:	4606      	mov	r6, r0
 80004c6:	4623      	mov	r3, r4
 80004c8:	4608      	mov	r0, r1
 80004ca:	e70f      	b.n	80002ec <__udivmoddi4+0xd4>
 80004cc:	3e02      	subs	r6, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	e730      	b.n	8000334 <__udivmoddi4+0x11c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	0a5a      	lsrs	r2, r3, #9
 80004e8:	490f      	ldr	r1, [pc, #60]	@ (8000528 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80004ea:	fba1 1202 	umull	r1, r2, r1, r2
 80004ee:	09d2      	lsrs	r2, r2, #7
 80004f0:	490e      	ldr	r1, [pc, #56]	@ (800052c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80004f2:	fb01 f202 	mul.w	r2, r1, r2
 80004f6:	1a9b      	subs	r3, r3, r2
 80004f8:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	0a5b      	lsrs	r3, r3, #9
 8000500:	4a09      	ldr	r2, [pc, #36]	@ (8000528 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000502:	fba2 2303 	umull	r2, r3, r2, r3
 8000506:	09db      	lsrs	r3, r3, #7
 8000508:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	441a      	add	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	68fa      	ldr	r2, [r7, #12]
 800051a:	601a      	str	r2, [r3, #0]
}
 800051c:	bf00      	nop
 800051e:	3714      	adds	r7, #20
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	00044b83 	.word	0x00044b83
 800052c:	3b9aca00 	.word	0x3b9aca00

08000530 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	4b10      	ldr	r3, [pc, #64]	@ (800057c <MX_DMA_Init+0x4c>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053e:	4a0f      	ldr	r2, [pc, #60]	@ (800057c <MX_DMA_Init+0x4c>)
 8000540:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000544:	6313      	str	r3, [r2, #48]	@ 0x30
 8000546:	4b0d      	ldr	r3, [pc, #52]	@ (800057c <MX_DMA_Init+0x4c>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000552:	2200      	movs	r2, #0
 8000554:	2100      	movs	r1, #0
 8000556:	2010      	movs	r0, #16
 8000558:	f002 fb6b 	bl	8002c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800055c:	2010      	movs	r0, #16
 800055e:	f002 fb84 	bl	8002c6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	2100      	movs	r1, #0
 8000566:	2011      	movs	r0, #17
 8000568:	f002 fb63 	bl	8002c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800056c:	2011      	movs	r0, #17
 800056e:	f002 fb7c 	bl	8002c6a <HAL_NVIC_EnableIRQ>

}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40023800 	.word	0x40023800

08000580 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000586:	f107 030c 	add.w	r3, r7, #12
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	4b1f      	ldr	r3, [pc, #124]	@ (8000618 <MX_GPIO_Init+0x98>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	4a1e      	ldr	r2, [pc, #120]	@ (8000618 <MX_GPIO_Init+0x98>)
 80005a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000618 <MX_GPIO_Init+0x98>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	4b18      	ldr	r3, [pc, #96]	@ (8000618 <MX_GPIO_Init+0x98>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	4a17      	ldr	r2, [pc, #92]	@ (8000618 <MX_GPIO_Init+0x98>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c2:	4b15      	ldr	r3, [pc, #84]	@ (8000618 <MX_GPIO_Init+0x98>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	603b      	str	r3, [r7, #0]
 80005d2:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <MX_GPIO_Init+0x98>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	4a10      	ldr	r2, [pc, #64]	@ (8000618 <MX_GPIO_Init+0x98>)
 80005d8:	f043 0302 	orr.w	r3, r3, #2
 80005dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005de:	4b0e      	ldr	r3, [pc, #56]	@ (8000618 <MX_GPIO_Init+0x98>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e2:	f003 0302 	and.w	r3, r3, #2
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KICKER_GPIO_Port, KICKER_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2120      	movs	r1, #32
 80005ee:	480b      	ldr	r0, [pc, #44]	@ (800061c <MX_GPIO_Init+0x9c>)
 80005f0:	f003 f8dc 	bl	80037ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KICKER_Pin;
 80005f4:	2320      	movs	r3, #32
 80005f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f8:	2301      	movs	r3, #1
 80005fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KICKER_GPIO_Port, &GPIO_InitStruct);
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	4619      	mov	r1, r3
 800060a:	4804      	ldr	r0, [pc, #16]	@ (800061c <MX_GPIO_Init+0x9c>)
 800060c:	f002 ff4a 	bl	80034a4 <HAL_GPIO_Init>

}
 8000610:	bf00      	nop
 8000612:	3720      	adds	r7, #32
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40023800 	.word	0x40023800
 800061c:	40020400 	.word	0x40020400

08000620 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000624:	4b12      	ldr	r3, [pc, #72]	@ (8000670 <MX_I2C1_Init+0x50>)
 8000626:	4a13      	ldr	r2, [pc, #76]	@ (8000674 <MX_I2C1_Init+0x54>)
 8000628:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800062a:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <MX_I2C1_Init+0x50>)
 800062c:	4a12      	ldr	r2, [pc, #72]	@ (8000678 <MX_I2C1_Init+0x58>)
 800062e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000630:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <MX_I2C1_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000636:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <MX_I2C1_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800063c:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <MX_I2C1_Init+0x50>)
 800063e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000642:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000644:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <MX_I2C1_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800064a:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <MX_I2C1_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000650:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000656:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800065c:	4804      	ldr	r0, [pc, #16]	@ (8000670 <MX_I2C1_Init+0x50>)
 800065e:	f003 f8bf 	bl	80037e0 <HAL_I2C_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000668:	f000 f8dc 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000078 	.word	0x20000078
 8000674:	40005400 	.word	0x40005400
 8000678:	000186a0 	.word	0x000186a0

0800067c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	@ 0x28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a19      	ldr	r2, [pc, #100]	@ (8000700 <HAL_I2C_MspInit+0x84>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d12b      	bne.n	80006f6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
 80006a2:	4b18      	ldr	r3, [pc, #96]	@ (8000704 <HAL_I2C_MspInit+0x88>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	4a17      	ldr	r2, [pc, #92]	@ (8000704 <HAL_I2C_MspInit+0x88>)
 80006a8:	f043 0302 	orr.w	r3, r3, #2
 80006ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ae:	4b15      	ldr	r3, [pc, #84]	@ (8000704 <HAL_I2C_MspInit+0x88>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	f003 0302 	and.w	r3, r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006ba:	23c0      	movs	r3, #192	@ 0xc0
 80006bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006be:	2312      	movs	r3, #18
 80006c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c6:	2303      	movs	r3, #3
 80006c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006ca:	2304      	movs	r3, #4
 80006cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	480c      	ldr	r0, [pc, #48]	@ (8000708 <HAL_I2C_MspInit+0x8c>)
 80006d6:	f002 fee5 	bl	80034a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <HAL_I2C_MspInit+0x88>)
 80006e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e2:	4a08      	ldr	r2, [pc, #32]	@ (8000704 <HAL_I2C_MspInit+0x88>)
 80006e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80006ea:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <HAL_I2C_MspInit+0x88>)
 80006ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006f6:	bf00      	nop
 80006f8:	3728      	adds	r7, #40	@ 0x28
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40005400 	.word	0x40005400
 8000704:	40023800 	.word	0x40023800
 8000708:	40020400 	.word	0x40020400

0800070c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	uint32_t currenTick = HAL_GetTick();
 8000712:	f002 f9a7 	bl	8002a64 <HAL_GetTick>
 8000716:	6078      	str	r0, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000718:	f002 f93e 	bl	8002998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071c:	f000 f81a 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000720:	f7ff ff2e 	bl	8000580 <MX_GPIO_Init>
  MX_DMA_Init();
 8000724:	f7ff ff04 	bl	8000530 <MX_DMA_Init>
  MX_I2C1_Init();
 8000728:	f7ff ff7a 	bl	8000620 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800072c:	f002 f82a 	bl	8002784 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000730:	f001 ff98 	bl	8002664 <MX_TIM1_Init>

//  HAL_TIM_Base_Start_IT(&htim1);
//  bno055_assignI2C(&hi2c1);
//  bno055_setup();
//  bno055_setOperationModeNDOF();
  setup();
 8000734:	f001 f982 	bl	8001a3c <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GetTick()-currenTick>100){
 8000738:	f002 f994 	bl	8002a64 <HAL_GetTick>
 800073c:	4602      	mov	r2, r0
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	2b64      	cmp	r3, #100	@ 0x64
 8000744:	d9f8      	bls.n	8000738 <main+0x2c>

			loop();
 8000746:	f001 f989 	bl	8001a5c <loop>
			currenTick = HAL_GetTick();
 800074a:	f002 f98b 	bl	8002a64 <HAL_GetTick>
 800074e:	6078      	str	r0, [r7, #4]
	  if(HAL_GetTick()-currenTick>100){
 8000750:	e7f2      	b.n	8000738 <main+0x2c>
	...

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b094      	sub	sp, #80	@ 0x50
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	2230      	movs	r2, #48	@ 0x30
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f005 fbbe 	bl	8005ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	4b27      	ldr	r3, [pc, #156]	@ (800081c <SystemClock_Config+0xc8>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000780:	4a26      	ldr	r2, [pc, #152]	@ (800081c <SystemClock_Config+0xc8>)
 8000782:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000786:	6413      	str	r3, [r2, #64]	@ 0x40
 8000788:	4b24      	ldr	r3, [pc, #144]	@ (800081c <SystemClock_Config+0xc8>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000794:	2300      	movs	r3, #0
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	4b21      	ldr	r3, [pc, #132]	@ (8000820 <SystemClock_Config+0xcc>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a20      	ldr	r2, [pc, #128]	@ (8000820 <SystemClock_Config+0xcc>)
 800079e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000820 <SystemClock_Config+0xcc>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b0:	2301      	movs	r3, #1
 80007b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ba:	2302      	movs	r3, #2
 80007bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80007c4:	230c      	movs	r3, #12
 80007c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007c8:	2360      	movs	r3, #96	@ 0x60
 80007ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007cc:	2302      	movs	r3, #2
 80007ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007d0:	2304      	movs	r3, #4
 80007d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d4:	f107 0320 	add.w	r3, r7, #32
 80007d8:	4618      	mov	r0, r3
 80007da:	f003 f945 	bl	8003a68 <HAL_RCC_OscConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007e4:	f000 f81e 	bl	8000824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e8:	230f      	movs	r3, #15
 80007ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ec:	2302      	movs	r3, #2
 80007ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	2103      	movs	r1, #3
 8000804:	4618      	mov	r0, r3
 8000806:	f003 fba7 	bl	8003f58 <HAL_RCC_ClockConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000810:	f000 f808 	bl	8000824 <Error_Handler>
  }
}
 8000814:	bf00      	nop
 8000816:	3750      	adds	r7, #80	@ 0x50
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40023800 	.word	0x40023800
 8000820:	40007000 	.word	0x40007000

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <Error_Handler+0x8>

08000830 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2200      	movs	r2, #0
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	4618      	mov	r0, r3
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
	...

08000854 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	4a04      	ldr	r2, [pc, #16]	@ (8000870 <_ZN3ros3MsgC1Ev+0x1c>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4618      	mov	r0, r3
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	080063b0 	.word	0x080063b0

08000874 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
      data()
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff ffe8 	bl	8000854 <_ZN3ros3MsgC1Ev>
 8000884:	4a06      	ldr	r2, [pc, #24]	@ (80008a0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	3304      	adds	r3, #4
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff ffce 	bl	8000830 <_ZN3ros4TimeC1Ev>
    {
    }
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4618      	mov	r0, r3
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	08006398 	.word	0x08006398

080008a4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6859      	ldr	r1, [r3, #4]
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	683a      	ldr	r2, [r7, #0]
 80008ba:	4413      	add	r3, r2
 80008bc:	b2ca      	uxtb	r2, r1
 80008be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	0a19      	lsrs	r1, r3, #8
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	3301      	adds	r3, #1
 80008ca:	683a      	ldr	r2, [r7, #0]
 80008cc:	4413      	add	r3, r2
 80008ce:	b2ca      	uxtb	r2, r1
 80008d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	0c19      	lsrs	r1, r3, #16
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	3302      	adds	r3, #2
 80008dc:	683a      	ldr	r2, [r7, #0]
 80008de:	4413      	add	r3, r2
 80008e0:	b2ca      	uxtb	r2, r1
 80008e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	0e19      	lsrs	r1, r3, #24
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	3303      	adds	r3, #3
 80008ee:	683a      	ldr	r2, [r7, #0]
 80008f0:	4413      	add	r3, r2
 80008f2:	b2ca      	uxtb	r2, r1
 80008f4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	3304      	adds	r3, #4
 80008fa:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	6899      	ldr	r1, [r3, #8]
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	683a      	ldr	r2, [r7, #0]
 8000904:	4413      	add	r3, r2
 8000906:	b2ca      	uxtb	r2, r1
 8000908:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	0a19      	lsrs	r1, r3, #8
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	3301      	adds	r3, #1
 8000914:	683a      	ldr	r2, [r7, #0]
 8000916:	4413      	add	r3, r2
 8000918:	b2ca      	uxtb	r2, r1
 800091a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	689b      	ldr	r3, [r3, #8]
 8000920:	0c19      	lsrs	r1, r3, #16
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	3302      	adds	r3, #2
 8000926:	683a      	ldr	r2, [r7, #0]
 8000928:	4413      	add	r3, r2
 800092a:	b2ca      	uxtb	r2, r1
 800092c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	0e19      	lsrs	r1, r3, #24
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	3303      	adds	r3, #3
 8000938:	683a      	ldr	r2, [r7, #0]
 800093a:	4413      	add	r3, r2
 800093c:	b2ca      	uxtb	r2, r1
 800093e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	3304      	adds	r3, #4
 8000944:	60fb      	str	r3, [r7, #12]
      return offset;
 8000946:	68fb      	ldr	r3, [r7, #12]
    }
 8000948:	4618      	mov	r0, r3
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	683a      	ldr	r2, [r7, #0]
 8000966:	4413      	add	r3, r2
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	685a      	ldr	r2, [r3, #4]
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	3301      	adds	r3, #1
 8000978:	6839      	ldr	r1, [r7, #0]
 800097a:	440b      	add	r3, r1
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	021b      	lsls	r3, r3, #8
 8000980:	431a      	orrs	r2, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	685a      	ldr	r2, [r3, #4]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	3302      	adds	r3, #2
 800098e:	6839      	ldr	r1, [r7, #0]
 8000990:	440b      	add	r3, r1
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	041b      	lsls	r3, r3, #16
 8000996:	431a      	orrs	r2, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	685a      	ldr	r2, [r3, #4]
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	3303      	adds	r3, #3
 80009a4:	6839      	ldr	r1, [r7, #0]
 80009a6:	440b      	add	r3, r1
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	061b      	lsls	r3, r3, #24
 80009ac:	431a      	orrs	r2, r3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	3304      	adds	r3, #4
 80009b6:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	683a      	ldr	r2, [r7, #0]
 80009bc:	4413      	add	r3, r2
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	689a      	ldr	r2, [r3, #8]
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	3301      	adds	r3, #1
 80009ce:	6839      	ldr	r1, [r7, #0]
 80009d0:	440b      	add	r3, r1
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	021b      	lsls	r3, r3, #8
 80009d6:	431a      	orrs	r2, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	689a      	ldr	r2, [r3, #8]
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	3302      	adds	r3, #2
 80009e4:	6839      	ldr	r1, [r7, #0]
 80009e6:	440b      	add	r3, r1
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	041b      	lsls	r3, r3, #16
 80009ec:	431a      	orrs	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	689a      	ldr	r2, [r3, #8]
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	3303      	adds	r3, #3
 80009fa:	6839      	ldr	r1, [r7, #0]
 80009fc:	440b      	add	r3, r1
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	061b      	lsls	r3, r3, #24
 8000a02:	431a      	orrs	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	3304      	adds	r3, #4
 8000a0c:	60fb      	str	r3, [r7, #12]
     return offset;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
    }
 8000a10:	4618      	mov	r0, r3
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	4b03      	ldr	r3, [pc, #12]	@ (8000a34 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8000a26:	4618      	mov	r0, r3
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	080061a0 	.word	0x080061a0

08000a38 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	4b03      	ldr	r3, [pc, #12]	@ (8000a50 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8000a42:	4618      	mov	r0, r3
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	080061b0 	.word	0x080061b0

08000a54 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff fef8 	bl	8000854 <_ZN3ros3MsgC1Ev>
 8000a64:	4a0b      	ldr	r2, [pc, #44]	@ (8000a94 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a09      	ldr	r2, [pc, #36]	@ (8000a98 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000a74:	609a      	str	r2, [r3, #8]
      message_type(""),
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4a07      	ldr	r2, [pc, #28]	@ (8000a98 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000a7a:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a06      	ldr	r2, [pc, #24]	@ (8000a98 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000a80:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2200      	movs	r2, #0
 8000a86:	615a      	str	r2, [r3, #20]
    {
    }
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	08006380 	.word	0x08006380
 8000a98:	080061d4 	.word	0x080061d4

08000a9c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	8899      	ldrh	r1, [r3, #4]
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	683a      	ldr	r2, [r7, #0]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	b2ca      	uxtb	r2, r1
 8000ab6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	889b      	ldrh	r3, [r3, #4]
 8000abc:	0a1b      	lsrs	r3, r3, #8
 8000abe:	b299      	uxth	r1, r3
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	683a      	ldr	r2, [r7, #0]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	b2ca      	uxtb	r2, r1
 8000aca:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	3302      	adds	r3, #2
 8000ad0:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fb7e 	bl	80001d8 <strlen>
 8000adc:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	683a      	ldr	r2, [r7, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	69b9      	ldr	r1, [r7, #24]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 ffd0 	bl	8001a8c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	3304      	adds	r3, #4
 8000af0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	683a      	ldr	r2, [r7, #0]
 8000af6:	18d0      	adds	r0, r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	69ba      	ldr	r2, [r7, #24]
 8000afe:	4619      	mov	r1, r3
 8000b00:	f005 fa24 	bl	8005f4c <memcpy>
      offset += length_topic_name;
 8000b04:	69fa      	ldr	r2, [r7, #28]
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	4413      	add	r3, r2
 8000b0a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fb61 	bl	80001d8 <strlen>
 8000b16:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	683a      	ldr	r2, [r7, #0]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	6979      	ldr	r1, [r7, #20]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 ffb3 	bl	8001a8c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	683a      	ldr	r2, [r7, #0]
 8000b30:	18d0      	adds	r0, r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	68db      	ldr	r3, [r3, #12]
 8000b36:	697a      	ldr	r2, [r7, #20]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f005 fa07 	bl	8005f4c <memcpy>
      offset += length_message_type;
 8000b3e:	69fa      	ldr	r2, [r7, #28]
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	4413      	add	r3, r2
 8000b44:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	691b      	ldr	r3, [r3, #16]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fb44 	bl	80001d8 <strlen>
 8000b50:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	683a      	ldr	r2, [r7, #0]
 8000b56:	4413      	add	r3, r2
 8000b58:	6939      	ldr	r1, [r7, #16]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 ff96 	bl	8001a8c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	3304      	adds	r3, #4
 8000b64:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	683a      	ldr	r2, [r7, #0]
 8000b6a:	18d0      	adds	r0, r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	691b      	ldr	r3, [r3, #16]
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	4619      	mov	r1, r3
 8000b74:	f005 f9ea 	bl	8005f4c <memcpy>
      offset += length_md5sum;
 8000b78:	69fa      	ldr	r2, [r7, #28]
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	695b      	ldr	r3, [r3, #20]
 8000b84:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000b86:	68f9      	ldr	r1, [r7, #12]
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	683a      	ldr	r2, [r7, #0]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	b2ca      	uxtb	r2, r1
 8000b90:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	0a19      	lsrs	r1, r3, #8
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	683a      	ldr	r2, [r7, #0]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	b2ca      	uxtb	r2, r1
 8000ba0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	0c19      	lsrs	r1, r3, #16
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3302      	adds	r3, #2
 8000baa:	683a      	ldr	r2, [r7, #0]
 8000bac:	4413      	add	r3, r2
 8000bae:	b2ca      	uxtb	r2, r1
 8000bb0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	0e19      	lsrs	r1, r3, #24
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3303      	adds	r3, #3
 8000bba:	683a      	ldr	r2, [r7, #0]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	b2ca      	uxtb	r2, r1
 8000bc0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	61fb      	str	r3, [r7, #28]
      return offset;
 8000bc8:	69fb      	ldr	r3, [r7, #28]
    }
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3720      	adds	r7, #32
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b08a      	sub	sp, #40	@ 0x28
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
 8000bda:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	683a      	ldr	r2, [r7, #0]
 8000be4:	4413      	add	r3, r2
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	889b      	ldrh	r3, [r3, #4]
 8000bf2:	b21a      	sxth	r2, r3
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	6839      	ldr	r1, [r7, #0]
 8000bfa:	440b      	add	r3, r1
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	021b      	lsls	r3, r3, #8
 8000c00:	b21b      	sxth	r3, r3
 8000c02:	4313      	orrs	r3, r2
 8000c04:	b21b      	sxth	r3, r3
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	3302      	adds	r3, #2
 8000c10:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000c12:	69bb      	ldr	r3, [r7, #24]
 8000c14:	683a      	ldr	r2, [r7, #0]
 8000c16:	441a      	add	r2, r3
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 ff53 	bl	8001aca <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	3304      	adds	r3, #4
 8000c28:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000c2a:	69bb      	ldr	r3, [r7, #24]
 8000c2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c2e:	e00b      	b.n	8000c48 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8000c30:	683a      	ldr	r2, [r7, #0]
 8000c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c34:	441a      	add	r2, r3
 8000c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	6839      	ldr	r1, [r7, #0]
 8000c3c:	440b      	add	r3, r1
 8000c3e:	7812      	ldrb	r2, [r2, #0]
 8000c40:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c44:	3301      	adds	r3, #1
 8000c46:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d3ed      	bcc.n	8000c30 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	4413      	add	r3, r2
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	683a      	ldr	r2, [r7, #0]
 8000c5e:	4413      	add	r3, r2
 8000c60:	2200      	movs	r2, #0
 8000c62:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	683a      	ldr	r2, [r7, #0]
 8000c6a:	441a      	add	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	4413      	add	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	683a      	ldr	r2, [r7, #0]
 8000c7c:	441a      	add	r2, r3
 8000c7e:	f107 0310 	add.w	r3, r7, #16
 8000c82:	4611      	mov	r1, r2
 8000c84:	4618      	mov	r0, r3
 8000c86:	f000 ff20 	bl	8001aca <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	623b      	str	r3, [r7, #32]
 8000c94:	e00b      	b.n	8000cae <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8000c96:	683a      	ldr	r2, [r7, #0]
 8000c98:	6a3b      	ldr	r3, [r7, #32]
 8000c9a:	441a      	add	r2, r3
 8000c9c:	6a3b      	ldr	r3, [r7, #32]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	6839      	ldr	r1, [r7, #0]
 8000ca2:	440b      	add	r3, r1
 8000ca4:	7812      	ldrb	r2, [r2, #0]
 8000ca6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000ca8:	6a3b      	ldr	r3, [r7, #32]
 8000caa:	3301      	adds	r3, #1
 8000cac:	623b      	str	r3, [r7, #32]
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	6a3a      	ldr	r2, [r7, #32]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d3ed      	bcc.n	8000c96 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	683a      	ldr	r2, [r7, #0]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	683a      	ldr	r2, [r7, #0]
 8000cd0:	441a      	add	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	4413      	add	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	683a      	ldr	r2, [r7, #0]
 8000ce2:	441a      	add	r2, r3
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	4611      	mov	r1, r2
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 feed 	bl	8001aca <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	3304      	adds	r3, #4
 8000cf4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	61fb      	str	r3, [r7, #28]
 8000cfa:	e00b      	b.n	8000d14 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8000cfc:	683a      	ldr	r2, [r7, #0]
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	441a      	add	r2, r3
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3b01      	subs	r3, #1
 8000d06:	6839      	ldr	r1, [r7, #0]
 8000d08:	440b      	add	r3, r1
 8000d0a:	7812      	ldrb	r2, [r2, #0]
 8000d0c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3301      	adds	r3, #1
 8000d12:	61fb      	str	r3, [r7, #28]
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	4413      	add	r3, r2
 8000d1a:	69fa      	ldr	r2, [r7, #28]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d3ed      	bcc.n	8000cfc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	4413      	add	r3, r2
 8000d26:	3b01      	subs	r3, #1
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	683a      	ldr	r2, [r7, #0]
 8000d36:	441a      	add	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	4413      	add	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	6839      	ldr	r1, [r7, #0]
 8000d4e:	440a      	add	r2, r1
 8000d50:	7812      	ldrb	r2, [r2, #0]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	6839      	ldr	r1, [r7, #0]
 8000d5e:	440b      	add	r3, r1
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	021b      	lsls	r3, r3, #8
 8000d64:	4313      	orrs	r3, r2
 8000d66:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000d68:	68ba      	ldr	r2, [r7, #8]
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	3302      	adds	r3, #2
 8000d6e:	6839      	ldr	r1, [r7, #0]
 8000d70:	440b      	add	r3, r1
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	041b      	lsls	r3, r3, #16
 8000d76:	4313      	orrs	r3, r2
 8000d78:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	3303      	adds	r3, #3
 8000d80:	6839      	ldr	r1, [r7, #0]
 8000d82:	440b      	add	r3, r1
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	061b      	lsls	r3, r3, #24
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000d8c:	68ba      	ldr	r2, [r7, #8]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	3304      	adds	r3, #4
 8000d96:	61bb      	str	r3, [r7, #24]
     return offset;
 8000d98:	69bb      	ldr	r3, [r7, #24]
    }
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3728      	adds	r7, #40	@ 0x28
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	4b03      	ldr	r3, [pc, #12]	@ (8000dbc <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000dae:	4618      	mov	r0, r3
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	080061d8 	.word	0x080061d8

08000dc0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	4b03      	ldr	r3, [pc, #12]	@ (8000dd8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	080061f4 	.word	0x080061f4

08000ddc <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fd34 	bl	8000854 <_ZN3ros3MsgC1Ev>
 8000dec:	4a06      	ldr	r2, [pc, #24]	@ (8000e08 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	601a      	str	r2, [r3, #0]
      level(0),
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2200      	movs	r2, #0
 8000df6:	711a      	strb	r2, [r3, #4]
      msg("")
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a04      	ldr	r2, [pc, #16]	@ (8000e0c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000dfc:	609a      	str	r2, [r3, #8]
    {
    }
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4618      	mov	r0, r3
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	08006368 	.word	0x08006368
 8000e0c:	080061d4 	.word	0x080061d4

08000e10 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	683a      	ldr	r2, [r7, #0]
 8000e22:	4413      	add	r3, r2
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	7912      	ldrb	r2, [r2, #4]
 8000e28:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff f9cf 	bl	80001d8 <strlen>
 8000e3a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	683a      	ldr	r2, [r7, #0]
 8000e40:	4413      	add	r3, r2
 8000e42:	68b9      	ldr	r1, [r7, #8]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 fe21 	bl	8001a8c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	683a      	ldr	r2, [r7, #0]
 8000e54:	18d0      	adds	r0, r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f005 f875 	bl	8005f4c <memcpy>
      offset += length_msg;
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	4413      	add	r3, r2
 8000e68:	60fb      	str	r3, [r7, #12]
      return offset;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
    }
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	683a      	ldr	r2, [r7, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	781a      	ldrb	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	3301      	adds	r3, #1
 8000e92:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	683a      	ldr	r2, [r7, #0]
 8000e98:	441a      	add	r2, r3
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 fe12 	bl	8001aca <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	e00b      	b.n	8000eca <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8000eb2:	683a      	ldr	r2, [r7, #0]
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	441a      	add	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	6839      	ldr	r1, [r7, #0]
 8000ebe:	440b      	add	r3, r1
 8000ec0:	7812      	ldrb	r2, [r2, #0]
 8000ec2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	4413      	add	r3, r2
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d3ed      	bcc.n	8000eb2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4413      	add	r3, r2
 8000edc:	3b01      	subs	r3, #1
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	683a      	ldr	r2, [r7, #0]
 8000eec:	441a      	add	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
     return offset;
 8000efa:	693b      	ldr	r3, [r7, #16]
    }
 8000efc:	4618      	mov	r0, r3
 8000efe:	3718      	adds	r7, #24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	4b03      	ldr	r3, [pc, #12]	@ (8000f1c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	08006218 	.word	0x08006218

08000f20 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	4b03      	ldr	r3, [pc, #12]	@ (8000f38 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	0800622c 	.word	0x0800622c

08000f3c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fc84 	bl	8000854 <_ZN3ros3MsgC1Ev>
 8000f4c:	4a11      	ldr	r2, [pc, #68]	@ (8000f94 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	615a      	str	r2, [r3, #20]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	61da      	str	r2, [r3, #28]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	621a      	str	r2, [r3, #32]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	08006350 	.word	0x08006350

08000f98 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	@ 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6859      	ldr	r1, [r3, #4]
 8000faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fac:	683a      	ldr	r2, [r7, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	b2ca      	uxtb	r2, r1
 8000fb2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	0a19      	lsrs	r1, r3, #8
 8000fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	683a      	ldr	r2, [r7, #0]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	b2ca      	uxtb	r2, r1
 8000fc4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	0c19      	lsrs	r1, r3, #16
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fce:	3302      	adds	r3, #2
 8000fd0:	683a      	ldr	r2, [r7, #0]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	b2ca      	uxtb	r2, r1
 8000fd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	0e19      	lsrs	r1, r3, #24
 8000fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe0:	3303      	adds	r3, #3
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	b2ca      	uxtb	r2, r1
 8000fe8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fec:	3304      	adds	r3, #4
 8000fee:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	623b      	str	r3, [r7, #32]
 8000ff4:	e02a      	b.n	800104c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	68da      	ldr	r2, [r3, #12]
 8000ffa:	6a3b      	ldr	r3, [r7, #32]
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001004:	6939      	ldr	r1, [r7, #16]
 8001006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	4413      	add	r3, r2
 800100c:	b2ca      	uxtb	r2, r1
 800100e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	0a19      	lsrs	r1, r3, #8
 8001014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001016:	3301      	adds	r3, #1
 8001018:	683a      	ldr	r2, [r7, #0]
 800101a:	4413      	add	r3, r2
 800101c:	b2ca      	uxtb	r2, r1
 800101e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	0c19      	lsrs	r1, r3, #16
 8001024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001026:	3302      	adds	r3, #2
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	4413      	add	r3, r2
 800102c:	b2ca      	uxtb	r2, r1
 800102e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	0e19      	lsrs	r1, r3, #24
 8001034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001036:	3303      	adds	r3, #3
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	4413      	add	r3, r2
 800103c:	b2ca      	uxtb	r2, r1
 800103e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001042:	3304      	adds	r3, #4
 8001044:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001046:	6a3b      	ldr	r3, [r7, #32]
 8001048:	3301      	adds	r3, #1
 800104a:	623b      	str	r3, [r7, #32]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	6a3a      	ldr	r2, [r7, #32]
 8001052:	429a      	cmp	r2, r3
 8001054:	d3cf      	bcc.n	8000ff6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6919      	ldr	r1, [r3, #16]
 800105a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	4413      	add	r3, r2
 8001060:	b2ca      	uxtb	r2, r1
 8001062:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	0a19      	lsrs	r1, r3, #8
 800106a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800106c:	3301      	adds	r3, #1
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	4413      	add	r3, r2
 8001072:	b2ca      	uxtb	r2, r1
 8001074:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	0c19      	lsrs	r1, r3, #16
 800107c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107e:	3302      	adds	r3, #2
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	4413      	add	r3, r2
 8001084:	b2ca      	uxtb	r2, r1
 8001086:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	0e19      	lsrs	r1, r3, #24
 800108e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001090:	3303      	adds	r3, #3
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	4413      	add	r3, r2
 8001096:	b2ca      	uxtb	r2, r1
 8001098:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800109a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109c:	3304      	adds	r3, #4
 800109e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
 80010a4:	e02a      	b.n	80010fc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	699a      	ldr	r2, [r3, #24]
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80010b4:	68f9      	ldr	r1, [r7, #12]
 80010b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	b2ca      	uxtb	r2, r1
 80010be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	0a19      	lsrs	r1, r3, #8
 80010c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c6:	3301      	adds	r3, #1
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	b2ca      	uxtb	r2, r1
 80010ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	0c19      	lsrs	r1, r3, #16
 80010d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d6:	3302      	adds	r3, #2
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	4413      	add	r3, r2
 80010dc:	b2ca      	uxtb	r2, r1
 80010de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	0e19      	lsrs	r1, r3, #24
 80010e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e6:	3303      	adds	r3, #3
 80010e8:	683a      	ldr	r2, [r7, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	b2ca      	uxtb	r2, r1
 80010ee:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80010f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f2:	3304      	adds	r3, #4
 80010f4:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3301      	adds	r3, #1
 80010fa:	61fb      	str	r3, [r7, #28]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	69fa      	ldr	r2, [r7, #28]
 8001102:	429a      	cmp	r2, r3
 8001104:	d3cf      	bcc.n	80010a6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69d9      	ldr	r1, [r3, #28]
 800110a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	4413      	add	r3, r2
 8001110:	b2ca      	uxtb	r2, r1
 8001112:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	69db      	ldr	r3, [r3, #28]
 8001118:	0a19      	lsrs	r1, r3, #8
 800111a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111c:	3301      	adds	r3, #1
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	4413      	add	r3, r2
 8001122:	b2ca      	uxtb	r2, r1
 8001124:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	0c19      	lsrs	r1, r3, #16
 800112c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112e:	3302      	adds	r3, #2
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	4413      	add	r3, r2
 8001134:	b2ca      	uxtb	r2, r1
 8001136:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	69db      	ldr	r3, [r3, #28]
 800113c:	0e19      	lsrs	r1, r3, #24
 800113e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001140:	3303      	adds	r3, #3
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	4413      	add	r3, r2
 8001146:	b2ca      	uxtb	r2, r1
 8001148:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800114a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800114c:	3304      	adds	r3, #4
 800114e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001150:	2300      	movs	r3, #0
 8001152:	61bb      	str	r3, [r7, #24]
 8001154:	e027      	b.n	80011a6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4413      	add	r3, r2
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f838 	bl	80001d8 <strlen>
 8001168:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800116a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	4413      	add	r3, r2
 8001170:	6979      	ldr	r1, [r7, #20]
 8001172:	4618      	mov	r0, r3
 8001174:	f000 fc8a 	bl	8001a8c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800117a:	3304      	adds	r3, #4
 800117c:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800117e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	18d0      	adds	r0, r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	697a      	ldr	r2, [r7, #20]
 8001192:	4619      	mov	r1, r3
 8001194:	f004 feda 	bl	8005f4c <memcpy>
      offset += length_stringsi;
 8001198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	4413      	add	r3, r2
 800119e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	3301      	adds	r3, #1
 80011a4:	61bb      	str	r3, [r7, #24]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d3d2      	bcc.n	8001156 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 80011b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80011b2:	4618      	mov	r0, r3
 80011b4:	3728      	adds	r7, #40	@ 0x28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b08e      	sub	sp, #56	@ 0x38
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80011c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	4413      	add	r3, r2
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80011d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011d4:	3301      	adds	r3, #1
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	4413      	add	r3, r2
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	021b      	lsls	r3, r3, #8
 80011de:	6a3a      	ldr	r2, [r7, #32]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80011e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011e6:	3302      	adds	r3, #2
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	041b      	lsls	r3, r3, #16
 80011f0:	6a3a      	ldr	r2, [r7, #32]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80011f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011f8:	3303      	adds	r3, #3
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	4413      	add	r3, r2
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	061b      	lsls	r3, r3, #24
 8001202:	6a3a      	ldr	r2, [r7, #32]
 8001204:	4313      	orrs	r3, r2
 8001206:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800120a:	3304      	adds	r3, #4
 800120c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	6a3a      	ldr	r2, [r7, #32]
 8001214:	429a      	cmp	r2, r3
 8001216:	d90a      	bls.n	800122e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68da      	ldr	r2, [r3, #12]
 800121c:	6a3b      	ldr	r3, [r7, #32]
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4619      	mov	r1, r3
 8001222:	4610      	mov	r0, r2
 8001224:	f004 fe28 	bl	8005e78 <realloc>
 8001228:	4602      	mov	r2, r0
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a3a      	ldr	r2, [r7, #32]
 8001232:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001234:	2300      	movs	r3, #0
 8001236:	633b      	str	r3, [r7, #48]	@ 0x30
 8001238:	e035      	b.n	80012a6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001242:	6839      	ldr	r1, [r7, #0]
 8001244:	440a      	add	r2, r1
 8001246:	7812      	ldrb	r2, [r2, #0]
 8001248:	4313      	orrs	r3, r2
 800124a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001250:	3301      	adds	r3, #1
 8001252:	6839      	ldr	r1, [r7, #0]
 8001254:	440b      	add	r3, r1
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	4313      	orrs	r3, r2
 800125c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001262:	3302      	adds	r3, #2
 8001264:	6839      	ldr	r1, [r7, #0]
 8001266:	440b      	add	r3, r1
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	041b      	lsls	r3, r3, #16
 800126c:	4313      	orrs	r3, r2
 800126e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001274:	3303      	adds	r3, #3
 8001276:	6839      	ldr	r1, [r7, #0]
 8001278:	440b      	add	r3, r1
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	061b      	lsls	r3, r3, #24
 800127e:	4313      	orrs	r3, r2
 8001280:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800128a:	3304      	adds	r3, #4
 800128c:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68da      	ldr	r2, [r3, #12]
 8001292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	3208      	adds	r2, #8
 800129c:	6812      	ldr	r2, [r2, #0]
 800129e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80012a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012a2:	3301      	adds	r3, #1
 80012a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d3c4      	bcc.n	800123a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80012b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	4413      	add	r3, r2
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80012ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012bc:	3301      	adds	r3, #1
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	4413      	add	r3, r2
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	69fa      	ldr	r2, [r7, #28]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80012cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012ce:	3302      	adds	r3, #2
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	041b      	lsls	r3, r3, #16
 80012d8:	69fa      	ldr	r2, [r7, #28]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80012de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012e0:	3303      	adds	r3, #3
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	4413      	add	r3, r2
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	061b      	lsls	r3, r3, #24
 80012ea:	69fa      	ldr	r2, [r7, #28]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80012f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012f2:	3304      	adds	r3, #4
 80012f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	69fa      	ldr	r2, [r7, #28]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d90a      	bls.n	8001316 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	699a      	ldr	r2, [r3, #24]
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4619      	mov	r1, r3
 800130a:	4610      	mov	r0, r2
 800130c:	f004 fdb4 	bl	8005e78 <realloc>
 8001310:	4602      	mov	r2, r0
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	69fa      	ldr	r2, [r7, #28]
 800131a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 800131c:	2300      	movs	r3, #0
 800131e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001320:	e035      	b.n	800138e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800132a:	6839      	ldr	r1, [r7, #0]
 800132c:	440a      	add	r2, r1
 800132e:	7812      	ldrb	r2, [r2, #0]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001338:	3301      	adds	r3, #1
 800133a:	6839      	ldr	r1, [r7, #0]
 800133c:	440b      	add	r3, r1
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	021b      	lsls	r3, r3, #8
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800134a:	3302      	adds	r3, #2
 800134c:	6839      	ldr	r1, [r7, #0]
 800134e:	440b      	add	r3, r1
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	041b      	lsls	r3, r3, #16
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800135c:	3303      	adds	r3, #3
 800135e:	6839      	ldr	r1, [r7, #0]
 8001360:	440b      	add	r3, r1
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	061b      	lsls	r3, r3, #24
 8001366:	4313      	orrs	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001372:	3304      	adds	r3, #4
 8001374:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	699a      	ldr	r2, [r3, #24]
 800137a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	3214      	adds	r2, #20
 8001384:	6812      	ldr	r2, [r2, #0]
 8001386:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800138a:	3301      	adds	r3, #1
 800138c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001394:	429a      	cmp	r2, r3
 8001396:	d3c4      	bcc.n	8001322 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	4413      	add	r3, r2
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80013a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013a4:	3301      	adds	r3, #1
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	4413      	add	r3, r2
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	021b      	lsls	r3, r3, #8
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80013b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013b6:	3302      	adds	r3, #2
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	041b      	lsls	r3, r3, #16
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80013c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013c8:	3303      	adds	r3, #3
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	4413      	add	r3, r2
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	061b      	lsls	r3, r3, #24
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80013d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013da:	3304      	adds	r3, #4
 80013dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d90a      	bls.n	80013fe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4619      	mov	r1, r3
 80013f2:	4610      	mov	r0, r2
 80013f4:	f004 fd40 	bl	8005e78 <realloc>
 80013f8:	4602      	mov	r2, r0
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001404:	2300      	movs	r3, #0
 8001406:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001408:	e03e      	b.n	8001488 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800140a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	441a      	add	r2, r3
 8001410:	f107 030c 	add.w	r3, r7, #12
 8001414:	4611      	mov	r1, r2
 8001416:	4618      	mov	r0, r3
 8001418:	f000 fb57 	bl	8001aca <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800141c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800141e:	3304      	adds	r3, #4
 8001420:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001424:	627b      	str	r3, [r7, #36]	@ 0x24
 8001426:	e00b      	b.n	8001440 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142c:	441a      	add	r2, r3
 800142e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001430:	3b01      	subs	r3, #1
 8001432:	6839      	ldr	r1, [r7, #0]
 8001434:	440b      	add	r3, r1
 8001436:	7812      	ldrb	r2, [r2, #0]
 8001438:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800143a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143c:	3301      	adds	r3, #1
 800143e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001440:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4413      	add	r3, r2
 8001446:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001448:	429a      	cmp	r2, r3
 800144a:	d3ed      	bcc.n	8001428 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800144c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4413      	add	r3, r2
 8001452:	3b01      	subs	r3, #1
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	4413      	add	r3, r2
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800145c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800145e:	3b01      	subs	r3, #1
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	441a      	add	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001468:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4413      	add	r3, r2
 800146e:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	3220      	adds	r2, #32
 800147e:	6812      	ldr	r2, [r2, #0]
 8001480:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001484:	3301      	adds	r3, #1
 8001486:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	69db      	ldr	r3, [r3, #28]
 800148c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800148e:	429a      	cmp	r2, r3
 8001490:	d3bb      	bcc.n	800140a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8001492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8001494:	4618      	mov	r0, r3
 8001496:	3738      	adds	r7, #56	@ 0x38
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	4b03      	ldr	r3, [pc, #12]	@ (80014b4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80014a6:	4618      	mov	r0, r3
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	080062ec 	.word	0x080062ec

080014b8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	4b03      	ldr	r3, [pc, #12]	@ (80014d0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	08006250 	.word	0x08006250

080014d4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	68ba      	ldr	r2, [r7, #8]
 80014e6:	601a      	str	r2, [r3, #0]
    msg_(msg),
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	611a      	str	r2, [r3, #16]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4618      	mov	r0, r3
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
 800150a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68d8      	ldr	r0, [r3, #12]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	6891      	ldr	r1, [r2, #8]
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	4798      	blx	r3
 8001520:	4603      	mov	r3, r0
  };
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	691b      	ldr	r3, [r3, #16]
  }
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a0a      	ldr	r2, [pc, #40]	@ (800159c <_ZN13STM32HardwareC1Ev+0x34>)
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
    }
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4618      	mov	r0, r3
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	20000a90 	.word	0x20000a90

080015a0 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 f804 	bl	80015b6 <_ZN13STM32Hardware10reset_rbufEv>
    }
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6818      	ldr	r0, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3304      	adds	r3, #4
 80015c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015ca:	4619      	mov	r1, r3
 80015cc:	f003 fb44 	bl	8004c58 <HAL_UART_Receive_DMA>
    }
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <_ZN13STM32Hardware4readEv>:

    int read(){
 80015d8:	b590      	push	{r4, r7, lr}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
      int c = -1;
 80015e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015e4:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f8d3 4204 	ldr.w	r4, [r3, #516]	@ 0x204
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff ffa8 	bl	8001542 <_ZN13STM32Hardware10getRdmaIndEv>
 80015f2:	4603      	mov	r3, r0
 80015f4:	429c      	cmp	r4, r3
 80015f6:	bf14      	ite	ne
 80015f8:	2301      	movne	r3, #1
 80015fa:	2300      	moveq	r3, #0
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d012      	beq.n	8001628 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001608:	1c59      	adds	r1, r3, #1
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	f8c2 1204 	str.w	r1, [r2, #516]	@ 0x204
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	4413      	add	r3, r2
 8001614:	791b      	ldrb	r3, [r3, #4]
 8001616:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800161e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      return c;
 8001628:	68fb      	ldr	r3, [r7, #12]
    }
 800162a:	4618      	mov	r0, r3
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	bd90      	pop	{r4, r7, pc}
	...

08001634 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b20      	cmp	r3, #32
 8001648:	d108      	bne.n	800165c <_ZN13STM32Hardware5flushEv+0x28>
 800164a:	4b28      	ldr	r3, [pc, #160]	@ (80016ec <_ZN13STM32Hardware5flushEv+0xb8>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	f083 0301 	eor.w	r3, r3, #1
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <_ZN13STM32Hardware5flushEv+0x28>
 8001658:	2301      	movs	r3, #1
 800165a:	e000      	b.n	800165e <_ZN13STM32Hardware5flushEv+0x2a>
 800165c:	2300      	movs	r3, #0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d03f      	beq.n	80016e2 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8001662:	4b22      	ldr	r3, [pc, #136]	@ (80016ec <_ZN13STM32Hardware5flushEv+0xb8>)
 8001664:	2201      	movs	r2, #1
 8001666:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001674:	429a      	cmp	r2, r3
 8001676:	d031      	beq.n	80016dc <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001684:	429a      	cmp	r2, r3
 8001686:	d20a      	bcs.n	800169e <_ZN13STM32Hardware5flushEv+0x6a>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800168e:	b29a      	uxth	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8001696:	b29b      	uxth	r3, r3
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	b29b      	uxth	r3, r3
 800169c:	e006      	b.n	80016ac <_ZN13STM32Hardware5flushEv+0x78>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6818      	ldr	r0, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80016b8:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	4413      	add	r3, r2
 80016c0:	89fa      	ldrh	r2, [r7, #14]
 80016c2:	4619      	mov	r1, r3
 80016c4:	f003 fa58 	bl	8004b78 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 80016ce:	89fb      	ldrh	r3, [r7, #14]
 80016d0:	4413      	add	r3, r2
 80016d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
        }
        mutex = false;
 80016dc:	4b03      	ldr	r3, [pc, #12]	@ (80016ec <_ZN13STM32Hardware5flushEv+0xb8>)
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
      }
    }
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200000cc 	.word	0x200000cc

080016f0 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
      int n = length;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001706:	bfa8      	it	ge
 8001708:	f44f 7300 	movge.w	r3, #512	@ 0x200
 800170c:	617b      	str	r3, [r7, #20]

      int n_tail = n <= (int)(tbuflen - twind) ? n : (int)(tbuflen - twind);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8001714:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001718:	461a      	mov	r2, r3
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	4293      	cmp	r3, r2
 800171e:	bfa8      	it	ge
 8001720:	4613      	movge	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800172a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	4413      	add	r3, r2
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	68b9      	ldr	r1, [r7, #8]
 8001736:	4618      	mov	r0, r3
 8001738:	f004 fc08 	bl	8005f4c <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	4413      	add	r3, r2
 8001746:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

      if(n != n_tail){
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	429a      	cmp	r2, r3
 8001756:	d00b      	beq.n	8001770 <_ZN13STM32Hardware5writeEPhi+0x80>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f503 7002 	add.w	r0, r3, #520	@ 0x208
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	68ba      	ldr	r2, [r7, #8]
 8001762:	18d1      	adds	r1, r2, r3
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	461a      	mov	r2, r3
 800176c:	f004 fbee 	bl	8005f4c <memcpy>
      }

      flush();
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f7ff ff5f 	bl	8001634 <_ZN13STM32Hardware5flushEv>
    }
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	f001 f96d 	bl	8002a64 <HAL_GetTick>
 800178a:	4603      	mov	r3, r0
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
      data(0)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff f858 	bl	8000854 <_ZN3ros3MsgC1Ev>
 80017a4:	4a05      	ldr	r2, [pc, #20]	@ (80017bc <_ZN8std_msgs7Float32C1Ev+0x28>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	605a      	str	r2, [r3, #4]
    {
    }
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	08006324 	.word	0x08006324

080017c0 <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	b2ca      	uxtb	r2, r1
 80017de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	0a19      	lsrs	r1, r3, #8
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	3301      	adds	r3, #1
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	b2ca      	uxtb	r2, r1
 80017ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	0c19      	lsrs	r1, r3, #16
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	3302      	adds	r3, #2
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	b2ca      	uxtb	r2, r1
 80017fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	0e19      	lsrs	r1, r3, #24
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	3303      	adds	r3, #3
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	4413      	add	r3, r2
 800180c:	b2ca      	uxtb	r2, r1
 800180e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	3304      	adds	r3, #4
 8001814:	60fb      	str	r3, [r7, #12]
      return offset;
 8001816:	68fb      	ldr	r3, [r7, #12]
    }
 8001818:	4618      	mov	r0, r3
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	6839      	ldr	r1, [r7, #0]
 800183c:	440a      	add	r2, r1
 800183e:	7812      	ldrb	r2, [r2, #0]
 8001840:	4313      	orrs	r3, r2
 8001842:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	3301      	adds	r3, #1
 800184a:	6839      	ldr	r1, [r7, #0]
 800184c:	440b      	add	r3, r1
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	021b      	lsls	r3, r3, #8
 8001852:	4313      	orrs	r3, r2
 8001854:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	3302      	adds	r3, #2
 800185c:	6839      	ldr	r1, [r7, #0]
 800185e:	440b      	add	r3, r1
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	041b      	lsls	r3, r3, #16
 8001864:	4313      	orrs	r3, r2
 8001866:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001868:	68ba      	ldr	r2, [r7, #8]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	3303      	adds	r3, #3
 800186e:	6839      	ldr	r1, [r7, #0]
 8001870:	440b      	add	r3, r1
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	061b      	lsls	r3, r3, #24
 8001876:	4313      	orrs	r3, r2
 8001878:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	3304      	adds	r3, #4
 8001884:	60fb      	str	r3, [r7, #12]
     return offset;
 8001886:	68fb      	ldr	r3, [r7, #12]
    }
 8001888:	4618      	mov	r0, r3
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <_ZN8std_msgs7Float327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32"; };
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	4b03      	ldr	r3, [pc, #12]	@ (80018ac <_ZN8std_msgs7Float327getTypeEv+0x18>)
 800189e:	4618      	mov	r0, r3
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	08006274 	.word	0x08006274

080018b0 <_ZN8std_msgs7Float326getMD5Ev>:
    virtual const char * getMD5() override { return "73fcbf46b49191e672908e50842a83d4"; };
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	4b03      	ldr	r3, [pc, #12]	@ (80018c8 <_ZN8std_msgs7Float326getMD5Ev+0x18>)
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	08006288 	.word	0x08006288

080018cc <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	4a04      	ldr	r2, [pc, #16]	@ (80018e8 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4618      	mov	r0, r3
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	0800633c 	.word	0x0800633c

080018ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ffe8 	bl	80018cc <_ZN3ros15NodeHandleBase_C1Ev>
 80018fc:	4a36      	ldr	r2, [pc, #216]	@ (80019d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3304      	adds	r3, #4
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fe2e 	bl	8001568 <_ZN13STM32HardwareC1Ev>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8001932:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001936:	2100      	movs	r1, #0
 8001938:	4618      	mov	r0, r3
 800193a:	f004 fad3 	bl	8005ee4 <memset>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8001944:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001948:	2100      	movs	r1, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f004 faca 	bl	8005ee4 <memset>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f603 0324 	addw	r3, r3, #2084	@ 0x824
 8001956:	2264      	movs	r2, #100	@ 0x64
 8001958:	2100      	movs	r1, #0
 800195a:	4618      	mov	r0, r3
 800195c:	f004 fac2 	bl	8005ee4 <memset>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 8001966:	2264      	movs	r2, #100	@ 0x64
 8001968:	2100      	movs	r1, #0
 800196a:	4618      	mov	r0, r3
 800196c:	f004 faba 	bl	8005ee4 <memset>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f603 1314 	addw	r3, r3, #2324	@ 0x914
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fab8 	bl	8000f3c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	08006310 	.word	0x08006310

080019dc <HAL_UART_TxCpltCallback>:
//ros::Subscriber<krsbi_2025::SetPoint> robot_setPoint_subs("SetPoint", &setPoint_callback);
//ros::Subscriber<krsbi_2025::ControlOutput> sub("/nuc/ControlOutput", &control_output_callback);


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a07      	ldr	r2, [pc, #28]	@ (8001a04 <HAL_UART_TxCpltCallback+0x28>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d106      	bne.n	80019fa <HAL_UART_TxCpltCallback+0x1e>
	{
		nh.getHardware()->flush();
 80019ec:	4806      	ldr	r0, [pc, #24]	@ (8001a08 <HAL_UART_TxCpltCallback+0x2c>)
 80019ee:	f000 f892 	bl	8001b16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80019f2:	4603      	mov	r3, r0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff fe1d 	bl	8001634 <_ZN13STM32Hardware5flushEv>
	}
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000a90 	.word	0x20000a90
 8001a08:	200000ec 	.word	0x200000ec

08001a0c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a07      	ldr	r2, [pc, #28]	@ (8001a34 <HAL_UART_RxCpltCallback+0x28>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d106      	bne.n	8001a2a <HAL_UART_RxCpltCallback+0x1e>
	{
		nh.getHardware()->reset_rbuf();
 8001a1c:	4806      	ldr	r0, [pc, #24]	@ (8001a38 <HAL_UART_RxCpltCallback+0x2c>)
 8001a1e:	f000 f87a 	bl	8001b16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fdc6 	bl	80015b6 <_ZN13STM32Hardware10reset_rbufEv>
	}
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000a90 	.word	0x20000a90
 8001a38:	200000ec 	.word	0x200000ec

08001a3c <setup>:

void setup(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
	nh.initNode();  // Inisialisasi node ROS
 8001a40:	4804      	ldr	r0, [pc, #16]	@ (8001a54 <setup+0x18>)
 8001a42:	f000 f874 	bl	8001b2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
//	nh.subscribe(sub);
////	nh.subscribe(coordinate_target_subs);
//	nh.subscribe(robot_status_subs);
//	nh.subscribe(realsense_subs);
//	nh.advertise(pub);  // Advertise topik
	nh.advertise(pub);
 8001a46:	4904      	ldr	r1, [pc, #16]	@ (8001a58 <setup+0x1c>)
 8001a48:	4802      	ldr	r0, [pc, #8]	@ (8001a54 <setup+0x18>)
 8001a4a:	f000 f88d 	bl	8001b68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	200000ec 	.word	0x200000ec
 8001a58:	20000a30 	.word	0x20000a30

08001a5c <loop>:

void loop(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
	bno_msg.data = bno.yaw;  // Mengisi pesan dengan nilai float
 8001a60:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <loop+0x20>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	4a06      	ldr	r2, [pc, #24]	@ (8001a80 <loop+0x24>)
 8001a66:	6053      	str	r3, [r2, #4]
//	wheel_output.left_wheel_cw = roda.aCW;
//	wheel_output.right_wheel_ccw = roda.bCCW;
//	wheel_output.right_wheel_cw = roda.bCW;
//	wheel_output.bottom_wheel_ccw = roda.cCCW;
//	wheel_output.bottom_wheel_cw = roda.cCW;
	pub.publish(&bno_msg);  // Mengirim pesan ke ROS
 8001a68:	4905      	ldr	r1, [pc, #20]	@ (8001a80 <loop+0x24>)
 8001a6a:	4806      	ldr	r0, [pc, #24]	@ (8001a84 <loop+0x28>)
 8001a6c:	f7ff fd49 	bl	8001502 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	nh.spinOnce();  // Memproses komunikasi ROS;
 8001a70:	4805      	ldr	r0, [pc, #20]	@ (8001a88 <loop+0x2c>)
 8001a72:	f000 f8a9 	bl	8001bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200000d0 	.word	0x200000d0
 8001a80:	20000a28 	.word	0x20000a28
 8001a84:	20000a30 	.word	0x20000a30
 8001a88:	200000ec 	.word	0x200000ec

08001a8c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	e00c      	b.n	8001ab6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	fa22 f103 	lsr.w	r1, r2, r3
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4413      	add	r3, r2
 8001aac:	b2ca      	uxtb	r2, r1
 8001aae:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2b03      	cmp	r3, #3
 8001aba:	d9ef      	bls.n	8001a9c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8001abc:	bf00      	nop
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001aca:	b480      	push	{r7}
 8001acc:	b085      	sub	sp, #20
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
 8001ad2:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	e010      	b.n	8001b02 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6839      	ldr	r1, [r7, #0]
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	440a      	add	r2, r1
 8001aea:	7812      	ldrb	r2, [r2, #0]
 8001aec:	4611      	mov	r1, r2
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	00d2      	lsls	r2, r2, #3
 8001af2:	fa01 f202 	lsl.w	r2, r1, r2
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	3301      	adds	r3, #1
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d9eb      	bls.n	8001ae0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8001b08:	bf00      	nop
 8001b0a:	bf00      	nop
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3304      	adds	r3, #4
  }
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fd30 	bl	80015a0 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
    bytes_ = 0;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
    index_ = 0;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
    topic_ = 0;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
  };
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	e01d      	b.n	8001bb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d111      	bne.n	8001bae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	60da      	str	r2, [r3, #12]
        return true;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e006      	b.n	8001bbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2b18      	cmp	r3, #24
 8001bb8:	ddde      	ble.n	8001b78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8001bba:	2300      	movs	r3, #0
  }
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fdd2 	bl	800177e <_ZN13STM32Hardware4timeEv>
 8001bda:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f8d3 3908 	ldr.w	r3, [r3, #2312]	@ 0x908
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d903      	bls.n	8001bf6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
    if (mode_ != MODE_FIRST_FF)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d009      	beq.n	8001c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d903      	bls.n	8001c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
      if (spin_timeout_ > 0)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d014      	beq.n	8001c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3304      	adds	r3, #4
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fdab 	bl	800177e <_ZN13STM32Hardware4timeEv>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	1ad2      	subs	r2, r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8001c34:	429a      	cmp	r2, r3
 8001c36:	bf8c      	ite	hi
 8001c38:	2301      	movhi	r3, #1
 8001c3a:	2300      	movls	r3, #0
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d002      	beq.n	8001c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8001c42:	f06f 0301 	mvn.w	r3, #1
 8001c46:	e194      	b.n	8001f72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fcc3 	bl	80015d8 <_ZN13STM32Hardware4readEv>
 8001c52:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f2c0 8174 	blt.w	8001f44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	@ 0x8fc
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	441a      	add	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001c72:	2b07      	cmp	r3, #7
 8001c74:	d11e      	bne.n	8001cb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 8001c7c:	1c59      	adds	r1, r3, #1
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	f8c2 18f8 	str.w	r1, [r2, #2296]	@ 0x8f8
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	b2d1      	uxtb	r1, r2
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	460a      	mov	r2, r1
 8001c8e:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
        bytes_--;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8001c98:	1e5a      	subs	r2, r3, #1
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1b4      	bne.n	8001c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2208      	movs	r2, #8
 8001cae:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8001cb2:	e7af      	b.n	8001c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d128      	bne.n	8001d10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	2bff      	cmp	r3, #255	@ 0xff
 8001cc2:	d10d      	bne.n	8001ce0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f103 0214 	add.w	r2, r3, #20
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 8001cde:	e799      	b.n	8001c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff fd4a 	bl	800177e <_ZN13STM32Hardware4timeEv>
 8001cea:	4602      	mov	r2, r0
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	bf8c      	ite	hi
 8001cf8:	2301      	movhi	r3, #1
 8001cfa:	2300      	movls	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d088      	beq.n	8001c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
          return SPIN_TIMEOUT;
 8001d0a:	f06f 0301 	mvn.w	r3, #1
 8001d0e:	e130      	b.n	8001f72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d118      	bne.n	8001d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2bfe      	cmp	r3, #254	@ 0xfe
 8001d1e:	d107      	bne.n	8001d30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8001d2e:	e771      	b.n	8001c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          if (configured_ == false)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f47f af68 	bne.w	8001c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f918 	bl	8001f7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8001d4a:	e763      	b.n	8001c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d113      	bne.n	8001d7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        index_ = 0;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
        mode_++;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 8001d7c:	e74a      	b.n	8001c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001d84:	2b03      	cmp	r3, #3
 8001d86:	d110      	bne.n	8001daa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	@ 0x8f0
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	021b      	lsls	r3, r3, #8
 8001d92:	441a      	add	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        mode_++;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8001da8:	e734      	b.n	8001c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d116      	bne.n	8001de2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 8001dba:	425a      	negs	r2, r3
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	bf58      	it	pl
 8001dc2:	4253      	negpl	r3, r2
 8001dc4:	2bff      	cmp	r3, #255	@ 0xff
 8001dc6:	d107      	bne.n	8001dd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001dce:	1c5a      	adds	r2, r3, #1
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8001dd6:	e71d      	b.n	8001c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8001de0:	e718      	b.n	8001c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001de8:	2b05      	cmp	r3, #5
 8001dea:	d10f      	bne.n	8001e0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_++;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001dfa:	1c5a      	adds	r2, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 8001e0a:	e703      	b.n	8001c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001e12:	2b06      	cmp	r3, #6
 8001e14:	d117      	bne.n	8001e46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	@ 0x8f4
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	021b      	lsls	r3, r3, #8
 8001e20:	441a      	add	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_ = MODE_MESSAGE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2207      	movs	r2, #7
 8001e2c:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if (bytes_ == 0)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f47f aeec 	bne.w	8001c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2208      	movs	r2, #8
 8001e40:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8001e44:	e6e6      	b.n	8001c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	f47f aee1 	bne.w	8001c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if ((checksum_ % 256) == 255)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 8001e60:	425a      	negs	r2, r3
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	bf58      	it	pl
 8001e68:	4253      	negpl	r3, r2
 8001e6a:	2bff      	cmp	r3, #255	@ 0xff
 8001e6c:	f47f aed2 	bne.w	8001c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d110      	bne.n	8001e9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f87d 	bl	8001f7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 f898 	bl	8001fb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
            last_sync_receive_time = c_time;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
            return SPIN_ERR;
 8001e96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e9a:	e06a      	b.n	8001f72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8001ea2:	2b0a      	cmp	r3, #10
 8001ea4:	d107      	bne.n	8001eb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8001eac:	4619      	mov	r1, r3
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f960 	bl	8002174 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8001eb4:	e6ae      	b.n	8001c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8001ebc:	2b06      	cmp	r3, #6
 8001ebe:	d10e      	bne.n	8001ede <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f603 1214 	addw	r2, r3, #2324	@ 0x914
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4610      	mov	r0, r2
 8001ed0:	f7ff f973 	bl	80011ba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 8001edc:	e69a      	b.n	8001c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8001ee4:	2b0b      	cmp	r3, #11
 8001ee6:	d104      	bne.n	8001ef2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 8001ef0:	e690      	b.n	8001c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8001ef8:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f43f ae84 	beq.w	8001c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8001f12:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001f1c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8001f26:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8001f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	f202 4224 	addw	r2, r2, #1060	@ 0x424
 8001f3e:	4611      	mov	r1, r2
 8001f40:	4798      	blx	r3
    while (true)
 8001f42:	e667      	b.n	8001c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8001f44:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00f      	beq.n	8001f70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d906      	bls.n	8001f70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f809 	bl	8001f7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
    return SPIN_OK;
 8001f70:	2300      	movs	r3, #0
  }
 8001f72:	4618      	mov	r0, r3
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8001f82:	f107 030c 	add.w	r3, r7, #12
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe fc74 	bl	8000874 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f107 020c 	add.w	r2, r7, #12
 8001f96:	210a      	movs	r1, #10
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	4798      	blx	r3
    rt_time = hardware_.time();
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff fbec 	bl	800177e <_ZN13STM32Hardware4timeEv>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
  }
 8001fae:	bf00      	nop
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8001fb6:	b590      	push	{r4, r7, lr}
 8001fb8:	b08b      	sub	sp, #44	@ 0x2c
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8001fbe:	f107 030c 	add.w	r3, r7, #12
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe fd46 	bl	8000a54 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001fc8:	2300      	movs	r3, #0
 8001fca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fcc:	e062      	b.n	8002094 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd2:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d056      	beq.n	800208e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe4:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff8:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	6859      	ldr	r1, [r3, #4]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	3308      	adds	r3, #8
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4608      	mov	r0, r1
 800202e:	4798      	blx	r3
 8002030:	4603      	mov	r3, r0
 8002032:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002038:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	6859      	ldr	r1, [r3, #4]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002048:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	330c      	adds	r3, #12
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4608      	mov	r0, r1
 800205c:	4798      	blx	r3
 800205e:	4603      	mov	r3, r0
 8002060:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8002062:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002066:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681c      	ldr	r4, [r3, #0]
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002072:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fa54 	bl	800152a <_ZN3ros9Publisher15getEndpointTypeEv>
 8002082:	4601      	mov	r1, r0
 8002084:	f107 030c 	add.w	r3, r7, #12
 8002088:	461a      	mov	r2, r3
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800208e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002090:	3301      	adds	r3, #1
 8002092:	627b      	str	r3, [r7, #36]	@ 0x24
 8002094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002096:	2b18      	cmp	r3, #24
 8002098:	dd99      	ble.n	8001fce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800209a:	2300      	movs	r3, #0
 800209c:	627b      	str	r3, [r7, #36]	@ 0x24
 800209e:	e05e      	b.n	800215e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020a4:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80020a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d053      	beq.n	8002158 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020b4:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80020b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	b29b      	uxth	r3, r3
 80020c0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020c6:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80020ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020d6:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80020da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020e2:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80020e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	3308      	adds	r3, #8
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4608      	mov	r0, r1
 80020f2:	4798      	blx	r3
 80020f4:	4603      	mov	r3, r0
 80020f6:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020fc:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8002100:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002108:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800210c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	330c      	adds	r3, #12
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4608      	mov	r0, r1
 8002118:	4798      	blx	r3
 800211a:	4603      	mov	r3, r0
 800211c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800211e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002122:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681c      	ldr	r4, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800212e:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8002132:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800213a:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800213e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	3304      	adds	r3, #4
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4608      	mov	r0, r1
 800214a:	4798      	blx	r3
 800214c:	4601      	mov	r1, r0
 800214e:	f107 030c 	add.w	r3, r7, #12
 8002152:	461a      	mov	r2, r3
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215a:	3301      	adds	r3, #1
 800215c:	627b      	str	r3, [r7, #36]	@ 0x24
 800215e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002160:	2b18      	cmp	r3, #24
 8002162:	dd9d      	ble.n	80020a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
  }
 800216c:	bf00      	nop
 800216e:	372c      	adds	r7, #44	@ 0x2c
 8002170:	46bd      	mov	sp, r7
 8002172:	bd90      	pop	{r4, r7, pc}

08002174 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800217e:	f107 0308 	add.w	r3, r7, #8
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe fb76 	bl	8000874 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3304      	adds	r3, #4
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff faf6 	bl	800177e <_ZN13STM32Hardware4timeEv>
 8002192:	4602      	mov	r2, r0
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800219e:	f107 0308 	add.w	r3, r7, #8
 80021a2:	6839      	ldr	r1, [r7, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe fbd5 	bl	8000954 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	4915      	ldr	r1, [pc, #84]	@ (8002204 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80021b0:	fba1 1303 	umull	r1, r3, r1, r3
 80021b4:	099b      	lsrs	r3, r3, #6
 80021b6:	4413      	add	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80021ba:	6939      	ldr	r1, [r7, #16]
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	4b11      	ldr	r3, [pc, #68]	@ (8002204 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80021c0:	fba3 0302 	umull	r0, r3, r3, r2
 80021c4:	099b      	lsrs	r3, r3, #6
 80021c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021ca:	fb00 f303 	mul.w	r3, r0, r3
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80021d2:	fb02 f303 	mul.w	r3, r2, r3
 80021d6:	440b      	add	r3, r1
 80021d8:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80021da:	f107 0308 	add.w	r3, r7, #8
 80021de:	3304      	adds	r3, #4
 80021e0:	4619      	mov	r1, r3
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f8a6 	bl	8002334 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3304      	adds	r3, #4
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff fac6 	bl	800177e <_ZN13STM32Hardware4timeEv>
 80021f2:	4602      	mov	r2, r0
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
  }
 80021fa:	bf00      	nop
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	10624dd3 	.word	0x10624dd3
 8002208:	000f4240 	.word	0x000f4240

0800220c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 800220c:	b580      	push	{r7, lr}
 800220e:	b088      	sub	sp, #32
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2b63      	cmp	r3, #99	@ 0x63
 800221c:	dd09      	ble.n	8002232 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8002224:	f083 0301 	eor.w	r3, r3, #1
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800222e:	2300      	movs	r3, #0
 8002230:	e079      	b.n	8002326 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	f202 6224 	addw	r2, r2, #1572	@ 0x624
 800223e:	3207      	adds	r2, #7
 8002240:	4611      	mov	r1, r2
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	4798      	blx	r3
 8002246:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	22ff      	movs	r2, #255	@ 0xff
 800224c:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624
    message_out[1] = PROTOCOL_VER;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	22fe      	movs	r2, #254	@ 0xfe
 8002254:	f883 2625 	strb.w	r2, [r3, #1573]	@ 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	b2da      	uxtb	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f883 2626 	strb.w	r2, [r3, #1574]	@ 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	b29b      	uxth	r3, r3
 8002266:	0a1b      	lsrs	r3, r3, #8
 8002268:	b29b      	uxth	r3, r3
 800226a:	b2da      	uxtb	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f883 2627 	strb.w	r2, [r3, #1575]	@ 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f893 2626 	ldrb.w	r2, [r3, #1574]	@ 0x626
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f893 3627 	ldrb.w	r3, [r3, #1575]	@ 0x627
 800227e:	4413      	add	r3, r2
 8002280:	b2db      	uxtb	r3, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	b2da      	uxtb	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f883 2628 	strb.w	r2, [r3, #1576]	@ 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	b2da      	uxtb	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f883 2629 	strb.w	r2, [r3, #1577]	@ 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	b21b      	sxth	r3, r3
 800229a:	121b      	asrs	r3, r3, #8
 800229c:	b21b      	sxth	r3, r3
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f883 262a 	strb.w	r2, [r3, #1578]	@ 0x62a

    /* calculate checksum */
    int chk = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80022aa:	2305      	movs	r3, #5
 80022ac:	61bb      	str	r3, [r7, #24]
 80022ae:	e00c      	b.n	80022ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	4413      	add	r3, r2
 80022b6:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	461a      	mov	r2, r3
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	4413      	add	r3, r2
 80022c2:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	3301      	adds	r3, #1
 80022c8:	61bb      	str	r3, [r7, #24]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	3306      	adds	r3, #6
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	dded      	ble.n	80022b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	3307      	adds	r3, #7
 80022d8:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	425a      	negs	r2, r3
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	bf58      	it	pl
 80022e4:	4253      	negpl	r3, r2
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	1c59      	adds	r1, r3, #1
 80022ec:	6179      	str	r1, [r7, #20]
 80022ee:	43d2      	mvns	r2, r2
 80022f0:	b2d1      	uxtb	r1, r2
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	4413      	add	r3, r2
 80022f6:	460a      	mov	r2, r1
 80022f8:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624

    if (l <= OUTPUT_SIZE)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002302:	dc0a      	bgt.n	800231a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	1d18      	adds	r0, r3, #4
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	4619      	mov	r1, r3
 8002312:	f7ff f9ed 	bl	80016f0 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	e005      	b.n	8002326 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800231a:	4905      	ldr	r1, [pc, #20]	@ (8002330 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 f849 	bl	80023b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8002322:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
  }
 8002326:	4618      	mov	r0, r3
 8002328:	3720      	adds	r7, #32
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	080062ac 	.word	0x080062ac

08002334 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3304      	adds	r3, #4
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fa1b 	bl	800177e <_ZN13STM32Hardware4timeEv>
 8002348:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4915      	ldr	r1, [pc, #84]	@ (80023a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8002352:	fba1 1303 	umull	r1, r3, r1, r3
 8002356:	099b      	lsrs	r3, r3, #6
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	1e5a      	subs	r2, r3, #1
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	6859      	ldr	r1, [r3, #4]
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	4b0f      	ldr	r3, [pc, #60]	@ (80023a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 800236a:	fba3 0302 	umull	r0, r3, r3, r2
 800236e:	099b      	lsrs	r3, r3, #6
 8002370:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002374:	fb00 f303 	mul.w	r3, r0, r3
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	4a0c      	ldr	r2, [pc, #48]	@ (80023ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 800237c:	fb02 f303 	mul.w	r3, r2, r3
 8002380:	1aca      	subs	r2, r1, r3
 8002382:	4b0b      	ldr	r3, [pc, #44]	@ (80023b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8002384:	4413      	add	r3, r2
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	f8c2 341c 	str.w	r3, [r2, #1052]	@ 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f503 6283 	add.w	r2, r3, #1048	@ 0x418
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002398:	4619      	mov	r1, r3
 800239a:	4610      	mov	r0, r2
 800239c:	f7fe f89c 	bl	80004d8 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80023a0:	bf00      	nop
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	10624dd3 	.word	0x10624dd3
 80023ac:	000f4240 	.word	0x000f4240
 80023b0:	3b9aca00 	.word	0x3b9aca00

080023b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	2103      	movs	r1, #3
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f804 	bl	80023d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80023c8:	bf00      	nop
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	460b      	mov	r3, r1
 80023da:	607a      	str	r2, [r7, #4]
 80023dc:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80023de:	f107 0314 	add.w	r3, r7, #20
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe fcfa 	bl	8000ddc <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80023e8:	7afb      	ldrb	r3, [r7, #11]
 80023ea:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f107 0214 	add.w	r2, r7, #20
 80023fa:	2107      	movs	r1, #7
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	4798      	blx	r3
  }
 8002400:	bf00      	nop
 8002402:	3720      	adds	r7, #32
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <_Z41__static_initialization_and_destruction_0ii>:
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d110      	bne.n	800243a <_Z41__static_initialization_and_destruction_0ii+0x32>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800241e:	4293      	cmp	r3, r2
 8002420:	d10b      	bne.n	800243a <_Z41__static_initialization_and_destruction_0ii+0x32>
ros::NodeHandle nh;
 8002422:	4808      	ldr	r0, [pc, #32]	@ (8002444 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8002424:	f7ff fa62 	bl	80018ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Float32 bno_msg;  // Tipe pesan ROS untuk data float
 8002428:	4807      	ldr	r0, [pc, #28]	@ (8002448 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800242a:	f7ff f9b3 	bl	8001794 <_ZN8std_msgs7Float32C1Ev>
ros::Publisher pub("BNO", &bno_msg);
 800242e:	2300      	movs	r3, #0
 8002430:	4a05      	ldr	r2, [pc, #20]	@ (8002448 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002432:	4906      	ldr	r1, [pc, #24]	@ (800244c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8002434:	4806      	ldr	r0, [pc, #24]	@ (8002450 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8002436:	f7ff f84d 	bl	80014d4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	200000ec 	.word	0x200000ec
 8002448:	20000a28 	.word	0x20000a28
 800244c:	080062e8 	.word	0x080062e8
 8002450:	20000a30 	.word	0x20000a30

08002454 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
    return configured_;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
  };
 8002462:	4618      	mov	r0, r3
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <_GLOBAL__sub_I_bno>:
 800246e:	b580      	push	{r7, lr}
 8002470:	af00      	add	r7, sp, #0
 8002472:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002476:	2001      	movs	r0, #1
 8002478:	f7ff ffc6 	bl	8002408 <_Z41__static_initialization_and_destruction_0ii>
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	607b      	str	r3, [r7, #4]
 800248a:	4b13      	ldr	r3, [pc, #76]	@ (80024d8 <HAL_MspInit+0x58>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800248e:	4a12      	ldr	r2, [pc, #72]	@ (80024d8 <HAL_MspInit+0x58>)
 8002490:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002494:	6453      	str	r3, [r2, #68]	@ 0x44
 8002496:	4b10      	ldr	r3, [pc, #64]	@ (80024d8 <HAL_MspInit+0x58>)
 8002498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800249e:	607b      	str	r3, [r7, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	603b      	str	r3, [r7, #0]
 80024a6:	4b0c      	ldr	r3, [pc, #48]	@ (80024d8 <HAL_MspInit+0x58>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024aa:	4a0b      	ldr	r2, [pc, #44]	@ (80024d8 <HAL_MspInit+0x58>)
 80024ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024b2:	4b09      	ldr	r3, [pc, #36]	@ (80024d8 <HAL_MspInit+0x58>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ba:	603b      	str	r3, [r7, #0]
 80024bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80024be:	2200      	movs	r2, #0
 80024c0:	2100      	movs	r1, #0
 80024c2:	2005      	movs	r0, #5
 80024c4:	f000 fbb5 	bl	8002c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80024c8:	2005      	movs	r0, #5
 80024ca:	f000 fbce 	bl	8002c6a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40023800 	.word	0x40023800

080024dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024e0:	bf00      	nop
 80024e2:	e7fd      	b.n	80024e0 <NMI_Handler+0x4>

080024e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024e8:	bf00      	nop
 80024ea:	e7fd      	b.n	80024e8 <HardFault_Handler+0x4>

080024ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024f0:	bf00      	nop
 80024f2:	e7fd      	b.n	80024f0 <MemManage_Handler+0x4>

080024f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024f8:	bf00      	nop
 80024fa:	e7fd      	b.n	80024f8 <BusFault_Handler+0x4>

080024fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002500:	bf00      	nop
 8002502:	e7fd      	b.n	8002500 <UsageFault_Handler+0x4>

08002504 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002512:	b480      	push	{r7}
 8002514:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002532:	f000 fa83 	bl	8002a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}

0800253a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800254c:	4802      	ldr	r0, [pc, #8]	@ (8002558 <DMA1_Stream5_IRQHandler+0x10>)
 800254e:	f000 fd3f 	bl	8002fd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000ad8 	.word	0x20000ad8

0800255c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002560:	4802      	ldr	r0, [pc, #8]	@ (800256c <DMA1_Stream6_IRQHandler+0x10>)
 8002562:	f000 fd35 	bl	8002fd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20000b38 	.word	0x20000b38

08002570 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002574:	4802      	ldr	r0, [pc, #8]	@ (8002580 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002576:	f001 ff1e 	bl	80043b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000a48 	.word	0x20000a48

08002584 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002588:	4802      	ldr	r0, [pc, #8]	@ (8002594 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800258a:	f001 ff14 	bl	80043b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000a48 	.word	0x20000a48

08002598 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800259c:	4802      	ldr	r0, [pc, #8]	@ (80025a8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800259e:	f001 ff0a 	bl	80043b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000a48 	.word	0x20000a48

080025ac <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025b0:	4802      	ldr	r0, [pc, #8]	@ (80025bc <TIM1_CC_IRQHandler+0x10>)
 80025b2:	f001 ff00 	bl	80043b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	20000a48 	.word	0x20000a48

080025c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80025c4:	4802      	ldr	r0, [pc, #8]	@ (80025d0 <USART2_IRQHandler+0x10>)
 80025c6:	f002 fb6d 	bl	8004ca4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20000a90 	.word	0x20000a90

080025d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025dc:	4a14      	ldr	r2, [pc, #80]	@ (8002630 <_sbrk+0x5c>)
 80025de:	4b15      	ldr	r3, [pc, #84]	@ (8002634 <_sbrk+0x60>)
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025e8:	4b13      	ldr	r3, [pc, #76]	@ (8002638 <_sbrk+0x64>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d102      	bne.n	80025f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025f0:	4b11      	ldr	r3, [pc, #68]	@ (8002638 <_sbrk+0x64>)
 80025f2:	4a12      	ldr	r2, [pc, #72]	@ (800263c <_sbrk+0x68>)
 80025f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025f6:	4b10      	ldr	r3, [pc, #64]	@ (8002638 <_sbrk+0x64>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4413      	add	r3, r2
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	429a      	cmp	r2, r3
 8002602:	d207      	bcs.n	8002614 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002604:	f003 fc76 	bl	8005ef4 <__errno>
 8002608:	4603      	mov	r3, r0
 800260a:	220c      	movs	r2, #12
 800260c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800260e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002612:	e009      	b.n	8002628 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002614:	4b08      	ldr	r3, [pc, #32]	@ (8002638 <_sbrk+0x64>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800261a:	4b07      	ldr	r3, [pc, #28]	@ (8002638 <_sbrk+0x64>)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4413      	add	r3, r2
 8002622:	4a05      	ldr	r2, [pc, #20]	@ (8002638 <_sbrk+0x64>)
 8002624:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002626:	68fb      	ldr	r3, [r7, #12]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20020000 	.word	0x20020000
 8002634:	00000400 	.word	0x00000400
 8002638:	20000a44 	.word	0x20000a44
 800263c:	20000ce8 	.word	0x20000ce8

08002640 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002644:	4b06      	ldr	r3, [pc, #24]	@ (8002660 <SystemInit+0x20>)
 8002646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800264a:	4a05      	ldr	r2, [pc, #20]	@ (8002660 <SystemInit+0x20>)
 800264c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002650:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800266a:	f107 0308 	add.w	r3, r7, #8
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	609a      	str	r2, [r3, #8]
 8002676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002678:	463b      	mov	r3, r7
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002680:	4b1e      	ldr	r3, [pc, #120]	@ (80026fc <MX_TIM1_Init+0x98>)
 8002682:	4a1f      	ldr	r2, [pc, #124]	@ (8002700 <MX_TIM1_Init+0x9c>)
 8002684:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8002686:	4b1d      	ldr	r3, [pc, #116]	@ (80026fc <MX_TIM1_Init+0x98>)
 8002688:	2263      	movs	r2, #99	@ 0x63
 800268a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800268c:	4b1b      	ldr	r3, [pc, #108]	@ (80026fc <MX_TIM1_Init+0x98>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002692:	4b1a      	ldr	r3, [pc, #104]	@ (80026fc <MX_TIM1_Init+0x98>)
 8002694:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002698:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800269a:	4b18      	ldr	r3, [pc, #96]	@ (80026fc <MX_TIM1_Init+0x98>)
 800269c:	2200      	movs	r2, #0
 800269e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026a0:	4b16      	ldr	r3, [pc, #88]	@ (80026fc <MX_TIM1_Init+0x98>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026a6:	4b15      	ldr	r3, [pc, #84]	@ (80026fc <MX_TIM1_Init+0x98>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80026ac:	4813      	ldr	r0, [pc, #76]	@ (80026fc <MX_TIM1_Init+0x98>)
 80026ae:	f001 fe33 	bl	8004318 <HAL_TIM_Base_Init>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80026b8:	f7fe f8b4 	bl	8000824 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80026c2:	f107 0308 	add.w	r3, r7, #8
 80026c6:	4619      	mov	r1, r3
 80026c8:	480c      	ldr	r0, [pc, #48]	@ (80026fc <MX_TIM1_Init+0x98>)
 80026ca:	f001 ff64 	bl	8004596 <HAL_TIM_ConfigClockSource>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80026d4:	f7fe f8a6 	bl	8000824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026d8:	2300      	movs	r3, #0
 80026da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026dc:	2300      	movs	r3, #0
 80026de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026e0:	463b      	mov	r3, r7
 80026e2:	4619      	mov	r1, r3
 80026e4:	4805      	ldr	r0, [pc, #20]	@ (80026fc <MX_TIM1_Init+0x98>)
 80026e6:	f002 f975 	bl	80049d4 <HAL_TIMEx_MasterConfigSynchronization>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80026f0:	f7fe f898 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80026f4:	bf00      	nop
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20000a48 	.word	0x20000a48
 8002700:	40010000 	.word	0x40010000

08002704 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a1a      	ldr	r2, [pc, #104]	@ (800277c <HAL_TIM_Base_MspInit+0x78>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d12d      	bne.n	8002772 <HAL_TIM_Base_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	4b19      	ldr	r3, [pc, #100]	@ (8002780 <HAL_TIM_Base_MspInit+0x7c>)
 800271c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800271e:	4a18      	ldr	r2, [pc, #96]	@ (8002780 <HAL_TIM_Base_MspInit+0x7c>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	6453      	str	r3, [r2, #68]	@ 0x44
 8002726:	4b16      	ldr	r3, [pc, #88]	@ (8002780 <HAL_TIM_Base_MspInit+0x7c>)
 8002728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002732:	2200      	movs	r2, #0
 8002734:	2100      	movs	r1, #0
 8002736:	2018      	movs	r0, #24
 8002738:	f000 fa7b 	bl	8002c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800273c:	2018      	movs	r0, #24
 800273e:	f000 fa94 	bl	8002c6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002742:	2200      	movs	r2, #0
 8002744:	2100      	movs	r1, #0
 8002746:	2019      	movs	r0, #25
 8002748:	f000 fa73 	bl	8002c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800274c:	2019      	movs	r0, #25
 800274e:	f000 fa8c 	bl	8002c6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002752:	2200      	movs	r2, #0
 8002754:	2100      	movs	r1, #0
 8002756:	201a      	movs	r0, #26
 8002758:	f000 fa6b 	bl	8002c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800275c:	201a      	movs	r0, #26
 800275e:	f000 fa84 	bl	8002c6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002762:	2200      	movs	r2, #0
 8002764:	2100      	movs	r1, #0
 8002766:	201b      	movs	r0, #27
 8002768:	f000 fa63 	bl	8002c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800276c:	201b      	movs	r0, #27
 800276e:	f000 fa7c 	bl	8002c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002772:	bf00      	nop
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40010000 	.word	0x40010000
 8002780:	40023800 	.word	0x40023800

08002784 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002788:	4b11      	ldr	r3, [pc, #68]	@ (80027d0 <MX_USART2_UART_Init+0x4c>)
 800278a:	4a12      	ldr	r2, [pc, #72]	@ (80027d4 <MX_USART2_UART_Init+0x50>)
 800278c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 800278e:	4b10      	ldr	r3, [pc, #64]	@ (80027d0 <MX_USART2_UART_Init+0x4c>)
 8002790:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8002794:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002796:	4b0e      	ldr	r3, [pc, #56]	@ (80027d0 <MX_USART2_UART_Init+0x4c>)
 8002798:	2200      	movs	r2, #0
 800279a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800279c:	4b0c      	ldr	r3, [pc, #48]	@ (80027d0 <MX_USART2_UART_Init+0x4c>)
 800279e:	2200      	movs	r2, #0
 80027a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027a2:	4b0b      	ldr	r3, [pc, #44]	@ (80027d0 <MX_USART2_UART_Init+0x4c>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027a8:	4b09      	ldr	r3, [pc, #36]	@ (80027d0 <MX_USART2_UART_Init+0x4c>)
 80027aa:	220c      	movs	r2, #12
 80027ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ae:	4b08      	ldr	r3, [pc, #32]	@ (80027d0 <MX_USART2_UART_Init+0x4c>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027b4:	4b06      	ldr	r3, [pc, #24]	@ (80027d0 <MX_USART2_UART_Init+0x4c>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027ba:	4805      	ldr	r0, [pc, #20]	@ (80027d0 <MX_USART2_UART_Init+0x4c>)
 80027bc:	f002 f98c 	bl	8004ad8 <HAL_UART_Init>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027c6:	f7fe f82d 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000a90 	.word	0x20000a90
 80027d4:	40004400 	.word	0x40004400

080027d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08a      	sub	sp, #40	@ 0x28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e0:	f107 0314 	add.w	r3, r7, #20
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	609a      	str	r2, [r3, #8]
 80027ec:	60da      	str	r2, [r3, #12]
 80027ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a4c      	ldr	r2, [pc, #304]	@ (8002928 <HAL_UART_MspInit+0x150>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	f040 8091 	bne.w	800291e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027fc:	2300      	movs	r3, #0
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	4b4a      	ldr	r3, [pc, #296]	@ (800292c <HAL_UART_MspInit+0x154>)
 8002802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002804:	4a49      	ldr	r2, [pc, #292]	@ (800292c <HAL_UART_MspInit+0x154>)
 8002806:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800280a:	6413      	str	r3, [r2, #64]	@ 0x40
 800280c:	4b47      	ldr	r3, [pc, #284]	@ (800292c <HAL_UART_MspInit+0x154>)
 800280e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002818:	2300      	movs	r3, #0
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	4b43      	ldr	r3, [pc, #268]	@ (800292c <HAL_UART_MspInit+0x154>)
 800281e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002820:	4a42      	ldr	r2, [pc, #264]	@ (800292c <HAL_UART_MspInit+0x154>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	6313      	str	r3, [r2, #48]	@ 0x30
 8002828:	4b40      	ldr	r3, [pc, #256]	@ (800292c <HAL_UART_MspInit+0x154>)
 800282a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002834:	230c      	movs	r3, #12
 8002836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002838:	2302      	movs	r3, #2
 800283a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	2300      	movs	r3, #0
 800283e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002840:	2303      	movs	r3, #3
 8002842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002844:	2307      	movs	r3, #7
 8002846:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	4619      	mov	r1, r3
 800284e:	4838      	ldr	r0, [pc, #224]	@ (8002930 <HAL_UART_MspInit+0x158>)
 8002850:	f000 fe28 	bl	80034a4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002854:	4b37      	ldr	r3, [pc, #220]	@ (8002934 <HAL_UART_MspInit+0x15c>)
 8002856:	4a38      	ldr	r2, [pc, #224]	@ (8002938 <HAL_UART_MspInit+0x160>)
 8002858:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800285a:	4b36      	ldr	r3, [pc, #216]	@ (8002934 <HAL_UART_MspInit+0x15c>)
 800285c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002860:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002862:	4b34      	ldr	r3, [pc, #208]	@ (8002934 <HAL_UART_MspInit+0x15c>)
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002868:	4b32      	ldr	r3, [pc, #200]	@ (8002934 <HAL_UART_MspInit+0x15c>)
 800286a:	2200      	movs	r2, #0
 800286c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800286e:	4b31      	ldr	r3, [pc, #196]	@ (8002934 <HAL_UART_MspInit+0x15c>)
 8002870:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002874:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002876:	4b2f      	ldr	r3, [pc, #188]	@ (8002934 <HAL_UART_MspInit+0x15c>)
 8002878:	2200      	movs	r2, #0
 800287a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800287c:	4b2d      	ldr	r3, [pc, #180]	@ (8002934 <HAL_UART_MspInit+0x15c>)
 800287e:	2200      	movs	r2, #0
 8002880:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002882:	4b2c      	ldr	r3, [pc, #176]	@ (8002934 <HAL_UART_MspInit+0x15c>)
 8002884:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002888:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800288a:	4b2a      	ldr	r3, [pc, #168]	@ (8002934 <HAL_UART_MspInit+0x15c>)
 800288c:	2200      	movs	r2, #0
 800288e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002890:	4b28      	ldr	r3, [pc, #160]	@ (8002934 <HAL_UART_MspInit+0x15c>)
 8002892:	2200      	movs	r2, #0
 8002894:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002896:	4827      	ldr	r0, [pc, #156]	@ (8002934 <HAL_UART_MspInit+0x15c>)
 8002898:	f000 fa02 	bl	8002ca0 <HAL_DMA_Init>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80028a2:	f7fd ffbf 	bl	8000824 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a22      	ldr	r2, [pc, #136]	@ (8002934 <HAL_UART_MspInit+0x15c>)
 80028aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80028ac:	4a21      	ldr	r2, [pc, #132]	@ (8002934 <HAL_UART_MspInit+0x15c>)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80028b2:	4b22      	ldr	r3, [pc, #136]	@ (800293c <HAL_UART_MspInit+0x164>)
 80028b4:	4a22      	ldr	r2, [pc, #136]	@ (8002940 <HAL_UART_MspInit+0x168>)
 80028b6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80028b8:	4b20      	ldr	r3, [pc, #128]	@ (800293c <HAL_UART_MspInit+0x164>)
 80028ba:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80028be:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028c0:	4b1e      	ldr	r3, [pc, #120]	@ (800293c <HAL_UART_MspInit+0x164>)
 80028c2:	2240      	movs	r2, #64	@ 0x40
 80028c4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028c6:	4b1d      	ldr	r3, [pc, #116]	@ (800293c <HAL_UART_MspInit+0x164>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028cc:	4b1b      	ldr	r3, [pc, #108]	@ (800293c <HAL_UART_MspInit+0x164>)
 80028ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028d2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028d4:	4b19      	ldr	r3, [pc, #100]	@ (800293c <HAL_UART_MspInit+0x164>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028da:	4b18      	ldr	r3, [pc, #96]	@ (800293c <HAL_UART_MspInit+0x164>)
 80028dc:	2200      	movs	r2, #0
 80028de:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80028e0:	4b16      	ldr	r3, [pc, #88]	@ (800293c <HAL_UART_MspInit+0x164>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028e6:	4b15      	ldr	r3, [pc, #84]	@ (800293c <HAL_UART_MspInit+0x164>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028ec:	4b13      	ldr	r3, [pc, #76]	@ (800293c <HAL_UART_MspInit+0x164>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80028f2:	4812      	ldr	r0, [pc, #72]	@ (800293c <HAL_UART_MspInit+0x164>)
 80028f4:	f000 f9d4 	bl	8002ca0 <HAL_DMA_Init>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80028fe:	f7fd ff91 	bl	8000824 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a0d      	ldr	r2, [pc, #52]	@ (800293c <HAL_UART_MspInit+0x164>)
 8002906:	639a      	str	r2, [r3, #56]	@ 0x38
 8002908:	4a0c      	ldr	r2, [pc, #48]	@ (800293c <HAL_UART_MspInit+0x164>)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800290e:	2200      	movs	r2, #0
 8002910:	2100      	movs	r1, #0
 8002912:	2026      	movs	r0, #38	@ 0x26
 8002914:	f000 f98d 	bl	8002c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002918:	2026      	movs	r0, #38	@ 0x26
 800291a:	f000 f9a6 	bl	8002c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800291e:	bf00      	nop
 8002920:	3728      	adds	r7, #40	@ 0x28
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40004400 	.word	0x40004400
 800292c:	40023800 	.word	0x40023800
 8002930:	40020000 	.word	0x40020000
 8002934:	20000ad8 	.word	0x20000ad8
 8002938:	40026088 	.word	0x40026088
 800293c:	20000b38 	.word	0x20000b38
 8002940:	400260a0 	.word	0x400260a0

08002944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002944:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800297c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002948:	f7ff fe7a 	bl	8002640 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800294c:	480c      	ldr	r0, [pc, #48]	@ (8002980 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800294e:	490d      	ldr	r1, [pc, #52]	@ (8002984 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002950:	4a0d      	ldr	r2, [pc, #52]	@ (8002988 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002954:	e002      	b.n	800295c <LoopCopyDataInit>

08002956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800295a:	3304      	adds	r3, #4

0800295c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800295c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800295e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002960:	d3f9      	bcc.n	8002956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002962:	4a0a      	ldr	r2, [pc, #40]	@ (800298c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002964:	4c0a      	ldr	r4, [pc, #40]	@ (8002990 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002968:	e001      	b.n	800296e <LoopFillZerobss>

0800296a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800296a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800296c:	3204      	adds	r2, #4

0800296e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800296e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002970:	d3fb      	bcc.n	800296a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002972:	f003 fac5 	bl	8005f00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002976:	f7fd fec9 	bl	800070c <main>
  bx  lr    
 800297a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800297c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002984:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002988:	080063f4 	.word	0x080063f4
  ldr r2, =_sbss
 800298c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002990:	20000ce4 	.word	0x20000ce4

08002994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002994:	e7fe      	b.n	8002994 <ADC_IRQHandler>
	...

08002998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800299c:	4b0e      	ldr	r3, [pc, #56]	@ (80029d8 <HAL_Init+0x40>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a0d      	ldr	r2, [pc, #52]	@ (80029d8 <HAL_Init+0x40>)
 80029a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029a8:	4b0b      	ldr	r3, [pc, #44]	@ (80029d8 <HAL_Init+0x40>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a0a      	ldr	r2, [pc, #40]	@ (80029d8 <HAL_Init+0x40>)
 80029ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029b4:	4b08      	ldr	r3, [pc, #32]	@ (80029d8 <HAL_Init+0x40>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a07      	ldr	r2, [pc, #28]	@ (80029d8 <HAL_Init+0x40>)
 80029ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029c0:	2003      	movs	r0, #3
 80029c2:	f000 f92b 	bl	8002c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029c6:	200f      	movs	r0, #15
 80029c8:	f000 f808 	bl	80029dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029cc:	f7ff fd58 	bl	8002480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40023c00 	.word	0x40023c00

080029dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029e4:	4b12      	ldr	r3, [pc, #72]	@ (8002a30 <HAL_InitTick+0x54>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4b12      	ldr	r3, [pc, #72]	@ (8002a34 <HAL_InitTick+0x58>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	4619      	mov	r1, r3
 80029ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 f943 	bl	8002c86 <HAL_SYSTICK_Config>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e00e      	b.n	8002a28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b0f      	cmp	r3, #15
 8002a0e:	d80a      	bhi.n	8002a26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a10:	2200      	movs	r2, #0
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a18:	f000 f90b 	bl	8002c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a1c:	4a06      	ldr	r2, [pc, #24]	@ (8002a38 <HAL_InitTick+0x5c>)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e000      	b.n	8002a28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	20000000 	.word	0x20000000
 8002a34:	20000008 	.word	0x20000008
 8002a38:	20000004 	.word	0x20000004

08002a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a40:	4b06      	ldr	r3, [pc, #24]	@ (8002a5c <HAL_IncTick+0x20>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <HAL_IncTick+0x24>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	4a04      	ldr	r2, [pc, #16]	@ (8002a60 <HAL_IncTick+0x24>)
 8002a4e:	6013      	str	r3, [r2, #0]
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	20000008 	.word	0x20000008
 8002a60:	20000b98 	.word	0x20000b98

08002a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return uwTick;
 8002a68:	4b03      	ldr	r3, [pc, #12]	@ (8002a78 <HAL_GetTick+0x14>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	20000b98 	.word	0x20000b98

08002a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a98:	4013      	ands	r3, r2
 8002a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aa4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002aa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aae:	4a04      	ldr	r2, [pc, #16]	@ (8002ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	60d3      	str	r3, [r2, #12]
}
 8002ab4:	bf00      	nop
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	e000ed00 	.word	0xe000ed00

08002ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ac8:	4b04      	ldr	r3, [pc, #16]	@ (8002adc <__NVIC_GetPriorityGrouping+0x18>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	0a1b      	lsrs	r3, r3, #8
 8002ace:	f003 0307 	and.w	r3, r3, #7
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	e000ed00 	.word	0xe000ed00

08002ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	db0b      	blt.n	8002b0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	f003 021f 	and.w	r2, r3, #31
 8002af8:	4907      	ldr	r1, [pc, #28]	@ (8002b18 <__NVIC_EnableIRQ+0x38>)
 8002afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afe:	095b      	lsrs	r3, r3, #5
 8002b00:	2001      	movs	r0, #1
 8002b02:	fa00 f202 	lsl.w	r2, r0, r2
 8002b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	e000e100 	.word	0xe000e100

08002b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	6039      	str	r1, [r7, #0]
 8002b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	db0a      	blt.n	8002b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	490c      	ldr	r1, [pc, #48]	@ (8002b68 <__NVIC_SetPriority+0x4c>)
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	0112      	lsls	r2, r2, #4
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	440b      	add	r3, r1
 8002b40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b44:	e00a      	b.n	8002b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	4908      	ldr	r1, [pc, #32]	@ (8002b6c <__NVIC_SetPriority+0x50>)
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	3b04      	subs	r3, #4
 8002b54:	0112      	lsls	r2, r2, #4
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	440b      	add	r3, r1
 8002b5a:	761a      	strb	r2, [r3, #24]
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	e000e100 	.word	0xe000e100
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b089      	sub	sp, #36	@ 0x24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f1c3 0307 	rsb	r3, r3, #7
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	bf28      	it	cs
 8002b8e:	2304      	movcs	r3, #4
 8002b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3304      	adds	r3, #4
 8002b96:	2b06      	cmp	r3, #6
 8002b98:	d902      	bls.n	8002ba0 <NVIC_EncodePriority+0x30>
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3b03      	subs	r3, #3
 8002b9e:	e000      	b.n	8002ba2 <NVIC_EncodePriority+0x32>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43da      	mvns	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	401a      	ands	r2, r3
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bb8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc2:	43d9      	mvns	r1, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc8:	4313      	orrs	r3, r2
         );
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3724      	adds	r7, #36	@ 0x24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
	...

08002bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002be8:	d301      	bcc.n	8002bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bea:	2301      	movs	r3, #1
 8002bec:	e00f      	b.n	8002c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bee:	4a0a      	ldr	r2, [pc, #40]	@ (8002c18 <SysTick_Config+0x40>)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bf6:	210f      	movs	r1, #15
 8002bf8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002bfc:	f7ff ff8e 	bl	8002b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c00:	4b05      	ldr	r3, [pc, #20]	@ (8002c18 <SysTick_Config+0x40>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c06:	4b04      	ldr	r3, [pc, #16]	@ (8002c18 <SysTick_Config+0x40>)
 8002c08:	2207      	movs	r2, #7
 8002c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	e000e010 	.word	0xe000e010

08002c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff ff29 	bl	8002a7c <__NVIC_SetPriorityGrouping>
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b086      	sub	sp, #24
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	4603      	mov	r3, r0
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c44:	f7ff ff3e 	bl	8002ac4 <__NVIC_GetPriorityGrouping>
 8002c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68b9      	ldr	r1, [r7, #8]
 8002c4e:	6978      	ldr	r0, [r7, #20]
 8002c50:	f7ff ff8e 	bl	8002b70 <NVIC_EncodePriority>
 8002c54:	4602      	mov	r2, r0
 8002c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff ff5d 	bl	8002b1c <__NVIC_SetPriority>
}
 8002c62:	bf00      	nop
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	4603      	mov	r3, r0
 8002c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff ff31 	bl	8002ae0 <__NVIC_EnableIRQ>
}
 8002c7e:	bf00      	nop
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7ff ffa2 	bl	8002bd8 <SysTick_Config>
 8002c94:	4603      	mov	r3, r0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002cac:	f7ff feda 	bl	8002a64 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e099      	b.n	8002df0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0201 	bic.w	r2, r2, #1
 8002cda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cdc:	e00f      	b.n	8002cfe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cde:	f7ff fec1 	bl	8002a64 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b05      	cmp	r3, #5
 8002cea:	d908      	bls.n	8002cfe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2203      	movs	r2, #3
 8002cf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e078      	b.n	8002df0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1e8      	bne.n	8002cde <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	4b38      	ldr	r3, [pc, #224]	@ (8002df8 <HAL_DMA_Init+0x158>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d107      	bne.n	8002d68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d60:	4313      	orrs	r3, r2
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f023 0307 	bic.w	r3, r3, #7
 8002d7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d117      	bne.n	8002dc2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00e      	beq.n	8002dc2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 fb01 	bl	80033ac <DMA_CheckFifoParam>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d008      	beq.n	8002dc2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2240      	movs	r2, #64	@ 0x40
 8002db4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e016      	b.n	8002df0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 fab8 	bl	8003340 <DMA_CalcBaseAndBitshift>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd8:	223f      	movs	r2, #63	@ 0x3f
 8002dda:	409a      	lsls	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	f010803f 	.word	0xf010803f

08002dfc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
 8002e08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_DMA_Start_IT+0x26>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e040      	b.n	8002ea4 <HAL_DMA_Start_IT+0xa8>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d12f      	bne.n	8002e96 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2202      	movs	r2, #2
 8002e3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	68b9      	ldr	r1, [r7, #8]
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 fa4a 	bl	80032e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e54:	223f      	movs	r2, #63	@ 0x3f
 8002e56:	409a      	lsls	r2, r3
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0216 	orr.w	r2, r2, #22
 8002e6a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d007      	beq.n	8002e84 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0208 	orr.w	r2, r2, #8
 8002e82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0201 	orr.w	r2, r2, #1
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	e005      	b.n	8002ea2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002eba:	f7ff fdd3 	bl	8002a64 <HAL_GetTick>
 8002ebe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d008      	beq.n	8002ede <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2280      	movs	r2, #128	@ 0x80
 8002ed0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e052      	b.n	8002f84 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0216 	bic.w	r2, r2, #22
 8002eec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695a      	ldr	r2, [r3, #20]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002efc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d103      	bne.n	8002f0e <HAL_DMA_Abort+0x62>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d007      	beq.n	8002f1e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0208 	bic.w	r2, r2, #8
 8002f1c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0201 	bic.w	r2, r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f2e:	e013      	b.n	8002f58 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f30:	f7ff fd98 	bl	8002a64 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b05      	cmp	r3, #5
 8002f3c:	d90c      	bls.n	8002f58 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2220      	movs	r2, #32
 8002f42:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2203      	movs	r2, #3
 8002f48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e015      	b.n	8002f84 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1e4      	bne.n	8002f30 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f6a:	223f      	movs	r2, #63	@ 0x3f
 8002f6c:	409a      	lsls	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d004      	beq.n	8002faa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2280      	movs	r2, #128	@ 0x80
 8002fa4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e00c      	b.n	8002fc4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2205      	movs	r2, #5
 8002fae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0201 	bic.w	r2, r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fdc:	4b8e      	ldr	r3, [pc, #568]	@ (8003218 <HAL_DMA_IRQHandler+0x248>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a8e      	ldr	r2, [pc, #568]	@ (800321c <HAL_DMA_IRQHandler+0x24c>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	0a9b      	lsrs	r3, r3, #10
 8002fe8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ffa:	2208      	movs	r2, #8
 8002ffc:	409a      	lsls	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4013      	ands	r3, r2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d01a      	beq.n	800303c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b00      	cmp	r3, #0
 8003012:	d013      	beq.n	800303c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0204 	bic.w	r2, r2, #4
 8003022:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003028:	2208      	movs	r2, #8
 800302a:	409a      	lsls	r2, r3
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003034:	f043 0201 	orr.w	r2, r3, #1
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003040:	2201      	movs	r2, #1
 8003042:	409a      	lsls	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4013      	ands	r3, r2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d012      	beq.n	8003072 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00b      	beq.n	8003072 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800305e:	2201      	movs	r2, #1
 8003060:	409a      	lsls	r2, r3
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800306a:	f043 0202 	orr.w	r2, r3, #2
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003076:	2204      	movs	r2, #4
 8003078:	409a      	lsls	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4013      	ands	r3, r2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d012      	beq.n	80030a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00b      	beq.n	80030a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003094:	2204      	movs	r2, #4
 8003096:	409a      	lsls	r2, r3
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a0:	f043 0204 	orr.w	r2, r3, #4
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ac:	2210      	movs	r2, #16
 80030ae:	409a      	lsls	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4013      	ands	r3, r2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d043      	beq.n	8003140 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d03c      	beq.n	8003140 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ca:	2210      	movs	r2, #16
 80030cc:	409a      	lsls	r2, r3
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d018      	beq.n	8003112 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d108      	bne.n	8003100 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d024      	beq.n	8003140 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	4798      	blx	r3
 80030fe:	e01f      	b.n	8003140 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003104:	2b00      	cmp	r3, #0
 8003106:	d01b      	beq.n	8003140 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	4798      	blx	r3
 8003110:	e016      	b.n	8003140 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800311c:	2b00      	cmp	r3, #0
 800311e:	d107      	bne.n	8003130 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0208 	bic.w	r2, r2, #8
 800312e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003144:	2220      	movs	r2, #32
 8003146:	409a      	lsls	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4013      	ands	r3, r2
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 808f 	beq.w	8003270 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0310 	and.w	r3, r3, #16
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 8087 	beq.w	8003270 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003166:	2220      	movs	r2, #32
 8003168:	409a      	lsls	r2, r3
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b05      	cmp	r3, #5
 8003178:	d136      	bne.n	80031e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0216 	bic.w	r2, r2, #22
 8003188:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	695a      	ldr	r2, [r3, #20]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003198:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d103      	bne.n	80031aa <HAL_DMA_IRQHandler+0x1da>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d007      	beq.n	80031ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0208 	bic.w	r2, r2, #8
 80031b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031be:	223f      	movs	r2, #63	@ 0x3f
 80031c0:	409a      	lsls	r2, r3
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d07e      	beq.n	80032dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	4798      	blx	r3
        }
        return;
 80031e6:	e079      	b.n	80032dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d01d      	beq.n	8003232 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10d      	bne.n	8003220 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003208:	2b00      	cmp	r3, #0
 800320a:	d031      	beq.n	8003270 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	4798      	blx	r3
 8003214:	e02c      	b.n	8003270 <HAL_DMA_IRQHandler+0x2a0>
 8003216:	bf00      	nop
 8003218:	20000000 	.word	0x20000000
 800321c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003224:	2b00      	cmp	r3, #0
 8003226:	d023      	beq.n	8003270 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	4798      	blx	r3
 8003230:	e01e      	b.n	8003270 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10f      	bne.n	8003260 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0210 	bic.w	r2, r2, #16
 800324e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003274:	2b00      	cmp	r3, #0
 8003276:	d032      	beq.n	80032de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b00      	cmp	r3, #0
 8003282:	d022      	beq.n	80032ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2205      	movs	r2, #5
 8003288:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0201 	bic.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	3301      	adds	r3, #1
 80032a0:	60bb      	str	r3, [r7, #8]
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d307      	bcc.n	80032b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f2      	bne.n	800329c <HAL_DMA_IRQHandler+0x2cc>
 80032b6:	e000      	b.n	80032ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80032b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d005      	beq.n	80032de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	4798      	blx	r3
 80032da:	e000      	b.n	80032de <HAL_DMA_IRQHandler+0x30e>
        return;
 80032dc:	bf00      	nop
    }
  }
}
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
 80032f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003300:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b40      	cmp	r3, #64	@ 0x40
 8003310:	d108      	bne.n	8003324 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003322:	e007      	b.n	8003334 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	60da      	str	r2, [r3, #12]
}
 8003334:	bf00      	nop
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	3b10      	subs	r3, #16
 8003350:	4a14      	ldr	r2, [pc, #80]	@ (80033a4 <DMA_CalcBaseAndBitshift+0x64>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	091b      	lsrs	r3, r3, #4
 8003358:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800335a:	4a13      	ldr	r2, [pc, #76]	@ (80033a8 <DMA_CalcBaseAndBitshift+0x68>)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4413      	add	r3, r2
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	461a      	mov	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2b03      	cmp	r3, #3
 800336c:	d909      	bls.n	8003382 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003376:	f023 0303 	bic.w	r3, r3, #3
 800337a:	1d1a      	adds	r2, r3, #4
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003380:	e007      	b.n	8003392 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800338a:	f023 0303 	bic.w	r3, r3, #3
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003396:	4618      	mov	r0, r3
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	aaaaaaab 	.word	0xaaaaaaab
 80033a8:	080063d8 	.word	0x080063d8

080033ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d11f      	bne.n	8003406 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	d856      	bhi.n	800347a <DMA_CheckFifoParam+0xce>
 80033cc:	a201      	add	r2, pc, #4	@ (adr r2, 80033d4 <DMA_CheckFifoParam+0x28>)
 80033ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d2:	bf00      	nop
 80033d4:	080033e5 	.word	0x080033e5
 80033d8:	080033f7 	.word	0x080033f7
 80033dc:	080033e5 	.word	0x080033e5
 80033e0:	0800347b 	.word	0x0800347b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d046      	beq.n	800347e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033f4:	e043      	b.n	800347e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033fa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033fe:	d140      	bne.n	8003482 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003404:	e03d      	b.n	8003482 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800340e:	d121      	bne.n	8003454 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b03      	cmp	r3, #3
 8003414:	d837      	bhi.n	8003486 <DMA_CheckFifoParam+0xda>
 8003416:	a201      	add	r2, pc, #4	@ (adr r2, 800341c <DMA_CheckFifoParam+0x70>)
 8003418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341c:	0800342d 	.word	0x0800342d
 8003420:	08003433 	.word	0x08003433
 8003424:	0800342d 	.word	0x0800342d
 8003428:	08003445 	.word	0x08003445
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
      break;
 8003430:	e030      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003436:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d025      	beq.n	800348a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003442:	e022      	b.n	800348a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003448:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800344c:	d11f      	bne.n	800348e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003452:	e01c      	b.n	800348e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2b02      	cmp	r3, #2
 8003458:	d903      	bls.n	8003462 <DMA_CheckFifoParam+0xb6>
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b03      	cmp	r3, #3
 800345e:	d003      	beq.n	8003468 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003460:	e018      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	73fb      	strb	r3, [r7, #15]
      break;
 8003466:	e015      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800346c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00e      	beq.n	8003492 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	73fb      	strb	r3, [r7, #15]
      break;
 8003478:	e00b      	b.n	8003492 <DMA_CheckFifoParam+0xe6>
      break;
 800347a:	bf00      	nop
 800347c:	e00a      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
      break;
 800347e:	bf00      	nop
 8003480:	e008      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
      break;
 8003482:	bf00      	nop
 8003484:	e006      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
      break;
 8003486:	bf00      	nop
 8003488:	e004      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
      break;
 800348a:	bf00      	nop
 800348c:	e002      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
      break;   
 800348e:	bf00      	nop
 8003490:	e000      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
      break;
 8003492:	bf00      	nop
    }
  } 
  
  return status; 
 8003494:	7bfb      	ldrb	r3, [r7, #15]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop

080034a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b089      	sub	sp, #36	@ 0x24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ba:	2300      	movs	r3, #0
 80034bc:	61fb      	str	r3, [r7, #28]
 80034be:	e159      	b.n	8003774 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034c0:	2201      	movs	r2, #1
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	4013      	ands	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	429a      	cmp	r2, r3
 80034da:	f040 8148 	bne.w	800376e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d005      	beq.n	80034f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d130      	bne.n	8003558 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	2203      	movs	r2, #3
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	43db      	mvns	r3, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4013      	ands	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68da      	ldr	r2, [r3, #12]
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4313      	orrs	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800352c:	2201      	movs	r2, #1
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	43db      	mvns	r3, r3
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4013      	ands	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	091b      	lsrs	r3, r3, #4
 8003542:	f003 0201 	and.w	r2, r3, #1
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4313      	orrs	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f003 0303 	and.w	r3, r3, #3
 8003560:	2b03      	cmp	r3, #3
 8003562:	d017      	beq.n	8003594 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	2203      	movs	r2, #3
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	43db      	mvns	r3, r3
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4013      	ands	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4313      	orrs	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f003 0303 	and.w	r3, r3, #3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d123      	bne.n	80035e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	08da      	lsrs	r2, r3, #3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3208      	adds	r2, #8
 80035a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	220f      	movs	r2, #15
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	43db      	mvns	r3, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4013      	ands	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	691a      	ldr	r2, [r3, #16]
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	08da      	lsrs	r2, r3, #3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	3208      	adds	r2, #8
 80035e2:	69b9      	ldr	r1, [r7, #24]
 80035e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	2203      	movs	r2, #3
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	43db      	mvns	r3, r3
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4013      	ands	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f003 0203 	and.w	r2, r3, #3
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4313      	orrs	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 80a2 	beq.w	800376e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	4b57      	ldr	r3, [pc, #348]	@ (800378c <HAL_GPIO_Init+0x2e8>)
 8003630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003632:	4a56      	ldr	r2, [pc, #344]	@ (800378c <HAL_GPIO_Init+0x2e8>)
 8003634:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003638:	6453      	str	r3, [r2, #68]	@ 0x44
 800363a:	4b54      	ldr	r3, [pc, #336]	@ (800378c <HAL_GPIO_Init+0x2e8>)
 800363c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003646:	4a52      	ldr	r2, [pc, #328]	@ (8003790 <HAL_GPIO_Init+0x2ec>)
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	089b      	lsrs	r3, r3, #2
 800364c:	3302      	adds	r3, #2
 800364e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	220f      	movs	r2, #15
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	43db      	mvns	r3, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4013      	ands	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a49      	ldr	r2, [pc, #292]	@ (8003794 <HAL_GPIO_Init+0x2f0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d019      	beq.n	80036a6 <HAL_GPIO_Init+0x202>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a48      	ldr	r2, [pc, #288]	@ (8003798 <HAL_GPIO_Init+0x2f4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d013      	beq.n	80036a2 <HAL_GPIO_Init+0x1fe>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a47      	ldr	r2, [pc, #284]	@ (800379c <HAL_GPIO_Init+0x2f8>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d00d      	beq.n	800369e <HAL_GPIO_Init+0x1fa>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a46      	ldr	r2, [pc, #280]	@ (80037a0 <HAL_GPIO_Init+0x2fc>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d007      	beq.n	800369a <HAL_GPIO_Init+0x1f6>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a45      	ldr	r2, [pc, #276]	@ (80037a4 <HAL_GPIO_Init+0x300>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d101      	bne.n	8003696 <HAL_GPIO_Init+0x1f2>
 8003692:	2304      	movs	r3, #4
 8003694:	e008      	b.n	80036a8 <HAL_GPIO_Init+0x204>
 8003696:	2307      	movs	r3, #7
 8003698:	e006      	b.n	80036a8 <HAL_GPIO_Init+0x204>
 800369a:	2303      	movs	r3, #3
 800369c:	e004      	b.n	80036a8 <HAL_GPIO_Init+0x204>
 800369e:	2302      	movs	r3, #2
 80036a0:	e002      	b.n	80036a8 <HAL_GPIO_Init+0x204>
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <HAL_GPIO_Init+0x204>
 80036a6:	2300      	movs	r3, #0
 80036a8:	69fa      	ldr	r2, [r7, #28]
 80036aa:	f002 0203 	and.w	r2, r2, #3
 80036ae:	0092      	lsls	r2, r2, #2
 80036b0:	4093      	lsls	r3, r2
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036b8:	4935      	ldr	r1, [pc, #212]	@ (8003790 <HAL_GPIO_Init+0x2ec>)
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	089b      	lsrs	r3, r3, #2
 80036be:	3302      	adds	r3, #2
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036c6:	4b38      	ldr	r3, [pc, #224]	@ (80037a8 <HAL_GPIO_Init+0x304>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	43db      	mvns	r3, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4013      	ands	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036ea:	4a2f      	ldr	r2, [pc, #188]	@ (80037a8 <HAL_GPIO_Init+0x304>)
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036f0:	4b2d      	ldr	r3, [pc, #180]	@ (80037a8 <HAL_GPIO_Init+0x304>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	43db      	mvns	r3, r3
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4013      	ands	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003714:	4a24      	ldr	r2, [pc, #144]	@ (80037a8 <HAL_GPIO_Init+0x304>)
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800371a:	4b23      	ldr	r3, [pc, #140]	@ (80037a8 <HAL_GPIO_Init+0x304>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	43db      	mvns	r3, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4013      	ands	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	4313      	orrs	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800373e:	4a1a      	ldr	r2, [pc, #104]	@ (80037a8 <HAL_GPIO_Init+0x304>)
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003744:	4b18      	ldr	r3, [pc, #96]	@ (80037a8 <HAL_GPIO_Init+0x304>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	43db      	mvns	r3, r3
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4013      	ands	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	4313      	orrs	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003768:	4a0f      	ldr	r2, [pc, #60]	@ (80037a8 <HAL_GPIO_Init+0x304>)
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	3301      	adds	r3, #1
 8003772:	61fb      	str	r3, [r7, #28]
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	2b0f      	cmp	r3, #15
 8003778:	f67f aea2 	bls.w	80034c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800377c:	bf00      	nop
 800377e:	bf00      	nop
 8003780:	3724      	adds	r7, #36	@ 0x24
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	40023800 	.word	0x40023800
 8003790:	40013800 	.word	0x40013800
 8003794:	40020000 	.word	0x40020000
 8003798:	40020400 	.word	0x40020400
 800379c:	40020800 	.word	0x40020800
 80037a0:	40020c00 	.word	0x40020c00
 80037a4:	40021000 	.word	0x40021000
 80037a8:	40013c00 	.word	0x40013c00

080037ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	807b      	strh	r3, [r7, #2]
 80037b8:	4613      	mov	r3, r2
 80037ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037bc:	787b      	ldrb	r3, [r7, #1]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037c2:	887a      	ldrh	r2, [r7, #2]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037c8:	e003      	b.n	80037d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037ca:	887b      	ldrh	r3, [r7, #2]
 80037cc:	041a      	lsls	r2, r3, #16
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	619a      	str	r2, [r3, #24]
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
	...

080037e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e12b      	b.n	8003a4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d106      	bne.n	800380c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7fc ff38 	bl	800067c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2224      	movs	r2, #36	@ 0x24
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0201 	bic.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003832:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003842:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003844:	f000 fd40 	bl	80042c8 <HAL_RCC_GetPCLK1Freq>
 8003848:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	4a81      	ldr	r2, [pc, #516]	@ (8003a54 <HAL_I2C_Init+0x274>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d807      	bhi.n	8003864 <HAL_I2C_Init+0x84>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4a80      	ldr	r2, [pc, #512]	@ (8003a58 <HAL_I2C_Init+0x278>)
 8003858:	4293      	cmp	r3, r2
 800385a:	bf94      	ite	ls
 800385c:	2301      	movls	r3, #1
 800385e:	2300      	movhi	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	e006      	b.n	8003872 <HAL_I2C_Init+0x92>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4a7d      	ldr	r2, [pc, #500]	@ (8003a5c <HAL_I2C_Init+0x27c>)
 8003868:	4293      	cmp	r3, r2
 800386a:	bf94      	ite	ls
 800386c:	2301      	movls	r3, #1
 800386e:	2300      	movhi	r3, #0
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e0e7      	b.n	8003a4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4a78      	ldr	r2, [pc, #480]	@ (8003a60 <HAL_I2C_Init+0x280>)
 800387e:	fba2 2303 	umull	r2, r3, r2, r3
 8003882:	0c9b      	lsrs	r3, r3, #18
 8003884:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	430a      	orrs	r2, r1
 8003898:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	4a6a      	ldr	r2, [pc, #424]	@ (8003a54 <HAL_I2C_Init+0x274>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d802      	bhi.n	80038b4 <HAL_I2C_Init+0xd4>
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	3301      	adds	r3, #1
 80038b2:	e009      	b.n	80038c8 <HAL_I2C_Init+0xe8>
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80038ba:	fb02 f303 	mul.w	r3, r2, r3
 80038be:	4a69      	ldr	r2, [pc, #420]	@ (8003a64 <HAL_I2C_Init+0x284>)
 80038c0:	fba2 2303 	umull	r2, r3, r2, r3
 80038c4:	099b      	lsrs	r3, r3, #6
 80038c6:	3301      	adds	r3, #1
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6812      	ldr	r2, [r2, #0]
 80038cc:	430b      	orrs	r3, r1
 80038ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80038da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	495c      	ldr	r1, [pc, #368]	@ (8003a54 <HAL_I2C_Init+0x274>)
 80038e4:	428b      	cmp	r3, r1
 80038e6:	d819      	bhi.n	800391c <HAL_I2C_Init+0x13c>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	1e59      	subs	r1, r3, #1
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80038f6:	1c59      	adds	r1, r3, #1
 80038f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80038fc:	400b      	ands	r3, r1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <HAL_I2C_Init+0x138>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	1e59      	subs	r1, r3, #1
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003910:	3301      	adds	r3, #1
 8003912:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003916:	e051      	b.n	80039bc <HAL_I2C_Init+0x1dc>
 8003918:	2304      	movs	r3, #4
 800391a:	e04f      	b.n	80039bc <HAL_I2C_Init+0x1dc>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d111      	bne.n	8003948 <HAL_I2C_Init+0x168>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	1e58      	subs	r0, r3, #1
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6859      	ldr	r1, [r3, #4]
 800392c:	460b      	mov	r3, r1
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	440b      	add	r3, r1
 8003932:	fbb0 f3f3 	udiv	r3, r0, r3
 8003936:	3301      	adds	r3, #1
 8003938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800393c:	2b00      	cmp	r3, #0
 800393e:	bf0c      	ite	eq
 8003940:	2301      	moveq	r3, #1
 8003942:	2300      	movne	r3, #0
 8003944:	b2db      	uxtb	r3, r3
 8003946:	e012      	b.n	800396e <HAL_I2C_Init+0x18e>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	1e58      	subs	r0, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6859      	ldr	r1, [r3, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	0099      	lsls	r1, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	fbb0 f3f3 	udiv	r3, r0, r3
 800395e:	3301      	adds	r3, #1
 8003960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003964:	2b00      	cmp	r3, #0
 8003966:	bf0c      	ite	eq
 8003968:	2301      	moveq	r3, #1
 800396a:	2300      	movne	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <HAL_I2C_Init+0x196>
 8003972:	2301      	movs	r3, #1
 8003974:	e022      	b.n	80039bc <HAL_I2C_Init+0x1dc>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10e      	bne.n	800399c <HAL_I2C_Init+0x1bc>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	1e58      	subs	r0, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6859      	ldr	r1, [r3, #4]
 8003986:	460b      	mov	r3, r1
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	440b      	add	r3, r1
 800398c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003990:	3301      	adds	r3, #1
 8003992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003996:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800399a:	e00f      	b.n	80039bc <HAL_I2C_Init+0x1dc>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	1e58      	subs	r0, r3, #1
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6859      	ldr	r1, [r3, #4]
 80039a4:	460b      	mov	r3, r1
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	0099      	lsls	r1, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80039b2:	3301      	adds	r3, #1
 80039b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	6809      	ldr	r1, [r1, #0]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69da      	ldr	r2, [r3, #28]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80039ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6911      	ldr	r1, [r2, #16]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	68d2      	ldr	r2, [r2, #12]
 80039f6:	4311      	orrs	r1, r2
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6812      	ldr	r2, [r2, #0]
 80039fc:	430b      	orrs	r3, r1
 80039fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695a      	ldr	r2, [r3, #20]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0201 	orr.w	r2, r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	000186a0 	.word	0x000186a0
 8003a58:	001e847f 	.word	0x001e847f
 8003a5c:	003d08ff 	.word	0x003d08ff
 8003a60:	431bde83 	.word	0x431bde83
 8003a64:	10624dd3 	.word	0x10624dd3

08003a68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e267      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d075      	beq.n	8003b72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a86:	4b88      	ldr	r3, [pc, #544]	@ (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 030c 	and.w	r3, r3, #12
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d00c      	beq.n	8003aac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a92:	4b85      	ldr	r3, [pc, #532]	@ (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a9a:	2b08      	cmp	r3, #8
 8003a9c:	d112      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a9e:	4b82      	ldr	r3, [pc, #520]	@ (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aa6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003aaa:	d10b      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aac:	4b7e      	ldr	r3, [pc, #504]	@ (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d05b      	beq.n	8003b70 <HAL_RCC_OscConfig+0x108>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d157      	bne.n	8003b70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e242      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003acc:	d106      	bne.n	8003adc <HAL_RCC_OscConfig+0x74>
 8003ace:	4b76      	ldr	r3, [pc, #472]	@ (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a75      	ldr	r2, [pc, #468]	@ (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	e01d      	b.n	8003b18 <HAL_RCC_OscConfig+0xb0>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ae4:	d10c      	bne.n	8003b00 <HAL_RCC_OscConfig+0x98>
 8003ae6:	4b70      	ldr	r3, [pc, #448]	@ (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a6f      	ldr	r2, [pc, #444]	@ (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003aec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	4b6d      	ldr	r3, [pc, #436]	@ (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a6c      	ldr	r2, [pc, #432]	@ (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	e00b      	b.n	8003b18 <HAL_RCC_OscConfig+0xb0>
 8003b00:	4b69      	ldr	r3, [pc, #420]	@ (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a68      	ldr	r2, [pc, #416]	@ (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b0a:	6013      	str	r3, [r2, #0]
 8003b0c:	4b66      	ldr	r3, [pc, #408]	@ (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a65      	ldr	r2, [pc, #404]	@ (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d013      	beq.n	8003b48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b20:	f7fe ffa0 	bl	8002a64 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b28:	f7fe ff9c 	bl	8002a64 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b64      	cmp	r3, #100	@ 0x64
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e207      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b3a:	4b5b      	ldr	r3, [pc, #364]	@ (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0f0      	beq.n	8003b28 <HAL_RCC_OscConfig+0xc0>
 8003b46:	e014      	b.n	8003b72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b48:	f7fe ff8c 	bl	8002a64 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b50:	f7fe ff88 	bl	8002a64 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b64      	cmp	r3, #100	@ 0x64
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e1f3      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b62:	4b51      	ldr	r3, [pc, #324]	@ (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f0      	bne.n	8003b50 <HAL_RCC_OscConfig+0xe8>
 8003b6e:	e000      	b.n	8003b72 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d063      	beq.n	8003c46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b7e:	4b4a      	ldr	r3, [pc, #296]	@ (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 030c 	and.w	r3, r3, #12
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00b      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b8a:	4b47      	ldr	r3, [pc, #284]	@ (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d11c      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b96:	4b44      	ldr	r3, [pc, #272]	@ (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d116      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ba2:	4b41      	ldr	r3, [pc, #260]	@ (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d005      	beq.n	8003bba <HAL_RCC_OscConfig+0x152>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d001      	beq.n	8003bba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e1c7      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bba:	4b3b      	ldr	r3, [pc, #236]	@ (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	4937      	ldr	r1, [pc, #220]	@ (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bce:	e03a      	b.n	8003c46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d020      	beq.n	8003c1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bd8:	4b34      	ldr	r3, [pc, #208]	@ (8003cac <HAL_RCC_OscConfig+0x244>)
 8003bda:	2201      	movs	r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bde:	f7fe ff41 	bl	8002a64 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003be6:	f7fe ff3d 	bl	8002a64 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e1a8      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0f0      	beq.n	8003be6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c04:	4b28      	ldr	r3, [pc, #160]	@ (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	4925      	ldr	r1, [pc, #148]	@ (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	600b      	str	r3, [r1, #0]
 8003c18:	e015      	b.n	8003c46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c1a:	4b24      	ldr	r3, [pc, #144]	@ (8003cac <HAL_RCC_OscConfig+0x244>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c20:	f7fe ff20 	bl	8002a64 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c28:	f7fe ff1c 	bl	8002a64 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e187      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0308 	and.w	r3, r3, #8
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d036      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d016      	beq.n	8003c88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c5a:	4b15      	ldr	r3, [pc, #84]	@ (8003cb0 <HAL_RCC_OscConfig+0x248>)
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c60:	f7fe ff00 	bl	8002a64 <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c68:	f7fe fefc 	bl	8002a64 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e167      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003c7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0f0      	beq.n	8003c68 <HAL_RCC_OscConfig+0x200>
 8003c86:	e01b      	b.n	8003cc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c88:	4b09      	ldr	r3, [pc, #36]	@ (8003cb0 <HAL_RCC_OscConfig+0x248>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c8e:	f7fe fee9 	bl	8002a64 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c94:	e00e      	b.n	8003cb4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c96:	f7fe fee5 	bl	8002a64 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d907      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e150      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	42470000 	.word	0x42470000
 8003cb0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb4:	4b88      	ldr	r3, [pc, #544]	@ (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003cb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1ea      	bne.n	8003c96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 8097 	beq.w	8003dfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cd2:	4b81      	ldr	r3, [pc, #516]	@ (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10f      	bne.n	8003cfe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	4b7d      	ldr	r3, [pc, #500]	@ (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce6:	4a7c      	ldr	r2, [pc, #496]	@ (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003ce8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cec:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cee:	4b7a      	ldr	r3, [pc, #488]	@ (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cf6:	60bb      	str	r3, [r7, #8]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cfe:	4b77      	ldr	r3, [pc, #476]	@ (8003edc <HAL_RCC_OscConfig+0x474>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d118      	bne.n	8003d3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d0a:	4b74      	ldr	r3, [pc, #464]	@ (8003edc <HAL_RCC_OscConfig+0x474>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a73      	ldr	r2, [pc, #460]	@ (8003edc <HAL_RCC_OscConfig+0x474>)
 8003d10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d16:	f7fe fea5 	bl	8002a64 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d1e:	f7fe fea1 	bl	8002a64 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e10c      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d30:	4b6a      	ldr	r3, [pc, #424]	@ (8003edc <HAL_RCC_OscConfig+0x474>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0f0      	beq.n	8003d1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d106      	bne.n	8003d52 <HAL_RCC_OscConfig+0x2ea>
 8003d44:	4b64      	ldr	r3, [pc, #400]	@ (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d48:	4a63      	ldr	r2, [pc, #396]	@ (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d4a:	f043 0301 	orr.w	r3, r3, #1
 8003d4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d50:	e01c      	b.n	8003d8c <HAL_RCC_OscConfig+0x324>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	2b05      	cmp	r3, #5
 8003d58:	d10c      	bne.n	8003d74 <HAL_RCC_OscConfig+0x30c>
 8003d5a:	4b5f      	ldr	r3, [pc, #380]	@ (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d5e:	4a5e      	ldr	r2, [pc, #376]	@ (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d60:	f043 0304 	orr.w	r3, r3, #4
 8003d64:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d66:	4b5c      	ldr	r3, [pc, #368]	@ (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d6a:	4a5b      	ldr	r2, [pc, #364]	@ (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d6c:	f043 0301 	orr.w	r3, r3, #1
 8003d70:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d72:	e00b      	b.n	8003d8c <HAL_RCC_OscConfig+0x324>
 8003d74:	4b58      	ldr	r3, [pc, #352]	@ (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d78:	4a57      	ldr	r2, [pc, #348]	@ (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d7a:	f023 0301 	bic.w	r3, r3, #1
 8003d7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d80:	4b55      	ldr	r3, [pc, #340]	@ (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d84:	4a54      	ldr	r2, [pc, #336]	@ (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d86:	f023 0304 	bic.w	r3, r3, #4
 8003d8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d015      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d94:	f7fe fe66 	bl	8002a64 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d9a:	e00a      	b.n	8003db2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d9c:	f7fe fe62 	bl	8002a64 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e0cb      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db2:	4b49      	ldr	r3, [pc, #292]	@ (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0ee      	beq.n	8003d9c <HAL_RCC_OscConfig+0x334>
 8003dbe:	e014      	b.n	8003dea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc0:	f7fe fe50 	bl	8002a64 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc6:	e00a      	b.n	8003dde <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc8:	f7fe fe4c 	bl	8002a64 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e0b5      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dde:	4b3e      	ldr	r3, [pc, #248]	@ (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1ee      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dea:	7dfb      	ldrb	r3, [r7, #23]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d105      	bne.n	8003dfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df0:	4b39      	ldr	r3, [pc, #228]	@ (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df4:	4a38      	ldr	r2, [pc, #224]	@ (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003df6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dfa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 80a1 	beq.w	8003f48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e06:	4b34      	ldr	r3, [pc, #208]	@ (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	2b08      	cmp	r3, #8
 8003e10:	d05c      	beq.n	8003ecc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d141      	bne.n	8003e9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e1a:	4b31      	ldr	r3, [pc, #196]	@ (8003ee0 <HAL_RCC_OscConfig+0x478>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e20:	f7fe fe20 	bl	8002a64 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e28:	f7fe fe1c 	bl	8002a64 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e087      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3a:	4b27      	ldr	r3, [pc, #156]	@ (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f0      	bne.n	8003e28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	69da      	ldr	r2, [r3, #28]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e54:	019b      	lsls	r3, r3, #6
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e5c:	085b      	lsrs	r3, r3, #1
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	041b      	lsls	r3, r3, #16
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e68:	061b      	lsls	r3, r3, #24
 8003e6a:	491b      	ldr	r1, [pc, #108]	@ (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e70:	4b1b      	ldr	r3, [pc, #108]	@ (8003ee0 <HAL_RCC_OscConfig+0x478>)
 8003e72:	2201      	movs	r2, #1
 8003e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e76:	f7fe fdf5 	bl	8002a64 <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e7c:	e008      	b.n	8003e90 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e7e:	f7fe fdf1 	bl	8002a64 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e05c      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e90:	4b11      	ldr	r3, [pc, #68]	@ (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0f0      	beq.n	8003e7e <HAL_RCC_OscConfig+0x416>
 8003e9c:	e054      	b.n	8003f48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e9e:	4b10      	ldr	r3, [pc, #64]	@ (8003ee0 <HAL_RCC_OscConfig+0x478>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea4:	f7fe fdde 	bl	8002a64 <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eac:	f7fe fdda 	bl	8002a64 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e045      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ebe:	4b06      	ldr	r3, [pc, #24]	@ (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1f0      	bne.n	8003eac <HAL_RCC_OscConfig+0x444>
 8003eca:	e03d      	b.n	8003f48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d107      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e038      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	40007000 	.word	0x40007000
 8003ee0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8003f54 <HAL_RCC_OscConfig+0x4ec>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d028      	beq.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d121      	bne.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d11a      	bne.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f14:	4013      	ands	r3, r2
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d111      	bne.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2a:	085b      	lsrs	r3, r3, #1
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d107      	bne.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d001      	beq.n	8003f48 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e000      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	40023800 	.word	0x40023800

08003f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e0cc      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f6c:	4b68      	ldr	r3, [pc, #416]	@ (8004110 <HAL_RCC_ClockConfig+0x1b8>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d90c      	bls.n	8003f94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7a:	4b65      	ldr	r3, [pc, #404]	@ (8004110 <HAL_RCC_ClockConfig+0x1b8>)
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	b2d2      	uxtb	r2, r2
 8003f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f82:	4b63      	ldr	r3, [pc, #396]	@ (8004110 <HAL_RCC_ClockConfig+0x1b8>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d001      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0b8      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d020      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d005      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fac:	4b59      	ldr	r3, [pc, #356]	@ (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	4a58      	ldr	r2, [pc, #352]	@ (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003fb6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fc4:	4b53      	ldr	r3, [pc, #332]	@ (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	4a52      	ldr	r2, [pc, #328]	@ (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003fce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fd0:	4b50      	ldr	r3, [pc, #320]	@ (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	494d      	ldr	r1, [pc, #308]	@ (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d044      	beq.n	8004078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d107      	bne.n	8004006 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff6:	4b47      	ldr	r3, [pc, #284]	@ (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d119      	bne.n	8004036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e07f      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d003      	beq.n	8004016 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004012:	2b03      	cmp	r3, #3
 8004014:	d107      	bne.n	8004026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004016:	4b3f      	ldr	r3, [pc, #252]	@ (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d109      	bne.n	8004036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e06f      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004026:	4b3b      	ldr	r3, [pc, #236]	@ (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e067      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004036:	4b37      	ldr	r3, [pc, #220]	@ (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f023 0203 	bic.w	r2, r3, #3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	4934      	ldr	r1, [pc, #208]	@ (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8004044:	4313      	orrs	r3, r2
 8004046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004048:	f7fe fd0c 	bl	8002a64 <HAL_GetTick>
 800404c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404e:	e00a      	b.n	8004066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004050:	f7fe fd08 	bl	8002a64 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800405e:	4293      	cmp	r3, r2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e04f      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004066:	4b2b      	ldr	r3, [pc, #172]	@ (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 020c 	and.w	r2, r3, #12
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	429a      	cmp	r2, r3
 8004076:	d1eb      	bne.n	8004050 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004078:	4b25      	ldr	r3, [pc, #148]	@ (8004110 <HAL_RCC_ClockConfig+0x1b8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d20c      	bcs.n	80040a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004086:	4b22      	ldr	r3, [pc, #136]	@ (8004110 <HAL_RCC_ClockConfig+0x1b8>)
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800408e:	4b20      	ldr	r3, [pc, #128]	@ (8004110 <HAL_RCC_ClockConfig+0x1b8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d001      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e032      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d008      	beq.n	80040be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040ac:	4b19      	ldr	r3, [pc, #100]	@ (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	4916      	ldr	r1, [pc, #88]	@ (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d009      	beq.n	80040de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040ca:	4b12      	ldr	r3, [pc, #72]	@ (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	490e      	ldr	r1, [pc, #56]	@ (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040de:	f000 f821 	bl	8004124 <HAL_RCC_GetSysClockFreq>
 80040e2:	4602      	mov	r2, r0
 80040e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	091b      	lsrs	r3, r3, #4
 80040ea:	f003 030f 	and.w	r3, r3, #15
 80040ee:	490a      	ldr	r1, [pc, #40]	@ (8004118 <HAL_RCC_ClockConfig+0x1c0>)
 80040f0:	5ccb      	ldrb	r3, [r1, r3]
 80040f2:	fa22 f303 	lsr.w	r3, r2, r3
 80040f6:	4a09      	ldr	r2, [pc, #36]	@ (800411c <HAL_RCC_ClockConfig+0x1c4>)
 80040f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80040fa:	4b09      	ldr	r3, [pc, #36]	@ (8004120 <HAL_RCC_ClockConfig+0x1c8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fe fc6c 	bl	80029dc <HAL_InitTick>

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	40023c00 	.word	0x40023c00
 8004114:	40023800 	.word	0x40023800
 8004118:	080063c0 	.word	0x080063c0
 800411c:	20000000 	.word	0x20000000
 8004120:	20000004 	.word	0x20000004

08004124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004128:	b090      	sub	sp, #64	@ 0x40
 800412a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800412c:	2300      	movs	r3, #0
 800412e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800413c:	4b59      	ldr	r3, [pc, #356]	@ (80042a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 030c 	and.w	r3, r3, #12
 8004144:	2b08      	cmp	r3, #8
 8004146:	d00d      	beq.n	8004164 <HAL_RCC_GetSysClockFreq+0x40>
 8004148:	2b08      	cmp	r3, #8
 800414a:	f200 80a1 	bhi.w	8004290 <HAL_RCC_GetSysClockFreq+0x16c>
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <HAL_RCC_GetSysClockFreq+0x34>
 8004152:	2b04      	cmp	r3, #4
 8004154:	d003      	beq.n	800415e <HAL_RCC_GetSysClockFreq+0x3a>
 8004156:	e09b      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004158:	4b53      	ldr	r3, [pc, #332]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800415a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800415c:	e09b      	b.n	8004296 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800415e:	4b53      	ldr	r3, [pc, #332]	@ (80042ac <HAL_RCC_GetSysClockFreq+0x188>)
 8004160:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004162:	e098      	b.n	8004296 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004164:	4b4f      	ldr	r3, [pc, #316]	@ (80042a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800416c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800416e:	4b4d      	ldr	r3, [pc, #308]	@ (80042a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d028      	beq.n	80041cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800417a:	4b4a      	ldr	r3, [pc, #296]	@ (80042a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	099b      	lsrs	r3, r3, #6
 8004180:	2200      	movs	r2, #0
 8004182:	623b      	str	r3, [r7, #32]
 8004184:	627a      	str	r2, [r7, #36]	@ 0x24
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800418c:	2100      	movs	r1, #0
 800418e:	4b47      	ldr	r3, [pc, #284]	@ (80042ac <HAL_RCC_GetSysClockFreq+0x188>)
 8004190:	fb03 f201 	mul.w	r2, r3, r1
 8004194:	2300      	movs	r3, #0
 8004196:	fb00 f303 	mul.w	r3, r0, r3
 800419a:	4413      	add	r3, r2
 800419c:	4a43      	ldr	r2, [pc, #268]	@ (80042ac <HAL_RCC_GetSysClockFreq+0x188>)
 800419e:	fba0 1202 	umull	r1, r2, r0, r2
 80041a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041a4:	460a      	mov	r2, r1
 80041a6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80041a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041aa:	4413      	add	r3, r2
 80041ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041b0:	2200      	movs	r2, #0
 80041b2:	61bb      	str	r3, [r7, #24]
 80041b4:	61fa      	str	r2, [r7, #28]
 80041b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80041be:	f7fc f813 	bl	80001e8 <__aeabi_uldivmod>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4613      	mov	r3, r2
 80041c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041ca:	e053      	b.n	8004274 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041cc:	4b35      	ldr	r3, [pc, #212]	@ (80042a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	099b      	lsrs	r3, r3, #6
 80041d2:	2200      	movs	r2, #0
 80041d4:	613b      	str	r3, [r7, #16]
 80041d6:	617a      	str	r2, [r7, #20]
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80041de:	f04f 0b00 	mov.w	fp, #0
 80041e2:	4652      	mov	r2, sl
 80041e4:	465b      	mov	r3, fp
 80041e6:	f04f 0000 	mov.w	r0, #0
 80041ea:	f04f 0100 	mov.w	r1, #0
 80041ee:	0159      	lsls	r1, r3, #5
 80041f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041f4:	0150      	lsls	r0, r2, #5
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	ebb2 080a 	subs.w	r8, r2, sl
 80041fe:	eb63 090b 	sbc.w	r9, r3, fp
 8004202:	f04f 0200 	mov.w	r2, #0
 8004206:	f04f 0300 	mov.w	r3, #0
 800420a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800420e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004212:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004216:	ebb2 0408 	subs.w	r4, r2, r8
 800421a:	eb63 0509 	sbc.w	r5, r3, r9
 800421e:	f04f 0200 	mov.w	r2, #0
 8004222:	f04f 0300 	mov.w	r3, #0
 8004226:	00eb      	lsls	r3, r5, #3
 8004228:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800422c:	00e2      	lsls	r2, r4, #3
 800422e:	4614      	mov	r4, r2
 8004230:	461d      	mov	r5, r3
 8004232:	eb14 030a 	adds.w	r3, r4, sl
 8004236:	603b      	str	r3, [r7, #0]
 8004238:	eb45 030b 	adc.w	r3, r5, fp
 800423c:	607b      	str	r3, [r7, #4]
 800423e:	f04f 0200 	mov.w	r2, #0
 8004242:	f04f 0300 	mov.w	r3, #0
 8004246:	e9d7 4500 	ldrd	r4, r5, [r7]
 800424a:	4629      	mov	r1, r5
 800424c:	028b      	lsls	r3, r1, #10
 800424e:	4621      	mov	r1, r4
 8004250:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004254:	4621      	mov	r1, r4
 8004256:	028a      	lsls	r2, r1, #10
 8004258:	4610      	mov	r0, r2
 800425a:	4619      	mov	r1, r3
 800425c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800425e:	2200      	movs	r2, #0
 8004260:	60bb      	str	r3, [r7, #8]
 8004262:	60fa      	str	r2, [r7, #12]
 8004264:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004268:	f7fb ffbe 	bl	80001e8 <__aeabi_uldivmod>
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	4613      	mov	r3, r2
 8004272:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004274:	4b0b      	ldr	r3, [pc, #44]	@ (80042a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	0c1b      	lsrs	r3, r3, #16
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	3301      	adds	r3, #1
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004284:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004288:	fbb2 f3f3 	udiv	r3, r2, r3
 800428c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800428e:	e002      	b.n	8004296 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004290:	4b05      	ldr	r3, [pc, #20]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004292:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004298:	4618      	mov	r0, r3
 800429a:	3740      	adds	r7, #64	@ 0x40
 800429c:	46bd      	mov	sp, r7
 800429e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042a2:	bf00      	nop
 80042a4:	40023800 	.word	0x40023800
 80042a8:	00f42400 	.word	0x00f42400
 80042ac:	017d7840 	.word	0x017d7840

080042b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042b4:	4b03      	ldr	r3, [pc, #12]	@ (80042c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80042b6:	681b      	ldr	r3, [r3, #0]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	20000000 	.word	0x20000000

080042c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042cc:	f7ff fff0 	bl	80042b0 <HAL_RCC_GetHCLKFreq>
 80042d0:	4602      	mov	r2, r0
 80042d2:	4b05      	ldr	r3, [pc, #20]	@ (80042e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	0a9b      	lsrs	r3, r3, #10
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	4903      	ldr	r1, [pc, #12]	@ (80042ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80042de:	5ccb      	ldrb	r3, [r1, r3]
 80042e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40023800 	.word	0x40023800
 80042ec:	080063d0 	.word	0x080063d0

080042f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042f4:	f7ff ffdc 	bl	80042b0 <HAL_RCC_GetHCLKFreq>
 80042f8:	4602      	mov	r2, r0
 80042fa:	4b05      	ldr	r3, [pc, #20]	@ (8004310 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	0b5b      	lsrs	r3, r3, #13
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	4903      	ldr	r1, [pc, #12]	@ (8004314 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004306:	5ccb      	ldrb	r3, [r1, r3]
 8004308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800430c:	4618      	mov	r0, r3
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40023800 	.word	0x40023800
 8004314:	080063d0 	.word	0x080063d0

08004318 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e041      	b.n	80043ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d106      	bne.n	8004344 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7fe f9e0 	bl	8002704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2202      	movs	r2, #2
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3304      	adds	r3, #4
 8004354:	4619      	mov	r1, r3
 8004356:	4610      	mov	r0, r2
 8004358:	f000 fa16 	bl	8004788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b084      	sub	sp, #16
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d020      	beq.n	800441a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d01b      	beq.n	800441a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f06f 0202 	mvn.w	r2, #2
 80043ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	f003 0303 	and.w	r3, r3, #3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d003      	beq.n	8004408 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f9a3 	bl	800474c <HAL_TIM_IC_CaptureCallback>
 8004406:	e005      	b.n	8004414 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f995 	bl	8004738 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f9a6 	bl	8004760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d020      	beq.n	8004466 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f003 0304 	and.w	r3, r3, #4
 800442a:	2b00      	cmp	r3, #0
 800442c:	d01b      	beq.n	8004466 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f06f 0204 	mvn.w	r2, #4
 8004436:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2202      	movs	r2, #2
 800443c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f97d 	bl	800474c <HAL_TIM_IC_CaptureCallback>
 8004452:	e005      	b.n	8004460 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 f96f 	bl	8004738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f980 	bl	8004760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	f003 0308 	and.w	r3, r3, #8
 800446c:	2b00      	cmp	r3, #0
 800446e:	d020      	beq.n	80044b2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f003 0308 	and.w	r3, r3, #8
 8004476:	2b00      	cmp	r3, #0
 8004478:	d01b      	beq.n	80044b2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f06f 0208 	mvn.w	r2, #8
 8004482:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2204      	movs	r2, #4
 8004488:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	f003 0303 	and.w	r3, r3, #3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f957 	bl	800474c <HAL_TIM_IC_CaptureCallback>
 800449e:	e005      	b.n	80044ac <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f949 	bl	8004738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f95a 	bl	8004760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	f003 0310 	and.w	r3, r3, #16
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d020      	beq.n	80044fe <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f003 0310 	and.w	r3, r3, #16
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d01b      	beq.n	80044fe <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f06f 0210 	mvn.w	r2, #16
 80044ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2208      	movs	r2, #8
 80044d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f931 	bl	800474c <HAL_TIM_IC_CaptureCallback>
 80044ea:	e005      	b.n	80044f8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f923 	bl	8004738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f934 	bl	8004760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00c      	beq.n	8004522 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d007      	beq.n	8004522 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f06f 0201 	mvn.w	r2, #1
 800451a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f901 	bl	8004724 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00c      	beq.n	8004546 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004532:	2b00      	cmp	r3, #0
 8004534:	d007      	beq.n	8004546 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800453e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 fabf 	bl	8004ac4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00c      	beq.n	800456a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004556:	2b00      	cmp	r3, #0
 8004558:	d007      	beq.n	800456a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f905 	bl	8004774 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	f003 0320 	and.w	r3, r3, #32
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00c      	beq.n	800458e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f003 0320 	and.w	r3, r3, #32
 800457a:	2b00      	cmp	r3, #0
 800457c:	d007      	beq.n	800458e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f06f 0220 	mvn.w	r2, #32
 8004586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 fa91 	bl	8004ab0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800458e:	bf00      	nop
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b084      	sub	sp, #16
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
 800459e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045a0:	2300      	movs	r3, #0
 80045a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d101      	bne.n	80045b2 <HAL_TIM_ConfigClockSource+0x1c>
 80045ae:	2302      	movs	r3, #2
 80045b0:	e0b4      	b.n	800471c <HAL_TIM_ConfigClockSource+0x186>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2202      	movs	r2, #2
 80045be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80045d0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045d8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045ea:	d03e      	beq.n	800466a <HAL_TIM_ConfigClockSource+0xd4>
 80045ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045f0:	f200 8087 	bhi.w	8004702 <HAL_TIM_ConfigClockSource+0x16c>
 80045f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045f8:	f000 8086 	beq.w	8004708 <HAL_TIM_ConfigClockSource+0x172>
 80045fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004600:	d87f      	bhi.n	8004702 <HAL_TIM_ConfigClockSource+0x16c>
 8004602:	2b70      	cmp	r3, #112	@ 0x70
 8004604:	d01a      	beq.n	800463c <HAL_TIM_ConfigClockSource+0xa6>
 8004606:	2b70      	cmp	r3, #112	@ 0x70
 8004608:	d87b      	bhi.n	8004702 <HAL_TIM_ConfigClockSource+0x16c>
 800460a:	2b60      	cmp	r3, #96	@ 0x60
 800460c:	d050      	beq.n	80046b0 <HAL_TIM_ConfigClockSource+0x11a>
 800460e:	2b60      	cmp	r3, #96	@ 0x60
 8004610:	d877      	bhi.n	8004702 <HAL_TIM_ConfigClockSource+0x16c>
 8004612:	2b50      	cmp	r3, #80	@ 0x50
 8004614:	d03c      	beq.n	8004690 <HAL_TIM_ConfigClockSource+0xfa>
 8004616:	2b50      	cmp	r3, #80	@ 0x50
 8004618:	d873      	bhi.n	8004702 <HAL_TIM_ConfigClockSource+0x16c>
 800461a:	2b40      	cmp	r3, #64	@ 0x40
 800461c:	d058      	beq.n	80046d0 <HAL_TIM_ConfigClockSource+0x13a>
 800461e:	2b40      	cmp	r3, #64	@ 0x40
 8004620:	d86f      	bhi.n	8004702 <HAL_TIM_ConfigClockSource+0x16c>
 8004622:	2b30      	cmp	r3, #48	@ 0x30
 8004624:	d064      	beq.n	80046f0 <HAL_TIM_ConfigClockSource+0x15a>
 8004626:	2b30      	cmp	r3, #48	@ 0x30
 8004628:	d86b      	bhi.n	8004702 <HAL_TIM_ConfigClockSource+0x16c>
 800462a:	2b20      	cmp	r3, #32
 800462c:	d060      	beq.n	80046f0 <HAL_TIM_ConfigClockSource+0x15a>
 800462e:	2b20      	cmp	r3, #32
 8004630:	d867      	bhi.n	8004702 <HAL_TIM_ConfigClockSource+0x16c>
 8004632:	2b00      	cmp	r3, #0
 8004634:	d05c      	beq.n	80046f0 <HAL_TIM_ConfigClockSource+0x15a>
 8004636:	2b10      	cmp	r3, #16
 8004638:	d05a      	beq.n	80046f0 <HAL_TIM_ConfigClockSource+0x15a>
 800463a:	e062      	b.n	8004702 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800464c:	f000 f9a2 	bl	8004994 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800465e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	609a      	str	r2, [r3, #8]
      break;
 8004668:	e04f      	b.n	800470a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800467a:	f000 f98b 	bl	8004994 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800468c:	609a      	str	r2, [r3, #8]
      break;
 800468e:	e03c      	b.n	800470a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800469c:	461a      	mov	r2, r3
 800469e:	f000 f8ff 	bl	80048a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2150      	movs	r1, #80	@ 0x50
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 f958 	bl	800495e <TIM_ITRx_SetConfig>
      break;
 80046ae:	e02c      	b.n	800470a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046bc:	461a      	mov	r2, r3
 80046be:	f000 f91e 	bl	80048fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2160      	movs	r1, #96	@ 0x60
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 f948 	bl	800495e <TIM_ITRx_SetConfig>
      break;
 80046ce:	e01c      	b.n	800470a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046dc:	461a      	mov	r2, r3
 80046de:	f000 f8df 	bl	80048a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2140      	movs	r1, #64	@ 0x40
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 f938 	bl	800495e <TIM_ITRx_SetConfig>
      break;
 80046ee:	e00c      	b.n	800470a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4619      	mov	r1, r3
 80046fa:	4610      	mov	r0, r2
 80046fc:	f000 f92f 	bl	800495e <TIM_ITRx_SetConfig>
      break;
 8004700:	e003      	b.n	800470a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	73fb      	strb	r3, [r7, #15]
      break;
 8004706:	e000      	b.n	800470a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004708:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800471a:	7bfb      	ldrb	r3, [r7, #15]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a3a      	ldr	r2, [pc, #232]	@ (8004884 <TIM_Base_SetConfig+0xfc>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d00f      	beq.n	80047c0 <TIM_Base_SetConfig+0x38>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047a6:	d00b      	beq.n	80047c0 <TIM_Base_SetConfig+0x38>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a37      	ldr	r2, [pc, #220]	@ (8004888 <TIM_Base_SetConfig+0x100>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d007      	beq.n	80047c0 <TIM_Base_SetConfig+0x38>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a36      	ldr	r2, [pc, #216]	@ (800488c <TIM_Base_SetConfig+0x104>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d003      	beq.n	80047c0 <TIM_Base_SetConfig+0x38>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a35      	ldr	r2, [pc, #212]	@ (8004890 <TIM_Base_SetConfig+0x108>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d108      	bne.n	80047d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a2b      	ldr	r2, [pc, #172]	@ (8004884 <TIM_Base_SetConfig+0xfc>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d01b      	beq.n	8004812 <TIM_Base_SetConfig+0x8a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047e0:	d017      	beq.n	8004812 <TIM_Base_SetConfig+0x8a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a28      	ldr	r2, [pc, #160]	@ (8004888 <TIM_Base_SetConfig+0x100>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d013      	beq.n	8004812 <TIM_Base_SetConfig+0x8a>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a27      	ldr	r2, [pc, #156]	@ (800488c <TIM_Base_SetConfig+0x104>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00f      	beq.n	8004812 <TIM_Base_SetConfig+0x8a>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a26      	ldr	r2, [pc, #152]	@ (8004890 <TIM_Base_SetConfig+0x108>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d00b      	beq.n	8004812 <TIM_Base_SetConfig+0x8a>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a25      	ldr	r2, [pc, #148]	@ (8004894 <TIM_Base_SetConfig+0x10c>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d007      	beq.n	8004812 <TIM_Base_SetConfig+0x8a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a24      	ldr	r2, [pc, #144]	@ (8004898 <TIM_Base_SetConfig+0x110>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d003      	beq.n	8004812 <TIM_Base_SetConfig+0x8a>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a23      	ldr	r2, [pc, #140]	@ (800489c <TIM_Base_SetConfig+0x114>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d108      	bne.n	8004824 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4313      	orrs	r3, r2
 8004822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	4313      	orrs	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a0e      	ldr	r2, [pc, #56]	@ (8004884 <TIM_Base_SetConfig+0xfc>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d103      	bne.n	8004858 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	691a      	ldr	r2, [r3, #16]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b01      	cmp	r3, #1
 8004868:	d105      	bne.n	8004876 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	f023 0201 	bic.w	r2, r3, #1
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	611a      	str	r2, [r3, #16]
  }
}
 8004876:	bf00      	nop
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	40010000 	.word	0x40010000
 8004888:	40000400 	.word	0x40000400
 800488c:	40000800 	.word	0x40000800
 8004890:	40000c00 	.word	0x40000c00
 8004894:	40014000 	.word	0x40014000
 8004898:	40014400 	.word	0x40014400
 800489c:	40014800 	.word	0x40014800

080048a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	f023 0201 	bic.w	r2, r3, #1
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	011b      	lsls	r3, r3, #4
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f023 030a 	bic.w	r3, r3, #10
 80048dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	621a      	str	r2, [r3, #32]
}
 80048f2:	bf00      	nop
 80048f4:	371c      	adds	r7, #28
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048fe:	b480      	push	{r7}
 8004900:	b087      	sub	sp, #28
 8004902:	af00      	add	r7, sp, #0
 8004904:	60f8      	str	r0, [r7, #12]
 8004906:	60b9      	str	r1, [r7, #8]
 8004908:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	f023 0210 	bic.w	r2, r3, #16
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004928:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	031b      	lsls	r3, r3, #12
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	4313      	orrs	r3, r2
 8004932:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800493a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	4313      	orrs	r3, r2
 8004944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	621a      	str	r2, [r3, #32]
}
 8004952:	bf00      	nop
 8004954:	371c      	adds	r7, #28
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800495e:	b480      	push	{r7}
 8004960:	b085      	sub	sp, #20
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004974:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4313      	orrs	r3, r2
 800497c:	f043 0307 	orr.w	r3, r3, #7
 8004980:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	609a      	str	r2, [r3, #8]
}
 8004988:	bf00      	nop
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	021a      	lsls	r2, r3, #8
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	431a      	orrs	r2, r3
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	4313      	orrs	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	609a      	str	r2, [r3, #8]
}
 80049c8:	bf00      	nop
 80049ca:	371c      	adds	r7, #28
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d101      	bne.n	80049ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049e8:	2302      	movs	r3, #2
 80049ea:	e050      	b.n	8004a8e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a1c      	ldr	r2, [pc, #112]	@ (8004a9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d018      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a38:	d013      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a18      	ldr	r2, [pc, #96]	@ (8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d00e      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a16      	ldr	r2, [pc, #88]	@ (8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d009      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a15      	ldr	r2, [pc, #84]	@ (8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d004      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a13      	ldr	r2, [pc, #76]	@ (8004aac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d10c      	bne.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40010000 	.word	0x40010000
 8004aa0:	40000400 	.word	0x40000400
 8004aa4:	40000800 	.word	0x40000800
 8004aa8:	40000c00 	.word	0x40000c00
 8004aac:	40014000 	.word	0x40014000

08004ab0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e042      	b.n	8004b70 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d106      	bne.n	8004b04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7fd fe6a 	bl	80027d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2224      	movs	r2, #36	@ 0x24
 8004b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 ff37 	bl	8005990 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	691a      	ldr	r2, [r3, #16]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	695a      	ldr	r2, [r3, #20]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68da      	ldr	r2, [r3, #12]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2220      	movs	r2, #32
 8004b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b08c      	sub	sp, #48	@ 0x30
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	4613      	mov	r3, r2
 8004b84:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b20      	cmp	r3, #32
 8004b90:	d156      	bne.n	8004c40 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <HAL_UART_Transmit_DMA+0x26>
 8004b98:	88fb      	ldrh	r3, [r7, #6]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e04f      	b.n	8004c42 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	88fa      	ldrh	r2, [r7, #6]
 8004bac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	88fa      	ldrh	r2, [r7, #6]
 8004bb2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2221      	movs	r2, #33	@ 0x21
 8004bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc6:	4a21      	ldr	r2, [pc, #132]	@ (8004c4c <HAL_UART_Transmit_DMA+0xd4>)
 8004bc8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bce:	4a20      	ldr	r2, [pc, #128]	@ (8004c50 <HAL_UART_Transmit_DMA+0xd8>)
 8004bd0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd6:	4a1f      	ldr	r2, [pc, #124]	@ (8004c54 <HAL_UART_Transmit_DMA+0xdc>)
 8004bd8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bde:	2200      	movs	r2, #0
 8004be0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004be2:	f107 0308 	add.w	r3, r7, #8
 8004be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bee:	6819      	ldr	r1, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	3304      	adds	r3, #4
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	88fb      	ldrh	r3, [r7, #6]
 8004bfa:	f7fe f8ff 	bl	8002dfc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c06:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3314      	adds	r3, #20
 8004c0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	e853 3f00 	ldrex	r3, [r3]
 8004c16:	617b      	str	r3, [r7, #20]
   return(result);
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3314      	adds	r3, #20
 8004c26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c28:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2c:	6a39      	ldr	r1, [r7, #32]
 8004c2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c30:	e841 2300 	strex	r3, r2, [r1]
 8004c34:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1e5      	bne.n	8004c08 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	e000      	b.n	8004c42 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004c40:	2302      	movs	r3, #2
  }
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3730      	adds	r7, #48	@ 0x30
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	0800521d 	.word	0x0800521d
 8004c50:	080052b7 	.word	0x080052b7
 8004c54:	0800543b 	.word	0x0800543b

08004c58 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	4613      	mov	r3, r2
 8004c64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b20      	cmp	r3, #32
 8004c70:	d112      	bne.n	8004c98 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d002      	beq.n	8004c7e <HAL_UART_Receive_DMA+0x26>
 8004c78:	88fb      	ldrh	r3, [r7, #6]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e00b      	b.n	8004c9a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004c88:	88fb      	ldrh	r3, [r7, #6]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	68b9      	ldr	r1, [r7, #8]
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f000 fc1e 	bl	80054d0 <UART_Start_Receive_DMA>
 8004c94:	4603      	mov	r3, r0
 8004c96:	e000      	b.n	8004c9a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004c98:	2302      	movs	r3, #2
  }
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
	...

08004ca4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b0ba      	sub	sp, #232	@ 0xe8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004ce2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10f      	bne.n	8004d0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cee:	f003 0320 	and.w	r3, r3, #32
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d009      	beq.n	8004d0a <HAL_UART_IRQHandler+0x66>
 8004cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cfa:	f003 0320 	and.w	r3, r3, #32
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 fd85 	bl	8005812 <UART_Receive_IT>
      return;
 8004d08:	e25b      	b.n	80051c2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 80de 	beq.w	8004ed0 <HAL_UART_IRQHandler+0x22c>
 8004d14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d106      	bne.n	8004d2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d24:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 80d1 	beq.w	8004ed0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00b      	beq.n	8004d52 <HAL_UART_IRQHandler+0xae>
 8004d3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d005      	beq.n	8004d52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4a:	f043 0201 	orr.w	r2, r3, #1
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d56:	f003 0304 	and.w	r3, r3, #4
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00b      	beq.n	8004d76 <HAL_UART_IRQHandler+0xd2>
 8004d5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d005      	beq.n	8004d76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d6e:	f043 0202 	orr.w	r2, r3, #2
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00b      	beq.n	8004d9a <HAL_UART_IRQHandler+0xf6>
 8004d82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d005      	beq.n	8004d9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d92:	f043 0204 	orr.w	r2, r3, #4
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d9e:	f003 0308 	and.w	r3, r3, #8
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d011      	beq.n	8004dca <HAL_UART_IRQHandler+0x126>
 8004da6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004daa:	f003 0320 	and.w	r3, r3, #32
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d105      	bne.n	8004dbe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004db2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d005      	beq.n	8004dca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dc2:	f043 0208 	orr.w	r2, r3, #8
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 81f2 	beq.w	80051b8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dd8:	f003 0320 	and.w	r3, r3, #32
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d008      	beq.n	8004df2 <HAL_UART_IRQHandler+0x14e>
 8004de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004de4:	f003 0320 	and.w	r3, r3, #32
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d002      	beq.n	8004df2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 fd10 	bl	8005812 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dfc:	2b40      	cmp	r3, #64	@ 0x40
 8004dfe:	bf0c      	ite	eq
 8004e00:	2301      	moveq	r3, #1
 8004e02:	2300      	movne	r3, #0
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d103      	bne.n	8004e1e <HAL_UART_IRQHandler+0x17a>
 8004e16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d04f      	beq.n	8004ebe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 fc18 	bl	8005654 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e2e:	2b40      	cmp	r3, #64	@ 0x40
 8004e30:	d141      	bne.n	8004eb6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	3314      	adds	r3, #20
 8004e38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e40:	e853 3f00 	ldrex	r3, [r3]
 8004e44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004e48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	3314      	adds	r3, #20
 8004e5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004e5e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004e62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004e6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004e6e:	e841 2300 	strex	r3, r2, [r1]
 8004e72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004e76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1d9      	bne.n	8004e32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d013      	beq.n	8004eae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e8a:	4a7e      	ldr	r2, [pc, #504]	@ (8005084 <HAL_UART_IRQHandler+0x3e0>)
 8004e8c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7fe f87a 	bl	8002f8c <HAL_DMA_Abort_IT>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d016      	beq.n	8004ecc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eac:	e00e      	b.n	8004ecc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f99e 	bl	80051f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb4:	e00a      	b.n	8004ecc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f99a 	bl	80051f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ebc:	e006      	b.n	8004ecc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f996 	bl	80051f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004eca:	e175      	b.n	80051b8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ecc:	bf00      	nop
    return;
 8004ece:	e173      	b.n	80051b8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	f040 814f 	bne.w	8005178 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ede:	f003 0310 	and.w	r3, r3, #16
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 8148 	beq.w	8005178 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eec:	f003 0310 	and.w	r3, r3, #16
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 8141 	beq.w	8005178 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60bb      	str	r3, [r7, #8]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	60bb      	str	r3, [r7, #8]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	60bb      	str	r3, [r7, #8]
 8004f0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f16:	2b40      	cmp	r3, #64	@ 0x40
 8004f18:	f040 80b6 	bne.w	8005088 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 8145 	beq.w	80051bc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	f080 813e 	bcs.w	80051bc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f46:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f52:	f000 8088 	beq.w	8005066 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	330c      	adds	r3, #12
 8004f5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f64:	e853 3f00 	ldrex	r3, [r3]
 8004f68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004f6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	330c      	adds	r3, #12
 8004f7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004f82:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f92:	e841 2300 	strex	r3, r2, [r1]
 8004f96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1d9      	bne.n	8004f56 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3314      	adds	r3, #20
 8004fa8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004faa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fac:	e853 3f00 	ldrex	r3, [r3]
 8004fb0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004fb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004fb4:	f023 0301 	bic.w	r3, r3, #1
 8004fb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3314      	adds	r3, #20
 8004fc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004fc6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004fca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fcc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004fce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004fd2:	e841 2300 	strex	r3, r2, [r1]
 8004fd6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004fd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1e1      	bne.n	8004fa2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3314      	adds	r3, #20
 8004fe4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fe8:	e853 3f00 	ldrex	r3, [r3]
 8004fec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004fee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ff0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ff4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3314      	adds	r3, #20
 8004ffe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005002:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005004:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005006:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005008:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800500a:	e841 2300 	strex	r3, r2, [r1]
 800500e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005010:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1e3      	bne.n	8004fde <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2220      	movs	r2, #32
 800501a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	330c      	adds	r3, #12
 800502a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800502e:	e853 3f00 	ldrex	r3, [r3]
 8005032:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005034:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005036:	f023 0310 	bic.w	r3, r3, #16
 800503a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	330c      	adds	r3, #12
 8005044:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005048:	65ba      	str	r2, [r7, #88]	@ 0x58
 800504a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800504e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005050:	e841 2300 	strex	r3, r2, [r1]
 8005054:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005056:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1e3      	bne.n	8005024 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005060:	4618      	mov	r0, r3
 8005062:	f7fd ff23 	bl	8002eac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2202      	movs	r2, #2
 800506a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005074:	b29b      	uxth	r3, r3
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	b29b      	uxth	r3, r3
 800507a:	4619      	mov	r1, r3
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f8c1 	bl	8005204 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005082:	e09b      	b.n	80051bc <HAL_UART_IRQHandler+0x518>
 8005084:	0800571b 	.word	0x0800571b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005090:	b29b      	uxth	r3, r3
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800509c:	b29b      	uxth	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 808e 	beq.w	80051c0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80050a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 8089 	beq.w	80051c0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	330c      	adds	r3, #12
 80050b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b8:	e853 3f00 	ldrex	r3, [r3]
 80050bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	330c      	adds	r3, #12
 80050ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80050d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80050d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050da:	e841 2300 	strex	r3, r2, [r1]
 80050de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1e3      	bne.n	80050ae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3314      	adds	r3, #20
 80050ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f0:	e853 3f00 	ldrex	r3, [r3]
 80050f4:	623b      	str	r3, [r7, #32]
   return(result);
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	f023 0301 	bic.w	r3, r3, #1
 80050fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	3314      	adds	r3, #20
 8005106:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800510a:	633a      	str	r2, [r7, #48]	@ 0x30
 800510c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005110:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005112:	e841 2300 	strex	r3, r2, [r1]
 8005116:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1e3      	bne.n	80050e6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2220      	movs	r2, #32
 8005122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	330c      	adds	r3, #12
 8005132:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	e853 3f00 	ldrex	r3, [r3]
 800513a:	60fb      	str	r3, [r7, #12]
   return(result);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 0310 	bic.w	r3, r3, #16
 8005142:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	330c      	adds	r3, #12
 800514c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005150:	61fa      	str	r2, [r7, #28]
 8005152:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005154:	69b9      	ldr	r1, [r7, #24]
 8005156:	69fa      	ldr	r2, [r7, #28]
 8005158:	e841 2300 	strex	r3, r2, [r1]
 800515c:	617b      	str	r3, [r7, #20]
   return(result);
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1e3      	bne.n	800512c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2202      	movs	r2, #2
 8005168:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800516a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800516e:	4619      	mov	r1, r3
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f847 	bl	8005204 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005176:	e023      	b.n	80051c0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800517c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005180:	2b00      	cmp	r3, #0
 8005182:	d009      	beq.n	8005198 <HAL_UART_IRQHandler+0x4f4>
 8005184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800518c:	2b00      	cmp	r3, #0
 800518e:	d003      	beq.n	8005198 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 fad6 	bl	8005742 <UART_Transmit_IT>
    return;
 8005196:	e014      	b.n	80051c2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800519c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00e      	beq.n	80051c2 <HAL_UART_IRQHandler+0x51e>
 80051a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d008      	beq.n	80051c2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 fb16 	bl	80057e2 <UART_EndTransmit_IT>
    return;
 80051b6:	e004      	b.n	80051c2 <HAL_UART_IRQHandler+0x51e>
    return;
 80051b8:	bf00      	nop
 80051ba:	e002      	b.n	80051c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80051bc:	bf00      	nop
 80051be:	e000      	b.n	80051c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80051c0:	bf00      	nop
  }
}
 80051c2:	37e8      	adds	r7, #232	@ 0xe8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	460b      	mov	r3, r1
 800520e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b090      	sub	sp, #64	@ 0x40
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005228:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005234:	2b00      	cmp	r3, #0
 8005236:	d137      	bne.n	80052a8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800523a:	2200      	movs	r2, #0
 800523c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800523e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	3314      	adds	r3, #20
 8005244:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005248:	e853 3f00 	ldrex	r3, [r3]
 800524c:	623b      	str	r3, [r7, #32]
   return(result);
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005254:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005256:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3314      	adds	r3, #20
 800525c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800525e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005260:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005262:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005264:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005266:	e841 2300 	strex	r3, r2, [r1]
 800526a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800526c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1e5      	bne.n	800523e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	330c      	adds	r3, #12
 8005278:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	e853 3f00 	ldrex	r3, [r3]
 8005280:	60fb      	str	r3, [r7, #12]
   return(result);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005288:	637b      	str	r3, [r7, #52]	@ 0x34
 800528a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	330c      	adds	r3, #12
 8005290:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005292:	61fa      	str	r2, [r7, #28]
 8005294:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005296:	69b9      	ldr	r1, [r7, #24]
 8005298:	69fa      	ldr	r2, [r7, #28]
 800529a:	e841 2300 	strex	r3, r2, [r1]
 800529e:	617b      	str	r3, [r7, #20]
   return(result);
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1e5      	bne.n	8005272 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80052a6:	e002      	b.n	80052ae <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80052a8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80052aa:	f7fc fb97 	bl	80019dc <HAL_UART_TxCpltCallback>
}
 80052ae:	bf00      	nop
 80052b0:	3740      	adds	r7, #64	@ 0x40
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b084      	sub	sp, #16
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f7ff ff7f 	bl	80051c8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052ca:	bf00      	nop
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b09c      	sub	sp, #112	@ 0x70
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052de:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d172      	bne.n	80053d4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80052ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052f0:	2200      	movs	r2, #0
 80052f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	330c      	adds	r3, #12
 80052fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052fe:	e853 3f00 	ldrex	r3, [r3]
 8005302:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005304:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005306:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800530a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800530c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	330c      	adds	r3, #12
 8005312:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005314:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005316:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005318:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800531a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800531c:	e841 2300 	strex	r3, r2, [r1]
 8005320:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005322:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1e5      	bne.n	80052f4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005328:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	3314      	adds	r3, #20
 800532e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005332:	e853 3f00 	ldrex	r3, [r3]
 8005336:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800533a:	f023 0301 	bic.w	r3, r3, #1
 800533e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005340:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3314      	adds	r3, #20
 8005346:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005348:	647a      	str	r2, [r7, #68]	@ 0x44
 800534a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800534e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005350:	e841 2300 	strex	r3, r2, [r1]
 8005354:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1e5      	bne.n	8005328 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800535c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	3314      	adds	r3, #20
 8005362:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005366:	e853 3f00 	ldrex	r3, [r3]
 800536a:	623b      	str	r3, [r7, #32]
   return(result);
 800536c:	6a3b      	ldr	r3, [r7, #32]
 800536e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005372:	663b      	str	r3, [r7, #96]	@ 0x60
 8005374:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	3314      	adds	r3, #20
 800537a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800537c:	633a      	str	r2, [r7, #48]	@ 0x30
 800537e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005380:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005382:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005384:	e841 2300 	strex	r3, r2, [r1]
 8005388:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800538a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1e5      	bne.n	800535c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005390:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005392:	2220      	movs	r2, #32
 8005394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005398:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800539a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800539c:	2b01      	cmp	r3, #1
 800539e:	d119      	bne.n	80053d4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	330c      	adds	r3, #12
 80053a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	e853 3f00 	ldrex	r3, [r3]
 80053ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0310 	bic.w	r3, r3, #16
 80053b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	330c      	adds	r3, #12
 80053be:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80053c0:	61fa      	str	r2, [r7, #28]
 80053c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c4:	69b9      	ldr	r1, [r7, #24]
 80053c6:	69fa      	ldr	r2, [r7, #28]
 80053c8:	e841 2300 	strex	r3, r2, [r1]
 80053cc:	617b      	str	r3, [r7, #20]
   return(result);
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1e5      	bne.n	80053a0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053d6:	2200      	movs	r2, #0
 80053d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d106      	bne.n	80053f0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053e6:	4619      	mov	r1, r3
 80053e8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80053ea:	f7ff ff0b 	bl	8005204 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80053ee:	e002      	b.n	80053f6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80053f0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80053f2:	f7fc fb0b 	bl	8001a0c <HAL_UART_RxCpltCallback>
}
 80053f6:	bf00      	nop
 80053f8:	3770      	adds	r7, #112	@ 0x70
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b084      	sub	sp, #16
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800540a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2201      	movs	r2, #1
 8005410:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005416:	2b01      	cmp	r3, #1
 8005418:	d108      	bne.n	800542c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800541e:	085b      	lsrs	r3, r3, #1
 8005420:	b29b      	uxth	r3, r3
 8005422:	4619      	mov	r1, r3
 8005424:	68f8      	ldr	r0, [r7, #12]
 8005426:	f7ff feed 	bl	8005204 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800542a:	e002      	b.n	8005432 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f7ff fed5 	bl	80051dc <HAL_UART_RxHalfCpltCallback>
}
 8005432:	bf00      	nop
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b084      	sub	sp, #16
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005442:	2300      	movs	r3, #0
 8005444:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800544a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005456:	2b80      	cmp	r3, #128	@ 0x80
 8005458:	bf0c      	ite	eq
 800545a:	2301      	moveq	r3, #1
 800545c:	2300      	movne	r3, #0
 800545e:	b2db      	uxtb	r3, r3
 8005460:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b21      	cmp	r3, #33	@ 0x21
 800546c:	d108      	bne.n	8005480 <UART_DMAError+0x46>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d005      	beq.n	8005480 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	2200      	movs	r2, #0
 8005478:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800547a:	68b8      	ldr	r0, [r7, #8]
 800547c:	f000 f8c2 	bl	8005604 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800548a:	2b40      	cmp	r3, #64	@ 0x40
 800548c:	bf0c      	ite	eq
 800548e:	2301      	moveq	r3, #1
 8005490:	2300      	movne	r3, #0
 8005492:	b2db      	uxtb	r3, r3
 8005494:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b22      	cmp	r3, #34	@ 0x22
 80054a0:	d108      	bne.n	80054b4 <UART_DMAError+0x7a>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d005      	beq.n	80054b4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2200      	movs	r2, #0
 80054ac:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80054ae:	68b8      	ldr	r0, [r7, #8]
 80054b0:	f000 f8d0 	bl	8005654 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054b8:	f043 0210 	orr.w	r2, r3, #16
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054c0:	68b8      	ldr	r0, [r7, #8]
 80054c2:	f7ff fe95 	bl	80051f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054c6:	bf00      	nop
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
	...

080054d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b098      	sub	sp, #96	@ 0x60
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	4613      	mov	r3, r2
 80054dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	88fa      	ldrh	r2, [r7, #6]
 80054e8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2222      	movs	r2, #34	@ 0x22
 80054f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054fc:	4a3e      	ldr	r2, [pc, #248]	@ (80055f8 <UART_Start_Receive_DMA+0x128>)
 80054fe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005504:	4a3d      	ldr	r2, [pc, #244]	@ (80055fc <UART_Start_Receive_DMA+0x12c>)
 8005506:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800550c:	4a3c      	ldr	r2, [pc, #240]	@ (8005600 <UART_Start_Receive_DMA+0x130>)
 800550e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005514:	2200      	movs	r2, #0
 8005516:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005518:	f107 0308 	add.w	r3, r7, #8
 800551c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3304      	adds	r3, #4
 8005528:	4619      	mov	r1, r3
 800552a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	88fb      	ldrh	r3, [r7, #6]
 8005530:	f7fd fc64 	bl	8002dfc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005534:	2300      	movs	r3, #0
 8005536:	613b      	str	r3, [r7, #16]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	613b      	str	r3, [r7, #16]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	613b      	str	r3, [r7, #16]
 8005548:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d019      	beq.n	8005586 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	330c      	adds	r3, #12
 8005558:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800555c:	e853 3f00 	ldrex	r3, [r3]
 8005560:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005564:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005568:	65bb      	str	r3, [r7, #88]	@ 0x58
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	330c      	adds	r3, #12
 8005570:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005572:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005574:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005576:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005578:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800557a:	e841 2300 	strex	r3, r2, [r1]
 800557e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005580:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1e5      	bne.n	8005552 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3314      	adds	r3, #20
 800558c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005590:	e853 3f00 	ldrex	r3, [r3]
 8005594:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005598:	f043 0301 	orr.w	r3, r3, #1
 800559c:	657b      	str	r3, [r7, #84]	@ 0x54
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	3314      	adds	r3, #20
 80055a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80055a6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80055a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055aa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80055ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80055ae:	e841 2300 	strex	r3, r2, [r1]
 80055b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1e5      	bne.n	8005586 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3314      	adds	r3, #20
 80055c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	e853 3f00 	ldrex	r3, [r3]
 80055c8:	617b      	str	r3, [r7, #20]
   return(result);
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3314      	adds	r3, #20
 80055d8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80055da:	627a      	str	r2, [r7, #36]	@ 0x24
 80055dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055de:	6a39      	ldr	r1, [r7, #32]
 80055e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055e2:	e841 2300 	strex	r3, r2, [r1]
 80055e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1e5      	bne.n	80055ba <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3760      	adds	r7, #96	@ 0x60
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	080052d3 	.word	0x080052d3
 80055fc:	080053ff 	.word	0x080053ff
 8005600:	0800543b 	.word	0x0800543b

08005604 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005604:	b480      	push	{r7}
 8005606:	b089      	sub	sp, #36	@ 0x24
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	330c      	adds	r3, #12
 8005612:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	e853 3f00 	ldrex	r3, [r3]
 800561a:	60bb      	str	r3, [r7, #8]
   return(result);
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005622:	61fb      	str	r3, [r7, #28]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	330c      	adds	r3, #12
 800562a:	69fa      	ldr	r2, [r7, #28]
 800562c:	61ba      	str	r2, [r7, #24]
 800562e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005630:	6979      	ldr	r1, [r7, #20]
 8005632:	69ba      	ldr	r2, [r7, #24]
 8005634:	e841 2300 	strex	r3, r2, [r1]
 8005638:	613b      	str	r3, [r7, #16]
   return(result);
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1e5      	bne.n	800560c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2220      	movs	r2, #32
 8005644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005648:	bf00      	nop
 800564a:	3724      	adds	r7, #36	@ 0x24
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005654:	b480      	push	{r7}
 8005656:	b095      	sub	sp, #84	@ 0x54
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	330c      	adds	r3, #12
 8005662:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005666:	e853 3f00 	ldrex	r3, [r3]
 800566a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800566c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005672:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	330c      	adds	r3, #12
 800567a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800567c:	643a      	str	r2, [r7, #64]	@ 0x40
 800567e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005680:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005682:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005684:	e841 2300 	strex	r3, r2, [r1]
 8005688:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800568a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1e5      	bne.n	800565c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	3314      	adds	r3, #20
 8005696:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005698:	6a3b      	ldr	r3, [r7, #32]
 800569a:	e853 3f00 	ldrex	r3, [r3]
 800569e:	61fb      	str	r3, [r7, #28]
   return(result);
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	f023 0301 	bic.w	r3, r3, #1
 80056a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	3314      	adds	r3, #20
 80056ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056b8:	e841 2300 	strex	r3, r2, [r1]
 80056bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1e5      	bne.n	8005690 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d119      	bne.n	8005700 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	330c      	adds	r3, #12
 80056d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	e853 3f00 	ldrex	r3, [r3]
 80056da:	60bb      	str	r3, [r7, #8]
   return(result);
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	f023 0310 	bic.w	r3, r3, #16
 80056e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	330c      	adds	r3, #12
 80056ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056ec:	61ba      	str	r2, [r7, #24]
 80056ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f0:	6979      	ldr	r1, [r7, #20]
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	e841 2300 	strex	r3, r2, [r1]
 80056f8:	613b      	str	r3, [r7, #16]
   return(result);
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1e5      	bne.n	80056cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2220      	movs	r2, #32
 8005704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800570e:	bf00      	nop
 8005710:	3754      	adds	r7, #84	@ 0x54
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b084      	sub	sp, #16
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005726:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f7ff fd5b 	bl	80051f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800573a:	bf00      	nop
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005742:	b480      	push	{r7}
 8005744:	b085      	sub	sp, #20
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b21      	cmp	r3, #33	@ 0x21
 8005754:	d13e      	bne.n	80057d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800575e:	d114      	bne.n	800578a <UART_Transmit_IT+0x48>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d110      	bne.n	800578a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	461a      	mov	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800577c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	1c9a      	adds	r2, r3, #2
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	621a      	str	r2, [r3, #32]
 8005788:	e008      	b.n	800579c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	1c59      	adds	r1, r3, #1
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6211      	str	r1, [r2, #32]
 8005794:	781a      	ldrb	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	3b01      	subs	r3, #1
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	4619      	mov	r1, r3
 80057aa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10f      	bne.n	80057d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68da      	ldr	r2, [r3, #12]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057d0:	2300      	movs	r3, #0
 80057d2:	e000      	b.n	80057d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80057d4:	2302      	movs	r3, #2
  }
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b082      	sub	sp, #8
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68da      	ldr	r2, [r3, #12]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2220      	movs	r2, #32
 80057fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7fc f8ea 	bl	80019dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b08c      	sub	sp, #48	@ 0x30
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b22      	cmp	r3, #34	@ 0x22
 8005824:	f040 80ae 	bne.w	8005984 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005830:	d117      	bne.n	8005862 <UART_Receive_IT+0x50>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d113      	bne.n	8005862 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800583a:	2300      	movs	r3, #0
 800583c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005842:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	b29b      	uxth	r3, r3
 800584c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005850:	b29a      	uxth	r2, r3
 8005852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005854:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800585a:	1c9a      	adds	r2, r3, #2
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005860:	e026      	b.n	80058b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005866:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005868:	2300      	movs	r3, #0
 800586a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005874:	d007      	beq.n	8005886 <UART_Receive_IT+0x74>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10a      	bne.n	8005894 <UART_Receive_IT+0x82>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d106      	bne.n	8005894 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	b2da      	uxtb	r2, r3
 800588e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005890:	701a      	strb	r2, [r3, #0]
 8005892:	e008      	b.n	80058a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	b2db      	uxtb	r3, r3
 800589c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058a0:	b2da      	uxtb	r2, r3
 80058a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	3b01      	subs	r3, #1
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	4619      	mov	r1, r3
 80058be:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d15d      	bne.n	8005980 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68da      	ldr	r2, [r3, #12]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f022 0220 	bic.w	r2, r2, #32
 80058d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68da      	ldr	r2, [r3, #12]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80058e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	695a      	ldr	r2, [r3, #20]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 0201 	bic.w	r2, r2, #1
 80058f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2220      	movs	r2, #32
 80058f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005906:	2b01      	cmp	r3, #1
 8005908:	d135      	bne.n	8005976 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	330c      	adds	r3, #12
 8005916:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	e853 3f00 	ldrex	r3, [r3]
 800591e:	613b      	str	r3, [r7, #16]
   return(result);
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	f023 0310 	bic.w	r3, r3, #16
 8005926:	627b      	str	r3, [r7, #36]	@ 0x24
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	330c      	adds	r3, #12
 800592e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005930:	623a      	str	r2, [r7, #32]
 8005932:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005934:	69f9      	ldr	r1, [r7, #28]
 8005936:	6a3a      	ldr	r2, [r7, #32]
 8005938:	e841 2300 	strex	r3, r2, [r1]
 800593c:	61bb      	str	r3, [r7, #24]
   return(result);
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1e5      	bne.n	8005910 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0310 	and.w	r3, r3, #16
 800594e:	2b10      	cmp	r3, #16
 8005950:	d10a      	bne.n	8005968 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005952:	2300      	movs	r3, #0
 8005954:	60fb      	str	r3, [r7, #12]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	60fb      	str	r3, [r7, #12]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	60fb      	str	r3, [r7, #12]
 8005966:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800596c:	4619      	mov	r1, r3
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f7ff fc48 	bl	8005204 <HAL_UARTEx_RxEventCallback>
 8005974:	e002      	b.n	800597c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7fc f848 	bl	8001a0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800597c:	2300      	movs	r3, #0
 800597e:	e002      	b.n	8005986 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005980:	2300      	movs	r3, #0
 8005982:	e000      	b.n	8005986 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005984:	2302      	movs	r3, #2
  }
}
 8005986:	4618      	mov	r0, r3
 8005988:	3730      	adds	r7, #48	@ 0x30
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
	...

08005990 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005994:	b0c0      	sub	sp, #256	@ 0x100
 8005996:	af00      	add	r7, sp, #0
 8005998:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800599c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80059a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ac:	68d9      	ldr	r1, [r3, #12]
 80059ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	ea40 0301 	orr.w	r3, r0, r1
 80059b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059be:	689a      	ldr	r2, [r3, #8]
 80059c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	431a      	orrs	r2, r3
 80059c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	431a      	orrs	r2, r3
 80059d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80059e8:	f021 010c 	bic.w	r1, r1, #12
 80059ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80059f6:	430b      	orrs	r3, r1
 80059f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a0a:	6999      	ldr	r1, [r3, #24]
 8005a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	ea40 0301 	orr.w	r3, r0, r1
 8005a16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	4b8f      	ldr	r3, [pc, #572]	@ (8005c5c <UART_SetConfig+0x2cc>)
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d005      	beq.n	8005a30 <UART_SetConfig+0xa0>
 8005a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	4b8d      	ldr	r3, [pc, #564]	@ (8005c60 <UART_SetConfig+0x2d0>)
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d104      	bne.n	8005a3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a30:	f7fe fc5e 	bl	80042f0 <HAL_RCC_GetPCLK2Freq>
 8005a34:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005a38:	e003      	b.n	8005a42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a3a:	f7fe fc45 	bl	80042c8 <HAL_RCC_GetPCLK1Freq>
 8005a3e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a4c:	f040 810c 	bne.w	8005c68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a54:	2200      	movs	r2, #0
 8005a56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a5a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005a5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005a62:	4622      	mov	r2, r4
 8005a64:	462b      	mov	r3, r5
 8005a66:	1891      	adds	r1, r2, r2
 8005a68:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005a6a:	415b      	adcs	r3, r3
 8005a6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005a72:	4621      	mov	r1, r4
 8005a74:	eb12 0801 	adds.w	r8, r2, r1
 8005a78:	4629      	mov	r1, r5
 8005a7a:	eb43 0901 	adc.w	r9, r3, r1
 8005a7e:	f04f 0200 	mov.w	r2, #0
 8005a82:	f04f 0300 	mov.w	r3, #0
 8005a86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a92:	4690      	mov	r8, r2
 8005a94:	4699      	mov	r9, r3
 8005a96:	4623      	mov	r3, r4
 8005a98:	eb18 0303 	adds.w	r3, r8, r3
 8005a9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005aa0:	462b      	mov	r3, r5
 8005aa2:	eb49 0303 	adc.w	r3, r9, r3
 8005aa6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005ab6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005aba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005abe:	460b      	mov	r3, r1
 8005ac0:	18db      	adds	r3, r3, r3
 8005ac2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	eb42 0303 	adc.w	r3, r2, r3
 8005aca:	657b      	str	r3, [r7, #84]	@ 0x54
 8005acc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ad0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ad4:	f7fa fb88 	bl	80001e8 <__aeabi_uldivmod>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	460b      	mov	r3, r1
 8005adc:	4b61      	ldr	r3, [pc, #388]	@ (8005c64 <UART_SetConfig+0x2d4>)
 8005ade:	fba3 2302 	umull	r2, r3, r3, r2
 8005ae2:	095b      	lsrs	r3, r3, #5
 8005ae4:	011c      	lsls	r4, r3, #4
 8005ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005aea:	2200      	movs	r2, #0
 8005aec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005af0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005af4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005af8:	4642      	mov	r2, r8
 8005afa:	464b      	mov	r3, r9
 8005afc:	1891      	adds	r1, r2, r2
 8005afe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005b00:	415b      	adcs	r3, r3
 8005b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005b08:	4641      	mov	r1, r8
 8005b0a:	eb12 0a01 	adds.w	sl, r2, r1
 8005b0e:	4649      	mov	r1, r9
 8005b10:	eb43 0b01 	adc.w	fp, r3, r1
 8005b14:	f04f 0200 	mov.w	r2, #0
 8005b18:	f04f 0300 	mov.w	r3, #0
 8005b1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b28:	4692      	mov	sl, r2
 8005b2a:	469b      	mov	fp, r3
 8005b2c:	4643      	mov	r3, r8
 8005b2e:	eb1a 0303 	adds.w	r3, sl, r3
 8005b32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b36:	464b      	mov	r3, r9
 8005b38:	eb4b 0303 	adc.w	r3, fp, r3
 8005b3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b4c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005b50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005b54:	460b      	mov	r3, r1
 8005b56:	18db      	adds	r3, r3, r3
 8005b58:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	eb42 0303 	adc.w	r3, r2, r3
 8005b60:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005b66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005b6a:	f7fa fb3d 	bl	80001e8 <__aeabi_uldivmod>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	460b      	mov	r3, r1
 8005b72:	4611      	mov	r1, r2
 8005b74:	4b3b      	ldr	r3, [pc, #236]	@ (8005c64 <UART_SetConfig+0x2d4>)
 8005b76:	fba3 2301 	umull	r2, r3, r3, r1
 8005b7a:	095b      	lsrs	r3, r3, #5
 8005b7c:	2264      	movs	r2, #100	@ 0x64
 8005b7e:	fb02 f303 	mul.w	r3, r2, r3
 8005b82:	1acb      	subs	r3, r1, r3
 8005b84:	00db      	lsls	r3, r3, #3
 8005b86:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005b8a:	4b36      	ldr	r3, [pc, #216]	@ (8005c64 <UART_SetConfig+0x2d4>)
 8005b8c:	fba3 2302 	umull	r2, r3, r3, r2
 8005b90:	095b      	lsrs	r3, r3, #5
 8005b92:	005b      	lsls	r3, r3, #1
 8005b94:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005b98:	441c      	add	r4, r3
 8005b9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ba4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005ba8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005bac:	4642      	mov	r2, r8
 8005bae:	464b      	mov	r3, r9
 8005bb0:	1891      	adds	r1, r2, r2
 8005bb2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005bb4:	415b      	adcs	r3, r3
 8005bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005bbc:	4641      	mov	r1, r8
 8005bbe:	1851      	adds	r1, r2, r1
 8005bc0:	6339      	str	r1, [r7, #48]	@ 0x30
 8005bc2:	4649      	mov	r1, r9
 8005bc4:	414b      	adcs	r3, r1
 8005bc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bc8:	f04f 0200 	mov.w	r2, #0
 8005bcc:	f04f 0300 	mov.w	r3, #0
 8005bd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005bd4:	4659      	mov	r1, fp
 8005bd6:	00cb      	lsls	r3, r1, #3
 8005bd8:	4651      	mov	r1, sl
 8005bda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bde:	4651      	mov	r1, sl
 8005be0:	00ca      	lsls	r2, r1, #3
 8005be2:	4610      	mov	r0, r2
 8005be4:	4619      	mov	r1, r3
 8005be6:	4603      	mov	r3, r0
 8005be8:	4642      	mov	r2, r8
 8005bea:	189b      	adds	r3, r3, r2
 8005bec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005bf0:	464b      	mov	r3, r9
 8005bf2:	460a      	mov	r2, r1
 8005bf4:	eb42 0303 	adc.w	r3, r2, r3
 8005bf8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c08:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005c0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c10:	460b      	mov	r3, r1
 8005c12:	18db      	adds	r3, r3, r3
 8005c14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c16:	4613      	mov	r3, r2
 8005c18:	eb42 0303 	adc.w	r3, r2, r3
 8005c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005c26:	f7fa fadf 	bl	80001e8 <__aeabi_uldivmod>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c64 <UART_SetConfig+0x2d4>)
 8005c30:	fba3 1302 	umull	r1, r3, r3, r2
 8005c34:	095b      	lsrs	r3, r3, #5
 8005c36:	2164      	movs	r1, #100	@ 0x64
 8005c38:	fb01 f303 	mul.w	r3, r1, r3
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	00db      	lsls	r3, r3, #3
 8005c40:	3332      	adds	r3, #50	@ 0x32
 8005c42:	4a08      	ldr	r2, [pc, #32]	@ (8005c64 <UART_SetConfig+0x2d4>)
 8005c44:	fba2 2303 	umull	r2, r3, r2, r3
 8005c48:	095b      	lsrs	r3, r3, #5
 8005c4a:	f003 0207 	and.w	r2, r3, #7
 8005c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4422      	add	r2, r4
 8005c56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c58:	e106      	b.n	8005e68 <UART_SetConfig+0x4d8>
 8005c5a:	bf00      	nop
 8005c5c:	40011000 	.word	0x40011000
 8005c60:	40011400 	.word	0x40011400
 8005c64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c72:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005c76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005c7a:	4642      	mov	r2, r8
 8005c7c:	464b      	mov	r3, r9
 8005c7e:	1891      	adds	r1, r2, r2
 8005c80:	6239      	str	r1, [r7, #32]
 8005c82:	415b      	adcs	r3, r3
 8005c84:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c8a:	4641      	mov	r1, r8
 8005c8c:	1854      	adds	r4, r2, r1
 8005c8e:	4649      	mov	r1, r9
 8005c90:	eb43 0501 	adc.w	r5, r3, r1
 8005c94:	f04f 0200 	mov.w	r2, #0
 8005c98:	f04f 0300 	mov.w	r3, #0
 8005c9c:	00eb      	lsls	r3, r5, #3
 8005c9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ca2:	00e2      	lsls	r2, r4, #3
 8005ca4:	4614      	mov	r4, r2
 8005ca6:	461d      	mov	r5, r3
 8005ca8:	4643      	mov	r3, r8
 8005caa:	18e3      	adds	r3, r4, r3
 8005cac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005cb0:	464b      	mov	r3, r9
 8005cb2:	eb45 0303 	adc.w	r3, r5, r3
 8005cb6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005cc6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005cca:	f04f 0200 	mov.w	r2, #0
 8005cce:	f04f 0300 	mov.w	r3, #0
 8005cd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005cd6:	4629      	mov	r1, r5
 8005cd8:	008b      	lsls	r3, r1, #2
 8005cda:	4621      	mov	r1, r4
 8005cdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ce0:	4621      	mov	r1, r4
 8005ce2:	008a      	lsls	r2, r1, #2
 8005ce4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005ce8:	f7fa fa7e 	bl	80001e8 <__aeabi_uldivmod>
 8005cec:	4602      	mov	r2, r0
 8005cee:	460b      	mov	r3, r1
 8005cf0:	4b60      	ldr	r3, [pc, #384]	@ (8005e74 <UART_SetConfig+0x4e4>)
 8005cf2:	fba3 2302 	umull	r2, r3, r3, r2
 8005cf6:	095b      	lsrs	r3, r3, #5
 8005cf8:	011c      	lsls	r4, r3, #4
 8005cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005d08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005d0c:	4642      	mov	r2, r8
 8005d0e:	464b      	mov	r3, r9
 8005d10:	1891      	adds	r1, r2, r2
 8005d12:	61b9      	str	r1, [r7, #24]
 8005d14:	415b      	adcs	r3, r3
 8005d16:	61fb      	str	r3, [r7, #28]
 8005d18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d1c:	4641      	mov	r1, r8
 8005d1e:	1851      	adds	r1, r2, r1
 8005d20:	6139      	str	r1, [r7, #16]
 8005d22:	4649      	mov	r1, r9
 8005d24:	414b      	adcs	r3, r1
 8005d26:	617b      	str	r3, [r7, #20]
 8005d28:	f04f 0200 	mov.w	r2, #0
 8005d2c:	f04f 0300 	mov.w	r3, #0
 8005d30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d34:	4659      	mov	r1, fp
 8005d36:	00cb      	lsls	r3, r1, #3
 8005d38:	4651      	mov	r1, sl
 8005d3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d3e:	4651      	mov	r1, sl
 8005d40:	00ca      	lsls	r2, r1, #3
 8005d42:	4610      	mov	r0, r2
 8005d44:	4619      	mov	r1, r3
 8005d46:	4603      	mov	r3, r0
 8005d48:	4642      	mov	r2, r8
 8005d4a:	189b      	adds	r3, r3, r2
 8005d4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d50:	464b      	mov	r3, r9
 8005d52:	460a      	mov	r2, r1
 8005d54:	eb42 0303 	adc.w	r3, r2, r3
 8005d58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d66:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005d68:	f04f 0200 	mov.w	r2, #0
 8005d6c:	f04f 0300 	mov.w	r3, #0
 8005d70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005d74:	4649      	mov	r1, r9
 8005d76:	008b      	lsls	r3, r1, #2
 8005d78:	4641      	mov	r1, r8
 8005d7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d7e:	4641      	mov	r1, r8
 8005d80:	008a      	lsls	r2, r1, #2
 8005d82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005d86:	f7fa fa2f 	bl	80001e8 <__aeabi_uldivmod>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	4611      	mov	r1, r2
 8005d90:	4b38      	ldr	r3, [pc, #224]	@ (8005e74 <UART_SetConfig+0x4e4>)
 8005d92:	fba3 2301 	umull	r2, r3, r3, r1
 8005d96:	095b      	lsrs	r3, r3, #5
 8005d98:	2264      	movs	r2, #100	@ 0x64
 8005d9a:	fb02 f303 	mul.w	r3, r2, r3
 8005d9e:	1acb      	subs	r3, r1, r3
 8005da0:	011b      	lsls	r3, r3, #4
 8005da2:	3332      	adds	r3, #50	@ 0x32
 8005da4:	4a33      	ldr	r2, [pc, #204]	@ (8005e74 <UART_SetConfig+0x4e4>)
 8005da6:	fba2 2303 	umull	r2, r3, r2, r3
 8005daa:	095b      	lsrs	r3, r3, #5
 8005dac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005db0:	441c      	add	r4, r3
 8005db2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005db6:	2200      	movs	r2, #0
 8005db8:	673b      	str	r3, [r7, #112]	@ 0x70
 8005dba:	677a      	str	r2, [r7, #116]	@ 0x74
 8005dbc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005dc0:	4642      	mov	r2, r8
 8005dc2:	464b      	mov	r3, r9
 8005dc4:	1891      	adds	r1, r2, r2
 8005dc6:	60b9      	str	r1, [r7, #8]
 8005dc8:	415b      	adcs	r3, r3
 8005dca:	60fb      	str	r3, [r7, #12]
 8005dcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005dd0:	4641      	mov	r1, r8
 8005dd2:	1851      	adds	r1, r2, r1
 8005dd4:	6039      	str	r1, [r7, #0]
 8005dd6:	4649      	mov	r1, r9
 8005dd8:	414b      	adcs	r3, r1
 8005dda:	607b      	str	r3, [r7, #4]
 8005ddc:	f04f 0200 	mov.w	r2, #0
 8005de0:	f04f 0300 	mov.w	r3, #0
 8005de4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005de8:	4659      	mov	r1, fp
 8005dea:	00cb      	lsls	r3, r1, #3
 8005dec:	4651      	mov	r1, sl
 8005dee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005df2:	4651      	mov	r1, sl
 8005df4:	00ca      	lsls	r2, r1, #3
 8005df6:	4610      	mov	r0, r2
 8005df8:	4619      	mov	r1, r3
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	4642      	mov	r2, r8
 8005dfe:	189b      	adds	r3, r3, r2
 8005e00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e02:	464b      	mov	r3, r9
 8005e04:	460a      	mov	r2, r1
 8005e06:	eb42 0303 	adc.w	r3, r2, r3
 8005e0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e16:	667a      	str	r2, [r7, #100]	@ 0x64
 8005e18:	f04f 0200 	mov.w	r2, #0
 8005e1c:	f04f 0300 	mov.w	r3, #0
 8005e20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005e24:	4649      	mov	r1, r9
 8005e26:	008b      	lsls	r3, r1, #2
 8005e28:	4641      	mov	r1, r8
 8005e2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e2e:	4641      	mov	r1, r8
 8005e30:	008a      	lsls	r2, r1, #2
 8005e32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005e36:	f7fa f9d7 	bl	80001e8 <__aeabi_uldivmod>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e74 <UART_SetConfig+0x4e4>)
 8005e40:	fba3 1302 	umull	r1, r3, r3, r2
 8005e44:	095b      	lsrs	r3, r3, #5
 8005e46:	2164      	movs	r1, #100	@ 0x64
 8005e48:	fb01 f303 	mul.w	r3, r1, r3
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	011b      	lsls	r3, r3, #4
 8005e50:	3332      	adds	r3, #50	@ 0x32
 8005e52:	4a08      	ldr	r2, [pc, #32]	@ (8005e74 <UART_SetConfig+0x4e4>)
 8005e54:	fba2 2303 	umull	r2, r3, r2, r3
 8005e58:	095b      	lsrs	r3, r3, #5
 8005e5a:	f003 020f 	and.w	r2, r3, #15
 8005e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4422      	add	r2, r4
 8005e66:	609a      	str	r2, [r3, #8]
}
 8005e68:	bf00      	nop
 8005e6a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e74:	51eb851f 	.word	0x51eb851f

08005e78 <realloc>:
 8005e78:	4b02      	ldr	r3, [pc, #8]	@ (8005e84 <realloc+0xc>)
 8005e7a:	460a      	mov	r2, r1
 8005e7c:	4601      	mov	r1, r0
 8005e7e:	6818      	ldr	r0, [r3, #0]
 8005e80:	f000 b802 	b.w	8005e88 <_realloc_r>
 8005e84:	2000000c 	.word	0x2000000c

08005e88 <_realloc_r>:
 8005e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e8c:	4680      	mov	r8, r0
 8005e8e:	4615      	mov	r5, r2
 8005e90:	460c      	mov	r4, r1
 8005e92:	b921      	cbnz	r1, 8005e9e <_realloc_r+0x16>
 8005e94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e98:	4611      	mov	r1, r2
 8005e9a:	f000 b8d1 	b.w	8006040 <_malloc_r>
 8005e9e:	b92a      	cbnz	r2, 8005eac <_realloc_r+0x24>
 8005ea0:	f000 f862 	bl	8005f68 <_free_r>
 8005ea4:	2400      	movs	r4, #0
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eac:	f000 f954 	bl	8006158 <_malloc_usable_size_r>
 8005eb0:	4285      	cmp	r5, r0
 8005eb2:	4606      	mov	r6, r0
 8005eb4:	d802      	bhi.n	8005ebc <_realloc_r+0x34>
 8005eb6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005eba:	d8f4      	bhi.n	8005ea6 <_realloc_r+0x1e>
 8005ebc:	4629      	mov	r1, r5
 8005ebe:	4640      	mov	r0, r8
 8005ec0:	f000 f8be 	bl	8006040 <_malloc_r>
 8005ec4:	4607      	mov	r7, r0
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	d0ec      	beq.n	8005ea4 <_realloc_r+0x1c>
 8005eca:	42b5      	cmp	r5, r6
 8005ecc:	462a      	mov	r2, r5
 8005ece:	4621      	mov	r1, r4
 8005ed0:	bf28      	it	cs
 8005ed2:	4632      	movcs	r2, r6
 8005ed4:	f000 f83a 	bl	8005f4c <memcpy>
 8005ed8:	4621      	mov	r1, r4
 8005eda:	4640      	mov	r0, r8
 8005edc:	f000 f844 	bl	8005f68 <_free_r>
 8005ee0:	463c      	mov	r4, r7
 8005ee2:	e7e0      	b.n	8005ea6 <_realloc_r+0x1e>

08005ee4 <memset>:
 8005ee4:	4402      	add	r2, r0
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d100      	bne.n	8005eee <memset+0xa>
 8005eec:	4770      	bx	lr
 8005eee:	f803 1b01 	strb.w	r1, [r3], #1
 8005ef2:	e7f9      	b.n	8005ee8 <memset+0x4>

08005ef4 <__errno>:
 8005ef4:	4b01      	ldr	r3, [pc, #4]	@ (8005efc <__errno+0x8>)
 8005ef6:	6818      	ldr	r0, [r3, #0]
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	2000000c 	.word	0x2000000c

08005f00 <__libc_init_array>:
 8005f00:	b570      	push	{r4, r5, r6, lr}
 8005f02:	4d0d      	ldr	r5, [pc, #52]	@ (8005f38 <__libc_init_array+0x38>)
 8005f04:	4c0d      	ldr	r4, [pc, #52]	@ (8005f3c <__libc_init_array+0x3c>)
 8005f06:	1b64      	subs	r4, r4, r5
 8005f08:	10a4      	asrs	r4, r4, #2
 8005f0a:	2600      	movs	r6, #0
 8005f0c:	42a6      	cmp	r6, r4
 8005f0e:	d109      	bne.n	8005f24 <__libc_init_array+0x24>
 8005f10:	4d0b      	ldr	r5, [pc, #44]	@ (8005f40 <__libc_init_array+0x40>)
 8005f12:	4c0c      	ldr	r4, [pc, #48]	@ (8005f44 <__libc_init_array+0x44>)
 8005f14:	f000 f938 	bl	8006188 <_init>
 8005f18:	1b64      	subs	r4, r4, r5
 8005f1a:	10a4      	asrs	r4, r4, #2
 8005f1c:	2600      	movs	r6, #0
 8005f1e:	42a6      	cmp	r6, r4
 8005f20:	d105      	bne.n	8005f2e <__libc_init_array+0x2e>
 8005f22:	bd70      	pop	{r4, r5, r6, pc}
 8005f24:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f28:	4798      	blx	r3
 8005f2a:	3601      	adds	r6, #1
 8005f2c:	e7ee      	b.n	8005f0c <__libc_init_array+0xc>
 8005f2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f32:	4798      	blx	r3
 8005f34:	3601      	adds	r6, #1
 8005f36:	e7f2      	b.n	8005f1e <__libc_init_array+0x1e>
 8005f38:	080063e8 	.word	0x080063e8
 8005f3c:	080063e8 	.word	0x080063e8
 8005f40:	080063e8 	.word	0x080063e8
 8005f44:	080063f0 	.word	0x080063f0

08005f48 <__retarget_lock_acquire_recursive>:
 8005f48:	4770      	bx	lr

08005f4a <__retarget_lock_release_recursive>:
 8005f4a:	4770      	bx	lr

08005f4c <memcpy>:
 8005f4c:	440a      	add	r2, r1
 8005f4e:	4291      	cmp	r1, r2
 8005f50:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005f54:	d100      	bne.n	8005f58 <memcpy+0xc>
 8005f56:	4770      	bx	lr
 8005f58:	b510      	push	{r4, lr}
 8005f5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f62:	4291      	cmp	r1, r2
 8005f64:	d1f9      	bne.n	8005f5a <memcpy+0xe>
 8005f66:	bd10      	pop	{r4, pc}

08005f68 <_free_r>:
 8005f68:	b538      	push	{r3, r4, r5, lr}
 8005f6a:	4605      	mov	r5, r0
 8005f6c:	2900      	cmp	r1, #0
 8005f6e:	d041      	beq.n	8005ff4 <_free_r+0x8c>
 8005f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f74:	1f0c      	subs	r4, r1, #4
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	bfb8      	it	lt
 8005f7a:	18e4      	addlt	r4, r4, r3
 8005f7c:	f000 f8e0 	bl	8006140 <__malloc_lock>
 8005f80:	4a1d      	ldr	r2, [pc, #116]	@ (8005ff8 <_free_r+0x90>)
 8005f82:	6813      	ldr	r3, [r2, #0]
 8005f84:	b933      	cbnz	r3, 8005f94 <_free_r+0x2c>
 8005f86:	6063      	str	r3, [r4, #4]
 8005f88:	6014      	str	r4, [r2, #0]
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f90:	f000 b8dc 	b.w	800614c <__malloc_unlock>
 8005f94:	42a3      	cmp	r3, r4
 8005f96:	d908      	bls.n	8005faa <_free_r+0x42>
 8005f98:	6820      	ldr	r0, [r4, #0]
 8005f9a:	1821      	adds	r1, r4, r0
 8005f9c:	428b      	cmp	r3, r1
 8005f9e:	bf01      	itttt	eq
 8005fa0:	6819      	ldreq	r1, [r3, #0]
 8005fa2:	685b      	ldreq	r3, [r3, #4]
 8005fa4:	1809      	addeq	r1, r1, r0
 8005fa6:	6021      	streq	r1, [r4, #0]
 8005fa8:	e7ed      	b.n	8005f86 <_free_r+0x1e>
 8005faa:	461a      	mov	r2, r3
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	b10b      	cbz	r3, 8005fb4 <_free_r+0x4c>
 8005fb0:	42a3      	cmp	r3, r4
 8005fb2:	d9fa      	bls.n	8005faa <_free_r+0x42>
 8005fb4:	6811      	ldr	r1, [r2, #0]
 8005fb6:	1850      	adds	r0, r2, r1
 8005fb8:	42a0      	cmp	r0, r4
 8005fba:	d10b      	bne.n	8005fd4 <_free_r+0x6c>
 8005fbc:	6820      	ldr	r0, [r4, #0]
 8005fbe:	4401      	add	r1, r0
 8005fc0:	1850      	adds	r0, r2, r1
 8005fc2:	4283      	cmp	r3, r0
 8005fc4:	6011      	str	r1, [r2, #0]
 8005fc6:	d1e0      	bne.n	8005f8a <_free_r+0x22>
 8005fc8:	6818      	ldr	r0, [r3, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	6053      	str	r3, [r2, #4]
 8005fce:	4408      	add	r0, r1
 8005fd0:	6010      	str	r0, [r2, #0]
 8005fd2:	e7da      	b.n	8005f8a <_free_r+0x22>
 8005fd4:	d902      	bls.n	8005fdc <_free_r+0x74>
 8005fd6:	230c      	movs	r3, #12
 8005fd8:	602b      	str	r3, [r5, #0]
 8005fda:	e7d6      	b.n	8005f8a <_free_r+0x22>
 8005fdc:	6820      	ldr	r0, [r4, #0]
 8005fde:	1821      	adds	r1, r4, r0
 8005fe0:	428b      	cmp	r3, r1
 8005fe2:	bf04      	itt	eq
 8005fe4:	6819      	ldreq	r1, [r3, #0]
 8005fe6:	685b      	ldreq	r3, [r3, #4]
 8005fe8:	6063      	str	r3, [r4, #4]
 8005fea:	bf04      	itt	eq
 8005fec:	1809      	addeq	r1, r1, r0
 8005fee:	6021      	streq	r1, [r4, #0]
 8005ff0:	6054      	str	r4, [r2, #4]
 8005ff2:	e7ca      	b.n	8005f8a <_free_r+0x22>
 8005ff4:	bd38      	pop	{r3, r4, r5, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20000ce0 	.word	0x20000ce0

08005ffc <sbrk_aligned>:
 8005ffc:	b570      	push	{r4, r5, r6, lr}
 8005ffe:	4e0f      	ldr	r6, [pc, #60]	@ (800603c <sbrk_aligned+0x40>)
 8006000:	460c      	mov	r4, r1
 8006002:	6831      	ldr	r1, [r6, #0]
 8006004:	4605      	mov	r5, r0
 8006006:	b911      	cbnz	r1, 800600e <sbrk_aligned+0x12>
 8006008:	f000 f8ae 	bl	8006168 <_sbrk_r>
 800600c:	6030      	str	r0, [r6, #0]
 800600e:	4621      	mov	r1, r4
 8006010:	4628      	mov	r0, r5
 8006012:	f000 f8a9 	bl	8006168 <_sbrk_r>
 8006016:	1c43      	adds	r3, r0, #1
 8006018:	d103      	bne.n	8006022 <sbrk_aligned+0x26>
 800601a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800601e:	4620      	mov	r0, r4
 8006020:	bd70      	pop	{r4, r5, r6, pc}
 8006022:	1cc4      	adds	r4, r0, #3
 8006024:	f024 0403 	bic.w	r4, r4, #3
 8006028:	42a0      	cmp	r0, r4
 800602a:	d0f8      	beq.n	800601e <sbrk_aligned+0x22>
 800602c:	1a21      	subs	r1, r4, r0
 800602e:	4628      	mov	r0, r5
 8006030:	f000 f89a 	bl	8006168 <_sbrk_r>
 8006034:	3001      	adds	r0, #1
 8006036:	d1f2      	bne.n	800601e <sbrk_aligned+0x22>
 8006038:	e7ef      	b.n	800601a <sbrk_aligned+0x1e>
 800603a:	bf00      	nop
 800603c:	20000cdc 	.word	0x20000cdc

08006040 <_malloc_r>:
 8006040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006044:	1ccd      	adds	r5, r1, #3
 8006046:	f025 0503 	bic.w	r5, r5, #3
 800604a:	3508      	adds	r5, #8
 800604c:	2d0c      	cmp	r5, #12
 800604e:	bf38      	it	cc
 8006050:	250c      	movcc	r5, #12
 8006052:	2d00      	cmp	r5, #0
 8006054:	4606      	mov	r6, r0
 8006056:	db01      	blt.n	800605c <_malloc_r+0x1c>
 8006058:	42a9      	cmp	r1, r5
 800605a:	d904      	bls.n	8006066 <_malloc_r+0x26>
 800605c:	230c      	movs	r3, #12
 800605e:	6033      	str	r3, [r6, #0]
 8006060:	2000      	movs	r0, #0
 8006062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006066:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800613c <_malloc_r+0xfc>
 800606a:	f000 f869 	bl	8006140 <__malloc_lock>
 800606e:	f8d8 3000 	ldr.w	r3, [r8]
 8006072:	461c      	mov	r4, r3
 8006074:	bb44      	cbnz	r4, 80060c8 <_malloc_r+0x88>
 8006076:	4629      	mov	r1, r5
 8006078:	4630      	mov	r0, r6
 800607a:	f7ff ffbf 	bl	8005ffc <sbrk_aligned>
 800607e:	1c43      	adds	r3, r0, #1
 8006080:	4604      	mov	r4, r0
 8006082:	d158      	bne.n	8006136 <_malloc_r+0xf6>
 8006084:	f8d8 4000 	ldr.w	r4, [r8]
 8006088:	4627      	mov	r7, r4
 800608a:	2f00      	cmp	r7, #0
 800608c:	d143      	bne.n	8006116 <_malloc_r+0xd6>
 800608e:	2c00      	cmp	r4, #0
 8006090:	d04b      	beq.n	800612a <_malloc_r+0xea>
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	4639      	mov	r1, r7
 8006096:	4630      	mov	r0, r6
 8006098:	eb04 0903 	add.w	r9, r4, r3
 800609c:	f000 f864 	bl	8006168 <_sbrk_r>
 80060a0:	4581      	cmp	r9, r0
 80060a2:	d142      	bne.n	800612a <_malloc_r+0xea>
 80060a4:	6821      	ldr	r1, [r4, #0]
 80060a6:	1a6d      	subs	r5, r5, r1
 80060a8:	4629      	mov	r1, r5
 80060aa:	4630      	mov	r0, r6
 80060ac:	f7ff ffa6 	bl	8005ffc <sbrk_aligned>
 80060b0:	3001      	adds	r0, #1
 80060b2:	d03a      	beq.n	800612a <_malloc_r+0xea>
 80060b4:	6823      	ldr	r3, [r4, #0]
 80060b6:	442b      	add	r3, r5
 80060b8:	6023      	str	r3, [r4, #0]
 80060ba:	f8d8 3000 	ldr.w	r3, [r8]
 80060be:	685a      	ldr	r2, [r3, #4]
 80060c0:	bb62      	cbnz	r2, 800611c <_malloc_r+0xdc>
 80060c2:	f8c8 7000 	str.w	r7, [r8]
 80060c6:	e00f      	b.n	80060e8 <_malloc_r+0xa8>
 80060c8:	6822      	ldr	r2, [r4, #0]
 80060ca:	1b52      	subs	r2, r2, r5
 80060cc:	d420      	bmi.n	8006110 <_malloc_r+0xd0>
 80060ce:	2a0b      	cmp	r2, #11
 80060d0:	d917      	bls.n	8006102 <_malloc_r+0xc2>
 80060d2:	1961      	adds	r1, r4, r5
 80060d4:	42a3      	cmp	r3, r4
 80060d6:	6025      	str	r5, [r4, #0]
 80060d8:	bf18      	it	ne
 80060da:	6059      	strne	r1, [r3, #4]
 80060dc:	6863      	ldr	r3, [r4, #4]
 80060de:	bf08      	it	eq
 80060e0:	f8c8 1000 	streq.w	r1, [r8]
 80060e4:	5162      	str	r2, [r4, r5]
 80060e6:	604b      	str	r3, [r1, #4]
 80060e8:	4630      	mov	r0, r6
 80060ea:	f000 f82f 	bl	800614c <__malloc_unlock>
 80060ee:	f104 000b 	add.w	r0, r4, #11
 80060f2:	1d23      	adds	r3, r4, #4
 80060f4:	f020 0007 	bic.w	r0, r0, #7
 80060f8:	1ac2      	subs	r2, r0, r3
 80060fa:	bf1c      	itt	ne
 80060fc:	1a1b      	subne	r3, r3, r0
 80060fe:	50a3      	strne	r3, [r4, r2]
 8006100:	e7af      	b.n	8006062 <_malloc_r+0x22>
 8006102:	6862      	ldr	r2, [r4, #4]
 8006104:	42a3      	cmp	r3, r4
 8006106:	bf0c      	ite	eq
 8006108:	f8c8 2000 	streq.w	r2, [r8]
 800610c:	605a      	strne	r2, [r3, #4]
 800610e:	e7eb      	b.n	80060e8 <_malloc_r+0xa8>
 8006110:	4623      	mov	r3, r4
 8006112:	6864      	ldr	r4, [r4, #4]
 8006114:	e7ae      	b.n	8006074 <_malloc_r+0x34>
 8006116:	463c      	mov	r4, r7
 8006118:	687f      	ldr	r7, [r7, #4]
 800611a:	e7b6      	b.n	800608a <_malloc_r+0x4a>
 800611c:	461a      	mov	r2, r3
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	42a3      	cmp	r3, r4
 8006122:	d1fb      	bne.n	800611c <_malloc_r+0xdc>
 8006124:	2300      	movs	r3, #0
 8006126:	6053      	str	r3, [r2, #4]
 8006128:	e7de      	b.n	80060e8 <_malloc_r+0xa8>
 800612a:	230c      	movs	r3, #12
 800612c:	6033      	str	r3, [r6, #0]
 800612e:	4630      	mov	r0, r6
 8006130:	f000 f80c 	bl	800614c <__malloc_unlock>
 8006134:	e794      	b.n	8006060 <_malloc_r+0x20>
 8006136:	6005      	str	r5, [r0, #0]
 8006138:	e7d6      	b.n	80060e8 <_malloc_r+0xa8>
 800613a:	bf00      	nop
 800613c:	20000ce0 	.word	0x20000ce0

08006140 <__malloc_lock>:
 8006140:	4801      	ldr	r0, [pc, #4]	@ (8006148 <__malloc_lock+0x8>)
 8006142:	f7ff bf01 	b.w	8005f48 <__retarget_lock_acquire_recursive>
 8006146:	bf00      	nop
 8006148:	20000cd8 	.word	0x20000cd8

0800614c <__malloc_unlock>:
 800614c:	4801      	ldr	r0, [pc, #4]	@ (8006154 <__malloc_unlock+0x8>)
 800614e:	f7ff befc 	b.w	8005f4a <__retarget_lock_release_recursive>
 8006152:	bf00      	nop
 8006154:	20000cd8 	.word	0x20000cd8

08006158 <_malloc_usable_size_r>:
 8006158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800615c:	1f18      	subs	r0, r3, #4
 800615e:	2b00      	cmp	r3, #0
 8006160:	bfbc      	itt	lt
 8006162:	580b      	ldrlt	r3, [r1, r0]
 8006164:	18c0      	addlt	r0, r0, r3
 8006166:	4770      	bx	lr

08006168 <_sbrk_r>:
 8006168:	b538      	push	{r3, r4, r5, lr}
 800616a:	4d06      	ldr	r5, [pc, #24]	@ (8006184 <_sbrk_r+0x1c>)
 800616c:	2300      	movs	r3, #0
 800616e:	4604      	mov	r4, r0
 8006170:	4608      	mov	r0, r1
 8006172:	602b      	str	r3, [r5, #0]
 8006174:	f7fc fa2e 	bl	80025d4 <_sbrk>
 8006178:	1c43      	adds	r3, r0, #1
 800617a:	d102      	bne.n	8006182 <_sbrk_r+0x1a>
 800617c:	682b      	ldr	r3, [r5, #0]
 800617e:	b103      	cbz	r3, 8006182 <_sbrk_r+0x1a>
 8006180:	6023      	str	r3, [r4, #0]
 8006182:	bd38      	pop	{r3, r4, r5, pc}
 8006184:	20000cd4 	.word	0x20000cd4

08006188 <_init>:
 8006188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800618a:	bf00      	nop
 800618c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800618e:	bc08      	pop	{r3}
 8006190:	469e      	mov	lr, r3
 8006192:	4770      	bx	lr

08006194 <_fini>:
 8006194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006196:	bf00      	nop
 8006198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800619a:	bc08      	pop	{r3}
 800619c:	469e      	mov	lr, r3
 800619e:	4770      	bx	lr
