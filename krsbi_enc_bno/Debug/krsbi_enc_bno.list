
krsbi_enc_bno.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6e8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  0800b888  0800b888  0000c888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be58  0800be58  0000d074  2**0
                  CONTENTS
  4 .ARM          00000008  0800be58  0800be58  0000ce58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be60  0800be60  0000d074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800be60  0800be60  0000ce60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800be68  0800be68  0000ce68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800be6c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f48  20000078  0800bee0  0000d078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000fc0  0800bee0  0000dfc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a6d4  00000000  00000000  0000d0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038a4  00000000  00000000  00027778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  0002b020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001055  00000000  00000000  0002c500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f95  00000000  00000000  0002d555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019046  00000000  00000000  000474ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b32b  00000000  00000000  00060530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb85b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006190  00000000  00000000  000fb8a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00101a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b870 	.word	0x0800b870

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800b870 	.word	0x0800b870

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_frsub>:
 8000acc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ad0:	e002      	b.n	8000ad8 <__addsf3>
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_fsub>:
 8000ad4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ad8 <__addsf3>:
 8000ad8:	0042      	lsls	r2, r0, #1
 8000ada:	bf1f      	itttt	ne
 8000adc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ae0:	ea92 0f03 	teqne	r2, r3
 8000ae4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aec:	d06a      	beq.n	8000bc4 <__addsf3+0xec>
 8000aee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000af2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af6:	bfc1      	itttt	gt
 8000af8:	18d2      	addgt	r2, r2, r3
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	4048      	eorgt	r0, r1
 8000afe:	4041      	eorgt	r1, r0
 8000b00:	bfb8      	it	lt
 8000b02:	425b      	neglt	r3, r3
 8000b04:	2b19      	cmp	r3, #25
 8000b06:	bf88      	it	hi
 8000b08:	4770      	bxhi	lr
 8000b0a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b12:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b16:	bf18      	it	ne
 8000b18:	4240      	negne	r0, r0
 8000b1a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b1e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b22:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b26:	bf18      	it	ne
 8000b28:	4249      	negne	r1, r1
 8000b2a:	ea92 0f03 	teq	r2, r3
 8000b2e:	d03f      	beq.n	8000bb0 <__addsf3+0xd8>
 8000b30:	f1a2 0201 	sub.w	r2, r2, #1
 8000b34:	fa41 fc03 	asr.w	ip, r1, r3
 8000b38:	eb10 000c 	adds.w	r0, r0, ip
 8000b3c:	f1c3 0320 	rsb	r3, r3, #32
 8000b40:	fa01 f103 	lsl.w	r1, r1, r3
 8000b44:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b48:	d502      	bpl.n	8000b50 <__addsf3+0x78>
 8000b4a:	4249      	negs	r1, r1
 8000b4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b50:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b54:	d313      	bcc.n	8000b7e <__addsf3+0xa6>
 8000b56:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b5a:	d306      	bcc.n	8000b6a <__addsf3+0x92>
 8000b5c:	0840      	lsrs	r0, r0, #1
 8000b5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b62:	f102 0201 	add.w	r2, r2, #1
 8000b66:	2afe      	cmp	r2, #254	@ 0xfe
 8000b68:	d251      	bcs.n	8000c0e <__addsf3+0x136>
 8000b6a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b72:	bf08      	it	eq
 8000b74:	f020 0001 	biceq.w	r0, r0, #1
 8000b78:	ea40 0003 	orr.w	r0, r0, r3
 8000b7c:	4770      	bx	lr
 8000b7e:	0049      	lsls	r1, r1, #1
 8000b80:	eb40 0000 	adc.w	r0, r0, r0
 8000b84:	3a01      	subs	r2, #1
 8000b86:	bf28      	it	cs
 8000b88:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b8c:	d2ed      	bcs.n	8000b6a <__addsf3+0x92>
 8000b8e:	fab0 fc80 	clz	ip, r0
 8000b92:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b96:	ebb2 020c 	subs.w	r2, r2, ip
 8000b9a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9e:	bfaa      	itet	ge
 8000ba0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba4:	4252      	neglt	r2, r2
 8000ba6:	4318      	orrge	r0, r3
 8000ba8:	bfbc      	itt	lt
 8000baa:	40d0      	lsrlt	r0, r2
 8000bac:	4318      	orrlt	r0, r3
 8000bae:	4770      	bx	lr
 8000bb0:	f092 0f00 	teq	r2, #0
 8000bb4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bb8:	bf06      	itte	eq
 8000bba:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bbe:	3201      	addeq	r2, #1
 8000bc0:	3b01      	subne	r3, #1
 8000bc2:	e7b5      	b.n	8000b30 <__addsf3+0x58>
 8000bc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bcc:	bf18      	it	ne
 8000bce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bd2:	d021      	beq.n	8000c18 <__addsf3+0x140>
 8000bd4:	ea92 0f03 	teq	r2, r3
 8000bd8:	d004      	beq.n	8000be4 <__addsf3+0x10c>
 8000bda:	f092 0f00 	teq	r2, #0
 8000bde:	bf08      	it	eq
 8000be0:	4608      	moveq	r0, r1
 8000be2:	4770      	bx	lr
 8000be4:	ea90 0f01 	teq	r0, r1
 8000be8:	bf1c      	itt	ne
 8000bea:	2000      	movne	r0, #0
 8000bec:	4770      	bxne	lr
 8000bee:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bf2:	d104      	bne.n	8000bfe <__addsf3+0x126>
 8000bf4:	0040      	lsls	r0, r0, #1
 8000bf6:	bf28      	it	cs
 8000bf8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bfc:	4770      	bx	lr
 8000bfe:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c02:	bf3c      	itt	cc
 8000c04:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c08:	4770      	bxcc	lr
 8000c0a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c0e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c16:	4770      	bx	lr
 8000c18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c1c:	bf16      	itet	ne
 8000c1e:	4608      	movne	r0, r1
 8000c20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c24:	4601      	movne	r1, r0
 8000c26:	0242      	lsls	r2, r0, #9
 8000c28:	bf06      	itte	eq
 8000c2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2e:	ea90 0f01 	teqeq	r0, r1
 8000c32:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_ui2f>:
 8000c38:	f04f 0300 	mov.w	r3, #0
 8000c3c:	e004      	b.n	8000c48 <__aeabi_i2f+0x8>
 8000c3e:	bf00      	nop

08000c40 <__aeabi_i2f>:
 8000c40:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c44:	bf48      	it	mi
 8000c46:	4240      	negmi	r0, r0
 8000c48:	ea5f 0c00 	movs.w	ip, r0
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c54:	4601      	mov	r1, r0
 8000c56:	f04f 0000 	mov.w	r0, #0
 8000c5a:	e01c      	b.n	8000c96 <__aeabi_l2f+0x2a>

08000c5c <__aeabi_ul2f>:
 8000c5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c60:	bf08      	it	eq
 8000c62:	4770      	bxeq	lr
 8000c64:	f04f 0300 	mov.w	r3, #0
 8000c68:	e00a      	b.n	8000c80 <__aeabi_l2f+0x14>
 8000c6a:	bf00      	nop

08000c6c <__aeabi_l2f>:
 8000c6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c70:	bf08      	it	eq
 8000c72:	4770      	bxeq	lr
 8000c74:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c78:	d502      	bpl.n	8000c80 <__aeabi_l2f+0x14>
 8000c7a:	4240      	negs	r0, r0
 8000c7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c80:	ea5f 0c01 	movs.w	ip, r1
 8000c84:	bf02      	ittt	eq
 8000c86:	4684      	moveq	ip, r0
 8000c88:	4601      	moveq	r1, r0
 8000c8a:	2000      	moveq	r0, #0
 8000c8c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c90:	bf08      	it	eq
 8000c92:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c96:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c9a:	fabc f28c 	clz	r2, ip
 8000c9e:	3a08      	subs	r2, #8
 8000ca0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca4:	db10      	blt.n	8000cc8 <__aeabi_l2f+0x5c>
 8000ca6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000caa:	4463      	add	r3, ip
 8000cac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cb0:	f1c2 0220 	rsb	r2, r2, #32
 8000cb4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cbc:	eb43 0002 	adc.w	r0, r3, r2
 8000cc0:	bf08      	it	eq
 8000cc2:	f020 0001 	biceq.w	r0, r0, #1
 8000cc6:	4770      	bx	lr
 8000cc8:	f102 0220 	add.w	r2, r2, #32
 8000ccc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cfc:	f000 b96a 	b.w	8000fd4 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9d08      	ldr	r5, [sp, #32]
 8000d1e:	460c      	mov	r4, r1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d14e      	bne.n	8000dc2 <__udivmoddi4+0xaa>
 8000d24:	4694      	mov	ip, r2
 8000d26:	458c      	cmp	ip, r1
 8000d28:	4686      	mov	lr, r0
 8000d2a:	fab2 f282 	clz	r2, r2
 8000d2e:	d962      	bls.n	8000df6 <__udivmoddi4+0xde>
 8000d30:	b14a      	cbz	r2, 8000d46 <__udivmoddi4+0x2e>
 8000d32:	f1c2 0320 	rsb	r3, r2, #32
 8000d36:	4091      	lsls	r1, r2
 8000d38:	fa20 f303 	lsr.w	r3, r0, r3
 8000d3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d40:	4319      	orrs	r1, r3
 8000d42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4a:	fa1f f68c 	uxth.w	r6, ip
 8000d4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d56:	fb07 1114 	mls	r1, r7, r4, r1
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb04 f106 	mul.w	r1, r4, r6
 8000d62:	4299      	cmp	r1, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x64>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d6e:	f080 8112 	bcs.w	8000f96 <__udivmoddi4+0x27e>
 8000d72:	4299      	cmp	r1, r3
 8000d74:	f240 810f 	bls.w	8000f96 <__udivmoddi4+0x27e>
 8000d78:	3c02      	subs	r4, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	1a59      	subs	r1, r3, r1
 8000d7e:	fa1f f38e 	uxth.w	r3, lr
 8000d82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d86:	fb07 1110 	mls	r1, r7, r0, r1
 8000d8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8e:	fb00 f606 	mul.w	r6, r0, r6
 8000d92:	429e      	cmp	r6, r3
 8000d94:	d90a      	bls.n	8000dac <__udivmoddi4+0x94>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d9e:	f080 80fc 	bcs.w	8000f9a <__udivmoddi4+0x282>
 8000da2:	429e      	cmp	r6, r3
 8000da4:	f240 80f9 	bls.w	8000f9a <__udivmoddi4+0x282>
 8000da8:	4463      	add	r3, ip
 8000daa:	3802      	subs	r0, #2
 8000dac:	1b9b      	subs	r3, r3, r6
 8000dae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000db2:	2100      	movs	r1, #0
 8000db4:	b11d      	cbz	r5, 8000dbe <__udivmoddi4+0xa6>
 8000db6:	40d3      	lsrs	r3, r2
 8000db8:	2200      	movs	r2, #0
 8000dba:	e9c5 3200 	strd	r3, r2, [r5]
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d905      	bls.n	8000dd2 <__udivmoddi4+0xba>
 8000dc6:	b10d      	cbz	r5, 8000dcc <__udivmoddi4+0xb4>
 8000dc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4608      	mov	r0, r1
 8000dd0:	e7f5      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000dd2:	fab3 f183 	clz	r1, r3
 8000dd6:	2900      	cmp	r1, #0
 8000dd8:	d146      	bne.n	8000e68 <__udivmoddi4+0x150>
 8000dda:	42a3      	cmp	r3, r4
 8000ddc:	d302      	bcc.n	8000de4 <__udivmoddi4+0xcc>
 8000dde:	4290      	cmp	r0, r2
 8000de0:	f0c0 80f0 	bcc.w	8000fc4 <__udivmoddi4+0x2ac>
 8000de4:	1a86      	subs	r6, r0, r2
 8000de6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dea:	2001      	movs	r0, #1
 8000dec:	2d00      	cmp	r5, #0
 8000dee:	d0e6      	beq.n	8000dbe <__udivmoddi4+0xa6>
 8000df0:	e9c5 6300 	strd	r6, r3, [r5]
 8000df4:	e7e3      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000df6:	2a00      	cmp	r2, #0
 8000df8:	f040 8090 	bne.w	8000f1c <__udivmoddi4+0x204>
 8000dfc:	eba1 040c 	sub.w	r4, r1, ip
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa1f f78c 	uxth.w	r7, ip
 8000e08:	2101      	movs	r1, #1
 8000e0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e12:	fb08 4416 	mls	r4, r8, r6, r4
 8000e16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e1a:	fb07 f006 	mul.w	r0, r7, r6
 8000e1e:	4298      	cmp	r0, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x11c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x11a>
 8000e2c:	4298      	cmp	r0, r3
 8000e2e:	f200 80cd 	bhi.w	8000fcc <__udivmoddi4+0x2b4>
 8000e32:	4626      	mov	r6, r4
 8000e34:	1a1c      	subs	r4, r3, r0
 8000e36:	fa1f f38e 	uxth.w	r3, lr
 8000e3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb00 f707 	mul.w	r7, r0, r7
 8000e4a:	429f      	cmp	r7, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x148>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x146>
 8000e58:	429f      	cmp	r7, r3
 8000e5a:	f200 80b0 	bhi.w	8000fbe <__udivmoddi4+0x2a6>
 8000e5e:	4620      	mov	r0, r4
 8000e60:	1bdb      	subs	r3, r3, r7
 8000e62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e66:	e7a5      	b.n	8000db4 <__udivmoddi4+0x9c>
 8000e68:	f1c1 0620 	rsb	r6, r1, #32
 8000e6c:	408b      	lsls	r3, r1
 8000e6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e72:	431f      	orrs	r7, r3
 8000e74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e78:	fa04 f301 	lsl.w	r3, r4, r1
 8000e7c:	ea43 030c 	orr.w	r3, r3, ip
 8000e80:	40f4      	lsrs	r4, r6
 8000e82:	fa00 f801 	lsl.w	r8, r0, r1
 8000e86:	0c38      	lsrs	r0, r7, #16
 8000e88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e90:	fa1f fc87 	uxth.w	ip, r7
 8000e94:	fb00 441e 	mls	r4, r0, lr, r4
 8000e98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000ea0:	45a1      	cmp	r9, r4
 8000ea2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ea6:	d90a      	bls.n	8000ebe <__udivmoddi4+0x1a6>
 8000ea8:	193c      	adds	r4, r7, r4
 8000eaa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eae:	f080 8084 	bcs.w	8000fba <__udivmoddi4+0x2a2>
 8000eb2:	45a1      	cmp	r9, r4
 8000eb4:	f240 8081 	bls.w	8000fba <__udivmoddi4+0x2a2>
 8000eb8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ebc:	443c      	add	r4, r7
 8000ebe:	eba4 0409 	sub.w	r4, r4, r9
 8000ec2:	fa1f f983 	uxth.w	r9, r3
 8000ec6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eca:	fb00 4413 	mls	r4, r0, r3, r4
 8000ece:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ed6:	45a4      	cmp	ip, r4
 8000ed8:	d907      	bls.n	8000eea <__udivmoddi4+0x1d2>
 8000eda:	193c      	adds	r4, r7, r4
 8000edc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ee0:	d267      	bcs.n	8000fb2 <__udivmoddi4+0x29a>
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d965      	bls.n	8000fb2 <__udivmoddi4+0x29a>
 8000ee6:	3b02      	subs	r3, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eee:	fba0 9302 	umull	r9, r3, r0, r2
 8000ef2:	eba4 040c 	sub.w	r4, r4, ip
 8000ef6:	429c      	cmp	r4, r3
 8000ef8:	46ce      	mov	lr, r9
 8000efa:	469c      	mov	ip, r3
 8000efc:	d351      	bcc.n	8000fa2 <__udivmoddi4+0x28a>
 8000efe:	d04e      	beq.n	8000f9e <__udivmoddi4+0x286>
 8000f00:	b155      	cbz	r5, 8000f18 <__udivmoddi4+0x200>
 8000f02:	ebb8 030e 	subs.w	r3, r8, lr
 8000f06:	eb64 040c 	sbc.w	r4, r4, ip
 8000f0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f0e:	40cb      	lsrs	r3, r1
 8000f10:	431e      	orrs	r6, r3
 8000f12:	40cc      	lsrs	r4, r1
 8000f14:	e9c5 6400 	strd	r6, r4, [r5]
 8000f18:	2100      	movs	r1, #0
 8000f1a:	e750      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000f1c:	f1c2 0320 	rsb	r3, r2, #32
 8000f20:	fa20 f103 	lsr.w	r1, r0, r3
 8000f24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f28:	fa24 f303 	lsr.w	r3, r4, r3
 8000f2c:	4094      	lsls	r4, r2
 8000f2e:	430c      	orrs	r4, r1
 8000f30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f38:	fa1f f78c 	uxth.w	r7, ip
 8000f3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f40:	fb08 3110 	mls	r1, r8, r0, r3
 8000f44:	0c23      	lsrs	r3, r4, #16
 8000f46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f4a:	fb00 f107 	mul.w	r1, r0, r7
 8000f4e:	4299      	cmp	r1, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x24c>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f5a:	d22c      	bcs.n	8000fb6 <__udivmoddi4+0x29e>
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	d92a      	bls.n	8000fb6 <__udivmoddi4+0x29e>
 8000f60:	3802      	subs	r0, #2
 8000f62:	4463      	add	r3, ip
 8000f64:	1a5b      	subs	r3, r3, r1
 8000f66:	b2a4      	uxth	r4, r4
 8000f68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f74:	fb01 f307 	mul.w	r3, r1, r7
 8000f78:	42a3      	cmp	r3, r4
 8000f7a:	d908      	bls.n	8000f8e <__udivmoddi4+0x276>
 8000f7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f80:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f84:	d213      	bcs.n	8000fae <__udivmoddi4+0x296>
 8000f86:	42a3      	cmp	r3, r4
 8000f88:	d911      	bls.n	8000fae <__udivmoddi4+0x296>
 8000f8a:	3902      	subs	r1, #2
 8000f8c:	4464      	add	r4, ip
 8000f8e:	1ae4      	subs	r4, r4, r3
 8000f90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f94:	e739      	b.n	8000e0a <__udivmoddi4+0xf2>
 8000f96:	4604      	mov	r4, r0
 8000f98:	e6f0      	b.n	8000d7c <__udivmoddi4+0x64>
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	e706      	b.n	8000dac <__udivmoddi4+0x94>
 8000f9e:	45c8      	cmp	r8, r9
 8000fa0:	d2ae      	bcs.n	8000f00 <__udivmoddi4+0x1e8>
 8000fa2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fa6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000faa:	3801      	subs	r0, #1
 8000fac:	e7a8      	b.n	8000f00 <__udivmoddi4+0x1e8>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	e7ed      	b.n	8000f8e <__udivmoddi4+0x276>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	e799      	b.n	8000eea <__udivmoddi4+0x1d2>
 8000fb6:	4630      	mov	r0, r6
 8000fb8:	e7d4      	b.n	8000f64 <__udivmoddi4+0x24c>
 8000fba:	46d6      	mov	lr, sl
 8000fbc:	e77f      	b.n	8000ebe <__udivmoddi4+0x1a6>
 8000fbe:	4463      	add	r3, ip
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	e74d      	b.n	8000e60 <__udivmoddi4+0x148>
 8000fc4:	4606      	mov	r6, r0
 8000fc6:	4623      	mov	r3, r4
 8000fc8:	4608      	mov	r0, r1
 8000fca:	e70f      	b.n	8000dec <__udivmoddi4+0xd4>
 8000fcc:	3e02      	subs	r6, #2
 8000fce:	4463      	add	r3, ip
 8000fd0:	e730      	b.n	8000e34 <__udivmoddi4+0x11c>
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_idiv0>:
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	0a5a      	lsrs	r2, r3, #9
 8000fe8:	490f      	ldr	r1, [pc, #60]	@ (8001028 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000fea:	fba1 1202 	umull	r1, r2, r1, r2
 8000fee:	09d2      	lsrs	r2, r2, #7
 8000ff0:	490e      	ldr	r1, [pc, #56]	@ (800102c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000ff2:	fb01 f202 	mul.w	r2, r1, r2
 8000ff6:	1a9b      	subs	r3, r3, r2
 8000ff8:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	0a5b      	lsrs	r3, r3, #9
 8001000:	4a09      	ldr	r2, [pc, #36]	@ (8001028 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8001002:	fba2 2303 	umull	r2, r3, r2, r3
 8001006:	09db      	lsrs	r3, r3, #7
 8001008:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	441a      	add	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	601a      	str	r2, [r3, #0]
}
 800101c:	bf00      	nop
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	00044b83 	.word	0x00044b83
 800102c:	3b9aca00 	.word	0x3b9aca00

08001030 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	4619      	mov	r1, r3
 800103e:	2007      	movs	r0, #7
 8001040:	f000 faf4 	bl	800162c <bno055_writeData>
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	4619      	mov	r1, r3
 800105a:	203d      	movs	r0, #61	@ 0x3d
 800105c:	f000 fae6 	bl	800162c <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d103      	bne.n	800106e <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8001066:	2013      	movs	r0, #19
 8001068:	f000 fad4 	bl	8001614 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 800106c:	e002      	b.n	8001074 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 800106e:	2007      	movs	r0, #7
 8001070:	f000 fad0 	bl	8001614 <bno055_delay>
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001080:	2000      	movs	r0, #0
 8001082:	f7ff ffe3 	bl	800104c <bno055_setOperationMode>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}

0800108a <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 800108a:	b580      	push	{r7, lr}
 800108c:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 800108e:	200c      	movs	r0, #12
 8001090:	f7ff ffdc 	bl	800104c <bno055_setOperationMode>
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}

08001098 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 800109c:	2120      	movs	r1, #32
 800109e:	203f      	movs	r0, #63	@ 0x3f
 80010a0:	f000 fac4 	bl	800162c <bno055_writeData>
  bno055_delay(700);
 80010a4:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80010a8:	f000 fab4 	bl	8001614 <bno055_delay>
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
  bno055_reset();
 80010b6:	f7ff ffef 	bl	8001098 <bno055_reset>

  uint8_t id = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 80010be:	1dfb      	adds	r3, r7, #7
 80010c0:	2201      	movs	r2, #1
 80010c2:	4619      	mov	r1, r3
 80010c4:	2000      	movs	r0, #0
 80010c6:	f000 fb9d 	bl	8001804 <bno055_readData>
  if (id != BNO055_ID) {
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	2ba0      	cmp	r3, #160	@ 0xa0
 80010ce:	d004      	beq.n	80010da <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	4619      	mov	r1, r3
 80010d4:	4809      	ldr	r0, [pc, #36]	@ (80010fc <bno055_setup+0x4c>)
 80010d6:	f009 fce9 	bl	800aaac <iprintf>
  }
  bno055_setPage(0);
 80010da:	2000      	movs	r0, #0
 80010dc:	f7ff ffa8 	bl	8001030 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80010e0:	2100      	movs	r1, #0
 80010e2:	203f      	movs	r0, #63	@ 0x3f
 80010e4:	f000 faa2 	bl	800162c <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 80010e8:	f7ff ffc8 	bl	800107c <bno055_setOperationModeConfig>
  bno055_delay(10);
 80010ec:	200a      	movs	r0, #10
 80010ee:	f000 fa91 	bl	8001614 <bno055_delay>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	0800b888 	.word	0x0800b888

08001100 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8001100:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001104:	b09e      	sub	sp, #120	@ 0x78
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 800110e:	2000      	movs	r0, #0
 8001110:	f7ff ff8e 	bl	8001030 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8001114:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001118:	2b20      	cmp	r3, #32
 800111a:	d108      	bne.n	800112e <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 800111c:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001120:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001124:	2208      	movs	r2, #8
 8001126:	4618      	mov	r0, r3
 8001128:	f000 fb6c 	bl	8001804 <bno055_readData>
 800112c:	e007      	b.n	800113e <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 800112e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001132:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001136:	2206      	movs	r2, #6
 8001138:	4618      	mov	r0, r3
 800113a:	f000 fb63 	bl	8001804 <bno055_readData>

  double scale = 1;
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	4b8b      	ldr	r3, [pc, #556]	@ (8001370 <bno055_getVector+0x270>)
 8001144:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8001148:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800114c:	2b0e      	cmp	r3, #14
 800114e:	d109      	bne.n	8001164 <bno055_getVector+0x64>
    scale = magScale;
 8001150:	4b88      	ldr	r3, [pc, #544]	@ (8001374 <bno055_getVector+0x274>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff f9dd 	bl	8000514 <__aeabi_ui2d>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001162:	e03e      	b.n	80011e2 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8001164:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001168:	2b08      	cmp	r3, #8
 800116a:	d007      	beq.n	800117c <bno055_getVector+0x7c>
 800116c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001170:	2b28      	cmp	r3, #40	@ 0x28
 8001172:	d003      	beq.n	800117c <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8001174:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001178:	2b2e      	cmp	r3, #46	@ 0x2e
 800117a:	d109      	bne.n	8001190 <bno055_getVector+0x90>
    scale = accelScale;
 800117c:	4b7e      	ldr	r3, [pc, #504]	@ (8001378 <bno055_getVector+0x278>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff f9c7 	bl	8000514 <__aeabi_ui2d>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 800118e:	e028      	b.n	80011e2 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8001190:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001194:	2b14      	cmp	r3, #20
 8001196:	d109      	bne.n	80011ac <bno055_getVector+0xac>
    scale = angularRateScale;
 8001198:	4b78      	ldr	r3, [pc, #480]	@ (800137c <bno055_getVector+0x27c>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f9b9 	bl	8000514 <__aeabi_ui2d>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 80011aa:	e01a      	b.n	80011e2 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 80011ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011b0:	2b1a      	cmp	r3, #26
 80011b2:	d109      	bne.n	80011c8 <bno055_getVector+0xc8>
    scale = eulerScale;
 80011b4:	4b72      	ldr	r3, [pc, #456]	@ (8001380 <bno055_getVector+0x280>)
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff f9ab 	bl	8000514 <__aeabi_ui2d>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 80011c6:	e00c      	b.n	80011e2 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 80011c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011cc:	2b20      	cmp	r3, #32
 80011ce:	d108      	bne.n	80011e2 <bno055_getVector+0xe2>
    scale = quaScale;
 80011d0:	4b6c      	ldr	r3, [pc, #432]	@ (8001384 <bno055_getVector+0x284>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff f99d 	bl	8000514 <__aeabi_ui2d>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 80011e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011e6:	2220      	movs	r2, #32
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f009 fda6 	bl	800ad3c <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 80011f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011f4:	2b20      	cmp	r3, #32
 80011f6:	d150      	bne.n	800129a <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80011f8:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80011fc:	021b      	lsls	r3, r3, #8
 80011fe:	b21a      	sxth	r2, r3
 8001200:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001204:	b21b      	sxth	r3, r3
 8001206:	4313      	orrs	r3, r2
 8001208:	b21b      	sxth	r3, r3
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff f992 	bl	8000534 <__aeabi_i2d>
 8001210:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001214:	f7ff fb22 	bl	800085c <__aeabi_ddiv>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001220:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	b21a      	sxth	r2, r3
 8001228:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800122c:	b21b      	sxth	r3, r3
 800122e:	4313      	orrs	r3, r2
 8001230:	b21b      	sxth	r3, r3
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f97e 	bl	8000534 <__aeabi_i2d>
 8001238:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800123c:	f7ff fb0e 	bl	800085c <__aeabi_ddiv>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001248:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	b21a      	sxth	r2, r3
 8001250:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001254:	b21b      	sxth	r3, r3
 8001256:	4313      	orrs	r3, r2
 8001258:	b21b      	sxth	r3, r3
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f96a 	bl	8000534 <__aeabi_i2d>
 8001260:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001264:	f7ff fafa 	bl	800085c <__aeabi_ddiv>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8001270:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001274:	021b      	lsls	r3, r3, #8
 8001276:	b21a      	sxth	r2, r3
 8001278:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800127c:	b21b      	sxth	r3, r3
 800127e:	4313      	orrs	r3, r2
 8001280:	b21b      	sxth	r3, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f956 	bl	8000534 <__aeabi_i2d>
 8001288:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800128c:	f7ff fae6 	bl	800085c <__aeabi_ddiv>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8001298:	e03b      	b.n	8001312 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800129a:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	4313      	orrs	r3, r2
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff f941 	bl	8000534 <__aeabi_i2d>
 80012b2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80012b6:	f7ff fad1 	bl	800085c <__aeabi_ddiv>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80012c2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80012c6:	021b      	lsls	r3, r3, #8
 80012c8:	b21a      	sxth	r2, r3
 80012ca:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b21b      	sxth	r3, r3
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff f92d 	bl	8000534 <__aeabi_i2d>
 80012da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80012de:	f7ff fabd 	bl	800085c <__aeabi_ddiv>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80012ea:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80012ee:	021b      	lsls	r3, r3, #8
 80012f0:	b21a      	sxth	r2, r3
 80012f2:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80012f6:	b21b      	sxth	r3, r3
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f919 	bl	8000534 <__aeabi_i2d>
 8001302:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001306:	f7ff faa9 	bl	800085c <__aeabi_ddiv>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 8001312:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8001316:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 800131a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800131c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800131e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001322:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001326:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800132a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800132e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001332:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001336:	ec49 8b14 	vmov	d4, r8, r9
 800133a:	ec45 4b15 	vmov	d5, r4, r5
 800133e:	ec41 0b16 	vmov	d6, r0, r1
 8001342:	ec43 2b17 	vmov	d7, r2, r3
}
 8001346:	eeb0 0a44 	vmov.f32	s0, s8
 800134a:	eef0 0a64 	vmov.f32	s1, s9
 800134e:	eeb0 1a45 	vmov.f32	s2, s10
 8001352:	eef0 1a65 	vmov.f32	s3, s11
 8001356:	eeb0 2a46 	vmov.f32	s4, s12
 800135a:	eef0 2a66 	vmov.f32	s5, s13
 800135e:	eeb0 3a47 	vmov.f32	s6, s14
 8001362:	eef0 3a67 	vmov.f32	s7, s15
 8001366:	3778      	adds	r7, #120	@ 0x78
 8001368:	46bd      	mov	sp, r7
 800136a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800136e:	bf00      	nop
 8001370:	3ff00000 	.word	0x3ff00000
 8001374:	20000006 	.word	0x20000006
 8001378:	20000000 	.word	0x20000000
 800137c:	20000002 	.word	0x20000002
 8001380:	20000004 	.word	0x20000004
 8001384:	20000008 	.word	0x20000008

08001388 <bno055_getVectorMagnetometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
}
bno055_vector_t bno055_getVectorMagnetometer() {
 8001388:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800138c:	b090      	sub	sp, #64	@ 0x40
 800138e:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
 8001390:	200e      	movs	r0, #14
 8001392:	f7ff feb5 	bl	8001100 <bno055_getVector>
 8001396:	eeb0 4a40 	vmov.f32	s8, s0
 800139a:	eef0 4a60 	vmov.f32	s9, s1
 800139e:	eeb0 5a41 	vmov.f32	s10, s2
 80013a2:	eef0 5a61 	vmov.f32	s11, s3
 80013a6:	eeb0 6a42 	vmov.f32	s12, s4
 80013aa:	eef0 6a62 	vmov.f32	s13, s5
 80013ae:	eeb0 7a43 	vmov.f32	s14, s6
 80013b2:	eef0 7a63 	vmov.f32	s15, s7
 80013b6:	ed87 4b08 	vstr	d4, [r7, #32]
 80013ba:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 80013be:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 80013c2:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 80013c6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80013ca:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80013ce:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80013d2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80013d6:	ec49 8b14 	vmov	d4, r8, r9
 80013da:	ec45 4b15 	vmov	d5, r4, r5
 80013de:	ec41 0b16 	vmov	d6, r0, r1
 80013e2:	ec43 2b17 	vmov	d7, r2, r3
}
 80013e6:	eeb0 0a44 	vmov.f32	s0, s8
 80013ea:	eef0 0a64 	vmov.f32	s1, s9
 80013ee:	eeb0 1a45 	vmov.f32	s2, s10
 80013f2:	eef0 1a65 	vmov.f32	s3, s11
 80013f6:	eeb0 2a46 	vmov.f32	s4, s12
 80013fa:	eef0 2a66 	vmov.f32	s5, s13
 80013fe:	eeb0 3a47 	vmov.f32	s6, s14
 8001402:	eef0 3a67 	vmov.f32	s7, s15
 8001406:	3740      	adds	r7, #64	@ 0x40
 8001408:	46bd      	mov	sp, r7
 800140a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001410 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	4b1f      	ldr	r3, [pc, #124]	@ (8001498 <MX_DMA_Init+0x88>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	4a1e      	ldr	r2, [pc, #120]	@ (8001498 <MX_DMA_Init+0x88>)
 8001420:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001424:	6313      	str	r3, [r2, #48]	@ 0x30
 8001426:	4b1c      	ldr	r3, [pc, #112]	@ (8001498 <MX_DMA_Init+0x88>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	4b18      	ldr	r3, [pc, #96]	@ (8001498 <MX_DMA_Init+0x88>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	4a17      	ldr	r2, [pc, #92]	@ (8001498 <MX_DMA_Init+0x88>)
 800143c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001440:	6313      	str	r3, [r2, #48]	@ 0x30
 8001442:	4b15      	ldr	r3, [pc, #84]	@ (8001498 <MX_DMA_Init+0x88>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	2010      	movs	r0, #16
 8001454:	f005 f8a5 	bl	80065a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001458:	2010      	movs	r0, #16
 800145a:	f005 f8be 	bl	80065da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	2011      	movs	r0, #17
 8001464:	f005 f89d 	bl	80065a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001468:	2011      	movs	r0, #17
 800146a:	f005 f8b6 	bl	80065da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2100      	movs	r1, #0
 8001472:	203a      	movs	r0, #58	@ 0x3a
 8001474:	f005 f895 	bl	80065a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001478:	203a      	movs	r0, #58	@ 0x3a
 800147a:	f005 f8ae 	bl	80065da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2100      	movs	r1, #0
 8001482:	2046      	movs	r0, #70	@ 0x46
 8001484:	f005 f88d 	bl	80065a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001488:	2046      	movs	r0, #70	@ 0x46
 800148a:	f005 f8a6 	bl	80065da <HAL_NVIC_EnableIRQ>

}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800

0800149c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	4b17      	ldr	r3, [pc, #92]	@ (8001504 <MX_GPIO_Init+0x68>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	4a16      	ldr	r2, [pc, #88]	@ (8001504 <MX_GPIO_Init+0x68>)
 80014ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b2:	4b14      	ldr	r3, [pc, #80]	@ (8001504 <MX_GPIO_Init+0x68>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	4b10      	ldr	r3, [pc, #64]	@ (8001504 <MX_GPIO_Init+0x68>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001504 <MX_GPIO_Init+0x68>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001504 <MX_GPIO_Init+0x68>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <MX_GPIO_Init+0x68>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	4a08      	ldr	r2, [pc, #32]	@ (8001504 <MX_GPIO_Init+0x68>)
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ea:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <MX_GPIO_Init+0x68>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]

}
 80014f6:	bf00      	nop
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800

08001508 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800150c:	4b12      	ldr	r3, [pc, #72]	@ (8001558 <MX_I2C1_Init+0x50>)
 800150e:	4a13      	ldr	r2, [pc, #76]	@ (800155c <MX_I2C1_Init+0x54>)
 8001510:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001512:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <MX_I2C1_Init+0x50>)
 8001514:	4a12      	ldr	r2, [pc, #72]	@ (8001560 <MX_I2C1_Init+0x58>)
 8001516:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001518:	4b0f      	ldr	r3, [pc, #60]	@ (8001558 <MX_I2C1_Init+0x50>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800151e:	4b0e      	ldr	r3, [pc, #56]	@ (8001558 <MX_I2C1_Init+0x50>)
 8001520:	2200      	movs	r2, #0
 8001522:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001524:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <MX_I2C1_Init+0x50>)
 8001526:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800152a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800152c:	4b0a      	ldr	r3, [pc, #40]	@ (8001558 <MX_I2C1_Init+0x50>)
 800152e:	2200      	movs	r2, #0
 8001530:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001532:	4b09      	ldr	r3, [pc, #36]	@ (8001558 <MX_I2C1_Init+0x50>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001538:	4b07      	ldr	r3, [pc, #28]	@ (8001558 <MX_I2C1_Init+0x50>)
 800153a:	2200      	movs	r2, #0
 800153c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800153e:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <MX_I2C1_Init+0x50>)
 8001540:	2200      	movs	r2, #0
 8001542:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001544:	4804      	ldr	r0, [pc, #16]	@ (8001558 <MX_I2C1_Init+0x50>)
 8001546:	f005 fde9 	bl	800711c <HAL_I2C_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001550:	f000 fb1c 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000094 	.word	0x20000094
 800155c:	40005400 	.word	0x40005400
 8001560:	000186a0 	.word	0x000186a0

08001564 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	@ 0x28
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a19      	ldr	r2, [pc, #100]	@ (80015e8 <HAL_I2C_MspInit+0x84>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d12b      	bne.n	80015de <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
 800158a:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <HAL_I2C_MspInit+0x88>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	4a17      	ldr	r2, [pc, #92]	@ (80015ec <HAL_I2C_MspInit+0x88>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	6313      	str	r3, [r2, #48]	@ 0x30
 8001596:	4b15      	ldr	r3, [pc, #84]	@ (80015ec <HAL_I2C_MspInit+0x88>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015a2:	23c0      	movs	r3, #192	@ 0xc0
 80015a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a6:	2312      	movs	r3, #18
 80015a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ae:	2303      	movs	r3, #3
 80015b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015b2:	2304      	movs	r3, #4
 80015b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	4619      	mov	r1, r3
 80015bc:	480c      	ldr	r0, [pc, #48]	@ (80015f0 <HAL_I2C_MspInit+0x8c>)
 80015be:	f005 fc29 	bl	8006e14 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <HAL_I2C_MspInit+0x88>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	4a08      	ldr	r2, [pc, #32]	@ (80015ec <HAL_I2C_MspInit+0x88>)
 80015cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015d2:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <HAL_I2C_MspInit+0x88>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80015de:	bf00      	nop
 80015e0:	3728      	adds	r7, #40	@ 0x28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40005400 	.word	0x40005400
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020400 	.word	0x40020400

080015f4 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 80015fc:	4a04      	ldr	r2, [pc, #16]	@ (8001610 <bno055_assignI2C+0x1c>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6013      	str	r3, [r2, #0]
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	200000e8 	.word	0x200000e8

08001614 <bno055_delay>:

void bno055_delay(int time) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4618      	mov	r0, r3
 8001620:	f004 fec0 	bl	80063a4 <HAL_Delay>
#endif
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af02      	add	r7, sp, #8
 8001632:	4603      	mov	r3, r0
 8001634:	460a      	mov	r2, r1
 8001636:	71fb      	strb	r3, [r7, #7]
 8001638:	4613      	mov	r3, r2
 800163a:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	733b      	strb	r3, [r7, #12]
 8001640:	79bb      	ldrb	r3, [r7, #6]
 8001642:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001644:	4b5a      	ldr	r3, [pc, #360]	@ (80017b0 <bno055_writeData+0x184>)
 8001646:	6818      	ldr	r0, [r3, #0]
 8001648:	f107 020c 	add.w	r2, r7, #12
 800164c:	230a      	movs	r3, #10
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	2302      	movs	r3, #2
 8001652:	2150      	movs	r1, #80	@ 0x50
 8001654:	f005 fea6 	bl	80073a4 <HAL_I2C_Master_Transmit>
 8001658:	4603      	mov	r3, r0
 800165a:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 800165c:	7dfb      	ldrb	r3, [r7, #23]
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 80a0 	beq.w	80017a4 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8001664:	7dfb      	ldrb	r3, [r7, #23]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d103      	bne.n	8001672 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 800166a:	4852      	ldr	r0, [pc, #328]	@ (80017b4 <bno055_writeData+0x188>)
 800166c:	f009 fa86 	bl	800ab7c <puts>
 8001670:	e012      	b.n	8001698 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8001672:	7dfb      	ldrb	r3, [r7, #23]
 8001674:	2b03      	cmp	r3, #3
 8001676:	d103      	bne.n	8001680 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001678:	484f      	ldr	r0, [pc, #316]	@ (80017b8 <bno055_writeData+0x18c>)
 800167a:	f009 fa7f 	bl	800ab7c <puts>
 800167e:	e00b      	b.n	8001698 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001680:	7dfb      	ldrb	r3, [r7, #23]
 8001682:	2b02      	cmp	r3, #2
 8001684:	d103      	bne.n	800168e <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8001686:	484d      	ldr	r0, [pc, #308]	@ (80017bc <bno055_writeData+0x190>)
 8001688:	f009 fa78 	bl	800ab7c <puts>
 800168c:	e004      	b.n	8001698 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 800168e:	7dfb      	ldrb	r3, [r7, #23]
 8001690:	4619      	mov	r1, r3
 8001692:	484b      	ldr	r0, [pc, #300]	@ (80017c0 <bno055_writeData+0x194>)
 8001694:	f009 fa0a 	bl	800aaac <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001698:	4b45      	ldr	r3, [pc, #276]	@ (80017b0 <bno055_writeData+0x184>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f006 f9bf 	bl	8007a20 <HAL_I2C_GetError>
 80016a2:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d07e      	beq.n	80017a8 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d103      	bne.n	80016b8 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 80016b0:	4844      	ldr	r0, [pc, #272]	@ (80017c4 <bno055_writeData+0x198>)
 80016b2:	f009 fa63 	bl	800ab7c <puts>
 80016b6:	e021      	b.n	80016fc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d103      	bne.n	80016c6 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 80016be:	4842      	ldr	r0, [pc, #264]	@ (80017c8 <bno055_writeData+0x19c>)
 80016c0:	f009 fa5c 	bl	800ab7c <puts>
 80016c4:	e01a      	b.n	80016fc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	2b04      	cmp	r3, #4
 80016ca:	d103      	bne.n	80016d4 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 80016cc:	483f      	ldr	r0, [pc, #252]	@ (80017cc <bno055_writeData+0x1a0>)
 80016ce:	f009 fa55 	bl	800ab7c <puts>
 80016d2:	e013      	b.n	80016fc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	2b08      	cmp	r3, #8
 80016d8:	d103      	bne.n	80016e2 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 80016da:	483d      	ldr	r0, [pc, #244]	@ (80017d0 <bno055_writeData+0x1a4>)
 80016dc:	f009 fa4e 	bl	800ab7c <puts>
 80016e0:	e00c      	b.n	80016fc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	2b10      	cmp	r3, #16
 80016e6:	d103      	bne.n	80016f0 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 80016e8:	483a      	ldr	r0, [pc, #232]	@ (80017d4 <bno055_writeData+0x1a8>)
 80016ea:	f009 fa47 	bl	800ab7c <puts>
 80016ee:	e005      	b.n	80016fc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	2b20      	cmp	r3, #32
 80016f4:	d102      	bne.n	80016fc <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 80016f6:	4838      	ldr	r0, [pc, #224]	@ (80017d8 <bno055_writeData+0x1ac>)
 80016f8:	f009 fa40 	bl	800ab7c <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 80016fc:	4b2c      	ldr	r3, [pc, #176]	@ (80017b0 <bno055_writeData+0x184>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f006 f97f 	bl	8007a04 <HAL_I2C_GetState>
 8001706:	4603      	mov	r3, r0
 8001708:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d103      	bne.n	8001718 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001710:	4832      	ldr	r0, [pc, #200]	@ (80017dc <bno055_writeData+0x1b0>)
 8001712:	f009 fa33 	bl	800ab7c <puts>
 8001716:	e048      	b.n	80017aa <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	2b20      	cmp	r3, #32
 800171c:	d103      	bne.n	8001726 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 800171e:	482f      	ldr	r0, [pc, #188]	@ (80017dc <bno055_writeData+0x1b0>)
 8001720:	f009 fa2c 	bl	800ab7c <puts>
 8001724:	e041      	b.n	80017aa <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	2b24      	cmp	r3, #36	@ 0x24
 800172a:	d103      	bne.n	8001734 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 800172c:	482c      	ldr	r0, [pc, #176]	@ (80017e0 <bno055_writeData+0x1b4>)
 800172e:	f009 fa25 	bl	800ab7c <puts>
 8001732:	e03a      	b.n	80017aa <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	2b21      	cmp	r3, #33	@ 0x21
 8001738:	d103      	bne.n	8001742 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 800173a:	482a      	ldr	r0, [pc, #168]	@ (80017e4 <bno055_writeData+0x1b8>)
 800173c:	f009 fa1e 	bl	800ab7c <puts>
 8001740:	e033      	b.n	80017aa <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	2b22      	cmp	r3, #34	@ 0x22
 8001746:	d103      	bne.n	8001750 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001748:	4827      	ldr	r0, [pc, #156]	@ (80017e8 <bno055_writeData+0x1bc>)
 800174a:	f009 fa17 	bl	800ab7c <puts>
 800174e:	e02c      	b.n	80017aa <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	2b28      	cmp	r3, #40	@ 0x28
 8001754:	d103      	bne.n	800175e <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8001756:	4825      	ldr	r0, [pc, #148]	@ (80017ec <bno055_writeData+0x1c0>)
 8001758:	f009 fa10 	bl	800ab7c <puts>
 800175c:	e025      	b.n	80017aa <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	2b29      	cmp	r3, #41	@ 0x29
 8001762:	d103      	bne.n	800176c <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001764:	4822      	ldr	r0, [pc, #136]	@ (80017f0 <bno055_writeData+0x1c4>)
 8001766:	f009 fa09 	bl	800ab7c <puts>
 800176a:	e01e      	b.n	80017aa <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001770:	d103      	bne.n	800177a <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001772:	4820      	ldr	r0, [pc, #128]	@ (80017f4 <bno055_writeData+0x1c8>)
 8001774:	f009 fa02 	bl	800ab7c <puts>
 8001778:	e017      	b.n	80017aa <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	2b60      	cmp	r3, #96	@ 0x60
 800177e:	d103      	bne.n	8001788 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001780:	481d      	ldr	r0, [pc, #116]	@ (80017f8 <bno055_writeData+0x1cc>)
 8001782:	f009 f9fb 	bl	800ab7c <puts>
 8001786:	e010      	b.n	80017aa <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	2ba0      	cmp	r3, #160	@ 0xa0
 800178c:	d103      	bne.n	8001796 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 800178e:	481b      	ldr	r0, [pc, #108]	@ (80017fc <bno055_writeData+0x1d0>)
 8001790:	f009 f9f4 	bl	800ab7c <puts>
 8001794:	e009      	b.n	80017aa <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	2be0      	cmp	r3, #224	@ 0xe0
 800179a:	d106      	bne.n	80017aa <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 800179c:	4818      	ldr	r0, [pc, #96]	@ (8001800 <bno055_writeData+0x1d4>)
 800179e:	f009 f9ed 	bl	800ab7c <puts>
 80017a2:	e002      	b.n	80017aa <bno055_writeData+0x17e>
    return;
 80017a4:	bf00      	nop
 80017a6:	e000      	b.n	80017aa <bno055_writeData+0x17e>
    return;
 80017a8:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	200000e8 	.word	0x200000e8
 80017b4:	0800b8c4 	.word	0x0800b8c4
 80017b8:	0800b8e8 	.word	0x0800b8e8
 80017bc:	0800b910 	.word	0x0800b910
 80017c0:	0800b934 	.word	0x0800b934
 80017c4:	0800b94c 	.word	0x0800b94c
 80017c8:	0800b960 	.word	0x0800b960
 80017cc:	0800b974 	.word	0x0800b974
 80017d0:	0800b988 	.word	0x0800b988
 80017d4:	0800b99c 	.word	0x0800b99c
 80017d8:	0800b9b0 	.word	0x0800b9b0
 80017dc:	0800b9c8 	.word	0x0800b9c8
 80017e0:	0800b9e0 	.word	0x0800b9e0
 80017e4:	0800b9f4 	.word	0x0800b9f4
 80017e8:	0800ba0c 	.word	0x0800ba0c
 80017ec:	0800ba24 	.word	0x0800ba24
 80017f0:	0800ba3c 	.word	0x0800ba3c
 80017f4:	0800ba5c 	.word	0x0800ba5c
 80017f8:	0800ba7c 	.word	0x0800ba7c
 80017fc:	0800ba94 	.word	0x0800ba94
 8001800:	0800baac 	.word	0x0800baac

08001804 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af02      	add	r7, sp, #8
 800180a:	4603      	mov	r3, r0
 800180c:	6039      	str	r1, [r7, #0]
 800180e:	71fb      	strb	r3, [r7, #7]
 8001810:	4613      	mov	r3, r2
 8001812:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001814:	4b0b      	ldr	r3, [pc, #44]	@ (8001844 <bno055_readData+0x40>)
 8001816:	6818      	ldr	r0, [r3, #0]
 8001818:	1dfa      	adds	r2, r7, #7
 800181a:	2364      	movs	r3, #100	@ 0x64
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	2301      	movs	r3, #1
 8001820:	2150      	movs	r1, #80	@ 0x50
 8001822:	f005 fdbf 	bl	80073a4 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8001826:	4b07      	ldr	r3, [pc, #28]	@ (8001844 <bno055_readData+0x40>)
 8001828:	6818      	ldr	r0, [r3, #0]
 800182a:	79bb      	ldrb	r3, [r7, #6]
 800182c:	b29b      	uxth	r3, r3
 800182e:	2264      	movs	r2, #100	@ 0x64
 8001830:	9200      	str	r2, [sp, #0]
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	2150      	movs	r1, #80	@ 0x50
 8001836:	f005 feb3 	bl	80075a0 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200000e8 	.word	0x200000e8

08001848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800184e:	f004 fd37 	bl	80062c0 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint32_t currenTick = HAL_GetTick();
 8001852:	f004 fd9b 	bl	800638c <HAL_GetTick>
 8001856:	6078      	str	r0, [r7, #4]
  PID_Init(&pidAx, 6, 0, 0, -1000, 1000);
 8001858:	ed9f 2a51 	vldr	s4, [pc, #324]	@ 80019a0 <main+0x158>
 800185c:	eddf 1a51 	vldr	s3, [pc, #324]	@ 80019a4 <main+0x15c>
 8001860:	ed9f 1a51 	vldr	s2, [pc, #324]	@ 80019a8 <main+0x160>
 8001864:	eddf 0a50 	vldr	s1, [pc, #320]	@ 80019a8 <main+0x160>
 8001868:	eeb1 0a08 	vmov.f32	s0, #24	@ 0x40c00000  6.0
 800186c:	484f      	ldr	r0, [pc, #316]	@ (80019ac <main+0x164>)
 800186e:	f003 ff1d 	bl	80056ac <PID_Init>
  PID_Init(&pidW, 5, 0, 10, -1000, 1000);
 8001872:	ed9f 2a4b 	vldr	s4, [pc, #300]	@ 80019a0 <main+0x158>
 8001876:	eddf 1a4b 	vldr	s3, [pc, #300]	@ 80019a4 <main+0x15c>
 800187a:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 800187e:	eddf 0a4a 	vldr	s1, [pc, #296]	@ 80019a8 <main+0x160>
 8001882:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8001886:	484a      	ldr	r0, [pc, #296]	@ (80019b0 <main+0x168>)
 8001888:	f003 ff10 	bl	80056ac <PID_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800188c:	f000 f8a8 	bl	80019e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001890:	f7ff fe04 	bl	800149c <MX_GPIO_Init>
  MX_DMA_Init();
 8001894:	f7ff fdbc 	bl	8001410 <MX_DMA_Init>
  MX_TIM1_Init();
 8001898:	f004 f992 	bl	8005bc0 <MX_TIM1_Init>
  MX_I2C1_Init();
 800189c:	f7ff fe34 	bl	8001508 <MX_I2C1_Init>
  MX_TIM2_Init();
 80018a0:	f004 f9de 	bl	8005c60 <MX_TIM2_Init>
  MX_TIM3_Init();
 80018a4:	f004 fa30 	bl	8005d08 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80018a8:	f004 fb3c 	bl	8005f24 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80018ac:	f004 fb64 	bl	8005f78 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80018b0:	4840      	ldr	r0, [pc, #256]	@ (80019b4 <main+0x16c>)
 80018b2:	f007 f8ef 	bl	8008a94 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80018b6:	213c      	movs	r1, #60	@ 0x3c
 80018b8:	483f      	ldr	r0, [pc, #252]	@ (80019b8 <main+0x170>)
 80018ba:	f007 f9f3 	bl	8008ca4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80018be:	213c      	movs	r1, #60	@ 0x3c
 80018c0:	483e      	ldr	r0, [pc, #248]	@ (80019bc <main+0x174>)
 80018c2:	f007 f9ef 	bl	8008ca4 <HAL_TIM_Encoder_Start>

  bno055_assignI2C(&hi2c1);
 80018c6:	483e      	ldr	r0, [pc, #248]	@ (80019c0 <main+0x178>)
 80018c8:	f7ff fe94 	bl	80015f4 <bno055_assignI2C>
  bno055_setup();
 80018cc:	f7ff fbf0 	bl	80010b0 <bno055_setup>
  bno055_setOperationModeNDOF();
 80018d0:	f7ff fbdb 	bl	800108a <bno055_setOperationModeNDOF>
  setup();
 80018d4:	f002 fef6 	bl	80046c4 <setup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if(HAL_GetTick()-currenTick>10){
 80018d8:	f004 fd58 	bl	800638c <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b0a      	cmp	r3, #10
 80018e4:	d9f8      	bls.n	80018d8 <main+0x90>
			error_jrk = error_jarak_calculation(61, camera.distance);
 80018e6:	4b37      	ldr	r3, [pc, #220]	@ (80019c4 <main+0x17c>)
 80018e8:	edd3 7a00 	vldr	s15, [r3]
 80018ec:	eef0 0a67 	vmov.f32	s1, s15
 80018f0:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 80019c8 <main+0x180>
 80018f4:	f003 ffe6 	bl	80058c4 <error_jarak_calculation>
 80018f8:	eef0 7a40 	vmov.f32	s15, s0
 80018fc:	4b33      	ldr	r3, [pc, #204]	@ (80019cc <main+0x184>)
 80018fe:	edc3 7a00 	vstr	s15, [r3]
			error_sdt = error_sudut_calculation(116, camera.angle);
 8001902:	4b30      	ldr	r3, [pc, #192]	@ (80019c4 <main+0x17c>)
 8001904:	edd3 7a01 	vldr	s15, [r3, #4]
 8001908:	eef0 0a67 	vmov.f32	s1, s15
 800190c:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 80019d0 <main+0x188>
 8001910:	f003 ff94 	bl	800583c <error_sudut_calculation>
 8001914:	eef0 7a40 	vmov.f32	s15, s0
 8001918:	4b2e      	ldr	r3, [pc, #184]	@ (80019d4 <main+0x18c>)
 800191a:	edc3 7a00 	vstr	s15, [r3]
			pid_ax = PID_Update(&pidAx, camera.distance, error_jrk)/1000;
 800191e:	4b29      	ldr	r3, [pc, #164]	@ (80019c4 <main+0x17c>)
 8001920:	edd3 7a00 	vldr	s15, [r3]
 8001924:	4b29      	ldr	r3, [pc, #164]	@ (80019cc <main+0x184>)
 8001926:	ed93 7a00 	vldr	s14, [r3]
 800192a:	eef0 0a47 	vmov.f32	s1, s14
 800192e:	eeb0 0a67 	vmov.f32	s0, s15
 8001932:	481e      	ldr	r0, [pc, #120]	@ (80019ac <main+0x164>)
 8001934:	f003 fef2 	bl	800571c <PID_Update>
 8001938:	eeb0 7a40 	vmov.f32	s14, s0
 800193c:	eddf 6a18 	vldr	s13, [pc, #96]	@ 80019a0 <main+0x158>
 8001940:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001944:	4b24      	ldr	r3, [pc, #144]	@ (80019d8 <main+0x190>)
 8001946:	edc3 7a00 	vstr	s15, [r3]
			pid_w = PID_Update(&pidW, camera.angle, error_sdt)/1000;
 800194a:	4b1e      	ldr	r3, [pc, #120]	@ (80019c4 <main+0x17c>)
 800194c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001950:	4b20      	ldr	r3, [pc, #128]	@ (80019d4 <main+0x18c>)
 8001952:	ed93 7a00 	vldr	s14, [r3]
 8001956:	eef0 0a47 	vmov.f32	s1, s14
 800195a:	eeb0 0a67 	vmov.f32	s0, s15
 800195e:	4814      	ldr	r0, [pc, #80]	@ (80019b0 <main+0x168>)
 8001960:	f003 fedc 	bl	800571c <PID_Update>
 8001964:	eeb0 7a40 	vmov.f32	s14, s0
 8001968:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80019a0 <main+0x158>
 800196c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001970:	4b1a      	ldr	r3, [pc, #104]	@ (80019dc <main+0x194>)
 8001972:	edc3 7a00 	vstr	s15, [r3]

//			pid_ax = 0;
//			pid_w = 0.7;

			motor_calculation(pid_ax, 0, pid_w);
 8001976:	4b18      	ldr	r3, [pc, #96]	@ (80019d8 <main+0x190>)
 8001978:	edd3 7a00 	vldr	s15, [r3]
 800197c:	4b17      	ldr	r3, [pc, #92]	@ (80019dc <main+0x194>)
 800197e:	ed93 7a00 	vldr	s14, [r3]
 8001982:	eeb0 1a47 	vmov.f32	s2, s14
 8001986:	eddf 0a08 	vldr	s1, [pc, #32]	@ 80019a8 <main+0x160>
 800198a:	eeb0 0a67 	vmov.f32	s0, s15
 800198e:	f003 fccb 	bl	8005328 <motor_calculation>
			loop();
 8001992:	f002 feb3 	bl	80046fc <loop>
			currenTick = HAL_GetTick();
 8001996:	f004 fcf9 	bl	800638c <HAL_GetTick>
 800199a:	6078      	str	r0, [r7, #4]
		if(HAL_GetTick()-currenTick>10){
 800199c:	e79c      	b.n	80018d8 <main+0x90>
 800199e:	bf00      	nop
 80019a0:	447a0000 	.word	0x447a0000
 80019a4:	c47a0000 	.word	0xc47a0000
 80019a8:	00000000 	.word	0x00000000
 80019ac:	200000fc 	.word	0x200000fc
 80019b0:	20000124 	.word	0x20000124
 80019b4:	20000b88 	.word	0x20000b88
 80019b8:	20000bd0 	.word	0x20000bd0
 80019bc:	20000c18 	.word	0x20000c18
 80019c0:	20000094 	.word	0x20000094
 80019c4:	20000190 	.word	0x20000190
 80019c8:	42740000 	.word	0x42740000
 80019cc:	20000150 	.word	0x20000150
 80019d0:	42e80000 	.word	0x42e80000
 80019d4:	20000154 	.word	0x20000154
 80019d8:	2000014c 	.word	0x2000014c
 80019dc:	20000158 	.word	0x20000158

080019e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b094      	sub	sp, #80	@ 0x50
 80019e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019e6:	f107 0320 	add.w	r3, r7, #32
 80019ea:	2230      	movs	r2, #48	@ 0x30
 80019ec:	2100      	movs	r1, #0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f009 f9a4 	bl	800ad3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	4b27      	ldr	r3, [pc, #156]	@ (8001aa8 <SystemClock_Config+0xc8>)
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0c:	4a26      	ldr	r2, [pc, #152]	@ (8001aa8 <SystemClock_Config+0xc8>)
 8001a0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a12:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a14:	4b24      	ldr	r3, [pc, #144]	@ (8001aa8 <SystemClock_Config+0xc8>)
 8001a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a20:	2300      	movs	r3, #0
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	4b21      	ldr	r3, [pc, #132]	@ (8001aac <SystemClock_Config+0xcc>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a20      	ldr	r2, [pc, #128]	@ (8001aac <SystemClock_Config+0xcc>)
 8001a2a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	4b1e      	ldr	r3, [pc, #120]	@ (8001aac <SystemClock_Config+0xcc>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a44:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a46:	2302      	movs	r3, #2
 8001a48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a4a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001a50:	230c      	movs	r3, #12
 8001a52:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001a54:	2360      	movs	r3, #96	@ 0x60
 8001a56:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a5c:	2304      	movs	r3, #4
 8001a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a60:	f107 0320 	add.w	r3, r7, #32
 8001a64:	4618      	mov	r0, r3
 8001a66:	f006 fb6d 	bl	8008144 <HAL_RCC_OscConfig>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a70:	f000 f88c 	bl	8001b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a74:	230f      	movs	r3, #15
 8001a76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a8a:	f107 030c 	add.w	r3, r7, #12
 8001a8e:	2103      	movs	r1, #3
 8001a90:	4618      	mov	r0, r3
 8001a92:	f006 fdcf 	bl	8008634 <HAL_RCC_ClockConfig>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a9c:	f000 f876 	bl	8001b8c <Error_Handler>
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	3750      	adds	r7, #80	@ 0x50
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40007000 	.word	0x40007000

08001ab0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

short counterBNO = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	@ 0x28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	if(htim == &htim1){
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a2d      	ldr	r2, [pc, #180]	@ (8001b70 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d152      	bne.n	8001b66 <HAL_TIM_PeriodElapsedCallback+0xb6>
		if(counterBNO == 100){
 8001ac0:	4b2c      	ldr	r3, [pc, #176]	@ (8001b74 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ac6:	2b64      	cmp	r3, #100	@ 0x64
 8001ac8:	d144      	bne.n	8001b54 <HAL_TIM_PeriodElapsedCallback+0xa4>
			bno055_vector_t v = bno055_getVectorMagnetometer();
 8001aca:	f7ff fc5d 	bl	8001388 <bno055_getVectorMagnetometer>
 8001ace:	eeb0 4a40 	vmov.f32	s8, s0
 8001ad2:	eef0 4a60 	vmov.f32	s9, s1
 8001ad6:	eeb0 5a41 	vmov.f32	s10, s2
 8001ada:	eef0 5a61 	vmov.f32	s11, s3
 8001ade:	eeb0 6a42 	vmov.f32	s12, s4
 8001ae2:	eef0 6a62 	vmov.f32	s13, s5
 8001ae6:	eeb0 7a43 	vmov.f32	s14, s6
 8001aea:	eef0 7a63 	vmov.f32	s15, s7
 8001aee:	ed87 4b02 	vstr	d4, [r7, #8]
 8001af2:	ed87 5b04 	vstr	d5, [r7, #16]
 8001af6:	ed87 6b06 	vstr	d6, [r7, #24]
 8001afa:	ed87 7b08 	vstr	d7, [r7, #32]
			x = v.x;
 8001afe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b02:	4610      	mov	r0, r2
 8001b04:	4619      	mov	r1, r3
 8001b06:	f7fe ff91 	bl	8000a2c <__aeabi_d2f>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	4a1a      	ldr	r2, [pc, #104]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001b0e:	6013      	str	r3, [r2, #0]
			y = v.y;
 8001b10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	f7fe ff88 	bl	8000a2c <__aeabi_d2f>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	4a17      	ldr	r2, [pc, #92]	@ (8001b7c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001b20:	6013      	str	r3, [r2, #0]
			z = v.z;
 8001b22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b26:	4610      	mov	r0, r2
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f7fe ff7f 	bl	8000a2c <__aeabi_d2f>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4a13      	ldr	r2, [pc, #76]	@ (8001b80 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001b32:	6013      	str	r3, [r2, #0]
			w = v.w;
 8001b34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f7fe ff76 	bl	8000a2c <__aeabi_d2f>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4a10      	ldr	r2, [pc, #64]	@ (8001b84 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001b44:	6013      	str	r3, [r2, #0]

			bno.x = x;
 8001b46:	4b0c      	ldr	r3, [pc, #48]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a0f      	ldr	r2, [pc, #60]	@ (8001b88 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001b4c:	6013      	str	r3, [r2, #0]

			counterBNO = 0;
 8001b4e:	4b09      	ldr	r3, [pc, #36]	@ (8001b74 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	801a      	strh	r2, [r3, #0]
		}

		counterBNO++;
 8001b54:	4b07      	ldr	r3, [pc, #28]	@ (8001b74 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001b56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	b21a      	sxth	r2, r3
 8001b62:	4b04      	ldr	r3, [pc, #16]	@ (8001b74 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001b64:	801a      	strh	r2, [r3, #0]

	}
}
 8001b66:	bf00      	nop
 8001b68:	3728      	adds	r7, #40	@ 0x28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000b88 	.word	0x20000b88
 8001b74:	2000015c 	.word	0x2000015c
 8001b78:	200000ec 	.word	0x200000ec
 8001b7c:	200000f0 	.word	0x200000f0
 8001b80:	200000f4 	.word	0x200000f4
 8001b84:	200000f8 	.word	0x200000f8
 8001b88:	20000160 	.word	0x20000160

08001b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b90:	b672      	cpsid	i
}
 8001b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b94:	bf00      	nop
 8001b96:	e7fd      	b.n	8001b94 <Error_Handler+0x8>

08001b98 <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	ed87 0a00 	vstr	s0, [r7]
  {
    int32_t val;
    memcpy(&val, &f, sizeof(val));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	60fb      	str	r3, [r7, #12]

    int16_t exp = ((val >> 23) & 255);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	15db      	asrs	r3, r3, #23
 8001bac:	b21b      	sxth	r3, r3
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	82fb      	strh	r3, [r7, #22]
    uint32_t mantissa = val & 0x7FFFFF;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8001bb8:	613b      	str	r3, [r7, #16]

    if (exp == 255)
 8001bba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001bbe:	2bff      	cmp	r3, #255	@ 0xff
 8001bc0:	d103      	bne.n	8001bca <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x32>
    {
      exp = 2047; // Special value for NaN, infinity etc.
 8001bc2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001bc6:	82fb      	strh	r3, [r7, #22]
 8001bc8:	e02a      	b.n	8001c20 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else if (exp != 0)
 8001bca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d005      	beq.n	8001bde <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x46>
    {
      exp += 1023 - 127; // Normal case
 8001bd2:	8afb      	ldrh	r3, [r7, #22]
 8001bd4:	f503 7360 	add.w	r3, r3, #896	@ 0x380
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	82fb      	strh	r3, [r7, #22]
 8001bdc:	e020      	b.n	8001c20 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else if (!mantissa)
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d102      	bne.n	8001bea <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x52>
    {
      exp = 0; // Zero
 8001be4:	2300      	movs	r3, #0
 8001be6:	82fb      	strh	r3, [r7, #22]
 8001be8:	e01a      	b.n	8001c20 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else
    {
      // Denormalized value in float, will fit as normalized value in double
      exp += 1023 - 127;
 8001bea:	8afb      	ldrh	r3, [r7, #22]
 8001bec:	f503 7360 	add.w	r3, r3, #896	@ 0x380
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	82fb      	strh	r3, [r7, #22]
      mantissa <<= 1;
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	613b      	str	r3, [r7, #16]
      while (!(mantissa & 0x800000))
 8001bfa:	e008      	b.n	8001c0e <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x76>
      {
          mantissa <<= 1;
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	613b      	str	r3, [r7, #16]
          exp--;
 8001c02:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	82fb      	strh	r3, [r7, #22]
      while (!(mantissa & 0x800000))
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0f1      	beq.n	8001bfc <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x64>
      }
      mantissa &= 0x7FFFFF;
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8001c1e:	613b      	str	r3, [r7, #16]
    }

    *(outbuffer++) = 0;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	607a      	str	r2, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	1c5a      	adds	r2, r3, #1
 8001c2e:	607a      	str	r2, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	1c5a      	adds	r2, r3, #1
 8001c38:	607a      	str	r2, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa << 5) & 0xff;
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	1c59      	adds	r1, r3, #1
 8001c46:	6079      	str	r1, [r7, #4]
 8001c48:	0152      	lsls	r2, r2, #5
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa >> 3) & 0xff;
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	08d9      	lsrs	r1, r3, #3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	1c5a      	adds	r2, r3, #1
 8001c56:	607a      	str	r2, [r7, #4]
 8001c58:	b2ca      	uxtb	r2, r1
 8001c5a:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa >> 11) & 0xff;
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	0ad9      	lsrs	r1, r3, #11
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	b2ca      	uxtb	r2, r1
 8001c68:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((mantissa >> 19) & 0x0F);
 8001c6a:	8afb      	ldrh	r3, [r7, #22]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	011b      	lsls	r3, r3, #4
 8001c70:	b2d9      	uxtb	r1, r3
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	0cdb      	lsrs	r3, r3, #19
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	f003 030f 	and.w	r3, r3, #15
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	1c58      	adds	r0, r3, #1
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 8001c8a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c8e:	111b      	asrs	r3, r3, #4
 8001c90:	b21b      	sxth	r3, r3
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	1c59      	adds	r1, r3, #1
 8001c98:	6079      	str	r1, [r7, #4]
 8001c9a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 8001ca2:	edd7 7a00 	vldr	s15, [r7]
 8001ca6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cae:	d508      	bpl.n	8001cc2 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x12a>
    {
      *(outbuffer - 1) |= 0x80;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	781a      	ldrb	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 8001cc2:	2308      	movs	r3, #8
  }
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	371c      	adds	r7, #28
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 8001cd0:	b480      	push	{r7}
 8001cd2:	b087      	sub	sp, #28
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  {
    int16_t exp;
    uint32_t mantissa;

    // Skip lowest 24 bits
    inbuffer += 3;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3303      	adds	r3, #3
 8001cde:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    mantissa = ((uint32_t)(*(inbuffer++)) >> 4 & 0x0F);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	1c5a      	adds	r2, r3, #1
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	091b      	lsrs	r3, r3, #4
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	f003 030f 	and.w	r3, r3, #15
 8001cf0:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*(inbuffer++)) & 0xff) << 4;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	1c5a      	adds	r2, r3, #1
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*(inbuffer++)) & 0xff) << 12;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	607a      	str	r2, [r7, #4]
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	031b      	lsls	r3, r3, #12
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*inbuffer) & 0x0f) << 20;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	051b      	lsls	r3, r3, #20
 8001d18:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]

    // Copy exponent.
    exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	1c5a      	adds	r2, r3, #1
 8001d26:	607a      	str	r2, [r7, #4]
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	091b      	lsrs	r3, r3, #4
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	b21b      	sxth	r3, r3
 8001d30:	f003 030f 	and.w	r3, r3, #15
 8001d34:	82fb      	strh	r3, [r7, #22]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	011b      	lsls	r3, r3, #4
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	8afb      	ldrh	r3, [r7, #22]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	82fb      	strh	r3, [r7, #22]

    if (exp == 2047)
 8001d4c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d50:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d102      	bne.n	8001d5e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x8e>
    {
      exp = 255; // NaN, infinity etc.
 8001d58:	23ff      	movs	r3, #255	@ 0xff
 8001d5a:	82fb      	strh	r3, [r7, #22]
 8001d5c:	e02c      	b.n	8001db8 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xe8>
    }
    else if (exp - 1023 > 127)
 8001d5e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d62:	f240 427e 	movw	r2, #1150	@ 0x47e
 8001d66:	4293      	cmp	r3, r2
 8001d68:	dd04      	ble.n	8001d74 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xa4>
    {
      exp = 255;
 8001d6a:	23ff      	movs	r3, #255	@ 0xff
 8001d6c:	82fb      	strh	r3, [r7, #22]
      mantissa = 0; // Too large for float, convert to infinity
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	e021      	b.n	8001db8 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xe8>
    }
    else if (exp - 1023 >= -126)
 8001d74:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d78:	f5b3 7f60 	cmp.w	r3, #896	@ 0x380
 8001d7c:	dd05      	ble.n	8001d8a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xba>
    {
      exp -= 1023 - 127; // Normal case
 8001d7e:	8afb      	ldrh	r3, [r7, #22]
 8001d80:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	82fb      	strh	r3, [r7, #22]
 8001d88:	e016      	b.n	8001db8 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xe8>
    }
    else if (exp - 1023 < -150)
 8001d8a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d8e:	f5b3 7f5a 	cmp.w	r3, #872	@ 0x368
 8001d92:	dc02      	bgt.n	8001d9a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xca>
    {
      exp = 0; // Too small or zero
 8001d94:	2300      	movs	r3, #0
 8001d96:	82fb      	strh	r3, [r7, #22]
 8001d98:	e00e      	b.n	8001db8 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xe8>
    }
    else
    {
      // Have to convert to denormalized representation for float
      mantissa |= 0x1000000;
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001da0:	613b      	str	r3, [r7, #16]
      mantissa >>= ((-126 + 1023) - exp);
 8001da2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001da6:	f5c3 7360 	rsb	r3, r3, #896	@ 0x380
 8001daa:	3301      	adds	r3, #1
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	fa22 f303 	lsr.w	r3, r2, r3
 8001db2:	613b      	str	r3, [r7, #16]
      exp = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	82fb      	strh	r3, [r7, #22]
    }

    // Round off mantissa
    if (mantissa != 0xFFFFFF)
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d002      	beq.n	8001dc8 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xf8>
      mantissa += 1;
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	613b      	str	r3, [r7, #16]

    mantissa >>= 1;
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	085b      	lsrs	r3, r3, #1
 8001dcc:	613b      	str	r3, [r7, #16]

    // Put mantissa and exponent into place
    uint32_t val = mantissa;
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	60fb      	str	r3, [r7, #12]
    val |= static_cast<uint32_t>(exp) << 23;
 8001dd2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001dd6:	05da      	lsls	r2, r3, #23
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]

    // Copy negative sign.
    val |= (static_cast<uint32_t>(*(inbuffer++)) & 0x80) << 24;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	1c5a      	adds	r2, r3, #1
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	061b      	lsls	r3, r3, #24
 8001de8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]

    memcpy(f, &val, sizeof(val));
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	601a      	str	r2, [r3, #0]
    return 8;
 8001df8:	2308      	movs	r3, #8
  }
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	371c      	adds	r7, #28
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <_ZN3ros3MsgC1Ev>:
class Msg
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	4a04      	ldr	r2, [pc, #16]	@ (8001e44 <_ZN3ros3MsgC1Ev+0x1c>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	0800bdf4 	.word	0x0800bdf4

08001e48 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
      data()
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff ffe8 	bl	8001e28 <_ZN3ros3MsgC1Ev>
 8001e58:	4a06      	ldr	r2, [pc, #24]	@ (8001e74 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3304      	adds	r3, #4
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff ffcf 	bl	8001e06 <_ZN3ros4TimeC1Ev>
    {
    }
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	0800bddc 	.word	0x0800bddc

08001e78 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6859      	ldr	r1, [r3, #4]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	4413      	add	r3, r2
 8001e90:	b2ca      	uxtb	r2, r1
 8001e92:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	0a19      	lsrs	r1, r3, #8
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	b2ca      	uxtb	r2, r1
 8001ea4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	0c19      	lsrs	r1, r3, #16
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	3302      	adds	r3, #2
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	b2ca      	uxtb	r2, r1
 8001eb6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	0e19      	lsrs	r1, r3, #24
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	3303      	adds	r3, #3
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	b2ca      	uxtb	r2, r1
 8001ec8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	3304      	adds	r3, #4
 8001ece:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6899      	ldr	r1, [r3, #8]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	4413      	add	r3, r2
 8001eda:	b2ca      	uxtb	r2, r1
 8001edc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	0a19      	lsrs	r1, r3, #8
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	4413      	add	r3, r2
 8001eec:	b2ca      	uxtb	r2, r1
 8001eee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	0c19      	lsrs	r1, r3, #16
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	3302      	adds	r3, #2
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	4413      	add	r3, r2
 8001efe:	b2ca      	uxtb	r2, r1
 8001f00:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	0e19      	lsrs	r1, r3, #24
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	3303      	adds	r3, #3
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	4413      	add	r3, r2
 8001f10:	b2ca      	uxtb	r2, r1
 8001f12:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	3304      	adds	r3, #4
 8001f18:	60fb      	str	r3, [r7, #12]
      return offset;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
    }
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	6839      	ldr	r1, [r7, #0]
 8001f4e:	440b      	add	r3, r1
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	021b      	lsls	r3, r3, #8
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	3302      	adds	r3, #2
 8001f62:	6839      	ldr	r1, [r7, #0]
 8001f64:	440b      	add	r3, r1
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	041b      	lsls	r3, r3, #16
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	3303      	adds	r3, #3
 8001f78:	6839      	ldr	r1, [r7, #0]
 8001f7a:	440b      	add	r3, r1
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	061b      	lsls	r3, r3, #24
 8001f80:	431a      	orrs	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	3304      	adds	r3, #4
 8001f8a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	4413      	add	r3, r2
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	461a      	mov	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	6839      	ldr	r1, [r7, #0]
 8001fa4:	440b      	add	r3, r1
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	021b      	lsls	r3, r3, #8
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	3302      	adds	r3, #2
 8001fb8:	6839      	ldr	r1, [r7, #0]
 8001fba:	440b      	add	r3, r1
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	041b      	lsls	r3, r3, #16
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	3303      	adds	r3, #3
 8001fce:	6839      	ldr	r1, [r7, #0]
 8001fd0:	440b      	add	r3, r1
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	061b      	lsls	r3, r3, #24
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	3304      	adds	r3, #4
 8001fe0:	60fb      	str	r3, [r7, #12]
     return offset;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
    }
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	4b03      	ldr	r3, [pc, #12]	@ (8002008 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	0800bac4 	.word	0x0800bac4

0800200c <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	4b03      	ldr	r3, [pc, #12]	@ (8002024 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	0800bad4 	.word	0x0800bad4

08002028 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fef8 	bl	8001e28 <_ZN3ros3MsgC1Ev>
 8002038:	4a0b      	ldr	r2, [pc, #44]	@ (8002068 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	601a      	str	r2, [r3, #0]
      topic_id(0),
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a09      	ldr	r2, [pc, #36]	@ (800206c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002048:	609a      	str	r2, [r3, #8]
      message_type(""),
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a07      	ldr	r2, [pc, #28]	@ (800206c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800204e:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a06      	ldr	r2, [pc, #24]	@ (800206c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002054:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	615a      	str	r2, [r3, #20]
    {
    }
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	0800bdc4 	.word	0x0800bdc4
 800206c:	0800baf8 	.word	0x0800baf8

08002070 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	8899      	ldrh	r1, [r3, #4]
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	4413      	add	r3, r2
 8002088:	b2ca      	uxtb	r2, r1
 800208a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	889b      	ldrh	r3, [r3, #4]
 8002090:	0a1b      	lsrs	r3, r3, #8
 8002092:	b299      	uxth	r1, r3
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	3301      	adds	r3, #1
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	4413      	add	r3, r2
 800209c:	b2ca      	uxtb	r2, r1
 800209e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	3302      	adds	r3, #2
 80020a4:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe f898 	bl	80001e0 <strlen>
 80020b0:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	4413      	add	r3, r2
 80020b8:	69b9      	ldr	r1, [r7, #24]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f002 fb52 	bl	8004764 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	3304      	adds	r3, #4
 80020c4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	18d0      	adds	r0, r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4619      	mov	r1, r3
 80020d4:	f008 fead 	bl	800ae32 <memcpy>
      offset += length_topic_name;
 80020d8:	69fa      	ldr	r2, [r7, #28]
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	4413      	add	r3, r2
 80020de:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe f87b 	bl	80001e0 <strlen>
 80020ea:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	4413      	add	r3, r2
 80020f2:	6979      	ldr	r1, [r7, #20]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f002 fb35 	bl	8004764 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3304      	adds	r3, #4
 80020fe:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	18d0      	adds	r0, r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	4619      	mov	r1, r3
 800210e:	f008 fe90 	bl	800ae32 <memcpy>
      offset += length_message_type;
 8002112:	69fa      	ldr	r2, [r7, #28]
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	4413      	add	r3, r2
 8002118:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe f85e 	bl	80001e0 <strlen>
 8002124:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	4413      	add	r3, r2
 800212c:	6939      	ldr	r1, [r7, #16]
 800212e:	4618      	mov	r0, r3
 8002130:	f002 fb18 	bl	8004764 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	3304      	adds	r3, #4
 8002138:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	18d0      	adds	r0, r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	4619      	mov	r1, r3
 8002148:	f008 fe73 	bl	800ae32 <memcpy>
      offset += length_md5sum;
 800214c:	69fa      	ldr	r2, [r7, #28]
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4413      	add	r3, r2
 8002152:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800215a:	68f9      	ldr	r1, [r7, #12]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	4413      	add	r3, r2
 8002162:	b2ca      	uxtb	r2, r1
 8002164:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	0a19      	lsrs	r1, r3, #8
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3301      	adds	r3, #1
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	4413      	add	r3, r2
 8002172:	b2ca      	uxtb	r2, r1
 8002174:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	0c19      	lsrs	r1, r3, #16
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3302      	adds	r3, #2
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	4413      	add	r3, r2
 8002182:	b2ca      	uxtb	r2, r1
 8002184:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	0e19      	lsrs	r1, r3, #24
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3303      	adds	r3, #3
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	4413      	add	r3, r2
 8002192:	b2ca      	uxtb	r2, r1
 8002194:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3304      	adds	r3, #4
 800219a:	61fb      	str	r3, [r7, #28]
      return offset;
 800219c:	69fb      	ldr	r3, [r7, #28]
    }
 800219e:	4618      	mov	r0, r3
 80021a0:	3720      	adds	r7, #32
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b08a      	sub	sp, #40	@ 0x28
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	4413      	add	r3, r2
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	889b      	ldrh	r3, [r3, #4]
 80021c6:	b21a      	sxth	r2, r3
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	3301      	adds	r3, #1
 80021cc:	6839      	ldr	r1, [r7, #0]
 80021ce:	440b      	add	r3, r1
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	021b      	lsls	r3, r3, #8
 80021d4:	b21b      	sxth	r3, r3
 80021d6:	4313      	orrs	r3, r2
 80021d8:	b21b      	sxth	r3, r3
 80021da:	b29a      	uxth	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	3302      	adds	r3, #2
 80021e4:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	441a      	add	r2, r3
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	4611      	mov	r1, r2
 80021f2:	4618      	mov	r0, r3
 80021f4:	f002 fad5 	bl	80047a2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	3304      	adds	r3, #4
 80021fc:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	627b      	str	r3, [r7, #36]	@ 0x24
 8002202:	e00b      	b.n	800221c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002208:	441a      	add	r2, r3
 800220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220c:	3b01      	subs	r3, #1
 800220e:	6839      	ldr	r1, [r7, #0]
 8002210:	440b      	add	r3, r1
 8002212:	7812      	ldrb	r2, [r2, #0]
 8002214:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002218:	3301      	adds	r3, #1
 800221a:	627b      	str	r3, [r7, #36]	@ 0x24
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	4413      	add	r3, r2
 8002222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002224:	429a      	cmp	r2, r3
 8002226:	d3ed      	bcc.n	8002204 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	4413      	add	r3, r2
 800222e:	3b01      	subs	r3, #1
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	4413      	add	r3, r2
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	3b01      	subs	r3, #1
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	441a      	add	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	4413      	add	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	441a      	add	r2, r3
 8002252:	f107 0310 	add.w	r3, r7, #16
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f002 faa2 	bl	80047a2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	3304      	adds	r3, #4
 8002262:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	623b      	str	r3, [r7, #32]
 8002268:	e00b      	b.n	8002282 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	441a      	add	r2, r3
 8002270:	6a3b      	ldr	r3, [r7, #32]
 8002272:	3b01      	subs	r3, #1
 8002274:	6839      	ldr	r1, [r7, #0]
 8002276:	440b      	add	r3, r1
 8002278:	7812      	ldrb	r2, [r2, #0]
 800227a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	3301      	adds	r3, #1
 8002280:	623b      	str	r3, [r7, #32]
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4413      	add	r3, r2
 8002288:	6a3a      	ldr	r2, [r7, #32]
 800228a:	429a      	cmp	r2, r3
 800228c:	d3ed      	bcc.n	800226a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4413      	add	r3, r2
 8002294:	3b01      	subs	r3, #1
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	4413      	add	r3, r2
 800229a:	2200      	movs	r2, #0
 800229c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	3b01      	subs	r3, #1
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	441a      	add	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	4413      	add	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	441a      	add	r2, r3
 80022b8:	f107 030c 	add.w	r3, r7, #12
 80022bc:	4611      	mov	r1, r2
 80022be:	4618      	mov	r0, r3
 80022c0:	f002 fa6f 	bl	80047a2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	3304      	adds	r3, #4
 80022c8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	61fb      	str	r3, [r7, #28]
 80022ce:	e00b      	b.n	80022e8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	441a      	add	r2, r3
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3b01      	subs	r3, #1
 80022da:	6839      	ldr	r1, [r7, #0]
 80022dc:	440b      	add	r3, r1
 80022de:	7812      	ldrb	r2, [r2, #0]
 80022e0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3301      	adds	r3, #1
 80022e6:	61fb      	str	r3, [r7, #28]
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4413      	add	r3, r2
 80022ee:	69fa      	ldr	r2, [r7, #28]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d3ed      	bcc.n	80022d0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4413      	add	r3, r2
 80022fa:	3b01      	subs	r3, #1
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	4413      	add	r3, r2
 8002300:	2200      	movs	r2, #0
 8002302:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	3b01      	subs	r3, #1
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	441a      	add	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4413      	add	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	6839      	ldr	r1, [r7, #0]
 8002322:	440a      	add	r2, r1
 8002324:	7812      	ldrb	r2, [r2, #0]
 8002326:	4313      	orrs	r3, r2
 8002328:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	3301      	adds	r3, #1
 8002330:	6839      	ldr	r1, [r7, #0]
 8002332:	440b      	add	r3, r1
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	021b      	lsls	r3, r3, #8
 8002338:	4313      	orrs	r3, r2
 800233a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	3302      	adds	r3, #2
 8002342:	6839      	ldr	r1, [r7, #0]
 8002344:	440b      	add	r3, r1
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	041b      	lsls	r3, r3, #16
 800234a:	4313      	orrs	r3, r2
 800234c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	3303      	adds	r3, #3
 8002354:	6839      	ldr	r1, [r7, #0]
 8002356:	440b      	add	r3, r1
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	061b      	lsls	r3, r3, #24
 800235c:	4313      	orrs	r3, r2
 800235e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	3304      	adds	r3, #4
 800236a:	61bb      	str	r3, [r7, #24]
     return offset;
 800236c:	69bb      	ldr	r3, [r7, #24]
    }
 800236e:	4618      	mov	r0, r3
 8002370:	3728      	adds	r7, #40	@ 0x28
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	4b03      	ldr	r3, [pc, #12]	@ (8002390 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	0800bafc 	.word	0x0800bafc

08002394 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	4b03      	ldr	r3, [pc, #12]	@ (80023ac <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800239e:	4618      	mov	r0, r3
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	0800bb18 	.word	0x0800bb18

080023b0 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fd34 	bl	8001e28 <_ZN3ros3MsgC1Ev>
 80023c0:	4a06      	ldr	r2, [pc, #24]	@ (80023dc <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	601a      	str	r2, [r3, #0]
      level(0),
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	711a      	strb	r2, [r3, #4]
      msg("")
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a04      	ldr	r2, [pc, #16]	@ (80023e0 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80023d0:	609a      	str	r2, [r3, #8]
    {
    }
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4618      	mov	r0, r3
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	0800bdac 	.word	0x0800bdac
 80023e0:	0800baf8 	.word	0x0800baf8

080023e4 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	4413      	add	r3, r2
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	7912      	ldrb	r2, [r2, #4]
 80023fc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	3301      	adds	r3, #1
 8002402:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	4618      	mov	r0, r3
 800240a:	f7fd fee9 	bl	80001e0 <strlen>
 800240e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	4413      	add	r3, r2
 8002416:	68b9      	ldr	r1, [r7, #8]
 8002418:	4618      	mov	r0, r3
 800241a:	f002 f9a3 	bl	8004764 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	3304      	adds	r3, #4
 8002422:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	18d0      	adds	r0, r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	4619      	mov	r1, r3
 8002432:	f008 fcfe 	bl	800ae32 <memcpy>
      offset += length_msg;
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	4413      	add	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]
      return offset;
 800243e:	68fb      	ldr	r3, [r7, #12]
    }
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	4413      	add	r3, r2
 800245c:	781a      	ldrb	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	3301      	adds	r3, #1
 8002466:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	441a      	add	r2, r3
 800246e:	f107 030c 	add.w	r3, r7, #12
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f002 f994 	bl	80047a2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	3304      	adds	r3, #4
 800247e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	e00b      	b.n	800249e <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	441a      	add	r2, r3
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	3b01      	subs	r3, #1
 8002490:	6839      	ldr	r1, [r7, #0]
 8002492:	440b      	add	r3, r1
 8002494:	7812      	ldrb	r2, [r2, #0]
 8002496:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	3301      	adds	r3, #1
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4413      	add	r3, r2
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d3ed      	bcc.n	8002486 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4413      	add	r3, r2
 80024b0:	3b01      	subs	r3, #1
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	4413      	add	r3, r2
 80024b6:	2200      	movs	r2, #0
 80024b8:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	3b01      	subs	r3, #1
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	441a      	add	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4413      	add	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
     return offset;
 80024ce:	693b      	ldr	r3, [r7, #16]
    }
 80024d0:	4618      	mov	r0, r3
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	4b03      	ldr	r3, [pc, #12]	@ (80024f0 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80024e2:	4618      	mov	r0, r3
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	0800bb3c 	.word	0x0800bb3c

080024f4 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	4b03      	ldr	r3, [pc, #12]	@ (800250c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80024fe:	4618      	mov	r0, r3
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	0800bb50 	.word	0x0800bb50

08002510 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fc84 	bl	8001e28 <_ZN3ros3MsgC1Ev>
 8002520:	4a11      	ldr	r2, [pc, #68]	@ (8002568 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	605a      	str	r2, [r3, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	611a      	str	r2, [r3, #16]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	615a      	str	r2, [r3, #20]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	61da      	str	r2, [r3, #28]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	621a      	str	r2, [r3, #32]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	0800bd94 	.word	0x0800bd94

0800256c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800256c:	b580      	push	{r7, lr}
 800256e:	b08a      	sub	sp, #40	@ 0x28
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002576:	2300      	movs	r3, #0
 8002578:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6859      	ldr	r1, [r3, #4]
 800257e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	4413      	add	r3, r2
 8002584:	b2ca      	uxtb	r2, r1
 8002586:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	0a19      	lsrs	r1, r3, #8
 800258e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002590:	3301      	adds	r3, #1
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	4413      	add	r3, r2
 8002596:	b2ca      	uxtb	r2, r1
 8002598:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	0c19      	lsrs	r1, r3, #16
 80025a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a2:	3302      	adds	r3, #2
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	4413      	add	r3, r2
 80025a8:	b2ca      	uxtb	r2, r1
 80025aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	0e19      	lsrs	r1, r3, #24
 80025b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b4:	3303      	adds	r3, #3
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	4413      	add	r3, r2
 80025ba:	b2ca      	uxtb	r2, r1
 80025bc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80025be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c0:	3304      	adds	r3, #4
 80025c2:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80025c4:	2300      	movs	r3, #0
 80025c6:	623b      	str	r3, [r7, #32]
 80025c8:	e02a      	b.n	8002620 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	6a3b      	ldr	r3, [r7, #32]
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80025d8:	6939      	ldr	r1, [r7, #16]
 80025da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	4413      	add	r3, r2
 80025e0:	b2ca      	uxtb	r2, r1
 80025e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	0a19      	lsrs	r1, r3, #8
 80025e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ea:	3301      	adds	r3, #1
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	4413      	add	r3, r2
 80025f0:	b2ca      	uxtb	r2, r1
 80025f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	0c19      	lsrs	r1, r3, #16
 80025f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fa:	3302      	adds	r3, #2
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	4413      	add	r3, r2
 8002600:	b2ca      	uxtb	r2, r1
 8002602:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	0e19      	lsrs	r1, r3, #24
 8002608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260a:	3303      	adds	r3, #3
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	4413      	add	r3, r2
 8002610:	b2ca      	uxtb	r2, r1
 8002612:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002616:	3304      	adds	r3, #4
 8002618:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	3301      	adds	r3, #1
 800261e:	623b      	str	r3, [r7, #32]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	6a3a      	ldr	r2, [r7, #32]
 8002626:	429a      	cmp	r2, r3
 8002628:	d3cf      	bcc.n	80025ca <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6919      	ldr	r1, [r3, #16]
 800262e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	4413      	add	r3, r2
 8002634:	b2ca      	uxtb	r2, r1
 8002636:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	0a19      	lsrs	r1, r3, #8
 800263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002640:	3301      	adds	r3, #1
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	4413      	add	r3, r2
 8002646:	b2ca      	uxtb	r2, r1
 8002648:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	0c19      	lsrs	r1, r3, #16
 8002650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002652:	3302      	adds	r3, #2
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	4413      	add	r3, r2
 8002658:	b2ca      	uxtb	r2, r1
 800265a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	0e19      	lsrs	r1, r3, #24
 8002662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002664:	3303      	adds	r3, #3
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	4413      	add	r3, r2
 800266a:	b2ca      	uxtb	r2, r1
 800266c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800266e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002670:	3304      	adds	r3, #4
 8002672:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002674:	2300      	movs	r3, #0
 8002676:	61fb      	str	r3, [r7, #28]
 8002678:	e02a      	b.n	80026d0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699a      	ldr	r2, [r3, #24]
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002688:	68f9      	ldr	r1, [r7, #12]
 800268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	4413      	add	r3, r2
 8002690:	b2ca      	uxtb	r2, r1
 8002692:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	0a19      	lsrs	r1, r3, #8
 8002698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269a:	3301      	adds	r3, #1
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	4413      	add	r3, r2
 80026a0:	b2ca      	uxtb	r2, r1
 80026a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	0c19      	lsrs	r1, r3, #16
 80026a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026aa:	3302      	adds	r3, #2
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	4413      	add	r3, r2
 80026b0:	b2ca      	uxtb	r2, r1
 80026b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	0e19      	lsrs	r1, r3, #24
 80026b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ba:	3303      	adds	r3, #3
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	4413      	add	r3, r2
 80026c0:	b2ca      	uxtb	r2, r1
 80026c2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80026c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c6:	3304      	adds	r3, #4
 80026c8:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3301      	adds	r3, #1
 80026ce:	61fb      	str	r3, [r7, #28]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	69fa      	ldr	r2, [r7, #28]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d3cf      	bcc.n	800267a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69d9      	ldr	r1, [r3, #28]
 80026de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	b2ca      	uxtb	r2, r1
 80026e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	0a19      	lsrs	r1, r3, #8
 80026ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f0:	3301      	adds	r3, #1
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	4413      	add	r3, r2
 80026f6:	b2ca      	uxtb	r2, r1
 80026f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	0c19      	lsrs	r1, r3, #16
 8002700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002702:	3302      	adds	r3, #2
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	4413      	add	r3, r2
 8002708:	b2ca      	uxtb	r2, r1
 800270a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	0e19      	lsrs	r1, r3, #24
 8002712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002714:	3303      	adds	r3, #3
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	4413      	add	r3, r2
 800271a:	b2ca      	uxtb	r2, r1
 800271c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002720:	3304      	adds	r3, #4
 8002722:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002724:	2300      	movs	r3, #0
 8002726:	61bb      	str	r3, [r7, #24]
 8002728:	e027      	b.n	800277a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f7fd fd52 	bl	80001e0 <strlen>
 800273c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	4413      	add	r3, r2
 8002744:	6979      	ldr	r1, [r7, #20]
 8002746:	4618      	mov	r0, r3
 8002748:	f002 f80c 	bl	8004764 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274e:	3304      	adds	r3, #4
 8002750:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	18d0      	adds	r0, r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	4619      	mov	r1, r3
 8002768:	f008 fb63 	bl	800ae32 <memcpy>
      offset += length_stringsi;
 800276c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	4413      	add	r3, r2
 8002772:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	3301      	adds	r3, #1
 8002778:	61bb      	str	r3, [r7, #24]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	429a      	cmp	r2, r3
 8002782:	d3d2      	bcc.n	800272a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8002784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002786:	4618      	mov	r0, r3
 8002788:	3728      	adds	r7, #40	@ 0x28
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800278e:	b580      	push	{r7, lr}
 8002790:	b08e      	sub	sp, #56	@ 0x38
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
 8002796:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002798:	2300      	movs	r3, #0
 800279a:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800279c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	4413      	add	r3, r2
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80027a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027a8:	3301      	adds	r3, #1
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	4413      	add	r3, r2
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	021b      	lsls	r3, r3, #8
 80027b2:	6a3a      	ldr	r2, [r7, #32]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80027b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027ba:	3302      	adds	r3, #2
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	4413      	add	r3, r2
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	041b      	lsls	r3, r3, #16
 80027c4:	6a3a      	ldr	r2, [r7, #32]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80027ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027cc:	3303      	adds	r3, #3
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	4413      	add	r3, r2
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	061b      	lsls	r3, r3, #24
 80027d6:	6a3a      	ldr	r2, [r7, #32]
 80027d8:	4313      	orrs	r3, r2
 80027da:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80027dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027de:	3304      	adds	r3, #4
 80027e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	6a3a      	ldr	r2, [r7, #32]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d90a      	bls.n	8002802 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	6a3b      	ldr	r3, [r7, #32]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4619      	mov	r1, r3
 80027f6:	4610      	mov	r0, r2
 80027f8:	f008 f860 	bl	800a8bc <realloc>
 80027fc:	4602      	mov	r2, r0
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a3a      	ldr	r2, [r7, #32]
 8002806:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002808:	2300      	movs	r3, #0
 800280a:	633b      	str	r3, [r7, #48]	@ 0x30
 800280c:	e035      	b.n	800287a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002816:	6839      	ldr	r1, [r7, #0]
 8002818:	440a      	add	r2, r1
 800281a:	7812      	ldrb	r2, [r2, #0]
 800281c:	4313      	orrs	r3, r2
 800281e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002824:	3301      	adds	r3, #1
 8002826:	6839      	ldr	r1, [r7, #0]
 8002828:	440b      	add	r3, r1
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	021b      	lsls	r3, r3, #8
 800282e:	4313      	orrs	r3, r2
 8002830:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002836:	3302      	adds	r3, #2
 8002838:	6839      	ldr	r1, [r7, #0]
 800283a:	440b      	add	r3, r1
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	041b      	lsls	r3, r3, #16
 8002840:	4313      	orrs	r3, r2
 8002842:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002848:	3303      	adds	r3, #3
 800284a:	6839      	ldr	r1, [r7, #0]
 800284c:	440b      	add	r3, r1
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	061b      	lsls	r3, r3, #24
 8002852:	4313      	orrs	r3, r2
 8002854:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 800285c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800285e:	3304      	adds	r3, #4
 8002860:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	3208      	adds	r2, #8
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002876:	3301      	adds	r3, #1
 8002878:	633b      	str	r3, [r7, #48]	@ 0x30
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002880:	429a      	cmp	r2, r3
 8002882:	d3c4      	bcc.n	800280e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	4413      	add	r3, r2
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800288e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002890:	3301      	adds	r3, #1
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	4413      	add	r3, r2
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	021b      	lsls	r3, r3, #8
 800289a:	69fa      	ldr	r2, [r7, #28]
 800289c:	4313      	orrs	r3, r2
 800289e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80028a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028a2:	3302      	adds	r3, #2
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	4413      	add	r3, r2
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	041b      	lsls	r3, r3, #16
 80028ac:	69fa      	ldr	r2, [r7, #28]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80028b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028b4:	3303      	adds	r3, #3
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	4413      	add	r3, r2
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	061b      	lsls	r3, r3, #24
 80028be:	69fa      	ldr	r2, [r7, #28]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80028c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028c6:	3304      	adds	r3, #4
 80028c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	69fa      	ldr	r2, [r7, #28]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d90a      	bls.n	80028ea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	699a      	ldr	r2, [r3, #24]
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4619      	mov	r1, r3
 80028de:	4610      	mov	r0, r2
 80028e0:	f007 ffec 	bl	800a8bc <realloc>
 80028e4:	4602      	mov	r2, r0
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69fa      	ldr	r2, [r7, #28]
 80028ee:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80028f0:	2300      	movs	r3, #0
 80028f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028f4:	e035      	b.n	8002962 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80028f6:	2300      	movs	r3, #0
 80028f8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028fe:	6839      	ldr	r1, [r7, #0]
 8002900:	440a      	add	r2, r1
 8002902:	7812      	ldrb	r2, [r2, #0]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800290c:	3301      	adds	r3, #1
 800290e:	6839      	ldr	r1, [r7, #0]
 8002910:	440b      	add	r3, r1
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	021b      	lsls	r3, r3, #8
 8002916:	4313      	orrs	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800291e:	3302      	adds	r3, #2
 8002920:	6839      	ldr	r1, [r7, #0]
 8002922:	440b      	add	r3, r1
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	041b      	lsls	r3, r3, #16
 8002928:	4313      	orrs	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002930:	3303      	adds	r3, #3
 8002932:	6839      	ldr	r1, [r7, #0]
 8002934:	440b      	add	r3, r1
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	061b      	lsls	r3, r3, #24
 800293a:	4313      	orrs	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002946:	3304      	adds	r3, #4
 8002948:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699a      	ldr	r2, [r3, #24]
 800294e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	3214      	adds	r2, #20
 8002958:	6812      	ldr	r2, [r2, #0]
 800295a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 800295c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800295e:	3301      	adds	r3, #1
 8002960:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002968:	429a      	cmp	r2, r3
 800296a:	d3c4      	bcc.n	80028f6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800296c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	4413      	add	r3, r2
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002978:	3301      	adds	r3, #1
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	4413      	add	r3, r2
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	021b      	lsls	r3, r3, #8
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4313      	orrs	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800298a:	3302      	adds	r3, #2
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	4413      	add	r3, r2
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	041b      	lsls	r3, r3, #16
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800299a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800299c:	3303      	adds	r3, #3
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	4413      	add	r3, r2
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	061b      	lsls	r3, r3, #24
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80029ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029ae:	3304      	adds	r3, #4
 80029b0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d90a      	bls.n	80029d2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4619      	mov	r1, r3
 80029c6:	4610      	mov	r0, r2
 80029c8:	f007 ff78 	bl	800a8bc <realloc>
 80029cc:	4602      	mov	r2, r0
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80029d8:	2300      	movs	r3, #0
 80029da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029dc:	e03e      	b.n	8002a5c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80029de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	441a      	add	r2, r3
 80029e4:	f107 030c 	add.w	r3, r7, #12
 80029e8:	4611      	mov	r1, r2
 80029ea:	4618      	mov	r0, r3
 80029ec:	f001 fed9 	bl	80047a2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80029f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029f2:	3304      	adds	r3, #4
 80029f4:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80029f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80029fa:	e00b      	b.n	8002a14 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a00:	441a      	add	r2, r3
 8002a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a04:	3b01      	subs	r3, #1
 8002a06:	6839      	ldr	r1, [r7, #0]
 8002a08:	440b      	add	r3, r1
 8002a0a:	7812      	ldrb	r2, [r2, #0]
 8002a0c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a10:	3301      	adds	r3, #1
 8002a12:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	4413      	add	r3, r2
 8002a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d3ed      	bcc.n	80029fc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002a20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	4413      	add	r3, r2
 8002a26:	3b01      	subs	r3, #1
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a32:	3b01      	subs	r3, #1
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	441a      	add	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002a3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4413      	add	r3, r2
 8002a42:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	3220      	adds	r2, #32
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a58:	3301      	adds	r3, #1
 8002a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d3bb      	bcc.n	80029de <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8002a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3738      	adds	r7, #56	@ 0x38
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	4b03      	ldr	r3, [pc, #12]	@ (8002a88 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	0800bcd0 	.word	0x0800bcd0

08002a8c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	4b03      	ldr	r3, [pc, #12]	@ (8002aa4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002a96:	4618      	mov	r0, r3
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	0800bb74 	.word	0x0800bb74

08002aa8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	611a      	str	r2, [r3, #16]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4618      	mov	r0, r3
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b082      	sub	sp, #8
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68d8      	ldr	r0, [r3, #12]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6891      	ldr	r1, [r2, #8]
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	4798      	blx	r3
 8002af4:	4603      	mov	r3, r0
  };
 8002af6:	4618      	mov	r0, r3
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
  }
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8002b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b30:	4618      	mov	r0, r3
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a0a      	ldr	r2, [pc, #40]	@ (8002b70 <_ZN13STM32HardwareC1Ev+0x34>)
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
    }
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	20000ca8 	.word	0x20000ca8

08002b74 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f804 	bl	8002b8a <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6818      	ldr	r0, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	f006 fd7c 	bl	800969c <HAL_UART_Receive_DMA>
    }
 8002ba4:	bf00      	nop
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <_ZN13STM32Hardware4readEv>:

    int read(){
 8002bac:	b590      	push	{r4, r7, lr}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002bb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002bb8:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f8d3 4204 	ldr.w	r4, [r3, #516]	@ 0x204
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7ff ffa8 	bl	8002b16 <_ZN13STM32Hardware10getRdmaIndEv>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	429c      	cmp	r4, r3
 8002bca:	bf14      	ite	ne
 8002bcc:	2301      	movne	r3, #1
 8002bce:	2300      	moveq	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d012      	beq.n	8002bfc <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002bdc:	1c59      	adds	r1, r3, #1
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	f8c2 1204 	str.w	r1, [r2, #516]	@ 0x204
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	4413      	add	r3, r2
 8002be8:	791b      	ldrb	r3, [r3, #4]
 8002bea:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002bf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      return c;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
    }
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd90      	pop	{r4, r7, pc}
	...

08002c08 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b20      	cmp	r3, #32
 8002c1c:	d108      	bne.n	8002c30 <_ZN13STM32Hardware5flushEv+0x28>
 8002c1e:	4b28      	ldr	r3, [pc, #160]	@ (8002cc0 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	f083 0301 	eor.w	r3, r3, #1
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <_ZN13STM32Hardware5flushEv+0x28>
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e000      	b.n	8002c32 <_ZN13STM32Hardware5flushEv+0x2a>
 8002c30:	2300      	movs	r3, #0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d03f      	beq.n	8002cb6 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8002c36:	4b22      	ldr	r3, [pc, #136]	@ (8002cc0 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d031      	beq.n	8002cb0 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d20a      	bcs.n	8002c72 <_ZN13STM32Hardware5flushEv+0x6a>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	e006      	b.n	8002c80 <_ZN13STM32Hardware5flushEv+0x78>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002c8c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	4413      	add	r3, r2
 8002c94:	89fa      	ldrh	r2, [r7, #14]
 8002c96:	4619      	mov	r1, r3
 8002c98:	f006 fc90 	bl	80095bc <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8002ca2:	89fb      	ldrh	r3, [r7, #14]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
        }
        mutex = false;
 8002cb0:	4b03      	ldr	r3, [pc, #12]	@ (8002cc0 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	701a      	strb	r2, [r3, #0]
      }
    }
 8002cb6:	bf00      	nop
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	2000015e 	.word	0x2000015e

08002cc4 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
      int n = length;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cda:	bfa8      	it	ge
 8002cdc:	f44f 7300 	movge.w	r3, #512	@ 0x200
 8002ce0:	617b      	str	r3, [r7, #20]

      int n_tail = n <= (int)(tbuflen - twind) ? n : (int)(tbuflen - twind);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002ce8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8002cec:	461a      	mov	r2, r3
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	bfa8      	it	ge
 8002cf4:	4613      	movge	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002cfe:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4413      	add	r3, r2
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	68b9      	ldr	r1, [r7, #8]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f008 f891 	bl	800ae32 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	4413      	add	r3, r2
 8002d1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

      if(n != n_tail){
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d00b      	beq.n	8002d44 <_ZN13STM32Hardware5writeEPhi+0x80>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f503 7002 	add.w	r0, r3, #520	@ 0x208
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	18d1      	adds	r1, r2, r3
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	461a      	mov	r2, r3
 8002d40:	f008 f877 	bl	800ae32 <memcpy>
      }

      flush();
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f7ff ff5f 	bl	8002c08 <_ZN13STM32Hardware5flushEv>
    }
 8002d4a:	bf00      	nop
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	f003 fb17 	bl	800638c <HAL_GetTick>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	4618      	mov	r0, r3
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
      data(0)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff f858 	bl	8001e28 <_ZN3ros3MsgC1Ev>
 8002d78:	4a05      	ldr	r2, [pc, #20]	@ (8002d90 <_ZN8std_msgs7Float32C1Ev+0x28>)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	605a      	str	r2, [r3, #4]
    {
    }
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	0800bd50 	.word	0x0800bd50

08002d94 <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002da8:	68b9      	ldr	r1, [r7, #8]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	4413      	add	r3, r2
 8002db0:	b2ca      	uxtb	r2, r1
 8002db2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	0a19      	lsrs	r1, r3, #8
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	b2ca      	uxtb	r2, r1
 8002dc2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	0c19      	lsrs	r1, r3, #16
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	3302      	adds	r3, #2
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	4413      	add	r3, r2
 8002dd0:	b2ca      	uxtb	r2, r1
 8002dd2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	0e19      	lsrs	r1, r3, #24
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	3303      	adds	r3, #3
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	4413      	add	r3, r2
 8002de0:	b2ca      	uxtb	r2, r1
 8002de2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	3304      	adds	r3, #4
 8002de8:	60fb      	str	r3, [r7, #12]
      return offset;
 8002dea:	68fb      	ldr	r3, [r7, #12]
    }
 8002dec:	4618      	mov	r0, r3
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e02:	2300      	movs	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 8002e06:	2300      	movs	r3, #0
 8002e08:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	6839      	ldr	r1, [r7, #0]
 8002e10:	440a      	add	r2, r1
 8002e12:	7812      	ldrb	r2, [r2, #0]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	6839      	ldr	r1, [r7, #0]
 8002e20:	440b      	add	r3, r1
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	021b      	lsls	r3, r3, #8
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	3302      	adds	r3, #2
 8002e30:	6839      	ldr	r1, [r7, #0]
 8002e32:	440b      	add	r3, r1
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	041b      	lsls	r3, r3, #16
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	3303      	adds	r3, #3
 8002e42:	6839      	ldr	r1, [r7, #0]
 8002e44:	440b      	add	r3, r1
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	061b      	lsls	r3, r3, #24
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	3304      	adds	r3, #4
 8002e58:	60fb      	str	r3, [r7, #12]
     return offset;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
    }
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <_ZN8std_msgs7Float327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32"; };
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	4b03      	ldr	r3, [pc, #12]	@ (8002e80 <_ZN8std_msgs7Float327getTypeEv+0x18>)
 8002e72:	4618      	mov	r0, r3
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	0800bb98 	.word	0x0800bb98

08002e84 <_ZN8std_msgs7Float326getMD5Ev>:
    virtual const char * getMD5() override { return "73fcbf46b49191e672908e50842a83d4"; };
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	4b03      	ldr	r3, [pc, #12]	@ (8002e9c <_ZN8std_msgs7Float326getMD5Ev+0x18>)
 8002e8e:	4618      	mov	r0, r3
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	0800bbac 	.word	0x0800bbac

08002ea0 <_ZN9krsbi202525BallPositionBasedOnCameraC1Ev>:
      typedef int64_t _x_real_type;
      _x_real_type x_real;
      typedef int64_t _y_real_type;
      _y_real_type y_real;

    BallPositionBasedOnCamera():
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
      distance(0),
      angle(0),
      x_on_camera(0),
      y_on_camera(0),
      x_real(0),
      y_real(0)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fe ffbc 	bl	8001e28 <_ZN3ros3MsgC1Ev>
 8002eb0:	4a18      	ldr	r2, [pc, #96]	@ (8002f14 <_ZN9krsbi202525BallPositionBasedOnCameraC1Ev+0x74>)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	601a      	str	r2, [r3, #0]
      distance(0),
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	e9c1 2302 	strd	r2, r3, [r1, #8]
      angle(0),
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	f04f 0200 	mov.w	r2, #0
 8002eca:	f04f 0300 	mov.w	r3, #0
 8002ece:	e9c1 2304 	strd	r2, r3, [r1, #16]
      x_on_camera(0),
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	e9c1 2306 	strd	r2, r3, [r1, #24]
      y_on_camera(0),
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	e9c1 2308 	strd	r2, r3, [r1, #32]
      x_real(0),
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	f04f 0300 	mov.w	r3, #0
 8002ef8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
      y_real(0)
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    {
    }
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	0800bd38 	.word	0x0800bd38

08002f18 <_ZNK9krsbi202525BallPositionBasedOnCamera9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002f18:	b480      	push	{r7}
 8002f1a:	b091      	sub	sp, #68	@ 0x44
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f22:	2300      	movs	r3, #0
 8002f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
      union {
        int64_t real;
        uint64_t base;
      } u_distance;
      u_distance.real = this->distance;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002f2c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
      *(outbuffer + offset + 0) = (u_distance.base >> (8 * 0)) & 0xFF;
 8002f30:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002f34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f36:	6838      	ldr	r0, [r7, #0]
 8002f38:	4401      	add	r1, r0
 8002f3a:	b2d3      	uxtb	r3, r2
 8002f3c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_distance.base >> (8 * 1)) & 0xFF;
 8002f3e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	0a02      	lsrs	r2, r0, #8
 8002f4c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002f50:	0a0b      	lsrs	r3, r1, #8
 8002f52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f54:	3101      	adds	r1, #1
 8002f56:	6838      	ldr	r0, [r7, #0]
 8002f58:	4401      	add	r1, r0
 8002f5a:	b2d3      	uxtb	r3, r2
 8002f5c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_distance.base >> (8 * 2)) & 0xFF;
 8002f5e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002f62:	f04f 0200 	mov.w	r2, #0
 8002f66:	f04f 0300 	mov.w	r3, #0
 8002f6a:	0c02      	lsrs	r2, r0, #16
 8002f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002f70:	0c0b      	lsrs	r3, r1, #16
 8002f72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f74:	3102      	adds	r1, #2
 8002f76:	6838      	ldr	r0, [r7, #0]
 8002f78:	4401      	add	r1, r0
 8002f7a:	b2d3      	uxtb	r3, r2
 8002f7c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_distance.base >> (8 * 3)) & 0xFF;
 8002f7e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	f04f 0300 	mov.w	r3, #0
 8002f8a:	0e02      	lsrs	r2, r0, #24
 8002f8c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002f90:	0e0b      	lsrs	r3, r1, #24
 8002f92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f94:	3103      	adds	r1, #3
 8002f96:	6838      	ldr	r0, [r7, #0]
 8002f98:	4401      	add	r1, r0
 8002f9a:	b2d3      	uxtb	r3, r2
 8002f9c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_distance.base >> (8 * 4)) & 0xFF;
 8002f9e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	f04f 0300 	mov.w	r3, #0
 8002faa:	000a      	movs	r2, r1
 8002fac:	2300      	movs	r3, #0
 8002fae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002fb0:	3104      	adds	r1, #4
 8002fb2:	6838      	ldr	r0, [r7, #0]
 8002fb4:	4401      	add	r1, r0
 8002fb6:	b2d3      	uxtb	r3, r2
 8002fb8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_distance.base >> (8 * 5)) & 0xFF;
 8002fba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002fbe:	f04f 0200 	mov.w	r2, #0
 8002fc2:	f04f 0300 	mov.w	r3, #0
 8002fc6:	0a0a      	lsrs	r2, r1, #8
 8002fc8:	2300      	movs	r3, #0
 8002fca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002fcc:	3105      	adds	r1, #5
 8002fce:	6838      	ldr	r0, [r7, #0]
 8002fd0:	4401      	add	r1, r0
 8002fd2:	b2d3      	uxtb	r3, r2
 8002fd4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_distance.base >> (8 * 6)) & 0xFF;
 8002fd6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	f04f 0300 	mov.w	r3, #0
 8002fe2:	0c0a      	lsrs	r2, r1, #16
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002fe8:	3106      	adds	r1, #6
 8002fea:	6838      	ldr	r0, [r7, #0]
 8002fec:	4401      	add	r1, r0
 8002fee:	b2d3      	uxtb	r3, r2
 8002ff0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_distance.base >> (8 * 7)) & 0xFF;
 8002ff2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	f04f 0300 	mov.w	r3, #0
 8002ffe:	0e0a      	lsrs	r2, r1, #24
 8003000:	2300      	movs	r3, #0
 8003002:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003004:	3107      	adds	r1, #7
 8003006:	6838      	ldr	r0, [r7, #0]
 8003008:	4401      	add	r1, r0
 800300a:	b2d3      	uxtb	r3, r2
 800300c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->distance);
 800300e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003010:	3308      	adds	r3, #8
 8003012:	63fb      	str	r3, [r7, #60]	@ 0x3c
      union {
        int64_t real;
        uint64_t base;
      } u_angle;
      u_angle.real = this->angle;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800301a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
      *(outbuffer + offset + 0) = (u_angle.base >> (8 * 0)) & 0xFF;
 800301e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003022:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003024:	6838      	ldr	r0, [r7, #0]
 8003026:	4401      	add	r1, r0
 8003028:	b2d3      	uxtb	r3, r2
 800302a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_angle.base >> (8 * 1)) & 0xFF;
 800302c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	f04f 0300 	mov.w	r3, #0
 8003038:	0a02      	lsrs	r2, r0, #8
 800303a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800303e:	0a0b      	lsrs	r3, r1, #8
 8003040:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003042:	3101      	adds	r1, #1
 8003044:	6838      	ldr	r0, [r7, #0]
 8003046:	4401      	add	r1, r0
 8003048:	b2d3      	uxtb	r3, r2
 800304a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_angle.base >> (8 * 2)) & 0xFF;
 800304c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	0c02      	lsrs	r2, r0, #16
 800305a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800305e:	0c0b      	lsrs	r3, r1, #16
 8003060:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003062:	3102      	adds	r1, #2
 8003064:	6838      	ldr	r0, [r7, #0]
 8003066:	4401      	add	r1, r0
 8003068:	b2d3      	uxtb	r3, r2
 800306a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_angle.base >> (8 * 3)) & 0xFF;
 800306c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	0e02      	lsrs	r2, r0, #24
 800307a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800307e:	0e0b      	lsrs	r3, r1, #24
 8003080:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003082:	3103      	adds	r1, #3
 8003084:	6838      	ldr	r0, [r7, #0]
 8003086:	4401      	add	r1, r0
 8003088:	b2d3      	uxtb	r3, r2
 800308a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_angle.base >> (8 * 4)) & 0xFF;
 800308c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	000a      	movs	r2, r1
 800309a:	2300      	movs	r3, #0
 800309c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800309e:	3104      	adds	r1, #4
 80030a0:	6838      	ldr	r0, [r7, #0]
 80030a2:	4401      	add	r1, r0
 80030a4:	b2d3      	uxtb	r3, r2
 80030a6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_angle.base >> (8 * 5)) & 0xFF;
 80030a8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	0a0a      	lsrs	r2, r1, #8
 80030b6:	2300      	movs	r3, #0
 80030b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80030ba:	3105      	adds	r1, #5
 80030bc:	6838      	ldr	r0, [r7, #0]
 80030be:	4401      	add	r1, r0
 80030c0:	b2d3      	uxtb	r3, r2
 80030c2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_angle.base >> (8 * 6)) & 0xFF;
 80030c4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	0c0a      	lsrs	r2, r1, #16
 80030d2:	2300      	movs	r3, #0
 80030d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80030d6:	3106      	adds	r1, #6
 80030d8:	6838      	ldr	r0, [r7, #0]
 80030da:	4401      	add	r1, r0
 80030dc:	b2d3      	uxtb	r3, r2
 80030de:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_angle.base >> (8 * 7)) & 0xFF;
 80030e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	0e0a      	lsrs	r2, r1, #24
 80030ee:	2300      	movs	r3, #0
 80030f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80030f2:	3107      	adds	r1, #7
 80030f4:	6838      	ldr	r0, [r7, #0]
 80030f6:	4401      	add	r1, r0
 80030f8:	b2d3      	uxtb	r3, r2
 80030fa:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->angle);
 80030fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030fe:	3308      	adds	r3, #8
 8003100:	63fb      	str	r3, [r7, #60]	@ 0x3c
      union {
        int64_t real;
        uint64_t base;
      } u_x_on_camera;
      u_x_on_camera.real = this->x_on_camera;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003108:	e9c7 2308 	strd	r2, r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_x_on_camera.base >> (8 * 0)) & 0xFF;
 800310c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003110:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003112:	6838      	ldr	r0, [r7, #0]
 8003114:	4401      	add	r1, r0
 8003116:	b2d3      	uxtb	r3, r2
 8003118:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x_on_camera.base >> (8 * 1)) & 0xFF;
 800311a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	f04f 0300 	mov.w	r3, #0
 8003126:	0a02      	lsrs	r2, r0, #8
 8003128:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800312c:	0a0b      	lsrs	r3, r1, #8
 800312e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003130:	3101      	adds	r1, #1
 8003132:	6838      	ldr	r0, [r7, #0]
 8003134:	4401      	add	r1, r0
 8003136:	b2d3      	uxtb	r3, r2
 8003138:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x_on_camera.base >> (8 * 2)) & 0xFF;
 800313a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800313e:	f04f 0200 	mov.w	r2, #0
 8003142:	f04f 0300 	mov.w	r3, #0
 8003146:	0c02      	lsrs	r2, r0, #16
 8003148:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800314c:	0c0b      	lsrs	r3, r1, #16
 800314e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003150:	3102      	adds	r1, #2
 8003152:	6838      	ldr	r0, [r7, #0]
 8003154:	4401      	add	r1, r0
 8003156:	b2d3      	uxtb	r3, r2
 8003158:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x_on_camera.base >> (8 * 3)) & 0xFF;
 800315a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	0e02      	lsrs	r2, r0, #24
 8003168:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800316c:	0e0b      	lsrs	r3, r1, #24
 800316e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003170:	3103      	adds	r1, #3
 8003172:	6838      	ldr	r0, [r7, #0]
 8003174:	4401      	add	r1, r0
 8003176:	b2d3      	uxtb	r3, r2
 8003178:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x_on_camera.base >> (8 * 4)) & 0xFF;
 800317a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800317e:	f04f 0200 	mov.w	r2, #0
 8003182:	f04f 0300 	mov.w	r3, #0
 8003186:	000a      	movs	r2, r1
 8003188:	2300      	movs	r3, #0
 800318a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800318c:	3104      	adds	r1, #4
 800318e:	6838      	ldr	r0, [r7, #0]
 8003190:	4401      	add	r1, r0
 8003192:	b2d3      	uxtb	r3, r2
 8003194:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x_on_camera.base >> (8 * 5)) & 0xFF;
 8003196:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800319a:	f04f 0200 	mov.w	r2, #0
 800319e:	f04f 0300 	mov.w	r3, #0
 80031a2:	0a0a      	lsrs	r2, r1, #8
 80031a4:	2300      	movs	r3, #0
 80031a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031a8:	3105      	adds	r1, #5
 80031aa:	6838      	ldr	r0, [r7, #0]
 80031ac:	4401      	add	r1, r0
 80031ae:	b2d3      	uxtb	r3, r2
 80031b0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x_on_camera.base >> (8 * 6)) & 0xFF;
 80031b2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	f04f 0300 	mov.w	r3, #0
 80031be:	0c0a      	lsrs	r2, r1, #16
 80031c0:	2300      	movs	r3, #0
 80031c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031c4:	3106      	adds	r1, #6
 80031c6:	6838      	ldr	r0, [r7, #0]
 80031c8:	4401      	add	r1, r0
 80031ca:	b2d3      	uxtb	r3, r2
 80031cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x_on_camera.base >> (8 * 7)) & 0xFF;
 80031ce:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80031d2:	f04f 0200 	mov.w	r2, #0
 80031d6:	f04f 0300 	mov.w	r3, #0
 80031da:	0e0a      	lsrs	r2, r1, #24
 80031dc:	2300      	movs	r3, #0
 80031de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031e0:	3107      	adds	r1, #7
 80031e2:	6838      	ldr	r0, [r7, #0]
 80031e4:	4401      	add	r1, r0
 80031e6:	b2d3      	uxtb	r3, r2
 80031e8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x_on_camera);
 80031ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031ec:	3308      	adds	r3, #8
 80031ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      union {
        int64_t real;
        uint64_t base;
      } u_y_on_camera;
      u_y_on_camera.real = this->y_on_camera;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80031f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_y_on_camera.base >> (8 * 0)) & 0xFF;
 80031fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003200:	6838      	ldr	r0, [r7, #0]
 8003202:	4401      	add	r1, r0
 8003204:	b2d3      	uxtb	r3, r2
 8003206:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y_on_camera.base >> (8 * 1)) & 0xFF;
 8003208:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800320c:	f04f 0200 	mov.w	r2, #0
 8003210:	f04f 0300 	mov.w	r3, #0
 8003214:	0a02      	lsrs	r2, r0, #8
 8003216:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800321a:	0a0b      	lsrs	r3, r1, #8
 800321c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800321e:	3101      	adds	r1, #1
 8003220:	6838      	ldr	r0, [r7, #0]
 8003222:	4401      	add	r1, r0
 8003224:	b2d3      	uxtb	r3, r2
 8003226:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y_on_camera.base >> (8 * 2)) & 0xFF;
 8003228:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	f04f 0300 	mov.w	r3, #0
 8003234:	0c02      	lsrs	r2, r0, #16
 8003236:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800323a:	0c0b      	lsrs	r3, r1, #16
 800323c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800323e:	3102      	adds	r1, #2
 8003240:	6838      	ldr	r0, [r7, #0]
 8003242:	4401      	add	r1, r0
 8003244:	b2d3      	uxtb	r3, r2
 8003246:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y_on_camera.base >> (8 * 3)) & 0xFF;
 8003248:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	0e02      	lsrs	r2, r0, #24
 8003256:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800325a:	0e0b      	lsrs	r3, r1, #24
 800325c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800325e:	3103      	adds	r1, #3
 8003260:	6838      	ldr	r0, [r7, #0]
 8003262:	4401      	add	r1, r0
 8003264:	b2d3      	uxtb	r3, r2
 8003266:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y_on_camera.base >> (8 * 4)) & 0xFF;
 8003268:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	000a      	movs	r2, r1
 8003276:	2300      	movs	r3, #0
 8003278:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800327a:	3104      	adds	r1, #4
 800327c:	6838      	ldr	r0, [r7, #0]
 800327e:	4401      	add	r1, r0
 8003280:	b2d3      	uxtb	r3, r2
 8003282:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y_on_camera.base >> (8 * 5)) & 0xFF;
 8003284:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	0a0a      	lsrs	r2, r1, #8
 8003292:	2300      	movs	r3, #0
 8003294:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003296:	3105      	adds	r1, #5
 8003298:	6838      	ldr	r0, [r7, #0]
 800329a:	4401      	add	r1, r0
 800329c:	b2d3      	uxtb	r3, r2
 800329e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y_on_camera.base >> (8 * 6)) & 0xFF;
 80032a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032a4:	f04f 0200 	mov.w	r2, #0
 80032a8:	f04f 0300 	mov.w	r3, #0
 80032ac:	0c0a      	lsrs	r2, r1, #16
 80032ae:	2300      	movs	r3, #0
 80032b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80032b2:	3106      	adds	r1, #6
 80032b4:	6838      	ldr	r0, [r7, #0]
 80032b6:	4401      	add	r1, r0
 80032b8:	b2d3      	uxtb	r3, r2
 80032ba:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y_on_camera.base >> (8 * 7)) & 0xFF;
 80032bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	f04f 0300 	mov.w	r3, #0
 80032c8:	0e0a      	lsrs	r2, r1, #24
 80032ca:	2300      	movs	r3, #0
 80032cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80032ce:	3107      	adds	r1, #7
 80032d0:	6838      	ldr	r0, [r7, #0]
 80032d2:	4401      	add	r1, r0
 80032d4:	b2d3      	uxtb	r3, r2
 80032d6:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y_on_camera);
 80032d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032da:	3308      	adds	r3, #8
 80032dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      union {
        int64_t real;
        uint64_t base;
      } u_x_real;
      u_x_real.real = this->x_real;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80032e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_x_real.base >> (8 * 0)) & 0xFF;
 80032e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80032ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80032ee:	6838      	ldr	r0, [r7, #0]
 80032f0:	4401      	add	r1, r0
 80032f2:	b2d3      	uxtb	r3, r2
 80032f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x_real.base >> (8 * 1)) & 0xFF;
 80032f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80032fa:	f04f 0200 	mov.w	r2, #0
 80032fe:	f04f 0300 	mov.w	r3, #0
 8003302:	0a02      	lsrs	r2, r0, #8
 8003304:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003308:	0a0b      	lsrs	r3, r1, #8
 800330a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800330c:	3101      	adds	r1, #1
 800330e:	6838      	ldr	r0, [r7, #0]
 8003310:	4401      	add	r1, r0
 8003312:	b2d3      	uxtb	r3, r2
 8003314:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x_real.base >> (8 * 2)) & 0xFF;
 8003316:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	f04f 0300 	mov.w	r3, #0
 8003322:	0c02      	lsrs	r2, r0, #16
 8003324:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003328:	0c0b      	lsrs	r3, r1, #16
 800332a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800332c:	3102      	adds	r1, #2
 800332e:	6838      	ldr	r0, [r7, #0]
 8003330:	4401      	add	r1, r0
 8003332:	b2d3      	uxtb	r3, r2
 8003334:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x_real.base >> (8 * 3)) & 0xFF;
 8003336:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	0e02      	lsrs	r2, r0, #24
 8003344:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003348:	0e0b      	lsrs	r3, r1, #24
 800334a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800334c:	3103      	adds	r1, #3
 800334e:	6838      	ldr	r0, [r7, #0]
 8003350:	4401      	add	r1, r0
 8003352:	b2d3      	uxtb	r3, r2
 8003354:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x_real.base >> (8 * 4)) & 0xFF;
 8003356:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	f04f 0300 	mov.w	r3, #0
 8003362:	000a      	movs	r2, r1
 8003364:	2300      	movs	r3, #0
 8003366:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003368:	3104      	adds	r1, #4
 800336a:	6838      	ldr	r0, [r7, #0]
 800336c:	4401      	add	r1, r0
 800336e:	b2d3      	uxtb	r3, r2
 8003370:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x_real.base >> (8 * 5)) & 0xFF;
 8003372:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	0a0a      	lsrs	r2, r1, #8
 8003380:	2300      	movs	r3, #0
 8003382:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003384:	3105      	adds	r1, #5
 8003386:	6838      	ldr	r0, [r7, #0]
 8003388:	4401      	add	r1, r0
 800338a:	b2d3      	uxtb	r3, r2
 800338c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x_real.base >> (8 * 6)) & 0xFF;
 800338e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	0c0a      	lsrs	r2, r1, #16
 800339c:	2300      	movs	r3, #0
 800339e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80033a0:	3106      	adds	r1, #6
 80033a2:	6838      	ldr	r0, [r7, #0]
 80033a4:	4401      	add	r1, r0
 80033a6:	b2d3      	uxtb	r3, r2
 80033a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x_real.base >> (8 * 7)) & 0xFF;
 80033aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	f04f 0300 	mov.w	r3, #0
 80033b6:	0e0a      	lsrs	r2, r1, #24
 80033b8:	2300      	movs	r3, #0
 80033ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80033bc:	3107      	adds	r1, #7
 80033be:	6838      	ldr	r0, [r7, #0]
 80033c0:	4401      	add	r1, r0
 80033c2:	b2d3      	uxtb	r3, r2
 80033c4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x_real);
 80033c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033c8:	3308      	adds	r3, #8
 80033ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      union {
        int64_t real;
        uint64_t base;
      } u_y_real;
      u_y_real.real = this->y_real;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80033d2:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_y_real.base >> (8 * 0)) & 0xFF;
 80033d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80033dc:	6838      	ldr	r0, [r7, #0]
 80033de:	4401      	add	r1, r0
 80033e0:	b2d3      	uxtb	r3, r2
 80033e2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y_real.base >> (8 * 1)) & 0xFF;
 80033e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	0a02      	lsrs	r2, r0, #8
 80033f2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80033f6:	0a0b      	lsrs	r3, r1, #8
 80033f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80033fa:	3101      	adds	r1, #1
 80033fc:	6838      	ldr	r0, [r7, #0]
 80033fe:	4401      	add	r1, r0
 8003400:	b2d3      	uxtb	r3, r2
 8003402:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y_real.base >> (8 * 2)) & 0xFF;
 8003404:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	0c02      	lsrs	r2, r0, #16
 8003412:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003416:	0c0b      	lsrs	r3, r1, #16
 8003418:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800341a:	3102      	adds	r1, #2
 800341c:	6838      	ldr	r0, [r7, #0]
 800341e:	4401      	add	r1, r0
 8003420:	b2d3      	uxtb	r3, r2
 8003422:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y_real.base >> (8 * 3)) & 0xFF;
 8003424:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	f04f 0300 	mov.w	r3, #0
 8003430:	0e02      	lsrs	r2, r0, #24
 8003432:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003436:	0e0b      	lsrs	r3, r1, #24
 8003438:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800343a:	3103      	adds	r1, #3
 800343c:	6838      	ldr	r0, [r7, #0]
 800343e:	4401      	add	r1, r0
 8003440:	b2d3      	uxtb	r3, r2
 8003442:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y_real.base >> (8 * 4)) & 0xFF;
 8003444:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	f04f 0300 	mov.w	r3, #0
 8003450:	000a      	movs	r2, r1
 8003452:	2300      	movs	r3, #0
 8003454:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003456:	3104      	adds	r1, #4
 8003458:	6838      	ldr	r0, [r7, #0]
 800345a:	4401      	add	r1, r0
 800345c:	b2d3      	uxtb	r3, r2
 800345e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y_real.base >> (8 * 5)) & 0xFF;
 8003460:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	0a0a      	lsrs	r2, r1, #8
 800346e:	2300      	movs	r3, #0
 8003470:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003472:	3105      	adds	r1, #5
 8003474:	6838      	ldr	r0, [r7, #0]
 8003476:	4401      	add	r1, r0
 8003478:	b2d3      	uxtb	r3, r2
 800347a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y_real.base >> (8 * 6)) & 0xFF;
 800347c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003480:	f04f 0200 	mov.w	r2, #0
 8003484:	f04f 0300 	mov.w	r3, #0
 8003488:	0c0a      	lsrs	r2, r1, #16
 800348a:	2300      	movs	r3, #0
 800348c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800348e:	3106      	adds	r1, #6
 8003490:	6838      	ldr	r0, [r7, #0]
 8003492:	4401      	add	r1, r0
 8003494:	b2d3      	uxtb	r3, r2
 8003496:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y_real.base >> (8 * 7)) & 0xFF;
 8003498:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	f04f 0300 	mov.w	r3, #0
 80034a4:	0e0a      	lsrs	r2, r1, #24
 80034a6:	2300      	movs	r3, #0
 80034a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80034aa:	3107      	adds	r1, #7
 80034ac:	6838      	ldr	r0, [r7, #0]
 80034ae:	4401      	add	r1, r0
 80034b0:	b2d3      	uxtb	r3, r2
 80034b2:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y_real);
 80034b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034b6:	3308      	adds	r3, #8
 80034b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      return offset;
 80034ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
 80034bc:	4618      	mov	r0, r3
 80034be:	3744      	adds	r7, #68	@ 0x44
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <_ZN9krsbi202525BallPositionBasedOnCamera11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80034c8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80034cc:	f5ad 7d57 	sub.w	sp, sp, #860	@ 0x35c
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	f8c7 031c 	str.w	r0, [r7, #796]	@ 0x31c
 80034d6:	f8c7 1318 	str.w	r1, [r7, #792]	@ 0x318
    {
      int offset = 0;
 80034da:	2300      	movs	r3, #0
 80034dc:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      union {
        int64_t real;
        uint64_t base;
      } u_distance;
      u_distance.base = 0;
 80034e0:	f04f 0200 	mov.w	r2, #0
 80034e4:	f04f 0300 	mov.w	r3, #0
 80034e8:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
      u_distance.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80034ec:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 80034f0:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 80034f4:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80034f8:	4413      	add	r3, r2
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2200      	movs	r2, #0
 8003500:	461c      	mov	r4, r3
 8003502:	4615      	mov	r5, r2
 8003504:	ea40 0804 	orr.w	r8, r0, r4
 8003508:	ea41 0905 	orr.w	r9, r1, r5
 800350c:	e9c7 89d2 	strd	r8, r9, [r7, #840]	@ 0x348
      u_distance.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003510:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 8003514:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 800351e:	4413      	add	r3, r2
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2200      	movs	r2, #0
 8003526:	469a      	mov	sl, r3
 8003528:	4693      	mov	fp, r2
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003536:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800353a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800353e:	ea40 0402 	orr.w	r4, r0, r2
 8003542:	f8c7 4310 	str.w	r4, [r7, #784]	@ 0x310
 8003546:	430b      	orrs	r3, r1
 8003548:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
 800354c:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	@ 0x310
 8003550:	e9c7 34d2 	strd	r3, r4, [r7, #840]	@ 0x348
      u_distance.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003554:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 8003558:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800355c:	1c9a      	adds	r2, r3, #2
 800355e:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003562:	4413      	add	r3, r2
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2200      	movs	r2, #0
 800356a:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
 800356e:	f8c7 230c 	str.w	r2, [r7, #780]	@ 0x30c
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	f04f 0300 	mov.w	r3, #0
 800357a:	e9d7 89c2 	ldrd	r8, r9, [r7, #776]	@ 0x308
 800357e:	464c      	mov	r4, r9
 8003580:	0423      	lsls	r3, r4, #16
 8003582:	4644      	mov	r4, r8
 8003584:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003588:	4644      	mov	r4, r8
 800358a:	0422      	lsls	r2, r4, #16
 800358c:	ea40 0402 	orr.w	r4, r0, r2
 8003590:	f8c7 4300 	str.w	r4, [r7, #768]	@ 0x300
 8003594:	430b      	orrs	r3, r1
 8003596:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
 800359a:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	@ 0x300
 800359e:	e9c7 34d2 	strd	r3, r4, [r7, #840]	@ 0x348
      u_distance.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80035a2:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 80035a6:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80035aa:	1cda      	adds	r2, r3, #3
 80035ac:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80035b0:	4413      	add	r3, r2
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2200      	movs	r2, #0
 80035b8:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 80035bc:	f8c7 22fc 	str.w	r2, [r7, #764]	@ 0x2fc
 80035c0:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	@ 0x2f8
 80035c4:	4623      	mov	r3, r4
 80035c6:	0a1b      	lsrs	r3, r3, #8
 80035c8:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 80035cc:	4623      	mov	r3, r4
 80035ce:	061b      	lsls	r3, r3, #24
 80035d0:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 80035d4:	e9d7 45bc 	ldrd	r4, r5, [r7, #752]	@ 0x2f0
 80035d8:	4623      	mov	r3, r4
 80035da:	4303      	orrs	r3, r0
 80035dc:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
 80035e0:	462b      	mov	r3, r5
 80035e2:	430b      	orrs	r3, r1
 80035e4:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 80035e8:	e9d7 34ba 	ldrd	r3, r4, [r7, #744]	@ 0x2e8
 80035ec:	e9c7 34d2 	strd	r3, r4, [r7, #840]	@ 0x348
      u_distance.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80035f0:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 80035f4:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80035f8:	1d1a      	adds	r2, r3, #4
 80035fa:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80035fe:	4413      	add	r3, r2
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2200      	movs	r2, #0
 8003606:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 800360a:	f8c7 22e4 	str.w	r2, [r7, #740]	@ 0x2e4
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	f8d7 42e0 	ldr.w	r4, [r7, #736]	@ 0x2e0
 800361a:	0023      	movs	r3, r4
 800361c:	2200      	movs	r2, #0
 800361e:	ea40 0402 	orr.w	r4, r0, r2
 8003622:	f8c7 42d8 	str.w	r4, [r7, #728]	@ 0x2d8
 8003626:	430b      	orrs	r3, r1
 8003628:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
 800362c:	e9d7 34b6 	ldrd	r3, r4, [r7, #728]	@ 0x2d8
 8003630:	e9c7 34d2 	strd	r3, r4, [r7, #840]	@ 0x348
      u_distance.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003634:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 8003638:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800363c:	1d5a      	adds	r2, r3, #5
 800363e:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003642:	4413      	add	r3, r2
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2200      	movs	r2, #0
 800364a:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 800364e:	f8c7 22d4 	str.w	r2, [r7, #724]	@ 0x2d4
 8003652:	f04f 0200 	mov.w	r2, #0
 8003656:	f04f 0300 	mov.w	r3, #0
 800365a:	f8d7 42d0 	ldr.w	r4, [r7, #720]	@ 0x2d0
 800365e:	0223      	lsls	r3, r4, #8
 8003660:	2200      	movs	r2, #0
 8003662:	ea40 0402 	orr.w	r4, r0, r2
 8003666:	f8c7 42c8 	str.w	r4, [r7, #712]	@ 0x2c8
 800366a:	430b      	orrs	r3, r1
 800366c:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
 8003670:	e9d7 34b2 	ldrd	r3, r4, [r7, #712]	@ 0x2c8
 8003674:	e9c7 34d2 	strd	r3, r4, [r7, #840]	@ 0x348
      u_distance.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003678:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 800367c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003680:	1d9a      	adds	r2, r3, #6
 8003682:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003686:	4413      	add	r3, r2
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2200      	movs	r2, #0
 800368e:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
 8003692:	f8c7 22c4 	str.w	r2, [r7, #708]	@ 0x2c4
 8003696:	f04f 0200 	mov.w	r2, #0
 800369a:	f04f 0300 	mov.w	r3, #0
 800369e:	f8d7 42c0 	ldr.w	r4, [r7, #704]	@ 0x2c0
 80036a2:	0423      	lsls	r3, r4, #16
 80036a4:	2200      	movs	r2, #0
 80036a6:	ea40 0402 	orr.w	r4, r0, r2
 80036aa:	f8c7 42b8 	str.w	r4, [r7, #696]	@ 0x2b8
 80036ae:	430b      	orrs	r3, r1
 80036b0:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
 80036b4:	e9d7 34ae 	ldrd	r3, r4, [r7, #696]	@ 0x2b8
 80036b8:	e9c7 34d2 	strd	r3, r4, [r7, #840]	@ 0x348
      u_distance.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80036bc:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 80036c0:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80036c4:	1dda      	adds	r2, r3, #7
 80036c6:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80036ca:	4413      	add	r3, r2
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2200      	movs	r2, #0
 80036d2:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 80036d6:	f8c7 22b4 	str.w	r2, [r7, #692]	@ 0x2b4
 80036da:	f04f 0200 	mov.w	r2, #0
 80036de:	f04f 0300 	mov.w	r3, #0
 80036e2:	f8d7 42b0 	ldr.w	r4, [r7, #688]	@ 0x2b0
 80036e6:	0623      	lsls	r3, r4, #24
 80036e8:	2200      	movs	r2, #0
 80036ea:	ea40 0402 	orr.w	r4, r0, r2
 80036ee:	f8c7 42a8 	str.w	r4, [r7, #680]	@ 0x2a8
 80036f2:	430b      	orrs	r3, r1
 80036f4:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 80036f8:	e9d7 34aa 	ldrd	r3, r4, [r7, #680]	@ 0x2a8
 80036fc:	e9c7 34d2 	strd	r3, r4, [r7, #840]	@ 0x348
      this->distance = u_distance.real;
 8003700:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 8003704:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8003708:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->distance);
 800370c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003710:	3308      	adds	r3, #8
 8003712:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      union {
        int64_t real;
        uint64_t base;
      } u_angle;
      u_angle.base = 0;
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	f04f 0300 	mov.w	r3, #0
 800371e:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
      u_angle.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003722:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	@ 0x340
 8003726:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 800372a:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 800372e:	4413      	add	r3, r2
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2200      	movs	r2, #0
 8003736:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 800373a:	f8c7 22a4 	str.w	r2, [r7, #676]	@ 0x2a4
 800373e:	e9d7 45a8 	ldrd	r4, r5, [r7, #672]	@ 0x2a0
 8003742:	4623      	mov	r3, r4
 8003744:	4303      	orrs	r3, r0
 8003746:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 800374a:	462b      	mov	r3, r5
 800374c:	430b      	orrs	r3, r1
 800374e:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8003752:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	@ 0x298
 8003756:	e9c7 34d0 	strd	r3, r4, [r7, #832]	@ 0x340
      u_angle.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800375a:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	@ 0x340
 800375e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003768:	4413      	add	r3, r2
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2200      	movs	r2, #0
 8003770:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8003774:	f8c7 2294 	str.w	r2, [r7, #660]	@ 0x294
 8003778:	f04f 0200 	mov.w	r2, #0
 800377c:	f04f 0300 	mov.w	r3, #0
 8003780:	e9d7 89a4 	ldrd	r8, r9, [r7, #656]	@ 0x290
 8003784:	464c      	mov	r4, r9
 8003786:	0223      	lsls	r3, r4, #8
 8003788:	4644      	mov	r4, r8
 800378a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800378e:	4644      	mov	r4, r8
 8003790:	0222      	lsls	r2, r4, #8
 8003792:	ea40 0402 	orr.w	r4, r0, r2
 8003796:	f8c7 4288 	str.w	r4, [r7, #648]	@ 0x288
 800379a:	430b      	orrs	r3, r1
 800379c:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 80037a0:	e9d7 34a2 	ldrd	r3, r4, [r7, #648]	@ 0x288
 80037a4:	e9c7 34d0 	strd	r3, r4, [r7, #832]	@ 0x340
      u_angle.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80037a8:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	@ 0x340
 80037ac:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80037b0:	1c9a      	adds	r2, r3, #2
 80037b2:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80037b6:	4413      	add	r3, r2
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2200      	movs	r2, #0
 80037be:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 80037c2:	f8c7 2284 	str.w	r2, [r7, #644]	@ 0x284
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	f04f 0300 	mov.w	r3, #0
 80037ce:	e9d7 89a0 	ldrd	r8, r9, [r7, #640]	@ 0x280
 80037d2:	464c      	mov	r4, r9
 80037d4:	0423      	lsls	r3, r4, #16
 80037d6:	4644      	mov	r4, r8
 80037d8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80037dc:	4644      	mov	r4, r8
 80037de:	0422      	lsls	r2, r4, #16
 80037e0:	ea40 0402 	orr.w	r4, r0, r2
 80037e4:	f8c7 4278 	str.w	r4, [r7, #632]	@ 0x278
 80037e8:	430b      	orrs	r3, r1
 80037ea:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 80037ee:	e9d7 349e 	ldrd	r3, r4, [r7, #632]	@ 0x278
 80037f2:	e9c7 34d0 	strd	r3, r4, [r7, #832]	@ 0x340
      u_angle.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80037f6:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	@ 0x340
 80037fa:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80037fe:	1cda      	adds	r2, r3, #3
 8003800:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003804:	4413      	add	r3, r2
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2200      	movs	r2, #0
 800380c:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 8003810:	f8c7 2274 	str.w	r2, [r7, #628]	@ 0x274
 8003814:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	@ 0x270
 8003818:	4623      	mov	r3, r4
 800381a:	0a1b      	lsrs	r3, r3, #8
 800381c:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 8003820:	4623      	mov	r3, r4
 8003822:	061b      	lsls	r3, r3, #24
 8003824:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 8003828:	e9d7 459a 	ldrd	r4, r5, [r7, #616]	@ 0x268
 800382c:	4623      	mov	r3, r4
 800382e:	4303      	orrs	r3, r0
 8003830:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 8003834:	462b      	mov	r3, r5
 8003836:	430b      	orrs	r3, r1
 8003838:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
 800383c:	e9d7 3498 	ldrd	r3, r4, [r7, #608]	@ 0x260
 8003840:	e9c7 34d0 	strd	r3, r4, [r7, #832]	@ 0x340
      u_angle.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003844:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	@ 0x340
 8003848:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800384c:	1d1a      	adds	r2, r3, #4
 800384e:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003852:	4413      	add	r3, r2
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2200      	movs	r2, #0
 800385a:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 800385e:	f8c7 225c 	str.w	r2, [r7, #604]	@ 0x25c
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	f04f 0300 	mov.w	r3, #0
 800386a:	f8d7 4258 	ldr.w	r4, [r7, #600]	@ 0x258
 800386e:	0023      	movs	r3, r4
 8003870:	2200      	movs	r2, #0
 8003872:	ea40 0402 	orr.w	r4, r0, r2
 8003876:	f8c7 4250 	str.w	r4, [r7, #592]	@ 0x250
 800387a:	430b      	orrs	r3, r1
 800387c:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 8003880:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	@ 0x250
 8003884:	e9c7 34d0 	strd	r3, r4, [r7, #832]	@ 0x340
      u_angle.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003888:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	@ 0x340
 800388c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003890:	1d5a      	adds	r2, r3, #5
 8003892:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003896:	4413      	add	r3, r2
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2200      	movs	r2, #0
 800389e:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 80038a2:	f8c7 224c 	str.w	r2, [r7, #588]	@ 0x24c
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	f04f 0300 	mov.w	r3, #0
 80038ae:	f8d7 4248 	ldr.w	r4, [r7, #584]	@ 0x248
 80038b2:	0223      	lsls	r3, r4, #8
 80038b4:	2200      	movs	r2, #0
 80038b6:	ea40 0402 	orr.w	r4, r0, r2
 80038ba:	f8c7 4240 	str.w	r4, [r7, #576]	@ 0x240
 80038be:	430b      	orrs	r3, r1
 80038c0:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 80038c4:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	@ 0x240
 80038c8:	e9c7 34d0 	strd	r3, r4, [r7, #832]	@ 0x340
      u_angle.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80038cc:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	@ 0x340
 80038d0:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80038d4:	1d9a      	adds	r2, r3, #6
 80038d6:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80038da:	4413      	add	r3, r2
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2200      	movs	r2, #0
 80038e2:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 80038e6:	f8c7 223c 	str.w	r2, [r7, #572]	@ 0x23c
 80038ea:	f04f 0200 	mov.w	r2, #0
 80038ee:	f04f 0300 	mov.w	r3, #0
 80038f2:	f8d7 4238 	ldr.w	r4, [r7, #568]	@ 0x238
 80038f6:	0423      	lsls	r3, r4, #16
 80038f8:	2200      	movs	r2, #0
 80038fa:	ea40 0402 	orr.w	r4, r0, r2
 80038fe:	f8c7 4230 	str.w	r4, [r7, #560]	@ 0x230
 8003902:	430b      	orrs	r3, r1
 8003904:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 8003908:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	@ 0x230
 800390c:	e9c7 34d0 	strd	r3, r4, [r7, #832]	@ 0x340
      u_angle.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003910:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	@ 0x340
 8003914:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003918:	1dda      	adds	r2, r3, #7
 800391a:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 800391e:	4413      	add	r3, r2
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2200      	movs	r2, #0
 8003926:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 800392a:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	f04f 0300 	mov.w	r3, #0
 8003936:	f8d7 4228 	ldr.w	r4, [r7, #552]	@ 0x228
 800393a:	0623      	lsls	r3, r4, #24
 800393c:	2200      	movs	r2, #0
 800393e:	ea40 0402 	orr.w	r4, r0, r2
 8003942:	f8c7 4220 	str.w	r4, [r7, #544]	@ 0x220
 8003946:	430b      	orrs	r3, r1
 8003948:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 800394c:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	@ 0x220
 8003950:	e9c7 34d0 	strd	r3, r4, [r7, #832]	@ 0x340
      this->angle = u_angle.real;
 8003954:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	@ 0x340
 8003958:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 800395c:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->angle);
 8003960:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003964:	3308      	adds	r3, #8
 8003966:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      union {
        int64_t real;
        uint64_t base;
      } u_x_on_camera;
      u_x_on_camera.base = 0;
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	f04f 0300 	mov.w	r3, #0
 8003972:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338
      u_x_on_camera.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003976:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
 800397a:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 800397e:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003982:	4413      	add	r3, r2
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2200      	movs	r2, #0
 800398a:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 800398e:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 8003992:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	@ 0x218
 8003996:	4623      	mov	r3, r4
 8003998:	4303      	orrs	r3, r0
 800399a:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 800399e:	462b      	mov	r3, r5
 80039a0:	430b      	orrs	r3, r1
 80039a2:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80039a6:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	@ 0x210
 80039aa:	e9c7 34ce 	strd	r3, r4, [r7, #824]	@ 0x338
      u_x_on_camera.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80039ae:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
 80039b2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80039bc:	4413      	add	r3, r2
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2200      	movs	r2, #0
 80039c4:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 80039c8:	f8c7 220c 	str.w	r2, [r7, #524]	@ 0x20c
 80039cc:	f04f 0200 	mov.w	r2, #0
 80039d0:	f04f 0300 	mov.w	r3, #0
 80039d4:	e9d7 8982 	ldrd	r8, r9, [r7, #520]	@ 0x208
 80039d8:	464c      	mov	r4, r9
 80039da:	0223      	lsls	r3, r4, #8
 80039dc:	4644      	mov	r4, r8
 80039de:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80039e2:	4644      	mov	r4, r8
 80039e4:	0222      	lsls	r2, r4, #8
 80039e6:	ea40 0402 	orr.w	r4, r0, r2
 80039ea:	f8c7 4200 	str.w	r4, [r7, #512]	@ 0x200
 80039ee:	430b      	orrs	r3, r1
 80039f0:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 80039f4:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	@ 0x200
 80039f8:	e9c7 34ce 	strd	r3, r4, [r7, #824]	@ 0x338
      u_x_on_camera.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80039fc:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
 8003a00:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003a04:	1c9a      	adds	r2, r3, #2
 8003a06:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003a0a:	4413      	add	r3, r2
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2200      	movs	r2, #0
 8003a12:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 8003a16:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	f04f 0300 	mov.w	r3, #0
 8003a22:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	@ 0x1f8
 8003a26:	464c      	mov	r4, r9
 8003a28:	0423      	lsls	r3, r4, #16
 8003a2a:	4644      	mov	r4, r8
 8003a2c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003a30:	4644      	mov	r4, r8
 8003a32:	0422      	lsls	r2, r4, #16
 8003a34:	ea40 0402 	orr.w	r4, r0, r2
 8003a38:	f8c7 41f0 	str.w	r4, [r7, #496]	@ 0x1f0
 8003a3c:	430b      	orrs	r3, r1
 8003a3e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 8003a42:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	@ 0x1f0
 8003a46:	e9c7 34ce 	strd	r3, r4, [r7, #824]	@ 0x338
      u_x_on_camera.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003a4a:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
 8003a4e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003a52:	1cda      	adds	r2, r3, #3
 8003a54:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003a58:	4413      	add	r3, r2
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8003a64:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 8003a68:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	@ 0x1e8
 8003a6c:	4623      	mov	r3, r4
 8003a6e:	0a1b      	lsrs	r3, r3, #8
 8003a70:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003a74:	4623      	mov	r3, r4
 8003a76:	061b      	lsls	r3, r3, #24
 8003a78:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003a7c:	e9d7 4578 	ldrd	r4, r5, [r7, #480]	@ 0x1e0
 8003a80:	4623      	mov	r3, r4
 8003a82:	4303      	orrs	r3, r0
 8003a84:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8003a88:	462b      	mov	r3, r5
 8003a8a:	430b      	orrs	r3, r1
 8003a8c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003a90:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	@ 0x1d8
 8003a94:	e9c7 34ce 	strd	r3, r4, [r7, #824]	@ 0x338
      u_x_on_camera.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003a98:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
 8003a9c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003aa0:	1d1a      	adds	r2, r3, #4
 8003aa2:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003aa6:	4413      	add	r3, r2
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2200      	movs	r2, #0
 8003aae:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8003ab2:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 8003ab6:	f04f 0200 	mov.w	r2, #0
 8003aba:	f04f 0300 	mov.w	r3, #0
 8003abe:	f8d7 41d0 	ldr.w	r4, [r7, #464]	@ 0x1d0
 8003ac2:	0023      	movs	r3, r4
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	ea40 0402 	orr.w	r4, r0, r2
 8003aca:	f8c7 41c8 	str.w	r4, [r7, #456]	@ 0x1c8
 8003ace:	430b      	orrs	r3, r1
 8003ad0:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8003ad4:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	@ 0x1c8
 8003ad8:	e9c7 34ce 	strd	r3, r4, [r7, #824]	@ 0x338
      u_x_on_camera.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003adc:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
 8003ae0:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003ae4:	1d5a      	adds	r2, r3, #5
 8003ae6:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003aea:	4413      	add	r3, r2
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2200      	movs	r2, #0
 8003af2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003af6:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8003afa:	f04f 0200 	mov.w	r2, #0
 8003afe:	f04f 0300 	mov.w	r3, #0
 8003b02:	f8d7 41c0 	ldr.w	r4, [r7, #448]	@ 0x1c0
 8003b06:	0223      	lsls	r3, r4, #8
 8003b08:	2200      	movs	r2, #0
 8003b0a:	ea40 0402 	orr.w	r4, r0, r2
 8003b0e:	f8c7 41b8 	str.w	r4, [r7, #440]	@ 0x1b8
 8003b12:	430b      	orrs	r3, r1
 8003b14:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003b18:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	@ 0x1b8
 8003b1c:	e9c7 34ce 	strd	r3, r4, [r7, #824]	@ 0x338
      u_x_on_camera.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003b20:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
 8003b24:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003b28:	1d9a      	adds	r2, r3, #6
 8003b2a:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003b2e:	4413      	add	r3, r2
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2200      	movs	r2, #0
 8003b36:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8003b3a:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8003b3e:	f04f 0200 	mov.w	r2, #0
 8003b42:	f04f 0300 	mov.w	r3, #0
 8003b46:	f8d7 41b0 	ldr.w	r4, [r7, #432]	@ 0x1b0
 8003b4a:	0423      	lsls	r3, r4, #16
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	ea40 0402 	orr.w	r4, r0, r2
 8003b52:	f8c7 41a8 	str.w	r4, [r7, #424]	@ 0x1a8
 8003b56:	430b      	orrs	r3, r1
 8003b58:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8003b5c:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	@ 0x1a8
 8003b60:	e9c7 34ce 	strd	r3, r4, [r7, #824]	@ 0x338
      u_x_on_camera.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003b64:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
 8003b68:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003b6c:	1dda      	adds	r2, r3, #7
 8003b6e:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003b72:	4413      	add	r3, r2
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003b7e:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	f8d7 41a0 	ldr.w	r4, [r7, #416]	@ 0x1a0
 8003b8e:	0623      	lsls	r3, r4, #24
 8003b90:	2200      	movs	r2, #0
 8003b92:	ea40 0402 	orr.w	r4, r0, r2
 8003b96:	f8c7 4198 	str.w	r4, [r7, #408]	@ 0x198
 8003b9a:	430b      	orrs	r3, r1
 8003b9c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003ba0:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	@ 0x198
 8003ba4:	e9c7 34ce 	strd	r3, r4, [r7, #824]	@ 0x338
      this->x_on_camera = u_x_on_camera.real;
 8003ba8:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
 8003bac:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8003bb0:	e9c3 0106 	strd	r0, r1, [r3, #24]
      offset += sizeof(this->x_on_camera);
 8003bb4:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003bb8:	3308      	adds	r3, #8
 8003bba:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      union {
        int64_t real;
        uint64_t base;
      } u_y_on_camera;
      u_y_on_camera.base = 0;
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	f04f 0300 	mov.w	r3, #0
 8003bc6:	e9c7 23cc 	strd	r2, r3, [r7, #816]	@ 0x330
      u_y_on_camera.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003bca:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	@ 0x330
 8003bce:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 8003bd2:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003bd6:	4413      	add	r3, r2
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8003be2:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8003be6:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	@ 0x190
 8003bea:	4623      	mov	r3, r4
 8003bec:	4303      	orrs	r3, r0
 8003bee:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8003bf2:	462b      	mov	r3, r5
 8003bf4:	430b      	orrs	r3, r1
 8003bf6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8003bfa:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	@ 0x188
 8003bfe:	e9c7 34cc 	strd	r3, r4, [r7, #816]	@ 0x330
      u_y_on_camera.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003c02:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	@ 0x330
 8003c06:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003c10:	4413      	add	r3, r2
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2200      	movs	r2, #0
 8003c18:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003c1c:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8003c20:	f04f 0200 	mov.w	r2, #0
 8003c24:	f04f 0300 	mov.w	r3, #0
 8003c28:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	@ 0x180
 8003c2c:	464c      	mov	r4, r9
 8003c2e:	0223      	lsls	r3, r4, #8
 8003c30:	4644      	mov	r4, r8
 8003c32:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c36:	4644      	mov	r4, r8
 8003c38:	0222      	lsls	r2, r4, #8
 8003c3a:	ea40 0402 	orr.w	r4, r0, r2
 8003c3e:	f8c7 4178 	str.w	r4, [r7, #376]	@ 0x178
 8003c42:	430b      	orrs	r3, r1
 8003c44:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003c48:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 8003c4c:	e9c7 34cc 	strd	r3, r4, [r7, #816]	@ 0x330
      u_y_on_camera.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003c50:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	@ 0x330
 8003c54:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003c58:	1c9a      	adds	r2, r3, #2
 8003c5a:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003c5e:	4413      	add	r3, r2
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2200      	movs	r2, #0
 8003c66:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8003c6a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	f04f 0300 	mov.w	r3, #0
 8003c76:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	@ 0x170
 8003c7a:	464c      	mov	r4, r9
 8003c7c:	0423      	lsls	r3, r4, #16
 8003c7e:	4644      	mov	r4, r8
 8003c80:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003c84:	4644      	mov	r4, r8
 8003c86:	0422      	lsls	r2, r4, #16
 8003c88:	ea40 0402 	orr.w	r4, r0, r2
 8003c8c:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 8003c90:	430b      	orrs	r3, r1
 8003c92:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8003c96:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 8003c9a:	e9c7 34cc 	strd	r3, r4, [r7, #816]	@ 0x330
      u_y_on_camera.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003c9e:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	@ 0x330
 8003ca2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003ca6:	1cda      	adds	r2, r3, #3
 8003ca8:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003cac:	4413      	add	r3, r2
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8003cb8:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8003cbc:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8003cc0:	4623      	mov	r3, r4
 8003cc2:	0a1b      	lsrs	r3, r3, #8
 8003cc4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8003cc8:	4623      	mov	r3, r4
 8003cca:	061b      	lsls	r3, r3, #24
 8003ccc:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003cd0:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 8003cd4:	4623      	mov	r3, r4
 8003cd6:	4303      	orrs	r3, r0
 8003cd8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003cdc:	462b      	mov	r3, r5
 8003cde:	430b      	orrs	r3, r1
 8003ce0:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003ce4:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 8003ce8:	e9c7 34cc 	strd	r3, r4, [r7, #816]	@ 0x330
      u_y_on_camera.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003cec:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	@ 0x330
 8003cf0:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003cf4:	1d1a      	adds	r2, r3, #4
 8003cf6:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003cfa:	4413      	add	r3, r2
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2200      	movs	r2, #0
 8003d02:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8003d06:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	f8d7 4148 	ldr.w	r4, [r7, #328]	@ 0x148
 8003d16:	0023      	movs	r3, r4
 8003d18:	2200      	movs	r2, #0
 8003d1a:	ea40 0402 	orr.w	r4, r0, r2
 8003d1e:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 8003d22:	430b      	orrs	r3, r1
 8003d24:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8003d28:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 8003d2c:	e9c7 34cc 	strd	r3, r4, [r7, #816]	@ 0x330
      u_y_on_camera.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003d30:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	@ 0x330
 8003d34:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003d38:	1d5a      	adds	r2, r3, #5
 8003d3a:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003d3e:	4413      	add	r3, r2
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2200      	movs	r2, #0
 8003d46:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003d4a:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8003d4e:	f04f 0200 	mov.w	r2, #0
 8003d52:	f04f 0300 	mov.w	r3, #0
 8003d56:	f8d7 4138 	ldr.w	r4, [r7, #312]	@ 0x138
 8003d5a:	0223      	lsls	r3, r4, #8
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	ea40 0402 	orr.w	r4, r0, r2
 8003d62:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 8003d66:	430b      	orrs	r3, r1
 8003d68:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8003d6c:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 8003d70:	e9c7 34cc 	strd	r3, r4, [r7, #816]	@ 0x330
      u_y_on_camera.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003d74:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	@ 0x330
 8003d78:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003d7c:	1d9a      	adds	r2, r3, #6
 8003d7e:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003d82:	4413      	add	r3, r2
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003d8e:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8003d92:	f04f 0200 	mov.w	r2, #0
 8003d96:	f04f 0300 	mov.w	r3, #0
 8003d9a:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
 8003d9e:	0423      	lsls	r3, r4, #16
 8003da0:	2200      	movs	r2, #0
 8003da2:	ea40 0402 	orr.w	r4, r0, r2
 8003da6:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 8003daa:	430b      	orrs	r3, r1
 8003dac:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003db0:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 8003db4:	e9c7 34cc 	strd	r3, r4, [r7, #816]	@ 0x330
      u_y_on_camera.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003db8:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	@ 0x330
 8003dbc:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003dc0:	1dda      	adds	r2, r3, #7
 8003dc2:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003dc6:	4413      	add	r3, r2
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003dd2:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 8003de2:	0623      	lsls	r3, r4, #24
 8003de4:	2200      	movs	r2, #0
 8003de6:	ea40 0402 	orr.w	r4, r0, r2
 8003dea:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 8003dee:	430b      	orrs	r3, r1
 8003df0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003df4:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 8003df8:	e9c7 34cc 	strd	r3, r4, [r7, #816]	@ 0x330
      this->y_on_camera = u_y_on_camera.real;
 8003dfc:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	@ 0x330
 8003e00:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8003e04:	e9c3 0108 	strd	r0, r1, [r3, #32]
      offset += sizeof(this->y_on_camera);
 8003e08:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003e0c:	3308      	adds	r3, #8
 8003e0e:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      union {
        int64_t real;
        uint64_t base;
      } u_x_real;
      u_x_real.base = 0;
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	e9c7 23ca 	strd	r2, r3, [r7, #808]	@ 0x328
      u_x_real.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003e1e:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 8003e22:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 8003e26:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003e2a:	4413      	add	r3, r2
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2200      	movs	r2, #0
 8003e32:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003e36:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8003e3a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8003e3e:	4623      	mov	r3, r4
 8003e40:	4303      	orrs	r3, r0
 8003e42:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003e46:	462b      	mov	r3, r5
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003e4e:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8003e52:	e9c7 34ca 	strd	r3, r4, [r7, #808]	@ 0x328
      u_x_real.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003e56:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 8003e5a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003e64:	4413      	add	r3, r2
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003e70:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8003e80:	464c      	mov	r4, r9
 8003e82:	0223      	lsls	r3, r4, #8
 8003e84:	4644      	mov	r4, r8
 8003e86:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003e8a:	4644      	mov	r4, r8
 8003e8c:	0222      	lsls	r2, r4, #8
 8003e8e:	ea40 0402 	orr.w	r4, r0, r2
 8003e92:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8003e96:	430b      	orrs	r3, r1
 8003e98:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003e9c:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8003ea0:	e9c7 34ca 	strd	r3, r4, [r7, #808]	@ 0x328
      u_x_real.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003ea4:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 8003ea8:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003eac:	1c9a      	adds	r2, r3, #2
 8003eae:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003eb2:	4413      	add	r3, r2
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ebe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	f04f 0300 	mov.w	r3, #0
 8003eca:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8003ece:	464c      	mov	r4, r9
 8003ed0:	0423      	lsls	r3, r4, #16
 8003ed2:	4644      	mov	r4, r8
 8003ed4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003ed8:	4644      	mov	r4, r8
 8003eda:	0422      	lsls	r2, r4, #16
 8003edc:	ea40 0402 	orr.w	r4, r0, r2
 8003ee0:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 8003ee4:	430b      	orrs	r3, r1
 8003ee6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003eea:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8003eee:	e9c7 34ca 	strd	r3, r4, [r7, #808]	@ 0x328
      u_x_real.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003ef2:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 8003ef6:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003efa:	1cda      	adds	r2, r3, #3
 8003efc:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003f00:	4413      	add	r3, r2
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2200      	movs	r2, #0
 8003f08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f0c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003f10:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8003f14:	4623      	mov	r3, r4
 8003f16:	0a1b      	lsrs	r3, r3, #8
 8003f18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003f1c:	4623      	mov	r3, r4
 8003f1e:	061b      	lsls	r3, r3, #24
 8003f20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f24:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8003f28:	4623      	mov	r3, r4
 8003f2a:	4303      	orrs	r3, r0
 8003f2c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f30:	462b      	mov	r3, r5
 8003f32:	430b      	orrs	r3, r1
 8003f34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f38:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8003f3c:	e9c7 34ca 	strd	r3, r4, [r7, #808]	@ 0x328
      u_x_real.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003f40:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 8003f44:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003f48:	1d1a      	adds	r2, r3, #4
 8003f4a:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003f4e:	4413      	add	r3, r2
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2200      	movs	r2, #0
 8003f56:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f5a:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f5e:	f04f 0200 	mov.w	r2, #0
 8003f62:	f04f 0300 	mov.w	r3, #0
 8003f66:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 8003f6a:	0023      	movs	r3, r4
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	ea40 0402 	orr.w	r4, r0, r2
 8003f72:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8003f76:	430b      	orrs	r3, r1
 8003f78:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003f7c:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8003f80:	e9c7 34ca 	strd	r3, r4, [r7, #808]	@ 0x328
      u_x_real.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003f84:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 8003f88:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003f8c:	1d5a      	adds	r2, r3, #5
 8003f8e:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003f92:	4413      	add	r3, r2
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f9e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	f04f 0300 	mov.w	r3, #0
 8003faa:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 8003fae:	0223      	lsls	r3, r4, #8
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	ea40 0402 	orr.w	r4, r0, r2
 8003fb6:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8003fba:	430b      	orrs	r3, r1
 8003fbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003fc0:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8003fc4:	e9c7 34ca 	strd	r3, r4, [r7, #808]	@ 0x328
      u_x_real.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003fc8:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 8003fcc:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003fd0:	1d9a      	adds	r2, r3, #6
 8003fd2:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003fd6:	4413      	add	r3, r2
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003fe2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003fe6:	f04f 0200 	mov.w	r2, #0
 8003fea:	f04f 0300 	mov.w	r3, #0
 8003fee:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8003ff2:	0423      	lsls	r3, r4, #16
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	ea40 0402 	orr.w	r4, r0, r2
 8003ffa:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8003ffe:	430b      	orrs	r3, r1
 8004000:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004004:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8004008:	e9c7 34ca 	strd	r3, r4, [r7, #808]	@ 0x328
      u_x_real.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800400c:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 8004010:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8004014:	1dda      	adds	r2, r3, #7
 8004016:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 800401a:	4413      	add	r3, r2
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2200      	movs	r2, #0
 8004022:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004026:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800402a:	f04f 0200 	mov.w	r2, #0
 800402e:	f04f 0300 	mov.w	r3, #0
 8004032:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 8004036:	0623      	lsls	r3, r4, #24
 8004038:	2200      	movs	r2, #0
 800403a:	ea40 0402 	orr.w	r4, r0, r2
 800403e:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8004042:	430b      	orrs	r3, r1
 8004044:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004048:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 800404c:	e9c7 34ca 	strd	r3, r4, [r7, #808]	@ 0x328
      this->x_real = u_x_real.real;
 8004050:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 8004054:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8004058:	e9c3 010a 	strd	r0, r1, [r3, #40]	@ 0x28
      offset += sizeof(this->x_real);
 800405c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8004060:	3308      	adds	r3, #8
 8004062:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      union {
        int64_t real;
        uint64_t base;
      } u_y_real;
      u_y_real.base = 0;
 8004066:	f04f 0200 	mov.w	r2, #0
 800406a:	f04f 0300 	mov.w	r3, #0
 800406e:	e9c7 23c8 	strd	r2, r3, [r7, #800]	@ 0x320
      u_y_real.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004072:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 8004076:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 800407a:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 800407e:	4413      	add	r3, r2
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2200      	movs	r2, #0
 8004086:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800408a:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800408e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8004092:	4623      	mov	r3, r4
 8004094:	4303      	orrs	r3, r0
 8004096:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004098:	462b      	mov	r3, r5
 800409a:	430b      	orrs	r3, r1
 800409c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800409e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 80040a2:	e9c7 34c8 	strd	r3, r4, [r7, #800]	@ 0x320
      u_y_real.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80040a6:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 80040aa:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80040ae:	1c5a      	adds	r2, r3, #1
 80040b0:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80040b4:	4413      	add	r3, r2
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2200      	movs	r2, #0
 80040bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80040be:	677a      	str	r2, [r7, #116]	@ 0x74
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	f04f 0300 	mov.w	r3, #0
 80040c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80040cc:	464c      	mov	r4, r9
 80040ce:	0223      	lsls	r3, r4, #8
 80040d0:	4644      	mov	r4, r8
 80040d2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80040d6:	4644      	mov	r4, r8
 80040d8:	0222      	lsls	r2, r4, #8
 80040da:	ea40 0402 	orr.w	r4, r0, r2
 80040de:	66bc      	str	r4, [r7, #104]	@ 0x68
 80040e0:	430b      	orrs	r3, r1
 80040e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80040e4:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 80040e8:	e9c7 34c8 	strd	r3, r4, [r7, #800]	@ 0x320
      u_y_real.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80040ec:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 80040f0:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80040f4:	1c9a      	adds	r2, r3, #2
 80040f6:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80040fa:	4413      	add	r3, r2
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2200      	movs	r2, #0
 8004102:	663b      	str	r3, [r7, #96]	@ 0x60
 8004104:	667a      	str	r2, [r7, #100]	@ 0x64
 8004106:	f04f 0200 	mov.w	r2, #0
 800410a:	f04f 0300 	mov.w	r3, #0
 800410e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004112:	464c      	mov	r4, r9
 8004114:	0423      	lsls	r3, r4, #16
 8004116:	4644      	mov	r4, r8
 8004118:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800411c:	4644      	mov	r4, r8
 800411e:	0422      	lsls	r2, r4, #16
 8004120:	ea40 0402 	orr.w	r4, r0, r2
 8004124:	65bc      	str	r4, [r7, #88]	@ 0x58
 8004126:	430b      	orrs	r3, r1
 8004128:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800412a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 800412e:	e9c7 34c8 	strd	r3, r4, [r7, #800]	@ 0x320
      u_y_real.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004132:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 8004136:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800413a:	1cda      	adds	r2, r3, #3
 800413c:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8004140:	4413      	add	r3, r2
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2200      	movs	r2, #0
 8004148:	653b      	str	r3, [r7, #80]	@ 0x50
 800414a:	657a      	str	r2, [r7, #84]	@ 0x54
 800414c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8004150:	4623      	mov	r3, r4
 8004152:	0a1b      	lsrs	r3, r3, #8
 8004154:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004156:	4623      	mov	r3, r4
 8004158:	061b      	lsls	r3, r3, #24
 800415a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800415c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8004160:	4623      	mov	r3, r4
 8004162:	4303      	orrs	r3, r0
 8004164:	643b      	str	r3, [r7, #64]	@ 0x40
 8004166:	462b      	mov	r3, r5
 8004168:	430b      	orrs	r3, r1
 800416a:	647b      	str	r3, [r7, #68]	@ 0x44
 800416c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8004170:	e9c7 34c8 	strd	r3, r4, [r7, #800]	@ 0x320
      u_y_real.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004174:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 8004178:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800417c:	1d1a      	adds	r2, r3, #4
 800417e:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8004182:	4413      	add	r3, r2
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2200      	movs	r2, #0
 800418a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800418c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	f04f 0300 	mov.w	r3, #0
 8004196:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8004198:	0023      	movs	r3, r4
 800419a:	2200      	movs	r2, #0
 800419c:	ea40 0402 	orr.w	r4, r0, r2
 80041a0:	633c      	str	r4, [r7, #48]	@ 0x30
 80041a2:	430b      	orrs	r3, r1
 80041a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80041a6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80041aa:	e9c7 34c8 	strd	r3, r4, [r7, #800]	@ 0x320
      u_y_real.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80041ae:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 80041b2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80041b6:	1d5a      	adds	r2, r3, #5
 80041b8:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80041bc:	4413      	add	r3, r2
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2200      	movs	r2, #0
 80041c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 80041d2:	0223      	lsls	r3, r4, #8
 80041d4:	2200      	movs	r2, #0
 80041d6:	ea40 0402 	orr.w	r4, r0, r2
 80041da:	623c      	str	r4, [r7, #32]
 80041dc:	430b      	orrs	r3, r1
 80041de:	627b      	str	r3, [r7, #36]	@ 0x24
 80041e0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80041e4:	e9c7 34c8 	strd	r3, r4, [r7, #800]	@ 0x320
      u_y_real.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80041e8:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 80041ec:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80041f0:	3306      	adds	r3, #6
 80041f2:	f8d7 2318 	ldr.w	r2, [r7, #792]	@ 0x318
 80041f6:	4413      	add	r3, r2
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2200      	movs	r2, #0
 80041fe:	61bb      	str	r3, [r7, #24]
 8004200:	61fa      	str	r2, [r7, #28]
 8004202:	f04f 0200 	mov.w	r2, #0
 8004206:	f04f 0300 	mov.w	r3, #0
 800420a:	69bc      	ldr	r4, [r7, #24]
 800420c:	0423      	lsls	r3, r4, #16
 800420e:	2200      	movs	r2, #0
 8004210:	ea40 0402 	orr.w	r4, r0, r2
 8004214:	613c      	str	r4, [r7, #16]
 8004216:	430b      	orrs	r3, r1
 8004218:	617b      	str	r3, [r7, #20]
 800421a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800421e:	e9c7 34c8 	strd	r3, r4, [r7, #800]	@ 0x320
      u_y_real.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004222:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 8004226:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800422a:	3307      	adds	r3, #7
 800422c:	f8d7 2318 	ldr.w	r2, [r7, #792]	@ 0x318
 8004230:	4413      	add	r3, r2
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2200      	movs	r2, #0
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	60fa      	str	r2, [r7, #12]
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	f04f 0300 	mov.w	r3, #0
 8004244:	68bc      	ldr	r4, [r7, #8]
 8004246:	0623      	lsls	r3, r4, #24
 8004248:	2200      	movs	r2, #0
 800424a:	ea40 0402 	orr.w	r4, r0, r2
 800424e:	603c      	str	r4, [r7, #0]
 8004250:	430b      	orrs	r3, r1
 8004252:	607b      	str	r3, [r7, #4]
 8004254:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004258:	e9c7 34c8 	strd	r3, r4, [r7, #800]	@ 0x320
      this->y_real = u_y_real.real;
 800425c:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	@ 0x320
 8004260:	f8d7 131c 	ldr.w	r1, [r7, #796]	@ 0x31c
 8004264:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
      offset += sizeof(this->y_real);
 8004268:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800426c:	3308      	adds	r3, #8
 800426e:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
     return offset;
 8004272:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
    }
 8004276:	4618      	mov	r0, r3
 8004278:	f507 7757 	add.w	r7, r7, #860	@ 0x35c
 800427c:	46bd      	mov	sp, r7
 800427e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004282:	4770      	bx	lr

08004284 <_ZN9krsbi202525BallPositionBasedOnCamera7getTypeEv>:

    virtual const char * getType() override { return "krsbi2025/BallPositionBasedOnCamera"; };
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	4b03      	ldr	r3, [pc, #12]	@ (800429c <_ZN9krsbi202525BallPositionBasedOnCamera7getTypeEv+0x18>)
 800428e:	4618      	mov	r0, r3
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	0800bbd0 	.word	0x0800bbd0

080042a0 <_ZN9krsbi202525BallPositionBasedOnCamera6getMD5Ev>:
    virtual const char * getMD5() override { return "c32d588a00265202dbcab5311745340d"; };
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	4b03      	ldr	r3, [pc, #12]	@ (80042b8 <_ZN9krsbi202525BallPositionBasedOnCamera6getMD5Ev+0x18>)
 80042aa:	4618      	mov	r0, r3
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	0800bbf4 	.word	0x0800bbf4

080042bc <_ZN9krsbi20255WheelC1Ev>:
      typedef float _bottom_wheel_cw_type;
      _bottom_wheel_cw_type bottom_wheel_cw;
      typedef float _bottom_wheel_ccw_type;
      _bottom_wheel_ccw_type bottom_wheel_ccw;

    Wheel():
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
      left_wheel_cw(0),
      left_wheel_ccw(0),
      right_wheel_cw(0),
      right_wheel_ccw(0),
      bottom_wheel_cw(0),
      bottom_wheel_ccw(0)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fd fdae 	bl	8001e28 <_ZN3ros3MsgC1Ev>
 80042cc:	4a0f      	ldr	r2, [pc, #60]	@ (800430c <_ZN9krsbi20255WheelC1Ev+0x50>)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	601a      	str	r2, [r3, #0]
      left_wheel_cw(0),
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	605a      	str	r2, [r3, #4]
      left_wheel_ccw(0),
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	609a      	str	r2, [r3, #8]
      right_wheel_cw(0),
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f04f 0200 	mov.w	r2, #0
 80042e8:	60da      	str	r2, [r3, #12]
      right_wheel_ccw(0),
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	611a      	str	r2, [r3, #16]
      bottom_wheel_cw(0),
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f04f 0200 	mov.w	r2, #0
 80042f8:	615a      	str	r2, [r3, #20]
      bottom_wheel_ccw(0)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f04f 0200 	mov.w	r2, #0
 8004300:	619a      	str	r2, [r3, #24]
    {
    }
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4618      	mov	r0, r3
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	0800bd20 	.word	0x0800bd20

08004310 <_ZNK9krsbi20255Wheel9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->left_wheel_cw);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	441a      	add	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	edd3 7a01 	vldr	s15, [r3, #4]
 800432a:	eeb0 0a67 	vmov.f32	s0, s15
 800432e:	4610      	mov	r0, r2
 8004330:	f7fd fc32 	bl	8001b98 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004334:	4602      	mov	r2, r0
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4413      	add	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->left_wheel_ccw);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	441a      	add	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	edd3 7a02 	vldr	s15, [r3, #8]
 8004348:	eeb0 0a67 	vmov.f32	s0, s15
 800434c:	4610      	mov	r0, r2
 800434e:	f7fd fc23 	bl	8001b98 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004352:	4602      	mov	r2, r0
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4413      	add	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->right_wheel_cw);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	441a      	add	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	edd3 7a03 	vldr	s15, [r3, #12]
 8004366:	eeb0 0a67 	vmov.f32	s0, s15
 800436a:	4610      	mov	r0, r2
 800436c:	f7fd fc14 	bl	8001b98 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004370:	4602      	mov	r2, r0
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4413      	add	r3, r2
 8004376:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->right_wheel_ccw);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	441a      	add	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	edd3 7a04 	vldr	s15, [r3, #16]
 8004384:	eeb0 0a67 	vmov.f32	s0, s15
 8004388:	4610      	mov	r0, r2
 800438a:	f7fd fc05 	bl	8001b98 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800438e:	4602      	mov	r2, r0
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4413      	add	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->bottom_wheel_cw);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	441a      	add	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	edd3 7a05 	vldr	s15, [r3, #20]
 80043a2:	eeb0 0a67 	vmov.f32	s0, s15
 80043a6:	4610      	mov	r0, r2
 80043a8:	f7fd fbf6 	bl	8001b98 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80043ac:	4602      	mov	r2, r0
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4413      	add	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->bottom_wheel_ccw);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	441a      	add	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	edd3 7a06 	vldr	s15, [r3, #24]
 80043c0:	eeb0 0a67 	vmov.f32	s0, s15
 80043c4:	4610      	mov	r0, r2
 80043c6:	f7fd fbe7 	bl	8001b98 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80043ca:	4602      	mov	r2, r0
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4413      	add	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]
      return offset;
 80043d2:	68fb      	ldr	r3, [r7, #12]
    }
 80043d4:	4618      	mov	r0, r3
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <_ZN9krsbi20255Wheel11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80043e6:	2300      	movs	r3, #0
 80043e8:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->left_wheel_cw));
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	441a      	add	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3304      	adds	r3, #4
 80043f4:	4619      	mov	r1, r3
 80043f6:	4610      	mov	r0, r2
 80043f8:	f7fd fc6a 	bl	8001cd0 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80043fc:	4602      	mov	r2, r0
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4413      	add	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->left_wheel_ccw));
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	441a      	add	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	3308      	adds	r3, #8
 800440e:	4619      	mov	r1, r3
 8004410:	4610      	mov	r0, r2
 8004412:	f7fd fc5d 	bl	8001cd0 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004416:	4602      	mov	r2, r0
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4413      	add	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->right_wheel_cw));
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	441a      	add	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	330c      	adds	r3, #12
 8004428:	4619      	mov	r1, r3
 800442a:	4610      	mov	r0, r2
 800442c:	f7fd fc50 	bl	8001cd0 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004430:	4602      	mov	r2, r0
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	4413      	add	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->right_wheel_ccw));
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	441a      	add	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	3310      	adds	r3, #16
 8004442:	4619      	mov	r1, r3
 8004444:	4610      	mov	r0, r2
 8004446:	f7fd fc43 	bl	8001cd0 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800444a:	4602      	mov	r2, r0
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4413      	add	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->bottom_wheel_cw));
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	441a      	add	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3314      	adds	r3, #20
 800445c:	4619      	mov	r1, r3
 800445e:	4610      	mov	r0, r2
 8004460:	f7fd fc36 	bl	8001cd0 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004464:	4602      	mov	r2, r0
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4413      	add	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->bottom_wheel_ccw));
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	441a      	add	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3318      	adds	r3, #24
 8004476:	4619      	mov	r1, r3
 8004478:	4610      	mov	r0, r2
 800447a:	f7fd fc29 	bl	8001cd0 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800447e:	4602      	mov	r2, r0
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4413      	add	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]
     return offset;
 8004486:	68fb      	ldr	r3, [r7, #12]
    }
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <_ZN9krsbi20255Wheel7getTypeEv>:

    virtual const char * getType() override { return "krsbi2025/Wheel"; };
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	4b03      	ldr	r3, [pc, #12]	@ (80044a8 <_ZN9krsbi20255Wheel7getTypeEv+0x18>)
 800449a:	4618      	mov	r0, r3
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	0800bc18 	.word	0x0800bc18

080044ac <_ZN9krsbi20255Wheel6getMD5Ev>:
    virtual const char * getMD5() override { return "23cc0e6db082887e7d28f8d9255b33a9"; };
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	4b03      	ldr	r3, [pc, #12]	@ (80044c4 <_ZN9krsbi20255Wheel6getMD5Ev+0x18>)
 80044b6:	4618      	mov	r0, r3
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	0800bc28 	.word	0x0800bc28

080044c8 <_Z17cam_data_callbackRKN9krsbi202525BallPositionBasedOnCameraE>:
//	float y;
//	float z;
//}ros_rx;
//
//ros_rx receiving;
void cam_data_callback(const krsbi2025::BallPositionBasedOnCamera &data){
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
	camera.distance = data.distance;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80044d6:	4610      	mov	r0, r2
 80044d8:	4619      	mov	r1, r3
 80044da:	f7fc fbc7 	bl	8000c6c <__aeabi_l2f>
 80044de:	4603      	mov	r3, r0
 80044e0:	4a1b      	ldr	r2, [pc, #108]	@ (8004550 <_Z17cam_data_callbackRKN9krsbi202525BallPositionBasedOnCameraE+0x88>)
 80044e2:	6013      	str	r3, [r2, #0]
	camera.angle = data.angle;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80044ea:	4610      	mov	r0, r2
 80044ec:	4619      	mov	r1, r3
 80044ee:	f7fc fbbd 	bl	8000c6c <__aeabi_l2f>
 80044f2:	4603      	mov	r3, r0
 80044f4:	4a16      	ldr	r2, [pc, #88]	@ (8004550 <_Z17cam_data_callbackRKN9krsbi202525BallPositionBasedOnCameraE+0x88>)
 80044f6:	6053      	str	r3, [r2, #4]
	camera.x_on_camera = data.x_on_camera;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80044fe:	4610      	mov	r0, r2
 8004500:	4619      	mov	r1, r3
 8004502:	f7fc fbb3 	bl	8000c6c <__aeabi_l2f>
 8004506:	4603      	mov	r3, r0
 8004508:	4a11      	ldr	r2, [pc, #68]	@ (8004550 <_Z17cam_data_callbackRKN9krsbi202525BallPositionBasedOnCameraE+0x88>)
 800450a:	6093      	str	r3, [r2, #8]
	camera.y_on_camera = data.y_on_camera;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004512:	4610      	mov	r0, r2
 8004514:	4619      	mov	r1, r3
 8004516:	f7fc fba9 	bl	8000c6c <__aeabi_l2f>
 800451a:	4603      	mov	r3, r0
 800451c:	4a0c      	ldr	r2, [pc, #48]	@ (8004550 <_Z17cam_data_callbackRKN9krsbi202525BallPositionBasedOnCameraE+0x88>)
 800451e:	60d3      	str	r3, [r2, #12]
	camera.x_real = data.x_real;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8004526:	4610      	mov	r0, r2
 8004528:	4619      	mov	r1, r3
 800452a:	f7fc fb9f 	bl	8000c6c <__aeabi_l2f>
 800452e:	4603      	mov	r3, r0
 8004530:	4a07      	ldr	r2, [pc, #28]	@ (8004550 <_Z17cam_data_callbackRKN9krsbi202525BallPositionBasedOnCameraE+0x88>)
 8004532:	6113      	str	r3, [r2, #16]
	camera.y_real = data.y_real;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800453a:	4610      	mov	r0, r2
 800453c:	4619      	mov	r1, r3
 800453e:	f7fc fb95 	bl	8000c6c <__aeabi_l2f>
 8004542:	4603      	mov	r3, r0
 8004544:	4a02      	ldr	r2, [pc, #8]	@ (8004550 <_Z17cam_data_callbackRKN9krsbi202525BallPositionBasedOnCameraE+0x88>)
 8004546:	6153      	str	r3, [r2, #20]
}
 8004548:	bf00      	nop
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	20000190 	.word	0x20000190

08004554 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	4a04      	ldr	r2, [pc, #16]	@ (8004570 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4618      	mov	r0, r3
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	0800bd80 	.word	0x0800bd80

08004574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4618      	mov	r0, r3
 8004580:	f7ff ffe8 	bl	8004554 <_ZN3ros15NodeHandleBase_C1Ev>
 8004584:	4a36      	ldr	r2, [pc, #216]	@ (8004660 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	3304      	adds	r3, #4
 800458e:	4618      	mov	r0, r3
 8004590:	f7fe fad4 	bl	8002b3c <_ZN13STM32HardwareC1Ev>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 80045ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045be:	2100      	movs	r1, #0
 80045c0:	4618      	mov	r0, r3
 80045c2:	f006 fbbb 	bl	800ad3c <memset>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 80045cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045d0:	2100      	movs	r1, #0
 80045d2:	4618      	mov	r0, r3
 80045d4:	f006 fbb2 	bl	800ad3c <memset>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f603 0324 	addw	r3, r3, #2084	@ 0x824
 80045de:	2264      	movs	r2, #100	@ 0x64
 80045e0:	2100      	movs	r1, #0
 80045e2:	4618      	mov	r0, r3
 80045e4:	f006 fbaa 	bl	800ad3c <memset>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 80045ee:	2264      	movs	r2, #100	@ 0x64
 80045f0:	2100      	movs	r1, #0
 80045f2:	4618      	mov	r0, r3
 80045f4:	f006 fba2 	bl	800ad3c <memset>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f603 1314 	addw	r3, r3, #2324	@ 0x914
 800464e:	4618      	mov	r0, r3
 8004650:	f7fd ff5e 	bl	8002510 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4618      	mov	r0, r3
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	0800bd0c 	.word	0x0800bd0c

08004664 <HAL_UART_TxCpltCallback>:
ros::Publisher pub_outputControl("/arduino/topic_OutputControl", &wheel_output);  // Publisher dengan topik "float_data"
ros::Subscriber<krsbi2025::BallPositionBasedOnCamera> sub("BallPositionBasedOnCamera", &cam_data_callback);


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a07      	ldr	r2, [pc, #28]	@ (800468c <HAL_UART_TxCpltCallback+0x28>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d106      	bne.n	8004682 <HAL_UART_TxCpltCallback+0x1e>
	{
		nh.getHardware()->flush();
 8004674:	4806      	ldr	r0, [pc, #24]	@ (8004690 <HAL_UART_TxCpltCallback+0x2c>)
 8004676:	f000 f8ef 	bl	8004858 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800467a:	4603      	mov	r3, r0
 800467c:	4618      	mov	r0, r3
 800467e:	f7fe fac3 	bl	8002c08 <_ZN13STM32Hardware5flushEv>
	}
}
 8004682:	bf00      	nop
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	20000ca8 	.word	0x20000ca8
 8004690:	200001a8 	.word	0x200001a8

08004694 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a07      	ldr	r2, [pc, #28]	@ (80046bc <HAL_UART_RxCpltCallback+0x28>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d106      	bne.n	80046b2 <HAL_UART_RxCpltCallback+0x1e>
	{
		nh.getHardware()->reset_rbuf();
 80046a4:	4806      	ldr	r0, [pc, #24]	@ (80046c0 <HAL_UART_RxCpltCallback+0x2c>)
 80046a6:	f000 f8d7 	bl	8004858 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80046aa:	4603      	mov	r3, r0
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fe fa6c 	bl	8002b8a <_ZN13STM32Hardware10reset_rbufEv>
	}
}
 80046b2:	bf00      	nop
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	20000ca8 	.word	0x20000ca8
 80046c0:	200001a8 	.word	0x200001a8

080046c4 <setup>:

void setup(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
	nh.initNode();  // Inisialisasi node ROS
 80046c8:	4808      	ldr	r0, [pc, #32]	@ (80046ec <setup+0x28>)
 80046ca:	f000 f8d1 	bl	8004870 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.subscribe(sub);
 80046ce:	4908      	ldr	r1, [pc, #32]	@ (80046f0 <setup+0x2c>)
 80046d0:	4806      	ldr	r0, [pc, #24]	@ (80046ec <setup+0x28>)
 80046d2:	f000 f8ea 	bl	80048aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
	nh.advertise(pub);  // Advertise topik
 80046d6:	4907      	ldr	r1, [pc, #28]	@ (80046f4 <setup+0x30>)
 80046d8:	4804      	ldr	r0, [pc, #16]	@ (80046ec <setup+0x28>)
 80046da:	f000 f911 	bl	8004900 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(pub_outputControl);
 80046de:	4906      	ldr	r1, [pc, #24]	@ (80046f8 <setup+0x34>)
 80046e0:	4802      	ldr	r0, [pc, #8]	@ (80046ec <setup+0x28>)
 80046e2:	f000 f90d 	bl	8004900 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 80046e6:	bf00      	nop
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	200001a8 	.word	0x200001a8
 80046f0:	20000b30 	.word	0x20000b30
 80046f4:	20000aec 	.word	0x20000aec
 80046f8:	20000b1c 	.word	0x20000b1c

080046fc <loop>:

void loop(void)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	af00      	add	r7, sp, #0
	float_msg.data = camera.distance;  // Mengisi pesan dengan nilai float
 8004700:	4b12      	ldr	r3, [pc, #72]	@ (800474c <loop+0x50>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a12      	ldr	r2, [pc, #72]	@ (8004750 <loop+0x54>)
 8004706:	6053      	str	r3, [r2, #4]
	wheel_output.left_wheel_ccw = roda.aCCW;
 8004708:	4b12      	ldr	r3, [pc, #72]	@ (8004754 <loop+0x58>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	4a12      	ldr	r2, [pc, #72]	@ (8004758 <loop+0x5c>)
 800470e:	6093      	str	r3, [r2, #8]
	wheel_output.left_wheel_cw = roda.aCW;
 8004710:	4b10      	ldr	r3, [pc, #64]	@ (8004754 <loop+0x58>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a10      	ldr	r2, [pc, #64]	@ (8004758 <loop+0x5c>)
 8004716:	6053      	str	r3, [r2, #4]
	wheel_output.right_wheel_ccw = roda.bCCW;
 8004718:	4b0e      	ldr	r3, [pc, #56]	@ (8004754 <loop+0x58>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	4a0e      	ldr	r2, [pc, #56]	@ (8004758 <loop+0x5c>)
 800471e:	6113      	str	r3, [r2, #16]
	wheel_output.right_wheel_cw = roda.bCW;
 8004720:	4b0c      	ldr	r3, [pc, #48]	@ (8004754 <loop+0x58>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	4a0c      	ldr	r2, [pc, #48]	@ (8004758 <loop+0x5c>)
 8004726:	60d3      	str	r3, [r2, #12]
	wheel_output.bottom_wheel_ccw = roda.cCCW;
 8004728:	4b0a      	ldr	r3, [pc, #40]	@ (8004754 <loop+0x58>)
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	4a0a      	ldr	r2, [pc, #40]	@ (8004758 <loop+0x5c>)
 800472e:	6193      	str	r3, [r2, #24]
	wheel_output.bottom_wheel_cw = roda.cCW;
 8004730:	4b08      	ldr	r3, [pc, #32]	@ (8004754 <loop+0x58>)
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	4a08      	ldr	r2, [pc, #32]	@ (8004758 <loop+0x5c>)
 8004736:	6153      	str	r3, [r2, #20]
	pub_outputControl.publish(&wheel_output);  // Mengirim pesan ke ROS
 8004738:	4907      	ldr	r1, [pc, #28]	@ (8004758 <loop+0x5c>)
 800473a:	4808      	ldr	r0, [pc, #32]	@ (800475c <loop+0x60>)
 800473c:	f7fe f9cb 	bl	8002ad6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	nh.spinOnce();  // Memproses komunikasi ROS;
 8004740:	4807      	ldr	r0, [pc, #28]	@ (8004760 <loop+0x64>)
 8004742:	f000 f90d 	bl	8004960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

}
 8004746:	bf00      	nop
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	20000190 	.word	0x20000190
 8004750:	20000ae4 	.word	0x20000ae4
 8004754:	2000016c 	.word	0x2000016c
 8004758:	20000b00 	.word	0x20000b00
 800475c:	20000b1c 	.word	0x20000b1c
 8004760:	200001a8 	.word	0x200001a8

08004764 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800476e:	2300      	movs	r3, #0
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	e00c      	b.n	800478e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	fa22 f103 	lsr.w	r1, r2, r3
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4413      	add	r3, r2
 8004784:	b2ca      	uxtb	r2, r1
 8004786:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	3301      	adds	r3, #1
 800478c:	60fb      	str	r3, [r7, #12]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2b03      	cmp	r3, #3
 8004792:	d9ef      	bls.n	8004774 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8004794:	bf00      	nop
 8004796:	bf00      	nop
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80047a2:	b480      	push	{r7}
 80047a4:	b085      	sub	sp, #20
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
 80047aa:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80047b2:	2300      	movs	r3, #0
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	e010      	b.n	80047da <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6839      	ldr	r1, [r7, #0]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	440a      	add	r2, r1
 80047c2:	7812      	ldrb	r2, [r2, #0]
 80047c4:	4611      	mov	r1, r2
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	00d2      	lsls	r2, r2, #3
 80047ca:	fa01 f202 	lsl.w	r2, r1, r2
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	3301      	adds	r3, #1
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2b03      	cmp	r3, #3
 80047de:	d9eb      	bls.n	80047b8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 80047e0:	bf00      	nop
 80047e2:	bf00      	nop
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
	...

080047f0 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	4a04      	ldr	r2, [pc, #16]	@ (800480c <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	601a      	str	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4618      	mov	r0, r3
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr
 800480c:	0800bd68 	.word	0x0800bd68

08004810 <_ZN3ros10SubscriberIN9krsbi202525BallPositionBasedOnCameraEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
 800481c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff ffe5 	bl	80047f0 <_ZN3ros11Subscriber_C1Ev>
 8004826:	4a0b      	ldr	r2, [pc, #44]	@ (8004854 <_ZN3ros10SubscriberIN9krsbi202525BallPositionBasedOnCameraEvEC1EPKcPFvRKS2_Ei+0x44>)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	601a      	str	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	3310      	adds	r3, #16
 8004830:	4618      	mov	r0, r3
 8004832:	f7fe fb35 	bl	8002ea0 <_ZN9krsbi202525BallPositionBasedOnCameraC1Ev>
    cb_(cb),
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	649a      	str	r2, [r3, #72]	@ 0x48
    endpoint_(endpoint)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	64da      	str	r2, [r3, #76]	@ 0x4c
  {
    topic_ = topic_name;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	609a      	str	r2, [r3, #8]
  };
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	0800bcf4 	.word	0x0800bcf4

08004858 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3304      	adds	r3, #4
  }
 8004864:	4618      	mov	r0, r3
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3304      	adds	r3, #4
 800487c:	4618      	mov	r0, r3
 800487e:	f7fe f979 	bl	8002b74 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
    bytes_ = 0;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
    index_ = 0;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
    topic_ = 0;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
  };
 80048a2:	bf00      	nop
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:
    }
    return false;
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 80048aa:	b480      	push	{r7}
 80048ac:	b085      	sub	sp, #20
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80048b4:	2300      	movs	r3, #0
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	e018      	b.n	80048ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80048c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10d      	bne.n	80048e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x3c>
      {
        subscribers[i] = &s;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80048d2:	6839      	ldr	r1, [r7, #0]
 80048d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	605a      	str	r2, [r3, #4]
        return true;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e006      	b.n	80048f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	3301      	adds	r3, #1
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2b18      	cmp	r3, #24
 80048f0:	dde3      	ble.n	80048ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 80048f2:	2300      	movs	r3, #0
  }
 80048f4:	4618      	mov	r0, r3
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800490a:	2300      	movs	r3, #0
 800490c:	60fb      	str	r3, [r7, #12]
 800490e:	e01d      	b.n	800494c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
      if (publishers[i] == 0) // empty slot
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d111      	bne.n	8004946 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
        publishers[i] = &p;
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	60da      	str	r2, [r3, #12]
        return true;
 8004942:	2301      	movs	r3, #1
 8004944:	e006      	b.n	8004954 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	3301      	adds	r3, #1
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2b18      	cmp	r3, #24
 8004950:	ddde      	ble.n	8004910 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
    return false;
 8004952:	2300      	movs	r3, #0
  }
 8004954:	4618      	mov	r0, r3
 8004956:	3714      	adds	r7, #20
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3304      	adds	r3, #4
 800496c:	4618      	mov	r0, r3
 800496e:	f7fe f9f0 	bl	8002d52 <_ZN13STM32Hardware4timeEv>
 8004972:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f8d3 3908 	ldr.w	r3, [r3, #2312]	@ 0x908
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8004982:	4293      	cmp	r3, r2
 8004984:	d903      	bls.n	800498e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
    if (mode_ != MODE_FIRST_FF)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8004994:	2b00      	cmp	r3, #0
 8004996:	d009      	beq.n	80049ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d903      	bls.n	80049ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
      if (spin_timeout_ > 0)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d014      	beq.n	80049e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3304      	adds	r3, #4
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fe f9c9 	bl	8002d52 <_ZN13STM32Hardware4timeEv>
 80049c0:	4602      	mov	r2, r0
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	1ad2      	subs	r2, r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 80049cc:	429a      	cmp	r2, r3
 80049ce:	bf8c      	ite	hi
 80049d0:	2301      	movhi	r3, #1
 80049d2:	2300      	movls	r3, #0
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d002      	beq.n	80049e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 80049da:	f06f 0301 	mvn.w	r3, #1
 80049de:	e194      	b.n	8004d0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3304      	adds	r3, #4
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7fe f8e1 	bl	8002bac <_ZN13STM32Hardware4readEv>
 80049ea:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f2c0 8174 	blt.w	8004cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	@ 0x8fc
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	441a      	add	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8004a0a:	2b07      	cmp	r3, #7
 8004a0c:	d11e      	bne.n	8004a4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 8004a14:	1c59      	adds	r1, r3, #1
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	f8c2 18f8 	str.w	r1, [r2, #2296]	@ 0x8f8
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	b2d1      	uxtb	r1, r2
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	4413      	add	r3, r2
 8004a24:	460a      	mov	r2, r1
 8004a26:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
        bytes_--;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8004a30:	1e5a      	subs	r2, r3, #1
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1b4      	bne.n	80049ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2208      	movs	r2, #8
 8004a46:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8004a4a:	e7af      	b.n	80049ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d128      	bne.n	8004aa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2bff      	cmp	r3, #255	@ 0xff
 8004a5a:	d10d      	bne.n	8004a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f103 0214 	add.w	r2, r3, #20
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 8004a76:	e799      	b.n	80049ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3304      	adds	r3, #4
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7fe f968 	bl	8002d52 <_ZN13STM32Hardware4timeEv>
 8004a82:	4602      	mov	r2, r0
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	bf8c      	ite	hi
 8004a90:	2301      	movhi	r3, #1
 8004a92:	2300      	movls	r3, #0
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d088      	beq.n	80049ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
          return SPIN_TIMEOUT;
 8004aa2:	f06f 0301 	mvn.w	r3, #1
 8004aa6:	e130      	b.n	8004d0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d118      	bne.n	8004ae4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2bfe      	cmp	r3, #254	@ 0xfe
 8004ab6:	d107      	bne.n	8004ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8004ac6:	e771      	b.n	80049ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          if (configured_ == false)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f47f af68 	bne.w	80049ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f918 	bl	8004d12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8004ae2:	e763      	b.n	80049ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d113      	bne.n	8004b16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        index_ = 0;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
        mode_++;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8004b04:	1c5a      	adds	r2, r3, #1
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 8004b14:	e74a      	b.n	80049ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8004b1c:	2b03      	cmp	r3, #3
 8004b1e:	d110      	bne.n	8004b42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	@ 0x8f0
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	021b      	lsls	r3, r3, #8
 8004b2a:	441a      	add	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        mode_++;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8004b40:	e734      	b.n	80049ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8004b48:	2b04      	cmp	r3, #4
 8004b4a:	d116      	bne.n	8004b7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 8004b52:	425a      	negs	r2, r3
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	bf58      	it	pl
 8004b5a:	4253      	negpl	r3, r2
 8004b5c:	2bff      	cmp	r3, #255	@ 0xff
 8004b5e:	d107      	bne.n	8004b70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8004b66:	1c5a      	adds	r2, r3, #1
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8004b6e:	e71d      	b.n	80049ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8004b78:	e718      	b.n	80049ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8004b80:	2b05      	cmp	r3, #5
 8004b82:	d10f      	bne.n	8004ba4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_++;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8004b92:	1c5a      	adds	r2, r3, #1
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 8004ba2:	e703      	b.n	80049ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8004baa:	2b06      	cmp	r3, #6
 8004bac:	d117      	bne.n	8004bde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	@ 0x8f4
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	021b      	lsls	r3, r3, #8
 8004bb8:	441a      	add	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_ = MODE_MESSAGE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2207      	movs	r2, #7
 8004bc4:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if (bytes_ == 0)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f47f aeec 	bne.w	80049ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2208      	movs	r2, #8
 8004bd8:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8004bdc:	e6e6      	b.n	80049ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8004be4:	2b08      	cmp	r3, #8
 8004be6:	f47f aee1 	bne.w	80049ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if ((checksum_ % 256) == 255)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 8004bf8:	425a      	negs	r2, r3
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	bf58      	it	pl
 8004c00:	4253      	negpl	r3, r2
 8004c02:	2bff      	cmp	r3, #255	@ 0xff
 8004c04:	f47f aed2 	bne.w	80049ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d110      	bne.n	8004c34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f87d 	bl	8004d12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f898 	bl	8004d4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
            last_sync_receive_time = c_time;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
            return SPIN_ERR;
 8004c2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c32:	e06a      	b.n	8004d0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8004c3a:	2b0a      	cmp	r3, #10
 8004c3c:	d107      	bne.n	8004c4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8004c44:	4619      	mov	r1, r3
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f960 	bl	8004f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8004c4c:	e6ae      	b.n	80049ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8004c54:	2b06      	cmp	r3, #6
 8004c56:	d10e      	bne.n	8004c76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f603 1214 	addw	r2, r3, #2324	@ 0x914
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8004c64:	4619      	mov	r1, r3
 8004c66:	4610      	mov	r0, r2
 8004c68:	f7fd fd91 	bl	800278e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 8004c74:	e69a      	b.n	80049ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8004c7c:	2b0b      	cmp	r3, #11
 8004c7e:	d104      	bne.n	8004c8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 8004c88:	e690      	b.n	80049ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8004c90:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8004c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f43f ae84 	beq.w	80049ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8004caa:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8004cb4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8004cbe:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8004cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	f202 4224 	addw	r2, r2, #1060	@ 0x424
 8004cd6:	4611      	mov	r1, r2
 8004cd8:	4798      	blx	r3
    while (true)
 8004cda:	e667      	b.n	80049ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8004cdc:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00f      	beq.n	8004d08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d906      	bls.n	8004d08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f809 	bl	8004d12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
    return SPIN_OK;
 8004d08:	2300      	movs	r3, #0
  }
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b086      	sub	sp, #24
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004d1a:	f107 030c 	add.w	r3, r7, #12
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fd f892 	bl	8001e48 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f107 020c 	add.w	r2, r7, #12
 8004d2e:	210a      	movs	r1, #10
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	4798      	blx	r3
    rt_time = hardware_.time();
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3304      	adds	r3, #4
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7fe f80a 	bl	8002d52 <_ZN13STM32Hardware4timeEv>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
  }
 8004d46:	bf00      	nop
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8004d4e:	b590      	push	{r4, r7, lr}
 8004d50:	b08b      	sub	sp, #44	@ 0x2c
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004d56:	f107 030c 	add.w	r3, r7, #12
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fd f964 	bl	8002028 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004d60:	2300      	movs	r3, #0
 8004d62:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d64:	e062      	b.n	8004e2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4413      	add	r3, r2
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d056      	beq.n	8004e26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d90:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da2:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	6859      	ldr	r1, [r3, #4]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db2:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	3308      	adds	r3, #8
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4608      	mov	r0, r1
 8004dc6:	4798      	blx	r3
 8004dc8:	4603      	mov	r3, r0
 8004dca:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd0:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	6859      	ldr	r1, [r3, #4]
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de0:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	330c      	adds	r3, #12
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4608      	mov	r0, r1
 8004df4:	4798      	blx	r3
 8004df6:	4603      	mov	r3, r0
 8004df8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004dfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004dfe:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681c      	ldr	r4, [r3, #0]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7fd fe72 	bl	8002afe <_ZN3ros9Publisher15getEndpointTypeEv>
 8004e1a:	4601      	mov	r1, r0
 8004e1c:	f107 030c 	add.w	r3, r7, #12
 8004e20:	461a      	mov	r2, r3
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e28:	3301      	adds	r3, #1
 8004e2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2e:	2b18      	cmp	r3, #24
 8004e30:	dd99      	ble.n	8004d66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004e32:	2300      	movs	r3, #0
 8004e34:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e36:	e05e      	b.n	8004ef6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e3c:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8004e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d053      	beq.n	8004ef0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e4c:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8004e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e5e:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8004e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e6e:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8004e72:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e7a:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8004e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	3308      	adds	r3, #8
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4608      	mov	r0, r1
 8004e8a:	4798      	blx	r3
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e94:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8004e98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ea0:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8004ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	330c      	adds	r3, #12
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4608      	mov	r0, r1
 8004eb0:	4798      	blx	r3
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004eb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004eba:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681c      	ldr	r4, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ec6:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8004eca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ed2:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8004ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	3304      	adds	r3, #4
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4608      	mov	r0, r1
 8004ee2:	4798      	blx	r3
 8004ee4:	4601      	mov	r1, r0
 8004ee6:	f107 030c 	add.w	r3, r7, #12
 8004eea:	461a      	mov	r2, r3
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef8:	2b18      	cmp	r3, #24
 8004efa:	dd9d      	ble.n	8004e38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
  }
 8004f04:	bf00      	nop
 8004f06:	372c      	adds	r7, #44	@ 0x2c
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd90      	pop	{r4, r7, pc}

08004f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004f16:	f107 0308 	add.w	r3, r7, #8
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fc ff94 	bl	8001e48 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	3304      	adds	r3, #4
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7fd ff14 	bl	8002d52 <_ZN13STM32Hardware4timeEv>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004f36:	f107 0308 	add.w	r3, r7, #8
 8004f3a:	6839      	ldr	r1, [r7, #0]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7fc fff3 	bl	8001f28 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	4915      	ldr	r1, [pc, #84]	@ (8004f9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004f48:	fba1 1303 	umull	r1, r3, r1, r3
 8004f4c:	099b      	lsrs	r3, r3, #6
 8004f4e:	4413      	add	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004f52:	6939      	ldr	r1, [r7, #16]
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	4b11      	ldr	r3, [pc, #68]	@ (8004f9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004f58:	fba3 0302 	umull	r0, r3, r3, r2
 8004f5c:	099b      	lsrs	r3, r3, #6
 8004f5e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004f62:	fb00 f303 	mul.w	r3, r0, r3
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	4a0d      	ldr	r2, [pc, #52]	@ (8004fa0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004f6a:	fb02 f303 	mul.w	r3, r2, r3
 8004f6e:	440b      	add	r3, r1
 8004f70:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004f72:	f107 0308 	add.w	r3, r7, #8
 8004f76:	3304      	adds	r3, #4
 8004f78:	4619      	mov	r1, r3
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f8a6 	bl	80050cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3304      	adds	r3, #4
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7fd fee4 	bl	8002d52 <_ZN13STM32Hardware4timeEv>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
  }
 8004f92:	bf00      	nop
 8004f94:	3718      	adds	r7, #24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	10624dd3 	.word	0x10624dd3
 8004fa0:	000f4240 	.word	0x000f4240

08004fa4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b088      	sub	sp, #32
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2b63      	cmp	r3, #99	@ 0x63
 8004fb4:	dd09      	ble.n	8004fca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8004fbc:	f083 0301 	eor.w	r3, r3, #1
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	e079      	b.n	80050be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	f202 6224 	addw	r2, r2, #1572	@ 0x624
 8004fd6:	3207      	adds	r2, #7
 8004fd8:	4611      	mov	r1, r2
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	4798      	blx	r3
 8004fde:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	22ff      	movs	r2, #255	@ 0xff
 8004fe4:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624
    message_out[1] = PROTOCOL_VER;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	22fe      	movs	r2, #254	@ 0xfe
 8004fec:	f883 2625 	strb.w	r2, [r3, #1573]	@ 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f883 2626 	strb.w	r2, [r3, #1574]	@ 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	0a1b      	lsrs	r3, r3, #8
 8005000:	b29b      	uxth	r3, r3
 8005002:	b2da      	uxtb	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f883 2627 	strb.w	r2, [r3, #1575]	@ 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f893 2626 	ldrb.w	r2, [r3, #1574]	@ 0x626
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f893 3627 	ldrb.w	r3, [r3, #1575]	@ 0x627
 8005016:	4413      	add	r3, r2
 8005018:	b2db      	uxtb	r3, r3
 800501a:	43db      	mvns	r3, r3
 800501c:	b2da      	uxtb	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f883 2628 	strb.w	r2, [r3, #1576]	@ 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	b2da      	uxtb	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f883 2629 	strb.w	r2, [r3, #1577]	@ 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	b21b      	sxth	r3, r3
 8005032:	121b      	asrs	r3, r3, #8
 8005034:	b21b      	sxth	r3, r3
 8005036:	b2da      	uxtb	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f883 262a 	strb.w	r2, [r3, #1578]	@ 0x62a

    /* calculate checksum */
    int chk = 0;
 800503e:	2300      	movs	r3, #0
 8005040:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8005042:	2305      	movs	r3, #5
 8005044:	61bb      	str	r3, [r7, #24]
 8005046:	e00c      	b.n	8005062 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	4413      	add	r3, r2
 800504e:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	461a      	mov	r2, r3
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	4413      	add	r3, r2
 800505a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	3301      	adds	r3, #1
 8005060:	61bb      	str	r3, [r7, #24]
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	3306      	adds	r3, #6
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	429a      	cmp	r2, r3
 800506a:	dded      	ble.n	8005048 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	3307      	adds	r3, #7
 8005070:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	425a      	negs	r2, r3
 8005076:	b2db      	uxtb	r3, r3
 8005078:	b2d2      	uxtb	r2, r2
 800507a:	bf58      	it	pl
 800507c:	4253      	negpl	r3, r2
 800507e:	b2da      	uxtb	r2, r3
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	1c59      	adds	r1, r3, #1
 8005084:	6179      	str	r1, [r7, #20]
 8005086:	43d2      	mvns	r2, r2
 8005088:	b2d1      	uxtb	r1, r2
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	4413      	add	r3, r2
 800508e:	460a      	mov	r2, r1
 8005090:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624

    if (l <= OUTPUT_SIZE)
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800509a:	dc0a      	bgt.n	80050b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	1d18      	adds	r0, r3, #4
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	4619      	mov	r1, r3
 80050aa:	f7fd fe0b 	bl	8002cc4 <_ZN13STM32Hardware5writeEPhi>
      return l;
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	e005      	b.n	80050be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80050b2:	4905      	ldr	r1, [pc, #20]	@ (80050c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f000 f849 	bl	800514c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80050ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
  }
 80050be:	4618      	mov	r0, r3
 80050c0:	3720      	adds	r7, #32
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	0800bc4c 	.word	0x0800bc4c

080050cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3304      	adds	r3, #4
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fd fe39 	bl	8002d52 <_ZN13STM32Hardware4timeEv>
 80050e0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	4915      	ldr	r1, [pc, #84]	@ (8005140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80050ea:	fba1 1303 	umull	r1, r3, r1, r3
 80050ee:	099b      	lsrs	r3, r3, #6
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	1e5a      	subs	r2, r3, #1
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	6859      	ldr	r1, [r3, #4]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	4b0f      	ldr	r3, [pc, #60]	@ (8005140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8005102:	fba3 0302 	umull	r0, r3, r3, r2
 8005106:	099b      	lsrs	r3, r3, #6
 8005108:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800510c:	fb00 f303 	mul.w	r3, r0, r3
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	4a0c      	ldr	r2, [pc, #48]	@ (8005144 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8005114:	fb02 f303 	mul.w	r3, r2, r3
 8005118:	1aca      	subs	r2, r1, r3
 800511a:	4b0b      	ldr	r3, [pc, #44]	@ (8005148 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 800511c:	4413      	add	r3, r2
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	f8c2 341c 	str.w	r3, [r2, #1052]	@ 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f503 6283 	add.w	r2, r3, #1048	@ 0x418
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8005130:	4619      	mov	r1, r3
 8005132:	4610      	mov	r0, r2
 8005134:	f7fb ff50 	bl	8000fd8 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8005138:	bf00      	nop
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	10624dd3 	.word	0x10624dd3
 8005144:	000f4240 	.word	0x000f4240
 8005148:	3b9aca00 	.word	0x3b9aca00

0800514c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	2103      	movs	r1, #3
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f804 	bl	8005168 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8005160:	bf00      	nop
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8005168:	b580      	push	{r7, lr}
 800516a:	b088      	sub	sp, #32
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	460b      	mov	r3, r1
 8005172:	607a      	str	r2, [r7, #4]
 8005174:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8005176:	f107 0314 	add.w	r3, r7, #20
 800517a:	4618      	mov	r0, r3
 800517c:	f7fd f918 	bl	80023b0 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8005180:	7afb      	ldrb	r3, [r7, #11]
 8005182:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f107 0214 	add.w	r2, r7, #20
 8005192:	2107      	movs	r1, #7
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	4798      	blx	r3
  }
 8005198:	bf00      	nop
 800519a:	3720      	adds	r7, #32
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <_Z41__static_initialization_and_destruction_0ii>:
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d11f      	bne.n	80051f0 <_Z41__static_initialization_and_destruction_0ii+0x50>
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d11a      	bne.n	80051f0 <_Z41__static_initialization_and_destruction_0ii+0x50>
ros::NodeHandle nh;
 80051ba:	480f      	ldr	r0, [pc, #60]	@ (80051f8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80051bc:	f7ff f9da 	bl	8004574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Float32 float_msg;  // Tipe pesan ROS untuk data float
 80051c0:	480e      	ldr	r0, [pc, #56]	@ (80051fc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80051c2:	f7fd fdd1 	bl	8002d68 <_ZN8std_msgs7Float32C1Ev>
ros::Publisher pub("float_data", &float_msg);
 80051c6:	2300      	movs	r3, #0
 80051c8:	4a0c      	ldr	r2, [pc, #48]	@ (80051fc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80051ca:	490d      	ldr	r1, [pc, #52]	@ (8005200 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80051cc:	480d      	ldr	r0, [pc, #52]	@ (8005204 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80051ce:	f7fd fc6b 	bl	8002aa8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
krsbi2025::Wheel wheel_output;
 80051d2:	480d      	ldr	r0, [pc, #52]	@ (8005208 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80051d4:	f7ff f872 	bl	80042bc <_ZN9krsbi20255WheelC1Ev>
ros::Publisher pub_outputControl("/arduino/topic_OutputControl", &wheel_output);  // Publisher dengan topik "float_data"
 80051d8:	2300      	movs	r3, #0
 80051da:	4a0b      	ldr	r2, [pc, #44]	@ (8005208 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80051dc:	490b      	ldr	r1, [pc, #44]	@ (800520c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80051de:	480c      	ldr	r0, [pc, #48]	@ (8005210 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80051e0:	f7fd fc62 	bl	8002aa8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<krsbi2025::BallPositionBasedOnCamera> sub("BallPositionBasedOnCamera", &cam_data_callback);
 80051e4:	2301      	movs	r3, #1
 80051e6:	4a0b      	ldr	r2, [pc, #44]	@ (8005214 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80051e8:	490b      	ldr	r1, [pc, #44]	@ (8005218 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80051ea:	480c      	ldr	r0, [pc, #48]	@ (800521c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80051ec:	f7ff fb10 	bl	8004810 <_ZN3ros10SubscriberIN9krsbi202525BallPositionBasedOnCameraEvEC1EPKcPFvRKS2_Ei>
}
 80051f0:	bf00      	nop
 80051f2:	3708      	adds	r7, #8
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	200001a8 	.word	0x200001a8
 80051fc:	20000ae4 	.word	0x20000ae4
 8005200:	0800bc88 	.word	0x0800bc88
 8005204:	20000aec 	.word	0x20000aec
 8005208:	20000b00 	.word	0x20000b00
 800520c:	0800bc94 	.word	0x0800bc94
 8005210:	20000b1c 	.word	0x20000b1c
 8005214:	080044c9 	.word	0x080044c9
 8005218:	0800bcb4 	.word	0x0800bcb4
 800521c:	20000b30 	.word	0x20000b30

08005220 <_ZN3ros10SubscriberIN9krsbi202525BallPositionBasedOnCameraEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	3310      	adds	r3, #16
 800522e:	6839      	ldr	r1, [r7, #0]
 8005230:	4618      	mov	r0, r3
 8005232:	f7fe f949 	bl	80034c8 <_ZN9krsbi202525BallPositionBasedOnCamera11deserializeEPh>
    this->cb_(msg);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	3210      	adds	r2, #16
 800523e:	4610      	mov	r0, r2
 8005240:	4798      	blx	r3
  }
 8005242:	bf00      	nop
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <_ZN3ros10SubscriberIN9krsbi202525BallPositionBasedOnCameraEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
  }
 8005256:	4618      	mov	r0, r3
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <_ZN3ros10SubscriberIN9krsbi202525BallPositionBasedOnCameraEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8005262:	b580      	push	{r7, lr}
 8005264:	b082      	sub	sp, #8
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	3310      	adds	r3, #16
 800526e:	4618      	mov	r0, r3
 8005270:	f7ff f808 	bl	8004284 <_ZN9krsbi202525BallPositionBasedOnCamera7getTypeEv>
 8005274:	4603      	mov	r3, r0
  }
 8005276:	4618      	mov	r0, r3
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <_ZN3ros10SubscriberIN9krsbi202525BallPositionBasedOnCameraEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 800527e:	b580      	push	{r7, lr}
 8005280:	b082      	sub	sp, #8
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	3310      	adds	r3, #16
 800528a:	4618      	mov	r0, r3
 800528c:	f7ff f808 	bl	80042a0 <_ZN9krsbi202525BallPositionBasedOnCamera6getMD5Ev>
 8005290:	4603      	mov	r3, r0
  }
 8005292:	4618      	mov	r0, r3
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
    return configured_;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
  };
 80052a8:	4618      	mov	r0, r3
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <_GLOBAL__sub_I_bno>:
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80052bc:	2001      	movs	r0, #1
 80052be:	f7ff ff6f 	bl	80051a0 <_Z41__static_initialization_and_destruction_0ii>
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <remap>:

#include "motor.h"
#include <math.h>


void remap(float *force, float fromMinMax[2], float toMinMax[2]){
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
	*force = ((*force - fromMinMax[0]) / (fromMinMax[1] - fromMinMax[0])) * (toMinMax[1] - toMinMax[0]) + toMinMax[0];
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	ed93 7a00 	vldr	s14, [r3]
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	edd3 7a00 	vldr	s15, [r3]
 80052dc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	3304      	adds	r3, #4
 80052e4:	ed93 7a00 	vldr	s14, [r3]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	edd3 7a00 	vldr	s15, [r3]
 80052ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	3304      	adds	r3, #4
 80052fa:	edd3 6a00 	vldr	s13, [r3]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	edd3 7a00 	vldr	s15, [r3]
 8005304:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005308:	ee27 7a27 	vmul.f32	s14, s14, s15
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	edd3 7a00 	vldr	s15, [r3]
 8005312:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	edc3 7a00 	vstr	s15, [r3]
}
 800531c:	bf00      	nop
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <motor_calculation>:
//float error_jarak_calculation(float setPoint_jarak, float data_jarak){
//	return fabs(data_jarak - setPoint_jarak);
//}

	float force1, force2, force3, test;
void motor_calculation(float ax, float ay, float w) {
 8005328:	b5b0      	push	{r4, r5, r7, lr}
 800532a:	b09c      	sub	sp, #112	@ 0x70
 800532c:	af00      	add	r7, sp, #0
 800532e:	ed87 0a03 	vstr	s0, [r7, #12]
 8005332:	edc7 0a02 	vstr	s1, [r7, #8]
 8005336:	ed87 1a01 	vstr	s2, [r7, #4]

	// Menghitung force untuk setiap motor
	roda.force1 = ((-0.5773509529248335 * ax) + (-0.33333368867682667 * ay) + (0.33333368867682667 * w));
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f7fb f90c 	bl	8000558 <__aeabi_f2d>
 8005340:	a3d4      	add	r3, pc, #848	@ (adr r3, 8005694 <motor_calculation+0x36c>)
 8005342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005346:	f7fb f95f 	bl	8000608 <__aeabi_dmul>
 800534a:	4602      	mov	r2, r0
 800534c:	460b      	mov	r3, r1
 800534e:	4614      	mov	r4, r2
 8005350:	461d      	mov	r5, r3
 8005352:	68b8      	ldr	r0, [r7, #8]
 8005354:	f7fb f900 	bl	8000558 <__aeabi_f2d>
 8005358:	a3d0      	add	r3, pc, #832	@ (adr r3, 800569c <motor_calculation+0x374>)
 800535a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535e:	f7fb f953 	bl	8000608 <__aeabi_dmul>
 8005362:	4602      	mov	r2, r0
 8005364:	460b      	mov	r3, r1
 8005366:	4620      	mov	r0, r4
 8005368:	4629      	mov	r1, r5
 800536a:	f7fa ff97 	bl	800029c <__adddf3>
 800536e:	4602      	mov	r2, r0
 8005370:	460b      	mov	r3, r1
 8005372:	4614      	mov	r4, r2
 8005374:	461d      	mov	r5, r3
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7fb f8ee 	bl	8000558 <__aeabi_f2d>
 800537c:	a3c9      	add	r3, pc, #804	@ (adr r3, 80056a4 <motor_calculation+0x37c>)
 800537e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005382:	f7fb f941 	bl	8000608 <__aeabi_dmul>
 8005386:	4602      	mov	r2, r0
 8005388:	460b      	mov	r3, r1
 800538a:	4620      	mov	r0, r4
 800538c:	4629      	mov	r1, r5
 800538e:	f7fa ff85 	bl	800029c <__adddf3>
 8005392:	4602      	mov	r2, r0
 8005394:	460b      	mov	r3, r1
 8005396:	4610      	mov	r0, r2
 8005398:	4619      	mov	r1, r3
 800539a:	f7fb fb47 	bl	8000a2c <__aeabi_d2f>
 800539e:	4603      	mov	r3, r0
 80053a0:	4ab5      	ldr	r2, [pc, #724]	@ (8005678 <motor_calculation+0x350>)
 80053a2:	6193      	str	r3, [r2, #24]
	roda.force2 = ((0.5773509529248335 * ax) + (-0.3333329779898402 * ay) + (0.3333329779898402 * w));
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f7fb f8d7 	bl	8000558 <__aeabi_f2d>
 80053aa:	a3a9      	add	r3, pc, #676	@ (adr r3, 8005650 <motor_calculation+0x328>)
 80053ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b0:	f7fb f92a 	bl	8000608 <__aeabi_dmul>
 80053b4:	4602      	mov	r2, r0
 80053b6:	460b      	mov	r3, r1
 80053b8:	4614      	mov	r4, r2
 80053ba:	461d      	mov	r5, r3
 80053bc:	68b8      	ldr	r0, [r7, #8]
 80053be:	f7fb f8cb 	bl	8000558 <__aeabi_f2d>
 80053c2:	a3a5      	add	r3, pc, #660	@ (adr r3, 8005658 <motor_calculation+0x330>)
 80053c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c8:	f7fb f91e 	bl	8000608 <__aeabi_dmul>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4620      	mov	r0, r4
 80053d2:	4629      	mov	r1, r5
 80053d4:	f7fa ff62 	bl	800029c <__adddf3>
 80053d8:	4602      	mov	r2, r0
 80053da:	460b      	mov	r3, r1
 80053dc:	4614      	mov	r4, r2
 80053de:	461d      	mov	r5, r3
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7fb f8b9 	bl	8000558 <__aeabi_f2d>
 80053e6:	a39e      	add	r3, pc, #632	@ (adr r3, 8005660 <motor_calculation+0x338>)
 80053e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ec:	f7fb f90c 	bl	8000608 <__aeabi_dmul>
 80053f0:	4602      	mov	r2, r0
 80053f2:	460b      	mov	r3, r1
 80053f4:	4620      	mov	r0, r4
 80053f6:	4629      	mov	r1, r5
 80053f8:	f7fa ff50 	bl	800029c <__adddf3>
 80053fc:	4602      	mov	r2, r0
 80053fe:	460b      	mov	r3, r1
 8005400:	4610      	mov	r0, r2
 8005402:	4619      	mov	r1, r3
 8005404:	f7fb fb12 	bl	8000a2c <__aeabi_d2f>
 8005408:	4603      	mov	r3, r0
 800540a:	4a9b      	ldr	r2, [pc, #620]	@ (8005678 <motor_calculation+0x350>)
 800540c:	61d3      	str	r3, [r2, #28]
	roda.force3 = ((0 * ax) + (0.6666666666666669 * ay) + (0.33333333333333326 * w));
 800540e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005412:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800567c <motor_calculation+0x354>
 8005416:	ee67 7a87 	vmul.f32	s15, s15, s14
 800541a:	ee17 0a90 	vmov	r0, s15
 800541e:	f7fb f89b 	bl	8000558 <__aeabi_f2d>
 8005422:	4604      	mov	r4, r0
 8005424:	460d      	mov	r5, r1
 8005426:	68b8      	ldr	r0, [r7, #8]
 8005428:	f7fb f896 	bl	8000558 <__aeabi_f2d>
 800542c:	a38e      	add	r3, pc, #568	@ (adr r3, 8005668 <motor_calculation+0x340>)
 800542e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005432:	f7fb f8e9 	bl	8000608 <__aeabi_dmul>
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	4620      	mov	r0, r4
 800543c:	4629      	mov	r1, r5
 800543e:	f7fa ff2d 	bl	800029c <__adddf3>
 8005442:	4602      	mov	r2, r0
 8005444:	460b      	mov	r3, r1
 8005446:	4614      	mov	r4, r2
 8005448:	461d      	mov	r5, r3
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7fb f884 	bl	8000558 <__aeabi_f2d>
 8005450:	a387      	add	r3, pc, #540	@ (adr r3, 8005670 <motor_calculation+0x348>)
 8005452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005456:	f7fb f8d7 	bl	8000608 <__aeabi_dmul>
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	4620      	mov	r0, r4
 8005460:	4629      	mov	r1, r5
 8005462:	f7fa ff1b 	bl	800029c <__adddf3>
 8005466:	4602      	mov	r2, r0
 8005468:	460b      	mov	r3, r1
 800546a:	4610      	mov	r0, r2
 800546c:	4619      	mov	r1, r3
 800546e:	f7fb fadd 	bl	8000a2c <__aeabi_d2f>
 8005472:	4603      	mov	r3, r0
 8005474:	4a80      	ldr	r2, [pc, #512]	@ (8005678 <motor_calculation+0x350>)
 8005476:	6213      	str	r3, [r2, #32]

	// Remap jika force1 >= 0
	if (roda.force1 >= 0) {
 8005478:	4b7f      	ldr	r3, [pc, #508]	@ (8005678 <motor_calculation+0x350>)
 800547a:	edd3 7a06 	vldr	s15, [r3, #24]
 800547e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005486:	db1a      	blt.n	80054be <motor_calculation+0x196>
		float fromRange[2] = {0, 0.91};
 8005488:	f04f 0300 	mov.w	r3, #0
 800548c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800548e:	4b7c      	ldr	r3, [pc, #496]	@ (8005680 <motor_calculation+0x358>)
 8005490:	66fb      	str	r3, [r7, #108]	@ 0x6c
		float toRange[2] = {0, 255};
 8005492:	f04f 0300 	mov.w	r3, #0
 8005496:	663b      	str	r3, [r7, #96]	@ 0x60
 8005498:	4b7a      	ldr	r3, [pc, #488]	@ (8005684 <motor_calculation+0x35c>)
 800549a:	667b      	str	r3, [r7, #100]	@ 0x64
		remap(&roda.force1, fromRange, toRange);
 800549c:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 80054a0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80054a4:	4619      	mov	r1, r3
 80054a6:	4878      	ldr	r0, [pc, #480]	@ (8005688 <motor_calculation+0x360>)
 80054a8:	f7ff ff0c 	bl	80052c4 <remap>
		roda.aCW = roda.force1;
 80054ac:	4b72      	ldr	r3, [pc, #456]	@ (8005678 <motor_calculation+0x350>)
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	4a71      	ldr	r2, [pc, #452]	@ (8005678 <motor_calculation+0x350>)
 80054b2:	6013      	str	r3, [r2, #0]
		roda.aCCW = 0;
 80054b4:	4b70      	ldr	r3, [pc, #448]	@ (8005678 <motor_calculation+0x350>)
 80054b6:	f04f 0200 	mov.w	r2, #0
 80054ba:	605a      	str	r2, [r3, #4]
 80054bc:	e029      	b.n	8005512 <motor_calculation+0x1ea>
	}
	else if(roda.force1 < 0){
 80054be:	4b6e      	ldr	r3, [pc, #440]	@ (8005678 <motor_calculation+0x350>)
 80054c0:	edd3 7a06 	vldr	s15, [r3, #24]
 80054c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054cc:	d521      	bpl.n	8005512 <motor_calculation+0x1ea>
		roda.force1 = fabs(roda.force1);
 80054ce:	4b6a      	ldr	r3, [pc, #424]	@ (8005678 <motor_calculation+0x350>)
 80054d0:	edd3 7a06 	vldr	s15, [r3, #24]
 80054d4:	eef0 7ae7 	vabs.f32	s15, s15
 80054d8:	4b67      	ldr	r3, [pc, #412]	@ (8005678 <motor_calculation+0x350>)
 80054da:	edc3 7a06 	vstr	s15, [r3, #24]
		float fromRange[2] = {0, 0.91};
 80054de:	f04f 0300 	mov.w	r3, #0
 80054e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80054e4:	4b66      	ldr	r3, [pc, #408]	@ (8005680 <motor_calculation+0x358>)
 80054e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
		float toRange[2] = {0, 255};
 80054e8:	f04f 0300 	mov.w	r3, #0
 80054ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80054ee:	4b65      	ldr	r3, [pc, #404]	@ (8005684 <motor_calculation+0x35c>)
 80054f0:	657b      	str	r3, [r7, #84]	@ 0x54
		remap(&roda.force1, fromRange, toRange);
 80054f2:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80054f6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80054fa:	4619      	mov	r1, r3
 80054fc:	4862      	ldr	r0, [pc, #392]	@ (8005688 <motor_calculation+0x360>)
 80054fe:	f7ff fee1 	bl	80052c4 <remap>
		roda.aCW = 0;
 8005502:	4b5d      	ldr	r3, [pc, #372]	@ (8005678 <motor_calculation+0x350>)
 8005504:	f04f 0200 	mov.w	r2, #0
 8005508:	601a      	str	r2, [r3, #0]
		roda.aCCW = roda.force1;
 800550a:	4b5b      	ldr	r3, [pc, #364]	@ (8005678 <motor_calculation+0x350>)
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	4a5a      	ldr	r2, [pc, #360]	@ (8005678 <motor_calculation+0x350>)
 8005510:	6053      	str	r3, [r2, #4]

	}
	if (roda.force2 >= 0) {
 8005512:	4b59      	ldr	r3, [pc, #356]	@ (8005678 <motor_calculation+0x350>)
 8005514:	edd3 7a07 	vldr	s15, [r3, #28]
 8005518:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800551c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005520:	db1a      	blt.n	8005558 <motor_calculation+0x230>
		float fromRange[2] = {0, 0.91};
 8005522:	f04f 0300 	mov.w	r3, #0
 8005526:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005528:	4b55      	ldr	r3, [pc, #340]	@ (8005680 <motor_calculation+0x358>)
 800552a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		float toRange[2] = {0, 255};
 800552c:	f04f 0300 	mov.w	r3, #0
 8005530:	643b      	str	r3, [r7, #64]	@ 0x40
 8005532:	4b54      	ldr	r3, [pc, #336]	@ (8005684 <motor_calculation+0x35c>)
 8005534:	647b      	str	r3, [r7, #68]	@ 0x44
		remap(&roda.force2, fromRange, toRange);
 8005536:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800553a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800553e:	4619      	mov	r1, r3
 8005540:	4852      	ldr	r0, [pc, #328]	@ (800568c <motor_calculation+0x364>)
 8005542:	f7ff febf 	bl	80052c4 <remap>
		roda.bCW = roda.force2;
 8005546:	4b4c      	ldr	r3, [pc, #304]	@ (8005678 <motor_calculation+0x350>)
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	4a4b      	ldr	r2, [pc, #300]	@ (8005678 <motor_calculation+0x350>)
 800554c:	6093      	str	r3, [r2, #8]
		roda.bCCW = 0;
 800554e:	4b4a      	ldr	r3, [pc, #296]	@ (8005678 <motor_calculation+0x350>)
 8005550:	f04f 0200 	mov.w	r2, #0
 8005554:	60da      	str	r2, [r3, #12]
 8005556:	e029      	b.n	80055ac <motor_calculation+0x284>
	}
	else if(roda.force2 < 0){
 8005558:	4b47      	ldr	r3, [pc, #284]	@ (8005678 <motor_calculation+0x350>)
 800555a:	edd3 7a07 	vldr	s15, [r3, #28]
 800555e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005566:	d521      	bpl.n	80055ac <motor_calculation+0x284>
		roda.force2 = fabs(roda.force2);
 8005568:	4b43      	ldr	r3, [pc, #268]	@ (8005678 <motor_calculation+0x350>)
 800556a:	edd3 7a07 	vldr	s15, [r3, #28]
 800556e:	eef0 7ae7 	vabs.f32	s15, s15
 8005572:	4b41      	ldr	r3, [pc, #260]	@ (8005678 <motor_calculation+0x350>)
 8005574:	edc3 7a07 	vstr	s15, [r3, #28]
		float fromRange[2] = {0, 0.91};
 8005578:	f04f 0300 	mov.w	r3, #0
 800557c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800557e:	4b40      	ldr	r3, [pc, #256]	@ (8005680 <motor_calculation+0x358>)
 8005580:	63fb      	str	r3, [r7, #60]	@ 0x3c
		float toRange[2] = {0, 255};
 8005582:	f04f 0300 	mov.w	r3, #0
 8005586:	633b      	str	r3, [r7, #48]	@ 0x30
 8005588:	4b3e      	ldr	r3, [pc, #248]	@ (8005684 <motor_calculation+0x35c>)
 800558a:	637b      	str	r3, [r7, #52]	@ 0x34
		remap(&roda.force2, fromRange, toRange);
 800558c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8005590:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005594:	4619      	mov	r1, r3
 8005596:	483d      	ldr	r0, [pc, #244]	@ (800568c <motor_calculation+0x364>)
 8005598:	f7ff fe94 	bl	80052c4 <remap>
		roda.bCW = 0;
 800559c:	4b36      	ldr	r3, [pc, #216]	@ (8005678 <motor_calculation+0x350>)
 800559e:	f04f 0200 	mov.w	r2, #0
 80055a2:	609a      	str	r2, [r3, #8]
		roda.bCCW = roda.force2;
 80055a4:	4b34      	ldr	r3, [pc, #208]	@ (8005678 <motor_calculation+0x350>)
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	4a33      	ldr	r2, [pc, #204]	@ (8005678 <motor_calculation+0x350>)
 80055aa:	60d3      	str	r3, [r2, #12]

	}if (roda.force3 >= 0) {
 80055ac:	4b32      	ldr	r3, [pc, #200]	@ (8005678 <motor_calculation+0x350>)
 80055ae:	edd3 7a08 	vldr	s15, [r3, #32]
 80055b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80055b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055ba:	db1a      	blt.n	80055f2 <motor_calculation+0x2ca>
		float fromRange[2] = {0, 0.91};
 80055bc:	f04f 0300 	mov.w	r3, #0
 80055c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055c2:	4b2f      	ldr	r3, [pc, #188]	@ (8005680 <motor_calculation+0x358>)
 80055c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		float toRange[2] = {0, 255};
 80055c6:	f04f 0300 	mov.w	r3, #0
 80055ca:	623b      	str	r3, [r7, #32]
 80055cc:	4b2d      	ldr	r3, [pc, #180]	@ (8005684 <motor_calculation+0x35c>)
 80055ce:	627b      	str	r3, [r7, #36]	@ 0x24
		remap(&roda.force3, fromRange, toRange);
 80055d0:	f107 0220 	add.w	r2, r7, #32
 80055d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80055d8:	4619      	mov	r1, r3
 80055da:	482d      	ldr	r0, [pc, #180]	@ (8005690 <motor_calculation+0x368>)
 80055dc:	f7ff fe72 	bl	80052c4 <remap>
		roda.cCW = roda.force3;
 80055e0:	4b25      	ldr	r3, [pc, #148]	@ (8005678 <motor_calculation+0x350>)
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	4a24      	ldr	r2, [pc, #144]	@ (8005678 <motor_calculation+0x350>)
 80055e6:	6113      	str	r3, [r2, #16]
		roda.cCCW = 0;
 80055e8:	4b23      	ldr	r3, [pc, #140]	@ (8005678 <motor_calculation+0x350>)
 80055ea:	f04f 0200 	mov.w	r2, #0
 80055ee:	615a      	str	r2, [r3, #20]

	}


	// Lakukan hal yang sama untuk force2 dan force3 jika diperlukan
}
 80055f0:	e02a      	b.n	8005648 <motor_calculation+0x320>
	else if(roda.force3 < 0){
 80055f2:	4b21      	ldr	r3, [pc, #132]	@ (8005678 <motor_calculation+0x350>)
 80055f4:	edd3 7a08 	vldr	s15, [r3, #32]
 80055f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80055fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005600:	d400      	bmi.n	8005604 <motor_calculation+0x2dc>
}
 8005602:	e021      	b.n	8005648 <motor_calculation+0x320>
		roda.force3 = fabs(roda.force3);
 8005604:	4b1c      	ldr	r3, [pc, #112]	@ (8005678 <motor_calculation+0x350>)
 8005606:	edd3 7a08 	vldr	s15, [r3, #32]
 800560a:	eef0 7ae7 	vabs.f32	s15, s15
 800560e:	4b1a      	ldr	r3, [pc, #104]	@ (8005678 <motor_calculation+0x350>)
 8005610:	edc3 7a08 	vstr	s15, [r3, #32]
		float fromRange[2] = {0, 0.91};
 8005614:	f04f 0300 	mov.w	r3, #0
 8005618:	61bb      	str	r3, [r7, #24]
 800561a:	4b19      	ldr	r3, [pc, #100]	@ (8005680 <motor_calculation+0x358>)
 800561c:	61fb      	str	r3, [r7, #28]
		float toRange[2] = {0, 255};
 800561e:	f04f 0300 	mov.w	r3, #0
 8005622:	613b      	str	r3, [r7, #16]
 8005624:	4b17      	ldr	r3, [pc, #92]	@ (8005684 <motor_calculation+0x35c>)
 8005626:	617b      	str	r3, [r7, #20]
		remap(&roda.force3, fromRange, toRange);
 8005628:	f107 0210 	add.w	r2, r7, #16
 800562c:	f107 0318 	add.w	r3, r7, #24
 8005630:	4619      	mov	r1, r3
 8005632:	4817      	ldr	r0, [pc, #92]	@ (8005690 <motor_calculation+0x368>)
 8005634:	f7ff fe46 	bl	80052c4 <remap>
		roda.cCW = 0;
 8005638:	4b0f      	ldr	r3, [pc, #60]	@ (8005678 <motor_calculation+0x350>)
 800563a:	f04f 0200 	mov.w	r2, #0
 800563e:	611a      	str	r2, [r3, #16]
		roda.cCCW = roda.force3;
 8005640:	4b0d      	ldr	r3, [pc, #52]	@ (8005678 <motor_calculation+0x350>)
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	4a0c      	ldr	r2, [pc, #48]	@ (8005678 <motor_calculation+0x350>)
 8005646:	6153      	str	r3, [r2, #20]
}
 8005648:	bf00      	nop
 800564a:	3770      	adds	r7, #112	@ 0x70
 800564c:	46bd      	mov	sp, r7
 800564e:	bdb0      	pop	{r4, r5, r7, pc}
 8005650:	b4a40d12 	.word	0xb4a40d12
 8005654:	3fe279a8 	.word	0x3fe279a8
 8005658:	d7c941f8 	.word	0xd7c941f8
 800565c:	bfd55553 	.word	0xbfd55553
 8005660:	d7c941f8 	.word	0xd7c941f8
 8005664:	3fd55553 	.word	0x3fd55553
 8005668:	55555557 	.word	0x55555557
 800566c:	3fe55555 	.word	0x3fe55555
 8005670:	55555554 	.word	0x55555554
 8005674:	3fd55555 	.word	0x3fd55555
 8005678:	2000016c 	.word	0x2000016c
 800567c:	00000000 	.word	0x00000000
 8005680:	3f68f5c3 	.word	0x3f68f5c3
 8005684:	437f0000 	.word	0x437f0000
 8005688:	20000184 	.word	0x20000184
 800568c:	20000188 	.word	0x20000188
 8005690:	2000018c 	.word	0x2000018c
 8005694:	b4a40d12 	.word	0xb4a40d12
 8005698:	bfe279a8 	.word	0xbfe279a8
 800569c:	d2e168b6 	.word	0xd2e168b6
 80056a0:	bfd55556 	.word	0xbfd55556
 80056a4:	d2e168b6 	.word	0xd2e168b6
 80056a8:	3fd55556 	.word	0x3fd55556

080056ac <PID_Init>:


#include "pid.h"
#include <math.h>
float error = 0, derivative;
void PID_Init(PID_Controller *pid, float kp, float ki, float kd, float min_output, float max_output) {
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6178      	str	r0, [r7, #20]
 80056b4:	ed87 0a04 	vstr	s0, [r7, #16]
 80056b8:	edc7 0a03 	vstr	s1, [r7, #12]
 80056bc:	ed87 1a02 	vstr	s2, [r7, #8]
 80056c0:	edc7 1a01 	vstr	s3, [r7, #4]
 80056c4:	ed87 2a00 	vstr	s4, [r7]
    pid->kp = kp;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	601a      	str	r2, [r3, #0]
    pid->ki = ki;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	605a      	str	r2, [r3, #4]
    pid->kd = kd;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	609a      	str	r2, [r3, #8]
    pid->setpoint = 0.0;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f04f 0200 	mov.w	r2, #0
 80056e0:	60da      	str	r2, [r3, #12]
    pid->integral = 0.0;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f04f 0200 	mov.w	r2, #0
 80056e8:	611a      	str	r2, [r3, #16]
    pid->previous_error = 0.0;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f04f 0200 	mov.w	r2, #0
 80056f0:	615a      	str	r2, [r3, #20]
    pid->output = 0.0;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f04f 0200 	mov.w	r2, #0
 80056f8:	619a      	str	r2, [r3, #24]
    pid->max_output = max_output;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	621a      	str	r2, [r3, #32]
    pid->min_output = min_output;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	61da      	str	r2, [r3, #28]
    pid->error = 0.0;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f04f 0200 	mov.w	r2, #0
 800570c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800570e:	bf00      	nop
 8005710:	371c      	adds	r7, #28
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
	...

0800571c <PID_Update>:

float PID_Update(PID_Controller *pid, float current_value, float error) {
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	ed87 0a02 	vstr	s0, [r7, #8]
 8005728:	edc7 0a01 	vstr	s1, [r7, #4]
    pid->error = error;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	625a      	str	r2, [r3, #36]	@ 0x24
    pid->integral += pid->error;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	ed93 7a04 	vldr	s14, [r3, #16]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800573e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	edc3 7a04 	vstr	s15, [r3, #16]
    derivative = (pid->error - pid->previous_error);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	edd3 7a05 	vldr	s15, [r3, #20]
 8005754:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005758:	4b37      	ldr	r3, [pc, #220]	@ (8005838 <PID_Update+0x11c>)
 800575a:	edc3 7a00 	vstr	s15, [r3]

    pid->output = (pid->kp * pid->error) + (pid->ki * pid->integral) + (pid->kd * derivative);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	ed93 7a00 	vldr	s14, [r3]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800576a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	edd3 6a01 	vldr	s13, [r3, #4]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	edd3 7a04 	vldr	s15, [r3, #16]
 800577a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800577e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	edd3 6a02 	vldr	s13, [r3, #8]
 8005788:	4b2b      	ldr	r3, [pc, #172]	@ (8005838 <PID_Update+0x11c>)
 800578a:	edd3 7a00 	vldr	s15, [r3]
 800578e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	edc3 7a06 	vstr	s15, [r3, #24]

    if(pid->integral > pid->max_output){
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	ed93 7a04 	vldr	s14, [r3, #16]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	edd3 7a08 	vldr	s15, [r3, #32]
 80057a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80057ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057b0:	dd04      	ble.n	80057bc <PID_Update+0xa0>
    	pid->integral = pid->max_output;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6a1a      	ldr	r2, [r3, #32]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	611a      	str	r2, [r3, #16]
 80057ba:	e00e      	b.n	80057da <PID_Update+0xbe>
    }else if (pid->output < pid->min_output) {
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	ed93 7a06 	vldr	s14, [r3, #24]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	edd3 7a07 	vldr	s15, [r3, #28]
 80057c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80057cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057d0:	d503      	bpl.n	80057da <PID_Update+0xbe>
        pid->integral = pid->min_output;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	69da      	ldr	r2, [r3, #28]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	611a      	str	r2, [r3, #16]
    }

    if (pid->output > pid->max_output) {
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	ed93 7a06 	vldr	s14, [r3, #24]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	edd3 7a08 	vldr	s15, [r3, #32]
 80057e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80057ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ee:	dd04      	ble.n	80057fa <PID_Update+0xde>
        pid->output = pid->max_output;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6a1a      	ldr	r2, [r3, #32]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	619a      	str	r2, [r3, #24]
 80057f8:	e00e      	b.n	8005818 <PID_Update+0xfc>
    } else if (pid->output < pid->min_output) {
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	ed93 7a06 	vldr	s14, [r3, #24]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	edd3 7a07 	vldr	s15, [r3, #28]
 8005806:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800580a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800580e:	d503      	bpl.n	8005818 <PID_Update+0xfc>
        pid->output = pid->min_output;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	69da      	ldr	r2, [r3, #28]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	619a      	str	r2, [r3, #24]
    }

    pid->previous_error = pid->error;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	615a      	str	r2, [r3, #20]

    return pid->output;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	ee07 3a90 	vmov	s15, r3
}
 8005828:	eeb0 0a67 	vmov.f32	s0, s15
 800582c:	3714      	adds	r7, #20
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	20000b80 	.word	0x20000b80

0800583c <error_sudut_calculation>:

float error_sudut, error_jarak;
float error_sudut_calculation(float setPoint_sudut, float data_sudut){
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	ed87 0a01 	vstr	s0, [r7, #4]
 8005846:	edc7 0a00 	vstr	s1, [r7]
	if(setPoint_sudut - data_sudut > 180) data_sudut += 360;
 800584a:	ed97 7a01 	vldr	s14, [r7, #4]
 800584e:	edd7 7a00 	vldr	s15, [r7]
 8005852:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005856:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80058bc <error_sudut_calculation+0x80>
 800585a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800585e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005862:	dd08      	ble.n	8005876 <error_sudut_calculation+0x3a>
 8005864:	edd7 7a00 	vldr	s15, [r7]
 8005868:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80058c0 <error_sudut_calculation+0x84>
 800586c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005870:	edc7 7a00 	vstr	s15, [r7]
 8005874:	e014      	b.n	80058a0 <error_sudut_calculation+0x64>
	else if ((data_sudut - setPoint_sudut > 180)) data_sudut -= 360;
 8005876:	ed97 7a00 	vldr	s14, [r7]
 800587a:	edd7 7a01 	vldr	s15, [r7, #4]
 800587e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005882:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80058bc <error_sudut_calculation+0x80>
 8005886:	eef4 7ac7 	vcmpe.f32	s15, s14
 800588a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800588e:	dd07      	ble.n	80058a0 <error_sudut_calculation+0x64>
 8005890:	edd7 7a00 	vldr	s15, [r7]
 8005894:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80058c0 <error_sudut_calculation+0x84>
 8005898:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800589c:	edc7 7a00 	vstr	s15, [r7]
	return setPoint_sudut - data_sudut;
 80058a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80058a4:	edd7 7a00 	vldr	s15, [r7]
 80058a8:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80058ac:	eeb0 0a67 	vmov.f32	s0, s15
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	43340000 	.word	0x43340000
 80058c0:	43b40000 	.word	0x43b40000

080058c4 <error_jarak_calculation>:

float error_jarak_calculation(float setPoint_jarak, float data_jarak){
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80058ce:	edc7 0a00 	vstr	s1, [r7]
	return fabs(data_jarak - setPoint_jarak);
 80058d2:	ed97 7a00 	vldr	s14, [r7]
 80058d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80058da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058de:	eef0 7ae7 	vabs.f32	s15, s15
}
 80058e2:	eeb0 0a67 	vmov.f32	s0, s15
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058f6:	2300      	movs	r3, #0
 80058f8:	607b      	str	r3, [r7, #4]
 80058fa:	4b10      	ldr	r3, [pc, #64]	@ (800593c <HAL_MspInit+0x4c>)
 80058fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058fe:	4a0f      	ldr	r2, [pc, #60]	@ (800593c <HAL_MspInit+0x4c>)
 8005900:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005904:	6453      	str	r3, [r2, #68]	@ 0x44
 8005906:	4b0d      	ldr	r3, [pc, #52]	@ (800593c <HAL_MspInit+0x4c>)
 8005908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800590a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800590e:	607b      	str	r3, [r7, #4]
 8005910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005912:	2300      	movs	r3, #0
 8005914:	603b      	str	r3, [r7, #0]
 8005916:	4b09      	ldr	r3, [pc, #36]	@ (800593c <HAL_MspInit+0x4c>)
 8005918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800591a:	4a08      	ldr	r2, [pc, #32]	@ (800593c <HAL_MspInit+0x4c>)
 800591c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005920:	6413      	str	r3, [r2, #64]	@ 0x40
 8005922:	4b06      	ldr	r3, [pc, #24]	@ (800593c <HAL_MspInit+0x4c>)
 8005924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800592a:	603b      	str	r3, [r7, #0]
 800592c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800592e:	bf00      	nop
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	40023800 	.word	0x40023800

08005940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005940:	b480      	push	{r7}
 8005942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005944:	bf00      	nop
 8005946:	e7fd      	b.n	8005944 <NMI_Handler+0x4>

08005948 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005948:	b480      	push	{r7}
 800594a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800594c:	bf00      	nop
 800594e:	e7fd      	b.n	800594c <HardFault_Handler+0x4>

08005950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005950:	b480      	push	{r7}
 8005952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005954:	bf00      	nop
 8005956:	e7fd      	b.n	8005954 <MemManage_Handler+0x4>

08005958 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005958:	b480      	push	{r7}
 800595a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800595c:	bf00      	nop
 800595e:	e7fd      	b.n	800595c <BusFault_Handler+0x4>

08005960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005960:	b480      	push	{r7}
 8005962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005964:	bf00      	nop
 8005966:	e7fd      	b.n	8005964 <UsageFault_Handler+0x4>

08005968 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005968:	b480      	push	{r7}
 800596a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800596c:	bf00      	nop
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005976:	b480      	push	{r7}
 8005978:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800597a:	bf00      	nop
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005984:	b480      	push	{r7}
 8005986:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005988:	bf00      	nop
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr

08005992 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005996:	f000 fce5 	bl	8006364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800599a:	bf00      	nop
 800599c:	bd80      	pop	{r7, pc}
	...

080059a0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80059a4:	4802      	ldr	r0, [pc, #8]	@ (80059b0 <DMA1_Stream5_IRQHandler+0x10>)
 80059a6:	f000 ffcb 	bl	8006940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80059aa:	bf00      	nop
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	20000db0 	.word	0x20000db0

080059b4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80059b8:	4802      	ldr	r0, [pc, #8]	@ (80059c4 <DMA1_Stream6_IRQHandler+0x10>)
 80059ba:	f000 ffc1 	bl	8006940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80059be:	bf00      	nop
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	20000e10 	.word	0x20000e10

080059c8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80059cc:	4802      	ldr	r0, [pc, #8]	@ (80059d8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80059ce:	f003 f9f7 	bl	8008dc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80059d2:	bf00      	nop
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	20000b88 	.word	0x20000b88

080059dc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80059e0:	4802      	ldr	r0, [pc, #8]	@ (80059ec <TIM1_UP_TIM10_IRQHandler+0x10>)
 80059e2:	f003 f9ed 	bl	8008dc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80059e6:	bf00      	nop
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	20000b88 	.word	0x20000b88

080059f0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80059f4:	4802      	ldr	r0, [pc, #8]	@ (8005a00 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80059f6:	f003 f9e3 	bl	8008dc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80059fa:	bf00      	nop
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	20000b88 	.word	0x20000b88

08005a04 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005a08:	4802      	ldr	r0, [pc, #8]	@ (8005a14 <TIM1_CC_IRQHandler+0x10>)
 8005a0a:	f003 f9d9 	bl	8008dc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005a0e:	bf00      	nop
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	20000b88 	.word	0x20000b88

08005a18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005a1c:	4802      	ldr	r0, [pc, #8]	@ (8005a28 <USART2_IRQHandler+0x10>)
 8005a1e:	f003 fe63 	bl	80096e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005a22:	bf00      	nop
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	20000ca8 	.word	0x20000ca8

08005a2c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005a30:	4802      	ldr	r0, [pc, #8]	@ (8005a3c <DMA2_Stream2_IRQHandler+0x10>)
 8005a32:	f000 ff85 	bl	8006940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005a36:	bf00      	nop
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	20000cf0 	.word	0x20000cf0

08005a40 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005a44:	4802      	ldr	r0, [pc, #8]	@ (8005a50 <DMA2_Stream7_IRQHandler+0x10>)
 8005a46:	f000 ff7b 	bl	8006940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8005a4a:	bf00      	nop
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	20000d50 	.word	0x20000d50

08005a54 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a60:	2300      	movs	r3, #0
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	e00a      	b.n	8005a7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005a66:	f3af 8000 	nop.w
 8005a6a:	4601      	mov	r1, r0
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	60ba      	str	r2, [r7, #8]
 8005a72:	b2ca      	uxtb	r2, r1
 8005a74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	617b      	str	r3, [r7, #20]
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	dbf0      	blt.n	8005a66 <_read+0x12>
  }

  return len;
 8005a84:	687b      	ldr	r3, [r7, #4]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3718      	adds	r7, #24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b086      	sub	sp, #24
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	60f8      	str	r0, [r7, #12]
 8005a96:	60b9      	str	r1, [r7, #8]
 8005a98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	617b      	str	r3, [r7, #20]
 8005a9e:	e009      	b.n	8005ab4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	60ba      	str	r2, [r7, #8]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	617b      	str	r3, [r7, #20]
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	dbf1      	blt.n	8005aa0 <_write+0x12>
  }
  return len;
 8005abc:	687b      	ldr	r3, [r7, #4]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <_close>:

int _close(int file)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005ace:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b083      	sub	sp, #12
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
 8005ae6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005aee:	605a      	str	r2, [r3, #4]
  return 0;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <_isatty>:

int _isatty(int file)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b083      	sub	sp, #12
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005b06:	2301      	movs	r3, #1
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
	...

08005b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005b38:	4a14      	ldr	r2, [pc, #80]	@ (8005b8c <_sbrk+0x5c>)
 8005b3a:	4b15      	ldr	r3, [pc, #84]	@ (8005b90 <_sbrk+0x60>)
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005b44:	4b13      	ldr	r3, [pc, #76]	@ (8005b94 <_sbrk+0x64>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d102      	bne.n	8005b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005b4c:	4b11      	ldr	r3, [pc, #68]	@ (8005b94 <_sbrk+0x64>)
 8005b4e:	4a12      	ldr	r2, [pc, #72]	@ (8005b98 <_sbrk+0x68>)
 8005b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005b52:	4b10      	ldr	r3, [pc, #64]	@ (8005b94 <_sbrk+0x64>)
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4413      	add	r3, r2
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d207      	bcs.n	8005b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005b60:	f005 f93a 	bl	800add8 <__errno>
 8005b64:	4603      	mov	r3, r0
 8005b66:	220c      	movs	r2, #12
 8005b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005b6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005b6e:	e009      	b.n	8005b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005b70:	4b08      	ldr	r3, [pc, #32]	@ (8005b94 <_sbrk+0x64>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005b76:	4b07      	ldr	r3, [pc, #28]	@ (8005b94 <_sbrk+0x64>)
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	4a05      	ldr	r2, [pc, #20]	@ (8005b94 <_sbrk+0x64>)
 8005b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005b82:	68fb      	ldr	r3, [r7, #12]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3718      	adds	r7, #24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	20020000 	.word	0x20020000
 8005b90:	00000400 	.word	0x00000400
 8005b94:	20000b84 	.word	0x20000b84
 8005b98:	20000fc0 	.word	0x20000fc0

08005b9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ba0:	4b06      	ldr	r3, [pc, #24]	@ (8005bbc <SystemInit+0x20>)
 8005ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ba6:	4a05      	ldr	r2, [pc, #20]	@ (8005bbc <SystemInit+0x20>)
 8005ba8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005bac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005bb0:	bf00      	nop
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	e000ed00 	.word	0xe000ed00

08005bc0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005bc6:	f107 0308 	add.w	r3, r7, #8
 8005bca:	2200      	movs	r2, #0
 8005bcc:	601a      	str	r2, [r3, #0]
 8005bce:	605a      	str	r2, [r3, #4]
 8005bd0:	609a      	str	r2, [r3, #8]
 8005bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bd4:	463b      	mov	r3, r7
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8005c58 <MX_TIM1_Init+0x98>)
 8005bde:	4a1f      	ldr	r2, [pc, #124]	@ (8005c5c <MX_TIM1_Init+0x9c>)
 8005be0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8005be2:	4b1d      	ldr	r3, [pc, #116]	@ (8005c58 <MX_TIM1_Init+0x98>)
 8005be4:	2263      	movs	r2, #99	@ 0x63
 8005be6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005be8:	4b1b      	ldr	r3, [pc, #108]	@ (8005c58 <MX_TIM1_Init+0x98>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8005bee:	4b1a      	ldr	r3, [pc, #104]	@ (8005c58 <MX_TIM1_Init+0x98>)
 8005bf0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005bf4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005bf6:	4b18      	ldr	r3, [pc, #96]	@ (8005c58 <MX_TIM1_Init+0x98>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005bfc:	4b16      	ldr	r3, [pc, #88]	@ (8005c58 <MX_TIM1_Init+0x98>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c02:	4b15      	ldr	r3, [pc, #84]	@ (8005c58 <MX_TIM1_Init+0x98>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005c08:	4813      	ldr	r0, [pc, #76]	@ (8005c58 <MX_TIM1_Init+0x98>)
 8005c0a:	f002 fef3 	bl	80089f4 <HAL_TIM_Base_Init>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d001      	beq.n	8005c18 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8005c14:	f7fb ffba 	bl	8001b8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005c1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005c1e:	f107 0308 	add.w	r3, r7, #8
 8005c22:	4619      	mov	r1, r3
 8005c24:	480c      	ldr	r0, [pc, #48]	@ (8005c58 <MX_TIM1_Init+0x98>)
 8005c26:	f003 f9bb 	bl	8008fa0 <HAL_TIM_ConfigClockSource>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8005c30:	f7fb ffac 	bl	8001b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c34:	2300      	movs	r3, #0
 8005c36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005c3c:	463b      	mov	r3, r7
 8005c3e:	4619      	mov	r1, r3
 8005c40:	4805      	ldr	r0, [pc, #20]	@ (8005c58 <MX_TIM1_Init+0x98>)
 8005c42:	f003 fbe9 	bl	8009418 <HAL_TIMEx_MasterConfigSynchronization>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8005c4c:	f7fb ff9e 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8005c50:	bf00      	nop
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	20000b88 	.word	0x20000b88
 8005c5c:	40010000 	.word	0x40010000

08005c60 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b08c      	sub	sp, #48	@ 0x30
 8005c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005c66:	f107 030c 	add.w	r3, r7, #12
 8005c6a:	2224      	movs	r2, #36	@ 0x24
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f005 f864 	bl	800ad3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c74:	1d3b      	adds	r3, r7, #4
 8005c76:	2200      	movs	r2, #0
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005c7c:	4b21      	ldr	r3, [pc, #132]	@ (8005d04 <MX_TIM2_Init+0xa4>)
 8005c7e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005c82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005c84:	4b1f      	ldr	r3, [pc, #124]	@ (8005d04 <MX_TIM2_Init+0xa4>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8005d04 <MX_TIM2_Init+0xa4>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8005c90:	4b1c      	ldr	r3, [pc, #112]	@ (8005d04 <MX_TIM2_Init+0xa4>)
 8005c92:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005c96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c98:	4b1a      	ldr	r3, [pc, #104]	@ (8005d04 <MX_TIM2_Init+0xa4>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c9e:	4b19      	ldr	r3, [pc, #100]	@ (8005d04 <MX_TIM2_Init+0xa4>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005cac:	2301      	movs	r3, #1
 8005cae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8005cc8:	f107 030c 	add.w	r3, r7, #12
 8005ccc:	4619      	mov	r1, r3
 8005cce:	480d      	ldr	r0, [pc, #52]	@ (8005d04 <MX_TIM2_Init+0xa4>)
 8005cd0:	f002 ff42 	bl	8008b58 <HAL_TIM_Encoder_Init>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8005cda:	f7fb ff57 	bl	8001b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005ce6:	1d3b      	adds	r3, r7, #4
 8005ce8:	4619      	mov	r1, r3
 8005cea:	4806      	ldr	r0, [pc, #24]	@ (8005d04 <MX_TIM2_Init+0xa4>)
 8005cec:	f003 fb94 	bl	8009418 <HAL_TIMEx_MasterConfigSynchronization>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8005cf6:	f7fb ff49 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005cfa:	bf00      	nop
 8005cfc:	3730      	adds	r7, #48	@ 0x30
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	20000bd0 	.word	0x20000bd0

08005d08 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b08c      	sub	sp, #48	@ 0x30
 8005d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005d0e:	f107 030c 	add.w	r3, r7, #12
 8005d12:	2224      	movs	r2, #36	@ 0x24
 8005d14:	2100      	movs	r1, #0
 8005d16:	4618      	mov	r0, r3
 8005d18:	f005 f810 	bl	800ad3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d1c:	1d3b      	adds	r3, r7, #4
 8005d1e:	2200      	movs	r2, #0
 8005d20:	601a      	str	r2, [r3, #0]
 8005d22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005d24:	4b20      	ldr	r3, [pc, #128]	@ (8005da8 <MX_TIM3_Init+0xa0>)
 8005d26:	4a21      	ldr	r2, [pc, #132]	@ (8005dac <MX_TIM3_Init+0xa4>)
 8005d28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8005da8 <MX_TIM3_Init+0xa0>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d30:	4b1d      	ldr	r3, [pc, #116]	@ (8005da8 <MX_TIM3_Init+0xa0>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005d36:	4b1c      	ldr	r3, [pc, #112]	@ (8005da8 <MX_TIM3_Init+0xa0>)
 8005d38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005d3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8005da8 <MX_TIM3_Init+0xa0>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d44:	4b18      	ldr	r3, [pc, #96]	@ (8005da8 <MX_TIM3_Init+0xa0>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005d52:	2301      	movs	r3, #1
 8005d54:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005d56:	2300      	movs	r3, #0
 8005d58:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005d62:	2301      	movs	r3, #1
 8005d64:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005d66:	2300      	movs	r3, #0
 8005d68:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8005d6e:	f107 030c 	add.w	r3, r7, #12
 8005d72:	4619      	mov	r1, r3
 8005d74:	480c      	ldr	r0, [pc, #48]	@ (8005da8 <MX_TIM3_Init+0xa0>)
 8005d76:	f002 feef 	bl	8008b58 <HAL_TIM_Encoder_Init>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8005d80:	f7fb ff04 	bl	8001b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d84:	2300      	movs	r3, #0
 8005d86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005d8c:	1d3b      	adds	r3, r7, #4
 8005d8e:	4619      	mov	r1, r3
 8005d90:	4805      	ldr	r0, [pc, #20]	@ (8005da8 <MX_TIM3_Init+0xa0>)
 8005d92:	f003 fb41 	bl	8009418 <HAL_TIMEx_MasterConfigSynchronization>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8005d9c:	f7fb fef6 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005da0:	bf00      	nop
 8005da2:	3730      	adds	r7, #48	@ 0x30
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	20000c18 	.word	0x20000c18
 8005dac:	40000400 	.word	0x40000400

08005db0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a1a      	ldr	r2, [pc, #104]	@ (8005e28 <HAL_TIM_Base_MspInit+0x78>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d12d      	bne.n	8005e1e <HAL_TIM_Base_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	60fb      	str	r3, [r7, #12]
 8005dc6:	4b19      	ldr	r3, [pc, #100]	@ (8005e2c <HAL_TIM_Base_MspInit+0x7c>)
 8005dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dca:	4a18      	ldr	r2, [pc, #96]	@ (8005e2c <HAL_TIM_Base_MspInit+0x7c>)
 8005dcc:	f043 0301 	orr.w	r3, r3, #1
 8005dd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8005dd2:	4b16      	ldr	r3, [pc, #88]	@ (8005e2c <HAL_TIM_Base_MspInit+0x7c>)
 8005dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8005dde:	2200      	movs	r2, #0
 8005de0:	2100      	movs	r1, #0
 8005de2:	2018      	movs	r0, #24
 8005de4:	f000 fbdd 	bl	80065a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8005de8:	2018      	movs	r0, #24
 8005dea:	f000 fbf6 	bl	80065da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005dee:	2200      	movs	r2, #0
 8005df0:	2100      	movs	r1, #0
 8005df2:	2019      	movs	r0, #25
 8005df4:	f000 fbd5 	bl	80065a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005df8:	2019      	movs	r0, #25
 8005dfa:	f000 fbee 	bl	80065da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8005dfe:	2200      	movs	r2, #0
 8005e00:	2100      	movs	r1, #0
 8005e02:	201a      	movs	r0, #26
 8005e04:	f000 fbcd 	bl	80065a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005e08:	201a      	movs	r0, #26
 8005e0a:	f000 fbe6 	bl	80065da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8005e0e:	2200      	movs	r2, #0
 8005e10:	2100      	movs	r1, #0
 8005e12:	201b      	movs	r0, #27
 8005e14:	f000 fbc5 	bl	80065a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8005e18:	201b      	movs	r0, #27
 8005e1a:	f000 fbde 	bl	80065da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8005e1e:	bf00      	nop
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	40010000 	.word	0x40010000
 8005e2c:	40023800 	.word	0x40023800

08005e30 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b08c      	sub	sp, #48	@ 0x30
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e38:	f107 031c 	add.w	r3, r7, #28
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	605a      	str	r2, [r3, #4]
 8005e42:	609a      	str	r2, [r3, #8]
 8005e44:	60da      	str	r2, [r3, #12]
 8005e46:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e50:	d12c      	bne.n	8005eac <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005e52:	2300      	movs	r3, #0
 8005e54:	61bb      	str	r3, [r7, #24]
 8005e56:	4b30      	ldr	r3, [pc, #192]	@ (8005f18 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5a:	4a2f      	ldr	r2, [pc, #188]	@ (8005f18 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005e5c:	f043 0301 	orr.w	r3, r3, #1
 8005e60:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e62:	4b2d      	ldr	r3, [pc, #180]	@ (8005f18 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	61bb      	str	r3, [r7, #24]
 8005e6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e6e:	2300      	movs	r3, #0
 8005e70:	617b      	str	r3, [r7, #20]
 8005e72:	4b29      	ldr	r3, [pc, #164]	@ (8005f18 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e76:	4a28      	ldr	r2, [pc, #160]	@ (8005f18 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005e78:	f043 0301 	orr.w	r3, r3, #1
 8005e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e7e:	4b26      	ldr	r3, [pc, #152]	@ (8005f18 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	617b      	str	r3, [r7, #20]
 8005e88:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e8e:	2302      	movs	r3, #2
 8005e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e92:	2300      	movs	r3, #0
 8005e94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e96:	2300      	movs	r3, #0
 8005e98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e9e:	f107 031c 	add.w	r3, r7, #28
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	481d      	ldr	r0, [pc, #116]	@ (8005f1c <HAL_TIM_Encoder_MspInit+0xec>)
 8005ea6:	f000 ffb5 	bl	8006e14 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005eaa:	e030      	b.n	8005f0e <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM3)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a1b      	ldr	r2, [pc, #108]	@ (8005f20 <HAL_TIM_Encoder_MspInit+0xf0>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d12b      	bne.n	8005f0e <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	613b      	str	r3, [r7, #16]
 8005eba:	4b17      	ldr	r3, [pc, #92]	@ (8005f18 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ebe:	4a16      	ldr	r2, [pc, #88]	@ (8005f18 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005ec0:	f043 0302 	orr.w	r3, r3, #2
 8005ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ec6:	4b14      	ldr	r3, [pc, #80]	@ (8005f18 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	613b      	str	r3, [r7, #16]
 8005ed0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60fb      	str	r3, [r7, #12]
 8005ed6:	4b10      	ldr	r3, [pc, #64]	@ (8005f18 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eda:	4a0f      	ldr	r2, [pc, #60]	@ (8005f18 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005edc:	f043 0301 	orr.w	r3, r3, #1
 8005ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8005f18 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005eee:	23c0      	movs	r3, #192	@ 0xc0
 8005ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005efa:	2300      	movs	r3, #0
 8005efc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005efe:	2302      	movs	r3, #2
 8005f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f02:	f107 031c 	add.w	r3, r7, #28
 8005f06:	4619      	mov	r1, r3
 8005f08:	4804      	ldr	r0, [pc, #16]	@ (8005f1c <HAL_TIM_Encoder_MspInit+0xec>)
 8005f0a:	f000 ff83 	bl	8006e14 <HAL_GPIO_Init>
}
 8005f0e:	bf00      	nop
 8005f10:	3730      	adds	r7, #48	@ 0x30
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	40023800 	.word	0x40023800
 8005f1c:	40020000 	.word	0x40020000
 8005f20:	40000400 	.word	0x40000400

08005f24 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005f28:	4b11      	ldr	r3, [pc, #68]	@ (8005f70 <MX_USART1_UART_Init+0x4c>)
 8005f2a:	4a12      	ldr	r2, [pc, #72]	@ (8005f74 <MX_USART1_UART_Init+0x50>)
 8005f2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8005f2e:	4b10      	ldr	r3, [pc, #64]	@ (8005f70 <MX_USART1_UART_Init+0x4c>)
 8005f30:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8005f34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005f36:	4b0e      	ldr	r3, [pc, #56]	@ (8005f70 <MX_USART1_UART_Init+0x4c>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8005f70 <MX_USART1_UART_Init+0x4c>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005f42:	4b0b      	ldr	r3, [pc, #44]	@ (8005f70 <MX_USART1_UART_Init+0x4c>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005f48:	4b09      	ldr	r3, [pc, #36]	@ (8005f70 <MX_USART1_UART_Init+0x4c>)
 8005f4a:	220c      	movs	r2, #12
 8005f4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f4e:	4b08      	ldr	r3, [pc, #32]	@ (8005f70 <MX_USART1_UART_Init+0x4c>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f54:	4b06      	ldr	r3, [pc, #24]	@ (8005f70 <MX_USART1_UART_Init+0x4c>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005f5a:	4805      	ldr	r0, [pc, #20]	@ (8005f70 <MX_USART1_UART_Init+0x4c>)
 8005f5c:	f003 fade 	bl	800951c <HAL_UART_Init>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005f66:	f7fb fe11 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005f6a:	bf00      	nop
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	20000c60 	.word	0x20000c60
 8005f74:	40011000 	.word	0x40011000

08005f78 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005f7c:	4b11      	ldr	r3, [pc, #68]	@ (8005fc4 <MX_USART2_UART_Init+0x4c>)
 8005f7e:	4a12      	ldr	r2, [pc, #72]	@ (8005fc8 <MX_USART2_UART_Init+0x50>)
 8005f80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8005f82:	4b10      	ldr	r3, [pc, #64]	@ (8005fc4 <MX_USART2_UART_Init+0x4c>)
 8005f84:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8005f88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8005fc4 <MX_USART2_UART_Init+0x4c>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005f90:	4b0c      	ldr	r3, [pc, #48]	@ (8005fc4 <MX_USART2_UART_Init+0x4c>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005f96:	4b0b      	ldr	r3, [pc, #44]	@ (8005fc4 <MX_USART2_UART_Init+0x4c>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005f9c:	4b09      	ldr	r3, [pc, #36]	@ (8005fc4 <MX_USART2_UART_Init+0x4c>)
 8005f9e:	220c      	movs	r2, #12
 8005fa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005fa2:	4b08      	ldr	r3, [pc, #32]	@ (8005fc4 <MX_USART2_UART_Init+0x4c>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005fa8:	4b06      	ldr	r3, [pc, #24]	@ (8005fc4 <MX_USART2_UART_Init+0x4c>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005fae:	4805      	ldr	r0, [pc, #20]	@ (8005fc4 <MX_USART2_UART_Init+0x4c>)
 8005fb0:	f003 fab4 	bl	800951c <HAL_UART_Init>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005fba:	f7fb fde7 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005fbe:	bf00      	nop
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	20000ca8 	.word	0x20000ca8
 8005fc8:	40004400 	.word	0x40004400

08005fcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b08c      	sub	sp, #48	@ 0x30
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fd4:	f107 031c 	add.w	r3, r7, #28
 8005fd8:	2200      	movs	r2, #0
 8005fda:	601a      	str	r2, [r3, #0]
 8005fdc:	605a      	str	r2, [r3, #4]
 8005fde:	609a      	str	r2, [r3, #8]
 8005fe0:	60da      	str	r2, [r3, #12]
 8005fe2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a94      	ldr	r2, [pc, #592]	@ (800623c <HAL_UART_MspInit+0x270>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	f040 808b 	bne.w	8006106 <HAL_UART_MspInit+0x13a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	61bb      	str	r3, [r7, #24]
 8005ff4:	4b92      	ldr	r3, [pc, #584]	@ (8006240 <HAL_UART_MspInit+0x274>)
 8005ff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ff8:	4a91      	ldr	r2, [pc, #580]	@ (8006240 <HAL_UART_MspInit+0x274>)
 8005ffa:	f043 0310 	orr.w	r3, r3, #16
 8005ffe:	6453      	str	r3, [r2, #68]	@ 0x44
 8006000:	4b8f      	ldr	r3, [pc, #572]	@ (8006240 <HAL_UART_MspInit+0x274>)
 8006002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006004:	f003 0310 	and.w	r3, r3, #16
 8006008:	61bb      	str	r3, [r7, #24]
 800600a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800600c:	2300      	movs	r3, #0
 800600e:	617b      	str	r3, [r7, #20]
 8006010:	4b8b      	ldr	r3, [pc, #556]	@ (8006240 <HAL_UART_MspInit+0x274>)
 8006012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006014:	4a8a      	ldr	r2, [pc, #552]	@ (8006240 <HAL_UART_MspInit+0x274>)
 8006016:	f043 0301 	orr.w	r3, r3, #1
 800601a:	6313      	str	r3, [r2, #48]	@ 0x30
 800601c:	4b88      	ldr	r3, [pc, #544]	@ (8006240 <HAL_UART_MspInit+0x274>)
 800601e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	617b      	str	r3, [r7, #20]
 8006026:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006028:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800602c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800602e:	2302      	movs	r3, #2
 8006030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006032:	2300      	movs	r3, #0
 8006034:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006036:	2303      	movs	r3, #3
 8006038:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800603a:	2307      	movs	r3, #7
 800603c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800603e:	f107 031c 	add.w	r3, r7, #28
 8006042:	4619      	mov	r1, r3
 8006044:	487f      	ldr	r0, [pc, #508]	@ (8006244 <HAL_UART_MspInit+0x278>)
 8006046:	f000 fee5 	bl	8006e14 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800604a:	4b7f      	ldr	r3, [pc, #508]	@ (8006248 <HAL_UART_MspInit+0x27c>)
 800604c:	4a7f      	ldr	r2, [pc, #508]	@ (800624c <HAL_UART_MspInit+0x280>)
 800604e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8006050:	4b7d      	ldr	r3, [pc, #500]	@ (8006248 <HAL_UART_MspInit+0x27c>)
 8006052:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006056:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006058:	4b7b      	ldr	r3, [pc, #492]	@ (8006248 <HAL_UART_MspInit+0x27c>)
 800605a:	2200      	movs	r2, #0
 800605c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800605e:	4b7a      	ldr	r3, [pc, #488]	@ (8006248 <HAL_UART_MspInit+0x27c>)
 8006060:	2200      	movs	r2, #0
 8006062:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006064:	4b78      	ldr	r3, [pc, #480]	@ (8006248 <HAL_UART_MspInit+0x27c>)
 8006066:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800606a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800606c:	4b76      	ldr	r3, [pc, #472]	@ (8006248 <HAL_UART_MspInit+0x27c>)
 800606e:	2200      	movs	r2, #0
 8006070:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006072:	4b75      	ldr	r3, [pc, #468]	@ (8006248 <HAL_UART_MspInit+0x27c>)
 8006074:	2200      	movs	r2, #0
 8006076:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8006078:	4b73      	ldr	r3, [pc, #460]	@ (8006248 <HAL_UART_MspInit+0x27c>)
 800607a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800607e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006080:	4b71      	ldr	r3, [pc, #452]	@ (8006248 <HAL_UART_MspInit+0x27c>)
 8006082:	2200      	movs	r2, #0
 8006084:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006086:	4b70      	ldr	r3, [pc, #448]	@ (8006248 <HAL_UART_MspInit+0x27c>)
 8006088:	2200      	movs	r2, #0
 800608a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800608c:	486e      	ldr	r0, [pc, #440]	@ (8006248 <HAL_UART_MspInit+0x27c>)
 800608e:	f000 fabf 	bl	8006610 <HAL_DMA_Init>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d001      	beq.n	800609c <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8006098:	f7fb fd78 	bl	8001b8c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a6a      	ldr	r2, [pc, #424]	@ (8006248 <HAL_UART_MspInit+0x27c>)
 80060a0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80060a2:	4a69      	ldr	r2, [pc, #420]	@ (8006248 <HAL_UART_MspInit+0x27c>)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80060a8:	4b69      	ldr	r3, [pc, #420]	@ (8006250 <HAL_UART_MspInit+0x284>)
 80060aa:	4a6a      	ldr	r2, [pc, #424]	@ (8006254 <HAL_UART_MspInit+0x288>)
 80060ac:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80060ae:	4b68      	ldr	r3, [pc, #416]	@ (8006250 <HAL_UART_MspInit+0x284>)
 80060b0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80060b4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80060b6:	4b66      	ldr	r3, [pc, #408]	@ (8006250 <HAL_UART_MspInit+0x284>)
 80060b8:	2240      	movs	r2, #64	@ 0x40
 80060ba:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80060bc:	4b64      	ldr	r3, [pc, #400]	@ (8006250 <HAL_UART_MspInit+0x284>)
 80060be:	2200      	movs	r2, #0
 80060c0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80060c2:	4b63      	ldr	r3, [pc, #396]	@ (8006250 <HAL_UART_MspInit+0x284>)
 80060c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80060c8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80060ca:	4b61      	ldr	r3, [pc, #388]	@ (8006250 <HAL_UART_MspInit+0x284>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80060d0:	4b5f      	ldr	r3, [pc, #380]	@ (8006250 <HAL_UART_MspInit+0x284>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80060d6:	4b5e      	ldr	r3, [pc, #376]	@ (8006250 <HAL_UART_MspInit+0x284>)
 80060d8:	2200      	movs	r2, #0
 80060da:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80060dc:	4b5c      	ldr	r3, [pc, #368]	@ (8006250 <HAL_UART_MspInit+0x284>)
 80060de:	2200      	movs	r2, #0
 80060e0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80060e2:	4b5b      	ldr	r3, [pc, #364]	@ (8006250 <HAL_UART_MspInit+0x284>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80060e8:	4859      	ldr	r0, [pc, #356]	@ (8006250 <HAL_UART_MspInit+0x284>)
 80060ea:	f000 fa91 	bl	8006610 <HAL_DMA_Init>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d001      	beq.n	80060f8 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80060f4:	f7fb fd4a 	bl	8001b8c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a55      	ldr	r2, [pc, #340]	@ (8006250 <HAL_UART_MspInit+0x284>)
 80060fc:	639a      	str	r2, [r3, #56]	@ 0x38
 80060fe:	4a54      	ldr	r2, [pc, #336]	@ (8006250 <HAL_UART_MspInit+0x284>)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006104:	e096      	b.n	8006234 <HAL_UART_MspInit+0x268>
  else if(uartHandle->Instance==USART2)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a53      	ldr	r2, [pc, #332]	@ (8006258 <HAL_UART_MspInit+0x28c>)
 800610c:	4293      	cmp	r3, r2
 800610e:	f040 8091 	bne.w	8006234 <HAL_UART_MspInit+0x268>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006112:	2300      	movs	r3, #0
 8006114:	613b      	str	r3, [r7, #16]
 8006116:	4b4a      	ldr	r3, [pc, #296]	@ (8006240 <HAL_UART_MspInit+0x274>)
 8006118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800611a:	4a49      	ldr	r2, [pc, #292]	@ (8006240 <HAL_UART_MspInit+0x274>)
 800611c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006120:	6413      	str	r3, [r2, #64]	@ 0x40
 8006122:	4b47      	ldr	r3, [pc, #284]	@ (8006240 <HAL_UART_MspInit+0x274>)
 8006124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800612a:	613b      	str	r3, [r7, #16]
 800612c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800612e:	2300      	movs	r3, #0
 8006130:	60fb      	str	r3, [r7, #12]
 8006132:	4b43      	ldr	r3, [pc, #268]	@ (8006240 <HAL_UART_MspInit+0x274>)
 8006134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006136:	4a42      	ldr	r2, [pc, #264]	@ (8006240 <HAL_UART_MspInit+0x274>)
 8006138:	f043 0301 	orr.w	r3, r3, #1
 800613c:	6313      	str	r3, [r2, #48]	@ 0x30
 800613e:	4b40      	ldr	r3, [pc, #256]	@ (8006240 <HAL_UART_MspInit+0x274>)
 8006140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006142:	f003 0301 	and.w	r3, r3, #1
 8006146:	60fb      	str	r3, [r7, #12]
 8006148:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800614a:	230c      	movs	r3, #12
 800614c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800614e:	2302      	movs	r3, #2
 8006150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006152:	2300      	movs	r3, #0
 8006154:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006156:	2303      	movs	r3, #3
 8006158:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800615a:	2307      	movs	r3, #7
 800615c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800615e:	f107 031c 	add.w	r3, r7, #28
 8006162:	4619      	mov	r1, r3
 8006164:	4837      	ldr	r0, [pc, #220]	@ (8006244 <HAL_UART_MspInit+0x278>)
 8006166:	f000 fe55 	bl	8006e14 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800616a:	4b3c      	ldr	r3, [pc, #240]	@ (800625c <HAL_UART_MspInit+0x290>)
 800616c:	4a3c      	ldr	r2, [pc, #240]	@ (8006260 <HAL_UART_MspInit+0x294>)
 800616e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8006170:	4b3a      	ldr	r3, [pc, #232]	@ (800625c <HAL_UART_MspInit+0x290>)
 8006172:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006176:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006178:	4b38      	ldr	r3, [pc, #224]	@ (800625c <HAL_UART_MspInit+0x290>)
 800617a:	2200      	movs	r2, #0
 800617c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800617e:	4b37      	ldr	r3, [pc, #220]	@ (800625c <HAL_UART_MspInit+0x290>)
 8006180:	2200      	movs	r2, #0
 8006182:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006184:	4b35      	ldr	r3, [pc, #212]	@ (800625c <HAL_UART_MspInit+0x290>)
 8006186:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800618a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800618c:	4b33      	ldr	r3, [pc, #204]	@ (800625c <HAL_UART_MspInit+0x290>)
 800618e:	2200      	movs	r2, #0
 8006190:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006192:	4b32      	ldr	r3, [pc, #200]	@ (800625c <HAL_UART_MspInit+0x290>)
 8006194:	2200      	movs	r2, #0
 8006196:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8006198:	4b30      	ldr	r3, [pc, #192]	@ (800625c <HAL_UART_MspInit+0x290>)
 800619a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800619e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80061a0:	4b2e      	ldr	r3, [pc, #184]	@ (800625c <HAL_UART_MspInit+0x290>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80061a6:	4b2d      	ldr	r3, [pc, #180]	@ (800625c <HAL_UART_MspInit+0x290>)
 80061a8:	2200      	movs	r2, #0
 80061aa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80061ac:	482b      	ldr	r0, [pc, #172]	@ (800625c <HAL_UART_MspInit+0x290>)
 80061ae:	f000 fa2f 	bl	8006610 <HAL_DMA_Init>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d001      	beq.n	80061bc <HAL_UART_MspInit+0x1f0>
      Error_Handler();
 80061b8:	f7fb fce8 	bl	8001b8c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a27      	ldr	r2, [pc, #156]	@ (800625c <HAL_UART_MspInit+0x290>)
 80061c0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80061c2:	4a26      	ldr	r2, [pc, #152]	@ (800625c <HAL_UART_MspInit+0x290>)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80061c8:	4b26      	ldr	r3, [pc, #152]	@ (8006264 <HAL_UART_MspInit+0x298>)
 80061ca:	4a27      	ldr	r2, [pc, #156]	@ (8006268 <HAL_UART_MspInit+0x29c>)
 80061cc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80061ce:	4b25      	ldr	r3, [pc, #148]	@ (8006264 <HAL_UART_MspInit+0x298>)
 80061d0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80061d4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80061d6:	4b23      	ldr	r3, [pc, #140]	@ (8006264 <HAL_UART_MspInit+0x298>)
 80061d8:	2240      	movs	r2, #64	@ 0x40
 80061da:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80061dc:	4b21      	ldr	r3, [pc, #132]	@ (8006264 <HAL_UART_MspInit+0x298>)
 80061de:	2200      	movs	r2, #0
 80061e0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80061e2:	4b20      	ldr	r3, [pc, #128]	@ (8006264 <HAL_UART_MspInit+0x298>)
 80061e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80061e8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80061ea:	4b1e      	ldr	r3, [pc, #120]	@ (8006264 <HAL_UART_MspInit+0x298>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80061f0:	4b1c      	ldr	r3, [pc, #112]	@ (8006264 <HAL_UART_MspInit+0x298>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80061f6:	4b1b      	ldr	r3, [pc, #108]	@ (8006264 <HAL_UART_MspInit+0x298>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80061fc:	4b19      	ldr	r3, [pc, #100]	@ (8006264 <HAL_UART_MspInit+0x298>)
 80061fe:	2200      	movs	r2, #0
 8006200:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006202:	4b18      	ldr	r3, [pc, #96]	@ (8006264 <HAL_UART_MspInit+0x298>)
 8006204:	2200      	movs	r2, #0
 8006206:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006208:	4816      	ldr	r0, [pc, #88]	@ (8006264 <HAL_UART_MspInit+0x298>)
 800620a:	f000 fa01 	bl	8006610 <HAL_DMA_Init>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <HAL_UART_MspInit+0x24c>
      Error_Handler();
 8006214:	f7fb fcba 	bl	8001b8c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a12      	ldr	r2, [pc, #72]	@ (8006264 <HAL_UART_MspInit+0x298>)
 800621c:	639a      	str	r2, [r3, #56]	@ 0x38
 800621e:	4a11      	ldr	r2, [pc, #68]	@ (8006264 <HAL_UART_MspInit+0x298>)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006224:	2200      	movs	r2, #0
 8006226:	2100      	movs	r1, #0
 8006228:	2026      	movs	r0, #38	@ 0x26
 800622a:	f000 f9ba 	bl	80065a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800622e:	2026      	movs	r0, #38	@ 0x26
 8006230:	f000 f9d3 	bl	80065da <HAL_NVIC_EnableIRQ>
}
 8006234:	bf00      	nop
 8006236:	3730      	adds	r7, #48	@ 0x30
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	40011000 	.word	0x40011000
 8006240:	40023800 	.word	0x40023800
 8006244:	40020000 	.word	0x40020000
 8006248:	20000cf0 	.word	0x20000cf0
 800624c:	40026440 	.word	0x40026440
 8006250:	20000d50 	.word	0x20000d50
 8006254:	400264b8 	.word	0x400264b8
 8006258:	40004400 	.word	0x40004400
 800625c:	20000db0 	.word	0x20000db0
 8006260:	40026088 	.word	0x40026088
 8006264:	20000e10 	.word	0x20000e10
 8006268:	400260a0 	.word	0x400260a0

0800626c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800626c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80062a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006270:	f7ff fc94 	bl	8005b9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006274:	480c      	ldr	r0, [pc, #48]	@ (80062a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006276:	490d      	ldr	r1, [pc, #52]	@ (80062ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006278:	4a0d      	ldr	r2, [pc, #52]	@ (80062b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800627a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800627c:	e002      	b.n	8006284 <LoopCopyDataInit>

0800627e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800627e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006282:	3304      	adds	r3, #4

08006284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006288:	d3f9      	bcc.n	800627e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800628a:	4a0a      	ldr	r2, [pc, #40]	@ (80062b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800628c:	4c0a      	ldr	r4, [pc, #40]	@ (80062b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800628e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006290:	e001      	b.n	8006296 <LoopFillZerobss>

08006292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006294:	3204      	adds	r2, #4

08006296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006298:	d3fb      	bcc.n	8006292 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800629a:	f004 fda3 	bl	800ade4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800629e:	f7fb fad3 	bl	8001848 <main>
  bx  lr    
 80062a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80062a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80062a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80062ac:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80062b0:	0800be6c 	.word	0x0800be6c
  ldr r2, =_sbss
 80062b4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80062b8:	20000fc0 	.word	0x20000fc0

080062bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80062bc:	e7fe      	b.n	80062bc <ADC_IRQHandler>
	...

080062c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80062c4:	4b0e      	ldr	r3, [pc, #56]	@ (8006300 <HAL_Init+0x40>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a0d      	ldr	r2, [pc, #52]	@ (8006300 <HAL_Init+0x40>)
 80062ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80062ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80062d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006300 <HAL_Init+0x40>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a0a      	ldr	r2, [pc, #40]	@ (8006300 <HAL_Init+0x40>)
 80062d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80062da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80062dc:	4b08      	ldr	r3, [pc, #32]	@ (8006300 <HAL_Init+0x40>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a07      	ldr	r2, [pc, #28]	@ (8006300 <HAL_Init+0x40>)
 80062e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80062e8:	2003      	movs	r0, #3
 80062ea:	f000 f94f 	bl	800658c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80062ee:	200f      	movs	r0, #15
 80062f0:	f000 f808 	bl	8006304 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80062f4:	f7ff fafc 	bl	80058f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	40023c00 	.word	0x40023c00

08006304 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800630c:	4b12      	ldr	r3, [pc, #72]	@ (8006358 <HAL_InitTick+0x54>)
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	4b12      	ldr	r3, [pc, #72]	@ (800635c <HAL_InitTick+0x58>)
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	4619      	mov	r1, r3
 8006316:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800631a:	fbb3 f3f1 	udiv	r3, r3, r1
 800631e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006322:	4618      	mov	r0, r3
 8006324:	f000 f967 	bl	80065f6 <HAL_SYSTICK_Config>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e00e      	b.n	8006350 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2b0f      	cmp	r3, #15
 8006336:	d80a      	bhi.n	800634e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006338:	2200      	movs	r2, #0
 800633a:	6879      	ldr	r1, [r7, #4]
 800633c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006340:	f000 f92f 	bl	80065a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006344:	4a06      	ldr	r2, [pc, #24]	@ (8006360 <HAL_InitTick+0x5c>)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800634a:	2300      	movs	r3, #0
 800634c:	e000      	b.n	8006350 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
}
 8006350:	4618      	mov	r0, r3
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	2000000c 	.word	0x2000000c
 800635c:	20000014 	.word	0x20000014
 8006360:	20000010 	.word	0x20000010

08006364 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006364:	b480      	push	{r7}
 8006366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006368:	4b06      	ldr	r3, [pc, #24]	@ (8006384 <HAL_IncTick+0x20>)
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	461a      	mov	r2, r3
 800636e:	4b06      	ldr	r3, [pc, #24]	@ (8006388 <HAL_IncTick+0x24>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4413      	add	r3, r2
 8006374:	4a04      	ldr	r2, [pc, #16]	@ (8006388 <HAL_IncTick+0x24>)
 8006376:	6013      	str	r3, [r2, #0]
}
 8006378:	bf00      	nop
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	20000014 	.word	0x20000014
 8006388:	20000e70 	.word	0x20000e70

0800638c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0
  return uwTick;
 8006390:	4b03      	ldr	r3, [pc, #12]	@ (80063a0 <HAL_GetTick+0x14>)
 8006392:	681b      	ldr	r3, [r3, #0]
}
 8006394:	4618      	mov	r0, r3
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	20000e70 	.word	0x20000e70

080063a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80063ac:	f7ff ffee 	bl	800638c <HAL_GetTick>
 80063b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063bc:	d005      	beq.n	80063ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80063be:	4b0a      	ldr	r3, [pc, #40]	@ (80063e8 <HAL_Delay+0x44>)
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	461a      	mov	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4413      	add	r3, r2
 80063c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80063ca:	bf00      	nop
 80063cc:	f7ff ffde 	bl	800638c <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d8f7      	bhi.n	80063cc <HAL_Delay+0x28>
  {
  }
}
 80063dc:	bf00      	nop
 80063de:	bf00      	nop
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	20000014 	.word	0x20000014

080063ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f003 0307 	and.w	r3, r3, #7
 80063fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80063fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006430 <__NVIC_SetPriorityGrouping+0x44>)
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006408:	4013      	ands	r3, r2
 800640a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006414:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006418:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800641c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800641e:	4a04      	ldr	r2, [pc, #16]	@ (8006430 <__NVIC_SetPriorityGrouping+0x44>)
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	60d3      	str	r3, [r2, #12]
}
 8006424:	bf00      	nop
 8006426:	3714      	adds	r7, #20
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr
 8006430:	e000ed00 	.word	0xe000ed00

08006434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006434:	b480      	push	{r7}
 8006436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006438:	4b04      	ldr	r3, [pc, #16]	@ (800644c <__NVIC_GetPriorityGrouping+0x18>)
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	0a1b      	lsrs	r3, r3, #8
 800643e:	f003 0307 	and.w	r3, r3, #7
}
 8006442:	4618      	mov	r0, r3
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr
 800644c:	e000ed00 	.word	0xe000ed00

08006450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	4603      	mov	r3, r0
 8006458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800645a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800645e:	2b00      	cmp	r3, #0
 8006460:	db0b      	blt.n	800647a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006462:	79fb      	ldrb	r3, [r7, #7]
 8006464:	f003 021f 	and.w	r2, r3, #31
 8006468:	4907      	ldr	r1, [pc, #28]	@ (8006488 <__NVIC_EnableIRQ+0x38>)
 800646a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800646e:	095b      	lsrs	r3, r3, #5
 8006470:	2001      	movs	r0, #1
 8006472:	fa00 f202 	lsl.w	r2, r0, r2
 8006476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800647a:	bf00      	nop
 800647c:	370c      	adds	r7, #12
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	e000e100 	.word	0xe000e100

0800648c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	4603      	mov	r3, r0
 8006494:	6039      	str	r1, [r7, #0]
 8006496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800649c:	2b00      	cmp	r3, #0
 800649e:	db0a      	blt.n	80064b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	490c      	ldr	r1, [pc, #48]	@ (80064d8 <__NVIC_SetPriority+0x4c>)
 80064a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064aa:	0112      	lsls	r2, r2, #4
 80064ac:	b2d2      	uxtb	r2, r2
 80064ae:	440b      	add	r3, r1
 80064b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80064b4:	e00a      	b.n	80064cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	b2da      	uxtb	r2, r3
 80064ba:	4908      	ldr	r1, [pc, #32]	@ (80064dc <__NVIC_SetPriority+0x50>)
 80064bc:	79fb      	ldrb	r3, [r7, #7]
 80064be:	f003 030f 	and.w	r3, r3, #15
 80064c2:	3b04      	subs	r3, #4
 80064c4:	0112      	lsls	r2, r2, #4
 80064c6:	b2d2      	uxtb	r2, r2
 80064c8:	440b      	add	r3, r1
 80064ca:	761a      	strb	r2, [r3, #24]
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr
 80064d8:	e000e100 	.word	0xe000e100
 80064dc:	e000ed00 	.word	0xe000ed00

080064e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b089      	sub	sp, #36	@ 0x24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f003 0307 	and.w	r3, r3, #7
 80064f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	f1c3 0307 	rsb	r3, r3, #7
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	bf28      	it	cs
 80064fe:	2304      	movcs	r3, #4
 8006500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	3304      	adds	r3, #4
 8006506:	2b06      	cmp	r3, #6
 8006508:	d902      	bls.n	8006510 <NVIC_EncodePriority+0x30>
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	3b03      	subs	r3, #3
 800650e:	e000      	b.n	8006512 <NVIC_EncodePriority+0x32>
 8006510:	2300      	movs	r3, #0
 8006512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006514:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	fa02 f303 	lsl.w	r3, r2, r3
 800651e:	43da      	mvns	r2, r3
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	401a      	ands	r2, r3
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006528:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	fa01 f303 	lsl.w	r3, r1, r3
 8006532:	43d9      	mvns	r1, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006538:	4313      	orrs	r3, r2
         );
}
 800653a:	4618      	mov	r0, r3
 800653c:	3724      	adds	r7, #36	@ 0x24
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
	...

08006548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	3b01      	subs	r3, #1
 8006554:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006558:	d301      	bcc.n	800655e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800655a:	2301      	movs	r3, #1
 800655c:	e00f      	b.n	800657e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800655e:	4a0a      	ldr	r2, [pc, #40]	@ (8006588 <SysTick_Config+0x40>)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	3b01      	subs	r3, #1
 8006564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006566:	210f      	movs	r1, #15
 8006568:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800656c:	f7ff ff8e 	bl	800648c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006570:	4b05      	ldr	r3, [pc, #20]	@ (8006588 <SysTick_Config+0x40>)
 8006572:	2200      	movs	r2, #0
 8006574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006576:	4b04      	ldr	r3, [pc, #16]	@ (8006588 <SysTick_Config+0x40>)
 8006578:	2207      	movs	r2, #7
 800657a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	e000e010 	.word	0xe000e010

0800658c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f7ff ff29 	bl	80063ec <__NVIC_SetPriorityGrouping>
}
 800659a:	bf00      	nop
 800659c:	3708      	adds	r7, #8
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b086      	sub	sp, #24
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	4603      	mov	r3, r0
 80065aa:	60b9      	str	r1, [r7, #8]
 80065ac:	607a      	str	r2, [r7, #4]
 80065ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80065b0:	2300      	movs	r3, #0
 80065b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80065b4:	f7ff ff3e 	bl	8006434 <__NVIC_GetPriorityGrouping>
 80065b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	68b9      	ldr	r1, [r7, #8]
 80065be:	6978      	ldr	r0, [r7, #20]
 80065c0:	f7ff ff8e 	bl	80064e0 <NVIC_EncodePriority>
 80065c4:	4602      	mov	r2, r0
 80065c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065ca:	4611      	mov	r1, r2
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7ff ff5d 	bl	800648c <__NVIC_SetPriority>
}
 80065d2:	bf00      	nop
 80065d4:	3718      	adds	r7, #24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b082      	sub	sp, #8
 80065de:	af00      	add	r7, sp, #0
 80065e0:	4603      	mov	r3, r0
 80065e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80065e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7ff ff31 	bl	8006450 <__NVIC_EnableIRQ>
}
 80065ee:	bf00      	nop
 80065f0:	3708      	adds	r7, #8
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b082      	sub	sp, #8
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f7ff ffa2 	bl	8006548 <SysTick_Config>
 8006604:	4603      	mov	r3, r0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
	...

08006610 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b086      	sub	sp, #24
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006618:	2300      	movs	r3, #0
 800661a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800661c:	f7ff feb6 	bl	800638c <HAL_GetTick>
 8006620:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d101      	bne.n	800662c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e099      	b.n	8006760 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2202      	movs	r2, #2
 8006630:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 0201 	bic.w	r2, r2, #1
 800664a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800664c:	e00f      	b.n	800666e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800664e:	f7ff fe9d 	bl	800638c <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	2b05      	cmp	r3, #5
 800665a:	d908      	bls.n	800666e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2220      	movs	r2, #32
 8006660:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2203      	movs	r2, #3
 8006666:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e078      	b.n	8006760 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0301 	and.w	r3, r3, #1
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1e8      	bne.n	800664e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	4b38      	ldr	r3, [pc, #224]	@ (8006768 <HAL_DMA_Init+0x158>)
 8006688:	4013      	ands	r3, r2
 800668a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800669a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a1b      	ldr	r3, [r3, #32]
 80066b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	4313      	orrs	r3, r2
 80066be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c4:	2b04      	cmp	r3, #4
 80066c6:	d107      	bne.n	80066d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066d0:	4313      	orrs	r3, r2
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	697a      	ldr	r2, [r7, #20]
 80066de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	f023 0307 	bic.w	r3, r3, #7
 80066ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f4:	697a      	ldr	r2, [r7, #20]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066fe:	2b04      	cmp	r3, #4
 8006700:	d117      	bne.n	8006732 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	4313      	orrs	r3, r2
 800670a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00e      	beq.n	8006732 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 fb01 	bl	8006d1c <DMA_CheckFifoParam>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d008      	beq.n	8006732 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2240      	movs	r2, #64	@ 0x40
 8006724:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800672e:	2301      	movs	r3, #1
 8006730:	e016      	b.n	8006760 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 fab8 	bl	8006cb0 <DMA_CalcBaseAndBitshift>
 8006740:	4603      	mov	r3, r0
 8006742:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006748:	223f      	movs	r2, #63	@ 0x3f
 800674a:	409a      	lsls	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3718      	adds	r7, #24
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	f010803f 	.word	0xf010803f

0800676c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
 8006778:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006782:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800678a:	2b01      	cmp	r3, #1
 800678c:	d101      	bne.n	8006792 <HAL_DMA_Start_IT+0x26>
 800678e:	2302      	movs	r3, #2
 8006790:	e040      	b.n	8006814 <HAL_DMA_Start_IT+0xa8>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d12f      	bne.n	8006806 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2202      	movs	r2, #2
 80067aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	68b9      	ldr	r1, [r7, #8]
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f000 fa4a 	bl	8006c54 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067c4:	223f      	movs	r2, #63	@ 0x3f
 80067c6:	409a      	lsls	r2, r3
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f042 0216 	orr.w	r2, r2, #22
 80067da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d007      	beq.n	80067f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f042 0208 	orr.w	r2, r2, #8
 80067f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f042 0201 	orr.w	r2, r2, #1
 8006802:	601a      	str	r2, [r3, #0]
 8006804:	e005      	b.n	8006812 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800680e:	2302      	movs	r3, #2
 8006810:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006812:	7dfb      	ldrb	r3, [r7, #23]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3718      	adds	r7, #24
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006828:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800682a:	f7ff fdaf 	bl	800638c <HAL_GetTick>
 800682e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b02      	cmp	r3, #2
 800683a:	d008      	beq.n	800684e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2280      	movs	r2, #128	@ 0x80
 8006840:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e052      	b.n	80068f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f022 0216 	bic.w	r2, r2, #22
 800685c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	695a      	ldr	r2, [r3, #20]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800686c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006872:	2b00      	cmp	r3, #0
 8006874:	d103      	bne.n	800687e <HAL_DMA_Abort+0x62>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800687a:	2b00      	cmp	r3, #0
 800687c:	d007      	beq.n	800688e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f022 0208 	bic.w	r2, r2, #8
 800688c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f022 0201 	bic.w	r2, r2, #1
 800689c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800689e:	e013      	b.n	80068c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80068a0:	f7ff fd74 	bl	800638c <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	2b05      	cmp	r3, #5
 80068ac:	d90c      	bls.n	80068c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2220      	movs	r2, #32
 80068b2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2203      	movs	r2, #3
 80068b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e015      	b.n	80068f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1e4      	bne.n	80068a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068da:	223f      	movs	r2, #63	@ 0x3f
 80068dc:	409a      	lsls	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800690a:	b2db      	uxtb	r3, r3
 800690c:	2b02      	cmp	r3, #2
 800690e:	d004      	beq.n	800691a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2280      	movs	r2, #128	@ 0x80
 8006914:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e00c      	b.n	8006934 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2205      	movs	r2, #5
 800691e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 0201 	bic.w	r2, r2, #1
 8006930:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006948:	2300      	movs	r3, #0
 800694a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800694c:	4b8e      	ldr	r3, [pc, #568]	@ (8006b88 <HAL_DMA_IRQHandler+0x248>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a8e      	ldr	r2, [pc, #568]	@ (8006b8c <HAL_DMA_IRQHandler+0x24c>)
 8006952:	fba2 2303 	umull	r2, r3, r2, r3
 8006956:	0a9b      	lsrs	r3, r3, #10
 8006958:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800695e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800696a:	2208      	movs	r2, #8
 800696c:	409a      	lsls	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	4013      	ands	r3, r2
 8006972:	2b00      	cmp	r3, #0
 8006974:	d01a      	beq.n	80069ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0304 	and.w	r3, r3, #4
 8006980:	2b00      	cmp	r3, #0
 8006982:	d013      	beq.n	80069ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 0204 	bic.w	r2, r2, #4
 8006992:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006998:	2208      	movs	r2, #8
 800699a:	409a      	lsls	r2, r3
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069a4:	f043 0201 	orr.w	r2, r3, #1
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069b0:	2201      	movs	r2, #1
 80069b2:	409a      	lsls	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	4013      	ands	r3, r2
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d012      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00b      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069ce:	2201      	movs	r2, #1
 80069d0:	409a      	lsls	r2, r3
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069da:	f043 0202 	orr.w	r2, r3, #2
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069e6:	2204      	movs	r2, #4
 80069e8:	409a      	lsls	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	4013      	ands	r3, r2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d012      	beq.n	8006a18 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0302 	and.w	r3, r3, #2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00b      	beq.n	8006a18 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a04:	2204      	movs	r2, #4
 8006a06:	409a      	lsls	r2, r3
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a10:	f043 0204 	orr.w	r2, r3, #4
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a1c:	2210      	movs	r2, #16
 8006a1e:	409a      	lsls	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	4013      	ands	r3, r2
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d043      	beq.n	8006ab0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0308 	and.w	r3, r3, #8
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d03c      	beq.n	8006ab0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a3a:	2210      	movs	r2, #16
 8006a3c:	409a      	lsls	r2, r3
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d018      	beq.n	8006a82 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d108      	bne.n	8006a70 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d024      	beq.n	8006ab0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	4798      	blx	r3
 8006a6e:	e01f      	b.n	8006ab0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d01b      	beq.n	8006ab0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	4798      	blx	r3
 8006a80:	e016      	b.n	8006ab0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d107      	bne.n	8006aa0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f022 0208 	bic.w	r2, r2, #8
 8006a9e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d003      	beq.n	8006ab0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	409a      	lsls	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4013      	ands	r3, r2
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f000 808f 	beq.w	8006be0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0310 	and.w	r3, r3, #16
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f000 8087 	beq.w	8006be0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	409a      	lsls	r2, r3
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b05      	cmp	r3, #5
 8006ae8:	d136      	bne.n	8006b58 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f022 0216 	bic.w	r2, r2, #22
 8006af8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	695a      	ldr	r2, [r3, #20]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b08:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d103      	bne.n	8006b1a <HAL_DMA_IRQHandler+0x1da>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d007      	beq.n	8006b2a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f022 0208 	bic.w	r2, r2, #8
 8006b28:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b2e:	223f      	movs	r2, #63	@ 0x3f
 8006b30:	409a      	lsls	r2, r3
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d07e      	beq.n	8006c4c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	4798      	blx	r3
        }
        return;
 8006b56:	e079      	b.n	8006c4c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d01d      	beq.n	8006ba2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10d      	bne.n	8006b90 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d031      	beq.n	8006be0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	4798      	blx	r3
 8006b84:	e02c      	b.n	8006be0 <HAL_DMA_IRQHandler+0x2a0>
 8006b86:	bf00      	nop
 8006b88:	2000000c 	.word	0x2000000c
 8006b8c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d023      	beq.n	8006be0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	4798      	blx	r3
 8006ba0:	e01e      	b.n	8006be0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d10f      	bne.n	8006bd0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f022 0210 	bic.w	r2, r2, #16
 8006bbe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d003      	beq.n	8006be0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d032      	beq.n	8006c4e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d022      	beq.n	8006c3a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2205      	movs	r2, #5
 8006bf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f022 0201 	bic.w	r2, r2, #1
 8006c0a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	60bb      	str	r3, [r7, #8]
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d307      	bcc.n	8006c28 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1f2      	bne.n	8006c0c <HAL_DMA_IRQHandler+0x2cc>
 8006c26:	e000      	b.n	8006c2a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006c28:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d005      	beq.n	8006c4e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	4798      	blx	r3
 8006c4a:	e000      	b.n	8006c4e <HAL_DMA_IRQHandler+0x30e>
        return;
 8006c4c:	bf00      	nop
    }
  }
}
 8006c4e:	3718      	adds	r7, #24
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
 8006c60:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006c70:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	2b40      	cmp	r3, #64	@ 0x40
 8006c80:	d108      	bne.n	8006c94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006c92:	e007      	b.n	8006ca4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	60da      	str	r2, [r3, #12]
}
 8006ca4:	bf00      	nop
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	3b10      	subs	r3, #16
 8006cc0:	4a14      	ldr	r2, [pc, #80]	@ (8006d14 <DMA_CalcBaseAndBitshift+0x64>)
 8006cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc6:	091b      	lsrs	r3, r3, #4
 8006cc8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006cca:	4a13      	ldr	r2, [pc, #76]	@ (8006d18 <DMA_CalcBaseAndBitshift+0x68>)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4413      	add	r3, r2
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2b03      	cmp	r3, #3
 8006cdc:	d909      	bls.n	8006cf2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006ce6:	f023 0303 	bic.w	r3, r3, #3
 8006cea:	1d1a      	adds	r2, r3, #4
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	659a      	str	r2, [r3, #88]	@ 0x58
 8006cf0:	e007      	b.n	8006d02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006cfa:	f023 0303 	bic.w	r3, r3, #3
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	aaaaaaab 	.word	0xaaaaaaab
 8006d18:	0800be1c 	.word	0x0800be1c

08006d1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d24:	2300      	movs	r3, #0
 8006d26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d11f      	bne.n	8006d76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	2b03      	cmp	r3, #3
 8006d3a:	d856      	bhi.n	8006dea <DMA_CheckFifoParam+0xce>
 8006d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8006d44 <DMA_CheckFifoParam+0x28>)
 8006d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d42:	bf00      	nop
 8006d44:	08006d55 	.word	0x08006d55
 8006d48:	08006d67 	.word	0x08006d67
 8006d4c:	08006d55 	.word	0x08006d55
 8006d50:	08006deb 	.word	0x08006deb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d046      	beq.n	8006dee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d64:	e043      	b.n	8006dee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d6a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006d6e:	d140      	bne.n	8006df2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d74:	e03d      	b.n	8006df2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d7e:	d121      	bne.n	8006dc4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2b03      	cmp	r3, #3
 8006d84:	d837      	bhi.n	8006df6 <DMA_CheckFifoParam+0xda>
 8006d86:	a201      	add	r2, pc, #4	@ (adr r2, 8006d8c <DMA_CheckFifoParam+0x70>)
 8006d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8c:	08006d9d 	.word	0x08006d9d
 8006d90:	08006da3 	.word	0x08006da3
 8006d94:	08006d9d 	.word	0x08006d9d
 8006d98:	08006db5 	.word	0x08006db5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8006da0:	e030      	b.n	8006e04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d025      	beq.n	8006dfa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006db2:	e022      	b.n	8006dfa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006dbc:	d11f      	bne.n	8006dfe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006dc2:	e01c      	b.n	8006dfe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d903      	bls.n	8006dd2 <DMA_CheckFifoParam+0xb6>
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	2b03      	cmp	r3, #3
 8006dce:	d003      	beq.n	8006dd8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006dd0:	e018      	b.n	8006e04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	73fb      	strb	r3, [r7, #15]
      break;
 8006dd6:	e015      	b.n	8006e04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ddc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00e      	beq.n	8006e02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	73fb      	strb	r3, [r7, #15]
      break;
 8006de8:	e00b      	b.n	8006e02 <DMA_CheckFifoParam+0xe6>
      break;
 8006dea:	bf00      	nop
 8006dec:	e00a      	b.n	8006e04 <DMA_CheckFifoParam+0xe8>
      break;
 8006dee:	bf00      	nop
 8006df0:	e008      	b.n	8006e04 <DMA_CheckFifoParam+0xe8>
      break;
 8006df2:	bf00      	nop
 8006df4:	e006      	b.n	8006e04 <DMA_CheckFifoParam+0xe8>
      break;
 8006df6:	bf00      	nop
 8006df8:	e004      	b.n	8006e04 <DMA_CheckFifoParam+0xe8>
      break;
 8006dfa:	bf00      	nop
 8006dfc:	e002      	b.n	8006e04 <DMA_CheckFifoParam+0xe8>
      break;   
 8006dfe:	bf00      	nop
 8006e00:	e000      	b.n	8006e04 <DMA_CheckFifoParam+0xe8>
      break;
 8006e02:	bf00      	nop
    }
  } 
  
  return status; 
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3714      	adds	r7, #20
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop

08006e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b089      	sub	sp, #36	@ 0x24
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006e22:	2300      	movs	r3, #0
 8006e24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006e26:	2300      	movs	r3, #0
 8006e28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	61fb      	str	r3, [r7, #28]
 8006e2e:	e159      	b.n	80070e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006e30:	2201      	movs	r2, #1
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	fa02 f303 	lsl.w	r3, r2, r3
 8006e38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	697a      	ldr	r2, [r7, #20]
 8006e40:	4013      	ands	r3, r2
 8006e42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	f040 8148 	bne.w	80070de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f003 0303 	and.w	r3, r3, #3
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d005      	beq.n	8006e66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d130      	bne.n	8006ec8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	005b      	lsls	r3, r3, #1
 8006e70:	2203      	movs	r2, #3
 8006e72:	fa02 f303 	lsl.w	r3, r2, r3
 8006e76:	43db      	mvns	r3, r3
 8006e78:	69ba      	ldr	r2, [r7, #24]
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	68da      	ldr	r2, [r3, #12]
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	005b      	lsls	r3, r3, #1
 8006e86:	fa02 f303 	lsl.w	r3, r2, r3
 8006e8a:	69ba      	ldr	r2, [r7, #24]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	69ba      	ldr	r2, [r7, #24]
 8006e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea4:	43db      	mvns	r3, r3
 8006ea6:	69ba      	ldr	r2, [r7, #24]
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	091b      	lsrs	r3, r3, #4
 8006eb2:	f003 0201 	and.w	r2, r3, #1
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ebc:	69ba      	ldr	r2, [r7, #24]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	69ba      	ldr	r2, [r7, #24]
 8006ec6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f003 0303 	and.w	r3, r3, #3
 8006ed0:	2b03      	cmp	r3, #3
 8006ed2:	d017      	beq.n	8006f04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	005b      	lsls	r3, r3, #1
 8006ede:	2203      	movs	r2, #3
 8006ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee4:	43db      	mvns	r3, r3
 8006ee6:	69ba      	ldr	r2, [r7, #24]
 8006ee8:	4013      	ands	r3, r2
 8006eea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	689a      	ldr	r2, [r3, #8]
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	005b      	lsls	r3, r3, #1
 8006ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef8:	69ba      	ldr	r2, [r7, #24]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	69ba      	ldr	r2, [r7, #24]
 8006f02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	f003 0303 	and.w	r3, r3, #3
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d123      	bne.n	8006f58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	08da      	lsrs	r2, r3, #3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	3208      	adds	r2, #8
 8006f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	f003 0307 	and.w	r3, r3, #7
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	220f      	movs	r2, #15
 8006f28:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2c:	43db      	mvns	r3, r3
 8006f2e:	69ba      	ldr	r2, [r7, #24]
 8006f30:	4013      	ands	r3, r2
 8006f32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	691a      	ldr	r2, [r3, #16]
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	f003 0307 	and.w	r3, r3, #7
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	fa02 f303 	lsl.w	r3, r2, r3
 8006f44:	69ba      	ldr	r2, [r7, #24]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	08da      	lsrs	r2, r3, #3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	3208      	adds	r2, #8
 8006f52:	69b9      	ldr	r1, [r7, #24]
 8006f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	005b      	lsls	r3, r3, #1
 8006f62:	2203      	movs	r2, #3
 8006f64:	fa02 f303 	lsl.w	r3, r2, r3
 8006f68:	43db      	mvns	r3, r3
 8006f6a:	69ba      	ldr	r2, [r7, #24]
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	f003 0203 	and.w	r2, r3, #3
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	005b      	lsls	r3, r3, #1
 8006f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f80:	69ba      	ldr	r2, [r7, #24]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	69ba      	ldr	r2, [r7, #24]
 8006f8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 80a2 	beq.w	80070de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60fb      	str	r3, [r7, #12]
 8006f9e:	4b57      	ldr	r3, [pc, #348]	@ (80070fc <HAL_GPIO_Init+0x2e8>)
 8006fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fa2:	4a56      	ldr	r2, [pc, #344]	@ (80070fc <HAL_GPIO_Init+0x2e8>)
 8006fa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006fa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8006faa:	4b54      	ldr	r3, [pc, #336]	@ (80070fc <HAL_GPIO_Init+0x2e8>)
 8006fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fb2:	60fb      	str	r3, [r7, #12]
 8006fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006fb6:	4a52      	ldr	r2, [pc, #328]	@ (8007100 <HAL_GPIO_Init+0x2ec>)
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	089b      	lsrs	r3, r3, #2
 8006fbc:	3302      	adds	r3, #2
 8006fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	f003 0303 	and.w	r3, r3, #3
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	220f      	movs	r2, #15
 8006fce:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd2:	43db      	mvns	r3, r3
 8006fd4:	69ba      	ldr	r2, [r7, #24]
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a49      	ldr	r2, [pc, #292]	@ (8007104 <HAL_GPIO_Init+0x2f0>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d019      	beq.n	8007016 <HAL_GPIO_Init+0x202>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a48      	ldr	r2, [pc, #288]	@ (8007108 <HAL_GPIO_Init+0x2f4>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d013      	beq.n	8007012 <HAL_GPIO_Init+0x1fe>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a47      	ldr	r2, [pc, #284]	@ (800710c <HAL_GPIO_Init+0x2f8>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d00d      	beq.n	800700e <HAL_GPIO_Init+0x1fa>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a46      	ldr	r2, [pc, #280]	@ (8007110 <HAL_GPIO_Init+0x2fc>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d007      	beq.n	800700a <HAL_GPIO_Init+0x1f6>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a45      	ldr	r2, [pc, #276]	@ (8007114 <HAL_GPIO_Init+0x300>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d101      	bne.n	8007006 <HAL_GPIO_Init+0x1f2>
 8007002:	2304      	movs	r3, #4
 8007004:	e008      	b.n	8007018 <HAL_GPIO_Init+0x204>
 8007006:	2307      	movs	r3, #7
 8007008:	e006      	b.n	8007018 <HAL_GPIO_Init+0x204>
 800700a:	2303      	movs	r3, #3
 800700c:	e004      	b.n	8007018 <HAL_GPIO_Init+0x204>
 800700e:	2302      	movs	r3, #2
 8007010:	e002      	b.n	8007018 <HAL_GPIO_Init+0x204>
 8007012:	2301      	movs	r3, #1
 8007014:	e000      	b.n	8007018 <HAL_GPIO_Init+0x204>
 8007016:	2300      	movs	r3, #0
 8007018:	69fa      	ldr	r2, [r7, #28]
 800701a:	f002 0203 	and.w	r2, r2, #3
 800701e:	0092      	lsls	r2, r2, #2
 8007020:	4093      	lsls	r3, r2
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	4313      	orrs	r3, r2
 8007026:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007028:	4935      	ldr	r1, [pc, #212]	@ (8007100 <HAL_GPIO_Init+0x2ec>)
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	089b      	lsrs	r3, r3, #2
 800702e:	3302      	adds	r3, #2
 8007030:	69ba      	ldr	r2, [r7, #24]
 8007032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007036:	4b38      	ldr	r3, [pc, #224]	@ (8007118 <HAL_GPIO_Init+0x304>)
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	43db      	mvns	r3, r3
 8007040:	69ba      	ldr	r2, [r7, #24]
 8007042:	4013      	ands	r3, r2
 8007044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d003      	beq.n	800705a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007052:	69ba      	ldr	r2, [r7, #24]
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	4313      	orrs	r3, r2
 8007058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800705a:	4a2f      	ldr	r2, [pc, #188]	@ (8007118 <HAL_GPIO_Init+0x304>)
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007060:	4b2d      	ldr	r3, [pc, #180]	@ (8007118 <HAL_GPIO_Init+0x304>)
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	43db      	mvns	r3, r3
 800706a:	69ba      	ldr	r2, [r7, #24]
 800706c:	4013      	ands	r3, r2
 800706e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007078:	2b00      	cmp	r3, #0
 800707a:	d003      	beq.n	8007084 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800707c:	69ba      	ldr	r2, [r7, #24]
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	4313      	orrs	r3, r2
 8007082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007084:	4a24      	ldr	r2, [pc, #144]	@ (8007118 <HAL_GPIO_Init+0x304>)
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800708a:	4b23      	ldr	r3, [pc, #140]	@ (8007118 <HAL_GPIO_Init+0x304>)
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	43db      	mvns	r3, r3
 8007094:	69ba      	ldr	r2, [r7, #24]
 8007096:	4013      	ands	r3, r2
 8007098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d003      	beq.n	80070ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80070a6:	69ba      	ldr	r2, [r7, #24]
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80070ae:	4a1a      	ldr	r2, [pc, #104]	@ (8007118 <HAL_GPIO_Init+0x304>)
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80070b4:	4b18      	ldr	r3, [pc, #96]	@ (8007118 <HAL_GPIO_Init+0x304>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	43db      	mvns	r3, r3
 80070be:	69ba      	ldr	r2, [r7, #24]
 80070c0:	4013      	ands	r3, r2
 80070c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d003      	beq.n	80070d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80070d0:	69ba      	ldr	r2, [r7, #24]
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80070d8:	4a0f      	ldr	r2, [pc, #60]	@ (8007118 <HAL_GPIO_Init+0x304>)
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	3301      	adds	r3, #1
 80070e2:	61fb      	str	r3, [r7, #28]
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	2b0f      	cmp	r3, #15
 80070e8:	f67f aea2 	bls.w	8006e30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80070ec:	bf00      	nop
 80070ee:	bf00      	nop
 80070f0:	3724      	adds	r7, #36	@ 0x24
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	40023800 	.word	0x40023800
 8007100:	40013800 	.word	0x40013800
 8007104:	40020000 	.word	0x40020000
 8007108:	40020400 	.word	0x40020400
 800710c:	40020800 	.word	0x40020800
 8007110:	40020c00 	.word	0x40020c00
 8007114:	40021000 	.word	0x40021000
 8007118:	40013c00 	.word	0x40013c00

0800711c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d101      	bne.n	800712e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e12b      	b.n	8007386 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2b00      	cmp	r3, #0
 8007138:	d106      	bne.n	8007148 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7fa fa0e 	bl	8001564 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2224      	movs	r2, #36	@ 0x24
 800714c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f022 0201 	bic.w	r2, r2, #1
 800715e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800716e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800717e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007180:	f001 fc10 	bl	80089a4 <HAL_RCC_GetPCLK1Freq>
 8007184:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	4a81      	ldr	r2, [pc, #516]	@ (8007390 <HAL_I2C_Init+0x274>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d807      	bhi.n	80071a0 <HAL_I2C_Init+0x84>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	4a80      	ldr	r2, [pc, #512]	@ (8007394 <HAL_I2C_Init+0x278>)
 8007194:	4293      	cmp	r3, r2
 8007196:	bf94      	ite	ls
 8007198:	2301      	movls	r3, #1
 800719a:	2300      	movhi	r3, #0
 800719c:	b2db      	uxtb	r3, r3
 800719e:	e006      	b.n	80071ae <HAL_I2C_Init+0x92>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	4a7d      	ldr	r2, [pc, #500]	@ (8007398 <HAL_I2C_Init+0x27c>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	bf94      	ite	ls
 80071a8:	2301      	movls	r3, #1
 80071aa:	2300      	movhi	r3, #0
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d001      	beq.n	80071b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e0e7      	b.n	8007386 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	4a78      	ldr	r2, [pc, #480]	@ (800739c <HAL_I2C_Init+0x280>)
 80071ba:	fba2 2303 	umull	r2, r3, r2, r3
 80071be:	0c9b      	lsrs	r3, r3, #18
 80071c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	68ba      	ldr	r2, [r7, #8]
 80071d2:	430a      	orrs	r2, r1
 80071d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	6a1b      	ldr	r3, [r3, #32]
 80071dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	4a6a      	ldr	r2, [pc, #424]	@ (8007390 <HAL_I2C_Init+0x274>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d802      	bhi.n	80071f0 <HAL_I2C_Init+0xd4>
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	3301      	adds	r3, #1
 80071ee:	e009      	b.n	8007204 <HAL_I2C_Init+0xe8>
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80071f6:	fb02 f303 	mul.w	r3, r2, r3
 80071fa:	4a69      	ldr	r2, [pc, #420]	@ (80073a0 <HAL_I2C_Init+0x284>)
 80071fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007200:	099b      	lsrs	r3, r3, #6
 8007202:	3301      	adds	r3, #1
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	6812      	ldr	r2, [r2, #0]
 8007208:	430b      	orrs	r3, r1
 800720a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	69db      	ldr	r3, [r3, #28]
 8007212:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007216:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	495c      	ldr	r1, [pc, #368]	@ (8007390 <HAL_I2C_Init+0x274>)
 8007220:	428b      	cmp	r3, r1
 8007222:	d819      	bhi.n	8007258 <HAL_I2C_Init+0x13c>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	1e59      	subs	r1, r3, #1
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	005b      	lsls	r3, r3, #1
 800722e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007232:	1c59      	adds	r1, r3, #1
 8007234:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007238:	400b      	ands	r3, r1
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00a      	beq.n	8007254 <HAL_I2C_Init+0x138>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	1e59      	subs	r1, r3, #1
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	005b      	lsls	r3, r3, #1
 8007248:	fbb1 f3f3 	udiv	r3, r1, r3
 800724c:	3301      	adds	r3, #1
 800724e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007252:	e051      	b.n	80072f8 <HAL_I2C_Init+0x1dc>
 8007254:	2304      	movs	r3, #4
 8007256:	e04f      	b.n	80072f8 <HAL_I2C_Init+0x1dc>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d111      	bne.n	8007284 <HAL_I2C_Init+0x168>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	1e58      	subs	r0, r3, #1
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6859      	ldr	r1, [r3, #4]
 8007268:	460b      	mov	r3, r1
 800726a:	005b      	lsls	r3, r3, #1
 800726c:	440b      	add	r3, r1
 800726e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007272:	3301      	adds	r3, #1
 8007274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007278:	2b00      	cmp	r3, #0
 800727a:	bf0c      	ite	eq
 800727c:	2301      	moveq	r3, #1
 800727e:	2300      	movne	r3, #0
 8007280:	b2db      	uxtb	r3, r3
 8007282:	e012      	b.n	80072aa <HAL_I2C_Init+0x18e>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	1e58      	subs	r0, r3, #1
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6859      	ldr	r1, [r3, #4]
 800728c:	460b      	mov	r3, r1
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	440b      	add	r3, r1
 8007292:	0099      	lsls	r1, r3, #2
 8007294:	440b      	add	r3, r1
 8007296:	fbb0 f3f3 	udiv	r3, r0, r3
 800729a:	3301      	adds	r3, #1
 800729c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	bf0c      	ite	eq
 80072a4:	2301      	moveq	r3, #1
 80072a6:	2300      	movne	r3, #0
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d001      	beq.n	80072b2 <HAL_I2C_Init+0x196>
 80072ae:	2301      	movs	r3, #1
 80072b0:	e022      	b.n	80072f8 <HAL_I2C_Init+0x1dc>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d10e      	bne.n	80072d8 <HAL_I2C_Init+0x1bc>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	1e58      	subs	r0, r3, #1
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6859      	ldr	r1, [r3, #4]
 80072c2:	460b      	mov	r3, r1
 80072c4:	005b      	lsls	r3, r3, #1
 80072c6:	440b      	add	r3, r1
 80072c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80072cc:	3301      	adds	r3, #1
 80072ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072d6:	e00f      	b.n	80072f8 <HAL_I2C_Init+0x1dc>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	1e58      	subs	r0, r3, #1
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6859      	ldr	r1, [r3, #4]
 80072e0:	460b      	mov	r3, r1
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	440b      	add	r3, r1
 80072e6:	0099      	lsls	r1, r3, #2
 80072e8:	440b      	add	r3, r1
 80072ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80072ee:	3301      	adds	r3, #1
 80072f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80072f8:	6879      	ldr	r1, [r7, #4]
 80072fa:	6809      	ldr	r1, [r1, #0]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	69da      	ldr	r2, [r3, #28]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	431a      	orrs	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	430a      	orrs	r2, r1
 800731a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007326:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	6911      	ldr	r1, [r2, #16]
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	68d2      	ldr	r2, [r2, #12]
 8007332:	4311      	orrs	r1, r2
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	6812      	ldr	r2, [r2, #0]
 8007338:	430b      	orrs	r3, r1
 800733a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	695a      	ldr	r2, [r3, #20]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	431a      	orrs	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	430a      	orrs	r2, r1
 8007356:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f042 0201 	orr.w	r2, r2, #1
 8007366:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2220      	movs	r2, #32
 8007372:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	000186a0 	.word	0x000186a0
 8007394:	001e847f 	.word	0x001e847f
 8007398:	003d08ff 	.word	0x003d08ff
 800739c:	431bde83 	.word	0x431bde83
 80073a0:	10624dd3 	.word	0x10624dd3

080073a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b088      	sub	sp, #32
 80073a8:	af02      	add	r7, sp, #8
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	607a      	str	r2, [r7, #4]
 80073ae:	461a      	mov	r2, r3
 80073b0:	460b      	mov	r3, r1
 80073b2:	817b      	strh	r3, [r7, #10]
 80073b4:	4613      	mov	r3, r2
 80073b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80073b8:	f7fe ffe8 	bl	800638c <HAL_GetTick>
 80073bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b20      	cmp	r3, #32
 80073c8:	f040 80e0 	bne.w	800758c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	9300      	str	r3, [sp, #0]
 80073d0:	2319      	movs	r3, #25
 80073d2:	2201      	movs	r2, #1
 80073d4:	4970      	ldr	r1, [pc, #448]	@ (8007598 <HAL_I2C_Master_Transmit+0x1f4>)
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f000 fc7e 	bl	8007cd8 <I2C_WaitOnFlagUntilTimeout>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d001      	beq.n	80073e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80073e2:	2302      	movs	r3, #2
 80073e4:	e0d3      	b.n	800758e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d101      	bne.n	80073f4 <HAL_I2C_Master_Transmit+0x50>
 80073f0:	2302      	movs	r3, #2
 80073f2:	e0cc      	b.n	800758e <HAL_I2C_Master_Transmit+0x1ea>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 0301 	and.w	r3, r3, #1
 8007406:	2b01      	cmp	r3, #1
 8007408:	d007      	beq.n	800741a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f042 0201 	orr.w	r2, r2, #1
 8007418:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007428:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2221      	movs	r2, #33	@ 0x21
 800742e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2210      	movs	r2, #16
 8007436:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	893a      	ldrh	r2, [r7, #8]
 800744a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007450:	b29a      	uxth	r2, r3
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	4a50      	ldr	r2, [pc, #320]	@ (800759c <HAL_I2C_Master_Transmit+0x1f8>)
 800745a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800745c:	8979      	ldrh	r1, [r7, #10]
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	6a3a      	ldr	r2, [r7, #32]
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f000 fae8 	bl	8007a38 <I2C_MasterRequestWrite>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d001      	beq.n	8007472 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e08d      	b.n	800758e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007472:	2300      	movs	r3, #0
 8007474:	613b      	str	r3, [r7, #16]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	695b      	ldr	r3, [r3, #20]
 800747c:	613b      	str	r3, [r7, #16]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	613b      	str	r3, [r7, #16]
 8007486:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007488:	e066      	b.n	8007558 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	6a39      	ldr	r1, [r7, #32]
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f000 fd3c 	bl	8007f0c <I2C_WaitOnTXEFlagUntilTimeout>
 8007494:	4603      	mov	r3, r0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00d      	beq.n	80074b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800749e:	2b04      	cmp	r3, #4
 80074a0:	d107      	bne.n	80074b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e06b      	b.n	800758e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ba:	781a      	ldrb	r2, [r3, #0]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074c6:	1c5a      	adds	r2, r3, #1
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	3b01      	subs	r3, #1
 80074d4:	b29a      	uxth	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074de:	3b01      	subs	r3, #1
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	695b      	ldr	r3, [r3, #20]
 80074ec:	f003 0304 	and.w	r3, r3, #4
 80074f0:	2b04      	cmp	r3, #4
 80074f2:	d11b      	bne.n	800752c <HAL_I2C_Master_Transmit+0x188>
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d017      	beq.n	800752c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007500:	781a      	ldrb	r2, [r3, #0]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800750c:	1c5a      	adds	r2, r3, #1
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007516:	b29b      	uxth	r3, r3
 8007518:	3b01      	subs	r3, #1
 800751a:	b29a      	uxth	r2, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007524:	3b01      	subs	r3, #1
 8007526:	b29a      	uxth	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800752c:	697a      	ldr	r2, [r7, #20]
 800752e:	6a39      	ldr	r1, [r7, #32]
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f000 fd33 	bl	8007f9c <I2C_WaitOnBTFFlagUntilTimeout>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00d      	beq.n	8007558 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007540:	2b04      	cmp	r3, #4
 8007542:	d107      	bne.n	8007554 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007552:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e01a      	b.n	800758e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800755c:	2b00      	cmp	r3, #0
 800755e:	d194      	bne.n	800748a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800756e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2220      	movs	r2, #32
 8007574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2200      	movs	r2, #0
 800757c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007588:	2300      	movs	r3, #0
 800758a:	e000      	b.n	800758e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800758c:	2302      	movs	r3, #2
  }
}
 800758e:	4618      	mov	r0, r3
 8007590:	3718      	adds	r7, #24
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	00100002 	.word	0x00100002
 800759c:	ffff0000 	.word	0xffff0000

080075a0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b08c      	sub	sp, #48	@ 0x30
 80075a4:	af02      	add	r7, sp, #8
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	607a      	str	r2, [r7, #4]
 80075aa:	461a      	mov	r2, r3
 80075ac:	460b      	mov	r3, r1
 80075ae:	817b      	strh	r3, [r7, #10]
 80075b0:	4613      	mov	r3, r2
 80075b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80075b4:	f7fe feea 	bl	800638c <HAL_GetTick>
 80075b8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	2b20      	cmp	r3, #32
 80075c4:	f040 8217 	bne.w	80079f6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80075c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ca:	9300      	str	r3, [sp, #0]
 80075cc:	2319      	movs	r3, #25
 80075ce:	2201      	movs	r2, #1
 80075d0:	497c      	ldr	r1, [pc, #496]	@ (80077c4 <HAL_I2C_Master_Receive+0x224>)
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f000 fb80 	bl	8007cd8 <I2C_WaitOnFlagUntilTimeout>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80075de:	2302      	movs	r3, #2
 80075e0:	e20a      	b.n	80079f8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d101      	bne.n	80075f0 <HAL_I2C_Master_Receive+0x50>
 80075ec:	2302      	movs	r3, #2
 80075ee:	e203      	b.n	80079f8 <HAL_I2C_Master_Receive+0x458>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	2b01      	cmp	r3, #1
 8007604:	d007      	beq.n	8007616 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f042 0201 	orr.w	r2, r2, #1
 8007614:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007624:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2222      	movs	r2, #34	@ 0x22
 800762a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2210      	movs	r2, #16
 8007632:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	893a      	ldrh	r2, [r7, #8]
 8007646:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800764c:	b29a      	uxth	r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	4a5c      	ldr	r2, [pc, #368]	@ (80077c8 <HAL_I2C_Master_Receive+0x228>)
 8007656:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007658:	8979      	ldrh	r1, [r7, #10]
 800765a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	f000 fa6c 	bl	8007b3c <I2C_MasterRequestRead>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d001      	beq.n	800766e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e1c4      	b.n	80079f8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007672:	2b00      	cmp	r3, #0
 8007674:	d113      	bne.n	800769e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007676:	2300      	movs	r3, #0
 8007678:	623b      	str	r3, [r7, #32]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	695b      	ldr	r3, [r3, #20]
 8007680:	623b      	str	r3, [r7, #32]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	623b      	str	r3, [r7, #32]
 800768a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800769a:	601a      	str	r2, [r3, #0]
 800769c:	e198      	b.n	80079d0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d11b      	bne.n	80076de <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076b6:	2300      	movs	r3, #0
 80076b8:	61fb      	str	r3, [r7, #28]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	695b      	ldr	r3, [r3, #20]
 80076c0:	61fb      	str	r3, [r7, #28]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	699b      	ldr	r3, [r3, #24]
 80076c8:	61fb      	str	r3, [r7, #28]
 80076ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076da:	601a      	str	r2, [r3, #0]
 80076dc:	e178      	b.n	80079d0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d11b      	bne.n	800771e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007704:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007706:	2300      	movs	r3, #0
 8007708:	61bb      	str	r3, [r7, #24]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	695b      	ldr	r3, [r3, #20]
 8007710:	61bb      	str	r3, [r7, #24]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	61bb      	str	r3, [r7, #24]
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	e158      	b.n	80079d0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800772c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800772e:	2300      	movs	r3, #0
 8007730:	617b      	str	r3, [r7, #20]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	695b      	ldr	r3, [r3, #20]
 8007738:	617b      	str	r3, [r7, #20]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	617b      	str	r3, [r7, #20]
 8007742:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007744:	e144      	b.n	80079d0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800774a:	2b03      	cmp	r3, #3
 800774c:	f200 80f1 	bhi.w	8007932 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007754:	2b01      	cmp	r3, #1
 8007756:	d123      	bne.n	80077a0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007758:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800775a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	f000 fc65 	bl	800802c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d001      	beq.n	800776c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e145      	b.n	80079f8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	691a      	ldr	r2, [r3, #16]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007776:	b2d2      	uxtb	r2, r2
 8007778:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800777e:	1c5a      	adds	r2, r3, #1
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007788:	3b01      	subs	r3, #1
 800778a:	b29a      	uxth	r2, r3
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007794:	b29b      	uxth	r3, r3
 8007796:	3b01      	subs	r3, #1
 8007798:	b29a      	uxth	r2, r3
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800779e:	e117      	b.n	80079d0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d14e      	bne.n	8007846 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80077a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077aa:	9300      	str	r3, [sp, #0]
 80077ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ae:	2200      	movs	r2, #0
 80077b0:	4906      	ldr	r1, [pc, #24]	@ (80077cc <HAL_I2C_Master_Receive+0x22c>)
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f000 fa90 	bl	8007cd8 <I2C_WaitOnFlagUntilTimeout>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d008      	beq.n	80077d0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e11a      	b.n	80079f8 <HAL_I2C_Master_Receive+0x458>
 80077c2:	bf00      	nop
 80077c4:	00100002 	.word	0x00100002
 80077c8:	ffff0000 	.word	0xffff0000
 80077cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80077de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	691a      	ldr	r2, [r3, #16]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ea:	b2d2      	uxtb	r2, r2
 80077ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077f2:	1c5a      	adds	r2, r3, #1
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077fc:	3b01      	subs	r3, #1
 80077fe:	b29a      	uxth	r2, r3
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007808:	b29b      	uxth	r3, r3
 800780a:	3b01      	subs	r3, #1
 800780c:	b29a      	uxth	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	691a      	ldr	r2, [r3, #16]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800781c:	b2d2      	uxtb	r2, r2
 800781e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007824:	1c5a      	adds	r2, r3, #1
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800782e:	3b01      	subs	r3, #1
 8007830:	b29a      	uxth	r2, r3
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800783a:	b29b      	uxth	r3, r3
 800783c:	3b01      	subs	r3, #1
 800783e:	b29a      	uxth	r2, r3
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007844:	e0c4      	b.n	80079d0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784c:	2200      	movs	r2, #0
 800784e:	496c      	ldr	r1, [pc, #432]	@ (8007a00 <HAL_I2C_Master_Receive+0x460>)
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f000 fa41 	bl	8007cd8 <I2C_WaitOnFlagUntilTimeout>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d001      	beq.n	8007860 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e0cb      	b.n	80079f8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800786e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	691a      	ldr	r2, [r3, #16]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800787a:	b2d2      	uxtb	r2, r2
 800787c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007882:	1c5a      	adds	r2, r3, #1
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800788c:	3b01      	subs	r3, #1
 800788e:	b29a      	uxth	r2, r3
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007898:	b29b      	uxth	r3, r3
 800789a:	3b01      	subs	r3, #1
 800789c:	b29a      	uxth	r2, r3
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80078a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a8:	2200      	movs	r2, #0
 80078aa:	4955      	ldr	r1, [pc, #340]	@ (8007a00 <HAL_I2C_Master_Receive+0x460>)
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f000 fa13 	bl	8007cd8 <I2C_WaitOnFlagUntilTimeout>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d001      	beq.n	80078bc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e09d      	b.n	80079f8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80078ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	691a      	ldr	r2, [r3, #16]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d6:	b2d2      	uxtb	r2, r2
 80078d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078de:	1c5a      	adds	r2, r3, #1
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078e8:	3b01      	subs	r3, #1
 80078ea:	b29a      	uxth	r2, r3
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	3b01      	subs	r3, #1
 80078f8:	b29a      	uxth	r2, r3
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	691a      	ldr	r2, [r3, #16]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007908:	b2d2      	uxtb	r2, r2
 800790a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007910:	1c5a      	adds	r2, r3, #1
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800791a:	3b01      	subs	r3, #1
 800791c:	b29a      	uxth	r2, r3
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007926:	b29b      	uxth	r3, r3
 8007928:	3b01      	subs	r3, #1
 800792a:	b29a      	uxth	r2, r3
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007930:	e04e      	b.n	80079d0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007932:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007934:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007936:	68f8      	ldr	r0, [r7, #12]
 8007938:	f000 fb78 	bl	800802c <I2C_WaitOnRXNEFlagUntilTimeout>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d001      	beq.n	8007946 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e058      	b.n	80079f8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	691a      	ldr	r2, [r3, #16]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007950:	b2d2      	uxtb	r2, r2
 8007952:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007958:	1c5a      	adds	r2, r3, #1
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007962:	3b01      	subs	r3, #1
 8007964:	b29a      	uxth	r2, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800796e:	b29b      	uxth	r3, r3
 8007970:	3b01      	subs	r3, #1
 8007972:	b29a      	uxth	r2, r3
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	695b      	ldr	r3, [r3, #20]
 800797e:	f003 0304 	and.w	r3, r3, #4
 8007982:	2b04      	cmp	r3, #4
 8007984:	d124      	bne.n	80079d0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800798a:	2b03      	cmp	r3, #3
 800798c:	d107      	bne.n	800799e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800799c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	691a      	ldr	r2, [r3, #16]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079a8:	b2d2      	uxtb	r2, r2
 80079aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b0:	1c5a      	adds	r2, r3, #1
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079ba:	3b01      	subs	r3, #1
 80079bc:	b29a      	uxth	r2, r3
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	3b01      	subs	r3, #1
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f47f aeb6 	bne.w	8007746 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2220      	movs	r2, #32
 80079de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	e000      	b.n	80079f8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80079f6:	2302      	movs	r3, #2
  }
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3728      	adds	r7, #40	@ 0x28
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	00010004 	.word	0x00010004

08007a04 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a12:	b2db      	uxtb	r3, r3
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	370c      	adds	r7, #12
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b088      	sub	sp, #32
 8007a3c:	af02      	add	r7, sp, #8
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	607a      	str	r2, [r7, #4]
 8007a42:	603b      	str	r3, [r7, #0]
 8007a44:	460b      	mov	r3, r1
 8007a46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	2b08      	cmp	r3, #8
 8007a52:	d006      	beq.n	8007a62 <I2C_MasterRequestWrite+0x2a>
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d003      	beq.n	8007a62 <I2C_MasterRequestWrite+0x2a>
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007a60:	d108      	bne.n	8007a74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a70:	601a      	str	r2, [r3, #0]
 8007a72:	e00b      	b.n	8007a8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a78:	2b12      	cmp	r3, #18
 8007a7a:	d107      	bne.n	8007a8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	f000 f91d 	bl	8007cd8 <I2C_WaitOnFlagUntilTimeout>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00d      	beq.n	8007ac0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007aae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ab2:	d103      	bne.n	8007abc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007aba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e035      	b.n	8007b2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ac8:	d108      	bne.n	8007adc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007aca:	897b      	ldrh	r3, [r7, #10]
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	461a      	mov	r2, r3
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007ad8:	611a      	str	r2, [r3, #16]
 8007ada:	e01b      	b.n	8007b14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007adc:	897b      	ldrh	r3, [r7, #10]
 8007ade:	11db      	asrs	r3, r3, #7
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	f003 0306 	and.w	r3, r3, #6
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	f063 030f 	orn	r3, r3, #15
 8007aec:	b2da      	uxtb	r2, r3
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	490e      	ldr	r1, [pc, #56]	@ (8007b34 <I2C_MasterRequestWrite+0xfc>)
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f000 f966 	bl	8007dcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d001      	beq.n	8007b0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e010      	b.n	8007b2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007b0a:	897b      	ldrh	r3, [r7, #10]
 8007b0c:	b2da      	uxtb	r2, r3
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	4907      	ldr	r1, [pc, #28]	@ (8007b38 <I2C_MasterRequestWrite+0x100>)
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f000 f956 	bl	8007dcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d001      	beq.n	8007b2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e000      	b.n	8007b2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3718      	adds	r7, #24
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	00010008 	.word	0x00010008
 8007b38:	00010002 	.word	0x00010002

08007b3c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b088      	sub	sp, #32
 8007b40:	af02      	add	r7, sp, #8
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	607a      	str	r2, [r7, #4]
 8007b46:	603b      	str	r3, [r7, #0]
 8007b48:	460b      	mov	r3, r1
 8007b4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b50:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007b60:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	2b08      	cmp	r3, #8
 8007b66:	d006      	beq.n	8007b76 <I2C_MasterRequestRead+0x3a>
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d003      	beq.n	8007b76 <I2C_MasterRequestRead+0x3a>
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007b74:	d108      	bne.n	8007b88 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007b84:	601a      	str	r2, [r3, #0]
 8007b86:	e00b      	b.n	8007ba0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b8c:	2b11      	cmp	r3, #17
 8007b8e:	d107      	bne.n	8007ba0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007b9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f000 f893 	bl	8007cd8 <I2C_WaitOnFlagUntilTimeout>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00d      	beq.n	8007bd4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bc6:	d103      	bne.n	8007bd0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007bce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	e079      	b.n	8007cc8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007bdc:	d108      	bne.n	8007bf0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007bde:	897b      	ldrh	r3, [r7, #10]
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	f043 0301 	orr.w	r3, r3, #1
 8007be6:	b2da      	uxtb	r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	611a      	str	r2, [r3, #16]
 8007bee:	e05f      	b.n	8007cb0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007bf0:	897b      	ldrh	r3, [r7, #10]
 8007bf2:	11db      	asrs	r3, r3, #7
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	f003 0306 	and.w	r3, r3, #6
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	f063 030f 	orn	r3, r3, #15
 8007c00:	b2da      	uxtb	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	4930      	ldr	r1, [pc, #192]	@ (8007cd0 <I2C_MasterRequestRead+0x194>)
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f000 f8dc 	bl	8007dcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d001      	beq.n	8007c1e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e054      	b.n	8007cc8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007c1e:	897b      	ldrh	r3, [r7, #10]
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	4929      	ldr	r1, [pc, #164]	@ (8007cd4 <I2C_MasterRequestRead+0x198>)
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f000 f8cc 	bl	8007dcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d001      	beq.n	8007c3e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e044      	b.n	8007cc8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c3e:	2300      	movs	r3, #0
 8007c40:	613b      	str	r3, [r7, #16]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	695b      	ldr	r3, [r3, #20]
 8007c48:	613b      	str	r3, [r7, #16]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	699b      	ldr	r3, [r3, #24]
 8007c50:	613b      	str	r3, [r7, #16]
 8007c52:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c62:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	9300      	str	r3, [sp, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f000 f831 	bl	8007cd8 <I2C_WaitOnFlagUntilTimeout>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00d      	beq.n	8007c98 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c8a:	d103      	bne.n	8007c94 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c92:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8007c94:	2303      	movs	r3, #3
 8007c96:	e017      	b.n	8007cc8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007c98:	897b      	ldrh	r3, [r7, #10]
 8007c9a:	11db      	asrs	r3, r3, #7
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	f003 0306 	and.w	r3, r3, #6
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	f063 030e 	orn	r3, r3, #14
 8007ca8:	b2da      	uxtb	r2, r3
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	4907      	ldr	r1, [pc, #28]	@ (8007cd4 <I2C_MasterRequestRead+0x198>)
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f000 f888 	bl	8007dcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d001      	beq.n	8007cc6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e000      	b.n	8007cc8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3718      	adds	r7, #24
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	00010008 	.word	0x00010008
 8007cd4:	00010002 	.word	0x00010002

08007cd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	603b      	str	r3, [r7, #0]
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ce8:	e048      	b.n	8007d7c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007cf0:	d044      	beq.n	8007d7c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cf2:	f7fe fb4b 	bl	800638c <HAL_GetTick>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	683a      	ldr	r2, [r7, #0]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d302      	bcc.n	8007d08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d139      	bne.n	8007d7c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	0c1b      	lsrs	r3, r3, #16
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d10d      	bne.n	8007d2e <I2C_WaitOnFlagUntilTimeout+0x56>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	695b      	ldr	r3, [r3, #20]
 8007d18:	43da      	mvns	r2, r3
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	bf0c      	ite	eq
 8007d24:	2301      	moveq	r3, #1
 8007d26:	2300      	movne	r3, #0
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	e00c      	b.n	8007d48 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	43da      	mvns	r2, r3
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	4013      	ands	r3, r2
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	bf0c      	ite	eq
 8007d40:	2301      	moveq	r3, #1
 8007d42:	2300      	movne	r3, #0
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	461a      	mov	r2, r3
 8007d48:	79fb      	ldrb	r3, [r7, #7]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d116      	bne.n	8007d7c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2220      	movs	r2, #32
 8007d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d68:	f043 0220 	orr.w	r2, r3, #32
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e023      	b.n	8007dc4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	0c1b      	lsrs	r3, r3, #16
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d10d      	bne.n	8007da2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	695b      	ldr	r3, [r3, #20]
 8007d8c:	43da      	mvns	r2, r3
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	4013      	ands	r3, r2
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	bf0c      	ite	eq
 8007d98:	2301      	moveq	r3, #1
 8007d9a:	2300      	movne	r3, #0
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	461a      	mov	r2, r3
 8007da0:	e00c      	b.n	8007dbc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	699b      	ldr	r3, [r3, #24]
 8007da8:	43da      	mvns	r2, r3
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	4013      	ands	r3, r2
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	bf0c      	ite	eq
 8007db4:	2301      	moveq	r3, #1
 8007db6:	2300      	movne	r3, #0
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	461a      	mov	r2, r3
 8007dbc:	79fb      	ldrb	r3, [r7, #7]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d093      	beq.n	8007cea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3710      	adds	r7, #16
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	607a      	str	r2, [r7, #4]
 8007dd8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007dda:	e071      	b.n	8007ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007de6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007dea:	d123      	bne.n	8007e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007dfa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007e04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2220      	movs	r2, #32
 8007e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e20:	f043 0204 	orr.w	r2, r3, #4
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e067      	b.n	8007f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e3a:	d041      	beq.n	8007ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e3c:	f7fe faa6 	bl	800638c <HAL_GetTick>
 8007e40:	4602      	mov	r2, r0
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d302      	bcc.n	8007e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d136      	bne.n	8007ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	0c1b      	lsrs	r3, r3, #16
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d10c      	bne.n	8007e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	695b      	ldr	r3, [r3, #20]
 8007e62:	43da      	mvns	r2, r3
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	4013      	ands	r3, r2
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	bf14      	ite	ne
 8007e6e:	2301      	movne	r3, #1
 8007e70:	2300      	moveq	r3, #0
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	e00b      	b.n	8007e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	699b      	ldr	r3, [r3, #24]
 8007e7c:	43da      	mvns	r2, r3
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	4013      	ands	r3, r2
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	bf14      	ite	ne
 8007e88:	2301      	movne	r3, #1
 8007e8a:	2300      	moveq	r3, #0
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d016      	beq.n	8007ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2220      	movs	r2, #32
 8007e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eac:	f043 0220 	orr.w	r2, r3, #32
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e021      	b.n	8007f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	0c1b      	lsrs	r3, r3, #16
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d10c      	bne.n	8007ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	695b      	ldr	r3, [r3, #20]
 8007ed0:	43da      	mvns	r2, r3
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	bf14      	ite	ne
 8007edc:	2301      	movne	r3, #1
 8007ede:	2300      	moveq	r3, #0
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	e00b      	b.n	8007efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	699b      	ldr	r3, [r3, #24]
 8007eea:	43da      	mvns	r2, r3
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	4013      	ands	r3, r2
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	bf14      	ite	ne
 8007ef6:	2301      	movne	r3, #1
 8007ef8:	2300      	moveq	r3, #0
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f47f af6d 	bne.w	8007ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007f18:	e034      	b.n	8007f84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007f1a:	68f8      	ldr	r0, [r7, #12]
 8007f1c:	f000 f8e3 	bl	80080e6 <I2C_IsAcknowledgeFailed>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d001      	beq.n	8007f2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	e034      	b.n	8007f94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f30:	d028      	beq.n	8007f84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f32:	f7fe fa2b 	bl	800638c <HAL_GetTick>
 8007f36:	4602      	mov	r2, r0
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	1ad3      	subs	r3, r2, r3
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d302      	bcc.n	8007f48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d11d      	bne.n	8007f84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	695b      	ldr	r3, [r3, #20]
 8007f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f52:	2b80      	cmp	r3, #128	@ 0x80
 8007f54:	d016      	beq.n	8007f84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2220      	movs	r2, #32
 8007f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f70:	f043 0220 	orr.w	r2, r3, #32
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	e007      	b.n	8007f94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	695b      	ldr	r3, [r3, #20]
 8007f8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f8e:	2b80      	cmp	r3, #128	@ 0x80
 8007f90:	d1c3      	bne.n	8007f1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3710      	adds	r7, #16
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007fa8:	e034      	b.n	8008014 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f000 f89b 	bl	80080e6 <I2C_IsAcknowledgeFailed>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d001      	beq.n	8007fba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e034      	b.n	8008024 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fc0:	d028      	beq.n	8008014 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fc2:	f7fe f9e3 	bl	800638c <HAL_GetTick>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	1ad3      	subs	r3, r2, r3
 8007fcc:	68ba      	ldr	r2, [r7, #8]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d302      	bcc.n	8007fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d11d      	bne.n	8008014 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	695b      	ldr	r3, [r3, #20]
 8007fde:	f003 0304 	and.w	r3, r3, #4
 8007fe2:	2b04      	cmp	r3, #4
 8007fe4:	d016      	beq.n	8008014 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2220      	movs	r2, #32
 8007ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008000:	f043 0220 	orr.w	r2, r3, #32
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2200      	movs	r2, #0
 800800c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e007      	b.n	8008024 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	f003 0304 	and.w	r3, r3, #4
 800801e:	2b04      	cmp	r3, #4
 8008020:	d1c3      	bne.n	8007faa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	3710      	adds	r7, #16
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008038:	e049      	b.n	80080ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	695b      	ldr	r3, [r3, #20]
 8008040:	f003 0310 	and.w	r3, r3, #16
 8008044:	2b10      	cmp	r3, #16
 8008046:	d119      	bne.n	800807c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f06f 0210 	mvn.w	r2, #16
 8008050:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2200      	movs	r2, #0
 8008056:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2220      	movs	r2, #32
 800805c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2200      	movs	r2, #0
 8008064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2200      	movs	r2, #0
 8008074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	e030      	b.n	80080de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800807c:	f7fe f986 	bl	800638c <HAL_GetTick>
 8008080:	4602      	mov	r2, r0
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	1ad3      	subs	r3, r2, r3
 8008086:	68ba      	ldr	r2, [r7, #8]
 8008088:	429a      	cmp	r2, r3
 800808a:	d302      	bcc.n	8008092 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d11d      	bne.n	80080ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	695b      	ldr	r3, [r3, #20]
 8008098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800809c:	2b40      	cmp	r3, #64	@ 0x40
 800809e:	d016      	beq.n	80080ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2200      	movs	r2, #0
 80080a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2220      	movs	r2, #32
 80080aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ba:	f043 0220 	orr.w	r2, r3, #32
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e007      	b.n	80080de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	695b      	ldr	r3, [r3, #20]
 80080d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080d8:	2b40      	cmp	r3, #64	@ 0x40
 80080da:	d1ae      	bne.n	800803a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80080e6:	b480      	push	{r7}
 80080e8:	b083      	sub	sp, #12
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	695b      	ldr	r3, [r3, #20]
 80080f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080fc:	d11b      	bne.n	8008136 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008106:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2220      	movs	r2, #32
 8008112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008122:	f043 0204 	orr.w	r2, r3, #4
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	e000      	b.n	8008138 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b086      	sub	sp, #24
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d101      	bne.n	8008156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	e267      	b.n	8008626 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 0301 	and.w	r3, r3, #1
 800815e:	2b00      	cmp	r3, #0
 8008160:	d075      	beq.n	800824e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008162:	4b88      	ldr	r3, [pc, #544]	@ (8008384 <HAL_RCC_OscConfig+0x240>)
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	f003 030c 	and.w	r3, r3, #12
 800816a:	2b04      	cmp	r3, #4
 800816c:	d00c      	beq.n	8008188 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800816e:	4b85      	ldr	r3, [pc, #532]	@ (8008384 <HAL_RCC_OscConfig+0x240>)
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008176:	2b08      	cmp	r3, #8
 8008178:	d112      	bne.n	80081a0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800817a:	4b82      	ldr	r3, [pc, #520]	@ (8008384 <HAL_RCC_OscConfig+0x240>)
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008182:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008186:	d10b      	bne.n	80081a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008188:	4b7e      	ldr	r3, [pc, #504]	@ (8008384 <HAL_RCC_OscConfig+0x240>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008190:	2b00      	cmp	r3, #0
 8008192:	d05b      	beq.n	800824c <HAL_RCC_OscConfig+0x108>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d157      	bne.n	800824c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	e242      	b.n	8008626 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081a8:	d106      	bne.n	80081b8 <HAL_RCC_OscConfig+0x74>
 80081aa:	4b76      	ldr	r3, [pc, #472]	@ (8008384 <HAL_RCC_OscConfig+0x240>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a75      	ldr	r2, [pc, #468]	@ (8008384 <HAL_RCC_OscConfig+0x240>)
 80081b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80081b4:	6013      	str	r3, [r2, #0]
 80081b6:	e01d      	b.n	80081f4 <HAL_RCC_OscConfig+0xb0>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80081c0:	d10c      	bne.n	80081dc <HAL_RCC_OscConfig+0x98>
 80081c2:	4b70      	ldr	r3, [pc, #448]	@ (8008384 <HAL_RCC_OscConfig+0x240>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a6f      	ldr	r2, [pc, #444]	@ (8008384 <HAL_RCC_OscConfig+0x240>)
 80081c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80081cc:	6013      	str	r3, [r2, #0]
 80081ce:	4b6d      	ldr	r3, [pc, #436]	@ (8008384 <HAL_RCC_OscConfig+0x240>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a6c      	ldr	r2, [pc, #432]	@ (8008384 <HAL_RCC_OscConfig+0x240>)
 80081d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80081d8:	6013      	str	r3, [r2, #0]
 80081da:	e00b      	b.n	80081f4 <HAL_RCC_OscConfig+0xb0>
 80081dc:	4b69      	ldr	r3, [pc, #420]	@ (8008384 <HAL_RCC_OscConfig+0x240>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a68      	ldr	r2, [pc, #416]	@ (8008384 <HAL_RCC_OscConfig+0x240>)
 80081e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081e6:	6013      	str	r3, [r2, #0]
 80081e8:	4b66      	ldr	r3, [pc, #408]	@ (8008384 <HAL_RCC_OscConfig+0x240>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a65      	ldr	r2, [pc, #404]	@ (8008384 <HAL_RCC_OscConfig+0x240>)
 80081ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80081f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d013      	beq.n	8008224 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081fc:	f7fe f8c6 	bl	800638c <HAL_GetTick>
 8008200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008202:	e008      	b.n	8008216 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008204:	f7fe f8c2 	bl	800638c <HAL_GetTick>
 8008208:	4602      	mov	r2, r0
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	1ad3      	subs	r3, r2, r3
 800820e:	2b64      	cmp	r3, #100	@ 0x64
 8008210:	d901      	bls.n	8008216 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e207      	b.n	8008626 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008216:	4b5b      	ldr	r3, [pc, #364]	@ (8008384 <HAL_RCC_OscConfig+0x240>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800821e:	2b00      	cmp	r3, #0
 8008220:	d0f0      	beq.n	8008204 <HAL_RCC_OscConfig+0xc0>
 8008222:	e014      	b.n	800824e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008224:	f7fe f8b2 	bl	800638c <HAL_GetTick>
 8008228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800822a:	e008      	b.n	800823e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800822c:	f7fe f8ae 	bl	800638c <HAL_GetTick>
 8008230:	4602      	mov	r2, r0
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	1ad3      	subs	r3, r2, r3
 8008236:	2b64      	cmp	r3, #100	@ 0x64
 8008238:	d901      	bls.n	800823e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800823a:	2303      	movs	r3, #3
 800823c:	e1f3      	b.n	8008626 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800823e:	4b51      	ldr	r3, [pc, #324]	@ (8008384 <HAL_RCC_OscConfig+0x240>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1f0      	bne.n	800822c <HAL_RCC_OscConfig+0xe8>
 800824a:	e000      	b.n	800824e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800824c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 0302 	and.w	r3, r3, #2
 8008256:	2b00      	cmp	r3, #0
 8008258:	d063      	beq.n	8008322 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800825a:	4b4a      	ldr	r3, [pc, #296]	@ (8008384 <HAL_RCC_OscConfig+0x240>)
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	f003 030c 	and.w	r3, r3, #12
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00b      	beq.n	800827e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008266:	4b47      	ldr	r3, [pc, #284]	@ (8008384 <HAL_RCC_OscConfig+0x240>)
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800826e:	2b08      	cmp	r3, #8
 8008270:	d11c      	bne.n	80082ac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008272:	4b44      	ldr	r3, [pc, #272]	@ (8008384 <HAL_RCC_OscConfig+0x240>)
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800827a:	2b00      	cmp	r3, #0
 800827c:	d116      	bne.n	80082ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800827e:	4b41      	ldr	r3, [pc, #260]	@ (8008384 <HAL_RCC_OscConfig+0x240>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 0302 	and.w	r3, r3, #2
 8008286:	2b00      	cmp	r3, #0
 8008288:	d005      	beq.n	8008296 <HAL_RCC_OscConfig+0x152>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d001      	beq.n	8008296 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e1c7      	b.n	8008626 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008296:	4b3b      	ldr	r3, [pc, #236]	@ (8008384 <HAL_RCC_OscConfig+0x240>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	00db      	lsls	r3, r3, #3
 80082a4:	4937      	ldr	r1, [pc, #220]	@ (8008384 <HAL_RCC_OscConfig+0x240>)
 80082a6:	4313      	orrs	r3, r2
 80082a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80082aa:	e03a      	b.n	8008322 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d020      	beq.n	80082f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80082b4:	4b34      	ldr	r3, [pc, #208]	@ (8008388 <HAL_RCC_OscConfig+0x244>)
 80082b6:	2201      	movs	r2, #1
 80082b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ba:	f7fe f867 	bl	800638c <HAL_GetTick>
 80082be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082c0:	e008      	b.n	80082d4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082c2:	f7fe f863 	bl	800638c <HAL_GetTick>
 80082c6:	4602      	mov	r2, r0
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	1ad3      	subs	r3, r2, r3
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	d901      	bls.n	80082d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80082d0:	2303      	movs	r3, #3
 80082d2:	e1a8      	b.n	8008626 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082d4:	4b2b      	ldr	r3, [pc, #172]	@ (8008384 <HAL_RCC_OscConfig+0x240>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 0302 	and.w	r3, r3, #2
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d0f0      	beq.n	80082c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082e0:	4b28      	ldr	r3, [pc, #160]	@ (8008384 <HAL_RCC_OscConfig+0x240>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	00db      	lsls	r3, r3, #3
 80082ee:	4925      	ldr	r1, [pc, #148]	@ (8008384 <HAL_RCC_OscConfig+0x240>)
 80082f0:	4313      	orrs	r3, r2
 80082f2:	600b      	str	r3, [r1, #0]
 80082f4:	e015      	b.n	8008322 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082f6:	4b24      	ldr	r3, [pc, #144]	@ (8008388 <HAL_RCC_OscConfig+0x244>)
 80082f8:	2200      	movs	r2, #0
 80082fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082fc:	f7fe f846 	bl	800638c <HAL_GetTick>
 8008300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008302:	e008      	b.n	8008316 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008304:	f7fe f842 	bl	800638c <HAL_GetTick>
 8008308:	4602      	mov	r2, r0
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	2b02      	cmp	r3, #2
 8008310:	d901      	bls.n	8008316 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008312:	2303      	movs	r3, #3
 8008314:	e187      	b.n	8008626 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008316:	4b1b      	ldr	r3, [pc, #108]	@ (8008384 <HAL_RCC_OscConfig+0x240>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f003 0302 	and.w	r3, r3, #2
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1f0      	bne.n	8008304 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f003 0308 	and.w	r3, r3, #8
 800832a:	2b00      	cmp	r3, #0
 800832c:	d036      	beq.n	800839c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	695b      	ldr	r3, [r3, #20]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d016      	beq.n	8008364 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008336:	4b15      	ldr	r3, [pc, #84]	@ (800838c <HAL_RCC_OscConfig+0x248>)
 8008338:	2201      	movs	r2, #1
 800833a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800833c:	f7fe f826 	bl	800638c <HAL_GetTick>
 8008340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008342:	e008      	b.n	8008356 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008344:	f7fe f822 	bl	800638c <HAL_GetTick>
 8008348:	4602      	mov	r2, r0
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	1ad3      	subs	r3, r2, r3
 800834e:	2b02      	cmp	r3, #2
 8008350:	d901      	bls.n	8008356 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008352:	2303      	movs	r3, #3
 8008354:	e167      	b.n	8008626 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008356:	4b0b      	ldr	r3, [pc, #44]	@ (8008384 <HAL_RCC_OscConfig+0x240>)
 8008358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800835a:	f003 0302 	and.w	r3, r3, #2
 800835e:	2b00      	cmp	r3, #0
 8008360:	d0f0      	beq.n	8008344 <HAL_RCC_OscConfig+0x200>
 8008362:	e01b      	b.n	800839c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008364:	4b09      	ldr	r3, [pc, #36]	@ (800838c <HAL_RCC_OscConfig+0x248>)
 8008366:	2200      	movs	r2, #0
 8008368:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800836a:	f7fe f80f 	bl	800638c <HAL_GetTick>
 800836e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008370:	e00e      	b.n	8008390 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008372:	f7fe f80b 	bl	800638c <HAL_GetTick>
 8008376:	4602      	mov	r2, r0
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	2b02      	cmp	r3, #2
 800837e:	d907      	bls.n	8008390 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008380:	2303      	movs	r3, #3
 8008382:	e150      	b.n	8008626 <HAL_RCC_OscConfig+0x4e2>
 8008384:	40023800 	.word	0x40023800
 8008388:	42470000 	.word	0x42470000
 800838c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008390:	4b88      	ldr	r3, [pc, #544]	@ (80085b4 <HAL_RCC_OscConfig+0x470>)
 8008392:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008394:	f003 0302 	and.w	r3, r3, #2
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1ea      	bne.n	8008372 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f003 0304 	and.w	r3, r3, #4
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f000 8097 	beq.w	80084d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80083aa:	2300      	movs	r3, #0
 80083ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80083ae:	4b81      	ldr	r3, [pc, #516]	@ (80085b4 <HAL_RCC_OscConfig+0x470>)
 80083b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10f      	bne.n	80083da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80083ba:	2300      	movs	r3, #0
 80083bc:	60bb      	str	r3, [r7, #8]
 80083be:	4b7d      	ldr	r3, [pc, #500]	@ (80085b4 <HAL_RCC_OscConfig+0x470>)
 80083c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083c2:	4a7c      	ldr	r2, [pc, #496]	@ (80085b4 <HAL_RCC_OscConfig+0x470>)
 80083c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80083ca:	4b7a      	ldr	r3, [pc, #488]	@ (80085b4 <HAL_RCC_OscConfig+0x470>)
 80083cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083d2:	60bb      	str	r3, [r7, #8]
 80083d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80083d6:	2301      	movs	r3, #1
 80083d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083da:	4b77      	ldr	r3, [pc, #476]	@ (80085b8 <HAL_RCC_OscConfig+0x474>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d118      	bne.n	8008418 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80083e6:	4b74      	ldr	r3, [pc, #464]	@ (80085b8 <HAL_RCC_OscConfig+0x474>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a73      	ldr	r2, [pc, #460]	@ (80085b8 <HAL_RCC_OscConfig+0x474>)
 80083ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80083f2:	f7fd ffcb 	bl	800638c <HAL_GetTick>
 80083f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083f8:	e008      	b.n	800840c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083fa:	f7fd ffc7 	bl	800638c <HAL_GetTick>
 80083fe:	4602      	mov	r2, r0
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	1ad3      	subs	r3, r2, r3
 8008404:	2b02      	cmp	r3, #2
 8008406:	d901      	bls.n	800840c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008408:	2303      	movs	r3, #3
 800840a:	e10c      	b.n	8008626 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800840c:	4b6a      	ldr	r3, [pc, #424]	@ (80085b8 <HAL_RCC_OscConfig+0x474>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008414:	2b00      	cmp	r3, #0
 8008416:	d0f0      	beq.n	80083fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	2b01      	cmp	r3, #1
 800841e:	d106      	bne.n	800842e <HAL_RCC_OscConfig+0x2ea>
 8008420:	4b64      	ldr	r3, [pc, #400]	@ (80085b4 <HAL_RCC_OscConfig+0x470>)
 8008422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008424:	4a63      	ldr	r2, [pc, #396]	@ (80085b4 <HAL_RCC_OscConfig+0x470>)
 8008426:	f043 0301 	orr.w	r3, r3, #1
 800842a:	6713      	str	r3, [r2, #112]	@ 0x70
 800842c:	e01c      	b.n	8008468 <HAL_RCC_OscConfig+0x324>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	2b05      	cmp	r3, #5
 8008434:	d10c      	bne.n	8008450 <HAL_RCC_OscConfig+0x30c>
 8008436:	4b5f      	ldr	r3, [pc, #380]	@ (80085b4 <HAL_RCC_OscConfig+0x470>)
 8008438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800843a:	4a5e      	ldr	r2, [pc, #376]	@ (80085b4 <HAL_RCC_OscConfig+0x470>)
 800843c:	f043 0304 	orr.w	r3, r3, #4
 8008440:	6713      	str	r3, [r2, #112]	@ 0x70
 8008442:	4b5c      	ldr	r3, [pc, #368]	@ (80085b4 <HAL_RCC_OscConfig+0x470>)
 8008444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008446:	4a5b      	ldr	r2, [pc, #364]	@ (80085b4 <HAL_RCC_OscConfig+0x470>)
 8008448:	f043 0301 	orr.w	r3, r3, #1
 800844c:	6713      	str	r3, [r2, #112]	@ 0x70
 800844e:	e00b      	b.n	8008468 <HAL_RCC_OscConfig+0x324>
 8008450:	4b58      	ldr	r3, [pc, #352]	@ (80085b4 <HAL_RCC_OscConfig+0x470>)
 8008452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008454:	4a57      	ldr	r2, [pc, #348]	@ (80085b4 <HAL_RCC_OscConfig+0x470>)
 8008456:	f023 0301 	bic.w	r3, r3, #1
 800845a:	6713      	str	r3, [r2, #112]	@ 0x70
 800845c:	4b55      	ldr	r3, [pc, #340]	@ (80085b4 <HAL_RCC_OscConfig+0x470>)
 800845e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008460:	4a54      	ldr	r2, [pc, #336]	@ (80085b4 <HAL_RCC_OscConfig+0x470>)
 8008462:	f023 0304 	bic.w	r3, r3, #4
 8008466:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d015      	beq.n	800849c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008470:	f7fd ff8c 	bl	800638c <HAL_GetTick>
 8008474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008476:	e00a      	b.n	800848e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008478:	f7fd ff88 	bl	800638c <HAL_GetTick>
 800847c:	4602      	mov	r2, r0
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008486:	4293      	cmp	r3, r2
 8008488:	d901      	bls.n	800848e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800848a:	2303      	movs	r3, #3
 800848c:	e0cb      	b.n	8008626 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800848e:	4b49      	ldr	r3, [pc, #292]	@ (80085b4 <HAL_RCC_OscConfig+0x470>)
 8008490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008492:	f003 0302 	and.w	r3, r3, #2
 8008496:	2b00      	cmp	r3, #0
 8008498:	d0ee      	beq.n	8008478 <HAL_RCC_OscConfig+0x334>
 800849a:	e014      	b.n	80084c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800849c:	f7fd ff76 	bl	800638c <HAL_GetTick>
 80084a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084a2:	e00a      	b.n	80084ba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084a4:	f7fd ff72 	bl	800638c <HAL_GetTick>
 80084a8:	4602      	mov	r2, r0
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	1ad3      	subs	r3, r2, r3
 80084ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d901      	bls.n	80084ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80084b6:	2303      	movs	r3, #3
 80084b8:	e0b5      	b.n	8008626 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084ba:	4b3e      	ldr	r3, [pc, #248]	@ (80085b4 <HAL_RCC_OscConfig+0x470>)
 80084bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084be:	f003 0302 	and.w	r3, r3, #2
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1ee      	bne.n	80084a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80084c6:	7dfb      	ldrb	r3, [r7, #23]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d105      	bne.n	80084d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084cc:	4b39      	ldr	r3, [pc, #228]	@ (80085b4 <HAL_RCC_OscConfig+0x470>)
 80084ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084d0:	4a38      	ldr	r2, [pc, #224]	@ (80085b4 <HAL_RCC_OscConfig+0x470>)
 80084d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	699b      	ldr	r3, [r3, #24]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f000 80a1 	beq.w	8008624 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80084e2:	4b34      	ldr	r3, [pc, #208]	@ (80085b4 <HAL_RCC_OscConfig+0x470>)
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	f003 030c 	and.w	r3, r3, #12
 80084ea:	2b08      	cmp	r3, #8
 80084ec:	d05c      	beq.n	80085a8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d141      	bne.n	800857a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084f6:	4b31      	ldr	r3, [pc, #196]	@ (80085bc <HAL_RCC_OscConfig+0x478>)
 80084f8:	2200      	movs	r2, #0
 80084fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084fc:	f7fd ff46 	bl	800638c <HAL_GetTick>
 8008500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008502:	e008      	b.n	8008516 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008504:	f7fd ff42 	bl	800638c <HAL_GetTick>
 8008508:	4602      	mov	r2, r0
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	2b02      	cmp	r3, #2
 8008510:	d901      	bls.n	8008516 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008512:	2303      	movs	r3, #3
 8008514:	e087      	b.n	8008626 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008516:	4b27      	ldr	r3, [pc, #156]	@ (80085b4 <HAL_RCC_OscConfig+0x470>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1f0      	bne.n	8008504 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	69da      	ldr	r2, [r3, #28]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	431a      	orrs	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008530:	019b      	lsls	r3, r3, #6
 8008532:	431a      	orrs	r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008538:	085b      	lsrs	r3, r3, #1
 800853a:	3b01      	subs	r3, #1
 800853c:	041b      	lsls	r3, r3, #16
 800853e:	431a      	orrs	r2, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008544:	061b      	lsls	r3, r3, #24
 8008546:	491b      	ldr	r1, [pc, #108]	@ (80085b4 <HAL_RCC_OscConfig+0x470>)
 8008548:	4313      	orrs	r3, r2
 800854a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800854c:	4b1b      	ldr	r3, [pc, #108]	@ (80085bc <HAL_RCC_OscConfig+0x478>)
 800854e:	2201      	movs	r2, #1
 8008550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008552:	f7fd ff1b 	bl	800638c <HAL_GetTick>
 8008556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008558:	e008      	b.n	800856c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800855a:	f7fd ff17 	bl	800638c <HAL_GetTick>
 800855e:	4602      	mov	r2, r0
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	1ad3      	subs	r3, r2, r3
 8008564:	2b02      	cmp	r3, #2
 8008566:	d901      	bls.n	800856c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008568:	2303      	movs	r3, #3
 800856a:	e05c      	b.n	8008626 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800856c:	4b11      	ldr	r3, [pc, #68]	@ (80085b4 <HAL_RCC_OscConfig+0x470>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008574:	2b00      	cmp	r3, #0
 8008576:	d0f0      	beq.n	800855a <HAL_RCC_OscConfig+0x416>
 8008578:	e054      	b.n	8008624 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800857a:	4b10      	ldr	r3, [pc, #64]	@ (80085bc <HAL_RCC_OscConfig+0x478>)
 800857c:	2200      	movs	r2, #0
 800857e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008580:	f7fd ff04 	bl	800638c <HAL_GetTick>
 8008584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008586:	e008      	b.n	800859a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008588:	f7fd ff00 	bl	800638c <HAL_GetTick>
 800858c:	4602      	mov	r2, r0
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	2b02      	cmp	r3, #2
 8008594:	d901      	bls.n	800859a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008596:	2303      	movs	r3, #3
 8008598:	e045      	b.n	8008626 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800859a:	4b06      	ldr	r3, [pc, #24]	@ (80085b4 <HAL_RCC_OscConfig+0x470>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1f0      	bne.n	8008588 <HAL_RCC_OscConfig+0x444>
 80085a6:	e03d      	b.n	8008624 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d107      	bne.n	80085c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	e038      	b.n	8008626 <HAL_RCC_OscConfig+0x4e2>
 80085b4:	40023800 	.word	0x40023800
 80085b8:	40007000 	.word	0x40007000
 80085bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80085c0:	4b1b      	ldr	r3, [pc, #108]	@ (8008630 <HAL_RCC_OscConfig+0x4ec>)
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d028      	beq.n	8008620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085d8:	429a      	cmp	r2, r3
 80085da:	d121      	bne.n	8008620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d11a      	bne.n	8008620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80085f0:	4013      	ands	r3, r2
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80085f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d111      	bne.n	8008620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008606:	085b      	lsrs	r3, r3, #1
 8008608:	3b01      	subs	r3, #1
 800860a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800860c:	429a      	cmp	r2, r3
 800860e:	d107      	bne.n	8008620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800861a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800861c:	429a      	cmp	r2, r3
 800861e:	d001      	beq.n	8008624 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	e000      	b.n	8008626 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008624:	2300      	movs	r3, #0
}
 8008626:	4618      	mov	r0, r3
 8008628:	3718      	adds	r7, #24
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	40023800 	.word	0x40023800

08008634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d101      	bne.n	8008648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	e0cc      	b.n	80087e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008648:	4b68      	ldr	r3, [pc, #416]	@ (80087ec <HAL_RCC_ClockConfig+0x1b8>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f003 0307 	and.w	r3, r3, #7
 8008650:	683a      	ldr	r2, [r7, #0]
 8008652:	429a      	cmp	r2, r3
 8008654:	d90c      	bls.n	8008670 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008656:	4b65      	ldr	r3, [pc, #404]	@ (80087ec <HAL_RCC_ClockConfig+0x1b8>)
 8008658:	683a      	ldr	r2, [r7, #0]
 800865a:	b2d2      	uxtb	r2, r2
 800865c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800865e:	4b63      	ldr	r3, [pc, #396]	@ (80087ec <HAL_RCC_ClockConfig+0x1b8>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f003 0307 	and.w	r3, r3, #7
 8008666:	683a      	ldr	r2, [r7, #0]
 8008668:	429a      	cmp	r2, r3
 800866a:	d001      	beq.n	8008670 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	e0b8      	b.n	80087e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f003 0302 	and.w	r3, r3, #2
 8008678:	2b00      	cmp	r3, #0
 800867a:	d020      	beq.n	80086be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f003 0304 	and.w	r3, r3, #4
 8008684:	2b00      	cmp	r3, #0
 8008686:	d005      	beq.n	8008694 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008688:	4b59      	ldr	r3, [pc, #356]	@ (80087f0 <HAL_RCC_ClockConfig+0x1bc>)
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	4a58      	ldr	r2, [pc, #352]	@ (80087f0 <HAL_RCC_ClockConfig+0x1bc>)
 800868e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008692:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 0308 	and.w	r3, r3, #8
 800869c:	2b00      	cmp	r3, #0
 800869e:	d005      	beq.n	80086ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80086a0:	4b53      	ldr	r3, [pc, #332]	@ (80087f0 <HAL_RCC_ClockConfig+0x1bc>)
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	4a52      	ldr	r2, [pc, #328]	@ (80087f0 <HAL_RCC_ClockConfig+0x1bc>)
 80086a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80086aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80086ac:	4b50      	ldr	r3, [pc, #320]	@ (80087f0 <HAL_RCC_ClockConfig+0x1bc>)
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	494d      	ldr	r1, [pc, #308]	@ (80087f0 <HAL_RCC_ClockConfig+0x1bc>)
 80086ba:	4313      	orrs	r3, r2
 80086bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f003 0301 	and.w	r3, r3, #1
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d044      	beq.n	8008754 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d107      	bne.n	80086e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086d2:	4b47      	ldr	r3, [pc, #284]	@ (80087f0 <HAL_RCC_ClockConfig+0x1bc>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d119      	bne.n	8008712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	e07f      	b.n	80087e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d003      	beq.n	80086f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80086ee:	2b03      	cmp	r3, #3
 80086f0:	d107      	bne.n	8008702 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086f2:	4b3f      	ldr	r3, [pc, #252]	@ (80087f0 <HAL_RCC_ClockConfig+0x1bc>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d109      	bne.n	8008712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	e06f      	b.n	80087e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008702:	4b3b      	ldr	r3, [pc, #236]	@ (80087f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f003 0302 	and.w	r3, r3, #2
 800870a:	2b00      	cmp	r3, #0
 800870c:	d101      	bne.n	8008712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	e067      	b.n	80087e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008712:	4b37      	ldr	r3, [pc, #220]	@ (80087f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f023 0203 	bic.w	r2, r3, #3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	4934      	ldr	r1, [pc, #208]	@ (80087f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008720:	4313      	orrs	r3, r2
 8008722:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008724:	f7fd fe32 	bl	800638c <HAL_GetTick>
 8008728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800872a:	e00a      	b.n	8008742 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800872c:	f7fd fe2e 	bl	800638c <HAL_GetTick>
 8008730:	4602      	mov	r2, r0
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800873a:	4293      	cmp	r3, r2
 800873c:	d901      	bls.n	8008742 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800873e:	2303      	movs	r3, #3
 8008740:	e04f      	b.n	80087e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008742:	4b2b      	ldr	r3, [pc, #172]	@ (80087f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	f003 020c 	and.w	r2, r3, #12
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	429a      	cmp	r2, r3
 8008752:	d1eb      	bne.n	800872c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008754:	4b25      	ldr	r3, [pc, #148]	@ (80087ec <HAL_RCC_ClockConfig+0x1b8>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 0307 	and.w	r3, r3, #7
 800875c:	683a      	ldr	r2, [r7, #0]
 800875e:	429a      	cmp	r2, r3
 8008760:	d20c      	bcs.n	800877c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008762:	4b22      	ldr	r3, [pc, #136]	@ (80087ec <HAL_RCC_ClockConfig+0x1b8>)
 8008764:	683a      	ldr	r2, [r7, #0]
 8008766:	b2d2      	uxtb	r2, r2
 8008768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800876a:	4b20      	ldr	r3, [pc, #128]	@ (80087ec <HAL_RCC_ClockConfig+0x1b8>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 0307 	and.w	r3, r3, #7
 8008772:	683a      	ldr	r2, [r7, #0]
 8008774:	429a      	cmp	r2, r3
 8008776:	d001      	beq.n	800877c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	e032      	b.n	80087e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f003 0304 	and.w	r3, r3, #4
 8008784:	2b00      	cmp	r3, #0
 8008786:	d008      	beq.n	800879a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008788:	4b19      	ldr	r3, [pc, #100]	@ (80087f0 <HAL_RCC_ClockConfig+0x1bc>)
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	4916      	ldr	r1, [pc, #88]	@ (80087f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008796:	4313      	orrs	r3, r2
 8008798:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f003 0308 	and.w	r3, r3, #8
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d009      	beq.n	80087ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80087a6:	4b12      	ldr	r3, [pc, #72]	@ (80087f0 <HAL_RCC_ClockConfig+0x1bc>)
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	00db      	lsls	r3, r3, #3
 80087b4:	490e      	ldr	r1, [pc, #56]	@ (80087f0 <HAL_RCC_ClockConfig+0x1bc>)
 80087b6:	4313      	orrs	r3, r2
 80087b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80087ba:	f000 f821 	bl	8008800 <HAL_RCC_GetSysClockFreq>
 80087be:	4602      	mov	r2, r0
 80087c0:	4b0b      	ldr	r3, [pc, #44]	@ (80087f0 <HAL_RCC_ClockConfig+0x1bc>)
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	091b      	lsrs	r3, r3, #4
 80087c6:	f003 030f 	and.w	r3, r3, #15
 80087ca:	490a      	ldr	r1, [pc, #40]	@ (80087f4 <HAL_RCC_ClockConfig+0x1c0>)
 80087cc:	5ccb      	ldrb	r3, [r1, r3]
 80087ce:	fa22 f303 	lsr.w	r3, r2, r3
 80087d2:	4a09      	ldr	r2, [pc, #36]	@ (80087f8 <HAL_RCC_ClockConfig+0x1c4>)
 80087d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80087d6:	4b09      	ldr	r3, [pc, #36]	@ (80087fc <HAL_RCC_ClockConfig+0x1c8>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4618      	mov	r0, r3
 80087dc:	f7fd fd92 	bl	8006304 <HAL_InitTick>

  return HAL_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	40023c00 	.word	0x40023c00
 80087f0:	40023800 	.word	0x40023800
 80087f4:	0800be04 	.word	0x0800be04
 80087f8:	2000000c 	.word	0x2000000c
 80087fc:	20000010 	.word	0x20000010

08008800 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008804:	b090      	sub	sp, #64	@ 0x40
 8008806:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008808:	2300      	movs	r3, #0
 800880a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800880c:	2300      	movs	r3, #0
 800880e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8008810:	2300      	movs	r3, #0
 8008812:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008814:	2300      	movs	r3, #0
 8008816:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008818:	4b59      	ldr	r3, [pc, #356]	@ (8008980 <HAL_RCC_GetSysClockFreq+0x180>)
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	f003 030c 	and.w	r3, r3, #12
 8008820:	2b08      	cmp	r3, #8
 8008822:	d00d      	beq.n	8008840 <HAL_RCC_GetSysClockFreq+0x40>
 8008824:	2b08      	cmp	r3, #8
 8008826:	f200 80a1 	bhi.w	800896c <HAL_RCC_GetSysClockFreq+0x16c>
 800882a:	2b00      	cmp	r3, #0
 800882c:	d002      	beq.n	8008834 <HAL_RCC_GetSysClockFreq+0x34>
 800882e:	2b04      	cmp	r3, #4
 8008830:	d003      	beq.n	800883a <HAL_RCC_GetSysClockFreq+0x3a>
 8008832:	e09b      	b.n	800896c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008834:	4b53      	ldr	r3, [pc, #332]	@ (8008984 <HAL_RCC_GetSysClockFreq+0x184>)
 8008836:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008838:	e09b      	b.n	8008972 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800883a:	4b53      	ldr	r3, [pc, #332]	@ (8008988 <HAL_RCC_GetSysClockFreq+0x188>)
 800883c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800883e:	e098      	b.n	8008972 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008840:	4b4f      	ldr	r3, [pc, #316]	@ (8008980 <HAL_RCC_GetSysClockFreq+0x180>)
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008848:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800884a:	4b4d      	ldr	r3, [pc, #308]	@ (8008980 <HAL_RCC_GetSysClockFreq+0x180>)
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008852:	2b00      	cmp	r3, #0
 8008854:	d028      	beq.n	80088a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008856:	4b4a      	ldr	r3, [pc, #296]	@ (8008980 <HAL_RCC_GetSysClockFreq+0x180>)
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	099b      	lsrs	r3, r3, #6
 800885c:	2200      	movs	r2, #0
 800885e:	623b      	str	r3, [r7, #32]
 8008860:	627a      	str	r2, [r7, #36]	@ 0x24
 8008862:	6a3b      	ldr	r3, [r7, #32]
 8008864:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008868:	2100      	movs	r1, #0
 800886a:	4b47      	ldr	r3, [pc, #284]	@ (8008988 <HAL_RCC_GetSysClockFreq+0x188>)
 800886c:	fb03 f201 	mul.w	r2, r3, r1
 8008870:	2300      	movs	r3, #0
 8008872:	fb00 f303 	mul.w	r3, r0, r3
 8008876:	4413      	add	r3, r2
 8008878:	4a43      	ldr	r2, [pc, #268]	@ (8008988 <HAL_RCC_GetSysClockFreq+0x188>)
 800887a:	fba0 1202 	umull	r1, r2, r0, r2
 800887e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008880:	460a      	mov	r2, r1
 8008882:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008884:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008886:	4413      	add	r3, r2
 8008888:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800888a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800888c:	2200      	movs	r2, #0
 800888e:	61bb      	str	r3, [r7, #24]
 8008890:	61fa      	str	r2, [r7, #28]
 8008892:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008896:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800889a:	f7f8 fa25 	bl	8000ce8 <__aeabi_uldivmod>
 800889e:	4602      	mov	r2, r0
 80088a0:	460b      	mov	r3, r1
 80088a2:	4613      	mov	r3, r2
 80088a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088a6:	e053      	b.n	8008950 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80088a8:	4b35      	ldr	r3, [pc, #212]	@ (8008980 <HAL_RCC_GetSysClockFreq+0x180>)
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	099b      	lsrs	r3, r3, #6
 80088ae:	2200      	movs	r2, #0
 80088b0:	613b      	str	r3, [r7, #16]
 80088b2:	617a      	str	r2, [r7, #20]
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80088ba:	f04f 0b00 	mov.w	fp, #0
 80088be:	4652      	mov	r2, sl
 80088c0:	465b      	mov	r3, fp
 80088c2:	f04f 0000 	mov.w	r0, #0
 80088c6:	f04f 0100 	mov.w	r1, #0
 80088ca:	0159      	lsls	r1, r3, #5
 80088cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80088d0:	0150      	lsls	r0, r2, #5
 80088d2:	4602      	mov	r2, r0
 80088d4:	460b      	mov	r3, r1
 80088d6:	ebb2 080a 	subs.w	r8, r2, sl
 80088da:	eb63 090b 	sbc.w	r9, r3, fp
 80088de:	f04f 0200 	mov.w	r2, #0
 80088e2:	f04f 0300 	mov.w	r3, #0
 80088e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80088ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80088ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80088f2:	ebb2 0408 	subs.w	r4, r2, r8
 80088f6:	eb63 0509 	sbc.w	r5, r3, r9
 80088fa:	f04f 0200 	mov.w	r2, #0
 80088fe:	f04f 0300 	mov.w	r3, #0
 8008902:	00eb      	lsls	r3, r5, #3
 8008904:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008908:	00e2      	lsls	r2, r4, #3
 800890a:	4614      	mov	r4, r2
 800890c:	461d      	mov	r5, r3
 800890e:	eb14 030a 	adds.w	r3, r4, sl
 8008912:	603b      	str	r3, [r7, #0]
 8008914:	eb45 030b 	adc.w	r3, r5, fp
 8008918:	607b      	str	r3, [r7, #4]
 800891a:	f04f 0200 	mov.w	r2, #0
 800891e:	f04f 0300 	mov.w	r3, #0
 8008922:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008926:	4629      	mov	r1, r5
 8008928:	028b      	lsls	r3, r1, #10
 800892a:	4621      	mov	r1, r4
 800892c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008930:	4621      	mov	r1, r4
 8008932:	028a      	lsls	r2, r1, #10
 8008934:	4610      	mov	r0, r2
 8008936:	4619      	mov	r1, r3
 8008938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800893a:	2200      	movs	r2, #0
 800893c:	60bb      	str	r3, [r7, #8]
 800893e:	60fa      	str	r2, [r7, #12]
 8008940:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008944:	f7f8 f9d0 	bl	8000ce8 <__aeabi_uldivmod>
 8008948:	4602      	mov	r2, r0
 800894a:	460b      	mov	r3, r1
 800894c:	4613      	mov	r3, r2
 800894e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008950:	4b0b      	ldr	r3, [pc, #44]	@ (8008980 <HAL_RCC_GetSysClockFreq+0x180>)
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	0c1b      	lsrs	r3, r3, #16
 8008956:	f003 0303 	and.w	r3, r3, #3
 800895a:	3301      	adds	r3, #1
 800895c:	005b      	lsls	r3, r3, #1
 800895e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008960:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008964:	fbb2 f3f3 	udiv	r3, r2, r3
 8008968:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800896a:	e002      	b.n	8008972 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800896c:	4b05      	ldr	r3, [pc, #20]	@ (8008984 <HAL_RCC_GetSysClockFreq+0x184>)
 800896e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008974:	4618      	mov	r0, r3
 8008976:	3740      	adds	r7, #64	@ 0x40
 8008978:	46bd      	mov	sp, r7
 800897a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800897e:	bf00      	nop
 8008980:	40023800 	.word	0x40023800
 8008984:	00f42400 	.word	0x00f42400
 8008988:	017d7840 	.word	0x017d7840

0800898c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800898c:	b480      	push	{r7}
 800898e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008990:	4b03      	ldr	r3, [pc, #12]	@ (80089a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008992:	681b      	ldr	r3, [r3, #0]
}
 8008994:	4618      	mov	r0, r3
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	2000000c 	.word	0x2000000c

080089a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80089a8:	f7ff fff0 	bl	800898c <HAL_RCC_GetHCLKFreq>
 80089ac:	4602      	mov	r2, r0
 80089ae:	4b05      	ldr	r3, [pc, #20]	@ (80089c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	0a9b      	lsrs	r3, r3, #10
 80089b4:	f003 0307 	and.w	r3, r3, #7
 80089b8:	4903      	ldr	r1, [pc, #12]	@ (80089c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80089ba:	5ccb      	ldrb	r3, [r1, r3]
 80089bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	40023800 	.word	0x40023800
 80089c8:	0800be14 	.word	0x0800be14

080089cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80089d0:	f7ff ffdc 	bl	800898c <HAL_RCC_GetHCLKFreq>
 80089d4:	4602      	mov	r2, r0
 80089d6:	4b05      	ldr	r3, [pc, #20]	@ (80089ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	0b5b      	lsrs	r3, r3, #13
 80089dc:	f003 0307 	and.w	r3, r3, #7
 80089e0:	4903      	ldr	r1, [pc, #12]	@ (80089f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80089e2:	5ccb      	ldrb	r3, [r1, r3]
 80089e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	40023800 	.word	0x40023800
 80089f0:	0800be14 	.word	0x0800be14

080089f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d101      	bne.n	8008a06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e041      	b.n	8008a8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d106      	bne.n	8008a20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f7fd f9c8 	bl	8005db0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2202      	movs	r2, #2
 8008a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	3304      	adds	r3, #4
 8008a30:	4619      	mov	r1, r3
 8008a32:	4610      	mov	r0, r2
 8008a34:	f000 fba4 	bl	8009180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2201      	movs	r2, #1
 8008a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
	...

08008a94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d001      	beq.n	8008aac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e044      	b.n	8008b36 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2202      	movs	r2, #2
 8008ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68da      	ldr	r2, [r3, #12]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f042 0201 	orr.w	r2, r2, #1
 8008ac2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a1e      	ldr	r2, [pc, #120]	@ (8008b44 <HAL_TIM_Base_Start_IT+0xb0>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d018      	beq.n	8008b00 <HAL_TIM_Base_Start_IT+0x6c>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ad6:	d013      	beq.n	8008b00 <HAL_TIM_Base_Start_IT+0x6c>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a1a      	ldr	r2, [pc, #104]	@ (8008b48 <HAL_TIM_Base_Start_IT+0xb4>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d00e      	beq.n	8008b00 <HAL_TIM_Base_Start_IT+0x6c>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a19      	ldr	r2, [pc, #100]	@ (8008b4c <HAL_TIM_Base_Start_IT+0xb8>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d009      	beq.n	8008b00 <HAL_TIM_Base_Start_IT+0x6c>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a17      	ldr	r2, [pc, #92]	@ (8008b50 <HAL_TIM_Base_Start_IT+0xbc>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d004      	beq.n	8008b00 <HAL_TIM_Base_Start_IT+0x6c>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a16      	ldr	r2, [pc, #88]	@ (8008b54 <HAL_TIM_Base_Start_IT+0xc0>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d111      	bne.n	8008b24 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	f003 0307 	and.w	r3, r3, #7
 8008b0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2b06      	cmp	r3, #6
 8008b10:	d010      	beq.n	8008b34 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f042 0201 	orr.w	r2, r2, #1
 8008b20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b22:	e007      	b.n	8008b34 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f042 0201 	orr.w	r2, r2, #1
 8008b32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3714      	adds	r7, #20
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop
 8008b44:	40010000 	.word	0x40010000
 8008b48:	40000400 	.word	0x40000400
 8008b4c:	40000800 	.word	0x40000800
 8008b50:	40000c00 	.word	0x40000c00
 8008b54:	40014000 	.word	0x40014000

08008b58 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b086      	sub	sp, #24
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d101      	bne.n	8008b6c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e097      	b.n	8008c9c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d106      	bne.n	8008b86 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f7fd f955 	bl	8005e30 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2202      	movs	r2, #2
 8008b8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	6812      	ldr	r2, [r2, #0]
 8008b98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b9c:	f023 0307 	bic.w	r3, r3, #7
 8008ba0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	3304      	adds	r3, #4
 8008baa:	4619      	mov	r1, r3
 8008bac:	4610      	mov	r0, r2
 8008bae:	f000 fae7 	bl	8009180 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	699b      	ldr	r3, [r3, #24]
 8008bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	6a1b      	ldr	r3, [r3, #32]
 8008bc8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	697a      	ldr	r2, [r7, #20]
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bda:	f023 0303 	bic.w	r3, r3, #3
 8008bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	689a      	ldr	r2, [r3, #8]
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	699b      	ldr	r3, [r3, #24]
 8008be8:	021b      	lsls	r3, r3, #8
 8008bea:	4313      	orrs	r3, r2
 8008bec:	693a      	ldr	r2, [r7, #16]
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008bf8:	f023 030c 	bic.w	r3, r3, #12
 8008bfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008c04:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008c08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	68da      	ldr	r2, [r3, #12]
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	69db      	ldr	r3, [r3, #28]
 8008c12:	021b      	lsls	r3, r3, #8
 8008c14:	4313      	orrs	r3, r2
 8008c16:	693a      	ldr	r2, [r7, #16]
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	011a      	lsls	r2, r3, #4
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	6a1b      	ldr	r3, [r3, #32]
 8008c26:	031b      	lsls	r3, r3, #12
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	693a      	ldr	r2, [r7, #16]
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008c36:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008c3e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	685a      	ldr	r2, [r3, #4]
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	695b      	ldr	r3, [r3, #20]
 8008c48:	011b      	lsls	r3, r3, #4
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	697a      	ldr	r2, [r7, #20]
 8008c58:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	693a      	ldr	r2, [r7, #16]
 8008c60:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2201      	movs	r2, #1
 8008c76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2201      	movs	r2, #1
 8008c86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2201      	movs	r2, #1
 8008c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3718      	adds	r7, #24
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008cb4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008cbc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008cc4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008ccc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d110      	bne.n	8008cf6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d102      	bne.n	8008ce0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008cda:	7b7b      	ldrb	r3, [r7, #13]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d001      	beq.n	8008ce4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e069      	b.n	8008db8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2202      	movs	r2, #2
 8008ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2202      	movs	r2, #2
 8008cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008cf4:	e031      	b.n	8008d5a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	2b04      	cmp	r3, #4
 8008cfa:	d110      	bne.n	8008d1e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008cfc:	7bbb      	ldrb	r3, [r7, #14]
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	d102      	bne.n	8008d08 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008d02:	7b3b      	ldrb	r3, [r7, #12]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d001      	beq.n	8008d0c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e055      	b.n	8008db8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2202      	movs	r2, #2
 8008d10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2202      	movs	r2, #2
 8008d18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008d1c:	e01d      	b.n	8008d5a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d1e:	7bfb      	ldrb	r3, [r7, #15]
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d108      	bne.n	8008d36 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d24:	7bbb      	ldrb	r3, [r7, #14]
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d105      	bne.n	8008d36 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d2a:	7b7b      	ldrb	r3, [r7, #13]
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d102      	bne.n	8008d36 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008d30:	7b3b      	ldrb	r3, [r7, #12]
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d001      	beq.n	8008d3a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	e03e      	b.n	8008db8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2202      	movs	r2, #2
 8008d3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2202      	movs	r2, #2
 8008d46:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2202      	movs	r2, #2
 8008d56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d003      	beq.n	8008d68 <HAL_TIM_Encoder_Start+0xc4>
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	2b04      	cmp	r3, #4
 8008d64:	d008      	beq.n	8008d78 <HAL_TIM_Encoder_Start+0xd4>
 8008d66:	e00f      	b.n	8008d88 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	2100      	movs	r1, #0
 8008d70:	4618      	mov	r0, r3
 8008d72:	f000 fb2b 	bl	80093cc <TIM_CCxChannelCmd>
      break;
 8008d76:	e016      	b.n	8008da6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	2104      	movs	r1, #4
 8008d80:	4618      	mov	r0, r3
 8008d82:	f000 fb23 	bl	80093cc <TIM_CCxChannelCmd>
      break;
 8008d86:	e00e      	b.n	8008da6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	2100      	movs	r1, #0
 8008d90:	4618      	mov	r0, r3
 8008d92:	f000 fb1b 	bl	80093cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	2104      	movs	r1, #4
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f000 fb14 	bl	80093cc <TIM_CCxChannelCmd>
      break;
 8008da4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f042 0201 	orr.w	r2, r2, #1
 8008db4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008db6:	2300      	movs	r3, #0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3710      	adds	r7, #16
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	f003 0302 	and.w	r3, r3, #2
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d020      	beq.n	8008e24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f003 0302 	and.w	r3, r3, #2
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d01b      	beq.n	8008e24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f06f 0202 	mvn.w	r2, #2
 8008df4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	f003 0303 	and.w	r3, r3, #3
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d003      	beq.n	8008e12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 f999 	bl	8009142 <HAL_TIM_IC_CaptureCallback>
 8008e10:	e005      	b.n	8008e1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f98b 	bl	800912e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 f99c 	bl	8009156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	f003 0304 	and.w	r3, r3, #4
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d020      	beq.n	8008e70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f003 0304 	and.w	r3, r3, #4
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d01b      	beq.n	8008e70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f06f 0204 	mvn.w	r2, #4
 8008e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2202      	movs	r2, #2
 8008e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	699b      	ldr	r3, [r3, #24]
 8008e4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d003      	beq.n	8008e5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 f973 	bl	8009142 <HAL_TIM_IC_CaptureCallback>
 8008e5c:	e005      	b.n	8008e6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 f965 	bl	800912e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 f976 	bl	8009156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	f003 0308 	and.w	r3, r3, #8
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d020      	beq.n	8008ebc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f003 0308 	and.w	r3, r3, #8
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d01b      	beq.n	8008ebc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f06f 0208 	mvn.w	r2, #8
 8008e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2204      	movs	r2, #4
 8008e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	69db      	ldr	r3, [r3, #28]
 8008e9a:	f003 0303 	and.w	r3, r3, #3
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d003      	beq.n	8008eaa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 f94d 	bl	8009142 <HAL_TIM_IC_CaptureCallback>
 8008ea8:	e005      	b.n	8008eb6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f93f 	bl	800912e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 f950 	bl	8009156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	f003 0310 	and.w	r3, r3, #16
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d020      	beq.n	8008f08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f003 0310 	and.w	r3, r3, #16
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d01b      	beq.n	8008f08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f06f 0210 	mvn.w	r2, #16
 8008ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2208      	movs	r2, #8
 8008ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	69db      	ldr	r3, [r3, #28]
 8008ee6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d003      	beq.n	8008ef6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 f927 	bl	8009142 <HAL_TIM_IC_CaptureCallback>
 8008ef4:	e005      	b.n	8008f02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 f919 	bl	800912e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 f92a 	bl	8009156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	f003 0301 	and.w	r3, r3, #1
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d00c      	beq.n	8008f2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f003 0301 	and.w	r3, r3, #1
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d007      	beq.n	8008f2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f06f 0201 	mvn.w	r2, #1
 8008f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f7f8 fdc2 	bl	8001ab0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00c      	beq.n	8008f50 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d007      	beq.n	8008f50 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fadc 	bl	8009508 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00c      	beq.n	8008f74 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d007      	beq.n	8008f74 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 f8fb 	bl	800916a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	f003 0320 	and.w	r3, r3, #32
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00c      	beq.n	8008f98 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f003 0320 	and.w	r3, r3, #32
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d007      	beq.n	8008f98 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f06f 0220 	mvn.w	r2, #32
 8008f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 faae 	bl	80094f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f98:	bf00      	nop
 8008f9a:	3710      	adds	r7, #16
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008faa:	2300      	movs	r3, #0
 8008fac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d101      	bne.n	8008fbc <HAL_TIM_ConfigClockSource+0x1c>
 8008fb8:	2302      	movs	r3, #2
 8008fba:	e0b4      	b.n	8009126 <HAL_TIM_ConfigClockSource+0x186>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008fda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008fe2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	68ba      	ldr	r2, [r7, #8]
 8008fea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ff4:	d03e      	beq.n	8009074 <HAL_TIM_ConfigClockSource+0xd4>
 8008ff6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ffa:	f200 8087 	bhi.w	800910c <HAL_TIM_ConfigClockSource+0x16c>
 8008ffe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009002:	f000 8086 	beq.w	8009112 <HAL_TIM_ConfigClockSource+0x172>
 8009006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800900a:	d87f      	bhi.n	800910c <HAL_TIM_ConfigClockSource+0x16c>
 800900c:	2b70      	cmp	r3, #112	@ 0x70
 800900e:	d01a      	beq.n	8009046 <HAL_TIM_ConfigClockSource+0xa6>
 8009010:	2b70      	cmp	r3, #112	@ 0x70
 8009012:	d87b      	bhi.n	800910c <HAL_TIM_ConfigClockSource+0x16c>
 8009014:	2b60      	cmp	r3, #96	@ 0x60
 8009016:	d050      	beq.n	80090ba <HAL_TIM_ConfigClockSource+0x11a>
 8009018:	2b60      	cmp	r3, #96	@ 0x60
 800901a:	d877      	bhi.n	800910c <HAL_TIM_ConfigClockSource+0x16c>
 800901c:	2b50      	cmp	r3, #80	@ 0x50
 800901e:	d03c      	beq.n	800909a <HAL_TIM_ConfigClockSource+0xfa>
 8009020:	2b50      	cmp	r3, #80	@ 0x50
 8009022:	d873      	bhi.n	800910c <HAL_TIM_ConfigClockSource+0x16c>
 8009024:	2b40      	cmp	r3, #64	@ 0x40
 8009026:	d058      	beq.n	80090da <HAL_TIM_ConfigClockSource+0x13a>
 8009028:	2b40      	cmp	r3, #64	@ 0x40
 800902a:	d86f      	bhi.n	800910c <HAL_TIM_ConfigClockSource+0x16c>
 800902c:	2b30      	cmp	r3, #48	@ 0x30
 800902e:	d064      	beq.n	80090fa <HAL_TIM_ConfigClockSource+0x15a>
 8009030:	2b30      	cmp	r3, #48	@ 0x30
 8009032:	d86b      	bhi.n	800910c <HAL_TIM_ConfigClockSource+0x16c>
 8009034:	2b20      	cmp	r3, #32
 8009036:	d060      	beq.n	80090fa <HAL_TIM_ConfigClockSource+0x15a>
 8009038:	2b20      	cmp	r3, #32
 800903a:	d867      	bhi.n	800910c <HAL_TIM_ConfigClockSource+0x16c>
 800903c:	2b00      	cmp	r3, #0
 800903e:	d05c      	beq.n	80090fa <HAL_TIM_ConfigClockSource+0x15a>
 8009040:	2b10      	cmp	r3, #16
 8009042:	d05a      	beq.n	80090fa <HAL_TIM_ConfigClockSource+0x15a>
 8009044:	e062      	b.n	800910c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009056:	f000 f999 	bl	800938c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009068:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	68ba      	ldr	r2, [r7, #8]
 8009070:	609a      	str	r2, [r3, #8]
      break;
 8009072:	e04f      	b.n	8009114 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009084:	f000 f982 	bl	800938c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	689a      	ldr	r2, [r3, #8]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009096:	609a      	str	r2, [r3, #8]
      break;
 8009098:	e03c      	b.n	8009114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090a6:	461a      	mov	r2, r3
 80090a8:	f000 f8f6 	bl	8009298 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2150      	movs	r1, #80	@ 0x50
 80090b2:	4618      	mov	r0, r3
 80090b4:	f000 f94f 	bl	8009356 <TIM_ITRx_SetConfig>
      break;
 80090b8:	e02c      	b.n	8009114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80090c6:	461a      	mov	r2, r3
 80090c8:	f000 f915 	bl	80092f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2160      	movs	r1, #96	@ 0x60
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 f93f 	bl	8009356 <TIM_ITRx_SetConfig>
      break;
 80090d8:	e01c      	b.n	8009114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090e6:	461a      	mov	r2, r3
 80090e8:	f000 f8d6 	bl	8009298 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2140      	movs	r1, #64	@ 0x40
 80090f2:	4618      	mov	r0, r3
 80090f4:	f000 f92f 	bl	8009356 <TIM_ITRx_SetConfig>
      break;
 80090f8:	e00c      	b.n	8009114 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4619      	mov	r1, r3
 8009104:	4610      	mov	r0, r2
 8009106:	f000 f926 	bl	8009356 <TIM_ITRx_SetConfig>
      break;
 800910a:	e003      	b.n	8009114 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	73fb      	strb	r3, [r7, #15]
      break;
 8009110:	e000      	b.n	8009114 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009112:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009124:	7bfb      	ldrb	r3, [r7, #15]
}
 8009126:	4618      	mov	r0, r3
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800912e:	b480      	push	{r7}
 8009130:	b083      	sub	sp, #12
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009136:	bf00      	nop
 8009138:	370c      	adds	r7, #12
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr

08009142 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009142:	b480      	push	{r7}
 8009144:	b083      	sub	sp, #12
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800914a:	bf00      	nop
 800914c:	370c      	adds	r7, #12
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr

08009156 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009156:	b480      	push	{r7}
 8009158:	b083      	sub	sp, #12
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800915e:	bf00      	nop
 8009160:	370c      	adds	r7, #12
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr

0800916a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800916a:	b480      	push	{r7}
 800916c:	b083      	sub	sp, #12
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009172:	bf00      	nop
 8009174:	370c      	adds	r7, #12
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr
	...

08009180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009180:	b480      	push	{r7}
 8009182:	b085      	sub	sp, #20
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4a3a      	ldr	r2, [pc, #232]	@ (800927c <TIM_Base_SetConfig+0xfc>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d00f      	beq.n	80091b8 <TIM_Base_SetConfig+0x38>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800919e:	d00b      	beq.n	80091b8 <TIM_Base_SetConfig+0x38>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	4a37      	ldr	r2, [pc, #220]	@ (8009280 <TIM_Base_SetConfig+0x100>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d007      	beq.n	80091b8 <TIM_Base_SetConfig+0x38>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4a36      	ldr	r2, [pc, #216]	@ (8009284 <TIM_Base_SetConfig+0x104>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d003      	beq.n	80091b8 <TIM_Base_SetConfig+0x38>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4a35      	ldr	r2, [pc, #212]	@ (8009288 <TIM_Base_SetConfig+0x108>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d108      	bne.n	80091ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	4313      	orrs	r3, r2
 80091c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4a2b      	ldr	r2, [pc, #172]	@ (800927c <TIM_Base_SetConfig+0xfc>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d01b      	beq.n	800920a <TIM_Base_SetConfig+0x8a>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091d8:	d017      	beq.n	800920a <TIM_Base_SetConfig+0x8a>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4a28      	ldr	r2, [pc, #160]	@ (8009280 <TIM_Base_SetConfig+0x100>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d013      	beq.n	800920a <TIM_Base_SetConfig+0x8a>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4a27      	ldr	r2, [pc, #156]	@ (8009284 <TIM_Base_SetConfig+0x104>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d00f      	beq.n	800920a <TIM_Base_SetConfig+0x8a>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	4a26      	ldr	r2, [pc, #152]	@ (8009288 <TIM_Base_SetConfig+0x108>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d00b      	beq.n	800920a <TIM_Base_SetConfig+0x8a>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4a25      	ldr	r2, [pc, #148]	@ (800928c <TIM_Base_SetConfig+0x10c>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d007      	beq.n	800920a <TIM_Base_SetConfig+0x8a>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	4a24      	ldr	r2, [pc, #144]	@ (8009290 <TIM_Base_SetConfig+0x110>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d003      	beq.n	800920a <TIM_Base_SetConfig+0x8a>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4a23      	ldr	r2, [pc, #140]	@ (8009294 <TIM_Base_SetConfig+0x114>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d108      	bne.n	800921c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	68fa      	ldr	r2, [r7, #12]
 8009218:	4313      	orrs	r3, r2
 800921a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	695b      	ldr	r3, [r3, #20]
 8009226:	4313      	orrs	r3, r2
 8009228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	68fa      	ldr	r2, [r7, #12]
 800922e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	689a      	ldr	r2, [r3, #8]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	4a0e      	ldr	r2, [pc, #56]	@ (800927c <TIM_Base_SetConfig+0xfc>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d103      	bne.n	8009250 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	691a      	ldr	r2, [r3, #16]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	f003 0301 	and.w	r3, r3, #1
 800925e:	2b01      	cmp	r3, #1
 8009260:	d105      	bne.n	800926e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	f023 0201 	bic.w	r2, r3, #1
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	611a      	str	r2, [r3, #16]
  }
}
 800926e:	bf00      	nop
 8009270:	3714      	adds	r7, #20
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop
 800927c:	40010000 	.word	0x40010000
 8009280:	40000400 	.word	0x40000400
 8009284:	40000800 	.word	0x40000800
 8009288:	40000c00 	.word	0x40000c00
 800928c:	40014000 	.word	0x40014000
 8009290:	40014400 	.word	0x40014400
 8009294:	40014800 	.word	0x40014800

08009298 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009298:	b480      	push	{r7}
 800929a:	b087      	sub	sp, #28
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6a1b      	ldr	r3, [r3, #32]
 80092a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6a1b      	ldr	r3, [r3, #32]
 80092ae:	f023 0201 	bic.w	r2, r3, #1
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	699b      	ldr	r3, [r3, #24]
 80092ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80092c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	011b      	lsls	r3, r3, #4
 80092c8:	693a      	ldr	r2, [r7, #16]
 80092ca:	4313      	orrs	r3, r2
 80092cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	f023 030a 	bic.w	r3, r3, #10
 80092d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	4313      	orrs	r3, r2
 80092dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	693a      	ldr	r2, [r7, #16]
 80092e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	697a      	ldr	r2, [r7, #20]
 80092e8:	621a      	str	r2, [r3, #32]
}
 80092ea:	bf00      	nop
 80092ec:	371c      	adds	r7, #28
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr

080092f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092f6:	b480      	push	{r7}
 80092f8:	b087      	sub	sp, #28
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	60f8      	str	r0, [r7, #12]
 80092fe:	60b9      	str	r1, [r7, #8]
 8009300:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6a1b      	ldr	r3, [r3, #32]
 8009306:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	6a1b      	ldr	r3, [r3, #32]
 800930c:	f023 0210 	bic.w	r2, r3, #16
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	699b      	ldr	r3, [r3, #24]
 8009318:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009320:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	031b      	lsls	r3, r3, #12
 8009326:	693a      	ldr	r2, [r7, #16]
 8009328:	4313      	orrs	r3, r2
 800932a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009332:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	011b      	lsls	r3, r3, #4
 8009338:	697a      	ldr	r2, [r7, #20]
 800933a:	4313      	orrs	r3, r2
 800933c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	693a      	ldr	r2, [r7, #16]
 8009342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	697a      	ldr	r2, [r7, #20]
 8009348:	621a      	str	r2, [r3, #32]
}
 800934a:	bf00      	nop
 800934c:	371c      	adds	r7, #28
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr

08009356 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009356:	b480      	push	{r7}
 8009358:	b085      	sub	sp, #20
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
 800935e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800936c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800936e:	683a      	ldr	r2, [r7, #0]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	4313      	orrs	r3, r2
 8009374:	f043 0307 	orr.w	r3, r3, #7
 8009378:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	609a      	str	r2, [r3, #8]
}
 8009380:	bf00      	nop
 8009382:	3714      	adds	r7, #20
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800938c:	b480      	push	{r7}
 800938e:	b087      	sub	sp, #28
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	607a      	str	r2, [r7, #4]
 8009398:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80093a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	021a      	lsls	r2, r3, #8
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	431a      	orrs	r2, r3
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	697a      	ldr	r2, [r7, #20]
 80093b6:	4313      	orrs	r3, r2
 80093b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	697a      	ldr	r2, [r7, #20]
 80093be:	609a      	str	r2, [r3, #8]
}
 80093c0:	bf00      	nop
 80093c2:	371c      	adds	r7, #28
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b087      	sub	sp, #28
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	f003 031f 	and.w	r3, r3, #31
 80093de:	2201      	movs	r2, #1
 80093e0:	fa02 f303 	lsl.w	r3, r2, r3
 80093e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6a1a      	ldr	r2, [r3, #32]
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	43db      	mvns	r3, r3
 80093ee:	401a      	ands	r2, r3
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6a1a      	ldr	r2, [r3, #32]
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	f003 031f 	and.w	r3, r3, #31
 80093fe:	6879      	ldr	r1, [r7, #4]
 8009400:	fa01 f303 	lsl.w	r3, r1, r3
 8009404:	431a      	orrs	r2, r3
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	621a      	str	r2, [r3, #32]
}
 800940a:	bf00      	nop
 800940c:	371c      	adds	r7, #28
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr
	...

08009418 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009418:	b480      	push	{r7}
 800941a:	b085      	sub	sp, #20
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009428:	2b01      	cmp	r3, #1
 800942a:	d101      	bne.n	8009430 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800942c:	2302      	movs	r3, #2
 800942e:	e050      	b.n	80094d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2201      	movs	r2, #1
 8009434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2202      	movs	r2, #2
 800943c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009456:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	68fa      	ldr	r2, [r7, #12]
 800945e:	4313      	orrs	r3, r2
 8009460:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	68fa      	ldr	r2, [r7, #12]
 8009468:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a1c      	ldr	r2, [pc, #112]	@ (80094e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d018      	beq.n	80094a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800947c:	d013      	beq.n	80094a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a18      	ldr	r2, [pc, #96]	@ (80094e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d00e      	beq.n	80094a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a16      	ldr	r2, [pc, #88]	@ (80094e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d009      	beq.n	80094a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a15      	ldr	r2, [pc, #84]	@ (80094ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d004      	beq.n	80094a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a13      	ldr	r2, [pc, #76]	@ (80094f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d10c      	bne.n	80094c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	68ba      	ldr	r2, [r7, #8]
 80094b4:	4313      	orrs	r3, r2
 80094b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3714      	adds	r7, #20
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	40010000 	.word	0x40010000
 80094e4:	40000400 	.word	0x40000400
 80094e8:	40000800 	.word	0x40000800
 80094ec:	40000c00 	.word	0x40000c00
 80094f0:	40014000 	.word	0x40014000

080094f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80094fc:	bf00      	nop
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d101      	bne.n	800952e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800952a:	2301      	movs	r3, #1
 800952c:	e042      	b.n	80095b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009534:	b2db      	uxtb	r3, r3
 8009536:	2b00      	cmp	r3, #0
 8009538:	d106      	bne.n	8009548 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f7fc fd42 	bl	8005fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2224      	movs	r2, #36	@ 0x24
 800954c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	68da      	ldr	r2, [r3, #12]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800955e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 ff37 	bl	800a3d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	691a      	ldr	r2, [r3, #16]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009574:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	695a      	ldr	r2, [r3, #20]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009584:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	68da      	ldr	r2, [r3, #12]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009594:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2220      	movs	r2, #32
 80095a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2220      	movs	r2, #32
 80095a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3708      	adds	r7, #8
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b08c      	sub	sp, #48	@ 0x30
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	60f8      	str	r0, [r7, #12]
 80095c4:	60b9      	str	r1, [r7, #8]
 80095c6:	4613      	mov	r3, r2
 80095c8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	2b20      	cmp	r3, #32
 80095d4:	d156      	bne.n	8009684 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d002      	beq.n	80095e2 <HAL_UART_Transmit_DMA+0x26>
 80095dc:	88fb      	ldrh	r3, [r7, #6]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d101      	bne.n	80095e6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	e04f      	b.n	8009686 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80095e6:	68ba      	ldr	r2, [r7, #8]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	88fa      	ldrh	r2, [r7, #6]
 80095f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	88fa      	ldrh	r2, [r7, #6]
 80095f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2200      	movs	r2, #0
 80095fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2221      	movs	r2, #33	@ 0x21
 8009602:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800960a:	4a21      	ldr	r2, [pc, #132]	@ (8009690 <HAL_UART_Transmit_DMA+0xd4>)
 800960c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009612:	4a20      	ldr	r2, [pc, #128]	@ (8009694 <HAL_UART_Transmit_DMA+0xd8>)
 8009614:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800961a:	4a1f      	ldr	r2, [pc, #124]	@ (8009698 <HAL_UART_Transmit_DMA+0xdc>)
 800961c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009622:	2200      	movs	r2, #0
 8009624:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8009626:	f107 0308 	add.w	r3, r7, #8
 800962a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8009630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009632:	6819      	ldr	r1, [r3, #0]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	3304      	adds	r3, #4
 800963a:	461a      	mov	r2, r3
 800963c:	88fb      	ldrh	r3, [r7, #6]
 800963e:	f7fd f895 	bl	800676c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800964a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	3314      	adds	r3, #20
 8009652:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	e853 3f00 	ldrex	r3, [r3]
 800965a:	617b      	str	r3, [r7, #20]
   return(result);
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009662:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	3314      	adds	r3, #20
 800966a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800966c:	627a      	str	r2, [r7, #36]	@ 0x24
 800966e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009670:	6a39      	ldr	r1, [r7, #32]
 8009672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009674:	e841 2300 	strex	r3, r2, [r1]
 8009678:	61fb      	str	r3, [r7, #28]
   return(result);
 800967a:	69fb      	ldr	r3, [r7, #28]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d1e5      	bne.n	800964c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8009680:	2300      	movs	r3, #0
 8009682:	e000      	b.n	8009686 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8009684:	2302      	movs	r3, #2
  }
}
 8009686:	4618      	mov	r0, r3
 8009688:	3730      	adds	r7, #48	@ 0x30
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	08009c61 	.word	0x08009c61
 8009694:	08009cfb 	.word	0x08009cfb
 8009698:	08009e7f 	.word	0x08009e7f

0800969c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	4613      	mov	r3, r2
 80096a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	2b20      	cmp	r3, #32
 80096b4:	d112      	bne.n	80096dc <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d002      	beq.n	80096c2 <HAL_UART_Receive_DMA+0x26>
 80096bc:	88fb      	ldrh	r3, [r7, #6]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d101      	bne.n	80096c6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	e00b      	b.n	80096de <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2200      	movs	r2, #0
 80096ca:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80096cc:	88fb      	ldrh	r3, [r7, #6]
 80096ce:	461a      	mov	r2, r3
 80096d0:	68b9      	ldr	r1, [r7, #8]
 80096d2:	68f8      	ldr	r0, [r7, #12]
 80096d4:	f000 fc1e 	bl	8009f14 <UART_Start_Receive_DMA>
 80096d8:	4603      	mov	r3, r0
 80096da:	e000      	b.n	80096de <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80096dc:	2302      	movs	r3, #2
  }
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
	...

080096e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b0ba      	sub	sp, #232	@ 0xe8
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	695b      	ldr	r3, [r3, #20]
 800970a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800970e:	2300      	movs	r3, #0
 8009710:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009714:	2300      	movs	r3, #0
 8009716:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800971a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800971e:	f003 030f 	and.w	r3, r3, #15
 8009722:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009726:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800972a:	2b00      	cmp	r3, #0
 800972c:	d10f      	bne.n	800974e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800972e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009732:	f003 0320 	and.w	r3, r3, #32
 8009736:	2b00      	cmp	r3, #0
 8009738:	d009      	beq.n	800974e <HAL_UART_IRQHandler+0x66>
 800973a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800973e:	f003 0320 	and.w	r3, r3, #32
 8009742:	2b00      	cmp	r3, #0
 8009744:	d003      	beq.n	800974e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 fd85 	bl	800a256 <UART_Receive_IT>
      return;
 800974c:	e25b      	b.n	8009c06 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800974e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009752:	2b00      	cmp	r3, #0
 8009754:	f000 80de 	beq.w	8009914 <HAL_UART_IRQHandler+0x22c>
 8009758:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800975c:	f003 0301 	and.w	r3, r3, #1
 8009760:	2b00      	cmp	r3, #0
 8009762:	d106      	bne.n	8009772 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009768:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800976c:	2b00      	cmp	r3, #0
 800976e:	f000 80d1 	beq.w	8009914 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009776:	f003 0301 	and.w	r3, r3, #1
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00b      	beq.n	8009796 <HAL_UART_IRQHandler+0xae>
 800977e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009786:	2b00      	cmp	r3, #0
 8009788:	d005      	beq.n	8009796 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800978e:	f043 0201 	orr.w	r2, r3, #1
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800979a:	f003 0304 	and.w	r3, r3, #4
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d00b      	beq.n	80097ba <HAL_UART_IRQHandler+0xd2>
 80097a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097a6:	f003 0301 	and.w	r3, r3, #1
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d005      	beq.n	80097ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097b2:	f043 0202 	orr.w	r2, r3, #2
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80097ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097be:	f003 0302 	and.w	r3, r3, #2
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d00b      	beq.n	80097de <HAL_UART_IRQHandler+0xf6>
 80097c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097ca:	f003 0301 	and.w	r3, r3, #1
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d005      	beq.n	80097de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097d6:	f043 0204 	orr.w	r2, r3, #4
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80097de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097e2:	f003 0308 	and.w	r3, r3, #8
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d011      	beq.n	800980e <HAL_UART_IRQHandler+0x126>
 80097ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097ee:	f003 0320 	and.w	r3, r3, #32
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d105      	bne.n	8009802 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80097f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097fa:	f003 0301 	and.w	r3, r3, #1
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d005      	beq.n	800980e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009806:	f043 0208 	orr.w	r2, r3, #8
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009812:	2b00      	cmp	r3, #0
 8009814:	f000 81f2 	beq.w	8009bfc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800981c:	f003 0320 	and.w	r3, r3, #32
 8009820:	2b00      	cmp	r3, #0
 8009822:	d008      	beq.n	8009836 <HAL_UART_IRQHandler+0x14e>
 8009824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009828:	f003 0320 	and.w	r3, r3, #32
 800982c:	2b00      	cmp	r3, #0
 800982e:	d002      	beq.n	8009836 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 fd10 	bl	800a256 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	695b      	ldr	r3, [r3, #20]
 800983c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009840:	2b40      	cmp	r3, #64	@ 0x40
 8009842:	bf0c      	ite	eq
 8009844:	2301      	moveq	r3, #1
 8009846:	2300      	movne	r3, #0
 8009848:	b2db      	uxtb	r3, r3
 800984a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009852:	f003 0308 	and.w	r3, r3, #8
 8009856:	2b00      	cmp	r3, #0
 8009858:	d103      	bne.n	8009862 <HAL_UART_IRQHandler+0x17a>
 800985a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800985e:	2b00      	cmp	r3, #0
 8009860:	d04f      	beq.n	8009902 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 fc18 	bl	800a098 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	695b      	ldr	r3, [r3, #20]
 800986e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009872:	2b40      	cmp	r3, #64	@ 0x40
 8009874:	d141      	bne.n	80098fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	3314      	adds	r3, #20
 800987c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009880:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009884:	e853 3f00 	ldrex	r3, [r3]
 8009888:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800988c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009890:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009894:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	3314      	adds	r3, #20
 800989e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80098a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80098a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80098ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80098b2:	e841 2300 	strex	r3, r2, [r1]
 80098b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80098ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d1d9      	bne.n	8009876 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d013      	beq.n	80098f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098ce:	4a7e      	ldr	r2, [pc, #504]	@ (8009ac8 <HAL_UART_IRQHandler+0x3e0>)
 80098d0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7fd f810 	bl	80068fc <HAL_DMA_Abort_IT>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d016      	beq.n	8009910 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80098ec:	4610      	mov	r0, r2
 80098ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098f0:	e00e      	b.n	8009910 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 f99e 	bl	8009c34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098f8:	e00a      	b.n	8009910 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 f99a 	bl	8009c34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009900:	e006      	b.n	8009910 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 f996 	bl	8009c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800990e:	e175      	b.n	8009bfc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009910:	bf00      	nop
    return;
 8009912:	e173      	b.n	8009bfc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009918:	2b01      	cmp	r3, #1
 800991a:	f040 814f 	bne.w	8009bbc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800991e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009922:	f003 0310 	and.w	r3, r3, #16
 8009926:	2b00      	cmp	r3, #0
 8009928:	f000 8148 	beq.w	8009bbc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800992c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009930:	f003 0310 	and.w	r3, r3, #16
 8009934:	2b00      	cmp	r3, #0
 8009936:	f000 8141 	beq.w	8009bbc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800993a:	2300      	movs	r3, #0
 800993c:	60bb      	str	r3, [r7, #8]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	60bb      	str	r3, [r7, #8]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	60bb      	str	r3, [r7, #8]
 800994e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	695b      	ldr	r3, [r3, #20]
 8009956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800995a:	2b40      	cmp	r3, #64	@ 0x40
 800995c:	f040 80b6 	bne.w	8009acc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800996c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009970:	2b00      	cmp	r3, #0
 8009972:	f000 8145 	beq.w	8009c00 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800997a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800997e:	429a      	cmp	r2, r3
 8009980:	f080 813e 	bcs.w	8009c00 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800998a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009990:	69db      	ldr	r3, [r3, #28]
 8009992:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009996:	f000 8088 	beq.w	8009aaa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	330c      	adds	r3, #12
 80099a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80099a8:	e853 3f00 	ldrex	r3, [r3]
 80099ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80099b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80099b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	330c      	adds	r3, #12
 80099c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80099c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80099ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80099d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80099d6:	e841 2300 	strex	r3, r2, [r1]
 80099da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80099de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1d9      	bne.n	800999a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	3314      	adds	r3, #20
 80099ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80099f0:	e853 3f00 	ldrex	r3, [r3]
 80099f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80099f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80099f8:	f023 0301 	bic.w	r3, r3, #1
 80099fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	3314      	adds	r3, #20
 8009a06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009a0a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009a0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a10:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009a12:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009a16:	e841 2300 	strex	r3, r2, [r1]
 8009a1a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009a1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d1e1      	bne.n	80099e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	3314      	adds	r3, #20
 8009a28:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a2c:	e853 3f00 	ldrex	r3, [r3]
 8009a30:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009a32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	3314      	adds	r3, #20
 8009a42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009a46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009a48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009a4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009a4e:	e841 2300 	strex	r3, r2, [r1]
 8009a52:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009a54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d1e3      	bne.n	8009a22 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2220      	movs	r2, #32
 8009a5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	330c      	adds	r3, #12
 8009a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a72:	e853 3f00 	ldrex	r3, [r3]
 8009a76:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009a78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a7a:	f023 0310 	bic.w	r3, r3, #16
 8009a7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	330c      	adds	r3, #12
 8009a88:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009a8c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009a8e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a90:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009a92:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a94:	e841 2300 	strex	r3, r2, [r1]
 8009a98:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009a9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d1e3      	bne.n	8009a68 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7fc feb9 	bl	800681c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2202      	movs	r2, #2
 8009aae:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	1ad3      	subs	r3, r2, r3
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	4619      	mov	r1, r3
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 f8c1 	bl	8009c48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009ac6:	e09b      	b.n	8009c00 <HAL_UART_IRQHandler+0x518>
 8009ac8:	0800a15f 	.word	0x0800a15f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	1ad3      	subs	r3, r2, r3
 8009ad8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	f000 808e 	beq.w	8009c04 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009ae8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f000 8089 	beq.w	8009c04 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	330c      	adds	r3, #12
 8009af8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009afc:	e853 3f00 	ldrex	r3, [r3]
 8009b00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	330c      	adds	r3, #12
 8009b12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009b16:	647a      	str	r2, [r7, #68]	@ 0x44
 8009b18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b1e:	e841 2300 	strex	r3, r2, [r1]
 8009b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d1e3      	bne.n	8009af2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	3314      	adds	r3, #20
 8009b30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b34:	e853 3f00 	ldrex	r3, [r3]
 8009b38:	623b      	str	r3, [r7, #32]
   return(result);
 8009b3a:	6a3b      	ldr	r3, [r7, #32]
 8009b3c:	f023 0301 	bic.w	r3, r3, #1
 8009b40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	3314      	adds	r3, #20
 8009b4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009b4e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b56:	e841 2300 	strex	r3, r2, [r1]
 8009b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1e3      	bne.n	8009b2a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2220      	movs	r2, #32
 8009b66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	330c      	adds	r3, #12
 8009b76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	e853 3f00 	ldrex	r3, [r3]
 8009b7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f023 0310 	bic.w	r3, r3, #16
 8009b86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	330c      	adds	r3, #12
 8009b90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009b94:	61fa      	str	r2, [r7, #28]
 8009b96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b98:	69b9      	ldr	r1, [r7, #24]
 8009b9a:	69fa      	ldr	r2, [r7, #28]
 8009b9c:	e841 2300 	strex	r3, r2, [r1]
 8009ba0:	617b      	str	r3, [r7, #20]
   return(result);
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d1e3      	bne.n	8009b70 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2202      	movs	r2, #2
 8009bac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009bae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 f847 	bl	8009c48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009bba:	e023      	b.n	8009c04 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d009      	beq.n	8009bdc <HAL_UART_IRQHandler+0x4f4>
 8009bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d003      	beq.n	8009bdc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 fad6 	bl	800a186 <UART_Transmit_IT>
    return;
 8009bda:	e014      	b.n	8009c06 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d00e      	beq.n	8009c06 <HAL_UART_IRQHandler+0x51e>
 8009be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d008      	beq.n	8009c06 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 fb16 	bl	800a226 <UART_EndTransmit_IT>
    return;
 8009bfa:	e004      	b.n	8009c06 <HAL_UART_IRQHandler+0x51e>
    return;
 8009bfc:	bf00      	nop
 8009bfe:	e002      	b.n	8009c06 <HAL_UART_IRQHandler+0x51e>
      return;
 8009c00:	bf00      	nop
 8009c02:	e000      	b.n	8009c06 <HAL_UART_IRQHandler+0x51e>
      return;
 8009c04:	bf00      	nop
  }
}
 8009c06:	37e8      	adds	r7, #232	@ 0xe8
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009c14:	bf00      	nop
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009c28:	bf00      	nop
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009c3c:	bf00      	nop
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b083      	sub	sp, #12
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	460b      	mov	r3, r1
 8009c52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009c54:	bf00      	nop
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b090      	sub	sp, #64	@ 0x40
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d137      	bne.n	8009cec <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009c7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c7e:	2200      	movs	r2, #0
 8009c80:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	3314      	adds	r3, #20
 8009c88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c8c:	e853 3f00 	ldrex	r3, [r3]
 8009c90:	623b      	str	r3, [r7, #32]
   return(result);
 8009c92:	6a3b      	ldr	r3, [r7, #32]
 8009c94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	3314      	adds	r3, #20
 8009ca0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009ca2:	633a      	str	r2, [r7, #48]	@ 0x30
 8009ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ca8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009caa:	e841 2300 	strex	r3, r2, [r1]
 8009cae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d1e5      	bne.n	8009c82 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009cb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	330c      	adds	r3, #12
 8009cbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	e853 3f00 	ldrex	r3, [r3]
 8009cc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	330c      	adds	r3, #12
 8009cd4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009cd6:	61fa      	str	r2, [r7, #28]
 8009cd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cda:	69b9      	ldr	r1, [r7, #24]
 8009cdc:	69fa      	ldr	r2, [r7, #28]
 8009cde:	e841 2300 	strex	r3, r2, [r1]
 8009ce2:	617b      	str	r3, [r7, #20]
   return(result);
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d1e5      	bne.n	8009cb6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009cea:	e002      	b.n	8009cf2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009cec:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009cee:	f7fa fcb9 	bl	8004664 <HAL_UART_TxCpltCallback>
}
 8009cf2:	bf00      	nop
 8009cf4:	3740      	adds	r7, #64	@ 0x40
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b084      	sub	sp, #16
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d06:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009d08:	68f8      	ldr	r0, [r7, #12]
 8009d0a:	f7ff ff7f 	bl	8009c0c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d0e:	bf00      	nop
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b09c      	sub	sp, #112	@ 0x70
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d22:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d172      	bne.n	8009e18 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009d32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d34:	2200      	movs	r2, #0
 8009d36:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	330c      	adds	r3, #12
 8009d3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d42:	e853 3f00 	ldrex	r3, [r3]
 8009d46:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009d48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d4a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d4e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	330c      	adds	r3, #12
 8009d56:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009d58:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009d5a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009d5e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009d60:	e841 2300 	strex	r3, r2, [r1]
 8009d64:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009d66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d1e5      	bne.n	8009d38 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	3314      	adds	r3, #20
 8009d72:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d76:	e853 3f00 	ldrex	r3, [r3]
 8009d7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d7e:	f023 0301 	bic.w	r3, r3, #1
 8009d82:	667b      	str	r3, [r7, #100]	@ 0x64
 8009d84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	3314      	adds	r3, #20
 8009d8a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009d8c:	647a      	str	r2, [r7, #68]	@ 0x44
 8009d8e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d94:	e841 2300 	strex	r3, r2, [r1]
 8009d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d1e5      	bne.n	8009d6c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009da0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	3314      	adds	r3, #20
 8009da6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009daa:	e853 3f00 	ldrex	r3, [r3]
 8009dae:	623b      	str	r3, [r7, #32]
   return(result);
 8009db0:	6a3b      	ldr	r3, [r7, #32]
 8009db2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009db6:	663b      	str	r3, [r7, #96]	@ 0x60
 8009db8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	3314      	adds	r3, #20
 8009dbe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009dc0:	633a      	str	r2, [r7, #48]	@ 0x30
 8009dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009dc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009dc8:	e841 2300 	strex	r3, r2, [r1]
 8009dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d1e5      	bne.n	8009da0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009dd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dd6:	2220      	movs	r2, #32
 8009dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ddc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d119      	bne.n	8009e18 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009de4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	330c      	adds	r3, #12
 8009dea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	e853 3f00 	ldrex	r3, [r3]
 8009df2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f023 0310 	bic.w	r3, r3, #16
 8009dfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009dfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	330c      	adds	r3, #12
 8009e02:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009e04:	61fa      	str	r2, [r7, #28]
 8009e06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e08:	69b9      	ldr	r1, [r7, #24]
 8009e0a:	69fa      	ldr	r2, [r7, #28]
 8009e0c:	e841 2300 	strex	r3, r2, [r1]
 8009e10:	617b      	str	r3, [r7, #20]
   return(result);
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d1e5      	bne.n	8009de4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d106      	bne.n	8009e34 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e28:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009e2e:	f7ff ff0b 	bl	8009c48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e32:	e002      	b.n	8009e3a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009e34:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009e36:	f7fa fc2d 	bl	8004694 <HAL_UART_RxCpltCallback>
}
 8009e3a:	bf00      	nop
 8009e3c:	3770      	adds	r7, #112	@ 0x70
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}

08009e42 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009e42:	b580      	push	{r7, lr}
 8009e44:	b084      	sub	sp, #16
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e4e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2201      	movs	r2, #1
 8009e54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d108      	bne.n	8009e70 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009e62:	085b      	lsrs	r3, r3, #1
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	4619      	mov	r1, r3
 8009e68:	68f8      	ldr	r0, [r7, #12]
 8009e6a:	f7ff feed 	bl	8009c48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e6e:	e002      	b.n	8009e76 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009e70:	68f8      	ldr	r0, [r7, #12]
 8009e72:	f7ff fed5 	bl	8009c20 <HAL_UART_RxHalfCpltCallback>
}
 8009e76:	bf00      	nop
 8009e78:	3710      	adds	r7, #16
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b084      	sub	sp, #16
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009e86:	2300      	movs	r3, #0
 8009e88:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e8e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	695b      	ldr	r3, [r3, #20]
 8009e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e9a:	2b80      	cmp	r3, #128	@ 0x80
 8009e9c:	bf0c      	ite	eq
 8009e9e:	2301      	moveq	r3, #1
 8009ea0:	2300      	movne	r3, #0
 8009ea2:	b2db      	uxtb	r3, r3
 8009ea4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	2b21      	cmp	r3, #33	@ 0x21
 8009eb0:	d108      	bne.n	8009ec4 <UART_DMAError+0x46>
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d005      	beq.n	8009ec4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8009ebe:	68b8      	ldr	r0, [r7, #8]
 8009ec0:	f000 f8c2 	bl	800a048 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	695b      	ldr	r3, [r3, #20]
 8009eca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ece:	2b40      	cmp	r3, #64	@ 0x40
 8009ed0:	bf0c      	ite	eq
 8009ed2:	2301      	moveq	r3, #1
 8009ed4:	2300      	movne	r3, #0
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	2b22      	cmp	r3, #34	@ 0x22
 8009ee4:	d108      	bne.n	8009ef8 <UART_DMAError+0x7a>
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d005      	beq.n	8009ef8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009ef2:	68b8      	ldr	r0, [r7, #8]
 8009ef4:	f000 f8d0 	bl	800a098 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009efc:	f043 0210 	orr.w	r2, r3, #16
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f04:	68b8      	ldr	r0, [r7, #8]
 8009f06:	f7ff fe95 	bl	8009c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f0a:	bf00      	nop
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
	...

08009f14 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b098      	sub	sp, #96	@ 0x60
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	4613      	mov	r3, r2
 8009f20:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009f22:	68ba      	ldr	r2, [r7, #8]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	88fa      	ldrh	r2, [r7, #6]
 8009f2c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2200      	movs	r2, #0
 8009f32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2222      	movs	r2, #34	@ 0x22
 8009f38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f40:	4a3e      	ldr	r2, [pc, #248]	@ (800a03c <UART_Start_Receive_DMA+0x128>)
 8009f42:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f48:	4a3d      	ldr	r2, [pc, #244]	@ (800a040 <UART_Start_Receive_DMA+0x12c>)
 8009f4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f50:	4a3c      	ldr	r2, [pc, #240]	@ (800a044 <UART_Start_Receive_DMA+0x130>)
 8009f52:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f58:	2200      	movs	r2, #0
 8009f5a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009f5c:	f107 0308 	add.w	r3, r7, #8
 8009f60:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	3304      	adds	r3, #4
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	88fb      	ldrh	r3, [r7, #6]
 8009f74:	f7fc fbfa 	bl	800676c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009f78:	2300      	movs	r3, #0
 8009f7a:	613b      	str	r3, [r7, #16]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	613b      	str	r3, [r7, #16]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	613b      	str	r3, [r7, #16]
 8009f8c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d019      	beq.n	8009fca <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	330c      	adds	r3, #12
 8009f9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fa0:	e853 3f00 	ldrex	r3, [r3]
 8009fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009fa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009fac:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	330c      	adds	r3, #12
 8009fb4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009fb6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009fb8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fba:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009fbc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009fbe:	e841 2300 	strex	r3, r2, [r1]
 8009fc2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009fc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d1e5      	bne.n	8009f96 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	3314      	adds	r3, #20
 8009fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fd4:	e853 3f00 	ldrex	r3, [r3]
 8009fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fdc:	f043 0301 	orr.w	r3, r3, #1
 8009fe0:	657b      	str	r3, [r7, #84]	@ 0x54
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	3314      	adds	r3, #20
 8009fe8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009fea:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009fec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009ff0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009ff2:	e841 2300 	strex	r3, r2, [r1]
 8009ff6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1e5      	bne.n	8009fca <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	3314      	adds	r3, #20
 800a004:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a006:	69bb      	ldr	r3, [r7, #24]
 800a008:	e853 3f00 	ldrex	r3, [r3]
 800a00c:	617b      	str	r3, [r7, #20]
   return(result);
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a014:	653b      	str	r3, [r7, #80]	@ 0x50
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	3314      	adds	r3, #20
 800a01c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a01e:	627a      	str	r2, [r7, #36]	@ 0x24
 800a020:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a022:	6a39      	ldr	r1, [r7, #32]
 800a024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a026:	e841 2300 	strex	r3, r2, [r1]
 800a02a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d1e5      	bne.n	8009ffe <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	3760      	adds	r7, #96	@ 0x60
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	08009d17 	.word	0x08009d17
 800a040:	08009e43 	.word	0x08009e43
 800a044:	08009e7f 	.word	0x08009e7f

0800a048 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a048:	b480      	push	{r7}
 800a04a:	b089      	sub	sp, #36	@ 0x24
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	330c      	adds	r3, #12
 800a056:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	e853 3f00 	ldrex	r3, [r3]
 800a05e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a066:	61fb      	str	r3, [r7, #28]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	330c      	adds	r3, #12
 800a06e:	69fa      	ldr	r2, [r7, #28]
 800a070:	61ba      	str	r2, [r7, #24]
 800a072:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a074:	6979      	ldr	r1, [r7, #20]
 800a076:	69ba      	ldr	r2, [r7, #24]
 800a078:	e841 2300 	strex	r3, r2, [r1]
 800a07c:	613b      	str	r3, [r7, #16]
   return(result);
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d1e5      	bne.n	800a050 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2220      	movs	r2, #32
 800a088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800a08c:	bf00      	nop
 800a08e:	3724      	adds	r7, #36	@ 0x24
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a098:	b480      	push	{r7}
 800a09a:	b095      	sub	sp, #84	@ 0x54
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	330c      	adds	r3, #12
 800a0a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0aa:	e853 3f00 	ldrex	r3, [r3]
 800a0ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a0b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	330c      	adds	r3, #12
 800a0be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a0c0:	643a      	str	r2, [r7, #64]	@ 0x40
 800a0c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a0c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a0c8:	e841 2300 	strex	r3, r2, [r1]
 800a0cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a0ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d1e5      	bne.n	800a0a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	3314      	adds	r3, #20
 800a0da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0dc:	6a3b      	ldr	r3, [r7, #32]
 800a0de:	e853 3f00 	ldrex	r3, [r3]
 800a0e2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a0e4:	69fb      	ldr	r3, [r7, #28]
 800a0e6:	f023 0301 	bic.w	r3, r3, #1
 800a0ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	3314      	adds	r3, #20
 800a0f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a0f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a0fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a0fc:	e841 2300 	strex	r3, r2, [r1]
 800a100:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a104:	2b00      	cmp	r3, #0
 800a106:	d1e5      	bne.n	800a0d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d119      	bne.n	800a144 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	330c      	adds	r3, #12
 800a116:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	e853 3f00 	ldrex	r3, [r3]
 800a11e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	f023 0310 	bic.w	r3, r3, #16
 800a126:	647b      	str	r3, [r7, #68]	@ 0x44
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	330c      	adds	r3, #12
 800a12e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a130:	61ba      	str	r2, [r7, #24]
 800a132:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a134:	6979      	ldr	r1, [r7, #20]
 800a136:	69ba      	ldr	r2, [r7, #24]
 800a138:	e841 2300 	strex	r3, r2, [r1]
 800a13c:	613b      	str	r3, [r7, #16]
   return(result);
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d1e5      	bne.n	800a110 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2220      	movs	r2, #32
 800a148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a152:	bf00      	nop
 800a154:	3754      	adds	r7, #84	@ 0x54
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr

0800a15e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a15e:	b580      	push	{r7, lr}
 800a160:	b084      	sub	sp, #16
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a16a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2200      	movs	r2, #0
 800a170:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2200      	movs	r2, #0
 800a176:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	f7ff fd5b 	bl	8009c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a17e:	bf00      	nop
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a186:	b480      	push	{r7}
 800a188:	b085      	sub	sp, #20
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a194:	b2db      	uxtb	r3, r3
 800a196:	2b21      	cmp	r3, #33	@ 0x21
 800a198:	d13e      	bne.n	800a218 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1a2:	d114      	bne.n	800a1ce <UART_Transmit_IT+0x48>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	691b      	ldr	r3, [r3, #16]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d110      	bne.n	800a1ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6a1b      	ldr	r3, [r3, #32]
 800a1b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	881b      	ldrh	r3, [r3, #0]
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a1c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a1b      	ldr	r3, [r3, #32]
 800a1c6:	1c9a      	adds	r2, r3, #2
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	621a      	str	r2, [r3, #32]
 800a1cc:	e008      	b.n	800a1e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6a1b      	ldr	r3, [r3, #32]
 800a1d2:	1c59      	adds	r1, r3, #1
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	6211      	str	r1, [r2, #32]
 800a1d8:	781a      	ldrb	r2, [r3, #0]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	3b01      	subs	r3, #1
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d10f      	bne.n	800a214 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	68da      	ldr	r2, [r3, #12]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a202:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	68da      	ldr	r2, [r3, #12]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a212:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a214:	2300      	movs	r3, #0
 800a216:	e000      	b.n	800a21a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a218:	2302      	movs	r3, #2
  }
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3714      	adds	r7, #20
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr

0800a226 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b082      	sub	sp, #8
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	68da      	ldr	r2, [r3, #12]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a23c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2220      	movs	r2, #32
 800a242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f7fa fa0c 	bl	8004664 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a24c:	2300      	movs	r3, #0
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3708      	adds	r7, #8
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a256:	b580      	push	{r7, lr}
 800a258:	b08c      	sub	sp, #48	@ 0x30
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a264:	b2db      	uxtb	r3, r3
 800a266:	2b22      	cmp	r3, #34	@ 0x22
 800a268:	f040 80ae 	bne.w	800a3c8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	689b      	ldr	r3, [r3, #8]
 800a270:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a274:	d117      	bne.n	800a2a6 <UART_Receive_IT+0x50>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	691b      	ldr	r3, [r3, #16]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d113      	bne.n	800a2a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a27e:	2300      	movs	r3, #0
 800a280:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a286:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	b29b      	uxth	r3, r3
 800a290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a294:	b29a      	uxth	r2, r3
 800a296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a298:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a29e:	1c9a      	adds	r2, r3, #2
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	629a      	str	r2, [r3, #40]	@ 0x28
 800a2a4:	e026      	b.n	800a2f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2b8:	d007      	beq.n	800a2ca <UART_Receive_IT+0x74>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d10a      	bne.n	800a2d8 <UART_Receive_IT+0x82>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	691b      	ldr	r3, [r3, #16]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d106      	bne.n	800a2d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	b2da      	uxtb	r2, r3
 800a2d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2d4:	701a      	strb	r2, [r3, #0]
 800a2d6:	e008      	b.n	800a2ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2e4:	b2da      	uxtb	r2, r3
 800a2e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2ee:	1c5a      	adds	r2, r3, #1
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	4619      	mov	r1, r3
 800a302:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a304:	2b00      	cmp	r3, #0
 800a306:	d15d      	bne.n	800a3c4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	68da      	ldr	r2, [r3, #12]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f022 0220 	bic.w	r2, r2, #32
 800a316:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	68da      	ldr	r2, [r3, #12]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a326:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	695a      	ldr	r2, [r3, #20]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f022 0201 	bic.w	r2, r2, #1
 800a336:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2220      	movs	r2, #32
 800a33c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d135      	bne.n	800a3ba <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2200      	movs	r2, #0
 800a352:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	330c      	adds	r3, #12
 800a35a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	e853 3f00 	ldrex	r3, [r3]
 800a362:	613b      	str	r3, [r7, #16]
   return(result);
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	f023 0310 	bic.w	r3, r3, #16
 800a36a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	330c      	adds	r3, #12
 800a372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a374:	623a      	str	r2, [r7, #32]
 800a376:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a378:	69f9      	ldr	r1, [r7, #28]
 800a37a:	6a3a      	ldr	r2, [r7, #32]
 800a37c:	e841 2300 	strex	r3, r2, [r1]
 800a380:	61bb      	str	r3, [r7, #24]
   return(result);
 800a382:	69bb      	ldr	r3, [r7, #24]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d1e5      	bne.n	800a354 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f003 0310 	and.w	r3, r3, #16
 800a392:	2b10      	cmp	r3, #16
 800a394:	d10a      	bne.n	800a3ac <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a396:	2300      	movs	r3, #0
 800a398:	60fb      	str	r3, [r7, #12]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	60fb      	str	r3, [r7, #12]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	60fb      	str	r3, [r7, #12]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f7ff fc48 	bl	8009c48 <HAL_UARTEx_RxEventCallback>
 800a3b8:	e002      	b.n	800a3c0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f7fa f96a 	bl	8004694 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	e002      	b.n	800a3ca <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	e000      	b.n	800a3ca <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a3c8:	2302      	movs	r3, #2
  }
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3730      	adds	r7, #48	@ 0x30
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
	...

0800a3d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a3d8:	b0c0      	sub	sp, #256	@ 0x100
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a3e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	691b      	ldr	r3, [r3, #16]
 800a3e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a3ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a3f0:	68d9      	ldr	r1, [r3, #12]
 800a3f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	ea40 0301 	orr.w	r3, r0, r1
 800a3fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a3fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a402:	689a      	ldr	r2, [r3, #8]
 800a404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a408:	691b      	ldr	r3, [r3, #16]
 800a40a:	431a      	orrs	r2, r3
 800a40c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a410:	695b      	ldr	r3, [r3, #20]
 800a412:	431a      	orrs	r2, r3
 800a414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a418:	69db      	ldr	r3, [r3, #28]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a42c:	f021 010c 	bic.w	r1, r1, #12
 800a430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a434:	681a      	ldr	r2, [r3, #0]
 800a436:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a43a:	430b      	orrs	r3, r1
 800a43c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a43e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	695b      	ldr	r3, [r3, #20]
 800a446:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a44a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a44e:	6999      	ldr	r1, [r3, #24]
 800a450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a454:	681a      	ldr	r2, [r3, #0]
 800a456:	ea40 0301 	orr.w	r3, r0, r1
 800a45a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a45c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	4b8f      	ldr	r3, [pc, #572]	@ (800a6a0 <UART_SetConfig+0x2cc>)
 800a464:	429a      	cmp	r2, r3
 800a466:	d005      	beq.n	800a474 <UART_SetConfig+0xa0>
 800a468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	4b8d      	ldr	r3, [pc, #564]	@ (800a6a4 <UART_SetConfig+0x2d0>)
 800a470:	429a      	cmp	r2, r3
 800a472:	d104      	bne.n	800a47e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a474:	f7fe faaa 	bl	80089cc <HAL_RCC_GetPCLK2Freq>
 800a478:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a47c:	e003      	b.n	800a486 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a47e:	f7fe fa91 	bl	80089a4 <HAL_RCC_GetPCLK1Freq>
 800a482:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a48a:	69db      	ldr	r3, [r3, #28]
 800a48c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a490:	f040 810c 	bne.w	800a6ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a498:	2200      	movs	r2, #0
 800a49a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a49e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a4a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a4a6:	4622      	mov	r2, r4
 800a4a8:	462b      	mov	r3, r5
 800a4aa:	1891      	adds	r1, r2, r2
 800a4ac:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a4ae:	415b      	adcs	r3, r3
 800a4b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a4b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a4b6:	4621      	mov	r1, r4
 800a4b8:	eb12 0801 	adds.w	r8, r2, r1
 800a4bc:	4629      	mov	r1, r5
 800a4be:	eb43 0901 	adc.w	r9, r3, r1
 800a4c2:	f04f 0200 	mov.w	r2, #0
 800a4c6:	f04f 0300 	mov.w	r3, #0
 800a4ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a4ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a4d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a4d6:	4690      	mov	r8, r2
 800a4d8:	4699      	mov	r9, r3
 800a4da:	4623      	mov	r3, r4
 800a4dc:	eb18 0303 	adds.w	r3, r8, r3
 800a4e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a4e4:	462b      	mov	r3, r5
 800a4e6:	eb49 0303 	adc.w	r3, r9, r3
 800a4ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a4ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a4fa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a4fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a502:	460b      	mov	r3, r1
 800a504:	18db      	adds	r3, r3, r3
 800a506:	653b      	str	r3, [r7, #80]	@ 0x50
 800a508:	4613      	mov	r3, r2
 800a50a:	eb42 0303 	adc.w	r3, r2, r3
 800a50e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a510:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a514:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a518:	f7f6 fbe6 	bl	8000ce8 <__aeabi_uldivmod>
 800a51c:	4602      	mov	r2, r0
 800a51e:	460b      	mov	r3, r1
 800a520:	4b61      	ldr	r3, [pc, #388]	@ (800a6a8 <UART_SetConfig+0x2d4>)
 800a522:	fba3 2302 	umull	r2, r3, r3, r2
 800a526:	095b      	lsrs	r3, r3, #5
 800a528:	011c      	lsls	r4, r3, #4
 800a52a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a52e:	2200      	movs	r2, #0
 800a530:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a534:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a538:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a53c:	4642      	mov	r2, r8
 800a53e:	464b      	mov	r3, r9
 800a540:	1891      	adds	r1, r2, r2
 800a542:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a544:	415b      	adcs	r3, r3
 800a546:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a548:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a54c:	4641      	mov	r1, r8
 800a54e:	eb12 0a01 	adds.w	sl, r2, r1
 800a552:	4649      	mov	r1, r9
 800a554:	eb43 0b01 	adc.w	fp, r3, r1
 800a558:	f04f 0200 	mov.w	r2, #0
 800a55c:	f04f 0300 	mov.w	r3, #0
 800a560:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a564:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a568:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a56c:	4692      	mov	sl, r2
 800a56e:	469b      	mov	fp, r3
 800a570:	4643      	mov	r3, r8
 800a572:	eb1a 0303 	adds.w	r3, sl, r3
 800a576:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a57a:	464b      	mov	r3, r9
 800a57c:	eb4b 0303 	adc.w	r3, fp, r3
 800a580:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	2200      	movs	r2, #0
 800a58c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a590:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a594:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a598:	460b      	mov	r3, r1
 800a59a:	18db      	adds	r3, r3, r3
 800a59c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a59e:	4613      	mov	r3, r2
 800a5a0:	eb42 0303 	adc.w	r3, r2, r3
 800a5a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a5a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a5aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a5ae:	f7f6 fb9b 	bl	8000ce8 <__aeabi_uldivmod>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	4611      	mov	r1, r2
 800a5b8:	4b3b      	ldr	r3, [pc, #236]	@ (800a6a8 <UART_SetConfig+0x2d4>)
 800a5ba:	fba3 2301 	umull	r2, r3, r3, r1
 800a5be:	095b      	lsrs	r3, r3, #5
 800a5c0:	2264      	movs	r2, #100	@ 0x64
 800a5c2:	fb02 f303 	mul.w	r3, r2, r3
 800a5c6:	1acb      	subs	r3, r1, r3
 800a5c8:	00db      	lsls	r3, r3, #3
 800a5ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a5ce:	4b36      	ldr	r3, [pc, #216]	@ (800a6a8 <UART_SetConfig+0x2d4>)
 800a5d0:	fba3 2302 	umull	r2, r3, r3, r2
 800a5d4:	095b      	lsrs	r3, r3, #5
 800a5d6:	005b      	lsls	r3, r3, #1
 800a5d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a5dc:	441c      	add	r4, r3
 800a5de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a5e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a5ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a5f0:	4642      	mov	r2, r8
 800a5f2:	464b      	mov	r3, r9
 800a5f4:	1891      	adds	r1, r2, r2
 800a5f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a5f8:	415b      	adcs	r3, r3
 800a5fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a600:	4641      	mov	r1, r8
 800a602:	1851      	adds	r1, r2, r1
 800a604:	6339      	str	r1, [r7, #48]	@ 0x30
 800a606:	4649      	mov	r1, r9
 800a608:	414b      	adcs	r3, r1
 800a60a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a60c:	f04f 0200 	mov.w	r2, #0
 800a610:	f04f 0300 	mov.w	r3, #0
 800a614:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a618:	4659      	mov	r1, fp
 800a61a:	00cb      	lsls	r3, r1, #3
 800a61c:	4651      	mov	r1, sl
 800a61e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a622:	4651      	mov	r1, sl
 800a624:	00ca      	lsls	r2, r1, #3
 800a626:	4610      	mov	r0, r2
 800a628:	4619      	mov	r1, r3
 800a62a:	4603      	mov	r3, r0
 800a62c:	4642      	mov	r2, r8
 800a62e:	189b      	adds	r3, r3, r2
 800a630:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a634:	464b      	mov	r3, r9
 800a636:	460a      	mov	r2, r1
 800a638:	eb42 0303 	adc.w	r3, r2, r3
 800a63c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a64c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a650:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a654:	460b      	mov	r3, r1
 800a656:	18db      	adds	r3, r3, r3
 800a658:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a65a:	4613      	mov	r3, r2
 800a65c:	eb42 0303 	adc.w	r3, r2, r3
 800a660:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a662:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a666:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a66a:	f7f6 fb3d 	bl	8000ce8 <__aeabi_uldivmod>
 800a66e:	4602      	mov	r2, r0
 800a670:	460b      	mov	r3, r1
 800a672:	4b0d      	ldr	r3, [pc, #52]	@ (800a6a8 <UART_SetConfig+0x2d4>)
 800a674:	fba3 1302 	umull	r1, r3, r3, r2
 800a678:	095b      	lsrs	r3, r3, #5
 800a67a:	2164      	movs	r1, #100	@ 0x64
 800a67c:	fb01 f303 	mul.w	r3, r1, r3
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	00db      	lsls	r3, r3, #3
 800a684:	3332      	adds	r3, #50	@ 0x32
 800a686:	4a08      	ldr	r2, [pc, #32]	@ (800a6a8 <UART_SetConfig+0x2d4>)
 800a688:	fba2 2303 	umull	r2, r3, r2, r3
 800a68c:	095b      	lsrs	r3, r3, #5
 800a68e:	f003 0207 	and.w	r2, r3, #7
 800a692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4422      	add	r2, r4
 800a69a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a69c:	e106      	b.n	800a8ac <UART_SetConfig+0x4d8>
 800a69e:	bf00      	nop
 800a6a0:	40011000 	.word	0x40011000
 800a6a4:	40011400 	.word	0x40011400
 800a6a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a6ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a6b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a6ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a6be:	4642      	mov	r2, r8
 800a6c0:	464b      	mov	r3, r9
 800a6c2:	1891      	adds	r1, r2, r2
 800a6c4:	6239      	str	r1, [r7, #32]
 800a6c6:	415b      	adcs	r3, r3
 800a6c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a6ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a6ce:	4641      	mov	r1, r8
 800a6d0:	1854      	adds	r4, r2, r1
 800a6d2:	4649      	mov	r1, r9
 800a6d4:	eb43 0501 	adc.w	r5, r3, r1
 800a6d8:	f04f 0200 	mov.w	r2, #0
 800a6dc:	f04f 0300 	mov.w	r3, #0
 800a6e0:	00eb      	lsls	r3, r5, #3
 800a6e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a6e6:	00e2      	lsls	r2, r4, #3
 800a6e8:	4614      	mov	r4, r2
 800a6ea:	461d      	mov	r5, r3
 800a6ec:	4643      	mov	r3, r8
 800a6ee:	18e3      	adds	r3, r4, r3
 800a6f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a6f4:	464b      	mov	r3, r9
 800a6f6:	eb45 0303 	adc.w	r3, r5, r3
 800a6fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a6fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a70a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a70e:	f04f 0200 	mov.w	r2, #0
 800a712:	f04f 0300 	mov.w	r3, #0
 800a716:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a71a:	4629      	mov	r1, r5
 800a71c:	008b      	lsls	r3, r1, #2
 800a71e:	4621      	mov	r1, r4
 800a720:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a724:	4621      	mov	r1, r4
 800a726:	008a      	lsls	r2, r1, #2
 800a728:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a72c:	f7f6 fadc 	bl	8000ce8 <__aeabi_uldivmod>
 800a730:	4602      	mov	r2, r0
 800a732:	460b      	mov	r3, r1
 800a734:	4b60      	ldr	r3, [pc, #384]	@ (800a8b8 <UART_SetConfig+0x4e4>)
 800a736:	fba3 2302 	umull	r2, r3, r3, r2
 800a73a:	095b      	lsrs	r3, r3, #5
 800a73c:	011c      	lsls	r4, r3, #4
 800a73e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a742:	2200      	movs	r2, #0
 800a744:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a748:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a74c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a750:	4642      	mov	r2, r8
 800a752:	464b      	mov	r3, r9
 800a754:	1891      	adds	r1, r2, r2
 800a756:	61b9      	str	r1, [r7, #24]
 800a758:	415b      	adcs	r3, r3
 800a75a:	61fb      	str	r3, [r7, #28]
 800a75c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a760:	4641      	mov	r1, r8
 800a762:	1851      	adds	r1, r2, r1
 800a764:	6139      	str	r1, [r7, #16]
 800a766:	4649      	mov	r1, r9
 800a768:	414b      	adcs	r3, r1
 800a76a:	617b      	str	r3, [r7, #20]
 800a76c:	f04f 0200 	mov.w	r2, #0
 800a770:	f04f 0300 	mov.w	r3, #0
 800a774:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a778:	4659      	mov	r1, fp
 800a77a:	00cb      	lsls	r3, r1, #3
 800a77c:	4651      	mov	r1, sl
 800a77e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a782:	4651      	mov	r1, sl
 800a784:	00ca      	lsls	r2, r1, #3
 800a786:	4610      	mov	r0, r2
 800a788:	4619      	mov	r1, r3
 800a78a:	4603      	mov	r3, r0
 800a78c:	4642      	mov	r2, r8
 800a78e:	189b      	adds	r3, r3, r2
 800a790:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a794:	464b      	mov	r3, r9
 800a796:	460a      	mov	r2, r1
 800a798:	eb42 0303 	adc.w	r3, r2, r3
 800a79c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a7a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a7aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a7ac:	f04f 0200 	mov.w	r2, #0
 800a7b0:	f04f 0300 	mov.w	r3, #0
 800a7b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a7b8:	4649      	mov	r1, r9
 800a7ba:	008b      	lsls	r3, r1, #2
 800a7bc:	4641      	mov	r1, r8
 800a7be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a7c2:	4641      	mov	r1, r8
 800a7c4:	008a      	lsls	r2, r1, #2
 800a7c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a7ca:	f7f6 fa8d 	bl	8000ce8 <__aeabi_uldivmod>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	4611      	mov	r1, r2
 800a7d4:	4b38      	ldr	r3, [pc, #224]	@ (800a8b8 <UART_SetConfig+0x4e4>)
 800a7d6:	fba3 2301 	umull	r2, r3, r3, r1
 800a7da:	095b      	lsrs	r3, r3, #5
 800a7dc:	2264      	movs	r2, #100	@ 0x64
 800a7de:	fb02 f303 	mul.w	r3, r2, r3
 800a7e2:	1acb      	subs	r3, r1, r3
 800a7e4:	011b      	lsls	r3, r3, #4
 800a7e6:	3332      	adds	r3, #50	@ 0x32
 800a7e8:	4a33      	ldr	r2, [pc, #204]	@ (800a8b8 <UART_SetConfig+0x4e4>)
 800a7ea:	fba2 2303 	umull	r2, r3, r2, r3
 800a7ee:	095b      	lsrs	r3, r3, #5
 800a7f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a7f4:	441c      	add	r4, r3
 800a7f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	673b      	str	r3, [r7, #112]	@ 0x70
 800a7fe:	677a      	str	r2, [r7, #116]	@ 0x74
 800a800:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a804:	4642      	mov	r2, r8
 800a806:	464b      	mov	r3, r9
 800a808:	1891      	adds	r1, r2, r2
 800a80a:	60b9      	str	r1, [r7, #8]
 800a80c:	415b      	adcs	r3, r3
 800a80e:	60fb      	str	r3, [r7, #12]
 800a810:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a814:	4641      	mov	r1, r8
 800a816:	1851      	adds	r1, r2, r1
 800a818:	6039      	str	r1, [r7, #0]
 800a81a:	4649      	mov	r1, r9
 800a81c:	414b      	adcs	r3, r1
 800a81e:	607b      	str	r3, [r7, #4]
 800a820:	f04f 0200 	mov.w	r2, #0
 800a824:	f04f 0300 	mov.w	r3, #0
 800a828:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a82c:	4659      	mov	r1, fp
 800a82e:	00cb      	lsls	r3, r1, #3
 800a830:	4651      	mov	r1, sl
 800a832:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a836:	4651      	mov	r1, sl
 800a838:	00ca      	lsls	r2, r1, #3
 800a83a:	4610      	mov	r0, r2
 800a83c:	4619      	mov	r1, r3
 800a83e:	4603      	mov	r3, r0
 800a840:	4642      	mov	r2, r8
 800a842:	189b      	adds	r3, r3, r2
 800a844:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a846:	464b      	mov	r3, r9
 800a848:	460a      	mov	r2, r1
 800a84a:	eb42 0303 	adc.w	r3, r2, r3
 800a84e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	663b      	str	r3, [r7, #96]	@ 0x60
 800a85a:	667a      	str	r2, [r7, #100]	@ 0x64
 800a85c:	f04f 0200 	mov.w	r2, #0
 800a860:	f04f 0300 	mov.w	r3, #0
 800a864:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a868:	4649      	mov	r1, r9
 800a86a:	008b      	lsls	r3, r1, #2
 800a86c:	4641      	mov	r1, r8
 800a86e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a872:	4641      	mov	r1, r8
 800a874:	008a      	lsls	r2, r1, #2
 800a876:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a87a:	f7f6 fa35 	bl	8000ce8 <__aeabi_uldivmod>
 800a87e:	4602      	mov	r2, r0
 800a880:	460b      	mov	r3, r1
 800a882:	4b0d      	ldr	r3, [pc, #52]	@ (800a8b8 <UART_SetConfig+0x4e4>)
 800a884:	fba3 1302 	umull	r1, r3, r3, r2
 800a888:	095b      	lsrs	r3, r3, #5
 800a88a:	2164      	movs	r1, #100	@ 0x64
 800a88c:	fb01 f303 	mul.w	r3, r1, r3
 800a890:	1ad3      	subs	r3, r2, r3
 800a892:	011b      	lsls	r3, r3, #4
 800a894:	3332      	adds	r3, #50	@ 0x32
 800a896:	4a08      	ldr	r2, [pc, #32]	@ (800a8b8 <UART_SetConfig+0x4e4>)
 800a898:	fba2 2303 	umull	r2, r3, r2, r3
 800a89c:	095b      	lsrs	r3, r3, #5
 800a89e:	f003 020f 	and.w	r2, r3, #15
 800a8a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4422      	add	r2, r4
 800a8aa:	609a      	str	r2, [r3, #8]
}
 800a8ac:	bf00      	nop
 800a8ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a8b8:	51eb851f 	.word	0x51eb851f

0800a8bc <realloc>:
 800a8bc:	4b02      	ldr	r3, [pc, #8]	@ (800a8c8 <realloc+0xc>)
 800a8be:	460a      	mov	r2, r1
 800a8c0:	4601      	mov	r1, r0
 800a8c2:	6818      	ldr	r0, [r3, #0]
 800a8c4:	f000 b802 	b.w	800a8cc <_realloc_r>
 800a8c8:	20000024 	.word	0x20000024

0800a8cc <_realloc_r>:
 800a8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8d0:	4680      	mov	r8, r0
 800a8d2:	4615      	mov	r5, r2
 800a8d4:	460c      	mov	r4, r1
 800a8d6:	b921      	cbnz	r1, 800a8e2 <_realloc_r+0x16>
 800a8d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8dc:	4611      	mov	r1, r2
 800a8de:	f000 bb23 	b.w	800af28 <_malloc_r>
 800a8e2:	b92a      	cbnz	r2, 800a8f0 <_realloc_r+0x24>
 800a8e4:	f000 fab4 	bl	800ae50 <_free_r>
 800a8e8:	2400      	movs	r4, #0
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8f0:	f000 fba6 	bl	800b040 <_malloc_usable_size_r>
 800a8f4:	4285      	cmp	r5, r0
 800a8f6:	4606      	mov	r6, r0
 800a8f8:	d802      	bhi.n	800a900 <_realloc_r+0x34>
 800a8fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a8fe:	d8f4      	bhi.n	800a8ea <_realloc_r+0x1e>
 800a900:	4629      	mov	r1, r5
 800a902:	4640      	mov	r0, r8
 800a904:	f000 fb10 	bl	800af28 <_malloc_r>
 800a908:	4607      	mov	r7, r0
 800a90a:	2800      	cmp	r0, #0
 800a90c:	d0ec      	beq.n	800a8e8 <_realloc_r+0x1c>
 800a90e:	42b5      	cmp	r5, r6
 800a910:	462a      	mov	r2, r5
 800a912:	4621      	mov	r1, r4
 800a914:	bf28      	it	cs
 800a916:	4632      	movcs	r2, r6
 800a918:	f000 fa8b 	bl	800ae32 <memcpy>
 800a91c:	4621      	mov	r1, r4
 800a91e:	4640      	mov	r0, r8
 800a920:	f000 fa96 	bl	800ae50 <_free_r>
 800a924:	463c      	mov	r4, r7
 800a926:	e7e0      	b.n	800a8ea <_realloc_r+0x1e>

0800a928 <std>:
 800a928:	2300      	movs	r3, #0
 800a92a:	b510      	push	{r4, lr}
 800a92c:	4604      	mov	r4, r0
 800a92e:	e9c0 3300 	strd	r3, r3, [r0]
 800a932:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a936:	6083      	str	r3, [r0, #8]
 800a938:	8181      	strh	r1, [r0, #12]
 800a93a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a93c:	81c2      	strh	r2, [r0, #14]
 800a93e:	6183      	str	r3, [r0, #24]
 800a940:	4619      	mov	r1, r3
 800a942:	2208      	movs	r2, #8
 800a944:	305c      	adds	r0, #92	@ 0x5c
 800a946:	f000 f9f9 	bl	800ad3c <memset>
 800a94a:	4b0d      	ldr	r3, [pc, #52]	@ (800a980 <std+0x58>)
 800a94c:	6263      	str	r3, [r4, #36]	@ 0x24
 800a94e:	4b0d      	ldr	r3, [pc, #52]	@ (800a984 <std+0x5c>)
 800a950:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a952:	4b0d      	ldr	r3, [pc, #52]	@ (800a988 <std+0x60>)
 800a954:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a956:	4b0d      	ldr	r3, [pc, #52]	@ (800a98c <std+0x64>)
 800a958:	6323      	str	r3, [r4, #48]	@ 0x30
 800a95a:	4b0d      	ldr	r3, [pc, #52]	@ (800a990 <std+0x68>)
 800a95c:	6224      	str	r4, [r4, #32]
 800a95e:	429c      	cmp	r4, r3
 800a960:	d006      	beq.n	800a970 <std+0x48>
 800a962:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a966:	4294      	cmp	r4, r2
 800a968:	d002      	beq.n	800a970 <std+0x48>
 800a96a:	33d0      	adds	r3, #208	@ 0xd0
 800a96c:	429c      	cmp	r4, r3
 800a96e:	d105      	bne.n	800a97c <std+0x54>
 800a970:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a978:	f000 ba58 	b.w	800ae2c <__retarget_lock_init_recursive>
 800a97c:	bd10      	pop	{r4, pc}
 800a97e:	bf00      	nop
 800a980:	0800ab8d 	.word	0x0800ab8d
 800a984:	0800abaf 	.word	0x0800abaf
 800a988:	0800abe7 	.word	0x0800abe7
 800a98c:	0800ac0b 	.word	0x0800ac0b
 800a990:	20000e74 	.word	0x20000e74

0800a994 <stdio_exit_handler>:
 800a994:	4a02      	ldr	r2, [pc, #8]	@ (800a9a0 <stdio_exit_handler+0xc>)
 800a996:	4903      	ldr	r1, [pc, #12]	@ (800a9a4 <stdio_exit_handler+0x10>)
 800a998:	4803      	ldr	r0, [pc, #12]	@ (800a9a8 <stdio_exit_handler+0x14>)
 800a99a:	f000 b869 	b.w	800aa70 <_fwalk_sglue>
 800a99e:	bf00      	nop
 800a9a0:	20000018 	.word	0x20000018
 800a9a4:	0800b6f9 	.word	0x0800b6f9
 800a9a8:	20000028 	.word	0x20000028

0800a9ac <cleanup_stdio>:
 800a9ac:	6841      	ldr	r1, [r0, #4]
 800a9ae:	4b0c      	ldr	r3, [pc, #48]	@ (800a9e0 <cleanup_stdio+0x34>)
 800a9b0:	4299      	cmp	r1, r3
 800a9b2:	b510      	push	{r4, lr}
 800a9b4:	4604      	mov	r4, r0
 800a9b6:	d001      	beq.n	800a9bc <cleanup_stdio+0x10>
 800a9b8:	f000 fe9e 	bl	800b6f8 <_fflush_r>
 800a9bc:	68a1      	ldr	r1, [r4, #8]
 800a9be:	4b09      	ldr	r3, [pc, #36]	@ (800a9e4 <cleanup_stdio+0x38>)
 800a9c0:	4299      	cmp	r1, r3
 800a9c2:	d002      	beq.n	800a9ca <cleanup_stdio+0x1e>
 800a9c4:	4620      	mov	r0, r4
 800a9c6:	f000 fe97 	bl	800b6f8 <_fflush_r>
 800a9ca:	68e1      	ldr	r1, [r4, #12]
 800a9cc:	4b06      	ldr	r3, [pc, #24]	@ (800a9e8 <cleanup_stdio+0x3c>)
 800a9ce:	4299      	cmp	r1, r3
 800a9d0:	d004      	beq.n	800a9dc <cleanup_stdio+0x30>
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9d8:	f000 be8e 	b.w	800b6f8 <_fflush_r>
 800a9dc:	bd10      	pop	{r4, pc}
 800a9de:	bf00      	nop
 800a9e0:	20000e74 	.word	0x20000e74
 800a9e4:	20000edc 	.word	0x20000edc
 800a9e8:	20000f44 	.word	0x20000f44

0800a9ec <global_stdio_init.part.0>:
 800a9ec:	b510      	push	{r4, lr}
 800a9ee:	4b0b      	ldr	r3, [pc, #44]	@ (800aa1c <global_stdio_init.part.0+0x30>)
 800a9f0:	4c0b      	ldr	r4, [pc, #44]	@ (800aa20 <global_stdio_init.part.0+0x34>)
 800a9f2:	4a0c      	ldr	r2, [pc, #48]	@ (800aa24 <global_stdio_init.part.0+0x38>)
 800a9f4:	601a      	str	r2, [r3, #0]
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	2104      	movs	r1, #4
 800a9fc:	f7ff ff94 	bl	800a928 <std>
 800aa00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aa04:	2201      	movs	r2, #1
 800aa06:	2109      	movs	r1, #9
 800aa08:	f7ff ff8e 	bl	800a928 <std>
 800aa0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aa10:	2202      	movs	r2, #2
 800aa12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa16:	2112      	movs	r1, #18
 800aa18:	f7ff bf86 	b.w	800a928 <std>
 800aa1c:	20000fac 	.word	0x20000fac
 800aa20:	20000e74 	.word	0x20000e74
 800aa24:	0800a995 	.word	0x0800a995

0800aa28 <__sfp_lock_acquire>:
 800aa28:	4801      	ldr	r0, [pc, #4]	@ (800aa30 <__sfp_lock_acquire+0x8>)
 800aa2a:	f000 ba00 	b.w	800ae2e <__retarget_lock_acquire_recursive>
 800aa2e:	bf00      	nop
 800aa30:	20000fb5 	.word	0x20000fb5

0800aa34 <__sfp_lock_release>:
 800aa34:	4801      	ldr	r0, [pc, #4]	@ (800aa3c <__sfp_lock_release+0x8>)
 800aa36:	f000 b9fb 	b.w	800ae30 <__retarget_lock_release_recursive>
 800aa3a:	bf00      	nop
 800aa3c:	20000fb5 	.word	0x20000fb5

0800aa40 <__sinit>:
 800aa40:	b510      	push	{r4, lr}
 800aa42:	4604      	mov	r4, r0
 800aa44:	f7ff fff0 	bl	800aa28 <__sfp_lock_acquire>
 800aa48:	6a23      	ldr	r3, [r4, #32]
 800aa4a:	b11b      	cbz	r3, 800aa54 <__sinit+0x14>
 800aa4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa50:	f7ff bff0 	b.w	800aa34 <__sfp_lock_release>
 800aa54:	4b04      	ldr	r3, [pc, #16]	@ (800aa68 <__sinit+0x28>)
 800aa56:	6223      	str	r3, [r4, #32]
 800aa58:	4b04      	ldr	r3, [pc, #16]	@ (800aa6c <__sinit+0x2c>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d1f5      	bne.n	800aa4c <__sinit+0xc>
 800aa60:	f7ff ffc4 	bl	800a9ec <global_stdio_init.part.0>
 800aa64:	e7f2      	b.n	800aa4c <__sinit+0xc>
 800aa66:	bf00      	nop
 800aa68:	0800a9ad 	.word	0x0800a9ad
 800aa6c:	20000fac 	.word	0x20000fac

0800aa70 <_fwalk_sglue>:
 800aa70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa74:	4607      	mov	r7, r0
 800aa76:	4688      	mov	r8, r1
 800aa78:	4614      	mov	r4, r2
 800aa7a:	2600      	movs	r6, #0
 800aa7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa80:	f1b9 0901 	subs.w	r9, r9, #1
 800aa84:	d505      	bpl.n	800aa92 <_fwalk_sglue+0x22>
 800aa86:	6824      	ldr	r4, [r4, #0]
 800aa88:	2c00      	cmp	r4, #0
 800aa8a:	d1f7      	bne.n	800aa7c <_fwalk_sglue+0xc>
 800aa8c:	4630      	mov	r0, r6
 800aa8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa92:	89ab      	ldrh	r3, [r5, #12]
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d907      	bls.n	800aaa8 <_fwalk_sglue+0x38>
 800aa98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	d003      	beq.n	800aaa8 <_fwalk_sglue+0x38>
 800aaa0:	4629      	mov	r1, r5
 800aaa2:	4638      	mov	r0, r7
 800aaa4:	47c0      	blx	r8
 800aaa6:	4306      	orrs	r6, r0
 800aaa8:	3568      	adds	r5, #104	@ 0x68
 800aaaa:	e7e9      	b.n	800aa80 <_fwalk_sglue+0x10>

0800aaac <iprintf>:
 800aaac:	b40f      	push	{r0, r1, r2, r3}
 800aaae:	b507      	push	{r0, r1, r2, lr}
 800aab0:	4906      	ldr	r1, [pc, #24]	@ (800aacc <iprintf+0x20>)
 800aab2:	ab04      	add	r3, sp, #16
 800aab4:	6808      	ldr	r0, [r1, #0]
 800aab6:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaba:	6881      	ldr	r1, [r0, #8]
 800aabc:	9301      	str	r3, [sp, #4]
 800aabe:	f000 faf1 	bl	800b0a4 <_vfiprintf_r>
 800aac2:	b003      	add	sp, #12
 800aac4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aac8:	b004      	add	sp, #16
 800aaca:	4770      	bx	lr
 800aacc:	20000024 	.word	0x20000024

0800aad0 <_puts_r>:
 800aad0:	6a03      	ldr	r3, [r0, #32]
 800aad2:	b570      	push	{r4, r5, r6, lr}
 800aad4:	6884      	ldr	r4, [r0, #8]
 800aad6:	4605      	mov	r5, r0
 800aad8:	460e      	mov	r6, r1
 800aada:	b90b      	cbnz	r3, 800aae0 <_puts_r+0x10>
 800aadc:	f7ff ffb0 	bl	800aa40 <__sinit>
 800aae0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aae2:	07db      	lsls	r3, r3, #31
 800aae4:	d405      	bmi.n	800aaf2 <_puts_r+0x22>
 800aae6:	89a3      	ldrh	r3, [r4, #12]
 800aae8:	0598      	lsls	r0, r3, #22
 800aaea:	d402      	bmi.n	800aaf2 <_puts_r+0x22>
 800aaec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aaee:	f000 f99e 	bl	800ae2e <__retarget_lock_acquire_recursive>
 800aaf2:	89a3      	ldrh	r3, [r4, #12]
 800aaf4:	0719      	lsls	r1, r3, #28
 800aaf6:	d502      	bpl.n	800aafe <_puts_r+0x2e>
 800aaf8:	6923      	ldr	r3, [r4, #16]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d135      	bne.n	800ab6a <_puts_r+0x9a>
 800aafe:	4621      	mov	r1, r4
 800ab00:	4628      	mov	r0, r5
 800ab02:	f000 f8c5 	bl	800ac90 <__swsetup_r>
 800ab06:	b380      	cbz	r0, 800ab6a <_puts_r+0x9a>
 800ab08:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800ab0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab0e:	07da      	lsls	r2, r3, #31
 800ab10:	d405      	bmi.n	800ab1e <_puts_r+0x4e>
 800ab12:	89a3      	ldrh	r3, [r4, #12]
 800ab14:	059b      	lsls	r3, r3, #22
 800ab16:	d402      	bmi.n	800ab1e <_puts_r+0x4e>
 800ab18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab1a:	f000 f989 	bl	800ae30 <__retarget_lock_release_recursive>
 800ab1e:	4628      	mov	r0, r5
 800ab20:	bd70      	pop	{r4, r5, r6, pc}
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	da04      	bge.n	800ab30 <_puts_r+0x60>
 800ab26:	69a2      	ldr	r2, [r4, #24]
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	dc17      	bgt.n	800ab5c <_puts_r+0x8c>
 800ab2c:	290a      	cmp	r1, #10
 800ab2e:	d015      	beq.n	800ab5c <_puts_r+0x8c>
 800ab30:	6823      	ldr	r3, [r4, #0]
 800ab32:	1c5a      	adds	r2, r3, #1
 800ab34:	6022      	str	r2, [r4, #0]
 800ab36:	7019      	strb	r1, [r3, #0]
 800ab38:	68a3      	ldr	r3, [r4, #8]
 800ab3a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	60a3      	str	r3, [r4, #8]
 800ab42:	2900      	cmp	r1, #0
 800ab44:	d1ed      	bne.n	800ab22 <_puts_r+0x52>
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	da11      	bge.n	800ab6e <_puts_r+0x9e>
 800ab4a:	4622      	mov	r2, r4
 800ab4c:	210a      	movs	r1, #10
 800ab4e:	4628      	mov	r0, r5
 800ab50:	f000 f85f 	bl	800ac12 <__swbuf_r>
 800ab54:	3001      	adds	r0, #1
 800ab56:	d0d7      	beq.n	800ab08 <_puts_r+0x38>
 800ab58:	250a      	movs	r5, #10
 800ab5a:	e7d7      	b.n	800ab0c <_puts_r+0x3c>
 800ab5c:	4622      	mov	r2, r4
 800ab5e:	4628      	mov	r0, r5
 800ab60:	f000 f857 	bl	800ac12 <__swbuf_r>
 800ab64:	3001      	adds	r0, #1
 800ab66:	d1e7      	bne.n	800ab38 <_puts_r+0x68>
 800ab68:	e7ce      	b.n	800ab08 <_puts_r+0x38>
 800ab6a:	3e01      	subs	r6, #1
 800ab6c:	e7e4      	b.n	800ab38 <_puts_r+0x68>
 800ab6e:	6823      	ldr	r3, [r4, #0]
 800ab70:	1c5a      	adds	r2, r3, #1
 800ab72:	6022      	str	r2, [r4, #0]
 800ab74:	220a      	movs	r2, #10
 800ab76:	701a      	strb	r2, [r3, #0]
 800ab78:	e7ee      	b.n	800ab58 <_puts_r+0x88>
	...

0800ab7c <puts>:
 800ab7c:	4b02      	ldr	r3, [pc, #8]	@ (800ab88 <puts+0xc>)
 800ab7e:	4601      	mov	r1, r0
 800ab80:	6818      	ldr	r0, [r3, #0]
 800ab82:	f7ff bfa5 	b.w	800aad0 <_puts_r>
 800ab86:	bf00      	nop
 800ab88:	20000024 	.word	0x20000024

0800ab8c <__sread>:
 800ab8c:	b510      	push	{r4, lr}
 800ab8e:	460c      	mov	r4, r1
 800ab90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab94:	f000 f8fc 	bl	800ad90 <_read_r>
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	bfab      	itete	ge
 800ab9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ab9e:	89a3      	ldrhlt	r3, [r4, #12]
 800aba0:	181b      	addge	r3, r3, r0
 800aba2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aba6:	bfac      	ite	ge
 800aba8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800abaa:	81a3      	strhlt	r3, [r4, #12]
 800abac:	bd10      	pop	{r4, pc}

0800abae <__swrite>:
 800abae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abb2:	461f      	mov	r7, r3
 800abb4:	898b      	ldrh	r3, [r1, #12]
 800abb6:	05db      	lsls	r3, r3, #23
 800abb8:	4605      	mov	r5, r0
 800abba:	460c      	mov	r4, r1
 800abbc:	4616      	mov	r6, r2
 800abbe:	d505      	bpl.n	800abcc <__swrite+0x1e>
 800abc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abc4:	2302      	movs	r3, #2
 800abc6:	2200      	movs	r2, #0
 800abc8:	f000 f8d0 	bl	800ad6c <_lseek_r>
 800abcc:	89a3      	ldrh	r3, [r4, #12]
 800abce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800abd6:	81a3      	strh	r3, [r4, #12]
 800abd8:	4632      	mov	r2, r6
 800abda:	463b      	mov	r3, r7
 800abdc:	4628      	mov	r0, r5
 800abde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abe2:	f000 b8e7 	b.w	800adb4 <_write_r>

0800abe6 <__sseek>:
 800abe6:	b510      	push	{r4, lr}
 800abe8:	460c      	mov	r4, r1
 800abea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abee:	f000 f8bd 	bl	800ad6c <_lseek_r>
 800abf2:	1c43      	adds	r3, r0, #1
 800abf4:	89a3      	ldrh	r3, [r4, #12]
 800abf6:	bf15      	itete	ne
 800abf8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800abfa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800abfe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ac02:	81a3      	strheq	r3, [r4, #12]
 800ac04:	bf18      	it	ne
 800ac06:	81a3      	strhne	r3, [r4, #12]
 800ac08:	bd10      	pop	{r4, pc}

0800ac0a <__sclose>:
 800ac0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac0e:	f000 b89d 	b.w	800ad4c <_close_r>

0800ac12 <__swbuf_r>:
 800ac12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac14:	460e      	mov	r6, r1
 800ac16:	4614      	mov	r4, r2
 800ac18:	4605      	mov	r5, r0
 800ac1a:	b118      	cbz	r0, 800ac24 <__swbuf_r+0x12>
 800ac1c:	6a03      	ldr	r3, [r0, #32]
 800ac1e:	b90b      	cbnz	r3, 800ac24 <__swbuf_r+0x12>
 800ac20:	f7ff ff0e 	bl	800aa40 <__sinit>
 800ac24:	69a3      	ldr	r3, [r4, #24]
 800ac26:	60a3      	str	r3, [r4, #8]
 800ac28:	89a3      	ldrh	r3, [r4, #12]
 800ac2a:	071a      	lsls	r2, r3, #28
 800ac2c:	d501      	bpl.n	800ac32 <__swbuf_r+0x20>
 800ac2e:	6923      	ldr	r3, [r4, #16]
 800ac30:	b943      	cbnz	r3, 800ac44 <__swbuf_r+0x32>
 800ac32:	4621      	mov	r1, r4
 800ac34:	4628      	mov	r0, r5
 800ac36:	f000 f82b 	bl	800ac90 <__swsetup_r>
 800ac3a:	b118      	cbz	r0, 800ac44 <__swbuf_r+0x32>
 800ac3c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ac40:	4638      	mov	r0, r7
 800ac42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac44:	6823      	ldr	r3, [r4, #0]
 800ac46:	6922      	ldr	r2, [r4, #16]
 800ac48:	1a98      	subs	r0, r3, r2
 800ac4a:	6963      	ldr	r3, [r4, #20]
 800ac4c:	b2f6      	uxtb	r6, r6
 800ac4e:	4283      	cmp	r3, r0
 800ac50:	4637      	mov	r7, r6
 800ac52:	dc05      	bgt.n	800ac60 <__swbuf_r+0x4e>
 800ac54:	4621      	mov	r1, r4
 800ac56:	4628      	mov	r0, r5
 800ac58:	f000 fd4e 	bl	800b6f8 <_fflush_r>
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	d1ed      	bne.n	800ac3c <__swbuf_r+0x2a>
 800ac60:	68a3      	ldr	r3, [r4, #8]
 800ac62:	3b01      	subs	r3, #1
 800ac64:	60a3      	str	r3, [r4, #8]
 800ac66:	6823      	ldr	r3, [r4, #0]
 800ac68:	1c5a      	adds	r2, r3, #1
 800ac6a:	6022      	str	r2, [r4, #0]
 800ac6c:	701e      	strb	r6, [r3, #0]
 800ac6e:	6962      	ldr	r2, [r4, #20]
 800ac70:	1c43      	adds	r3, r0, #1
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d004      	beq.n	800ac80 <__swbuf_r+0x6e>
 800ac76:	89a3      	ldrh	r3, [r4, #12]
 800ac78:	07db      	lsls	r3, r3, #31
 800ac7a:	d5e1      	bpl.n	800ac40 <__swbuf_r+0x2e>
 800ac7c:	2e0a      	cmp	r6, #10
 800ac7e:	d1df      	bne.n	800ac40 <__swbuf_r+0x2e>
 800ac80:	4621      	mov	r1, r4
 800ac82:	4628      	mov	r0, r5
 800ac84:	f000 fd38 	bl	800b6f8 <_fflush_r>
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	d0d9      	beq.n	800ac40 <__swbuf_r+0x2e>
 800ac8c:	e7d6      	b.n	800ac3c <__swbuf_r+0x2a>
	...

0800ac90 <__swsetup_r>:
 800ac90:	b538      	push	{r3, r4, r5, lr}
 800ac92:	4b29      	ldr	r3, [pc, #164]	@ (800ad38 <__swsetup_r+0xa8>)
 800ac94:	4605      	mov	r5, r0
 800ac96:	6818      	ldr	r0, [r3, #0]
 800ac98:	460c      	mov	r4, r1
 800ac9a:	b118      	cbz	r0, 800aca4 <__swsetup_r+0x14>
 800ac9c:	6a03      	ldr	r3, [r0, #32]
 800ac9e:	b90b      	cbnz	r3, 800aca4 <__swsetup_r+0x14>
 800aca0:	f7ff fece 	bl	800aa40 <__sinit>
 800aca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aca8:	0719      	lsls	r1, r3, #28
 800acaa:	d422      	bmi.n	800acf2 <__swsetup_r+0x62>
 800acac:	06da      	lsls	r2, r3, #27
 800acae:	d407      	bmi.n	800acc0 <__swsetup_r+0x30>
 800acb0:	2209      	movs	r2, #9
 800acb2:	602a      	str	r2, [r5, #0]
 800acb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acb8:	81a3      	strh	r3, [r4, #12]
 800acba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800acbe:	e033      	b.n	800ad28 <__swsetup_r+0x98>
 800acc0:	0758      	lsls	r0, r3, #29
 800acc2:	d512      	bpl.n	800acea <__swsetup_r+0x5a>
 800acc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800acc6:	b141      	cbz	r1, 800acda <__swsetup_r+0x4a>
 800acc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800accc:	4299      	cmp	r1, r3
 800acce:	d002      	beq.n	800acd6 <__swsetup_r+0x46>
 800acd0:	4628      	mov	r0, r5
 800acd2:	f000 f8bd 	bl	800ae50 <_free_r>
 800acd6:	2300      	movs	r3, #0
 800acd8:	6363      	str	r3, [r4, #52]	@ 0x34
 800acda:	89a3      	ldrh	r3, [r4, #12]
 800acdc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ace0:	81a3      	strh	r3, [r4, #12]
 800ace2:	2300      	movs	r3, #0
 800ace4:	6063      	str	r3, [r4, #4]
 800ace6:	6923      	ldr	r3, [r4, #16]
 800ace8:	6023      	str	r3, [r4, #0]
 800acea:	89a3      	ldrh	r3, [r4, #12]
 800acec:	f043 0308 	orr.w	r3, r3, #8
 800acf0:	81a3      	strh	r3, [r4, #12]
 800acf2:	6923      	ldr	r3, [r4, #16]
 800acf4:	b94b      	cbnz	r3, 800ad0a <__swsetup_r+0x7a>
 800acf6:	89a3      	ldrh	r3, [r4, #12]
 800acf8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800acfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad00:	d003      	beq.n	800ad0a <__swsetup_r+0x7a>
 800ad02:	4621      	mov	r1, r4
 800ad04:	4628      	mov	r0, r5
 800ad06:	f000 fd45 	bl	800b794 <__smakebuf_r>
 800ad0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad0e:	f013 0201 	ands.w	r2, r3, #1
 800ad12:	d00a      	beq.n	800ad2a <__swsetup_r+0x9a>
 800ad14:	2200      	movs	r2, #0
 800ad16:	60a2      	str	r2, [r4, #8]
 800ad18:	6962      	ldr	r2, [r4, #20]
 800ad1a:	4252      	negs	r2, r2
 800ad1c:	61a2      	str	r2, [r4, #24]
 800ad1e:	6922      	ldr	r2, [r4, #16]
 800ad20:	b942      	cbnz	r2, 800ad34 <__swsetup_r+0xa4>
 800ad22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ad26:	d1c5      	bne.n	800acb4 <__swsetup_r+0x24>
 800ad28:	bd38      	pop	{r3, r4, r5, pc}
 800ad2a:	0799      	lsls	r1, r3, #30
 800ad2c:	bf58      	it	pl
 800ad2e:	6962      	ldrpl	r2, [r4, #20]
 800ad30:	60a2      	str	r2, [r4, #8]
 800ad32:	e7f4      	b.n	800ad1e <__swsetup_r+0x8e>
 800ad34:	2000      	movs	r0, #0
 800ad36:	e7f7      	b.n	800ad28 <__swsetup_r+0x98>
 800ad38:	20000024 	.word	0x20000024

0800ad3c <memset>:
 800ad3c:	4402      	add	r2, r0
 800ad3e:	4603      	mov	r3, r0
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d100      	bne.n	800ad46 <memset+0xa>
 800ad44:	4770      	bx	lr
 800ad46:	f803 1b01 	strb.w	r1, [r3], #1
 800ad4a:	e7f9      	b.n	800ad40 <memset+0x4>

0800ad4c <_close_r>:
 800ad4c:	b538      	push	{r3, r4, r5, lr}
 800ad4e:	4d06      	ldr	r5, [pc, #24]	@ (800ad68 <_close_r+0x1c>)
 800ad50:	2300      	movs	r3, #0
 800ad52:	4604      	mov	r4, r0
 800ad54:	4608      	mov	r0, r1
 800ad56:	602b      	str	r3, [r5, #0]
 800ad58:	f7fa feb5 	bl	8005ac6 <_close>
 800ad5c:	1c43      	adds	r3, r0, #1
 800ad5e:	d102      	bne.n	800ad66 <_close_r+0x1a>
 800ad60:	682b      	ldr	r3, [r5, #0]
 800ad62:	b103      	cbz	r3, 800ad66 <_close_r+0x1a>
 800ad64:	6023      	str	r3, [r4, #0]
 800ad66:	bd38      	pop	{r3, r4, r5, pc}
 800ad68:	20000fb0 	.word	0x20000fb0

0800ad6c <_lseek_r>:
 800ad6c:	b538      	push	{r3, r4, r5, lr}
 800ad6e:	4d07      	ldr	r5, [pc, #28]	@ (800ad8c <_lseek_r+0x20>)
 800ad70:	4604      	mov	r4, r0
 800ad72:	4608      	mov	r0, r1
 800ad74:	4611      	mov	r1, r2
 800ad76:	2200      	movs	r2, #0
 800ad78:	602a      	str	r2, [r5, #0]
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	f7fa feca 	bl	8005b14 <_lseek>
 800ad80:	1c43      	adds	r3, r0, #1
 800ad82:	d102      	bne.n	800ad8a <_lseek_r+0x1e>
 800ad84:	682b      	ldr	r3, [r5, #0]
 800ad86:	b103      	cbz	r3, 800ad8a <_lseek_r+0x1e>
 800ad88:	6023      	str	r3, [r4, #0]
 800ad8a:	bd38      	pop	{r3, r4, r5, pc}
 800ad8c:	20000fb0 	.word	0x20000fb0

0800ad90 <_read_r>:
 800ad90:	b538      	push	{r3, r4, r5, lr}
 800ad92:	4d07      	ldr	r5, [pc, #28]	@ (800adb0 <_read_r+0x20>)
 800ad94:	4604      	mov	r4, r0
 800ad96:	4608      	mov	r0, r1
 800ad98:	4611      	mov	r1, r2
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	602a      	str	r2, [r5, #0]
 800ad9e:	461a      	mov	r2, r3
 800ada0:	f7fa fe58 	bl	8005a54 <_read>
 800ada4:	1c43      	adds	r3, r0, #1
 800ada6:	d102      	bne.n	800adae <_read_r+0x1e>
 800ada8:	682b      	ldr	r3, [r5, #0]
 800adaa:	b103      	cbz	r3, 800adae <_read_r+0x1e>
 800adac:	6023      	str	r3, [r4, #0]
 800adae:	bd38      	pop	{r3, r4, r5, pc}
 800adb0:	20000fb0 	.word	0x20000fb0

0800adb4 <_write_r>:
 800adb4:	b538      	push	{r3, r4, r5, lr}
 800adb6:	4d07      	ldr	r5, [pc, #28]	@ (800add4 <_write_r+0x20>)
 800adb8:	4604      	mov	r4, r0
 800adba:	4608      	mov	r0, r1
 800adbc:	4611      	mov	r1, r2
 800adbe:	2200      	movs	r2, #0
 800adc0:	602a      	str	r2, [r5, #0]
 800adc2:	461a      	mov	r2, r3
 800adc4:	f7fa fe63 	bl	8005a8e <_write>
 800adc8:	1c43      	adds	r3, r0, #1
 800adca:	d102      	bne.n	800add2 <_write_r+0x1e>
 800adcc:	682b      	ldr	r3, [r5, #0]
 800adce:	b103      	cbz	r3, 800add2 <_write_r+0x1e>
 800add0:	6023      	str	r3, [r4, #0]
 800add2:	bd38      	pop	{r3, r4, r5, pc}
 800add4:	20000fb0 	.word	0x20000fb0

0800add8 <__errno>:
 800add8:	4b01      	ldr	r3, [pc, #4]	@ (800ade0 <__errno+0x8>)
 800adda:	6818      	ldr	r0, [r3, #0]
 800addc:	4770      	bx	lr
 800adde:	bf00      	nop
 800ade0:	20000024 	.word	0x20000024

0800ade4 <__libc_init_array>:
 800ade4:	b570      	push	{r4, r5, r6, lr}
 800ade6:	4d0d      	ldr	r5, [pc, #52]	@ (800ae1c <__libc_init_array+0x38>)
 800ade8:	4c0d      	ldr	r4, [pc, #52]	@ (800ae20 <__libc_init_array+0x3c>)
 800adea:	1b64      	subs	r4, r4, r5
 800adec:	10a4      	asrs	r4, r4, #2
 800adee:	2600      	movs	r6, #0
 800adf0:	42a6      	cmp	r6, r4
 800adf2:	d109      	bne.n	800ae08 <__libc_init_array+0x24>
 800adf4:	4d0b      	ldr	r5, [pc, #44]	@ (800ae24 <__libc_init_array+0x40>)
 800adf6:	4c0c      	ldr	r4, [pc, #48]	@ (800ae28 <__libc_init_array+0x44>)
 800adf8:	f000 fd3a 	bl	800b870 <_init>
 800adfc:	1b64      	subs	r4, r4, r5
 800adfe:	10a4      	asrs	r4, r4, #2
 800ae00:	2600      	movs	r6, #0
 800ae02:	42a6      	cmp	r6, r4
 800ae04:	d105      	bne.n	800ae12 <__libc_init_array+0x2e>
 800ae06:	bd70      	pop	{r4, r5, r6, pc}
 800ae08:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae0c:	4798      	blx	r3
 800ae0e:	3601      	adds	r6, #1
 800ae10:	e7ee      	b.n	800adf0 <__libc_init_array+0xc>
 800ae12:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae16:	4798      	blx	r3
 800ae18:	3601      	adds	r6, #1
 800ae1a:	e7f2      	b.n	800ae02 <__libc_init_array+0x1e>
 800ae1c:	0800be60 	.word	0x0800be60
 800ae20:	0800be60 	.word	0x0800be60
 800ae24:	0800be60 	.word	0x0800be60
 800ae28:	0800be68 	.word	0x0800be68

0800ae2c <__retarget_lock_init_recursive>:
 800ae2c:	4770      	bx	lr

0800ae2e <__retarget_lock_acquire_recursive>:
 800ae2e:	4770      	bx	lr

0800ae30 <__retarget_lock_release_recursive>:
 800ae30:	4770      	bx	lr

0800ae32 <memcpy>:
 800ae32:	440a      	add	r2, r1
 800ae34:	4291      	cmp	r1, r2
 800ae36:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ae3a:	d100      	bne.n	800ae3e <memcpy+0xc>
 800ae3c:	4770      	bx	lr
 800ae3e:	b510      	push	{r4, lr}
 800ae40:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae44:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae48:	4291      	cmp	r1, r2
 800ae4a:	d1f9      	bne.n	800ae40 <memcpy+0xe>
 800ae4c:	bd10      	pop	{r4, pc}
	...

0800ae50 <_free_r>:
 800ae50:	b538      	push	{r3, r4, r5, lr}
 800ae52:	4605      	mov	r5, r0
 800ae54:	2900      	cmp	r1, #0
 800ae56:	d041      	beq.n	800aedc <_free_r+0x8c>
 800ae58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae5c:	1f0c      	subs	r4, r1, #4
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	bfb8      	it	lt
 800ae62:	18e4      	addlt	r4, r4, r3
 800ae64:	f000 f8e0 	bl	800b028 <__malloc_lock>
 800ae68:	4a1d      	ldr	r2, [pc, #116]	@ (800aee0 <_free_r+0x90>)
 800ae6a:	6813      	ldr	r3, [r2, #0]
 800ae6c:	b933      	cbnz	r3, 800ae7c <_free_r+0x2c>
 800ae6e:	6063      	str	r3, [r4, #4]
 800ae70:	6014      	str	r4, [r2, #0]
 800ae72:	4628      	mov	r0, r5
 800ae74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae78:	f000 b8dc 	b.w	800b034 <__malloc_unlock>
 800ae7c:	42a3      	cmp	r3, r4
 800ae7e:	d908      	bls.n	800ae92 <_free_r+0x42>
 800ae80:	6820      	ldr	r0, [r4, #0]
 800ae82:	1821      	adds	r1, r4, r0
 800ae84:	428b      	cmp	r3, r1
 800ae86:	bf01      	itttt	eq
 800ae88:	6819      	ldreq	r1, [r3, #0]
 800ae8a:	685b      	ldreq	r3, [r3, #4]
 800ae8c:	1809      	addeq	r1, r1, r0
 800ae8e:	6021      	streq	r1, [r4, #0]
 800ae90:	e7ed      	b.n	800ae6e <_free_r+0x1e>
 800ae92:	461a      	mov	r2, r3
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	b10b      	cbz	r3, 800ae9c <_free_r+0x4c>
 800ae98:	42a3      	cmp	r3, r4
 800ae9a:	d9fa      	bls.n	800ae92 <_free_r+0x42>
 800ae9c:	6811      	ldr	r1, [r2, #0]
 800ae9e:	1850      	adds	r0, r2, r1
 800aea0:	42a0      	cmp	r0, r4
 800aea2:	d10b      	bne.n	800aebc <_free_r+0x6c>
 800aea4:	6820      	ldr	r0, [r4, #0]
 800aea6:	4401      	add	r1, r0
 800aea8:	1850      	adds	r0, r2, r1
 800aeaa:	4283      	cmp	r3, r0
 800aeac:	6011      	str	r1, [r2, #0]
 800aeae:	d1e0      	bne.n	800ae72 <_free_r+0x22>
 800aeb0:	6818      	ldr	r0, [r3, #0]
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	6053      	str	r3, [r2, #4]
 800aeb6:	4408      	add	r0, r1
 800aeb8:	6010      	str	r0, [r2, #0]
 800aeba:	e7da      	b.n	800ae72 <_free_r+0x22>
 800aebc:	d902      	bls.n	800aec4 <_free_r+0x74>
 800aebe:	230c      	movs	r3, #12
 800aec0:	602b      	str	r3, [r5, #0]
 800aec2:	e7d6      	b.n	800ae72 <_free_r+0x22>
 800aec4:	6820      	ldr	r0, [r4, #0]
 800aec6:	1821      	adds	r1, r4, r0
 800aec8:	428b      	cmp	r3, r1
 800aeca:	bf04      	itt	eq
 800aecc:	6819      	ldreq	r1, [r3, #0]
 800aece:	685b      	ldreq	r3, [r3, #4]
 800aed0:	6063      	str	r3, [r4, #4]
 800aed2:	bf04      	itt	eq
 800aed4:	1809      	addeq	r1, r1, r0
 800aed6:	6021      	streq	r1, [r4, #0]
 800aed8:	6054      	str	r4, [r2, #4]
 800aeda:	e7ca      	b.n	800ae72 <_free_r+0x22>
 800aedc:	bd38      	pop	{r3, r4, r5, pc}
 800aede:	bf00      	nop
 800aee0:	20000fbc 	.word	0x20000fbc

0800aee4 <sbrk_aligned>:
 800aee4:	b570      	push	{r4, r5, r6, lr}
 800aee6:	4e0f      	ldr	r6, [pc, #60]	@ (800af24 <sbrk_aligned+0x40>)
 800aee8:	460c      	mov	r4, r1
 800aeea:	6831      	ldr	r1, [r6, #0]
 800aeec:	4605      	mov	r5, r0
 800aeee:	b911      	cbnz	r1, 800aef6 <sbrk_aligned+0x12>
 800aef0:	f000 fcae 	bl	800b850 <_sbrk_r>
 800aef4:	6030      	str	r0, [r6, #0]
 800aef6:	4621      	mov	r1, r4
 800aef8:	4628      	mov	r0, r5
 800aefa:	f000 fca9 	bl	800b850 <_sbrk_r>
 800aefe:	1c43      	adds	r3, r0, #1
 800af00:	d103      	bne.n	800af0a <sbrk_aligned+0x26>
 800af02:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800af06:	4620      	mov	r0, r4
 800af08:	bd70      	pop	{r4, r5, r6, pc}
 800af0a:	1cc4      	adds	r4, r0, #3
 800af0c:	f024 0403 	bic.w	r4, r4, #3
 800af10:	42a0      	cmp	r0, r4
 800af12:	d0f8      	beq.n	800af06 <sbrk_aligned+0x22>
 800af14:	1a21      	subs	r1, r4, r0
 800af16:	4628      	mov	r0, r5
 800af18:	f000 fc9a 	bl	800b850 <_sbrk_r>
 800af1c:	3001      	adds	r0, #1
 800af1e:	d1f2      	bne.n	800af06 <sbrk_aligned+0x22>
 800af20:	e7ef      	b.n	800af02 <sbrk_aligned+0x1e>
 800af22:	bf00      	nop
 800af24:	20000fb8 	.word	0x20000fb8

0800af28 <_malloc_r>:
 800af28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af2c:	1ccd      	adds	r5, r1, #3
 800af2e:	f025 0503 	bic.w	r5, r5, #3
 800af32:	3508      	adds	r5, #8
 800af34:	2d0c      	cmp	r5, #12
 800af36:	bf38      	it	cc
 800af38:	250c      	movcc	r5, #12
 800af3a:	2d00      	cmp	r5, #0
 800af3c:	4606      	mov	r6, r0
 800af3e:	db01      	blt.n	800af44 <_malloc_r+0x1c>
 800af40:	42a9      	cmp	r1, r5
 800af42:	d904      	bls.n	800af4e <_malloc_r+0x26>
 800af44:	230c      	movs	r3, #12
 800af46:	6033      	str	r3, [r6, #0]
 800af48:	2000      	movs	r0, #0
 800af4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b024 <_malloc_r+0xfc>
 800af52:	f000 f869 	bl	800b028 <__malloc_lock>
 800af56:	f8d8 3000 	ldr.w	r3, [r8]
 800af5a:	461c      	mov	r4, r3
 800af5c:	bb44      	cbnz	r4, 800afb0 <_malloc_r+0x88>
 800af5e:	4629      	mov	r1, r5
 800af60:	4630      	mov	r0, r6
 800af62:	f7ff ffbf 	bl	800aee4 <sbrk_aligned>
 800af66:	1c43      	adds	r3, r0, #1
 800af68:	4604      	mov	r4, r0
 800af6a:	d158      	bne.n	800b01e <_malloc_r+0xf6>
 800af6c:	f8d8 4000 	ldr.w	r4, [r8]
 800af70:	4627      	mov	r7, r4
 800af72:	2f00      	cmp	r7, #0
 800af74:	d143      	bne.n	800affe <_malloc_r+0xd6>
 800af76:	2c00      	cmp	r4, #0
 800af78:	d04b      	beq.n	800b012 <_malloc_r+0xea>
 800af7a:	6823      	ldr	r3, [r4, #0]
 800af7c:	4639      	mov	r1, r7
 800af7e:	4630      	mov	r0, r6
 800af80:	eb04 0903 	add.w	r9, r4, r3
 800af84:	f000 fc64 	bl	800b850 <_sbrk_r>
 800af88:	4581      	cmp	r9, r0
 800af8a:	d142      	bne.n	800b012 <_malloc_r+0xea>
 800af8c:	6821      	ldr	r1, [r4, #0]
 800af8e:	1a6d      	subs	r5, r5, r1
 800af90:	4629      	mov	r1, r5
 800af92:	4630      	mov	r0, r6
 800af94:	f7ff ffa6 	bl	800aee4 <sbrk_aligned>
 800af98:	3001      	adds	r0, #1
 800af9a:	d03a      	beq.n	800b012 <_malloc_r+0xea>
 800af9c:	6823      	ldr	r3, [r4, #0]
 800af9e:	442b      	add	r3, r5
 800afa0:	6023      	str	r3, [r4, #0]
 800afa2:	f8d8 3000 	ldr.w	r3, [r8]
 800afa6:	685a      	ldr	r2, [r3, #4]
 800afa8:	bb62      	cbnz	r2, 800b004 <_malloc_r+0xdc>
 800afaa:	f8c8 7000 	str.w	r7, [r8]
 800afae:	e00f      	b.n	800afd0 <_malloc_r+0xa8>
 800afb0:	6822      	ldr	r2, [r4, #0]
 800afb2:	1b52      	subs	r2, r2, r5
 800afb4:	d420      	bmi.n	800aff8 <_malloc_r+0xd0>
 800afb6:	2a0b      	cmp	r2, #11
 800afb8:	d917      	bls.n	800afea <_malloc_r+0xc2>
 800afba:	1961      	adds	r1, r4, r5
 800afbc:	42a3      	cmp	r3, r4
 800afbe:	6025      	str	r5, [r4, #0]
 800afc0:	bf18      	it	ne
 800afc2:	6059      	strne	r1, [r3, #4]
 800afc4:	6863      	ldr	r3, [r4, #4]
 800afc6:	bf08      	it	eq
 800afc8:	f8c8 1000 	streq.w	r1, [r8]
 800afcc:	5162      	str	r2, [r4, r5]
 800afce:	604b      	str	r3, [r1, #4]
 800afd0:	4630      	mov	r0, r6
 800afd2:	f000 f82f 	bl	800b034 <__malloc_unlock>
 800afd6:	f104 000b 	add.w	r0, r4, #11
 800afda:	1d23      	adds	r3, r4, #4
 800afdc:	f020 0007 	bic.w	r0, r0, #7
 800afe0:	1ac2      	subs	r2, r0, r3
 800afe2:	bf1c      	itt	ne
 800afe4:	1a1b      	subne	r3, r3, r0
 800afe6:	50a3      	strne	r3, [r4, r2]
 800afe8:	e7af      	b.n	800af4a <_malloc_r+0x22>
 800afea:	6862      	ldr	r2, [r4, #4]
 800afec:	42a3      	cmp	r3, r4
 800afee:	bf0c      	ite	eq
 800aff0:	f8c8 2000 	streq.w	r2, [r8]
 800aff4:	605a      	strne	r2, [r3, #4]
 800aff6:	e7eb      	b.n	800afd0 <_malloc_r+0xa8>
 800aff8:	4623      	mov	r3, r4
 800affa:	6864      	ldr	r4, [r4, #4]
 800affc:	e7ae      	b.n	800af5c <_malloc_r+0x34>
 800affe:	463c      	mov	r4, r7
 800b000:	687f      	ldr	r7, [r7, #4]
 800b002:	e7b6      	b.n	800af72 <_malloc_r+0x4a>
 800b004:	461a      	mov	r2, r3
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	42a3      	cmp	r3, r4
 800b00a:	d1fb      	bne.n	800b004 <_malloc_r+0xdc>
 800b00c:	2300      	movs	r3, #0
 800b00e:	6053      	str	r3, [r2, #4]
 800b010:	e7de      	b.n	800afd0 <_malloc_r+0xa8>
 800b012:	230c      	movs	r3, #12
 800b014:	6033      	str	r3, [r6, #0]
 800b016:	4630      	mov	r0, r6
 800b018:	f000 f80c 	bl	800b034 <__malloc_unlock>
 800b01c:	e794      	b.n	800af48 <_malloc_r+0x20>
 800b01e:	6005      	str	r5, [r0, #0]
 800b020:	e7d6      	b.n	800afd0 <_malloc_r+0xa8>
 800b022:	bf00      	nop
 800b024:	20000fbc 	.word	0x20000fbc

0800b028 <__malloc_lock>:
 800b028:	4801      	ldr	r0, [pc, #4]	@ (800b030 <__malloc_lock+0x8>)
 800b02a:	f7ff bf00 	b.w	800ae2e <__retarget_lock_acquire_recursive>
 800b02e:	bf00      	nop
 800b030:	20000fb4 	.word	0x20000fb4

0800b034 <__malloc_unlock>:
 800b034:	4801      	ldr	r0, [pc, #4]	@ (800b03c <__malloc_unlock+0x8>)
 800b036:	f7ff befb 	b.w	800ae30 <__retarget_lock_release_recursive>
 800b03a:	bf00      	nop
 800b03c:	20000fb4 	.word	0x20000fb4

0800b040 <_malloc_usable_size_r>:
 800b040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b044:	1f18      	subs	r0, r3, #4
 800b046:	2b00      	cmp	r3, #0
 800b048:	bfbc      	itt	lt
 800b04a:	580b      	ldrlt	r3, [r1, r0]
 800b04c:	18c0      	addlt	r0, r0, r3
 800b04e:	4770      	bx	lr

0800b050 <__sfputc_r>:
 800b050:	6893      	ldr	r3, [r2, #8]
 800b052:	3b01      	subs	r3, #1
 800b054:	2b00      	cmp	r3, #0
 800b056:	b410      	push	{r4}
 800b058:	6093      	str	r3, [r2, #8]
 800b05a:	da08      	bge.n	800b06e <__sfputc_r+0x1e>
 800b05c:	6994      	ldr	r4, [r2, #24]
 800b05e:	42a3      	cmp	r3, r4
 800b060:	db01      	blt.n	800b066 <__sfputc_r+0x16>
 800b062:	290a      	cmp	r1, #10
 800b064:	d103      	bne.n	800b06e <__sfputc_r+0x1e>
 800b066:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b06a:	f7ff bdd2 	b.w	800ac12 <__swbuf_r>
 800b06e:	6813      	ldr	r3, [r2, #0]
 800b070:	1c58      	adds	r0, r3, #1
 800b072:	6010      	str	r0, [r2, #0]
 800b074:	7019      	strb	r1, [r3, #0]
 800b076:	4608      	mov	r0, r1
 800b078:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b07c:	4770      	bx	lr

0800b07e <__sfputs_r>:
 800b07e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b080:	4606      	mov	r6, r0
 800b082:	460f      	mov	r7, r1
 800b084:	4614      	mov	r4, r2
 800b086:	18d5      	adds	r5, r2, r3
 800b088:	42ac      	cmp	r4, r5
 800b08a:	d101      	bne.n	800b090 <__sfputs_r+0x12>
 800b08c:	2000      	movs	r0, #0
 800b08e:	e007      	b.n	800b0a0 <__sfputs_r+0x22>
 800b090:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b094:	463a      	mov	r2, r7
 800b096:	4630      	mov	r0, r6
 800b098:	f7ff ffda 	bl	800b050 <__sfputc_r>
 800b09c:	1c43      	adds	r3, r0, #1
 800b09e:	d1f3      	bne.n	800b088 <__sfputs_r+0xa>
 800b0a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b0a4 <_vfiprintf_r>:
 800b0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a8:	460d      	mov	r5, r1
 800b0aa:	b09d      	sub	sp, #116	@ 0x74
 800b0ac:	4614      	mov	r4, r2
 800b0ae:	4698      	mov	r8, r3
 800b0b0:	4606      	mov	r6, r0
 800b0b2:	b118      	cbz	r0, 800b0bc <_vfiprintf_r+0x18>
 800b0b4:	6a03      	ldr	r3, [r0, #32]
 800b0b6:	b90b      	cbnz	r3, 800b0bc <_vfiprintf_r+0x18>
 800b0b8:	f7ff fcc2 	bl	800aa40 <__sinit>
 800b0bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0be:	07d9      	lsls	r1, r3, #31
 800b0c0:	d405      	bmi.n	800b0ce <_vfiprintf_r+0x2a>
 800b0c2:	89ab      	ldrh	r3, [r5, #12]
 800b0c4:	059a      	lsls	r2, r3, #22
 800b0c6:	d402      	bmi.n	800b0ce <_vfiprintf_r+0x2a>
 800b0c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0ca:	f7ff feb0 	bl	800ae2e <__retarget_lock_acquire_recursive>
 800b0ce:	89ab      	ldrh	r3, [r5, #12]
 800b0d0:	071b      	lsls	r3, r3, #28
 800b0d2:	d501      	bpl.n	800b0d8 <_vfiprintf_r+0x34>
 800b0d4:	692b      	ldr	r3, [r5, #16]
 800b0d6:	b99b      	cbnz	r3, 800b100 <_vfiprintf_r+0x5c>
 800b0d8:	4629      	mov	r1, r5
 800b0da:	4630      	mov	r0, r6
 800b0dc:	f7ff fdd8 	bl	800ac90 <__swsetup_r>
 800b0e0:	b170      	cbz	r0, 800b100 <_vfiprintf_r+0x5c>
 800b0e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0e4:	07dc      	lsls	r4, r3, #31
 800b0e6:	d504      	bpl.n	800b0f2 <_vfiprintf_r+0x4e>
 800b0e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b0ec:	b01d      	add	sp, #116	@ 0x74
 800b0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0f2:	89ab      	ldrh	r3, [r5, #12]
 800b0f4:	0598      	lsls	r0, r3, #22
 800b0f6:	d4f7      	bmi.n	800b0e8 <_vfiprintf_r+0x44>
 800b0f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0fa:	f7ff fe99 	bl	800ae30 <__retarget_lock_release_recursive>
 800b0fe:	e7f3      	b.n	800b0e8 <_vfiprintf_r+0x44>
 800b100:	2300      	movs	r3, #0
 800b102:	9309      	str	r3, [sp, #36]	@ 0x24
 800b104:	2320      	movs	r3, #32
 800b106:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b10a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b10e:	2330      	movs	r3, #48	@ 0x30
 800b110:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b2c0 <_vfiprintf_r+0x21c>
 800b114:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b118:	f04f 0901 	mov.w	r9, #1
 800b11c:	4623      	mov	r3, r4
 800b11e:	469a      	mov	sl, r3
 800b120:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b124:	b10a      	cbz	r2, 800b12a <_vfiprintf_r+0x86>
 800b126:	2a25      	cmp	r2, #37	@ 0x25
 800b128:	d1f9      	bne.n	800b11e <_vfiprintf_r+0x7a>
 800b12a:	ebba 0b04 	subs.w	fp, sl, r4
 800b12e:	d00b      	beq.n	800b148 <_vfiprintf_r+0xa4>
 800b130:	465b      	mov	r3, fp
 800b132:	4622      	mov	r2, r4
 800b134:	4629      	mov	r1, r5
 800b136:	4630      	mov	r0, r6
 800b138:	f7ff ffa1 	bl	800b07e <__sfputs_r>
 800b13c:	3001      	adds	r0, #1
 800b13e:	f000 80a7 	beq.w	800b290 <_vfiprintf_r+0x1ec>
 800b142:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b144:	445a      	add	r2, fp
 800b146:	9209      	str	r2, [sp, #36]	@ 0x24
 800b148:	f89a 3000 	ldrb.w	r3, [sl]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	f000 809f 	beq.w	800b290 <_vfiprintf_r+0x1ec>
 800b152:	2300      	movs	r3, #0
 800b154:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b158:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b15c:	f10a 0a01 	add.w	sl, sl, #1
 800b160:	9304      	str	r3, [sp, #16]
 800b162:	9307      	str	r3, [sp, #28]
 800b164:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b168:	931a      	str	r3, [sp, #104]	@ 0x68
 800b16a:	4654      	mov	r4, sl
 800b16c:	2205      	movs	r2, #5
 800b16e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b172:	4853      	ldr	r0, [pc, #332]	@ (800b2c0 <_vfiprintf_r+0x21c>)
 800b174:	f7f5 f83c 	bl	80001f0 <memchr>
 800b178:	9a04      	ldr	r2, [sp, #16]
 800b17a:	b9d8      	cbnz	r0, 800b1b4 <_vfiprintf_r+0x110>
 800b17c:	06d1      	lsls	r1, r2, #27
 800b17e:	bf44      	itt	mi
 800b180:	2320      	movmi	r3, #32
 800b182:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b186:	0713      	lsls	r3, r2, #28
 800b188:	bf44      	itt	mi
 800b18a:	232b      	movmi	r3, #43	@ 0x2b
 800b18c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b190:	f89a 3000 	ldrb.w	r3, [sl]
 800b194:	2b2a      	cmp	r3, #42	@ 0x2a
 800b196:	d015      	beq.n	800b1c4 <_vfiprintf_r+0x120>
 800b198:	9a07      	ldr	r2, [sp, #28]
 800b19a:	4654      	mov	r4, sl
 800b19c:	2000      	movs	r0, #0
 800b19e:	f04f 0c0a 	mov.w	ip, #10
 800b1a2:	4621      	mov	r1, r4
 800b1a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1a8:	3b30      	subs	r3, #48	@ 0x30
 800b1aa:	2b09      	cmp	r3, #9
 800b1ac:	d94b      	bls.n	800b246 <_vfiprintf_r+0x1a2>
 800b1ae:	b1b0      	cbz	r0, 800b1de <_vfiprintf_r+0x13a>
 800b1b0:	9207      	str	r2, [sp, #28]
 800b1b2:	e014      	b.n	800b1de <_vfiprintf_r+0x13a>
 800b1b4:	eba0 0308 	sub.w	r3, r0, r8
 800b1b8:	fa09 f303 	lsl.w	r3, r9, r3
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	9304      	str	r3, [sp, #16]
 800b1c0:	46a2      	mov	sl, r4
 800b1c2:	e7d2      	b.n	800b16a <_vfiprintf_r+0xc6>
 800b1c4:	9b03      	ldr	r3, [sp, #12]
 800b1c6:	1d19      	adds	r1, r3, #4
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	9103      	str	r1, [sp, #12]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	bfbb      	ittet	lt
 800b1d0:	425b      	neglt	r3, r3
 800b1d2:	f042 0202 	orrlt.w	r2, r2, #2
 800b1d6:	9307      	strge	r3, [sp, #28]
 800b1d8:	9307      	strlt	r3, [sp, #28]
 800b1da:	bfb8      	it	lt
 800b1dc:	9204      	strlt	r2, [sp, #16]
 800b1de:	7823      	ldrb	r3, [r4, #0]
 800b1e0:	2b2e      	cmp	r3, #46	@ 0x2e
 800b1e2:	d10a      	bne.n	800b1fa <_vfiprintf_r+0x156>
 800b1e4:	7863      	ldrb	r3, [r4, #1]
 800b1e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1e8:	d132      	bne.n	800b250 <_vfiprintf_r+0x1ac>
 800b1ea:	9b03      	ldr	r3, [sp, #12]
 800b1ec:	1d1a      	adds	r2, r3, #4
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	9203      	str	r2, [sp, #12]
 800b1f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b1f6:	3402      	adds	r4, #2
 800b1f8:	9305      	str	r3, [sp, #20]
 800b1fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b2d0 <_vfiprintf_r+0x22c>
 800b1fe:	7821      	ldrb	r1, [r4, #0]
 800b200:	2203      	movs	r2, #3
 800b202:	4650      	mov	r0, sl
 800b204:	f7f4 fff4 	bl	80001f0 <memchr>
 800b208:	b138      	cbz	r0, 800b21a <_vfiprintf_r+0x176>
 800b20a:	9b04      	ldr	r3, [sp, #16]
 800b20c:	eba0 000a 	sub.w	r0, r0, sl
 800b210:	2240      	movs	r2, #64	@ 0x40
 800b212:	4082      	lsls	r2, r0
 800b214:	4313      	orrs	r3, r2
 800b216:	3401      	adds	r4, #1
 800b218:	9304      	str	r3, [sp, #16]
 800b21a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b21e:	4829      	ldr	r0, [pc, #164]	@ (800b2c4 <_vfiprintf_r+0x220>)
 800b220:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b224:	2206      	movs	r2, #6
 800b226:	f7f4 ffe3 	bl	80001f0 <memchr>
 800b22a:	2800      	cmp	r0, #0
 800b22c:	d03f      	beq.n	800b2ae <_vfiprintf_r+0x20a>
 800b22e:	4b26      	ldr	r3, [pc, #152]	@ (800b2c8 <_vfiprintf_r+0x224>)
 800b230:	bb1b      	cbnz	r3, 800b27a <_vfiprintf_r+0x1d6>
 800b232:	9b03      	ldr	r3, [sp, #12]
 800b234:	3307      	adds	r3, #7
 800b236:	f023 0307 	bic.w	r3, r3, #7
 800b23a:	3308      	adds	r3, #8
 800b23c:	9303      	str	r3, [sp, #12]
 800b23e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b240:	443b      	add	r3, r7
 800b242:	9309      	str	r3, [sp, #36]	@ 0x24
 800b244:	e76a      	b.n	800b11c <_vfiprintf_r+0x78>
 800b246:	fb0c 3202 	mla	r2, ip, r2, r3
 800b24a:	460c      	mov	r4, r1
 800b24c:	2001      	movs	r0, #1
 800b24e:	e7a8      	b.n	800b1a2 <_vfiprintf_r+0xfe>
 800b250:	2300      	movs	r3, #0
 800b252:	3401      	adds	r4, #1
 800b254:	9305      	str	r3, [sp, #20]
 800b256:	4619      	mov	r1, r3
 800b258:	f04f 0c0a 	mov.w	ip, #10
 800b25c:	4620      	mov	r0, r4
 800b25e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b262:	3a30      	subs	r2, #48	@ 0x30
 800b264:	2a09      	cmp	r2, #9
 800b266:	d903      	bls.n	800b270 <_vfiprintf_r+0x1cc>
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d0c6      	beq.n	800b1fa <_vfiprintf_r+0x156>
 800b26c:	9105      	str	r1, [sp, #20]
 800b26e:	e7c4      	b.n	800b1fa <_vfiprintf_r+0x156>
 800b270:	fb0c 2101 	mla	r1, ip, r1, r2
 800b274:	4604      	mov	r4, r0
 800b276:	2301      	movs	r3, #1
 800b278:	e7f0      	b.n	800b25c <_vfiprintf_r+0x1b8>
 800b27a:	ab03      	add	r3, sp, #12
 800b27c:	9300      	str	r3, [sp, #0]
 800b27e:	462a      	mov	r2, r5
 800b280:	4b12      	ldr	r3, [pc, #72]	@ (800b2cc <_vfiprintf_r+0x228>)
 800b282:	a904      	add	r1, sp, #16
 800b284:	4630      	mov	r0, r6
 800b286:	f3af 8000 	nop.w
 800b28a:	4607      	mov	r7, r0
 800b28c:	1c78      	adds	r0, r7, #1
 800b28e:	d1d6      	bne.n	800b23e <_vfiprintf_r+0x19a>
 800b290:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b292:	07d9      	lsls	r1, r3, #31
 800b294:	d405      	bmi.n	800b2a2 <_vfiprintf_r+0x1fe>
 800b296:	89ab      	ldrh	r3, [r5, #12]
 800b298:	059a      	lsls	r2, r3, #22
 800b29a:	d402      	bmi.n	800b2a2 <_vfiprintf_r+0x1fe>
 800b29c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b29e:	f7ff fdc7 	bl	800ae30 <__retarget_lock_release_recursive>
 800b2a2:	89ab      	ldrh	r3, [r5, #12]
 800b2a4:	065b      	lsls	r3, r3, #25
 800b2a6:	f53f af1f 	bmi.w	800b0e8 <_vfiprintf_r+0x44>
 800b2aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b2ac:	e71e      	b.n	800b0ec <_vfiprintf_r+0x48>
 800b2ae:	ab03      	add	r3, sp, #12
 800b2b0:	9300      	str	r3, [sp, #0]
 800b2b2:	462a      	mov	r2, r5
 800b2b4:	4b05      	ldr	r3, [pc, #20]	@ (800b2cc <_vfiprintf_r+0x228>)
 800b2b6:	a904      	add	r1, sp, #16
 800b2b8:	4630      	mov	r0, r6
 800b2ba:	f000 f879 	bl	800b3b0 <_printf_i>
 800b2be:	e7e4      	b.n	800b28a <_vfiprintf_r+0x1e6>
 800b2c0:	0800be24 	.word	0x0800be24
 800b2c4:	0800be2e 	.word	0x0800be2e
 800b2c8:	00000000 	.word	0x00000000
 800b2cc:	0800b07f 	.word	0x0800b07f
 800b2d0:	0800be2a 	.word	0x0800be2a

0800b2d4 <_printf_common>:
 800b2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2d8:	4616      	mov	r6, r2
 800b2da:	4698      	mov	r8, r3
 800b2dc:	688a      	ldr	r2, [r1, #8]
 800b2de:	690b      	ldr	r3, [r1, #16]
 800b2e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	bfb8      	it	lt
 800b2e8:	4613      	movlt	r3, r2
 800b2ea:	6033      	str	r3, [r6, #0]
 800b2ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b2f0:	4607      	mov	r7, r0
 800b2f2:	460c      	mov	r4, r1
 800b2f4:	b10a      	cbz	r2, 800b2fa <_printf_common+0x26>
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	6033      	str	r3, [r6, #0]
 800b2fa:	6823      	ldr	r3, [r4, #0]
 800b2fc:	0699      	lsls	r1, r3, #26
 800b2fe:	bf42      	ittt	mi
 800b300:	6833      	ldrmi	r3, [r6, #0]
 800b302:	3302      	addmi	r3, #2
 800b304:	6033      	strmi	r3, [r6, #0]
 800b306:	6825      	ldr	r5, [r4, #0]
 800b308:	f015 0506 	ands.w	r5, r5, #6
 800b30c:	d106      	bne.n	800b31c <_printf_common+0x48>
 800b30e:	f104 0a19 	add.w	sl, r4, #25
 800b312:	68e3      	ldr	r3, [r4, #12]
 800b314:	6832      	ldr	r2, [r6, #0]
 800b316:	1a9b      	subs	r3, r3, r2
 800b318:	42ab      	cmp	r3, r5
 800b31a:	dc26      	bgt.n	800b36a <_printf_common+0x96>
 800b31c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b320:	6822      	ldr	r2, [r4, #0]
 800b322:	3b00      	subs	r3, #0
 800b324:	bf18      	it	ne
 800b326:	2301      	movne	r3, #1
 800b328:	0692      	lsls	r2, r2, #26
 800b32a:	d42b      	bmi.n	800b384 <_printf_common+0xb0>
 800b32c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b330:	4641      	mov	r1, r8
 800b332:	4638      	mov	r0, r7
 800b334:	47c8      	blx	r9
 800b336:	3001      	adds	r0, #1
 800b338:	d01e      	beq.n	800b378 <_printf_common+0xa4>
 800b33a:	6823      	ldr	r3, [r4, #0]
 800b33c:	6922      	ldr	r2, [r4, #16]
 800b33e:	f003 0306 	and.w	r3, r3, #6
 800b342:	2b04      	cmp	r3, #4
 800b344:	bf02      	ittt	eq
 800b346:	68e5      	ldreq	r5, [r4, #12]
 800b348:	6833      	ldreq	r3, [r6, #0]
 800b34a:	1aed      	subeq	r5, r5, r3
 800b34c:	68a3      	ldr	r3, [r4, #8]
 800b34e:	bf0c      	ite	eq
 800b350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b354:	2500      	movne	r5, #0
 800b356:	4293      	cmp	r3, r2
 800b358:	bfc4      	itt	gt
 800b35a:	1a9b      	subgt	r3, r3, r2
 800b35c:	18ed      	addgt	r5, r5, r3
 800b35e:	2600      	movs	r6, #0
 800b360:	341a      	adds	r4, #26
 800b362:	42b5      	cmp	r5, r6
 800b364:	d11a      	bne.n	800b39c <_printf_common+0xc8>
 800b366:	2000      	movs	r0, #0
 800b368:	e008      	b.n	800b37c <_printf_common+0xa8>
 800b36a:	2301      	movs	r3, #1
 800b36c:	4652      	mov	r2, sl
 800b36e:	4641      	mov	r1, r8
 800b370:	4638      	mov	r0, r7
 800b372:	47c8      	blx	r9
 800b374:	3001      	adds	r0, #1
 800b376:	d103      	bne.n	800b380 <_printf_common+0xac>
 800b378:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b37c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b380:	3501      	adds	r5, #1
 800b382:	e7c6      	b.n	800b312 <_printf_common+0x3e>
 800b384:	18e1      	adds	r1, r4, r3
 800b386:	1c5a      	adds	r2, r3, #1
 800b388:	2030      	movs	r0, #48	@ 0x30
 800b38a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b38e:	4422      	add	r2, r4
 800b390:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b394:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b398:	3302      	adds	r3, #2
 800b39a:	e7c7      	b.n	800b32c <_printf_common+0x58>
 800b39c:	2301      	movs	r3, #1
 800b39e:	4622      	mov	r2, r4
 800b3a0:	4641      	mov	r1, r8
 800b3a2:	4638      	mov	r0, r7
 800b3a4:	47c8      	blx	r9
 800b3a6:	3001      	adds	r0, #1
 800b3a8:	d0e6      	beq.n	800b378 <_printf_common+0xa4>
 800b3aa:	3601      	adds	r6, #1
 800b3ac:	e7d9      	b.n	800b362 <_printf_common+0x8e>
	...

0800b3b0 <_printf_i>:
 800b3b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b3b4:	7e0f      	ldrb	r7, [r1, #24]
 800b3b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b3b8:	2f78      	cmp	r7, #120	@ 0x78
 800b3ba:	4691      	mov	r9, r2
 800b3bc:	4680      	mov	r8, r0
 800b3be:	460c      	mov	r4, r1
 800b3c0:	469a      	mov	sl, r3
 800b3c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b3c6:	d807      	bhi.n	800b3d8 <_printf_i+0x28>
 800b3c8:	2f62      	cmp	r7, #98	@ 0x62
 800b3ca:	d80a      	bhi.n	800b3e2 <_printf_i+0x32>
 800b3cc:	2f00      	cmp	r7, #0
 800b3ce:	f000 80d2 	beq.w	800b576 <_printf_i+0x1c6>
 800b3d2:	2f58      	cmp	r7, #88	@ 0x58
 800b3d4:	f000 80b9 	beq.w	800b54a <_printf_i+0x19a>
 800b3d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b3e0:	e03a      	b.n	800b458 <_printf_i+0xa8>
 800b3e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b3e6:	2b15      	cmp	r3, #21
 800b3e8:	d8f6      	bhi.n	800b3d8 <_printf_i+0x28>
 800b3ea:	a101      	add	r1, pc, #4	@ (adr r1, 800b3f0 <_printf_i+0x40>)
 800b3ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b3f0:	0800b449 	.word	0x0800b449
 800b3f4:	0800b45d 	.word	0x0800b45d
 800b3f8:	0800b3d9 	.word	0x0800b3d9
 800b3fc:	0800b3d9 	.word	0x0800b3d9
 800b400:	0800b3d9 	.word	0x0800b3d9
 800b404:	0800b3d9 	.word	0x0800b3d9
 800b408:	0800b45d 	.word	0x0800b45d
 800b40c:	0800b3d9 	.word	0x0800b3d9
 800b410:	0800b3d9 	.word	0x0800b3d9
 800b414:	0800b3d9 	.word	0x0800b3d9
 800b418:	0800b3d9 	.word	0x0800b3d9
 800b41c:	0800b55d 	.word	0x0800b55d
 800b420:	0800b487 	.word	0x0800b487
 800b424:	0800b517 	.word	0x0800b517
 800b428:	0800b3d9 	.word	0x0800b3d9
 800b42c:	0800b3d9 	.word	0x0800b3d9
 800b430:	0800b57f 	.word	0x0800b57f
 800b434:	0800b3d9 	.word	0x0800b3d9
 800b438:	0800b487 	.word	0x0800b487
 800b43c:	0800b3d9 	.word	0x0800b3d9
 800b440:	0800b3d9 	.word	0x0800b3d9
 800b444:	0800b51f 	.word	0x0800b51f
 800b448:	6833      	ldr	r3, [r6, #0]
 800b44a:	1d1a      	adds	r2, r3, #4
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	6032      	str	r2, [r6, #0]
 800b450:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b454:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b458:	2301      	movs	r3, #1
 800b45a:	e09d      	b.n	800b598 <_printf_i+0x1e8>
 800b45c:	6833      	ldr	r3, [r6, #0]
 800b45e:	6820      	ldr	r0, [r4, #0]
 800b460:	1d19      	adds	r1, r3, #4
 800b462:	6031      	str	r1, [r6, #0]
 800b464:	0606      	lsls	r6, r0, #24
 800b466:	d501      	bpl.n	800b46c <_printf_i+0xbc>
 800b468:	681d      	ldr	r5, [r3, #0]
 800b46a:	e003      	b.n	800b474 <_printf_i+0xc4>
 800b46c:	0645      	lsls	r5, r0, #25
 800b46e:	d5fb      	bpl.n	800b468 <_printf_i+0xb8>
 800b470:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b474:	2d00      	cmp	r5, #0
 800b476:	da03      	bge.n	800b480 <_printf_i+0xd0>
 800b478:	232d      	movs	r3, #45	@ 0x2d
 800b47a:	426d      	negs	r5, r5
 800b47c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b480:	4859      	ldr	r0, [pc, #356]	@ (800b5e8 <_printf_i+0x238>)
 800b482:	230a      	movs	r3, #10
 800b484:	e011      	b.n	800b4aa <_printf_i+0xfa>
 800b486:	6821      	ldr	r1, [r4, #0]
 800b488:	6833      	ldr	r3, [r6, #0]
 800b48a:	0608      	lsls	r0, r1, #24
 800b48c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b490:	d402      	bmi.n	800b498 <_printf_i+0xe8>
 800b492:	0649      	lsls	r1, r1, #25
 800b494:	bf48      	it	mi
 800b496:	b2ad      	uxthmi	r5, r5
 800b498:	2f6f      	cmp	r7, #111	@ 0x6f
 800b49a:	4853      	ldr	r0, [pc, #332]	@ (800b5e8 <_printf_i+0x238>)
 800b49c:	6033      	str	r3, [r6, #0]
 800b49e:	bf14      	ite	ne
 800b4a0:	230a      	movne	r3, #10
 800b4a2:	2308      	moveq	r3, #8
 800b4a4:	2100      	movs	r1, #0
 800b4a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b4aa:	6866      	ldr	r6, [r4, #4]
 800b4ac:	60a6      	str	r6, [r4, #8]
 800b4ae:	2e00      	cmp	r6, #0
 800b4b0:	bfa2      	ittt	ge
 800b4b2:	6821      	ldrge	r1, [r4, #0]
 800b4b4:	f021 0104 	bicge.w	r1, r1, #4
 800b4b8:	6021      	strge	r1, [r4, #0]
 800b4ba:	b90d      	cbnz	r5, 800b4c0 <_printf_i+0x110>
 800b4bc:	2e00      	cmp	r6, #0
 800b4be:	d04b      	beq.n	800b558 <_printf_i+0x1a8>
 800b4c0:	4616      	mov	r6, r2
 800b4c2:	fbb5 f1f3 	udiv	r1, r5, r3
 800b4c6:	fb03 5711 	mls	r7, r3, r1, r5
 800b4ca:	5dc7      	ldrb	r7, [r0, r7]
 800b4cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b4d0:	462f      	mov	r7, r5
 800b4d2:	42bb      	cmp	r3, r7
 800b4d4:	460d      	mov	r5, r1
 800b4d6:	d9f4      	bls.n	800b4c2 <_printf_i+0x112>
 800b4d8:	2b08      	cmp	r3, #8
 800b4da:	d10b      	bne.n	800b4f4 <_printf_i+0x144>
 800b4dc:	6823      	ldr	r3, [r4, #0]
 800b4de:	07df      	lsls	r7, r3, #31
 800b4e0:	d508      	bpl.n	800b4f4 <_printf_i+0x144>
 800b4e2:	6923      	ldr	r3, [r4, #16]
 800b4e4:	6861      	ldr	r1, [r4, #4]
 800b4e6:	4299      	cmp	r1, r3
 800b4e8:	bfde      	ittt	le
 800b4ea:	2330      	movle	r3, #48	@ 0x30
 800b4ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b4f0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b4f4:	1b92      	subs	r2, r2, r6
 800b4f6:	6122      	str	r2, [r4, #16]
 800b4f8:	f8cd a000 	str.w	sl, [sp]
 800b4fc:	464b      	mov	r3, r9
 800b4fe:	aa03      	add	r2, sp, #12
 800b500:	4621      	mov	r1, r4
 800b502:	4640      	mov	r0, r8
 800b504:	f7ff fee6 	bl	800b2d4 <_printf_common>
 800b508:	3001      	adds	r0, #1
 800b50a:	d14a      	bne.n	800b5a2 <_printf_i+0x1f2>
 800b50c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b510:	b004      	add	sp, #16
 800b512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b516:	6823      	ldr	r3, [r4, #0]
 800b518:	f043 0320 	orr.w	r3, r3, #32
 800b51c:	6023      	str	r3, [r4, #0]
 800b51e:	4833      	ldr	r0, [pc, #204]	@ (800b5ec <_printf_i+0x23c>)
 800b520:	2778      	movs	r7, #120	@ 0x78
 800b522:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b526:	6823      	ldr	r3, [r4, #0]
 800b528:	6831      	ldr	r1, [r6, #0]
 800b52a:	061f      	lsls	r7, r3, #24
 800b52c:	f851 5b04 	ldr.w	r5, [r1], #4
 800b530:	d402      	bmi.n	800b538 <_printf_i+0x188>
 800b532:	065f      	lsls	r7, r3, #25
 800b534:	bf48      	it	mi
 800b536:	b2ad      	uxthmi	r5, r5
 800b538:	6031      	str	r1, [r6, #0]
 800b53a:	07d9      	lsls	r1, r3, #31
 800b53c:	bf44      	itt	mi
 800b53e:	f043 0320 	orrmi.w	r3, r3, #32
 800b542:	6023      	strmi	r3, [r4, #0]
 800b544:	b11d      	cbz	r5, 800b54e <_printf_i+0x19e>
 800b546:	2310      	movs	r3, #16
 800b548:	e7ac      	b.n	800b4a4 <_printf_i+0xf4>
 800b54a:	4827      	ldr	r0, [pc, #156]	@ (800b5e8 <_printf_i+0x238>)
 800b54c:	e7e9      	b.n	800b522 <_printf_i+0x172>
 800b54e:	6823      	ldr	r3, [r4, #0]
 800b550:	f023 0320 	bic.w	r3, r3, #32
 800b554:	6023      	str	r3, [r4, #0]
 800b556:	e7f6      	b.n	800b546 <_printf_i+0x196>
 800b558:	4616      	mov	r6, r2
 800b55a:	e7bd      	b.n	800b4d8 <_printf_i+0x128>
 800b55c:	6833      	ldr	r3, [r6, #0]
 800b55e:	6825      	ldr	r5, [r4, #0]
 800b560:	6961      	ldr	r1, [r4, #20]
 800b562:	1d18      	adds	r0, r3, #4
 800b564:	6030      	str	r0, [r6, #0]
 800b566:	062e      	lsls	r6, r5, #24
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	d501      	bpl.n	800b570 <_printf_i+0x1c0>
 800b56c:	6019      	str	r1, [r3, #0]
 800b56e:	e002      	b.n	800b576 <_printf_i+0x1c6>
 800b570:	0668      	lsls	r0, r5, #25
 800b572:	d5fb      	bpl.n	800b56c <_printf_i+0x1bc>
 800b574:	8019      	strh	r1, [r3, #0]
 800b576:	2300      	movs	r3, #0
 800b578:	6123      	str	r3, [r4, #16]
 800b57a:	4616      	mov	r6, r2
 800b57c:	e7bc      	b.n	800b4f8 <_printf_i+0x148>
 800b57e:	6833      	ldr	r3, [r6, #0]
 800b580:	1d1a      	adds	r2, r3, #4
 800b582:	6032      	str	r2, [r6, #0]
 800b584:	681e      	ldr	r6, [r3, #0]
 800b586:	6862      	ldr	r2, [r4, #4]
 800b588:	2100      	movs	r1, #0
 800b58a:	4630      	mov	r0, r6
 800b58c:	f7f4 fe30 	bl	80001f0 <memchr>
 800b590:	b108      	cbz	r0, 800b596 <_printf_i+0x1e6>
 800b592:	1b80      	subs	r0, r0, r6
 800b594:	6060      	str	r0, [r4, #4]
 800b596:	6863      	ldr	r3, [r4, #4]
 800b598:	6123      	str	r3, [r4, #16]
 800b59a:	2300      	movs	r3, #0
 800b59c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5a0:	e7aa      	b.n	800b4f8 <_printf_i+0x148>
 800b5a2:	6923      	ldr	r3, [r4, #16]
 800b5a4:	4632      	mov	r2, r6
 800b5a6:	4649      	mov	r1, r9
 800b5a8:	4640      	mov	r0, r8
 800b5aa:	47d0      	blx	sl
 800b5ac:	3001      	adds	r0, #1
 800b5ae:	d0ad      	beq.n	800b50c <_printf_i+0x15c>
 800b5b0:	6823      	ldr	r3, [r4, #0]
 800b5b2:	079b      	lsls	r3, r3, #30
 800b5b4:	d413      	bmi.n	800b5de <_printf_i+0x22e>
 800b5b6:	68e0      	ldr	r0, [r4, #12]
 800b5b8:	9b03      	ldr	r3, [sp, #12]
 800b5ba:	4298      	cmp	r0, r3
 800b5bc:	bfb8      	it	lt
 800b5be:	4618      	movlt	r0, r3
 800b5c0:	e7a6      	b.n	800b510 <_printf_i+0x160>
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	4632      	mov	r2, r6
 800b5c6:	4649      	mov	r1, r9
 800b5c8:	4640      	mov	r0, r8
 800b5ca:	47d0      	blx	sl
 800b5cc:	3001      	adds	r0, #1
 800b5ce:	d09d      	beq.n	800b50c <_printf_i+0x15c>
 800b5d0:	3501      	adds	r5, #1
 800b5d2:	68e3      	ldr	r3, [r4, #12]
 800b5d4:	9903      	ldr	r1, [sp, #12]
 800b5d6:	1a5b      	subs	r3, r3, r1
 800b5d8:	42ab      	cmp	r3, r5
 800b5da:	dcf2      	bgt.n	800b5c2 <_printf_i+0x212>
 800b5dc:	e7eb      	b.n	800b5b6 <_printf_i+0x206>
 800b5de:	2500      	movs	r5, #0
 800b5e0:	f104 0619 	add.w	r6, r4, #25
 800b5e4:	e7f5      	b.n	800b5d2 <_printf_i+0x222>
 800b5e6:	bf00      	nop
 800b5e8:	0800be35 	.word	0x0800be35
 800b5ec:	0800be46 	.word	0x0800be46

0800b5f0 <__sflush_r>:
 800b5f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5f8:	0716      	lsls	r6, r2, #28
 800b5fa:	4605      	mov	r5, r0
 800b5fc:	460c      	mov	r4, r1
 800b5fe:	d454      	bmi.n	800b6aa <__sflush_r+0xba>
 800b600:	684b      	ldr	r3, [r1, #4]
 800b602:	2b00      	cmp	r3, #0
 800b604:	dc02      	bgt.n	800b60c <__sflush_r+0x1c>
 800b606:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b608:	2b00      	cmp	r3, #0
 800b60a:	dd48      	ble.n	800b69e <__sflush_r+0xae>
 800b60c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b60e:	2e00      	cmp	r6, #0
 800b610:	d045      	beq.n	800b69e <__sflush_r+0xae>
 800b612:	2300      	movs	r3, #0
 800b614:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b618:	682f      	ldr	r7, [r5, #0]
 800b61a:	6a21      	ldr	r1, [r4, #32]
 800b61c:	602b      	str	r3, [r5, #0]
 800b61e:	d030      	beq.n	800b682 <__sflush_r+0x92>
 800b620:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b622:	89a3      	ldrh	r3, [r4, #12]
 800b624:	0759      	lsls	r1, r3, #29
 800b626:	d505      	bpl.n	800b634 <__sflush_r+0x44>
 800b628:	6863      	ldr	r3, [r4, #4]
 800b62a:	1ad2      	subs	r2, r2, r3
 800b62c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b62e:	b10b      	cbz	r3, 800b634 <__sflush_r+0x44>
 800b630:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b632:	1ad2      	subs	r2, r2, r3
 800b634:	2300      	movs	r3, #0
 800b636:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b638:	6a21      	ldr	r1, [r4, #32]
 800b63a:	4628      	mov	r0, r5
 800b63c:	47b0      	blx	r6
 800b63e:	1c43      	adds	r3, r0, #1
 800b640:	89a3      	ldrh	r3, [r4, #12]
 800b642:	d106      	bne.n	800b652 <__sflush_r+0x62>
 800b644:	6829      	ldr	r1, [r5, #0]
 800b646:	291d      	cmp	r1, #29
 800b648:	d82b      	bhi.n	800b6a2 <__sflush_r+0xb2>
 800b64a:	4a2a      	ldr	r2, [pc, #168]	@ (800b6f4 <__sflush_r+0x104>)
 800b64c:	410a      	asrs	r2, r1
 800b64e:	07d6      	lsls	r6, r2, #31
 800b650:	d427      	bmi.n	800b6a2 <__sflush_r+0xb2>
 800b652:	2200      	movs	r2, #0
 800b654:	6062      	str	r2, [r4, #4]
 800b656:	04d9      	lsls	r1, r3, #19
 800b658:	6922      	ldr	r2, [r4, #16]
 800b65a:	6022      	str	r2, [r4, #0]
 800b65c:	d504      	bpl.n	800b668 <__sflush_r+0x78>
 800b65e:	1c42      	adds	r2, r0, #1
 800b660:	d101      	bne.n	800b666 <__sflush_r+0x76>
 800b662:	682b      	ldr	r3, [r5, #0]
 800b664:	b903      	cbnz	r3, 800b668 <__sflush_r+0x78>
 800b666:	6560      	str	r0, [r4, #84]	@ 0x54
 800b668:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b66a:	602f      	str	r7, [r5, #0]
 800b66c:	b1b9      	cbz	r1, 800b69e <__sflush_r+0xae>
 800b66e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b672:	4299      	cmp	r1, r3
 800b674:	d002      	beq.n	800b67c <__sflush_r+0x8c>
 800b676:	4628      	mov	r0, r5
 800b678:	f7ff fbea 	bl	800ae50 <_free_r>
 800b67c:	2300      	movs	r3, #0
 800b67e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b680:	e00d      	b.n	800b69e <__sflush_r+0xae>
 800b682:	2301      	movs	r3, #1
 800b684:	4628      	mov	r0, r5
 800b686:	47b0      	blx	r6
 800b688:	4602      	mov	r2, r0
 800b68a:	1c50      	adds	r0, r2, #1
 800b68c:	d1c9      	bne.n	800b622 <__sflush_r+0x32>
 800b68e:	682b      	ldr	r3, [r5, #0]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d0c6      	beq.n	800b622 <__sflush_r+0x32>
 800b694:	2b1d      	cmp	r3, #29
 800b696:	d001      	beq.n	800b69c <__sflush_r+0xac>
 800b698:	2b16      	cmp	r3, #22
 800b69a:	d11e      	bne.n	800b6da <__sflush_r+0xea>
 800b69c:	602f      	str	r7, [r5, #0]
 800b69e:	2000      	movs	r0, #0
 800b6a0:	e022      	b.n	800b6e8 <__sflush_r+0xf8>
 800b6a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6a6:	b21b      	sxth	r3, r3
 800b6a8:	e01b      	b.n	800b6e2 <__sflush_r+0xf2>
 800b6aa:	690f      	ldr	r7, [r1, #16]
 800b6ac:	2f00      	cmp	r7, #0
 800b6ae:	d0f6      	beq.n	800b69e <__sflush_r+0xae>
 800b6b0:	0793      	lsls	r3, r2, #30
 800b6b2:	680e      	ldr	r6, [r1, #0]
 800b6b4:	bf08      	it	eq
 800b6b6:	694b      	ldreq	r3, [r1, #20]
 800b6b8:	600f      	str	r7, [r1, #0]
 800b6ba:	bf18      	it	ne
 800b6bc:	2300      	movne	r3, #0
 800b6be:	eba6 0807 	sub.w	r8, r6, r7
 800b6c2:	608b      	str	r3, [r1, #8]
 800b6c4:	f1b8 0f00 	cmp.w	r8, #0
 800b6c8:	dde9      	ble.n	800b69e <__sflush_r+0xae>
 800b6ca:	6a21      	ldr	r1, [r4, #32]
 800b6cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b6ce:	4643      	mov	r3, r8
 800b6d0:	463a      	mov	r2, r7
 800b6d2:	4628      	mov	r0, r5
 800b6d4:	47b0      	blx	r6
 800b6d6:	2800      	cmp	r0, #0
 800b6d8:	dc08      	bgt.n	800b6ec <__sflush_r+0xfc>
 800b6da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6e2:	81a3      	strh	r3, [r4, #12]
 800b6e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6ec:	4407      	add	r7, r0
 800b6ee:	eba8 0800 	sub.w	r8, r8, r0
 800b6f2:	e7e7      	b.n	800b6c4 <__sflush_r+0xd4>
 800b6f4:	dfbffffe 	.word	0xdfbffffe

0800b6f8 <_fflush_r>:
 800b6f8:	b538      	push	{r3, r4, r5, lr}
 800b6fa:	690b      	ldr	r3, [r1, #16]
 800b6fc:	4605      	mov	r5, r0
 800b6fe:	460c      	mov	r4, r1
 800b700:	b913      	cbnz	r3, 800b708 <_fflush_r+0x10>
 800b702:	2500      	movs	r5, #0
 800b704:	4628      	mov	r0, r5
 800b706:	bd38      	pop	{r3, r4, r5, pc}
 800b708:	b118      	cbz	r0, 800b712 <_fflush_r+0x1a>
 800b70a:	6a03      	ldr	r3, [r0, #32]
 800b70c:	b90b      	cbnz	r3, 800b712 <_fflush_r+0x1a>
 800b70e:	f7ff f997 	bl	800aa40 <__sinit>
 800b712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d0f3      	beq.n	800b702 <_fflush_r+0xa>
 800b71a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b71c:	07d0      	lsls	r0, r2, #31
 800b71e:	d404      	bmi.n	800b72a <_fflush_r+0x32>
 800b720:	0599      	lsls	r1, r3, #22
 800b722:	d402      	bmi.n	800b72a <_fflush_r+0x32>
 800b724:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b726:	f7ff fb82 	bl	800ae2e <__retarget_lock_acquire_recursive>
 800b72a:	4628      	mov	r0, r5
 800b72c:	4621      	mov	r1, r4
 800b72e:	f7ff ff5f 	bl	800b5f0 <__sflush_r>
 800b732:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b734:	07da      	lsls	r2, r3, #31
 800b736:	4605      	mov	r5, r0
 800b738:	d4e4      	bmi.n	800b704 <_fflush_r+0xc>
 800b73a:	89a3      	ldrh	r3, [r4, #12]
 800b73c:	059b      	lsls	r3, r3, #22
 800b73e:	d4e1      	bmi.n	800b704 <_fflush_r+0xc>
 800b740:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b742:	f7ff fb75 	bl	800ae30 <__retarget_lock_release_recursive>
 800b746:	e7dd      	b.n	800b704 <_fflush_r+0xc>

0800b748 <__swhatbuf_r>:
 800b748:	b570      	push	{r4, r5, r6, lr}
 800b74a:	460c      	mov	r4, r1
 800b74c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b750:	2900      	cmp	r1, #0
 800b752:	b096      	sub	sp, #88	@ 0x58
 800b754:	4615      	mov	r5, r2
 800b756:	461e      	mov	r6, r3
 800b758:	da0d      	bge.n	800b776 <__swhatbuf_r+0x2e>
 800b75a:	89a3      	ldrh	r3, [r4, #12]
 800b75c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b760:	f04f 0100 	mov.w	r1, #0
 800b764:	bf14      	ite	ne
 800b766:	2340      	movne	r3, #64	@ 0x40
 800b768:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b76c:	2000      	movs	r0, #0
 800b76e:	6031      	str	r1, [r6, #0]
 800b770:	602b      	str	r3, [r5, #0]
 800b772:	b016      	add	sp, #88	@ 0x58
 800b774:	bd70      	pop	{r4, r5, r6, pc}
 800b776:	466a      	mov	r2, sp
 800b778:	f000 f848 	bl	800b80c <_fstat_r>
 800b77c:	2800      	cmp	r0, #0
 800b77e:	dbec      	blt.n	800b75a <__swhatbuf_r+0x12>
 800b780:	9901      	ldr	r1, [sp, #4]
 800b782:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b786:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b78a:	4259      	negs	r1, r3
 800b78c:	4159      	adcs	r1, r3
 800b78e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b792:	e7eb      	b.n	800b76c <__swhatbuf_r+0x24>

0800b794 <__smakebuf_r>:
 800b794:	898b      	ldrh	r3, [r1, #12]
 800b796:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b798:	079d      	lsls	r5, r3, #30
 800b79a:	4606      	mov	r6, r0
 800b79c:	460c      	mov	r4, r1
 800b79e:	d507      	bpl.n	800b7b0 <__smakebuf_r+0x1c>
 800b7a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b7a4:	6023      	str	r3, [r4, #0]
 800b7a6:	6123      	str	r3, [r4, #16]
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	6163      	str	r3, [r4, #20]
 800b7ac:	b003      	add	sp, #12
 800b7ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7b0:	ab01      	add	r3, sp, #4
 800b7b2:	466a      	mov	r2, sp
 800b7b4:	f7ff ffc8 	bl	800b748 <__swhatbuf_r>
 800b7b8:	9f00      	ldr	r7, [sp, #0]
 800b7ba:	4605      	mov	r5, r0
 800b7bc:	4639      	mov	r1, r7
 800b7be:	4630      	mov	r0, r6
 800b7c0:	f7ff fbb2 	bl	800af28 <_malloc_r>
 800b7c4:	b948      	cbnz	r0, 800b7da <__smakebuf_r+0x46>
 800b7c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7ca:	059a      	lsls	r2, r3, #22
 800b7cc:	d4ee      	bmi.n	800b7ac <__smakebuf_r+0x18>
 800b7ce:	f023 0303 	bic.w	r3, r3, #3
 800b7d2:	f043 0302 	orr.w	r3, r3, #2
 800b7d6:	81a3      	strh	r3, [r4, #12]
 800b7d8:	e7e2      	b.n	800b7a0 <__smakebuf_r+0xc>
 800b7da:	89a3      	ldrh	r3, [r4, #12]
 800b7dc:	6020      	str	r0, [r4, #0]
 800b7de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7e2:	81a3      	strh	r3, [r4, #12]
 800b7e4:	9b01      	ldr	r3, [sp, #4]
 800b7e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b7ea:	b15b      	cbz	r3, 800b804 <__smakebuf_r+0x70>
 800b7ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7f0:	4630      	mov	r0, r6
 800b7f2:	f000 f81d 	bl	800b830 <_isatty_r>
 800b7f6:	b128      	cbz	r0, 800b804 <__smakebuf_r+0x70>
 800b7f8:	89a3      	ldrh	r3, [r4, #12]
 800b7fa:	f023 0303 	bic.w	r3, r3, #3
 800b7fe:	f043 0301 	orr.w	r3, r3, #1
 800b802:	81a3      	strh	r3, [r4, #12]
 800b804:	89a3      	ldrh	r3, [r4, #12]
 800b806:	431d      	orrs	r5, r3
 800b808:	81a5      	strh	r5, [r4, #12]
 800b80a:	e7cf      	b.n	800b7ac <__smakebuf_r+0x18>

0800b80c <_fstat_r>:
 800b80c:	b538      	push	{r3, r4, r5, lr}
 800b80e:	4d07      	ldr	r5, [pc, #28]	@ (800b82c <_fstat_r+0x20>)
 800b810:	2300      	movs	r3, #0
 800b812:	4604      	mov	r4, r0
 800b814:	4608      	mov	r0, r1
 800b816:	4611      	mov	r1, r2
 800b818:	602b      	str	r3, [r5, #0]
 800b81a:	f7fa f960 	bl	8005ade <_fstat>
 800b81e:	1c43      	adds	r3, r0, #1
 800b820:	d102      	bne.n	800b828 <_fstat_r+0x1c>
 800b822:	682b      	ldr	r3, [r5, #0]
 800b824:	b103      	cbz	r3, 800b828 <_fstat_r+0x1c>
 800b826:	6023      	str	r3, [r4, #0]
 800b828:	bd38      	pop	{r3, r4, r5, pc}
 800b82a:	bf00      	nop
 800b82c:	20000fb0 	.word	0x20000fb0

0800b830 <_isatty_r>:
 800b830:	b538      	push	{r3, r4, r5, lr}
 800b832:	4d06      	ldr	r5, [pc, #24]	@ (800b84c <_isatty_r+0x1c>)
 800b834:	2300      	movs	r3, #0
 800b836:	4604      	mov	r4, r0
 800b838:	4608      	mov	r0, r1
 800b83a:	602b      	str	r3, [r5, #0]
 800b83c:	f7fa f95f 	bl	8005afe <_isatty>
 800b840:	1c43      	adds	r3, r0, #1
 800b842:	d102      	bne.n	800b84a <_isatty_r+0x1a>
 800b844:	682b      	ldr	r3, [r5, #0]
 800b846:	b103      	cbz	r3, 800b84a <_isatty_r+0x1a>
 800b848:	6023      	str	r3, [r4, #0]
 800b84a:	bd38      	pop	{r3, r4, r5, pc}
 800b84c:	20000fb0 	.word	0x20000fb0

0800b850 <_sbrk_r>:
 800b850:	b538      	push	{r3, r4, r5, lr}
 800b852:	4d06      	ldr	r5, [pc, #24]	@ (800b86c <_sbrk_r+0x1c>)
 800b854:	2300      	movs	r3, #0
 800b856:	4604      	mov	r4, r0
 800b858:	4608      	mov	r0, r1
 800b85a:	602b      	str	r3, [r5, #0]
 800b85c:	f7fa f968 	bl	8005b30 <_sbrk>
 800b860:	1c43      	adds	r3, r0, #1
 800b862:	d102      	bne.n	800b86a <_sbrk_r+0x1a>
 800b864:	682b      	ldr	r3, [r5, #0]
 800b866:	b103      	cbz	r3, 800b86a <_sbrk_r+0x1a>
 800b868:	6023      	str	r3, [r4, #0]
 800b86a:	bd38      	pop	{r3, r4, r5, pc}
 800b86c:	20000fb0 	.word	0x20000fb0

0800b870 <_init>:
 800b870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b872:	bf00      	nop
 800b874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b876:	bc08      	pop	{r3}
 800b878:	469e      	mov	lr, r3
 800b87a:	4770      	bx	lr

0800b87c <_fini>:
 800b87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b87e:	bf00      	nop
 800b880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b882:	bc08      	pop	{r3}
 800b884:	469e      	mov	lr, r3
 800b886:	4770      	bx	lr
