// Generated by gencpp from file krsbi2025/Actuator.msg
// DO NOT EDIT!


#ifndef KRSBI2025_MESSAGE_ACTUATOR_H
#define KRSBI2025_MESSAGE_ACTUATOR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace krsbi2025
{
template <class ContainerAllocator>
struct Actuator_
{
  typedef Actuator_<ContainerAllocator> Type;

  Actuator_()
    : thruster_1(0.0)
    , thruster_2(0.0)
    , thruster_3(0.0)
    , thruster_4(0.0)
    , thruster_5(0.0)
    , thruster_6(0.0)
    , thruster_7(0.0)
    , thruster_8(0.0)
    , thruster_9(0.0)
    , thruster_10(0.0)  {
    }
  Actuator_(const ContainerAllocator& _alloc)
    : thruster_1(0.0)
    , thruster_2(0.0)
    , thruster_3(0.0)
    , thruster_4(0.0)
    , thruster_5(0.0)
    , thruster_6(0.0)
    , thruster_7(0.0)
    , thruster_8(0.0)
    , thruster_9(0.0)
    , thruster_10(0.0)  {
  (void)_alloc;
    }



   typedef float _thruster_1_type;
  _thruster_1_type thruster_1;

   typedef float _thruster_2_type;
  _thruster_2_type thruster_2;

   typedef float _thruster_3_type;
  _thruster_3_type thruster_3;

   typedef float _thruster_4_type;
  _thruster_4_type thruster_4;

   typedef float _thruster_5_type;
  _thruster_5_type thruster_5;

   typedef float _thruster_6_type;
  _thruster_6_type thruster_6;

   typedef float _thruster_7_type;
  _thruster_7_type thruster_7;

   typedef float _thruster_8_type;
  _thruster_8_type thruster_8;

   typedef float _thruster_9_type;
  _thruster_9_type thruster_9;

   typedef float _thruster_10_type;
  _thruster_10_type thruster_10;





  typedef boost::shared_ptr< ::krsbi2025::Actuator_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::krsbi2025::Actuator_<ContainerAllocator> const> ConstPtr;

}; // struct Actuator_

typedef ::krsbi2025::Actuator_<std::allocator<void> > Actuator;

typedef boost::shared_ptr< ::krsbi2025::Actuator > ActuatorPtr;
typedef boost::shared_ptr< ::krsbi2025::Actuator const> ActuatorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::krsbi2025::Actuator_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::krsbi2025::Actuator_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::krsbi2025::Actuator_<ContainerAllocator1> & lhs, const ::krsbi2025::Actuator_<ContainerAllocator2> & rhs)
{
  return lhs.thruster_1 == rhs.thruster_1 &&
    lhs.thruster_2 == rhs.thruster_2 &&
    lhs.thruster_3 == rhs.thruster_3 &&
    lhs.thruster_4 == rhs.thruster_4 &&
    lhs.thruster_5 == rhs.thruster_5 &&
    lhs.thruster_6 == rhs.thruster_6 &&
    lhs.thruster_7 == rhs.thruster_7 &&
    lhs.thruster_8 == rhs.thruster_8 &&
    lhs.thruster_9 == rhs.thruster_9 &&
    lhs.thruster_10 == rhs.thruster_10;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::krsbi2025::Actuator_<ContainerAllocator1> & lhs, const ::krsbi2025::Actuator_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace krsbi2025

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::krsbi2025::Actuator_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::krsbi2025::Actuator_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::krsbi2025::Actuator_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::krsbi2025::Actuator_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::krsbi2025::Actuator_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::krsbi2025::Actuator_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::krsbi2025::Actuator_<ContainerAllocator> >
{
  static const char* value()
  {
    return "73a6109e0e969f8e11165c5ede486575";
  }

  static const char* value(const ::krsbi2025::Actuator_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x73a6109e0e969f8eULL;
  static const uint64_t static_value2 = 0x11165c5ede486575ULL;
};

template<class ContainerAllocator>
struct DataType< ::krsbi2025::Actuator_<ContainerAllocator> >
{
  static const char* value()
  {
    return "krsbi2025/Actuator";
  }

  static const char* value(const ::krsbi2025::Actuator_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::krsbi2025::Actuator_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 thruster_1\n"
"float32 thruster_2\n"
"float32 thruster_3\n"
"float32 thruster_4\n"
"float32 thruster_5\n"
"float32 thruster_6\n"
"float32 thruster_7\n"
"float32 thruster_8\n"
"float32 thruster_9\n"
"float32 thruster_10\n"
;
  }

  static const char* value(const ::krsbi2025::Actuator_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::krsbi2025::Actuator_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.thruster_1);
      stream.next(m.thruster_2);
      stream.next(m.thruster_3);
      stream.next(m.thruster_4);
      stream.next(m.thruster_5);
      stream.next(m.thruster_6);
      stream.next(m.thruster_7);
      stream.next(m.thruster_8);
      stream.next(m.thruster_9);
      stream.next(m.thruster_10);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Actuator_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::krsbi2025::Actuator_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::krsbi2025::Actuator_<ContainerAllocator>& v)
  {
    s << indent << "thruster_1: ";
    Printer<float>::stream(s, indent + "  ", v.thruster_1);
    s << indent << "thruster_2: ";
    Printer<float>::stream(s, indent + "  ", v.thruster_2);
    s << indent << "thruster_3: ";
    Printer<float>::stream(s, indent + "  ", v.thruster_3);
    s << indent << "thruster_4: ";
    Printer<float>::stream(s, indent + "  ", v.thruster_4);
    s << indent << "thruster_5: ";
    Printer<float>::stream(s, indent + "  ", v.thruster_5);
    s << indent << "thruster_6: ";
    Printer<float>::stream(s, indent + "  ", v.thruster_6);
    s << indent << "thruster_7: ";
    Printer<float>::stream(s, indent + "  ", v.thruster_7);
    s << indent << "thruster_8: ";
    Printer<float>::stream(s, indent + "  ", v.thruster_8);
    s << indent << "thruster_9: ";
    Printer<float>::stream(s, indent + "  ", v.thruster_9);
    s << indent << "thruster_10: ";
    Printer<float>::stream(s, indent + "  ", v.thruster_10);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KRSBI2025_MESSAGE_ACTUATOR_H
