// Generated by gencpp from file krsbi2025/SetPoint.msg
// DO NOT EDIT!


#ifndef KRSBI2025_MESSAGE_SETPOINT_H
#define KRSBI2025_MESSAGE_SETPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace krsbi2025
{
template <class ContainerAllocator>
struct SetPoint_
{
  typedef SetPoint_<ContainerAllocator> Type;

  SetPoint_()
    : roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , sway(0.0)
    , depth(0.0)
    , pos_x(0.0)
    , pox_y(0.0)
    , pos_z(0.0)  {
    }
  SetPoint_(const ContainerAllocator& _alloc)
    : roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , sway(0.0)
    , depth(0.0)
    , pos_x(0.0)
    , pox_y(0.0)
    , pos_z(0.0)  {
  (void)_alloc;
    }



   typedef float _roll_type;
  _roll_type roll;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _sway_type;
  _sway_type sway;

   typedef float _depth_type;
  _depth_type depth;

   typedef float _pos_x_type;
  _pos_x_type pos_x;

   typedef float _pox_y_type;
  _pox_y_type pox_y;

   typedef float _pos_z_type;
  _pos_z_type pos_z;





  typedef boost::shared_ptr< ::krsbi2025::SetPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::krsbi2025::SetPoint_<ContainerAllocator> const> ConstPtr;

}; // struct SetPoint_

typedef ::krsbi2025::SetPoint_<std::allocator<void> > SetPoint;

typedef boost::shared_ptr< ::krsbi2025::SetPoint > SetPointPtr;
typedef boost::shared_ptr< ::krsbi2025::SetPoint const> SetPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::krsbi2025::SetPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::krsbi2025::SetPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::krsbi2025::SetPoint_<ContainerAllocator1> & lhs, const ::krsbi2025::SetPoint_<ContainerAllocator2> & rhs)
{
  return lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw &&
    lhs.sway == rhs.sway &&
    lhs.depth == rhs.depth &&
    lhs.pos_x == rhs.pos_x &&
    lhs.pox_y == rhs.pox_y &&
    lhs.pos_z == rhs.pos_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::krsbi2025::SetPoint_<ContainerAllocator1> & lhs, const ::krsbi2025::SetPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace krsbi2025

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::krsbi2025::SetPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::krsbi2025::SetPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::krsbi2025::SetPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::krsbi2025::SetPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::krsbi2025::SetPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::krsbi2025::SetPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::krsbi2025::SetPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1a5cf8fac147949090cf079711c45d1e";
  }

  static const char* value(const ::krsbi2025::SetPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1a5cf8fac1479490ULL;
  static const uint64_t static_value2 = 0x90cf079711c45d1eULL;
};

template<class ContainerAllocator>
struct DataType< ::krsbi2025::SetPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "krsbi2025/SetPoint";
  }

  static const char* value(const ::krsbi2025::SetPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::krsbi2025::SetPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 roll\n"
"float32 pitch\n"
"float32 yaw\n"
"float32 sway\n"
"float32 depth\n"
"float32 pos_x\n"
"float32 pox_y\n"
"float32 pos_z\n"
;
  }

  static const char* value(const ::krsbi2025::SetPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::krsbi2025::SetPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.sway);
      stream.next(m.depth);
      stream.next(m.pos_x);
      stream.next(m.pox_y);
      stream.next(m.pos_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::krsbi2025::SetPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::krsbi2025::SetPoint_<ContainerAllocator>& v)
  {
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "sway: ";
    Printer<float>::stream(s, indent + "  ", v.sway);
    s << indent << "depth: ";
    Printer<float>::stream(s, indent + "  ", v.depth);
    s << indent << "pos_x: ";
    Printer<float>::stream(s, indent + "  ", v.pos_x);
    s << indent << "pox_y: ";
    Printer<float>::stream(s, indent + "  ", v.pox_y);
    s << indent << "pos_z: ";
    Printer<float>::stream(s, indent + "  ", v.pos_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KRSBI2025_MESSAGE_SETPOINT_H
